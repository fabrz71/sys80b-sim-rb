
C:\Users\Fabrizio\AppData\Local\Temp\VMBuilds\sys80b-sim-rb\teensy40\Debug/sys80b-sim-rb.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 00 55 01 00 00 00 00 00                 ...`.U......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b74      	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a74      	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4874      	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a74      	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a73      	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	4974      	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	428a      	cmp	r2, r1
6000104e:	d00f      	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	4b73      	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	429a      	cmp	r2, r3
60001054:	d20c      	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	43d4      	mvns	r4, r2
60001058:	4608      	mov	r0, r1
6000105a:	4423      	add	r3, r4
6000105c:	f023 0303 	bic.w	r3, r3, #3
60001060:	3304      	adds	r3, #4
60001062:	440b      	add	r3, r1
		*dest++ = *src++;
60001064:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000106a:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	d1f9      	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	4a6c      	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	496d      	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	428a      	cmp	r2, r1
60001076:	d00f      	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	4b6c      	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	429a      	cmp	r2, r3
6000107c:	d20c      	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	43d4      	mvns	r4, r2
60001080:	4608      	mov	r0, r1
60001082:	4423      	add	r3, r4
60001084:	f023 0303 	bic.w	r3, r3, #3
60001088:	3304      	adds	r3, #4
6000108a:	440b      	add	r3, r1
		*dest++ = *src++;
6000108c:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001092:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	d1f9      	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	4a65      	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	4b66      	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	429a      	cmp	r2, r3
6000109e:	d20b      	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	43d0      	mvns	r0, r2
600010a2:	4611      	mov	r1, r2
		*dest++ = 0;
600010a4:	2400      	movs	r4, #0
600010a6:	4403      	add	r3, r0
600010a8:	f023 0303 	bic.w	r3, r3, #3
600010ac:	3304      	adds	r3, #4
600010ae:	4413      	add	r3, r2
600010b0:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	428b      	cmp	r3, r1
600010b6:	d1fb      	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	4a5f      	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010be:	4b5f      	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	6011      	str	r1, [r2, #0]
600010c2:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010c6:	4a5e      	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	f843 2f04 	str.w	r2, [r3, #4]!
600010cc:	4299      	cmp	r1, r3
600010ce:	d1fb      	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	4b5c      	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	2180      	movs	r1, #128	; 0x80
600010d4:	4a5c      	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	f803 1b01 	strb.w	r1, [r3], #1
600010da:	4293      	cmp	r3, r2
600010dc:	d1fb      	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	4c5b      	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	4e5a      	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	4b56      	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	4943      	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	69f3      	ldr	r3, [r6, #28]
60001112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6000111a:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	6a73      	ldr	r3, [r6, #36]	; 0x24
6000111e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001126:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	f000 f8b4 	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	4a48      	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	4b48      	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	4949      	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	4946      	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	4a46      	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	4847      	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	4844      	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	4944      	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	f043 0301 	orr.w	r3, r3, #1
6000116c:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	6803      	ldr	r3, [r0, #0]
60001170:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	f000 f8f3 	bl	6000135c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	4840      	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	f000 fb7a 	bl	60001880 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	bf00      	nop
6000118e:	bf00      	nop
60001190:	bf00      	nop
60001192:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	4a3a      	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	4b39      	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011b4:	07d2      	lsls	r2, r2, #31
600011b6:	d408      	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	4932      	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011c4:	f042 0201 	orr.w	r2, r2, #1
600011c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	4a2e      	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	4c2f      	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	6893      	ldr	r3, [r2, #8]
600011d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011d4:	6093      	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	f000 fb4b 	bl	60001870 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	2b13      	cmp	r3, #19
600011de:	d9fc      	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	f000 f97c 	bl	600014dc <usb_init>
	analog_init();
600011e4:	f000 f9f0 	bl	600015c8 <analog_init>
	pwm_init();
600011e8:	f000 fb2a 	bl	60001840 <__pwm_init_veneer>
	tempmon_init();
600011ec:	f000 f8e8 	bl	600013c0 <tempmon_init>

	startup_late_hook();
600011f0:	f000 fb42 	bl	60001878 <__startup_late_hook_veneer>
600011f4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600011fa:	d3fb      	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	f000 fb34 	bl	60001868 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	f000 fb26 	bl	60001850 <__main_veneer>
60001204:	e7fe      	b.n	60001204 <ResetHandler+0x1d0>
60001206:	bf00      	nop
60001208:	400ac000 	.word	0x400ac000
6000120c:	aaaaaabf 	.word	0xaaaaaabf
60001210:	00200007 	.word	0x00200007
60001214:	20068000 	.word	0x20068000
60001218:	00000000 	.word	0x00000000
6000121c:	600018a0 	.word	0x600018a0
60001220:	000112c0 	.word	0x000112c0
60001224:	20000000 	.word	0x20000000
60001228:	60012b6c 	.word	0x60012b6c
6000122c:	200029a0 	.word	0x200029a0
60001230:	200029a0 	.word	0x200029a0
60001234:	200052c0 	.word	0x200052c0
60001238:	e000ed88 	.word	0xe000ed88
6000123c:	200033fc 	.word	0x200033fc
60001240:	0000adbd 	.word	0x0000adbd
60001244:	e000e400 	.word	0xe000e400
60001248:	e000e4a0 	.word	0xe000e4a0
6000124c:	400d8000 	.word	0x400d8000
60001250:	400fc000 	.word	0x400fc000
60001254:	e000ed08 	.word	0xe000ed08
60001258:	e000e014 	.word	0xe000e014
6000125c:	e000e018 	.word	0xe000e018
60001260:	0000c035 	.word	0x0000c035
60001264:	e000edfc 	.word	0xe000edfc
60001268:	20200000 	.word	0x20200000
6000126c:	0000c139 	.word	0x0000c139
60001270:	e0001000 	.word	0xe0001000
60001274:	e0001004 	.word	0xe0001004
60001278:	20002d50 	.word	0x20002d50
6000127c:	23c34600 	.word	0x23c34600
60001280:	40084000 	.word	0x40084000
60001284:	400d4000 	.word	0x400d4000
60001288:	56c00000 	.word	0x56c00000
6000128c:	20002d58 	.word	0x20002d58
60001290:	20003400 	.word	0x20003400
60001294:	2018101b 	.word	0x2018101b
60001298:	13110d0c 	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	b5f0      	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	4a1d      	ldr	r2, [pc, #116]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	2100      	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	4b1d      	ldr	r3, [pc, #116]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	f04f 0e10 	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	481c      	ldr	r0, [pc, #112]	; (6000131c <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	2401      	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	4f1c      	ldr	r7, [pc, #112]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	4e1d      	ldr	r6, [pc, #116]	; (60001324 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b0:	4d1d      	ldr	r5, [pc, #116]	; (60001328 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b2:	6001      	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	4f1b      	ldr	r7, [pc, #108]	; (6000132c <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012be:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c0:	4e1b      	ldr	r6, [pc, #108]	; (60001330 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	4d1c      	ldr	r5, [pc, #112]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	4f1b      	ldr	r7, [pc, #108]	; (60001338 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	4e1b      	ldr	r6, [pc, #108]	; (6000133c <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012ce:	4d1c      	ldr	r5, [pc, #112]	; (60001340 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d0:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	4f1b      	ldr	r7, [pc, #108]	; (60001344 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d6:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d8:	4e1b      	ldr	r6, [pc, #108]	; (60001348 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	4d1c      	ldr	r5, [pc, #112]	; (6000134c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012de:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e0:	4f1b      	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e2:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012e4:	4e1b      	ldr	r6, [pc, #108]	; (60001354 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012e6:	4d1c      	ldr	r5, [pc, #112]	; (60001358 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012ea:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012ec:	601d      	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ee:	6004      	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	f3bf 8f4f 	dsb	sy
	asm("isb");
600012f4:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012fc:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001300:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001304:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001308:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
6000130c:	f842 3c88 	str.w	r3, [r2, #-136]
60001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001312:	bf00      	nop
60001314:	e000ed9c 	.word	0xe000ed9c
60001318:	e000eda0 	.word	0xe000eda0
6000131c:	e000ed94 	.word	0xe000ed94
60001320:	03080025 	.word	0x03080025
60001324:	00200011 	.word	0x00200011
60001328:	07020021 	.word	0x07020021
6000132c:	20000012 	.word	0x20000012
60001330:	13080025 	.word	0x13080025
60001334:	20200013 	.word	0x20200013
60001338:	130b0027 	.word	0x130b0027
6000133c:	40000014 	.word	0x40000014
60001340:	13100033 	.word	0x13100033
60001344:	60000015 	.word	0x60000015
60001348:	070b002f 	.word	0x070b002f
6000134c:	70000016 	.word	0x70000016
60001350:	070b0035 	.word	0x070b0035
60001354:	70000017 	.word	0x70000017
60001358:	030b002f 	.word	0x030b002f

6000135c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000135c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135e:	4a17      	ldr	r2, [pc, #92]	; (600013bc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001360:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001362:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001366:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000136a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000136e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001372:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001376:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001378:	f013 0f02 	tst.w	r3, #2
6000137c:	d006      	beq.n	6000138c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000137e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001380:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001382:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001384:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001386:	f013 0f02 	tst.w	r3, #2
6000138a:	d1f8      	bne.n	6000137e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000138c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001390:	d101      	bne.n	60001396 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	6155      	str	r5, [r2, #20]
			continue;
60001394:	e7ef      	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001396:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000139a:	d101      	bne.n	600013a0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139c:	6156      	str	r6, [r2, #20]
			continue;
6000139e:	e7ea      	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013a0:	2b00      	cmp	r3, #0
600013a2:	dae8      	bge.n	60001376 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013a8:	d001      	beq.n	600013ae <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013aa:	6191      	str	r1, [r2, #24]
			continue;
600013ac:	e7e3      	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ae:	065b      	lsls	r3, r3, #25
600013b0:	d401      	bmi.n	600013b6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b2:	6157      	str	r7, [r2, #20]
			continue;
600013b4:	e7df      	b.n	60001376 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013b6:	bcf0      	pop	{r4, r5, r6, r7}
600013b8:	4770      	bx	lr
600013ba:	bf00      	nop
600013bc:	400d8000 	.word	0x400d8000

600013c0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013c0:	4a3b      	ldr	r2, [pc, #236]	; (600014b0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013c2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600013c6:	493b      	ldr	r1, [pc, #236]	; (600014b4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600013c8:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013ca:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013ce:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600013d2:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013d4:	f8df e100 	ldr.w	lr, [pc, #256]	; 600014d8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013d8:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600013da:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600013de:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600013e2:	4f35      	ldr	r7, [pc, #212]	; (600014b8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013e4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600013e6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600013ea:	4e34      	ldr	r6, [pc, #208]	; (600014bc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600013ec:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013f0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600013f4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013f8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001400:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001404:	ee07 4a90 	vmov	s15, r4
60001408:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000140c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000140e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001412:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001416:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000141a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000141c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001424:	4d26      	ldr	r5, [pc, #152]	; (600014c0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001426:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000142a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000142c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001430:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001434:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001436:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000143a:	4e22      	ldr	r6, [pc, #136]	; (600014c4 <tempmon_init+0x104>)
6000143c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000143e:	4922      	ldr	r1, [pc, #136]	; (600014c8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001440:	4c22      	ldr	r4, [pc, #136]	; (600014cc <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001442:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001446:	ee07 3a90 	vmov	s15, r3
6000144a:	4b21      	ldr	r3, [pc, #132]	; (600014d0 <tempmon_init+0x110>)
6000144c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001450:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001454:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001458:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000145c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001464:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001468:	ee15 3a90 	vmov	r3, s11
6000146c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001474:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001478:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000147e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001486:	430b      	orrs	r3, r1
60001488:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000148c:	ee17 3a90 	vmov	r3, s15
60001490:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001498:	430b      	orrs	r3, r1
6000149a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000149e:	6813      	ldr	r3, [r2, #0]
600014a0:	f043 0302 	orr.w	r3, r3, #2
600014a4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014a6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014a8:	4b0a      	ldr	r3, [pc, #40]	; (600014d4 <tempmon_init+0x114>)
600014aa:	2201      	movs	r2, #1
600014ac:	601a      	str	r2, [r3, #0]
600014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014b0:	400d8180 	.word	0x400d8180
600014b4:	401f4400 	.word	0x401f4400
600014b8:	20002d84 	.word	0x20002d84
600014bc:	20002d88 	.word	0x20002d88
600014c0:	20002d80 	.word	0x20002d80
600014c4:	20003400 	.word	0x20003400
600014c8:	0fff0000 	.word	0x0fff0000
600014cc:	e000e440 	.word	0xe000e440
600014d0:	0000ae99 	.word	0x0000ae99
600014d4:	e000e108 	.word	0xe000e108
600014d8:	20002d7c 	.word	0x20002d7c

600014dc <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600014dc:	4b30      	ldr	r3, [pc, #192]	; (600015a0 <usb_init+0xc4>)
600014de:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600014e2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600014e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600014e8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600014ec:	f000 f9b8 	bl	60001860 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014f0:	492c      	ldr	r1, [pc, #176]	; (600015a4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600014f2:	482d      	ldr	r0, [pc, #180]	; (600015a8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014f4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014f8:	4c2c      	ldr	r4, [pc, #176]	; (600015ac <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014fa:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014fe:	4b2c      	ldr	r3, [pc, #176]	; (600015b0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001500:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001504:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001508:	6822      	ldr	r2, [r4, #0]
6000150a:	4013      	ands	r3, r2
6000150c:	b91b      	cbnz	r3, 60001516 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000150e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001512:	079a      	lsls	r2, r3, #30
60001514:	d01a      	beq.n	6000154c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001516:	4b24      	ldr	r3, [pc, #144]	; (600015a8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001518:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000151c:	4a23      	ldr	r2, [pc, #140]	; (600015ac <usb_init+0xd0>)
6000151e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001520:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001522:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001526:	f041 0102 	orr.w	r1, r1, #2
6000152a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000152e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001532:	079b      	lsls	r3, r3, #30
60001534:	d4fb      	bmi.n	6000152e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001536:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000153a:	491e      	ldr	r1, [pc, #120]	; (600015b4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000153c:	4b1b      	ldr	r3, [pc, #108]	; (600015ac <usb_init+0xd0>)
6000153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001542:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001544:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001546:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001548:	f000 f986 	bl	60001858 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000154c:	4d1a      	ldr	r5, [pc, #104]	; (600015b8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000154e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001550:	4b16      	ldr	r3, [pc, #88]	; (600015ac <usb_init+0xd0>)
60001552:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001556:	4c14      	ldr	r4, [pc, #80]	; (600015a8 <usb_init+0xcc>)
60001558:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000155a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000155c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000155e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001560:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001562:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001566:	f44f 7220 	mov.w	r2, #640	; 0x280
6000156a:	f000 f96d 	bl	60001848 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000156e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001572:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001576:	f240 1343 	movw	r3, #323	; 0x143
6000157a:	4a10      	ldr	r2, [pc, #64]	; (600015bc <usb_init+0xe0>)
6000157c:	4910      	ldr	r1, [pc, #64]	; (600015c0 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000157e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001580:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001582:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001586:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000158a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000158e:	4a0d      	ldr	r2, [pc, #52]	; (600015c4 <usb_init+0xe8>)
60001590:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001594:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001596:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001598:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000159c:	bd70      	pop	{r4, r5, r6, pc}
6000159e:	bf00      	nop
600015a0:	400d8000 	.word	0x400d8000
600015a4:	400fc000 	.word	0x400fc000
600015a8:	402e0000 	.word	0x402e0000
600015ac:	400d9000 	.word	0x400d9000
600015b0:	001e1c00 	.word	0x001e1c00
600015b4:	e000e28c 	.word	0xe000e28c
600015b8:	20005000 	.word	0x20005000
600015bc:	20003400 	.word	0x20003400
600015c0:	0000aff5 	.word	0x0000aff5
600015c4:	e000e10c 	.word	0xe000e10c

600015c8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015c8:	4b11      	ldr	r3, [pc, #68]	; (60001610 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015ca:	4912      	ldr	r1, [pc, #72]	; (60001614 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015ce:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015d0:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600015d4:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015d6:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015d8:	f240 65b7 	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600015dc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600015de:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600015e0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600015e4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015e6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600015e8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
600015ec:	061b      	lsls	r3, r3, #24
600015ee:	d4fc      	bmi.n	600015ea <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015f0:	4b09      	ldr	r3, [pc, #36]	; (60001618 <analog_init+0x50>)
600015f2:	f240 60b7 	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600015f6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600015f8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015fa:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600015fc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600015fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001600:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001604:	d1fb      	bne.n	600015fe <analog_init+0x36>
	calibrating = 0;
60001606:	4a05      	ldr	r2, [pc, #20]	; (6000161c <analog_init+0x54>)
60001608:	7013      	strb	r3, [r2, #0]
}
6000160a:	bc30      	pop	{r4, r5}
6000160c:	4770      	bx	lr
6000160e:	bf00      	nop
60001610:	400fc000 	.word	0x400fc000
60001614:	400c4000 	.word	0x400c4000
60001618:	400c8000 	.word	0x400c8000
6000161c:	20002fbe 	.word	0x20002fbe

60001620 <credits_ratio>:
60001620:	04030201 08070605 02010a09 06050403     ................
60001630:	0a090807 03010201 00000001              ............

6000163c <coins_ratio>:
6000163c:	01010101 01010101 02020101 02020202     ................
6000164c:	02020202 04040303 00000005              ............

60001658 <max_credits>:
60001658:	140f0a08                                ....

6000165c <revByte>:
6000165c:	c0408000 e060a020 d0509010 f070b030     ..@. .`...P.0.p.
6000166c:	c8488808 e868a828 d8589818 f878b838     ..H.(.h...X.8.x.
6000167c:	c4448404 e464a424 d4549414 f474b434     ..D.$.d...T.4.t.
6000168c:	cc4c8c0c ec6cac2c dc5c9c1c fc7cbc3c     ..L.,.l...\.<.|.
6000169c:	c2428202 e262a222 d2529212 f272b232     ..B.".b...R.2.r.
600016ac:	ca4a8a0a ea6aaa2a da5a9a1a fa7aba3a     ..J.*.j...Z.:.z.
600016bc:	c6468606 e666a626 d6569616 f676b636     ..F.&.f...V.6.v.
600016cc:	ce4e8e0e ee6eae2e de5e9e1e fe7ebe3e     ..N...n...^.>.~.
600016dc:	c1418101 e161a121 d1519111 f171b131     ..A.!.a...Q.1.q.
600016ec:	c9498909 e969a929 d9599919 f979b939     ..I.).i...Y.9.y.
600016fc:	c5458505 e565a525 d5559515 f575b535     ..E.%.e...U.5.u.
6000170c:	cd4d8d0d ed6dad2d dd5d9d1d fd7dbd3d     ..M.-.m...].=.}.
6000171c:	c3438303 e363a323 d3539313 f373b333     ..C.#.c...S.3.s.
6000172c:	cb4b8b0b eb6bab2b db5b9b1b fb7bbb3b     ..K.+.k...[.;.{.
6000173c:	c7478707 e767a727 d7579717 f777b737     ..G.'.g...W.7.w.
6000174c:	cf4f8f0f ef6faf2f df5f9f1f ff7fbf3f     ..O./.o..._.?...

6000175c <SdFile::make83Name(char const*, unsigned char*)::data>:
6000175c:	5e3e3c7c 2f3f3d2b 2c3b5d5b 005c222a     |<>^+=?/[];,*"\.

6000176c <usb_string_product_name_default>:
6000176c:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
6000177c:	00610069 0000006c                       i.a.l...

60001784 <usb_string_manufacturer_name_default>:
60001784:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001794:	00690075 006f006e                       u.i.n.o.

6000179c <string0>:
6000179c:	04090304                                ....

600017a0 <usb_config_descriptor_12>:
600017a0:	00430209 c0000102 00040932 02020100     ..C.....2.......
600017b0:	24050001 05011000 01010124 06022404     ...$....$....$..
600017c0:	00062405 82050701 10001003 00010409     .$..............
600017d0:	00000a02 03050700 00004002 02840507     .........@......
600017e0:	00000040                                @...

600017e4 <usb_config_descriptor_480>:
600017e4:	00430209 c0000102 00040932 02020100     ..C.....2.......
600017f4:	24050001 05011000 01010124 06022404     ...$....$....$..
60001804:	00062405 82050701 10001003 00010409     .$..............
60001814:	00000a02 03050700 00020002 02840507     ................
60001824:	00000200                                ....

60001828 <qualifier_descriptor>:
60001828:	0200060a 40000002 ffff0001              .......@....

60001834 <_init>:
60001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001836:	bf00      	nop
60001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000183a:	bc08      	pop	{r3}
6000183c:	469e      	mov	lr, r3
6000183e:	4770      	bx	lr

60001840 <__pwm_init_veneer>:
60001840:	f85f f000 	ldr.w	pc, [pc]	; 60001844 <__pwm_init_veneer+0x4>
60001844:	0000c8c5 	.word	0x0000c8c5

60001848 <__memset_veneer>:
60001848:	f85f f000 	ldr.w	pc, [pc]	; 6000184c <__memset_veneer+0x4>
6000184c:	0000d371 	.word	0x0000d371

60001850 <__main_veneer>:
60001850:	f85f f000 	ldr.w	pc, [pc]	; 60001854 <__main_veneer+0x4>
60001854:	0000c159 	.word	0x0000c159

60001858 <__delay_veneer>:
60001858:	f85f f000 	ldr.w	pc, [pc]	; 6000185c <__delay_veneer+0x4>
6000185c:	0000a815 	.word	0x0000a815

60001860 <__usb_init_serialnumber_veneer>:
60001860:	f85f f000 	ldr.w	pc, [pc]	; 60001864 <__usb_init_serialnumber_veneer+0x4>
60001864:	0000b7d9 	.word	0x0000b7d9

60001868 <____libc_init_array_veneer>:
60001868:	f85f f000 	ldr.w	pc, [pc]	; 6000186c <____libc_init_array_veneer+0x4>
6000186c:	0000cbd1 	.word	0x0000cbd1

60001870 <__startup_early_hook_veneer>:
60001870:	f85f f000 	ldr.w	pc, [pc]	; 60001874 <__startup_early_hook_veneer+0x4>
60001874:	0000add5 	.word	0x0000add5

60001878 <__startup_late_hook_veneer>:
60001878:	f85f f000 	ldr.w	pc, [pc]	; 6000187c <__startup_late_hook_veneer+0x4>
6000187c:	0000add9 	.word	0x0000add9

60001880 <__set_arm_clock_veneer>:
60001880:	f85f f000 	ldr.w	pc, [pc]	; 60001884 <__set_arm_clock_veneer+0x4>
60001884:	0000a551 	.word	0x0000a551

60001888 <__init_array_start>:
60001888:	00000045 	.word	0x00000045
6000188c:	000004b5 	.word	0x000004b5
60001890:	0000703d 	.word	0x0000703d
60001894:	00007dbd 	.word	0x00007dbd
60001898:	000081b1 	.word	0x000081b1
6000189c:	00009079 	.word	0x00009079

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	4c05b510 	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	7823      	ldrb	r3, [r4, #0]
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>
	}
	__enable_irq();
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xe>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	.short	0xbd10
      38:	29a0      	cmp	r1, #160	; 0xa0
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	12c4      	asrs	r4, r0, #11
      42:	0001      	.short	0x0001

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	2b00      	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	4718      	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	bf00      	nop
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	29a4      	cmp	r1, #164	; 0xa4
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	12c4      	asrs	r4, r0, #11
  ADC2_CFG = mode1;
      72:	0001      	movs	r1, r0
  
  if(num >= 4){
      74:	29a0      	cmp	r1, #160	; 0xa0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <setup>:
      7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      80:	4e39      	ldr	r6, [pc, #228]	; (168 <setup+0xec>)
      82:	2400      	.short	0x2400
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      84:	4b39      	ldr	r3, [pc, #228]	; (16c <setup+0xf0>)
      86:	4630      	.short	0x4630
    msg.disableLCDOutput();
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
    msg.prFreeMem();
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
      88:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1d0 <setup+0x154>
void millisRoutine(uint32_t& ms);
void checkBoardButtons(uint32_t& ms);
void updateLedGrid(LG_mode mode);
bool readSerialInput();

void setup() { 
      8c:	f006801c 	.word	0xf006801c
    loopCounter = 0;
      90:	f857 2302 	ldr.w	r2, [r7, <undefined>]
    board.begin();
    msg.disableLCDOutput();
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
      94:	00a0f106 	.word	0x00a0f106
		lcd = &lcdispl; lcdOutputEnabled = true; 
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
      98:	f886 40be 	strb.w	r4, [r6, #190]	; 0xbe

void setup() { 
    loopCounter = 0;
    board.begin();
    msg.disableLCDOutput();
    msg.setPostDelay(0);
      9c:	309cf886 	.word	0x309cf886
	inline void enableSerialOutput() { serialOutputEnabled = true; }
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
	inline void disableLogOutput() { logFileEnabled = false; }
	inline void setPostDelay(uint16_t delay) { mdelay = delay; }
      a0:	f8a6 40bc 	strh.w	r4, [r6, #188]	; 0xbc
    board.ledGridMode = LG_MODE;
      a4:	f006 fcb4 	bl	6a10 <Msg::prFreeMem()>
    msg.prFreeMem();
      a8:	f1064931 	.word	0xf1064931
      ac:	00a0      	lsls	r0, r4, #2
      ae:	f006 fb93 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
      b2:	f44f 6062 	mov.w	r0, #3616	; 0xe20
      b6:	f00c      	.short	0xf00c
      b8:	f857 4631 	ldr.w	r4, [r7, <undefined>]
      bc:	4604      	mov	r4, r0
      be:	f000      	.short	0xf000
      c0:	fba3 4b2c 			; <UNDEFINED> instruction: 0xfba34b2c
    game = new _GAME_IMPLEM_(board);
    sys = game;
      c4:	00a0f106 	.word	0x00a0f106
      c8:	492b      	ldr	r1, [pc, #172]	; (178 <setup+0xfc>)
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
    msg.prFreeMem();
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
    game = new _GAME_IMPLEM_(board);
      ca:	601c      	str	r4, [r3, #0]
    msg.disableLCDOutput();
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
    msg.prFreeMem();
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
      cc:	f8c8 4000 	str.w	r4, [r8]
    game = new _GAME_IMPLEM_(board);
    sys = game;
      d0:	f006 fb82 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
    msg.outln(F("Connecting hardware..."));
    //delay(100);
    //sys->connectHardware(board);
      d4:	2094      	movs	r0, #148	; 0x94
      d6:	f00c f847 	bl	c168 <operator new(unsigned int)>
	int _partsCount;
	//byte firstArgIdx; // first argument index (0 if none)

public:
	CmdExecutor() { _hw = nullptr; _sys = nullptr; };
	CmdExecutor(Board_Sys80b* board, PinGame* sys) { _hw = board; _sys = sys; };
      da:	4a28      	ldr	r2, [pc, #160]	; (17c <setup+0x100>)
      dc:	46044b28 	.word	0x46044b28
      e0:	4928      	ldr	r1, [pc, #160]	; (184 <setup+0x108>)
      e2:	f100 054c 	add.w	r5, r0, #76	; 0x4c
      e6:	6002      	.short	0x6002
      e8:	f100 078c 	add.w	r7, r0, #140	; 0x8c
      ec:	60434a26 	.word	0x60434a26
      f0:	4b26      	ldr	r3, [pc, #152]	; (18c <setup+0x110>)
      f2:	6081      	str	r1, [r0, #8]
      f4:	60c2      	str	r2, [r0, #12]
      f6:	4926      	ldr	r1, [pc, #152]	; (190 <setup+0x114>)
      f8:	4a26      	ldr	r2, [pc, #152]	; (194 <setup+0x118>)
      fa:	6103      	str	r3, [r0, #16]
      fc:	4b26      	ldr	r3, [pc, #152]	; (198 <setup+0x11c>)
      fe:	6141      	.short	0x6141
     100:	6182      	str	r2, [r0, #24]
     102:	4926      	.short	0x4926
     104:	4a26      	ldr	r2, [pc, #152]	; (1a0 <setup+0x124>)
     106:	61c3      	.short	0x61c3
     108:	4b26      	ldr	r3, [pc, #152]	; (1a4 <setup+0x128>)
     10a:	6201      	.short	0x6201
     10c:	6242      	str	r2, [r0, #36]	; 0x24
     10e:	4926      	.short	0x4926
     110:	4a26      	ldr	r2, [pc, #152]	; (1ac <setup+0x130>)
     112:	6283      	str	r3, [r0, #40]	; 0x28
     114:	62c14b26 	.word	0x62c14b26
     118:	6302      	str	r2, [r0, #48]	; 0x30
     11a:	4926      	ldr	r1, [pc, #152]	; (1b4 <setup+0x138>)
     11c:	4a26      	ldr	r2, [pc, #152]	; (1b8 <setup+0x13c>)
     11e:	6343      	.short	0x6343
     120:	f8d8 9000 	ldr.w	r9, [r8]
     124:	63814b25 	.word	0x63814b25
     128:	63c2      	str	r2, [r0, #60]	; 0x3c
     12a:	6403      	str	r3, [r0, #64]	; 0x40
     12c:	4628      	mov	r0, r5
     12e:	3510      	adds	r5, #16
     130:	f00c2100 	.word	0xf00c2100
     134:	f963 42bd 	vld1.32	{d20-d23}, [r3 :256]!
     138:	4b21d1f8 	.word	0x4b21d1f8
    executor = new CmdExecutor(&board, game);
    //sys->reset();
     13c:	4921      	ldr	r1, [pc, #132]	; (1c4 <setup+0x148>)
     13e:	4822      	ldr	r0, [pc, #136]	; (1c8 <setup+0x14c>)
     140:	6466      	str	r6, [r4, #68]	; 0x44
     142:	f8c4      	.short	0xf8c4
     144:	9048      	str	r0, [sp, #288]	; 0x120
    //game = new _GAME_IMPLEM_();
    game = new _GAME_IMPLEM_(board);
    sys = game;
    msg.outln(F("Connecting hardware..."));
    //delay(100);
    //sys->connectHardware(board);
     146:	601c      	str	r4, [r3, #0]
    executor = new CmdExecutor(&board, game);
    //sys->reset();
     148:	f006 fb46 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
    msg.outln(F("Starting..."));
    //msg.setPostDelay(50);
     14c:	f8d8 0000 	ldr.w	r0, [r8]
     150:	6803      	ldr	r3, [r0, #0]
     152:	69db      	ldr	r3, [r3, #28]
     154:	4b1d4798 	.word	0x4b1d4798
    game->begin();

     158:	2200      	movs	r2, #0
    millisRoutineT = 0;
     15a:	481b      	ldr	r0, [pc, #108]	; (1c8 <setup+0x14c>)
    executor = new CmdExecutor(&board, game);
    //sys->reset();
    msg.outln(F("Starting..."));
    //msg.setPostDelay(50);
    game->begin();

     15c:	601a      	str	r2, [r3, #0]
    millisRoutineT = 0;
    msg.prFreeMem();
     15e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    //sys->reset();
    msg.outln(F("Starting..."));
    //msg.setPostDelay(50);
    game->begin();

    millisRoutineT = 0;
     162:	f006 bc55 	b.w	6a10 <Msg::prFreeMem()>
     166:	bf00      	nop
     168:	29c0      	cmp	r1, #192	; 0xc0
     16a:	2000      	movs	r0, #0
     16c:	29bc      	cmp	r1, #188	; 0xbc
     16e:	2000      	movs	r0, #0
     170:	0000      	movs	r0, r0
     172:	2000      	movs	r0, #0
     174:	2ab8      	cmp	r2, #184	; 0xb8
     176:	2000      	movs	r0, #0
     178:	0018      	movs	r0, r3
     17a:	2000      	movs	r0, #0
     17c:	0030      	movs	r0, r6
     17e:	2000      	movs	r0, #0
     180:	0038      	movs	r0, r7
     182:	2000      	movs	r0, #0
     184:	0044      	lsls	r4, r0, #1
     186:	2000      	movs	r0, #0
     188:	0054      	lsls	r4, r2, #1
     18a:	2000      	movs	r0, #0
     18c:	0524      	lsls	r4, r4, #20
     18e:	2000      	movs	r0, #0
     190:	2000005c 	.word	0x2000005c
     194:	0068      	lsls	r0, r5, #1
     196:	2000      	movs	r0, #0
     198:	0074      	lsls	r4, r6, #1
     19a:	2000      	movs	r0, #0
     19c:	007c      	lsls	r4, r7, #1
     19e:	2000      	movs	r0, #0
     1a0:	0088      	lsls	r0, r1, #2
     1a2:	2000      	movs	r0, #0
     1a4:	008c      	lsls	r4, r1, #2
     1a6:	2000      	movs	r0, #0
     1a8:	20000094 	.word	0x20000094
     1ac:	00a4      	lsls	r4, r4, #2
     1ae:	2000      	movs	r0, #0
     1b0:	00ac      	lsls	r4, r5, #2
     1b2:	2000      	movs	r0, #0
     1b4:	00b0      	lsls	r0, r6, #2
     1b6:	2000      	.short	0x2000
     1b8:	00b4      	lsls	r4, r6, #2
     1ba:	2000      	movs	r0, #0
     1bc:	00bc      	lsls	r4, r7, #2
     1be:	2000      	movs	r0, #0
     1c0:	2abc      	cmp	r2, #188	; 0xbc
     1c2:	2000      	movs	r0, #0
     1c4:	00c4      	lsls	r4, r0, #3
     1c6:	2000      	movs	r0, #0
     1c8:	20002a60 	.word	0x20002a60
     1cc:	2ab4      	cmp	r2, #180	; 0xb4
     1ce:	2000      	.short	0x2000
     1d0:	2ac0      	cmp	r2, #192	; 0xc0
     1d2:	2000      	.short	0x2000

000001d4 <checkBoardButtons(unsigned long&)>:
    //msg.out(" III ");
    game->millisRoutine(ms);
}

// PRB buttons check
void checkBoardButtons(uint32_t& ms) {
     1d4:	6803      	ldr	r3, [r0, #0]
     1d6:	06db      	lsls	r3, r3, #27
     1d8:	4770d000 	.word	0x4770d000
    checkBoardButtons(ms);
    //msg.out(" III ");
    game->millisRoutine(ms);
}

// PRB buttons check
     1dc:	b510      	push	{r4, lr}
     1de:	4604      	.short	0x4604
void checkBoardButtons(uint32_t& ms) {
    if ((ms & 0x1f) == 0) { // every 32 ms
     1e0:	4816      	ldr	r0, [pc, #88]	; (23c <checkBoardButtons(unsigned long&)+0x68>)
     1e2:	f005      	.short	0xf005
     1e4:	ff21 b900 	vmls.i32	d11, d1, d0
     1e8:	4814bd10 	.word	0x4814bd10
        if (board.readButtonsChange()) { // ONLY ON CHANGE EVENT...
     1ec:	f005 ff06 	bl	5ffc <Board_Sys80b::readButtons()>
            Button b = board.readButtons(); // Debounced on-board buttons update
            UserKey k = NO_KEY;
     1f0:	d8212803 	.word	0xd8212803
     1f4:	e8df f000 	tbb	[pc, r0]
     1f8:	020e141a 	.word	0x020e141a
            switch (b) {
            case NEXT_BUTT:
     1fc:	4910      	ldr	r1, [pc, #64]	; (240 <checkBoardButtons(unsigned long&)+0x6c>)
     1fe:	4811      	ldr	r0, [pc, #68]	; (244 <checkBoardButtons(unsigned long&)+0x70>)
     200:	fb1af006 	.word	0xfb1af006
                msg.outln("NEXT button pressed");
     204:	2103      	movs	r1, #3
                break;
            case NONE_BUTT:
                msg.outln("button released");
                k = NO_KEY;
                break;
            }
     206:	4b10      	.short	0x4b10
     208:	4622      	mov	r2, r4
     20a:	6818      	.short	0x6818
            game->setKeyPressed(k, ms);
        }
    }
     20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                break;
            case NONE_BUTT:
                msg.outln("button released");
                k = NO_KEY;
                break;
            }
     210:	b9b4f005 	.word	0xb9b4f005
                break;
            case BACK_BUTT:
                msg.outln("BACK button pressed");
                k = LEFTADV_KEY;
                break;
            case ENTER_BUTT:
     214:	490d      	ldr	r1, [pc, #52]	; (24c <checkBoardButtons(unsigned long&)+0x78>)
     216:	480b      	.short	0x480b
     218:	f006 fb0e 	bl	6838 <Msg::outln(char const*)>
                msg.outln("ENTER button pressed");
     21c:	2101      	movs	r1, #1
     21e:	e7f2      	.short	0xe7f2
            switch (b) {
            case NEXT_BUTT:
                msg.outln("NEXT button pressed");
                k = RIGHTADV_KEY;
                break;
            case BACK_BUTT:
     220:	490b      	ldr	r1, [pc, #44]	; (250 <checkBoardButtons(unsigned long&)+0x7c>)
     222:	4808      	.short	0x4808
     224:	f006 fb08 	bl	6838 <Msg::outln(char const*)>
                msg.outln("BACK button pressed");
     228:	e7ec2102 	.word	0xe7ec2102
                break;
            case ENTER_BUTT:
                msg.outln("ENTER button pressed");
                k = REPLAY_KEY;
                break;
            case NONE_BUTT:
     22c:	4909      	ldr	r1, [pc, #36]	; (254 <checkBoardButtons(unsigned long&)+0x80>)
     22e:	4805      	.short	0x4805
     230:	f006 fb02 	bl	6838 <Msg::outln(char const*)>
                msg.outln("button released");
     234:	e7e62100 	.word	0xe7e62100

// PRB buttons check
void checkBoardButtons(uint32_t& ms) {
    if ((ms & 0x1f) == 0) { // every 32 ms
        if (board.readButtonsChange()) { // ONLY ON CHANGE EVENT...
            Button b = board.readButtons(); // Debounced on-board buttons update
     238:	2100      	movs	r1, #0
     23a:	e7e4      	b.n	206 <checkBoardButtons(unsigned long&)+0x32>
     23c:	200029c0 	.word	0x200029c0
     240:	00d0      	lsls	r0, r2, #3
     242:	2000      	.short	0x2000
     244:	2a60      	cmp	r2, #96	; 0x60
     246:	2000      	movs	r0, #0
     248:	20002ac0 	.word	0x20002ac0
     24c:	00f8      	lsls	r0, r7, #3
     24e:	2000      	.short	0x2000
     250:	00e4      	lsls	r4, r4, #3
     252:	2000      	movs	r0, #0
     254:	20000110 	.word	0x20000110

00000258 <updateLedGrid(LG_mode)>:
void updateLedGrid(LG_mode mode) {
    byte b = 0;
    static byte r = 0;
    //static bool show = true;

    //r = game->switchGrid.getCurrentStrobe();
     258:	2801      	cmp	r0, #1
            }
            game->setKeyPressed(k, ms);
        }
    }
}

     25a:	b5f8      	.short	0xb5f8
void updateLedGrid(LG_mode mode) {
    byte b = 0;
    static byte r = 0;
    //static bool show = true;

    //r = game->switchGrid.getCurrentStrobe();
     25c:	d030      	beq.n	2c0 <updateLedGrid(LG_mode)+0x68>
     25e:	d31f      	.short	0xd31f
     260:	2802      	cmp	r0, #2
     262:	d11c      	bne.n	29e <updateLedGrid(LG_mode)+0x46>
            else b &= 0xfe;
        }
        //if (show) Serial.printf("s%d -> %d\n", r, b);
        //if (r == 7) show = false;
        break;
    case LG_LAMPS:
     264:	78314e25 	.word	0x78314e25
     268:	2905      	cmp	r1, #5
     26a:	d93c      	.short	0xd93c
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
     26c:	1f8d      	subs	r5, r1, #6
     26e:	1f0b      	.short	0x1f0b
        //if (show) Serial.printf("s%d -> %d\n", r, b);
        //if (r == 7) show = false;
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
     270:	2400      	movs	r4, #0
            b = 0;
     272:	00ed      	.short	0x00ed
     274:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     278:	da15      	bge.n	2a6 <updateLedGrid(LG_mode)+0x4e>
     27a:	4f21      	ldr	r7, [pc, #132]	; (300 <updateLedGrid(LG_mode)+0xa8>)
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
                b <<= 1;
     27c:	683b      	ldr	r3, [r7, #0]
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
     27e:	0064      	.short	0x0064
                b <<= 1;
     280:	b2a9      	uxth	r1, r5
        //if (r == 7) show = false;
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
     282:	3501      	.short	0x3501
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
                b <<= 1;
     284:	6898      	ldr	r0, [r3, #8]
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
     286:	b2e4      	.short	0xb2e4
                b <<= 1;
     288:	f002 fac0 	bl	280c <BitMappedSet::getChanges4(unsigned short)>
     28c:	f044b108 	.word	0xf044b108
     290:	0401      	lsls	r1, r0, #16
        //if (r == 7) show = false;
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
     292:	7831      	.short	0x7831
     294:	1f0b      	subs	r3, r1, #4
     296:	ebb5      	.short	0xebb5
     298:	0f83      	lsrs	r3, r0, #30
     29a:	dbef      	blt.n	27c <updateLedGrid(LG_mode)+0x24>
     29c:	e003      	b.n	2a6 <updateLedGrid(LG_mode)+0x4e>
     29e:	bdf8      	.short	0xbdf8
     2a0:	4e16      	ldr	r6, [pc, #88]	; (2fc <updateLedGrid(LG_mode)+0xa4>)
            game->setKeyPressed(k, ms);
        }
    }
}

void updateLedGrid(LG_mode mode) {
     2a2:	2400      	.short	0x2400
     2a4:	7831      	ldrb	r1, [r6, #0]
    case LG_OFF:
        break;
        b = 0;
    default:
        return;
    }
     2a6:	4817      	.short	0x4817
     2a8:	1c4b      	adds	r3, r1, #1
     2aa:	4622      	.short	0x4622
     2ac:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
     2b0:	f0067033 	.word	0xf0067033
     2b4:	f96d 7833 	vld2.8	{d23-d24}, [sp :256], r3
    board.ledGrid->setRowByte(r++, b);
     2b8:	f003 0307 	and.w	r3, r3, #7
     2bc:	bdf87033 	.word	0xbdf87033
    static byte r = 0;
    //static bool show = true;

    //r = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
     2c0:	4e0e      	ldr	r6, [pc, #56]	; (2fc <updateLedGrid(LG_mode)+0xa4>)
     2c2:	4b0f      	.short	0x4b0f
     2c4:	7831      	ldrb	r1, [r6, #0]
	inline byte getCurrentRow() { return returns_latch[_strobe]; }
	inline byte getLastChanges() { return lastRowChanges; }
	// return 0xff when no changes occurred on current row
	inline byte getLastChangedSwitch() { return lastSwitchChanged; }
	inline bool getLastChangedSwitchState() { return lastSwitchChState; }
	inline byte getRow(byte r) { return returns_latch[r & 7]; }
     2c6:	681a      	ldr	r2, [r3, #0]
     2c8:	0307f001 	.word	0x0307f001
        b = sys->switchGrid.getRow(r);
     2cc:	2907      	cmp	r1, #7
     2ce:	4413      	add	r3, r2
     2d0:	4258f893 	.word	0x4258f893
     2d4:	d1e7      	bne.n	2a6 <updateLedGrid(LG_mode)+0x4e>
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     2d6:	4b0c      	.short	0x4b0c
     2d8:	689b      	ldr	r3, [r3, #8]
     2da:	06db      	lsls	r3, r3, #27
     2dc:	d50b      	bpl.n	2f6 <updateLedGrid(LG_mode)+0x9e>
        if (r == 7) { // slam switch rendered as switch 77 (strobe #7, return #7)
     2de:	f044      	.short	0xf044
     2e0:	0401      	lsls	r1, r0, #16
     2e2:	b2e4      	uxtb	r4, r4
     2e4:	4b06e7df 	.word	0x4b06e7df
            else b &= 0xfe;
        }
        //if (show) Serial.printf("s%d -> %d\n", r, b);
        //if (r == 7) show = false;
        break;
    case LG_LAMPS:
     2e8:	681b      	ldr	r3, [r3, #0]
     2ea:	6898      	.short	0x6898
     2ec:	f002 fa86 	bl	27fc <BitMappedSet::getStates8(unsigned short)>
     2f0:	46047831 	.word	0x46047831
     2f4:	e7d7      	b.n	2a6 <updateLedGrid(LG_mode)+0x4e>
    //r = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
        b = sys->switchGrid.getRow(r);
        if (r == 7) { // slam switch rendered as switch 77 (strobe #7, return #7)
            if (sys->readSlamSwitch()) b |= 0x01;
     2f6:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
     2fa:	e7d4      	b.n	2a6 <updateLedGrid(LG_mode)+0x4e>
     2fc:	20002ac4 	.word	0x20002ac4
     300:	2ab8      	cmp	r2, #184	; 0xb8
     302:	2000      	.short	0x2000
     304:	29c0      	cmp	r1, #192	; 0xc0
     306:	2000      	.short	0x2000
     308:	c000      	stmia	r0!, {}
     30a:	4200      	.short	0x4200

0000030c <millisRoutine(unsigned long&)>:
    msg.outln("us work time)\n");
    loopCounter++;
}

void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
     30c:	4b08      	ldr	r3, [pc, #32]	; (330 <millisRoutine(unsigned long&)+0x24>)
    msg.out("(");
    msg.out(cumWorkTime);
    msg.outln("us work time)\n");
    loopCounter++;
}

     30e:	b510      	.short	0xb510
     310:	4604      	mov	r4, r0
void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
     312:	f893      	.short	0xf893
     314:	009c      	lsls	r4, r3, #2
     316:	f7ff ff9f 	bl	258 <updateLedGrid(LG_mode)>
    updateLedGrid(board.ledGridMode); // LED grid update
    //msg.out(" II");
     31a:	4620      	.short	0x4620
     31c:	f7ff ff5a 	bl	1d4 <checkBoardButtons(unsigned long&)>
    checkBoardButtons(ms);
    //msg.out(" III ");
     320:	4b04      	ldr	r3, [pc, #16]	; (334 <millisRoutine(unsigned long&)+0x28>)
     322:	4621      	.short	0x4621
     324:	6818      	ldr	r0, [r3, #0]
     326:	6803      	.short	0x6803
    game->millisRoutine(ms);
     328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
    updateLedGrid(board.ledGridMode); // LED grid update
    //msg.out(" II");
    checkBoardButtons(ms);
    //msg.out(" III ");
     32c:	47186a5b 	.word	0x47186a5b
     330:	29c0      	cmp	r1, #192	; 0xc0
     332:	2000      	movs	r0, #0
     334:	2ac0      	cmp	r2, #192	; 0xc0
     336:	2000      	.short	0x2000

00000338 <readSerialInput()>:
        return;
    }
    board.ledGrid->setRowByte(r++, b);
    r &= 0x7;
}

     338:	b510      	push	{r4, lr}
     33a:	b088      	.short	0xb088
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     33c:	f00b fd30 	bl	bda0 <usb_serial_available>
bool readSerialInput() {
    bool ret = false;
     340:	2800      	cmp	r0, #0
     342:	dd18      	.short	0xdd18
	if (Serial.available() > 0) {
     344:	2278      	movs	r2, #120	; 0x78
     346:	4668      	mov	r0, sp
     348:	490d      	ldr	r1, [pc, #52]	; (380 <readSerialInput()+0x48>)
     34a:	f00b ffe1 	bl	c310 <Stream::readString(unsigned int)>
		String st = Serial.readString();
     34e:	4b0d      	.short	0x4b0d
     350:	4669      	mov	r1, sp
     352:	a804      	.short	0xa804
     354:	681c      	ldr	r4, [r3, #0]
     356:	f00c      	.short	0xf00c
     358:	f877 a904 	ldr??.w	sl, [r7], #-4
     35c:	f0024620 	.word	0xf0024620
     360:	fad9 4604 			; <UNDEFINED> instruction: 0xfad94604
     364:	f00ca804 	.word	0xf00ca804
     368:	f809 4668 	strb.w	r4, [r9, <undefined>]
    r &= 0x7;
}

bool readSerialInput() {
    bool ret = false;
	if (Serial.available() > 0) {
     36c:	f806f00c 	.word	0xf806f00c
		String st = Serial.readString();
		ret = executor->execCmd(st);
        //delete st;
	}
	return ret;
     370:	4620      	mov	r0, r4
     372:	b008      	.short	0xb008
     374:	bd10      	pop	{r4, pc}
    }
    board.ledGrid->setRowByte(r++, b);
    r &= 0x7;
}

bool readSerialInput() {
     376:	2400      	.short	0x2400
	if (Serial.available() > 0) {
		String st = Serial.readString();
		ret = executor->execCmd(st);
        //delete st;
	}
	return ret;
     378:	4620      	mov	r0, r4
     37a:	b008      	.short	0xb008
     37c:	bd10      	pop	{r4, pc}
     37e:	bf00      	.short	0xbf00
     380:	1fdc      	subs	r4, r3, #7
     382:	2000      	.short	0x2000
     384:	2abc      	cmp	r2, #188	; 0xbc
     386:	2000      	.short	0x2000

00000388 <loop>:

    millisRoutineT = 0;
    msg.prFreeMem();
}

// top-most Teensy loop
     388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
void loop() {
    //msg.setPostDelay(0);
     38c:	b085493c 	.word	0xb085493c
     390:	483c      	ldr	r0, [pc, #240]	; (484 <loop+0xfc>)

    uint32_t t, loopStartT; // [ms]
    uint32_t cumWorkTime, batchPeriod, t1, dt; // [us]
    byte busy_perc; // [%]
    uint32_t loops;

     392:	2500      	.short	0x2500
    msg.prFreeMem();
}

// top-most Teensy loop
void loop() {
    //msg.setPostDelay(0);
     394:	f006 fbb4 	bl	6b00 <Msg::out(char const*)>
    msg.out("Loop #");
     398:	220a4b3b 	.word	0x220a4b3b
     39c:	4839      	ldr	r0, [pc, #228]	; (484 <loop+0xfc>)
     39e:	8819      	.short	0x8819
    uint32_t t, loopStartT; // [ms]
    uint32_t cumWorkTime, batchPeriod, t1, dt; // [us]
    byte busy_perc; // [%]
    uint32_t loops;

    loops = 0;
     3a0:	462e      	mov	r6, r5
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     3a2:	4f3a      	.short	0x4f3a
}

// top-most Teensy loop
void loop() {
    //msg.setPostDelay(0);
    msg.out("Loop #");
     3a4:	f006 fbae 	bl	6b04 <Msg::out(unsigned long, int)>
    msg.out(loopCounter);
     3a8:	48364939 	.word	0x48364939
     3ac:	f006 fa44 	bl	6838 <Msg::outln(char const*)>
     3b0:	80fcf8df 	.word	0x80fcf8df
    msg.outln("...");
    //msg.setPostDelay(50);
    //prFreeMem();
     3b4:	f7ff ffc0 	bl	338 <readSerialInput()>
     3b8:	90dcf8df 	.word	0x90dcf8df
     3bc:	f8d7 b000 	ldr.w	fp, [r7]
    uint32_t loops;

    loops = 0;
    cumWorkTime = 0;
    batchPeriod = BATCH_DELAY * 1000u;
    loopStartT = millis();
     3c0:	4c3446ae 	.word	0x4c3446ae

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     3c4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 49c <loop+0x114>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     3c8:	f5ce6820 	.word	0xf5ce6820
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     3cc:	717a      	strb	r2, [r7, #5]
     3ce:	f8d8      	.short	0xf8d8
     3d0:	3000      	adds	r0, #0
     3d2:	fbaa      	.short	0xfbaa
     3d4:	2303      	movs	r3, #3
     3d6:	0c9b      	lsrs	r3, r3, #18
     3d8:	fb03 f101 	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     3dc:	6823      	ldr	r3, [r4, #0]
     3de:	1a1b      	subs	r3, r3, r0
     3e0:	4299      	cmp	r1, r3
     3e2:	d8fb      	bhi.n	3dc <loop+0x54>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     3e4:	6838      	ldr	r0, [r7, #0]
    dt = 0;

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt);
      t = millis();

     3e6:	f8d9      	.short	0xf8d9
     3e8:	1000      	asrs	r0, r0, #32
     3ea:	4b2b      	.short	0x4b2b
     3ec:	4288      	cmp	r0, r1
    batchPeriod = BATCH_DELAY * 1000u;
    loopStartT = millis();
    dt = 0;

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt);
     3ee:	9003      	str	r0, [sp, #12]
      t = millis();

     3f0:	9300      	str	r3, [sp, #0]
     3f2:	d010      	beq.n	416 <loop+0x8e>
      if (t != millisRoutineT) {
     3f4:	f00a fa74 	bl	a8e0 <micros>
     3f8:	9001      	str	r0, [sp, #4]
        t1 = micros();
     3fa:	a804      	add	r0, sp, #16
     3fc:	9b00      	ldr	r3, [sp, #0]
     3fe:	f850 2d04 	ldr.w	r2, [r0, #-4]!
     402:	601a      	str	r2, [r3, #0]
        millisRoutineT = t;
     404:	ff82f7ff 	.word	0xff82f7ff
		millisRoutine(t);
     408:	f00a fa6a 	bl	a8e0 <micros>
     40c:	ebc19901 	.word	0xebc19901
     410:	0e00      	lsrs	r0, r0, #24
     412:	9903      	ldr	r1, [sp, #12]
        dt = micros() - t1;
     414:	ebcb4476 	.word	0xebcb4476
        cumWorkTime += dt;
      }

      loops++;
     418:	0101      	lsls	r1, r0, #4
        millisRoutineT = t;
		millisRoutine(t);
        dt = micros() - t1;
        cumWorkTime += dt;
      }

     41a:	3501      	.short	0x3501
      loops++;
     41c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
     420:	2364d3d2 	.word	0x2364d3d2
    //ls = "Running.. (";
    //ls += busy_perc;
    //ls += "%)";
    //board.lcdprn(1, ls);
    //processSerialInput();

     424:	491d      	ldr	r1, [pc, #116]	; (49c <loop+0x114>)
     426:	220a      	movs	r2, #10
     428:	fb034816 	.word	0xfb034816
     42c:	f306 fba1 	bl	306b72 <_flashimagelen+0x2f1672>
     430:	f3c13103 	.word	0xf3c13103
     434:	4187      	sbcs	r7, r0
     436:	f006      	.short	0xf006
     438:	fb65 4919 	smmlsr	r9, r5, r9, r4
    msg.out(busy_perc);
     43c:	f0064811 	.word	0xf0064811
     440:	fb5f 220a 	smmla	r2, pc, sl, r2	; <UNPREDICTABLE>
    msg.out("% - ");
     444:	4629      	mov	r1, r5
     446:	480f      	.short	0x480f
     448:	f006 fb5c 	bl	6b04 <Msg::out(unsigned long, int)>
    msg.out(loops);
     44c:	480d4915 	.word	0x480d4915
     450:	f006 fb56 	bl	6b00 <Msg::out(char const*)>
    msg.out(" loops/s ");
     454:	480b4914 	.word	0x480b4914
     458:	f006 fb52 	bl	6b00 <Msg::out(char const*)>
    msg.out("(");
     45c:	220a4631 	.word	0x220a4631
     460:	4808      	ldr	r0, [pc, #32]	; (484 <loop+0xfc>)
     462:	f006      	.short	0xf006
     464:	fb4f 4911 	smlsdx	r9, pc, r1, r4	; <UNPREDICTABLE>
    msg.out(cumWorkTime);
     468:	f0064806 	.word	0xf0064806
     46c:	f9e5 4b06 	vld4.32	{d20[0],d21[0],d22[0],d23[0]}, [r5], r6
    msg.outln("us work time)\n");
     470:	881b4a05 	.word	0x881b4a05
     474:	3301      	adds	r3, #1
     476:	8013      	.short	0x8013
    loopCounter++;
     478:	b005      	add	sp, #20
     47a:	e8bd      	.short	0xe8bd
     47c:	8ff0      	ldrh	r0, [r6, #62]	; 0x3e
     47e:	bf00      	nop
     480:	0120      	lsls	r0, r4, #4
     482:	2000      	.short	0x2000
     484:	2a60      	cmp	r2, #96	; 0x60
     486:	2000      	.short	0x2000
     488:	29bc      	cmp	r1, #188	; 0xbc
     48a:	2000      	movs	r0, #0
     48c:	2d58      	cmp	r5, #88	; 0x58
     48e:	2000      	movs	r0, #0
     490:	00cc      	lsls	r4, r1, #3
     492:	2000      	movs	r0, #0
     494:	e0001004 	.word	0xe0001004
     498:	2ab4      	cmp	r2, #180	; 0xb4
     49a:	2000      	.short	0x2000
     49c:	de83      	udf	#131	; 0x83
     49e:	431b      	orrs	r3, r3
     4a0:	20000128 	.word	0x20000128
     4a4:	0130      	lsls	r0, r6, #4
     4a6:	2000      	.short	0x2000
     4a8:	013c      	lsls	r4, r7, #4
     4aa:	2000      	.short	0x2000
     4ac:	0140      	lsls	r0, r0, #5
     4ae:	2000      	.short	0x2000
     4b0:	1fa8      	subs	r0, r5, #6
     4b2:	2000      	.short	0x2000

000004b4 <_GLOBAL__sub_I_millisRoutineT>:
	if (Serial.available() > 0) {
		String st = Serial.readString();
		ret = executor->execCmd(st);
        //delete st;
	}
	return ret;
     4b4:	b510      	push	{r4, lr}
#define BATCH_DELAY 1000    // statistic loop duration (ms)
//#define LG_MODE LG_LIGHTS
#define LG_MODE LG_LAMPS

uint32_t millisRoutineT; // system time of last routine call [ms]
Board_Sys80b board;
     4b6:	4c05      	ldr	r4, [pc, #20]	; (4cc <_GLOBAL__sub_I_millisRoutineT+0x18>)
     4b8:	4620      	mov	r0, r4
     4ba:	f005 fc83 	bl	5dc4 <Board_Sys80b::Board_Sys80b()>
     4be:	4620      	mov	r0, r4
     4c0:	4a03      	ldr	r2, [pc, #12]	; (4d0 <_GLOBAL__sub_I_millisRoutineT+0x1c>)
     4c2:	4904      	.short	0x4904
	if (Serial.available() > 0) {
		String st = Serial.readString();
		ret = executor->execCmd(st);
        //delete st;
	}
	return ret;
     4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define BATCH_DELAY 1000    // statistic loop duration (ms)
//#define LG_MODE LG_LIGHTS
#define LG_MODE LG_LAMPS

uint32_t millisRoutineT; // system time of last routine call [ms]
Board_Sys80b board;
     4c8:	bb6cf00c 	.word	0xbb6cf00c
     4cc:	29c0      	cmp	r1, #192	; 0xc0
     4ce:	2000      	movs	r0, #0
     4d0:	1f4c      	subs	r4, r1, #5
     4d2:	2000      	.short	0x2000
     4d4:	5ec1      	ldrsh	r1, [r0, r3]
	...

000004d8 <Sys80b::onTestButtonPressed()>:
	virtual void updateSound(uint32_t& ms);
	inline uint16_t getDisplayOutput() { return display.LastData();	}
	virtual void onSwitchEvent(byte sw, bool st) {}
	virtual void onSlamSwitchEvent(bool active) { if (active) Serial.println("Slam switch!"); }
	//virtual void onKeyPressed(UserKey key) = 0;
	virtual void onTestButtonPressed() {}
     4d8:	bf004770 	.word	0xbf004770

000004dc <PinGame::onSlamSwitchEvent(bool)>:
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
	}
	inline void switchOffAllLights() { LightGroup::activeLightSet->switchOffAllLights(); }
	inline void tilt() { /* TODO.. */ }
	inline void onSlamSwitchEvent(bool active) { if (active && !_gameOver) tilt(); }
     4dc:	4770      	bx	lr
     4de:	bf00      	.short	0xbf00

000004e0 <BigHouse::~BigHouse()>:
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     4e0:	4bbe      	ldr	r3, [pc, #760]	; (7dc <BigHouse::~BigHouse()+0x2fc>)
     4e2:	b570      	push	{r4, r5, r6, lr}
     4e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
	delete extraball_ls;
     4e8:	f8d0 556c 	ldr.w	r5, [r0, #1388]	; 0x56c
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     4ec:	4604      	mov	r4, r0
     4ee:	6003      	str	r3, [r0, #0]
     4f0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
	delete extraball_ls;
     4f4:	b135      	cbz	r5, 504 <BigHouse::~BigHouse()+0x24>
// The group has its own dimension and name.
// LightGroup offers functions for common effects on all
// the lights of the group, as: setAll(), rotate...(), shift...().
// It operates on the lights of the active LightSet referred
// by public static pointer <activeLightSet>.
class LightGroup {
     4f6:	4628      	mov	r0, r5
     4f8:	ff40f00b 	.word	0xff40f00b
     4fc:	4628      	mov	r0, r5
     4fe:	211c      	movs	r1, #28
     500:	f00b fe38 	bl	c174 <operator delete(void*, unsigned int)>
	delete lastchance_ls;
     504:	5570f8d4 	.word	0x5570f8d4
     508:	b135      	cbz	r5, 518 <BigHouse::~BigHouse()+0x38>
     50a:	4628      	mov	r0, r5
     50c:	f00b ff36 	bl	c37c <String::~String()>
     510:	4628      	mov	r0, r5
     512:	211c      	.short	0x211c
     514:	f00b fe2e 	bl	c174 <operator delete(void*, unsigned int)>
	delete special_ls;
     518:	f8d4 5574 	ldr.w	r5, [r4, #1396]	; 0x574
     51c:	b135      	cbz	r5, 52c <BigHouse::~BigHouse()+0x4c>
     51e:	4628      	.short	0x4628
     520:	f00b ff2c 	bl	c37c <String::~String()>
     524:	4628      	mov	r0, r5
     526:	211c      	movs	r1, #28
     528:	f00b fe24 	bl	c174 <operator delete(void*, unsigned int)>
	delete wall_ls;
     52c:	f8d4 5578 	ldr.w	r5, [r4, #1400]	; 0x578
     530:	b135      	cbz	r5, 540 <BigHouse::~BigHouse()+0x60>
     532:	4628      	mov	r0, r5
     534:	f00b ff22 	bl	c37c <String::~String()>
     538:	211c4628 	.word	0x211c4628
     53c:	f00b fe1a 	bl	c174 <operator delete(void*, unsigned int)>
	delete break_ls;
     540:	f8d4 557c 	ldr.w	r5, [r4, #1404]	; 0x57c
     544:	b135      	cbz	r5, 554 <BigHouse::~BigHouse()+0x74>
     546:	4628      	mov	r0, r5
     548:	f00b ff18 	bl	c37c <String::~String()>
     54c:	4628      	mov	r0, r5
     54e:	211c      	.short	0x211c
     550:	f00b fe10 	bl	c174 <operator delete(void*, unsigned int)>
	delete jail_ls;
     554:	f8d4 5580 	ldr.w	r5, [r4, #1408]	; 0x580
     558:	b135      	cbz	r5, 568 <BigHouse::~BigHouse()+0x88>
     55a:	4628      	mov	r0, r5
     55c:	ff0ef00b 	.word	0xff0ef00b
     560:	4628      	mov	r0, r5
     562:	211c      	.short	0x211c
     564:	f00b fe06 	bl	c174 <operator delete(void*, unsigned int)>
	delete multi_ls;
     568:	f8d4 5584 	ldr.w	r5, [r4, #1412]	; 0x584
     56c:	b135      	cbz	r5, 57c <BigHouse::~BigHouse()+0x9c>
     56e:	4628      	mov	r0, r5
     570:	ff04f00b 	.word	0xff04f00b
     574:	4628      	mov	r0, r5
     576:	211c      	movs	r1, #28
     578:	f00b fdfc 	bl	c174 <operator delete(void*, unsigned int)>
	delete cellblock_ls;
     57c:	f8d4 5588 	ldr.w	r5, [r4, #1416]	; 0x588
     580:	b135      	cbz	r5, 590 <BigHouse::~BigHouse()+0xb0>
     582:	4628      	mov	r0, r5
     584:	fefaf00b 	.word	0xfefaf00b
     588:	4628      	mov	r0, r5
     58a:	211c      	.short	0x211c
     58c:	f00b fdf2 	bl	c174 <operator delete(void*, unsigned int)>
	delete lightshow_ls;
     590:	558cf8d4 	.word	0x558cf8d4
     594:	b135      	cbz	r5, 5a4 <BigHouse::~BigHouse()+0xc4>
     596:	4628      	.short	0x4628
     598:	f00b fef0 	bl	c37c <String::~String()>
     59c:	4628      	mov	r0, r5
     59e:	211c      	.short	0x211c
     5a0:	f00b fde8 	bl	c174 <operator delete(void*, unsigned int)>
	delete droptarget_ls;
     5a4:	f8d4 5590 	ldr.w	r5, [r4, #1424]	; 0x590
     5a8:	b135      	cbz	r5, 5b8 <BigHouse::~BigHouse()+0xd8>
     5aa:	4628      	mov	r0, r5
     5ac:	f00b fee6 	bl	c37c <String::~String()>
     5b0:	4628      	mov	r0, r5
     5b2:	211c      	movs	r1, #28
     5b4:	f00b fdde 	bl	c174 <operator delete(void*, unsigned int)>
	delete show1_ls;
     5b8:	f8d4 5594 	ldr.w	r5, [r4, #1428]	; 0x594
     5bc:	b135      	cbz	r5, 5cc <BigHouse::~BigHouse()+0xec>
     5be:	4628      	.short	0x4628
     5c0:	f00b fedc 	bl	c37c <String::~String()>
     5c4:	211c4628 	.word	0x211c4628
     5c8:	f00b fdd4 	bl	c174 <operator delete(void*, unsigned int)>
	delete show2_ls;
     5cc:	f8d4 5598 	ldr.w	r5, [r4, #1432]	; 0x598
     5d0:	b135      	cbz	r5, 5e0 <BigHouse::~BigHouse()+0x100>
     5d2:	4628      	mov	r0, r5
     5d4:	fed2f00b 	.word	0xfed2f00b
     5d8:	4628      	mov	r0, r5
     5da:	211c      	.short	0x211c
     5dc:	f00b fdca 	bl	c174 <operator delete(void*, unsigned int)>
	delete show3_ls;
     5e0:	f8d4 559c 	ldr.w	r5, [r4, #1436]	; 0x59c
     5e4:	b135      	cbz	r5, 5f4 <BigHouse::~BigHouse()+0x114>
     5e6:	4628      	.short	0x4628
     5e8:	f00b fec8 	bl	c37c <String::~String()>
     5ec:	211c4628 	.word	0x211c4628
     5f0:	f00b fdc0 	bl	c174 <operator delete(void*, unsigned int)>
	delete show4_ls;
     5f4:	55a0f8d4 	.word	0x55a0f8d4
     5f8:	b135      	cbz	r5, 608 <BigHouse::~BigHouse()+0x128>
     5fa:	4628      	mov	r0, r5
     5fc:	f00b febe 	bl	c37c <String::~String()>
     600:	4628      	mov	r0, r5
     602:	211c      	.short	0x211c
     604:	f00b fdb6 	bl	c174 <operator delete(void*, unsigned int)>
	delete show5_ls;
     608:	55a4f8d4 	.word	0x55a4f8d4
     60c:	b135      	cbz	r5, 61c <BigHouse::~BigHouse()+0x13c>
     60e:	4628      	.short	0x4628
     610:	f00b feb4 	bl	c37c <String::~String()>
     614:	211c4628 	.word	0x211c4628
     618:	f00b fdac 	bl	c174 <operator delete(void*, unsigned int)>
	delete show6_ls;
     61c:	f8d4 55a8 	ldr.w	r5, [r4, #1448]	; 0x5a8
     620:	b135      	cbz	r5, 630 <BigHouse::~BigHouse()+0x150>
     622:	4628      	mov	r0, r5
     624:	feaaf00b 	.word	0xfeaaf00b
     628:	4628      	mov	r0, r5
     62a:	211c      	movs	r1, #28
     62c:	f00b fda2 	bl	c174 <operator delete(void*, unsigned int)>
	delete[] lShow_set;
     630:	f204 50ac 	addw	r0, r4, #1452	; 0x5ac
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     634:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
	delete show2_ls;
	delete show3_ls;
	delete show4_ls;
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
     638:	f00b fd9a 	bl	c170 <operator delete[](void*)>
//#include "Sys80bIO.h"
#include "Sys80b.h"

//using namespace Sys80bIO;

class Sys80b_Actuator {
     63c:	f504 605d 	add.w	r0, r4, #3536	; 0xdd0
     640:	f00b fe9c 	bl	c37c <String::~String()>
     644:	50b8f604 	.word	0x50b8f604
     648:	f00b fe98 	bl	c37c <String::~String()>
     64c:	f504 605a 	add.w	r0, r4, #3488	; 0xda0
     650:	f00b fe94 	bl	c37c <String::~String()>
     654:	5088f604 	.word	0x5088f604
     658:	f00b fe90 	bl	c37c <String::~String()>
     65c:	6057f504 	.word	0x6057f504
     660:	f00b fe8c 	bl	c37c <String::~String()>
     664:	f604 5058 	addw	r0, r4, #3416	; 0xd58
     668:	fe88f00b 	.word	0xfe88f00b
     66c:	f504 6054 	add.w	r0, r4, #3392	; 0xd40
     670:	fe84f00b 	.word	0xfe84f00b
     674:	f604 5028 	addw	r0, r4, #3368	; 0xd28
     678:	fe80f00b 	.word	0xfe80f00b
     67c:	f504 6051 	add.w	r0, r4, #3344	; 0xd10
     680:	fe7cf00b 	.word	0xfe7cf00b
     684:	f604 40f8 	addw	r0, r4, #3320	; 0xcf8
     688:	fe78f00b 	.word	0xfe78f00b

#include "Arduino.h"
#include "Sys80b.h"
//class Sys80b;

class Sys80b_Sensor {
     68c:	f604 40dc 	addw	r0, r4, #3292	; 0xcdc
     690:	fe74f00b 	.word	0xfe74f00b
     694:	f604 40c4 	addw	r0, r4, #3268	; 0xcc4
     698:	fe70f00b 	.word	0xfe70f00b
     69c:	f604 40ac 	addw	r0, r4, #3244	; 0xcac
     6a0:	f00b fe6c 	bl	c37c <String::~String()>
     6a4:	f604 4094 	addw	r0, r4, #3220	; 0xc94
     6a8:	fe68f00b 	.word	0xfe68f00b
     6ac:	f604 407c 	addw	r0, r4, #3196	; 0xc7c
     6b0:	fe64f00b 	.word	0xfe64f00b
     6b4:	f604 4064 	addw	r0, r4, #3172	; 0xc64
     6b8:	f00b fe60 	bl	c37c <String::~String()>
     6bc:	404cf604 	.word	0x404cf604
     6c0:	f00b fe5c 	bl	c37c <String::~String()>
     6c4:	f604 4034 	addw	r0, r4, #3124	; 0xc34
     6c8:	f00b fe58 	bl	c37c <String::~String()>
     6cc:	401cf604 	.word	0x401cf604
     6d0:	f00b fe54 	bl	c37c <String::~String()>
     6d4:	f604 4004 	addw	r0, r4, #3076	; 0xc04
     6d8:	f00b fe50 	bl	c37c <String::~String()>
     6dc:	30ecf604 	.word	0x30ecf604
     6e0:	f00b fe4c 	bl	c37c <String::~String()>
     6e4:	f604 30d4 	addw	r0, r4, #3028	; 0xbd4
     6e8:	f00b fe48 	bl	c37c <String::~String()>
     6ec:	f604 30bc 	addw	r0, r4, #3004	; 0xbbc
     6f0:	f00b fe44 	bl	c37c <String::~String()>
     6f4:	30a4f604 	.word	0x30a4f604
     6f8:	f00b fe40 	bl	c37c <String::~String()>
     6fc:	308cf604 	.word	0x308cf604
     700:	f00b fe3c 	bl	c37c <String::~String()>
     704:	f604 3074 	addw	r0, r4, #2932	; 0xb74
     708:	fe38f00b 	.word	0xfe38f00b
     70c:	f604 305c 	addw	r0, r4, #2908	; 0xb5c
     710:	f00b fe34 	bl	c37c <String::~String()>
     714:	3044f604 	.word	0x3044f604
     718:	f00b fe30 	bl	c37c <String::~String()>
     71c:	302cf604 	.word	0x302cf604
     720:	f00b fe2c 	bl	c37c <String::~String()>
     724:	3014f604 	.word	0x3014f604
     728:	f00b fe28 	bl	c37c <String::~String()>
     72c:	20fcf604 	.word	0x20fcf604
     730:	f00b fe24 	bl	c37c <String::~String()>
     734:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
     738:	f00b fe20 	bl	c37c <String::~String()>
     73c:	f604 20cc 	addw	r0, r4, #2764	; 0xacc
     740:	f00b fe1c 	bl	c37c <String::~String()>
     744:	f604 20b4 	addw	r0, r4, #2740	; 0xab4
     748:	f00b fe18 	bl	c37c <String::~String()>
     74c:	f604 209c 	addw	r0, r4, #2716	; 0xa9c
     750:	f00b fe14 	bl	c37c <String::~String()>
     754:	f604 2084 	addw	r0, r4, #2692	; 0xa84
     758:	fe10f00b 	.word	0xfe10f00b
     75c:	f604 206c 	addw	r0, r4, #2668	; 0xa6c
     760:	f00b fe0c 	bl	c37c <String::~String()>
     764:	2054f604 	.word	0x2054f604
     768:	f00b fe08 	bl	c37c <String::~String()>
     76c:	203cf604 	.word	0x203cf604
     770:	f00b fe04 	bl	c37c <String::~String()>
     774:	2024f604 	.word	0x2024f604
     778:	f00b fe00 	bl	c37c <String::~String()>
     77c:	200cf604 	.word	0x200cf604
     780:	fdfcf00b 	.word	0xfdfcf00b
     784:	f604 10f4 	addw	r0, r4, #2548	; 0x9f4
     788:	f00b fdf8 	bl	c37c <String::~String()>
     78c:	10dcf604 	.word	0x10dcf604
     790:	f00b fdf4 	bl	c37c <String::~String()>
     794:	f604 10c4 	addw	r0, r4, #2500	; 0x9c4
     798:	fdf0f00b 	.word	0xfdf0f00b
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     79c:	f604 166c 	addw	r6, r4, #2412	; 0x96c
     7a0:	10acf604 	.word	0x10acf604
     7a4:	f00b fdea 	bl	c37c <String::~String()>
     7a8:	1094f604 	.word	0x1094f604
     7ac:	f00b fde6 	bl	c37c <String::~String()>
     7b0:	d00542b5 	.word	0xd00542b5
     7b4:	3e10      	subs	r6, #16
     7b6:	4630      	.short	0x4630
     7b8:	f00b fde0 	bl	c37c <String::~String()>
     7bc:	d1f942b5 	.word	0xd1f942b5
     7c0:	f204 56cc 	addw	r6, r4, #1484	; 0x5cc
     7c4:	46283d10 	.word	0x46283d10
     7c8:	f00b fdd8 	bl	c37c <String::~String()>
     7cc:	d1f942ae 	.word	0xd1f942ae
     7d0:	4620      	mov	r0, r4
     7d2:	f003      	.short	0xf003
     7d4:	fd11 4620 	ldc2	6, cr4, [r1, #-128]	; 0xffffff80
	delete show3_ls;
	delete show4_ls;
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
}
     7d8:	bf00bd70 	.word	0xbf00bd70
     7dc:	0afc      	lsrs	r4, r7, #11
     7de:	2000      	.short	0x2000

000007e0 <non-virtual thunk to BigHouse::~BigHouse()>:
#define DISPATCH3(f,a,b,c) case a: case b: case c: f; break
#define DISPATCH4(f,a,b,c,d) case a: case b: case c: case d: f; break
#define DISPATCH5(f,a,b,c,d,e) case a: case b: case c: case d: case e: f; break

	BigHouse(Board_Sys80b& board);
	~BigHouse();
     7e0:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
     7e4:	be7cf7ff 	.word	0xbe7cf7ff

000007e8 <BigHouse::~BigHouse()>:
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     7e8:	b510      	push	{r4, lr}
     7ea:	4604      	.short	0x4604
	delete show3_ls;
	delete show4_ls;
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
}
     7ec:	f7ff fe78 	bl	4e0 <BigHouse::~BigHouse()>
     7f0:	6162f44f 	.word	0x6162f44f
     7f4:	4620      	mov	r0, r4
     7f6:	f00b      	.short	0xf00b
     7f8:	fcbd 4620 	ldc2	6, cr4, [sp], #128	; 0x80
     7fc:	bf00bd10 	.word	0xbf00bd10

00000800 <non-virtual thunk to BigHouse::~BigHouse()>:
     800:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
     804:	bff0f7ff 	.word	0xbff0f7ff

00000808 <BigHouse::BigHouse(Board_Sys80b&)>:
#include "BigHouse.h"
#include "LightGroup.h"

//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
     808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     80c:	b0894fd8 	.word	0xb0894fd8
     810:	4604      	mov	r4, r0
     812:	f003      	.short	0xf003
     814:	fd6b 463d 	stc2l	6, cr4, [fp, #-244]!	; 0xffffff0c
     818:	4ad74bd6 	.word	0x4ad74bd6
     81c:	f240 21c9 	movw	r1, #713	; 0x2c9
     820:	0e34f103 	.word	0x0e34f103
     824:	f855 0b24 	ldr.w	r0, [r5], #36
     828:	4ed4      	ldr	r6, [pc, #848]	; (b7c <BigHouse::BigHouse(Board_Sys80b&)+0x374>)
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     82a:	f604 1994 	addw	r9, r4, #2452	; 0x994
     82e:	6023      	.short	0x6023
     830:	f604 1ac4 	addw	sl, r4, #2500	; 0x9c4
     834:	e294f8c4 	.word	0xe294f8c4
     838:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
     83c:	053cf8c4 	.word	0x053cf8c4
     840:	f204 50cc 	addw	r0, r4, #1484	; 0x5cc
     844:	6520f8c4 	.word	0x6520f8c4
     848:	f604 166c 	addw	r6, r4, #2412	; 0x96c
     84c:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524
     850:	49cb      	ldr	r1, [pc, #812]	; (b80 <BigHouse::BigHouse(Board_Sys80b&)+0x378>)
     852:	f00b fde7 	bl	c424 <String::String(__FlashStringHelper const*)>
     856:	49cb      	ldr	r1, [pc, #812]	; (b84 <BigHouse::BigHouse(Board_Sys80b&)+0x37c>)
     858:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
     85c:	f8df 840c 	ldr.w	r8, [pc, #1036]	; c6c <BigHouse::BigHouse(Board_Sys80b&)+0x464>
     860:	f00b fde0 	bl	c424 <String::String(__FlashStringHelper const*)>
     864:	49c8      	ldr	r1, [pc, #800]	; (b88 <BigHouse::BigHouse(Board_Sys80b&)+0x380>)
     866:	f204 50ec 	addw	r0, r4, #1516	; 0x5ec
     86a:	f00b fddb 	bl	c424 <String::String(__FlashStringHelper const*)>
     86e:	49c7      	ldr	r1, [pc, #796]	; (b8c <BigHouse::BigHouse(Board_Sys80b&)+0x384>)
     870:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
     874:	f00b fdd6 	bl	c424 <String::String(__FlashStringHelper const*)>
     878:	49c5      	ldr	r1, [pc, #788]	; (b90 <BigHouse::BigHouse(Board_Sys80b&)+0x388>)
     87a:	f204 600c 	addw	r0, r4, #1548	; 0x60c
     87e:	f00b fdd1 	bl	c424 <String::String(__FlashStringHelper const*)>
     882:	49c4      	ldr	r1, [pc, #784]	; (b94 <BigHouse::BigHouse(Board_Sys80b&)+0x38c>)
     884:	f204 601c 	addw	r0, r4, #1564	; 0x61c
     888:	f00b fdcc 	bl	c424 <String::String(__FlashStringHelper const*)>
     88c:	49c2      	ldr	r1, [pc, #776]	; (b98 <BigHouse::BigHouse(Board_Sys80b&)+0x390>)
     88e:	f204 602c 	addw	r0, r4, #1580	; 0x62c
     892:	f00b fdc7 	bl	c424 <String::String(__FlashStringHelper const*)>
     896:	49c1      	ldr	r1, [pc, #772]	; (b9c <BigHouse::BigHouse(Board_Sys80b&)+0x394>)
     898:	f204 603c 	addw	r0, r4, #1596	; 0x63c
     89c:	f00b fdc2 	bl	c424 <String::String(__FlashStringHelper const*)>
     8a0:	49bf      	ldr	r1, [pc, #764]	; (ba0 <BigHouse::BigHouse(Board_Sys80b&)+0x398>)
     8a2:	f204 604c 	addw	r0, r4, #1612	; 0x64c
     8a6:	f00b fdbd 	bl	c424 <String::String(__FlashStringHelper const*)>
     8aa:	49be      	ldr	r1, [pc, #760]	; (ba4 <BigHouse::BigHouse(Board_Sys80b&)+0x39c>)
     8ac:	f204 605c 	addw	r0, r4, #1628	; 0x65c
     8b0:	f00b fdb8 	bl	c424 <String::String(__FlashStringHelper const*)>
     8b4:	49bc      	ldr	r1, [pc, #752]	; (ba8 <BigHouse::BigHouse(Board_Sys80b&)+0x3a0>)
     8b6:	f204 606c 	addw	r0, r4, #1644	; 0x66c
     8ba:	f00b fdb3 	bl	c424 <String::String(__FlashStringHelper const*)>
     8be:	49bb      	ldr	r1, [pc, #748]	; (bac <BigHouse::BigHouse(Board_Sys80b&)+0x3a4>)
     8c0:	f204 607c 	addw	r0, r4, #1660	; 0x67c
     8c4:	f00b fdae 	bl	c424 <String::String(__FlashStringHelper const*)>
     8c8:	49b9      	ldr	r1, [pc, #740]	; (bb0 <BigHouse::BigHouse(Board_Sys80b&)+0x3a8>)
     8ca:	f204 608c 	addw	r0, r4, #1676	; 0x68c
     8ce:	f00b fda9 	bl	c424 <String::String(__FlashStringHelper const*)>
     8d2:	49b8      	ldr	r1, [pc, #736]	; (bb4 <BigHouse::BigHouse(Board_Sys80b&)+0x3ac>)
     8d4:	f204 609c 	addw	r0, r4, #1692	; 0x69c
     8d8:	f00b fda4 	bl	c424 <String::String(__FlashStringHelper const*)>
     8dc:	49b6      	ldr	r1, [pc, #728]	; (bb8 <BigHouse::BigHouse(Board_Sys80b&)+0x3b0>)
     8de:	f204 60ac 	addw	r0, r4, #1708	; 0x6ac
     8e2:	f00b fd9f 	bl	c424 <String::String(__FlashStringHelper const*)>
     8e6:	49b5      	ldr	r1, [pc, #724]	; (bbc <BigHouse::BigHouse(Board_Sys80b&)+0x3b4>)
     8e8:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
     8ec:	f00b fd9a 	bl	c424 <String::String(__FlashStringHelper const*)>
     8f0:	49b3      	ldr	r1, [pc, #716]	; (bc0 <BigHouse::BigHouse(Board_Sys80b&)+0x3b8>)
     8f2:	f204 60cc 	addw	r0, r4, #1740	; 0x6cc
     8f6:	f00b fd95 	bl	c424 <String::String(__FlashStringHelper const*)>
     8fa:	49b2      	ldr	r1, [pc, #712]	; (bc4 <BigHouse::BigHouse(Board_Sys80b&)+0x3bc>)
     8fc:	f204 60dc 	addw	r0, r4, #1756	; 0x6dc
     900:	f00b fd90 	bl	c424 <String::String(__FlashStringHelper const*)>
     904:	49b0      	ldr	r1, [pc, #704]	; (bc8 <BigHouse::BigHouse(Board_Sys80b&)+0x3c0>)
     906:	f204 60ec 	addw	r0, r4, #1772	; 0x6ec
     90a:	f00b fd8b 	bl	c424 <String::String(__FlashStringHelper const*)>
     90e:	49af      	ldr	r1, [pc, #700]	; (bcc <BigHouse::BigHouse(Board_Sys80b&)+0x3c4>)
     910:	f204 60fc 	addw	r0, r4, #1788	; 0x6fc
     914:	f00b fd86 	bl	c424 <String::String(__FlashStringHelper const*)>
     918:	49ad      	ldr	r1, [pc, #692]	; (bd0 <BigHouse::BigHouse(Board_Sys80b&)+0x3c8>)
     91a:	f204 700c 	addw	r0, r4, #1804	; 0x70c
     91e:	f00b fd81 	bl	c424 <String::String(__FlashStringHelper const*)>
     922:	49ac      	ldr	r1, [pc, #688]	; (bd4 <BigHouse::BigHouse(Board_Sys80b&)+0x3cc>)
     924:	f204 701c 	addw	r0, r4, #1820	; 0x71c
     928:	f00b fd7c 	bl	c424 <String::String(__FlashStringHelper const*)>
     92c:	49aa      	ldr	r1, [pc, #680]	; (bd8 <BigHouse::BigHouse(Board_Sys80b&)+0x3d0>)
     92e:	f204 702c 	addw	r0, r4, #1836	; 0x72c
     932:	f00b fd77 	bl	c424 <String::String(__FlashStringHelper const*)>
     936:	49a9      	ldr	r1, [pc, #676]	; (bdc <BigHouse::BigHouse(Board_Sys80b&)+0x3d4>)
     938:	f204 703c 	addw	r0, r4, #1852	; 0x73c
     93c:	f00b fd72 	bl	c424 <String::String(__FlashStringHelper const*)>
     940:	49a7      	ldr	r1, [pc, #668]	; (be0 <BigHouse::BigHouse(Board_Sys80b&)+0x3d8>)
     942:	f204 704c 	addw	r0, r4, #1868	; 0x74c
     946:	f00b fd6d 	bl	c424 <String::String(__FlashStringHelper const*)>
     94a:	49a6      	ldr	r1, [pc, #664]	; (be4 <BigHouse::BigHouse(Board_Sys80b&)+0x3dc>)
     94c:	f204 705c 	addw	r0, r4, #1884	; 0x75c
     950:	f00b fd68 	bl	c424 <String::String(__FlashStringHelper const*)>
     954:	49a4      	ldr	r1, [pc, #656]	; (be8 <BigHouse::BigHouse(Board_Sys80b&)+0x3e0>)
     956:	f204 706c 	addw	r0, r4, #1900	; 0x76c
     95a:	f00b fd63 	bl	c424 <String::String(__FlashStringHelper const*)>
     95e:	499a      	ldr	r1, [pc, #616]	; (bc8 <BigHouse::BigHouse(Board_Sys80b&)+0x3c0>)
     960:	f204 707c 	addw	r0, r4, #1916	; 0x77c
     964:	f00b fd5e 	bl	c424 <String::String(__FlashStringHelper const*)>
     968:	49a0      	ldr	r1, [pc, #640]	; (bec <BigHouse::BigHouse(Board_Sys80b&)+0x3e4>)
     96a:	f204 708c 	addw	r0, r4, #1932	; 0x78c
     96e:	f00b fd59 	bl	c424 <String::String(__FlashStringHelper const*)>
     972:	499f      	ldr	r1, [pc, #636]	; (bf0 <BigHouse::BigHouse(Board_Sys80b&)+0x3e8>)
     974:	f204 709c 	addw	r0, r4, #1948	; 0x79c
     978:	f00b fd54 	bl	c424 <String::String(__FlashStringHelper const*)>
     97c:	499d      	ldr	r1, [pc, #628]	; (bf4 <BigHouse::BigHouse(Board_Sys80b&)+0x3ec>)
     97e:	f204 70ac 	addw	r0, r4, #1964	; 0x7ac
     982:	f00b fd4f 	bl	c424 <String::String(__FlashStringHelper const*)>
     986:	499c      	ldr	r1, [pc, #624]	; (bf8 <BigHouse::BigHouse(Board_Sys80b&)+0x3f0>)
     988:	f204 70bc 	addw	r0, r4, #1980	; 0x7bc
     98c:	f00b fd4a 	bl	c424 <String::String(__FlashStringHelper const*)>
     990:	499a      	ldr	r1, [pc, #616]	; (bfc <BigHouse::BigHouse(Board_Sys80b&)+0x3f4>)
     992:	f204 70cc 	addw	r0, r4, #1996	; 0x7cc
     996:	f00b fd45 	bl	c424 <String::String(__FlashStringHelper const*)>
     99a:	4999      	ldr	r1, [pc, #612]	; (c00 <BigHouse::BigHouse(Board_Sys80b&)+0x3f8>)
     99c:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
     9a0:	f00b fd40 	bl	c424 <String::String(__FlashStringHelper const*)>
     9a4:	4997      	ldr	r1, [pc, #604]	; (c04 <BigHouse::BigHouse(Board_Sys80b&)+0x3fc>)
     9a6:	f204 70ec 	addw	r0, r4, #2028	; 0x7ec
     9aa:	f00b fd3b 	bl	c424 <String::String(__FlashStringHelper const*)>
     9ae:	4996      	ldr	r1, [pc, #600]	; (c08 <BigHouse::BigHouse(Board_Sys80b&)+0x400>)
     9b0:	f204 70fc 	addw	r0, r4, #2044	; 0x7fc
     9b4:	f00b fd36 	bl	c424 <String::String(__FlashStringHelper const*)>
     9b8:	4994      	ldr	r1, [pc, #592]	; (c0c <BigHouse::BigHouse(Board_Sys80b&)+0x404>)
     9ba:	f604 000c 	addw	r0, r4, #2060	; 0x80c
     9be:	f00b fd31 	bl	c424 <String::String(__FlashStringHelper const*)>
     9c2:	4993      	ldr	r1, [pc, #588]	; (c10 <BigHouse::BigHouse(Board_Sys80b&)+0x408>)
     9c4:	f604 001c 	addw	r0, r4, #2076	; 0x81c
     9c8:	f00b fd2c 	bl	c424 <String::String(__FlashStringHelper const*)>
     9cc:	4991      	ldr	r1, [pc, #580]	; (c14 <BigHouse::BigHouse(Board_Sys80b&)+0x40c>)
     9ce:	f604 002c 	addw	r0, r4, #2092	; 0x82c
     9d2:	f00b fd27 	bl	c424 <String::String(__FlashStringHelper const*)>
     9d6:	4990      	ldr	r1, [pc, #576]	; (c18 <BigHouse::BigHouse(Board_Sys80b&)+0x410>)
     9d8:	f604 003c 	addw	r0, r4, #2108	; 0x83c
     9dc:	f00b fd22 	bl	c424 <String::String(__FlashStringHelper const*)>
     9e0:	498e      	ldr	r1, [pc, #568]	; (c1c <BigHouse::BigHouse(Board_Sys80b&)+0x414>)
     9e2:	f604 004c 	addw	r0, r4, #2124	; 0x84c
     9e6:	f00b fd1d 	bl	c424 <String::String(__FlashStringHelper const*)>
     9ea:	498d      	ldr	r1, [pc, #564]	; (c20 <BigHouse::BigHouse(Board_Sys80b&)+0x418>)
     9ec:	f604 005c 	addw	r0, r4, #2140	; 0x85c
     9f0:	f00b fd18 	bl	c424 <String::String(__FlashStringHelper const*)>
     9f4:	498b      	ldr	r1, [pc, #556]	; (c24 <BigHouse::BigHouse(Board_Sys80b&)+0x41c>)
     9f6:	f604 006c 	addw	r0, r4, #2156	; 0x86c
     9fa:	f00b fd13 	bl	c424 <String::String(__FlashStringHelper const*)>
     9fe:	498a      	ldr	r1, [pc, #552]	; (c28 <BigHouse::BigHouse(Board_Sys80b&)+0x420>)
     a00:	f604 007c 	addw	r0, r4, #2172	; 0x87c
     a04:	f00b fd0e 	bl	c424 <String::String(__FlashStringHelper const*)>
     a08:	4988      	ldr	r1, [pc, #544]	; (c2c <BigHouse::BigHouse(Board_Sys80b&)+0x424>)
     a0a:	f604 008c 	addw	r0, r4, #2188	; 0x88c
     a0e:	f00b fd09 	bl	c424 <String::String(__FlashStringHelper const*)>
     a12:	4987      	ldr	r1, [pc, #540]	; (c30 <BigHouse::BigHouse(Board_Sys80b&)+0x428>)
     a14:	f604 009c 	addw	r0, r4, #2204	; 0x89c
     a18:	f00b fd04 	bl	c424 <String::String(__FlashStringHelper const*)>
     a1c:	4985      	ldr	r1, [pc, #532]	; (c34 <BigHouse::BigHouse(Board_Sys80b&)+0x42c>)
     a1e:	f604 00ac 	addw	r0, r4, #2220	; 0x8ac
     a22:	f00b fcff 	bl	c424 <String::String(__FlashStringHelper const*)>
     a26:	4984      	ldr	r1, [pc, #528]	; (c38 <BigHouse::BigHouse(Board_Sys80b&)+0x430>)
     a28:	f604 00bc 	addw	r0, r4, #2236	; 0x8bc
     a2c:	f00b fcfa 	bl	c424 <String::String(__FlashStringHelper const*)>
     a30:	4982      	ldr	r1, [pc, #520]	; (c3c <BigHouse::BigHouse(Board_Sys80b&)+0x434>)
     a32:	f604 00cc 	addw	r0, r4, #2252	; 0x8cc
     a36:	f00b fcf5 	bl	c424 <String::String(__FlashStringHelper const*)>
     a3a:	4981      	ldr	r1, [pc, #516]	; (c40 <BigHouse::BigHouse(Board_Sys80b&)+0x438>)
     a3c:	f604 00dc 	addw	r0, r4, #2268	; 0x8dc
     a40:	f00b fcf0 	bl	c424 <String::String(__FlashStringHelper const*)>
     a44:	4641      	mov	r1, r8
     a46:	f604 00ec 	addw	r0, r4, #2284	; 0x8ec
     a4a:	f00b fceb 	bl	c424 <String::String(__FlashStringHelper const*)>
     a4e:	497d      	ldr	r1, [pc, #500]	; (c44 <BigHouse::BigHouse(Board_Sys80b&)+0x43c>)
     a50:	f604 00fc 	addw	r0, r4, #2300	; 0x8fc
     a54:	f00b fce6 	bl	c424 <String::String(__FlashStringHelper const*)>
     a58:	497b      	ldr	r1, [pc, #492]	; (c48 <BigHouse::BigHouse(Board_Sys80b&)+0x440>)
     a5a:	f604 100c 	addw	r0, r4, #2316	; 0x90c
     a5e:	f00b fce1 	bl	c424 <String::String(__FlashStringHelper const*)>
     a62:	497a      	ldr	r1, [pc, #488]	; (c4c <BigHouse::BigHouse(Board_Sys80b&)+0x444>)
     a64:	f604 101c 	addw	r0, r4, #2332	; 0x91c
     a68:	f00b fcdc 	bl	c424 <String::String(__FlashStringHelper const*)>
     a6c:	4978      	ldr	r1, [pc, #480]	; (c50 <BigHouse::BigHouse(Board_Sys80b&)+0x448>)
     a6e:	f604 102c 	addw	r0, r4, #2348	; 0x92c
     a72:	f00b fcd7 	bl	c424 <String::String(__FlashStringHelper const*)>
     a76:	4977      	ldr	r1, [pc, #476]	; (c54 <BigHouse::BigHouse(Board_Sys80b&)+0x44c>)
     a78:	f604 103c 	addw	r0, r4, #2364	; 0x93c
     a7c:	f00b fcd2 	bl	c424 <String::String(__FlashStringHelper const*)>
     a80:	4975      	ldr	r1, [pc, #468]	; (c58 <BigHouse::BigHouse(Board_Sys80b&)+0x450>)
     a82:	f604 104c 	addw	r0, r4, #2380	; 0x94c
     a86:	f00b fccd 	bl	c424 <String::String(__FlashStringHelper const*)>
     a8a:	4974      	ldr	r1, [pc, #464]	; (c5c <BigHouse::BigHouse(Board_Sys80b&)+0x454>)
     a8c:	f604 105c 	addw	r0, r4, #2396	; 0x95c
     a90:	f00b fcc8 	bl	c424 <String::String(__FlashStringHelper const*)>
     a94:	46be      	mov	lr, r7
     a96:	46bc      	mov	ip, r7
     a98:	3764      	adds	r7, #100	; 0x64
     a9a:	f85e 0f04 	ldr.w	r0, [lr, #4]!
     a9e:	f85c bf18 	ldr.w	fp, [ip, #24]!
     aa2:	f8de 1004 	ldr.w	r1, [lr, #4]
     aa6:	f8de 2008 	ldr.w	r2, [lr, #8]
     aaa:	f8de 300c 	ldr.w	r3, [lr, #12]
     aae:	f8be e010 	ldrh.w	lr, [lr, #16]
     ab2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     ab4:	f8dc 1004 	ldr.w	r1, [ip, #4]
     ab8:	231a      	movs	r3, #26
     aba:	f89c 2008 	ldrb.w	r2, [ip, #8]
     abe:	4648      	mov	r0, r9
     ac0:	f8a6 e000 	strh.w	lr, [r6]
     ac4:	f604 16dc 	addw	r6, r4, #2524	; 0x9dc
     ac8:	f884 2986 	strb.w	r2, [r4, #2438]	; 0x986
     acc:	f884 3990 	strb.w	r3, [r4, #2448]	; 0x990
     ad0:	f8c4 b97e 	str.w	fp, [r4, #2430]	; 0x97e
     ad4:	f604 1bac 	addw	fp, r4, #2476	; 0x9ac
     ad8:	f8c4 1982 	str.w	r1, [r4, #2434]	; 0x982
     adc:	2100      	movs	r1, #0
		SENSOR(spotTarget4, 73, "cell block spot Target #4");
		SENSOR(topRollover3, 74, "top rollover #3");
		SENSOR(rightOutside, 75, "right outside rollover");
		SENSOR(hole, 76, "hole");
		// constructor
		Sw(Sys80b* sys) : _sys(sys) {};
     ade:	f8c4 4988 	str.w	r4, [r4, #2440]	; 0x988
     ae2:	f8c4 498c 	str.w	r4, [r4, #2444]	; 0x98c
     ae6:	f00b fc89 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     aea:	495d      	ldr	r1, [pc, #372]	; (c60 <BigHouse::BigHouse(Board_Sys80b&)+0x458>)
     aec:	a804      	add	r0, sp, #16
     aee:	f00b fc99 	bl	c424 <String::String(__FlashStringHelper const*)>
     af2:	a904      	add	r1, sp, #16
     af4:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     af6:	f604 19f4 	addw	r9, r4, #2548	; 0x9f4
		descr = String(descrText);
     afa:	f00b fd25 	bl	c548 <String::operator=(String&&)>
     afe:	a804      	add	r0, sp, #16
     b00:	f00b fc3c 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b04:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     b08:	231e      	movs	r3, #30
     b0a:	4658      	mov	r0, fp
     b0c:	f8c4 29a4 	str.w	r2, [r4, #2468]	; 0x9a4
     b10:	2100      	movs	r1, #0
     b12:	f884 39a8 	strb.w	r3, [r4, #2472]	; 0x9a8
     b16:	f00b fc71 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     b1a:	4952      	ldr	r1, [pc, #328]	; (c64 <BigHouse::BigHouse(Board_Sys80b&)+0x45c>)
     b1c:	a804      	add	r0, sp, #16
     b1e:	f00b fc81 	bl	c424 <String::String(__FlashStringHelper const*)>
     b22:	a904      	add	r1, sp, #16
     b24:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b26:	f604 2b0c 	addw	fp, r4, #2572	; 0xa0c
		descr = String(descrText);
     b2a:	f00b fd0d 	bl	c548 <String::operator=(String&&)>
     b2e:	a804      	add	r0, sp, #16
     b30:	f00b fc24 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b34:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     b38:	231f      	movs	r3, #31
     b3a:	4650      	mov	r0, sl
     b3c:	f8c4 29bc 	str.w	r2, [r4, #2492]	; 0x9bc
     b40:	2100      	movs	r1, #0
     b42:	f884 39c0 	strb.w	r3, [r4, #2496]	; 0x9c0
     b46:	f00b fc59 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     b4a:	4947      	ldr	r1, [pc, #284]	; (c68 <BigHouse::BigHouse(Board_Sys80b&)+0x460>)
     b4c:	a804      	add	r0, sp, #16
     b4e:	f00b fc69 	bl	c424 <String::String(__FlashStringHelper const*)>
     b52:	a904      	add	r1, sp, #16
     b54:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b56:	f604 2a24 	addw	sl, r4, #2596	; 0xa24
		descr = String(descrText);
     b5a:	f00b fcf5 	bl	c548 <String::operator=(String&&)>
     b5e:	a804      	add	r0, sp, #16
     b60:	f00b fc0c 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b64:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     b68:	2320      	movs	r3, #32
     b6a:	4630      	mov	r0, r6
     b6c:	e080      	b.n	c70 <BigHouse::BigHouse(Board_Sys80b&)+0x468>
     b6e:	bf00      	nop
     b70:	20000150 	.word	0x20000150
     b74:	20000afc 	.word	0x20000afc
     b78:	200001c0 	.word	0x200001c0
     b7c:	200001b4 	.word	0x200001b4
     b80:	200001cc 	.word	0x200001cc
     b84:	200001d8 	.word	0x200001d8
     b88:	200001e4 	.word	0x200001e4
     b8c:	200001f4 	.word	0x200001f4
     b90:	20000200 	.word	0x20000200
     b94:	2000020c 	.word	0x2000020c
     b98:	2000021c 	.word	0x2000021c
     b9c:	2000022c 	.word	0x2000022c
     ba0:	2000023c 	.word	0x2000023c
     ba4:	20000250 	.word	0x20000250
     ba8:	20000264 	.word	0x20000264
     bac:	20000274 	.word	0x20000274
     bb0:	20000284 	.word	0x20000284
     bb4:	2000028c 	.word	0x2000028c
     bb8:	200002a0 	.word	0x200002a0
     bbc:	200002b8 	.word	0x200002b8
     bc0:	200002c4 	.word	0x200002c4
     bc4:	200002d8 	.word	0x200002d8
     bc8:	200002f8 	.word	0x200002f8
     bcc:	2000030c 	.word	0x2000030c
     bd0:	20000314 	.word	0x20000314
     bd4:	2000032c 	.word	0x2000032c
     bd8:	20000340 	.word	0x20000340
     bdc:	20000350 	.word	0x20000350
     be0:	20000360 	.word	0x20000360
     be4:	20000370 	.word	0x20000370
     be8:	20000380 	.word	0x20000380
     bec:	20000394 	.word	0x20000394
     bf0:	200003a4 	.word	0x200003a4
     bf4:	200003b0 	.word	0x200003b0
     bf8:	200003bc 	.word	0x200003bc
     bfc:	200003c8 	.word	0x200003c8
     c00:	200003d4 	.word	0x200003d4
     c04:	200003e0 	.word	0x200003e0
     c08:	200003ec 	.word	0x200003ec
     c0c:	200003f8 	.word	0x200003f8
     c10:	20000404 	.word	0x20000404
     c14:	20000410 	.word	0x20000410
     c18:	20000420 	.word	0x20000420
     c1c:	20000430 	.word	0x20000430
     c20:	20000440 	.word	0x20000440
     c24:	20000450 	.word	0x20000450
     c28:	20000460 	.word	0x20000460
     c2c:	20000470 	.word	0x20000470
     c30:	20000480 	.word	0x20000480
     c34:	20000490 	.word	0x20000490
     c38:	200004a0 	.word	0x200004a0
     c3c:	200004b4 	.word	0x200004b4
     c40:	20000744 	.word	0x20000744
     c44:	200004cc 	.word	0x200004cc
     c48:	200004e0 	.word	0x200004e0
     c4c:	200004f8 	.word	0x200004f8
     c50:	20000508 	.word	0x20000508
     c54:	20000514 	.word	0x20000514
     c58:	2000052c 	.word	0x2000052c
     c5c:	20000534 	.word	0x20000534
     c60:	2000053c 	.word	0x2000053c
     c64:	2000054c 	.word	0x2000054c
     c68:	20000560 	.word	0x20000560
     c6c:	200004bc 	.word	0x200004bc
     c70:	f8c4 29d4 	str.w	r2, [r4, #2516]	; 0x9d4
     c74:	2100      	movs	r1, #0
     c76:	f884 39d8 	strb.w	r3, [r4, #2520]	; 0x9d8
     c7a:	f00b fbbf 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     c7e:	49d9      	ldr	r1, [pc, #868]	; (fe4 <BigHouse::BigHouse(Board_Sys80b&)+0x7dc>)
     c80:	a804      	add	r0, sp, #16
     c82:	f00b fbcf 	bl	c424 <String::String(__FlashStringHelper const*)>
     c86:	a904      	add	r1, sp, #16
     c88:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     c8a:	f604 263c 	addw	r6, r4, #2620	; 0xa3c
		descr = String(descrText);
     c8e:	f00b fc5b 	bl	c548 <String::operator=(String&&)>
     c92:	a804      	add	r0, sp, #16
     c94:	f00b fb72 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     c98:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     c9c:	2321      	movs	r3, #33	; 0x21
     c9e:	4648      	mov	r0, r9
     ca0:	f8c4 29ec 	str.w	r2, [r4, #2540]	; 0x9ec
     ca4:	2100      	movs	r1, #0
     ca6:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
     caa:	f00b fba7 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     cae:	49ce      	ldr	r1, [pc, #824]	; (fe8 <BigHouse::BigHouse(Board_Sys80b&)+0x7e0>)
     cb0:	a804      	add	r0, sp, #16
     cb2:	f00b fbb7 	bl	c424 <String::String(__FlashStringHelper const*)>
     cb6:	a904      	add	r1, sp, #16
     cb8:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cba:	f604 2954 	addw	r9, r4, #2644	; 0xa54
		descr = String(descrText);
     cbe:	f00b fc43 	bl	c548 <String::operator=(String&&)>
     cc2:	a804      	add	r0, sp, #16
     cc4:	f00b fb5a 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cc8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     ccc:	2322      	movs	r3, #34	; 0x22
     cce:	4658      	mov	r0, fp
     cd0:	f8c4 2a04 	str.w	r2, [r4, #2564]	; 0xa04
     cd4:	2100      	movs	r1, #0
     cd6:	f884 3a08 	strb.w	r3, [r4, #2568]	; 0xa08
     cda:	f00b fb8f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     cde:	49c3      	ldr	r1, [pc, #780]	; (fec <BigHouse::BigHouse(Board_Sys80b&)+0x7e4>)
     ce0:	a804      	add	r0, sp, #16
     ce2:	f00b fb9f 	bl	c424 <String::String(__FlashStringHelper const*)>
     ce6:	a904      	add	r1, sp, #16
     ce8:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cea:	f604 2b6c 	addw	fp, r4, #2668	; 0xa6c
		descr = String(descrText);
     cee:	f00b fc2b 	bl	c548 <String::operator=(String&&)>
     cf2:	a804      	add	r0, sp, #16
     cf4:	f00b fb42 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cf8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     cfc:	2323      	movs	r3, #35	; 0x23
     cfe:	4650      	mov	r0, sl
     d00:	f8c4 2a1c 	str.w	r2, [r4, #2588]	; 0xa1c
     d04:	2100      	movs	r1, #0
     d06:	f884 3a20 	strb.w	r3, [r4, #2592]	; 0xa20
     d0a:	f00b fb77 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     d0e:	49b8      	ldr	r1, [pc, #736]	; (ff0 <BigHouse::BigHouse(Board_Sys80b&)+0x7e8>)
     d10:	a804      	add	r0, sp, #16
     d12:	f00b fb87 	bl	c424 <String::String(__FlashStringHelper const*)>
     d16:	a904      	add	r1, sp, #16
     d18:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d1a:	f604 2a84 	addw	sl, r4, #2692	; 0xa84
		descr = String(descrText);
     d1e:	f00b fc13 	bl	c548 <String::operator=(String&&)>
     d22:	a804      	add	r0, sp, #16
     d24:	f00b fb2a 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d28:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d2c:	2324      	movs	r3, #36	; 0x24
     d2e:	4630      	mov	r0, r6
     d30:	f8c4 2a34 	str.w	r2, [r4, #2612]	; 0xa34
     d34:	2100      	movs	r1, #0
     d36:	f884 3a38 	strb.w	r3, [r4, #2616]	; 0xa38
     d3a:	f00b fb5f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     d3e:	49ad      	ldr	r1, [pc, #692]	; (ff4 <BigHouse::BigHouse(Board_Sys80b&)+0x7ec>)
     d40:	a804      	add	r0, sp, #16
     d42:	f00b fb6f 	bl	c424 <String::String(__FlashStringHelper const*)>
     d46:	a904      	add	r1, sp, #16
     d48:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d4a:	f604 269c 	addw	r6, r4, #2716	; 0xa9c
		descr = String(descrText);
     d4e:	f00b fbfb 	bl	c548 <String::operator=(String&&)>
     d52:	a804      	add	r0, sp, #16
     d54:	f00b fb12 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d58:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d5c:	2328      	movs	r3, #40	; 0x28
     d5e:	4648      	mov	r0, r9
     d60:	f8c4 2a4c 	str.w	r2, [r4, #2636]	; 0xa4c
     d64:	2100      	movs	r1, #0
     d66:	f884 3a50 	strb.w	r3, [r4, #2640]	; 0xa50
     d6a:	f00b fb47 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     d6e:	49a2      	ldr	r1, [pc, #648]	; (ff8 <BigHouse::BigHouse(Board_Sys80b&)+0x7f0>)
     d70:	a804      	add	r0, sp, #16
     d72:	f00b fb57 	bl	c424 <String::String(__FlashStringHelper const*)>
     d76:	a904      	add	r1, sp, #16
     d78:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d7a:	f604 29b4 	addw	r9, r4, #2740	; 0xab4
		descr = String(descrText);
     d7e:	f00b fbe3 	bl	c548 <String::operator=(String&&)>
     d82:	a804      	add	r0, sp, #16
     d84:	f00b fafa 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d88:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d8c:	2329      	movs	r3, #41	; 0x29
     d8e:	4658      	mov	r0, fp
     d90:	f8c4 2a64 	str.w	r2, [r4, #2660]	; 0xa64
     d94:	2100      	movs	r1, #0
     d96:	f884 3a68 	strb.w	r3, [r4, #2664]	; 0xa68
     d9a:	f00b fb2f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     d9e:	4997      	ldr	r1, [pc, #604]	; (ffc <BigHouse::BigHouse(Board_Sys80b&)+0x7f4>)
     da0:	a804      	add	r0, sp, #16
     da2:	f00b fb3f 	bl	c424 <String::String(__FlashStringHelper const*)>
     da6:	a904      	add	r1, sp, #16
     da8:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     daa:	f604 2bcc 	addw	fp, r4, #2764	; 0xacc
		descr = String(descrText);
     dae:	f00b fbcb 	bl	c548 <String::operator=(String&&)>
     db2:	a804      	add	r0, sp, #16
     db4:	f00b fae2 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     db8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     dbc:	232a      	movs	r3, #42	; 0x2a
     dbe:	4650      	mov	r0, sl
     dc0:	f8c4 2a7c 	str.w	r2, [r4, #2684]	; 0xa7c
     dc4:	2100      	movs	r1, #0
     dc6:	f884 3a80 	strb.w	r3, [r4, #2688]	; 0xa80
     dca:	f00b fb17 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     dce:	498c      	ldr	r1, [pc, #560]	; (1000 <BigHouse::BigHouse(Board_Sys80b&)+0x7f8>)
     dd0:	a804      	add	r0, sp, #16
     dd2:	f00b fb27 	bl	c424 <String::String(__FlashStringHelper const*)>
     dd6:	a904      	add	r1, sp, #16
     dd8:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     dda:	f604 2ae4 	addw	sl, r4, #2788	; 0xae4
		descr = String(descrText);
     dde:	f00b fbb3 	bl	c548 <String::operator=(String&&)>
     de2:	a804      	add	r0, sp, #16
     de4:	f00b faca 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     de8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     dec:	232b      	movs	r3, #43	; 0x2b
     dee:	4630      	mov	r0, r6
     df0:	f8c4 2a94 	str.w	r2, [r4, #2708]	; 0xa94
     df4:	2100      	movs	r1, #0
     df6:	f884 3a98 	strb.w	r3, [r4, #2712]	; 0xa98
     dfa:	f00b faff 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     dfe:	4981      	ldr	r1, [pc, #516]	; (1004 <BigHouse::BigHouse(Board_Sys80b&)+0x7fc>)
     e00:	a804      	add	r0, sp, #16
     e02:	f00b fb0f 	bl	c424 <String::String(__FlashStringHelper const*)>
     e06:	a904      	add	r1, sp, #16
     e08:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e0a:	f604 26fc 	addw	r6, r4, #2812	; 0xafc
		descr = String(descrText);
     e0e:	f00b fb9b 	bl	c548 <String::operator=(String&&)>
     e12:	a804      	add	r0, sp, #16
     e14:	f00b fab2 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e18:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     e1c:	232c      	movs	r3, #44	; 0x2c
     e1e:	4648      	mov	r0, r9
     e20:	f8c4 2aac 	str.w	r2, [r4, #2732]	; 0xaac
     e24:	2100      	movs	r1, #0
     e26:	f884 3ab0 	strb.w	r3, [r4, #2736]	; 0xab0
     e2a:	f00b fae7 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     e2e:	4976      	ldr	r1, [pc, #472]	; (1008 <BigHouse::BigHouse(Board_Sys80b&)+0x800>)
     e30:	a804      	add	r0, sp, #16
     e32:	f00b faf7 	bl	c424 <String::String(__FlashStringHelper const*)>
     e36:	a904      	add	r1, sp, #16
     e38:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e3a:	f604 3914 	addw	r9, r4, #2836	; 0xb14
		descr = String(descrText);
     e3e:	f00b fb83 	bl	c548 <String::operator=(String&&)>
     e42:	a804      	add	r0, sp, #16
     e44:	f00b fa9a 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e48:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     e4c:	232d      	movs	r3, #45	; 0x2d
     e4e:	4658      	mov	r0, fp
     e50:	f8c4 2ac4 	str.w	r2, [r4, #2756]	; 0xac4
     e54:	2100      	movs	r1, #0
     e56:	f884 3ac8 	strb.w	r3, [r4, #2760]	; 0xac8
     e5a:	f00b facf 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     e5e:	496b      	ldr	r1, [pc, #428]	; (100c <BigHouse::BigHouse(Board_Sys80b&)+0x804>)
     e60:	a804      	add	r0, sp, #16
     e62:	f00b fadf 	bl	c424 <String::String(__FlashStringHelper const*)>
     e66:	a904      	add	r1, sp, #16
     e68:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e6a:	f604 3b2c 	addw	fp, r4, #2860	; 0xb2c
		descr = String(descrText);
     e6e:	f00b fb6b 	bl	c548 <String::operator=(String&&)>
     e72:	a804      	add	r0, sp, #16
     e74:	f00b fa82 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e78:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     e7c:	232e      	movs	r3, #46	; 0x2e
     e7e:	4650      	mov	r0, sl
     e80:	f8c4 2adc 	str.w	r2, [r4, #2780]	; 0xadc
     e84:	2100      	movs	r1, #0
     e86:	f884 3ae0 	strb.w	r3, [r4, #2784]	; 0xae0
     e8a:	f00b fab7 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     e8e:	4641      	mov	r1, r8
     e90:	a804      	add	r0, sp, #16
     e92:	f00b fac7 	bl	c424 <String::String(__FlashStringHelper const*)>
     e96:	a904      	add	r1, sp, #16
     e98:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e9a:	f604 3a44 	addw	sl, r4, #2884	; 0xb44
		descr = String(descrText);
     e9e:	f00b fb53 	bl	c548 <String::operator=(String&&)>
     ea2:	a804      	add	r0, sp, #16
     ea4:	f00b fa6a 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ea8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     eac:	2332      	movs	r3, #50	; 0x32
     eae:	4630      	mov	r0, r6
     eb0:	f8c4 2af4 	str.w	r2, [r4, #2804]	; 0xaf4
     eb4:	2100      	movs	r1, #0
     eb6:	f884 3af8 	strb.w	r3, [r4, #2808]	; 0xaf8
     eba:	f00b fa9f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     ebe:	4954      	ldr	r1, [pc, #336]	; (1010 <BigHouse::BigHouse(Board_Sys80b&)+0x808>)
     ec0:	a804      	add	r0, sp, #16
     ec2:	f00b faaf 	bl	c424 <String::String(__FlashStringHelper const*)>
     ec6:	a904      	add	r1, sp, #16
     ec8:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     eca:	f604 365c 	addw	r6, r4, #2908	; 0xb5c
		descr = String(descrText);
     ece:	f00b fb3b 	bl	c548 <String::operator=(String&&)>
     ed2:	a804      	add	r0, sp, #16
     ed4:	f00b fa52 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ed8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     edc:	2333      	movs	r3, #51	; 0x33
     ede:	4648      	mov	r0, r9
     ee0:	f8c4 2b0c 	str.w	r2, [r4, #2828]	; 0xb0c
     ee4:	2100      	movs	r1, #0
     ee6:	f884 3b10 	strb.w	r3, [r4, #2832]	; 0xb10
     eea:	f00b fa87 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     eee:	4949      	ldr	r1, [pc, #292]	; (1014 <BigHouse::BigHouse(Board_Sys80b&)+0x80c>)
     ef0:	a804      	add	r0, sp, #16
     ef2:	f00b fa97 	bl	c424 <String::String(__FlashStringHelper const*)>
     ef6:	a904      	add	r1, sp, #16
     ef8:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     efa:	f604 3974 	addw	r9, r4, #2932	; 0xb74
		descr = String(descrText);
     efe:	f00b fb23 	bl	c548 <String::operator=(String&&)>
     f02:	a804      	add	r0, sp, #16
     f04:	f00b fa3a 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f08:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f0c:	2334      	movs	r3, #52	; 0x34
     f0e:	4658      	mov	r0, fp
     f10:	f8c4 2b24 	str.w	r2, [r4, #2852]	; 0xb24
     f14:	2100      	movs	r1, #0
     f16:	f884 3b28 	strb.w	r3, [r4, #2856]	; 0xb28
     f1a:	f00b fa6f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     f1e:	493e      	ldr	r1, [pc, #248]	; (1018 <BigHouse::BigHouse(Board_Sys80b&)+0x810>)
     f20:	a804      	add	r0, sp, #16
     f22:	f00b fa7f 	bl	c424 <String::String(__FlashStringHelper const*)>
     f26:	a904      	add	r1, sp, #16
     f28:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f2a:	f604 3b8c 	addw	fp, r4, #2956	; 0xb8c
		descr = String(descrText);
     f2e:	f00b fb0b 	bl	c548 <String::operator=(String&&)>
     f32:	a804      	add	r0, sp, #16
     f34:	f00b fa22 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f38:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f3c:	2335      	movs	r3, #53	; 0x35
     f3e:	4650      	mov	r0, sl
     f40:	f8c4 2b3c 	str.w	r2, [r4, #2876]	; 0xb3c
     f44:	2100      	movs	r1, #0
     f46:	f884 3b40 	strb.w	r3, [r4, #2880]	; 0xb40
     f4a:	f00b fa57 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     f4e:	4933      	ldr	r1, [pc, #204]	; (101c <BigHouse::BigHouse(Board_Sys80b&)+0x814>)
     f50:	a804      	add	r0, sp, #16
     f52:	f00b fa67 	bl	c424 <String::String(__FlashStringHelper const*)>
     f56:	a904      	add	r1, sp, #16
     f58:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f5a:	f604 3aa4 	addw	sl, r4, #2980	; 0xba4
		descr = String(descrText);
     f5e:	f00b faf3 	bl	c548 <String::operator=(String&&)>
     f62:	a804      	add	r0, sp, #16
     f64:	f00b fa0a 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f68:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f6c:	2336      	movs	r3, #54	; 0x36
     f6e:	4630      	mov	r0, r6
     f70:	f8c4 2b54 	str.w	r2, [r4, #2900]	; 0xb54
     f74:	2100      	movs	r1, #0
     f76:	f884 3b58 	strb.w	r3, [r4, #2904]	; 0xb58
     f7a:	f00b fa3f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     f7e:	4928      	ldr	r1, [pc, #160]	; (1020 <BigHouse::BigHouse(Board_Sys80b&)+0x818>)
     f80:	a804      	add	r0, sp, #16
     f82:	f00b fa4f 	bl	c424 <String::String(__FlashStringHelper const*)>
     f86:	a904      	add	r1, sp, #16
     f88:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f8a:	f604 36bc 	addw	r6, r4, #3004	; 0xbbc
		descr = String(descrText);
     f8e:	f00b fadb 	bl	c548 <String::operator=(String&&)>
     f92:	a804      	add	r0, sp, #16
     f94:	f00b f9f2 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f98:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f9c:	2337      	movs	r3, #55	; 0x37
     f9e:	4648      	mov	r0, r9
     fa0:	f8c4 2b6c 	str.w	r2, [r4, #2924]	; 0xb6c
     fa4:	2100      	movs	r1, #0
     fa6:	f884 3b70 	strb.w	r3, [r4, #2928]	; 0xb70
     faa:	f00b fa27 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     fae:	491d      	ldr	r1, [pc, #116]	; (1024 <BigHouse::BigHouse(Board_Sys80b&)+0x81c>)
     fb0:	a804      	add	r0, sp, #16
     fb2:	f00b fa37 	bl	c424 <String::String(__FlashStringHelper const*)>
     fb6:	a904      	add	r1, sp, #16
     fb8:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     fba:	f604 39d4 	addw	r9, r4, #3028	; 0xbd4
		descr = String(descrText);
     fbe:	f00b fac3 	bl	c548 <String::operator=(String&&)>
     fc2:	a804      	add	r0, sp, #16
     fc4:	f00b f9da 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     fc8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     fcc:	2338      	movs	r3, #56	; 0x38
     fce:	4658      	mov	r0, fp
     fd0:	f8c4 2b84 	str.w	r2, [r4, #2948]	; 0xb84
     fd4:	2100      	movs	r1, #0
     fd6:	f884 3b88 	strb.w	r3, [r4, #2952]	; 0xb88
     fda:	f00b fa0f 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
     fde:	4912      	ldr	r1, [pc, #72]	; (1028 <BigHouse::BigHouse(Board_Sys80b&)+0x820>)
     fe0:	a804      	add	r0, sp, #16
     fe2:	e023      	b.n	102c <BigHouse::BigHouse(Board_Sys80b&)+0x824>
     fe4:	20000574 	.word	0x20000574
     fe8:	20000584 	.word	0x20000584
     fec:	20000594 	.word	0x20000594
     ff0:	200005b0 	.word	0x200005b0
     ff4:	200005c0 	.word	0x200005c0
     ff8:	200005d0 	.word	0x200005d0
     ffc:	200005e0 	.word	0x200005e0
    1000:	200005f4 	.word	0x200005f4
    1004:	20000608 	.word	0x20000608
    1008:	2000061c 	.word	0x2000061c
    100c:	20000638 	.word	0x20000638
    1010:	20000650 	.word	0x20000650
    1014:	20000660 	.word	0x20000660
    1018:	20000674 	.word	0x20000674
    101c:	20000688 	.word	0x20000688
    1020:	2000069c 	.word	0x2000069c
    1024:	200006ac 	.word	0x200006ac
    1028:	200004f8 	.word	0x200004f8
    102c:	f00b f9fa 	bl	c424 <String::String(__FlashStringHelper const*)>
    1030:	a904      	add	r1, sp, #16
    1032:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1034:	f604 3bec 	addw	fp, r4, #3052	; 0xbec
		descr = String(descrText);
    1038:	f00b fa86 	bl	c548 <String::operator=(String&&)>
    103c:	a804      	add	r0, sp, #16
    103e:	f00b f99d 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1042:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1046:	233c      	movs	r3, #60	; 0x3c
    1048:	4650      	mov	r0, sl
    104a:	f8c4 2b9c 	str.w	r2, [r4, #2972]	; 0xb9c
    104e:	2100      	movs	r1, #0
    1050:	f884 3ba0 	strb.w	r3, [r4, #2976]	; 0xba0
    1054:	f00b f9d2 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1058:	49d2      	ldr	r1, [pc, #840]	; (13a4 <BigHouse::BigHouse(Board_Sys80b&)+0xb9c>)
    105a:	a804      	add	r0, sp, #16
    105c:	f00b f9e2 	bl	c424 <String::String(__FlashStringHelper const*)>
    1060:	a904      	add	r1, sp, #16
    1062:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1064:	f604 4a04 	addw	sl, r4, #3076	; 0xc04
		descr = String(descrText);
    1068:	f00b fa6e 	bl	c548 <String::operator=(String&&)>
    106c:	a804      	add	r0, sp, #16
    106e:	f00b f985 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1072:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1076:	233d      	movs	r3, #61	; 0x3d
    1078:	4630      	mov	r0, r6
    107a:	f8c4 2bb4 	str.w	r2, [r4, #2996]	; 0xbb4
    107e:	2100      	movs	r1, #0
    1080:	f884 3bb8 	strb.w	r3, [r4, #3000]	; 0xbb8
    1084:	f00b f9ba 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1088:	49c7      	ldr	r1, [pc, #796]	; (13a8 <BigHouse::BigHouse(Board_Sys80b&)+0xba0>)
    108a:	a804      	add	r0, sp, #16
    108c:	f00b f9ca 	bl	c424 <String::String(__FlashStringHelper const*)>
    1090:	a904      	add	r1, sp, #16
    1092:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1094:	f604 461c 	addw	r6, r4, #3100	; 0xc1c
		descr = String(descrText);
    1098:	f00b fa56 	bl	c548 <String::operator=(String&&)>
    109c:	a804      	add	r0, sp, #16
    109e:	f00b f96d 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10a2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    10a6:	233e      	movs	r3, #62	; 0x3e
    10a8:	4648      	mov	r0, r9
    10aa:	f8c4 2bcc 	str.w	r2, [r4, #3020]	; 0xbcc
    10ae:	2100      	movs	r1, #0
    10b0:	f884 3bd0 	strb.w	r3, [r4, #3024]	; 0xbd0
    10b4:	f00b f9a2 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    10b8:	49bc      	ldr	r1, [pc, #752]	; (13ac <BigHouse::BigHouse(Board_Sys80b&)+0xba4>)
    10ba:	a804      	add	r0, sp, #16
    10bc:	f00b f9b2 	bl	c424 <String::String(__FlashStringHelper const*)>
    10c0:	a904      	add	r1, sp, #16
    10c2:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10c4:	f604 4934 	addw	r9, r4, #3124	; 0xc34
		descr = String(descrText);
    10c8:	f00b fa3e 	bl	c548 <String::operator=(String&&)>
    10cc:	a804      	add	r0, sp, #16
    10ce:	f00b f955 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10d2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    10d6:	233f      	movs	r3, #63	; 0x3f
    10d8:	4658      	mov	r0, fp
    10da:	f8c4 2be4 	str.w	r2, [r4, #3044]	; 0xbe4
    10de:	2100      	movs	r1, #0
    10e0:	f884 3be8 	strb.w	r3, [r4, #3048]	; 0xbe8
    10e4:	f00b f98a 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    10e8:	49b1      	ldr	r1, [pc, #708]	; (13b0 <BigHouse::BigHouse(Board_Sys80b&)+0xba8>)
    10ea:	a804      	add	r0, sp, #16
    10ec:	f00b f99a 	bl	c424 <String::String(__FlashStringHelper const*)>
    10f0:	a904      	add	r1, sp, #16
    10f2:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10f4:	f604 4b4c 	addw	fp, r4, #3148	; 0xc4c
		descr = String(descrText);
    10f8:	f00b fa26 	bl	c548 <String::operator=(String&&)>
    10fc:	a804      	add	r0, sp, #16
    10fe:	f00b f93d 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1102:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1106:	2340      	movs	r3, #64	; 0x40
    1108:	4650      	mov	r0, sl
    110a:	f8c4 2bfc 	str.w	r2, [r4, #3068]	; 0xbfc
    110e:	2100      	movs	r1, #0
    1110:	f884 3c00 	strb.w	r3, [r4, #3072]	; 0xc00
    1114:	f00b f972 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1118:	49a6      	ldr	r1, [pc, #664]	; (13b4 <BigHouse::BigHouse(Board_Sys80b&)+0xbac>)
    111a:	a804      	add	r0, sp, #16
    111c:	f00b f982 	bl	c424 <String::String(__FlashStringHelper const*)>
    1120:	a904      	add	r1, sp, #16
    1122:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1124:	f604 4a64 	addw	sl, r4, #3172	; 0xc64
		descr = String(descrText);
    1128:	f00b fa0e 	bl	c548 <String::operator=(String&&)>
    112c:	a804      	add	r0, sp, #16
    112e:	f00b f925 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1132:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1136:	2341      	movs	r3, #65	; 0x41
    1138:	4630      	mov	r0, r6
    113a:	f8c4 2c14 	str.w	r2, [r4, #3092]	; 0xc14
    113e:	2100      	movs	r1, #0
    1140:	f884 3c18 	strb.w	r3, [r4, #3096]	; 0xc18
    1144:	f00b f95a 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1148:	499b      	ldr	r1, [pc, #620]	; (13b8 <BigHouse::BigHouse(Board_Sys80b&)+0xbb0>)
    114a:	a804      	add	r0, sp, #16
    114c:	f00b f96a 	bl	c424 <String::String(__FlashStringHelper const*)>
    1150:	a904      	add	r1, sp, #16
    1152:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1154:	f604 467c 	addw	r6, r4, #3196	; 0xc7c
		descr = String(descrText);
    1158:	f00b f9f6 	bl	c548 <String::operator=(String&&)>
    115c:	a804      	add	r0, sp, #16
    115e:	f00b f90d 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1162:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1166:	2342      	movs	r3, #66	; 0x42
    1168:	4648      	mov	r0, r9
    116a:	f8c4 2c2c 	str.w	r2, [r4, #3116]	; 0xc2c
    116e:	2100      	movs	r1, #0
    1170:	f884 3c30 	strb.w	r3, [r4, #3120]	; 0xc30
    1174:	f00b f942 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1178:	4990      	ldr	r1, [pc, #576]	; (13bc <BigHouse::BigHouse(Board_Sys80b&)+0xbb4>)
    117a:	a804      	add	r0, sp, #16
    117c:	f00b f952 	bl	c424 <String::String(__FlashStringHelper const*)>
    1180:	a904      	add	r1, sp, #16
    1182:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1184:	f604 4994 	addw	r9, r4, #3220	; 0xc94
		descr = String(descrText);
    1188:	f00b f9de 	bl	c548 <String::operator=(String&&)>
    118c:	a804      	add	r0, sp, #16
    118e:	f00b f8f5 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1192:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1196:	2346      	movs	r3, #70	; 0x46
    1198:	4658      	mov	r0, fp
    119a:	f8c4 2c44 	str.w	r2, [r4, #3140]	; 0xc44
    119e:	2100      	movs	r1, #0
    11a0:	f884 3c48 	strb.w	r3, [r4, #3144]	; 0xc48
    11a4:	f00b f92a 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    11a8:	4985      	ldr	r1, [pc, #532]	; (13c0 <BigHouse::BigHouse(Board_Sys80b&)+0xbb8>)
    11aa:	a804      	add	r0, sp, #16
    11ac:	f00b f93a 	bl	c424 <String::String(__FlashStringHelper const*)>
    11b0:	a904      	add	r1, sp, #16
    11b2:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11b4:	f604 4bac 	addw	fp, r4, #3244	; 0xcac
		descr = String(descrText);
    11b8:	f00b f9c6 	bl	c548 <String::operator=(String&&)>
    11bc:	a804      	add	r0, sp, #16
    11be:	f00b f8dd 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11c2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    11c6:	2347      	movs	r3, #71	; 0x47
    11c8:	4650      	mov	r0, sl
    11ca:	f8c4 2c5c 	str.w	r2, [r4, #3164]	; 0xc5c
    11ce:	2100      	movs	r1, #0
    11d0:	f884 3c60 	strb.w	r3, [r4, #3168]	; 0xc60
    11d4:	f00b f912 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    11d8:	497a      	ldr	r1, [pc, #488]	; (13c4 <BigHouse::BigHouse(Board_Sys80b&)+0xbbc>)
    11da:	a804      	add	r0, sp, #16
    11dc:	f00b f922 	bl	c424 <String::String(__FlashStringHelper const*)>
    11e0:	a904      	add	r1, sp, #16
    11e2:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11e4:	f604 4ac4 	addw	sl, r4, #3268	; 0xcc4
		descr = String(descrText);
    11e8:	f00b f9ae 	bl	c548 <String::operator=(String&&)>
    11ec:	a804      	add	r0, sp, #16
    11ee:	f00b f8c5 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11f2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    11f6:	2348      	movs	r3, #72	; 0x48
    11f8:	4630      	mov	r0, r6
    11fa:	f8c4 2c74 	str.w	r2, [r4, #3188]	; 0xc74
    11fe:	2100      	movs	r1, #0
    1200:	f884 3c78 	strb.w	r3, [r4, #3192]	; 0xc78
    1204:	f00b f8fa 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1208:	496f      	ldr	r1, [pc, #444]	; (13c8 <BigHouse::BigHouse(Board_Sys80b&)+0xbc0>)
    120a:	a804      	add	r0, sp, #16
    120c:	f00b f90a 	bl	c424 <String::String(__FlashStringHelper const*)>
    1210:	a904      	add	r1, sp, #16
    1212:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1214:	f604 46dc 	addw	r6, r4, #3292	; 0xcdc
		descr = String(descrText);
    1218:	f00b f996 	bl	c548 <String::operator=(String&&)>
    121c:	a804      	add	r0, sp, #16
    121e:	f00b f8ad 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1222:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1226:	2349      	movs	r3, #73	; 0x49
    1228:	2100      	movs	r1, #0
    122a:	f8c4 2c8c 	str.w	r2, [r4, #3212]	; 0xc8c
    122e:	4648      	mov	r0, r9
    1230:	f884 3c90 	strb.w	r3, [r4, #3216]	; 0xc90
    1234:	f00b f8e2 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1238:	4964      	ldr	r1, [pc, #400]	; (13cc <BigHouse::BigHouse(Board_Sys80b&)+0xbc4>)
    123a:	a804      	add	r0, sp, #16
    123c:	f00b f8f2 	bl	c424 <String::String(__FlashStringHelper const*)>
    1240:	a904      	add	r1, sp, #16
    1242:	4648      	mov	r0, r9
    1244:	f00b f980 	bl	c548 <String::operator=(String&&)>
    1248:	a804      	add	r0, sp, #16
    124a:	f00b f897 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    124e:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1252:	234a      	movs	r3, #74	; 0x4a
    1254:	2100      	movs	r1, #0
    1256:	f8c4 2ca4 	str.w	r2, [r4, #3236]	; 0xca4
    125a:	4658      	mov	r0, fp
    125c:	f884 3ca8 	strb.w	r3, [r4, #3240]	; 0xca8
    1260:	f00b f8cc 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1264:	495a      	ldr	r1, [pc, #360]	; (13d0 <BigHouse::BigHouse(Board_Sys80b&)+0xbc8>)
    1266:	a804      	add	r0, sp, #16
    1268:	f00b f8dc 	bl	c424 <String::String(__FlashStringHelper const*)>
    126c:	a904      	add	r1, sp, #16
    126e:	4658      	mov	r0, fp
    1270:	f00b f96a 	bl	c548 <String::operator=(String&&)>
    1274:	a804      	add	r0, sp, #16
    1276:	f00b f881 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    127a:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    127e:	234b      	movs	r3, #75	; 0x4b
    1280:	2100      	movs	r1, #0
    1282:	f8c4 2cbc 	str.w	r2, [r4, #3260]	; 0xcbc
    1286:	4650      	mov	r0, sl
    1288:	f884 3cc0 	strb.w	r3, [r4, #3264]	; 0xcc0
    128c:	f00b f8b6 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    1290:	4950      	ldr	r1, [pc, #320]	; (13d4 <BigHouse::BigHouse(Board_Sys80b&)+0xbcc>)
    1292:	a804      	add	r0, sp, #16
    1294:	f00b f8c6 	bl	c424 <String::String(__FlashStringHelper const*)>
    1298:	a904      	add	r1, sp, #16
    129a:	4650      	mov	r0, sl
    129c:	f00b f954 	bl	c548 <String::operator=(String&&)>
    12a0:	a804      	add	r0, sp, #16
    12a2:	f00b f86b 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    12a6:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    12aa:	234c      	movs	r3, #76	; 0x4c
    12ac:	2100      	movs	r1, #0
    12ae:	f8c4 2cd4 	str.w	r2, [r4, #3284]	; 0xcd4
    12b2:	4630      	mov	r0, r6
    12b4:	f884 3cd8 	strb.w	r3, [r4, #3288]	; 0xcd8
    12b8:	f00b f8a0 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    12bc:	4946      	ldr	r1, [pc, #280]	; (13d8 <BigHouse::BigHouse(Board_Sys80b&)+0xbd0>)
    12be:	a804      	add	r0, sp, #16
    12c0:	f00b f8b0 	bl	c424 <String::String(__FlashStringHelper const*)>
    12c4:	a904      	add	r1, sp, #16
    12c6:	4630      	mov	r0, r6
    12c8:	f00b f93e 	bl	c548 <String::operator=(String&&)>
    12cc:	a804      	add	r0, sp, #16
    12ce:	f00b f855 	bl	c37c <String::~String()>
		ACTUATOR(ballRelease, LAMPS, 2, "ball release");
		ACTUATOR(ramp, LAMPS, 12, "ramp");
		ACTUATOR(ballGate, LAMPS, 13, "ball gate");
		ACTUATOR(auger, LAMPS, 14, "auger motor");
		// constructor
		Act(Sys80b* sys) : _sys(sys) {};
    12d2:	f8cd 8000 	str.w	r8, [sp]
    12d6:	4621      	mov	r1, r4
    12d8:	2302      	movs	r3, #2
    12da:	2201      	movs	r2, #1
    12dc:	f8c4 4cec 	str.w	r4, [r4, #3308]	; 0xcec
    12e0:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
    12e4:	f004 fa48 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    12e8:	4b3c      	ldr	r3, [pc, #240]	; (13dc <BigHouse::BigHouse(Board_Sys80b&)+0xbd4>)
    12ea:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    12ee:	2201      	movs	r2, #1
    12f0:	9300      	str	r3, [sp, #0]
    12f2:	f604 5008 	addw	r0, r4, #3336	; 0xd08
    12f6:	2303      	movs	r3, #3
    12f8:	f004 fa3e 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    12fc:	4b38      	ldr	r3, [pc, #224]	; (13e0 <BigHouse::BigHouse(Board_Sys80b&)+0xbd8>)
    12fe:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    1302:	2201      	movs	r2, #1
    1304:	9300      	str	r3, [sp, #0]
    1306:	f504 6052 	add.w	r0, r4, #3360	; 0xd20
    130a:	2304      	movs	r3, #4
    130c:	f004 fa34 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1310:	4b34      	ldr	r3, [pc, #208]	; (13e4 <BigHouse::BigHouse(Board_Sys80b&)+0xbdc>)
    1312:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    1316:	2201      	movs	r2, #1
    1318:	9300      	str	r3, [sp, #0]
    131a:	f604 5038 	addw	r0, r4, #3384	; 0xd38
    131e:	2305      	movs	r3, #5
    1320:	f004 fa2a 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1324:	4b30      	ldr	r3, [pc, #192]	; (13e8 <BigHouse::BigHouse(Board_Sys80b&)+0xbe0>)
    1326:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    132a:	2201      	movs	r2, #1
    132c:	9300      	str	r3, [sp, #0]
    132e:	f504 6055 	add.w	r0, r4, #3408	; 0xd50
    1332:	2306      	movs	r3, #6
    1334:	f004 fa20 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1338:	4b2c      	ldr	r3, [pc, #176]	; (13ec <BigHouse::BigHouse(Board_Sys80b&)+0xbe4>)
    133a:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    133e:	2201      	movs	r2, #1
    1340:	9300      	str	r3, [sp, #0]
    1342:	f604 5068 	addw	r0, r4, #3432	; 0xd68
    1346:	2307      	movs	r3, #7
    1348:	f004 fa16 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    134c:	4a28      	ldr	r2, [pc, #160]	; (13f0 <BigHouse::BigHouse(Board_Sys80b&)+0xbe8>)
    134e:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    1352:	2302      	movs	r3, #2
    1354:	9200      	str	r2, [sp, #0]
    1356:	f504 6058 	add.w	r0, r4, #3456	; 0xd80
    135a:	2203      	movs	r2, #3
    135c:	f004 fa0c 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1360:	4a24      	ldr	r2, [pc, #144]	; (13f4 <BigHouse::BigHouse(Board_Sys80b&)+0xbec>)
    1362:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    1366:	230c      	movs	r3, #12
    1368:	9200      	str	r2, [sp, #0]
    136a:	f604 5098 	addw	r0, r4, #3480	; 0xd98
    136e:	2203      	movs	r2, #3
    1370:	f004 fa02 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1374:	4a20      	ldr	r2, [pc, #128]	; (13f8 <BigHouse::BigHouse(Board_Sys80b&)+0xbf0>)
    1376:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    137a:	230d      	movs	r3, #13
    137c:	9200      	str	r2, [sp, #0]
    137e:	f504 605b 	add.w	r0, r4, #3504	; 0xdb0
    1382:	2203      	movs	r2, #3
    1384:	f004 f9f8 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1388:	4a1c      	ldr	r2, [pc, #112]	; (13fc <BigHouse::BigHouse(Board_Sys80b&)+0xbf4>)
    138a:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    138e:	f604 50c8 	addw	r0, r4, #3528	; 0xdc8
    1392:	9200      	str	r2, [sp, #0]
    1394:	230e      	movs	r3, #14
    1396:	2203      	movs	r2, #3
    1398:	f004 f9ee 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    139c:	f504 6e5e 	add.w	lr, r4, #3552	; 0xde0
    13a0:	e02e      	b.n	1400 <BigHouse::BigHouse(Board_Sys80b&)+0xbf8>
    13a2:	bf00      	nop
    13a4:	200006c4 	.word	0x200006c4
    13a8:	200006d4 	.word	0x200006d4
    13ac:	200006e8 	.word	0x200006e8
    13b0:	200006fc 	.word	0x200006fc
    13b4:	20000718 	.word	0x20000718
    13b8:	20000728 	.word	0x20000728
    13bc:	20000740 	.word	0x20000740
    13c0:	2000074c 	.word	0x2000074c
    13c4:	2000075c 	.word	0x2000075c
    13c8:	20000770 	.word	0x20000770
    13cc:	20000784 	.word	0x20000784
    13d0:	200007a0 	.word	0x200007a0
    13d4:	200007b0 	.word	0x200007b0
    13d8:	20000744 	.word	0x20000744
    13dc:	200004cc 	.word	0x200004cc
    13e0:	200004e0 	.word	0x200004e0
    13e4:	200004f8 	.word	0x200004f8
    13e8:	20000508 	.word	0x20000508
    13ec:	20000514 	.word	0x20000514
    13f0:	200007c8 	.word	0x200007c8
    13f4:	200007d8 	.word	0x200007d8
    13f8:	200007e0 	.word	0x200007e0
    13fc:	200007ec 	.word	0x200007ec
    1400:	6828      	ldr	r0, [r5, #0]
    1402:	3510      	adds	r5, #16
    1404:	f855 1c0c 	ldr.w	r1, [r5, #-12]
    1408:	4676      	mov	r6, lr
    140a:	f855 2c08 	ldr.w	r2, [r5, #-8]
    140e:	f10e 0e10 	add.w	lr, lr, #16
    1412:	f855 3c04 	ldr.w	r3, [r5, #-4]
    1416:	42bd      	cmp	r5, r7
    1418:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    141a:	d1f1      	bne.n	1400 <BigHouse::BigHouse(Board_Sys80b&)+0xbf8>
	msg->outln(F("BigHouse init..."));
    141c:	49c6      	ldr	r1, [pc, #792]	; (1738 <BigHouse::BigHouse(Board_Sys80b&)+0xf30>)
	delay(100);
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
	slamSwitchNormalState = false;
    141e:	f04f 0800 	mov.w	r8, #0
#include "LightGroup.h"

//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
    1422:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
	slamSwitchNormalState = false;
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
    1426:	f04f 35ff 	mov.w	r5, #4294967295
#include "LightGroup.h"

//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
    142a:	f005 f9d5 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	delay(100);
    142e:	2064      	movs	r0, #100	; 0x64
    1430:	f009 f9f0 	bl	a814 <delay>
	_gameName = String(GAME_NAME);
    1434:	f8d4 1528 	ldr.w	r1, [r4, #1320]	; 0x528
    1438:	a804      	add	r0, sp, #16
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
	special_ls = new LightGroup("special", 10, 11, -1);
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
    143a:	2720      	movs	r7, #32
//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
	delay(100);
	_gameName = String(GAME_NAME);
    143c:	f00a ffde 	bl	c3fc <String::String(char const*)>
    1440:	a904      	add	r1, sp, #16
    1442:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
	special_ls = new LightGroup("special", 10, 11, -1);
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
    1446:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
	delay(100);
	_gameName = String(GAME_NAME);
    144a:	f00b f87d 	bl	c548 <String::operator=(String&&)>
    144e:	a804      	add	r0, sp, #16
    1450:	f00a ff94 	bl	c37c <String::~String()>
	_gameNum = GAME_NUMBER;
    1454:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
	slamSwitchNormalState = false;
    1458:	f884 827d 	strb.w	r8, [r4, #637]	; 0x27d
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
    145c:	201c      	movs	r0, #28

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
	delay(100);
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
    145e:	f8a4 3518 	strh.w	r3, [r4, #1304]	; 0x518
	slamSwitchNormalState = false;
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
    1462:	f00a fe81 	bl	c168 <operator new(unsigned int)>
    1466:	2207      	movs	r2, #7
    1468:	4606      	mov	r6, r0
    146a:	9501      	str	r5, [sp, #4]
    146c:	2306      	movs	r3, #6
    146e:	9200      	str	r2, [sp, #0]
    1470:	49b2      	ldr	r1, [pc, #712]	; (173c <BigHouse::BigHouse(Board_Sys80b&)+0xf34>)
    1472:	2205      	movs	r2, #5
    1474:	f002 fbf2 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    1478:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
    147c:	201c      	movs	r0, #28
    147e:	f00a fe73 	bl	c168 <operator new(unsigned int)>
    1482:	4606      	mov	r6, r0
    1484:	9500      	str	r5, [sp, #0]
    1486:	2309      	movs	r3, #9
    1488:	2208      	movs	r2, #8
    148a:	49ad      	ldr	r1, [pc, #692]	; (1740 <BigHouse::BigHouse(Board_Sys80b&)+0xf38>)
    148c:	f002 fbe6 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    1490:	f8c4 6570 	str.w	r6, [r4, #1392]	; 0x570
	special_ls = new LightGroup("special", 10, 11, -1);
    1494:	201c      	movs	r0, #28
    1496:	f00a fe67 	bl	c168 <operator new(unsigned int)>
    149a:	9500      	str	r5, [sp, #0]
    149c:	4606      	mov	r6, r0
    149e:	230b      	movs	r3, #11
    14a0:	220a      	movs	r2, #10
    14a2:	49a8      	ldr	r1, [pc, #672]	; (1744 <BigHouse::BigHouse(Board_Sys80b&)+0xf3c>)
    14a4:	f002 fbda 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
    14a8:	201c      	movs	r0, #28
	slamSwitchNormalState = false;
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
	special_ls = new LightGroup("special", 10, 11, -1);
    14aa:	f8c4 6574 	str.w	r6, [r4, #1396]	; 0x574
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
    14ae:	4606      	mov	r6, r0
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
	special_ls = new LightGroup("special", 10, 11, -1);
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
    14b0:	f00a fe5a 	bl	c168 <operator new(unsigned int)>
    14b4:	2219      	movs	r2, #25
    14b6:	2118      	movs	r1, #24
    14b8:	4681      	mov	r9, r0
    14ba:	9502      	str	r5, [sp, #8]
    14bc:	2317      	movs	r3, #23
    14be:	9201      	str	r2, [sp, #4]
    14c0:	9100      	str	r1, [sp, #0]
    14c2:	2216      	movs	r2, #22
    14c4:	49a0      	ldr	r1, [pc, #640]	; (1748 <BigHouse::BigHouse(Board_Sys80b&)+0xf40>)
    14c6:	f002 fbc9 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    14ca:	f8c4 9578 	str.w	r9, [r4, #1400]	; 0x578
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
    14ce:	4630      	mov	r0, r6
    14d0:	f00a fe4a 	bl	c168 <operator new(unsigned int)>
    14d4:	2221      	movs	r2, #33	; 0x21
    14d6:	211f      	movs	r1, #31
    14d8:	4681      	mov	r9, r0
    14da:	9503      	str	r5, [sp, #12]
    14dc:	231e      	movs	r3, #30
    14de:	9202      	str	r2, [sp, #8]
    14e0:	221d      	movs	r2, #29
    14e2:	9100      	str	r1, [sp, #0]
    14e4:	9701      	str	r7, [sp, #4]
    14e6:	4999      	ldr	r1, [pc, #612]	; (174c <BigHouse::BigHouse(Board_Sys80b&)+0xf44>)
    14e8:	f002 fbb8 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    14ec:	f8c4 957c 	str.w	r9, [r4, #1404]	; 0x57c
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
    14f0:	4630      	mov	r0, r6
    14f2:	f00a fe39 	bl	c168 <operator new(unsigned int)>
    14f6:	2225      	movs	r2, #37	; 0x25
    14f8:	2124      	movs	r1, #36	; 0x24
    14fa:	4681      	mov	r9, r0
    14fc:	9502      	str	r5, [sp, #8]
    14fe:	2323      	movs	r3, #35	; 0x23
    1500:	9201      	str	r2, [sp, #4]
    1502:	2222      	movs	r2, #34	; 0x22
    1504:	9100      	str	r1, [sp, #0]
    1506:	4992      	ldr	r1, [pc, #584]	; (1750 <BigHouse::BigHouse(Board_Sys80b&)+0xf48>)
    1508:	f002 fba8 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    150c:	f8c4 9580 	str.w	r9, [r4, #1408]	; 0x580
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
    1510:	4630      	mov	r0, r6
    1512:	f00a fe29 	bl	c168 <operator new(unsigned int)>
    1516:	2229      	movs	r2, #41	; 0x29
    1518:	2128      	movs	r1, #40	; 0x28
    151a:	4681      	mov	r9, r0
    151c:	9502      	str	r5, [sp, #8]
    151e:	2327      	movs	r3, #39	; 0x27
    1520:	9201      	str	r2, [sp, #4]
    1522:	2226      	movs	r2, #38	; 0x26
    1524:	9100      	str	r1, [sp, #0]
    1526:	498b      	ldr	r1, [pc, #556]	; (1754 <BigHouse::BigHouse(Board_Sys80b&)+0xf4c>)
    1528:	f002 fb98 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    152c:	f8c4 9584 	str.w	r9, [r4, #1412]	; 0x584
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
    1530:	4630      	mov	r0, r6
    1532:	f00a fe19 	bl	c168 <operator new(unsigned int)>
    1536:	222d      	movs	r2, #45	; 0x2d
    1538:	4681      	mov	r9, r0
    153a:	9502      	str	r5, [sp, #8]
    153c:	232b      	movs	r3, #43	; 0x2b
    153e:	9201      	str	r2, [sp, #4]
    1540:	f8cd a000 	str.w	sl, [sp]
    1544:	222a      	movs	r2, #42	; 0x2a
    1546:	4984      	ldr	r1, [pc, #528]	; (1758 <BigHouse::BigHouse(Board_Sys80b&)+0xf50>)
    1548:	f002 fb88 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    154c:	f8c4 9588 	str.w	r9, [r4, #1416]	; 0x588
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
    1550:	4630      	mov	r0, r6
    1552:	f00a fe09 	bl	c168 <operator new(unsigned int)>
    1556:	4681      	mov	r9, r0
    1558:	9500      	str	r5, [sp, #0]
    155a:	232e      	movs	r3, #46	; 0x2e
    155c:	2211      	movs	r2, #17
    155e:	497f      	ldr	r1, [pc, #508]	; (175c <BigHouse::BigHouse(Board_Sys80b&)+0xf54>)
    1560:	f002 fb7c 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    1564:	f8c4 958c 	str.w	r9, [r4, #1420]	; 0x58c
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
    1568:	4630      	mov	r0, r6
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
    156a:	f504 7925 	add.w	r9, r4, #660	; 0x294
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
    156e:	f00a fdfb 	bl	c168 <operator new(unsigned int)>
    1572:	4683      	mov	fp, r0
    1574:	9501      	str	r5, [sp, #4]
    1576:	231b      	movs	r3, #27
    1578:	9600      	str	r6, [sp, #0]
    157a:	221a      	movs	r2, #26
    157c:	4978      	ldr	r1, [pc, #480]	; (1760 <BigHouse::BigHouse(Board_Sys80b&)+0xf58>)
    157e:	f002 fb6d 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    1582:	f8c4 b590 	str.w	fp, [r4, #1424]	; 0x590
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1);
    1586:	4630      	mov	r0, r6
    1588:	f00a fdee 	bl	c168 <operator new(unsigned int)>
    158c:	2215      	movs	r2, #21
    158e:	4683      	mov	fp, r0
    1590:	9502      	str	r5, [sp, #8]
    1592:	9600      	str	r6, [sp, #0]
    1594:	231b      	movs	r3, #27
    1596:	9201      	str	r2, [sp, #4]
    1598:	221a      	movs	r2, #26
    159a:	4972      	ldr	r1, [pc, #456]	; (1764 <BigHouse::BigHouse(Board_Sys80b&)+0xf5c>)
    159c:	f002 fb5e 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    15a0:	f8c4 b594 	str.w	fp, [r4, #1428]	; 0x594
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
    15a4:	4630      	mov	r0, r6
    15a6:	f00a fddf 	bl	c168 <operator new(unsigned int)>
    15aa:	2209      	movs	r2, #9
    15ac:	210b      	movs	r1, #11
    15ae:	4683      	mov	fp, r0
    15b0:	9502      	str	r5, [sp, #8]
    15b2:	230a      	movs	r3, #10
    15b4:	9201      	str	r2, [sp, #4]
    15b6:	2208      	movs	r2, #8
    15b8:	9100      	str	r1, [sp, #0]
    15ba:	496b      	ldr	r1, [pc, #428]	; (1768 <BigHouse::BigHouse(Board_Sys80b&)+0xf60>)
    15bc:	f002 fb4e 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    15c0:	f8c4 b598 	str.w	fp, [r4, #1432]	; 0x598
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
    15c4:	4630      	mov	r0, r6
    15c6:	f00a fdcf 	bl	c168 <operator new(unsigned int)>
    15ca:	232d      	movs	r3, #45	; 0x2d
    15cc:	4683      	mov	fp, r0
    15ce:	9502      	str	r5, [sp, #8]
    15d0:	9301      	str	r3, [sp, #4]
    15d2:	220f      	movs	r2, #15
    15d4:	2314      	movs	r3, #20
    15d6:	f8cd a000 	str.w	sl, [sp]
    15da:	4964      	ldr	r1, [pc, #400]	; (176c <BigHouse::BigHouse(Board_Sys80b&)+0xf64>)
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
    15dc:	f204 4ae4 	addw	sl, r4, #1252	; 0x4e4
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1);
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
    15e0:	f002 fb3c 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    15e4:	f8c4 b59c 	str.w	fp, [r4, #1436]	; 0x59c
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
    15e8:	4630      	mov	r0, r6
    15ea:	f00a fdbd 	bl	c168 <operator new(unsigned int)>
    15ee:	231f      	movs	r3, #31
    15f0:	4683      	mov	fp, r0
    15f2:	9502      	str	r5, [sp, #8]
    15f4:	9300      	str	r3, [sp, #0]
    15f6:	221d      	movs	r2, #29
    15f8:	231e      	movs	r3, #30
    15fa:	495d      	ldr	r1, [pc, #372]	; (1770 <BigHouse::BigHouse(Board_Sys80b&)+0xf68>)
    15fc:	9701      	str	r7, [sp, #4]
    15fe:	f002 fb2d 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    1602:	f8c4 b5a0 	str.w	fp, [r4, #1440]	; 0x5a0
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
    1606:	4630      	mov	r0, r6
    1608:	f00a fdae 	bl	c168 <operator new(unsigned int)>
    160c:	222b      	movs	r2, #43	; 0x2b
    160e:	2307      	movs	r3, #7
    1610:	4683      	mov	fp, r0
    1612:	9502      	str	r5, [sp, #8]
    1614:	9300      	str	r3, [sp, #0]
    1616:	2306      	movs	r3, #6
    1618:	9201      	str	r2, [sp, #4]
    161a:	2205      	movs	r2, #5
    161c:	4955      	ldr	r1, [pc, #340]	; (1774 <BigHouse::BigHouse(Board_Sys80b&)+0xf6c>)
    161e:	f002 fb1d 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
    1622:	f8c4 b5a4 	str.w	fp, [r4, #1444]	; 0x5a4
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
    1626:	4630      	mov	r0, r6
    1628:	f00a fd9e 	bl	c168 <operator new(unsigned int)>
    162c:	222a      	movs	r2, #42	; 0x2a
    162e:	2321      	movs	r3, #33	; 0x21
    1630:	9502      	str	r5, [sp, #8]
    1632:	9200      	str	r2, [sp, #0]
    1634:	2203      	movs	r2, #3
    1636:	9301      	str	r3, [sp, #4]
    1638:	2311      	movs	r3, #17
    163a:	494f      	ldr	r1, [pc, #316]	; (1778 <BigHouse::BigHouse(Board_Sys80b&)+0xf70>)
    163c:	4606      	mov	r6, r0
    163e:	f002 fb0d 	bl	3c5c <LightGroup::LightGroup(char const*, long, ...)>
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
    1642:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
    1646:	f8d4 1580 	ldr.w	r1, [r4, #1408]	; 0x580
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
    164a:	4638      	mov	r0, r7
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
    164c:	f8c4 35b4 	str.w	r3, [r4, #1460]	; 0x5b4
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
    1650:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
    1654:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
    1658:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
	lShow_set[5] = show4_ls;
    165c:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	; 0x5a0
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
    1660:	f8d4 5598 	ldr.w	r5, [r4, #1432]	; 0x598
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
    1664:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
	lShow_set[6] = show5_ls;
    1668:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1);
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
    166c:	f8c4 65a8 	str.w	r6, [r4, #1448]	; 0x5a8
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
	lShow_set[6] = show5_ls;
	lShow_set[7] = show6_ls;
    1670:	f8c4 65c8 	str.w	r6, [r4, #1480]	; 0x5c8
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
    1674:	2601      	movs	r6, #1
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
    1676:	f8c4 15ac 	str.w	r1, [r4, #1452]	; 0x5ac
	lShow_set[1] = wall_ls;
    167a:	f8c4 25b0 	str.w	r2, [r4, #1456]	; 0x5b0
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
    167e:	f8c4 55b8 	str.w	r5, [r4, #1464]	; 0x5b8
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
	lShow_set[6] = show5_ls;
    1682:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
    1686:	f00a fd6f 	bl	c168 <operator new(unsigned int)>
    168a:	4605      	mov	r5, r0
    168c:	4649      	mov	r1, r9
    168e:	4b3b      	ldr	r3, [pc, #236]	; (177c <BigHouse::BigHouse(Board_Sys80b&)+0xf74>)
    1690:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    1694:	f8cd 8000 	str.w	r8, [sp]
    1698:	f004 fb46 	bl	5d28 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
    169c:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
    16a0:	4638      	mov	r0, r7
    16a2:	f00a fd61 	bl	c168 <operator new(unsigned int)>
    16a6:	4605      	mov	r5, r0
    16a8:	4649      	mov	r1, r9
    16aa:	4b35      	ldr	r3, [pc, #212]	; (1780 <BigHouse::BigHouse(Board_Sys80b&)+0xf78>)
    16ac:	22c8      	movs	r2, #200	; 0xc8
    16ae:	9600      	str	r6, [sp, #0]
    16b0:	f004 fb3a 	bl	5d28 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
    16b4:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
    16b8:	4638      	mov	r0, r7
    16ba:	f00a fd55 	bl	c168 <operator new(unsigned int)>
    16be:	4605      	mov	r5, r0
    16c0:	4b30      	ldr	r3, [pc, #192]	; (1784 <BigHouse::BigHouse(Board_Sys80b&)+0xf7c>)
    16c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    16c6:	4649      	mov	r1, r9
    16c8:	f8cd 8000 	str.w	r8, [sp]
    16cc:	f004 fb2c 	bl	5d28 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
	brel_tmr->setPeriodic(false);
    16d0:	4641      	mov	r1, r8
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
    16d2:	f8c4 5554 	str.w	r5, [r4, #1364]	; 0x554
	brel_tmr->setPeriodic(false);
    16d6:	4628      	mov	r0, r5
    16d8:	f004 fb5a 	bl	5d90 <TimerTask::setPeriodic(bool)>
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    16dc:	4638      	mov	r0, r7
    16de:	f00a fd43 	bl	c168 <operator new(unsigned int)>
    16e2:	4605      	mov	r5, r0
    16e4:	4b28      	ldr	r3, [pc, #160]	; (1788 <BigHouse::BigHouse(Board_Sys80b&)+0xf80>)
    16e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16ea:	4649      	mov	r1, r9
    16ec:	f8cd 8000 	str.w	r8, [sp]
    16f0:	f004 fb1a 	bl	5d28 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
	dropTargets_tt = tmr.add(dropt_tmr);
    16f4:	f8d4 154c 	ldr.w	r1, [r4, #1356]	; 0x54c
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    16f8:	f8c4 5558 	str.w	r5, [r4, #1368]	; 0x558
	dropTargets_tt = tmr.add(dropt_tmr);
    16fc:	4650      	mov	r0, sl
    16fe:	f004 faf5 	bl	5cec <TimerSet::add(TimerTask*)>
	lightShow_tt = tmr.add(lshow_tmr);
    1702:	f8d4 1550 	ldr.w	r1, [r4, #1360]	; 0x550
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
    1706:	f8c4 055c 	str.w	r0, [r4, #1372]	; 0x55c
	lightShow_tt = tmr.add(lshow_tmr);
    170a:	4650      	mov	r0, sl
    170c:	f004 faee 	bl	5cec <TimerSet::add(TimerTask*)>
	ballRelease_tt = tmr.add(brel_tmr);
    1710:	f8d4 1554 	ldr.w	r1, [r4, #1364]	; 0x554
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
	lightShow_tt = tmr.add(lshow_tmr);
    1714:	f8c4 0560 	str.w	r0, [r4, #1376]	; 0x560
	ballRelease_tt = tmr.add(brel_tmr);
    1718:	4650      	mov	r0, sl
    171a:	f004 fae7 	bl	5cec <TimerSet::add(TimerTask*)>
	display_tt = tmr.add(dshow_tmr);
    171e:	f8d4 1558 	ldr.w	r1, [r4, #1368]	; 0x558
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
    1722:	f8c4 0564 	str.w	r0, [r4, #1380]	; 0x564
	display_tt = tmr.add(dshow_tmr);
    1726:	4650      	mov	r0, sl
    1728:	f004 fae0 	bl	5cec <TimerSet::add(TimerTask*)>
    172c:	f8c4 0568 	str.w	r0, [r4, #1384]	; 0x568
}
    1730:	4620      	mov	r0, r4
    1732:	b009      	add	sp, #36	; 0x24
    1734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1738:	200007f8 	.word	0x200007f8
    173c:	2000080c 	.word	0x2000080c
    1740:	20000818 	.word	0x20000818
    1744:	20000824 	.word	0x20000824
    1748:	2000082c 	.word	0x2000082c
    174c:	20000834 	.word	0x20000834
    1750:	2000083c 	.word	0x2000083c
    1754:	20000844 	.word	0x20000844
    1758:	2000084c 	.word	0x2000084c
    175c:	20000a28 	.word	0x20000a28
    1760:	20000858 	.word	0x20000858
    1764:	20000864 	.word	0x20000864
    1768:	2000086c 	.word	0x2000086c
    176c:	20000874 	.word	0x20000874
    1770:	2000087c 	.word	0x2000087c
    1774:	20000884 	.word	0x20000884
    1778:	2000088c 	.word	0x2000088c
    177c:	20000894 	.word	0x20000894
    1780:	200008a4 	.word	0x200008a4
    1784:	200008b0 	.word	0x200008b0
    1788:	200008c0 	.word	0x200008c0

0000178c <BigHouse::resetDropTargets()>:
	break_ls->set(0, BLINK_L);
	jailSeq = 0;
	breakSeq = 0;
}

void BigHouse::resetDropTargets() {
    178c:	b570      	push	{r4, r5, r6, lr}
    178e:	4604      	mov	r4, r0
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetHit = 0;
    1790:	2500      	movs	r5, #0
	jailSeq = 0;
	breakSeq = 0;
}

void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
    1792:	f8d0 054c 	ldr.w	r0, [r0, #1356]	; 0x54c
    1796:	f004 fb07 	bl	5da8 <TimerTask::disable()>
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
    179a:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    179e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    17a2:	f004 faf3 	bl	5d8c <TimerTask::setPeriod(unsigned long)>
	dropTargetHit = 0;
	droptarget_ls->setAll(OFF_L);
    17a6:	4629      	mov	r1, r5
    17a8:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
}

void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetHit = 0;
    17ac:	f884 5537 	strb.w	r5, [r4, #1335]	; 0x537
	droptarget_ls->setAll(OFF_L);
    17b0:	f002 fb48 	bl	3e44 <LightGroup::setAll(lightState)>
	activateSolenoid(BRESET, 250);
    17b4:	462b      	mov	r3, r5
    17b6:	4620      	mov	r0, r4
    17b8:	22fa      	movs	r2, #250	; 0xfa
    17ba:	2106      	movs	r1, #6
}
    17bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetHit = 0;
	droptarget_ls->setAll(OFF_L);
	activateSolenoid(BRESET, 250);
    17c0:	f003 bdc8 	b.w	5354 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>

000017c4 <BigHouse::advanceJail()>:
		wallDown = true;
	}
	return wallDown;
}

void BigHouse::advanceJail() {
    17c4:	b510      	push	{r4, lr}
    17c6:	4604      	mov	r4, r0
	jail_ls->set(jailSeq, ON_L);
    17c8:	f890 1535 	ldrb.w	r1, [r0, #1333]	; 0x535
    17cc:	2201      	movs	r2, #1
    17ce:	f8d0 0580 	ldr.w	r0, [r0, #1408]	; 0x580
    17d2:	f002 faa7 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
	if (jailSeq < 4) jail_ls->set(jailSeq++, BLINK_L);
    17d6:	f894 1535 	ldrb.w	r1, [r4, #1333]	; 0x535
    17da:	2903      	cmp	r1, #3
    17dc:	d900      	bls.n	17e0 <BigHouse::advanceJail()+0x1c>
    17de:	bd10      	pop	{r4, pc}
    17e0:	1c4b      	adds	r3, r1, #1
    17e2:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    17e6:	2202      	movs	r2, #2
    17e8:	f884 3535 	strb.w	r3, [r4, #1333]	; 0x535
}
    17ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return wallDown;
}

void BigHouse::advanceJail() {
	jail_ls->set(jailSeq, ON_L);
	if (jailSeq < 4) jail_ls->set(jailSeq++, BLINK_L);
    17f0:	f002 ba98 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>

000017f4 <BigHouse::onDropTarget(unsigned char)>:
//	PinGame::millisRoutine(ms);
//}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) { // n = 0, 1, 2, 3
    17f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17f6:	4604      	mov	r4, r0
    17f8:	460d      	mov	r5, r1
	msg->outln("onDropTarget");
    17fa:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    17fe:	493d      	ldr	r1, [pc, #244]	; (18f4 <BigHouse::onDropTarget(unsigned char)+0x100>)
    1800:	f005 f81a 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(5000); else addScore(3000);
    1804:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1808:	b1b3      	cbz	r3, 1838 <BigHouse::onDropTarget(unsigned char)+0x44>
    180a:	f241 3188 	movw	r1, #5000	; 0x1388
    180e:	4620      	mov	r0, r4
    1810:	f003 f9ac 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1818:	4620      	mov	r0, r4
    181a:	f003 fa13 	bl	4c44 <PinGame::addBonus(unsigned long)>

	if (dropTargetHit == 0) {
    181e:	f894 1537 	ldrb.w	r1, [r4, #1335]	; 0x537
    1822:	b1b9      	cbz	r1, 1854 <BigHouse::onDropTarget(unsigned char)+0x60>
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
		dropt_tmr->enable();
	}
	dropTargetHit |= 1 << n;
    1824:	2601      	movs	r6, #1
    1826:	fa06 f505 	lsl.w	r5, r6, r5
    182a:	4329      	orrs	r1, r5
    182c:	b2c9      	uxtb	r1, r1
	//if (allDropTargetsDown()) {
	if (dropTargetHit == 0xf) { // all targets down
    182e:	290f      	cmp	r1, #15
	if (dropTargetHit == 0) {
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
		dropt_tmr->enable();
	}
	dropTargetHit |= 1 << n;
    1830:	f884 1537 	strb.w	r1, [r4, #1335]	; 0x537
	//if (allDropTargetsDown()) {
	if (dropTargetHit == 0xf) { // all targets down
    1834:	d020      	beq.n	1878 <BigHouse::onDropTarget(unsigned char)+0x84>
    1836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) { // n = 0, 1, 2, 3
	msg->outln("onDropTarget");
	if (_3balls) addScore(5000); else addScore(3000);
    1838:	f640 31b8 	movw	r1, #3000	; 0xbb8
    183c:	4620      	mov	r0, r4
    183e:	f003 f995 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1842:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1846:	4620      	mov	r0, r4
    1848:	f003 f9fc 	bl	4c44 <PinGame::addBonus(unsigned long)>

	if (dropTargetHit == 0) {
    184c:	f894 1537 	ldrb.w	r1, [r4, #1335]	; 0x537
    1850:	2900      	cmp	r1, #0
    1852:	d1e7      	bne.n	1824 <BigHouse::onDropTarget(unsigned char)+0x30>
		droptarget_ls->set(0, BLINK_L);
    1854:	2202      	movs	r2, #2
    1856:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    185a:	f002 fa63 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
    185e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1862:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    1866:	f004 fa91 	bl	5d8c <TimerTask::setPeriod(unsigned long)>
		dropt_tmr->enable();
    186a:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    186e:	f004 fa93 	bl	5d98 <TimerTask::enable()>
    1872:	f894 1537 	ldrb.w	r1, [r4, #1335]	; 0x537
    1876:	e7d5      	b.n	1824 <BigHouse::onDropTarget(unsigned char)+0x30>
	}
	dropTargetHit |= 1 << n;
	//if (allDropTargetsDown()) {
	if (dropTargetHit == 0xf) { // all targets down
		if (droptarget_ls->isActive(2)) { // lights special
    1878:	2102      	movs	r1, #2
    187a:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    187e:	f002 faad 	bl	3ddc <LightGroup::isActive(unsigned char)>
    1882:	4605      	mov	r5, r0
    1884:	b188      	cbz	r0, 18aa <BigHouse::onDropTarget(unsigned char)+0xb6>
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
    1886:	f64e 2260 	movw	r2, #60000	; 0xea60
    188a:	2102      	movs	r1, #2
    188c:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1890:	f002 fb42 	bl	3f18 <LightGroup::switchTheFirst(lightState, unsigned short)>
			droptarget_ls->set(2, OFF_L);
    1894:	2200      	movs	r2, #0
    1896:	2102      	movs	r1, #2
    1898:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    189c:	f002 fa42 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
			addScore(10000);
			droptarget_ls->set(0, OFF_L);
		}
		resetDropTargets();
    18a0:	4620      	mov	r0, r4
		// .. sounds
	}
}
    18a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
			addScore(10000);
			droptarget_ls->set(0, OFF_L);
		}
		resetDropTargets();
    18a6:	f7ff bf71 	b.w	178c <BigHouse::resetDropTargets()>
	if (dropTargetHit == 0xf) { // all targets down
		if (droptarget_ls->isActive(2)) { // lights special
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
			droptarget_ls->set(2, OFF_L);
		}
		else if (droptarget_ls->isActive(1)) { // 100000x
    18aa:	4631      	mov	r1, r6
    18ac:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    18b0:	f002 fa94 	bl	3ddc <LightGroup::isActive(unsigned char)>
    18b4:	4607      	mov	r7, r0
    18b6:	b990      	cbnz	r0, 18de <BigHouse::onDropTarget(unsigned char)+0xea>
			addScore(100000);
			droptarget_ls->set(1, OFF_L);
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
    18b8:	4601      	mov	r1, r0
    18ba:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    18be:	f002 fa8d 	bl	3ddc <LightGroup::isActive(unsigned char)>
    18c2:	2800      	cmp	r0, #0
    18c4:	d0ec      	beq.n	18a0 <BigHouse::onDropTarget(unsigned char)+0xac>
			addScore(10000);
    18c6:	4620      	mov	r0, r4
    18c8:	f242 7110 	movw	r1, #10000	; 0x2710
    18cc:	f003 f94e 	bl	4b6c <PinGame::addScore(unsigned long)>
			droptarget_ls->set(0, OFF_L);
    18d0:	463a      	mov	r2, r7
    18d2:	4639      	mov	r1, r7
    18d4:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    18d8:	f002 fa24 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
    18dc:	e7e0      	b.n	18a0 <BigHouse::onDropTarget(unsigned char)+0xac>
		if (droptarget_ls->isActive(2)) { // lights special
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
			droptarget_ls->set(2, OFF_L);
		}
		else if (droptarget_ls->isActive(1)) { // 100000x
			addScore(100000);
    18de:	4620      	mov	r0, r4
    18e0:	4905      	ldr	r1, [pc, #20]	; (18f8 <BigHouse::onDropTarget(unsigned char)+0x104>)
    18e2:	f003 f943 	bl	4b6c <PinGame::addScore(unsigned long)>
			droptarget_ls->set(1, OFF_L);
    18e6:	462a      	mov	r2, r5
    18e8:	4631      	mov	r1, r6
    18ea:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    18ee:	f002 fa19 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
    18f2:	e7d5      	b.n	18a0 <BigHouse::onDropTarget(unsigned char)+0xac>
    18f4:	200008d0 	.word	0x200008d0
    18f8:	000186a0 	.word	0x000186a0

000018fc <BigHouse::onJailTarget(unsigned char)>:
		resetDropTargets();
		// .. sounds
	}
}

void BigHouse::onJailTarget(byte n) {
    18fc:	b538      	push	{r3, r4, r5, lr}
    18fe:	4604      	mov	r4, r0
    1900:	460d      	mov	r5, r1
	msg->outln("onJailTarget");
    1902:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1906:	491e      	ldr	r1, [pc, #120]	; (1980 <BigHouse::onJailTarget(unsigned char)+0x84>)
    1908:	f004 ff96 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(3000); else addScore(1000);
    190c:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1910:	b1f3      	cbz	r3, 1950 <BigHouse::onJailTarget(unsigned char)+0x54>
    1912:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1916:	4620      	mov	r0, r4
    1918:	f003 f928 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    191c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1920:	4620      	mov	r0, r4
    1922:	f003 f98f 	bl	4c44 <PinGame::addBonus(unsigned long)>
	if (jail_ls->getState(n) == BLINK_L) {
    1926:	4629      	mov	r1, r5
    1928:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    192c:	f002 fa44 	bl	3db8 <LightGroup::getState(unsigned char)>
    1930:	2802      	cmp	r0, #2
    1932:	d013      	beq.n	195c <BigHouse::onJailTarget(unsigned char)+0x60>
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
    1934:	4629      	mov	r1, r5
    1936:	2264      	movs	r2, #100	; 0x64
    1938:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    193c:	f002 fa1e 	bl	3d7c <LightGroup::pulse(unsigned char, unsigned short)>
	if (jailSeq == 4 && breakSeq == 5) {
    1940:	f8d4 1534 	ldr.w	r1, [r4, #1332]	; 0x534
    1944:	4b0f      	ldr	r3, [pc, #60]	; (1984 <BigHouse::onJailTarget(unsigned char)+0x88>)
    1946:	4a10      	ldr	r2, [pc, #64]	; (1988 <BigHouse::onJailTarget(unsigned char)+0x8c>)
    1948:	400b      	ands	r3, r1
    194a:	4293      	cmp	r3, r2
    194c:	d00f      	beq.n	196e <BigHouse::onJailTarget(unsigned char)+0x72>
    194e:	bd38      	pop	{r3, r4, r5, pc}
	}
}

void BigHouse::onJailTarget(byte n) {
	msg->outln("onJailTarget");
	if (_3balls) addScore(3000); else addScore(1000);
    1950:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1954:	4620      	mov	r0, r4
    1956:	f003 f909 	bl	4b6c <PinGame::addScore(unsigned long)>
    195a:	e7df      	b.n	191c <BigHouse::onJailTarget(unsigned char)+0x20>
	addBonus(1000);
	if (jail_ls->getState(n) == BLINK_L) {
		advanceJail();
    195c:	4620      	mov	r0, r4
    195e:	f7ff ff31 	bl	17c4 <BigHouse::advanceJail()>
		addScore(10000);
    1962:	f242 7110 	movw	r1, #10000	; 0x2710
    1966:	4620      	mov	r0, r4
    1968:	f003 f900 	bl	4b6c <PinGame::addScore(unsigned long)>
    196c:	e7e8      	b.n	1940 <BigHouse::onJailTarget(unsigned char)+0x44>
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    196e:	2201      	movs	r2, #1
    1970:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1974:	4611      	mov	r1, r2
		// .. soundBuffer
	}
}
    1976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    197a:	f002 b9d3 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>
    197e:	bf00      	nop
    1980:	200008e0 	.word	0x200008e0
    1984:	00ffff00 	.word	0x00ffff00
    1988:	00050400 	.word	0x00050400

0000198c <BigHouse::onBreakTarget(unsigned char)>:
		// .. soundBuffer
	}
}

void BigHouse::onBreakTarget(byte n) {
    198c:	b538      	push	{r3, r4, r5, lr}
    198e:	4604      	mov	r4, r0
    1990:	460d      	mov	r5, r1
	msg->outln("onBreakTarget");
    1992:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1996:	491e      	ldr	r1, [pc, #120]	; (1a10 <BigHouse::onBreakTarget(unsigned char)+0x84>)
    1998:	f004 ff4e 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(3000); else addScore(1000);
    199c:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    19a0:	b1f3      	cbz	r3, 19e0 <BigHouse::onBreakTarget(unsigned char)+0x54>
    19a2:	f640 31b8 	movw	r1, #3000	; 0xbb8
    19a6:	4620      	mov	r0, r4
    19a8:	f003 f8e0 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    19ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    19b0:	4620      	mov	r0, r4
    19b2:	f003 f947 	bl	4c44 <PinGame::addBonus(unsigned long)>
	if (break_ls->getState(n) == BLINK_L) {
    19b6:	4629      	mov	r1, r5
    19b8:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    19bc:	f002 f9fc 	bl	3db8 <LightGroup::getState(unsigned char)>
    19c0:	2802      	cmp	r0, #2
    19c2:	d013      	beq.n	19ec <BigHouse::onBreakTarget(unsigned char)+0x60>
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
    19c4:	4629      	mov	r1, r5
    19c6:	2264      	movs	r2, #100	; 0x64
    19c8:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    19cc:	f002 f9d6 	bl	3d7c <LightGroup::pulse(unsigned char, unsigned short)>
	if (jailSeq == 4 && breakSeq == 5) {
    19d0:	f8d4 1534 	ldr.w	r1, [r4, #1332]	; 0x534
    19d4:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <BigHouse::onBreakTarget(unsigned char)+0x88>)
    19d6:	4a10      	ldr	r2, [pc, #64]	; (1a18 <BigHouse::onBreakTarget(unsigned char)+0x8c>)
    19d8:	400b      	ands	r3, r1
    19da:	4293      	cmp	r3, r2
    19dc:	d00f      	beq.n	19fe <BigHouse::onBreakTarget(unsigned char)+0x72>
    19de:	bd38      	pop	{r3, r4, r5, pc}
	}
}

void BigHouse::onBreakTarget(byte n) {
	msg->outln("onBreakTarget");
	if (_3balls) addScore(3000); else addScore(1000);
    19e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    19e4:	4620      	mov	r0, r4
    19e6:	f003 f8c1 	bl	4b6c <PinGame::addScore(unsigned long)>
    19ea:	e7df      	b.n	19ac <BigHouse::onBreakTarget(unsigned char)+0x20>
	addBonus(1000);
	if (break_ls->getState(n) == BLINK_L) {
		advanceJail();
    19ec:	4620      	mov	r0, r4
    19ee:	f7ff fee9 	bl	17c4 <BigHouse::advanceJail()>
		addScore(10000);
    19f2:	f242 7110 	movw	r1, #10000	; 0x2710
    19f6:	4620      	mov	r0, r4
    19f8:	f003 f8b8 	bl	4b6c <PinGame::addScore(unsigned long)>
    19fc:	e7e8      	b.n	19d0 <BigHouse::onBreakTarget(unsigned char)+0x44>
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    19fe:	2201      	movs	r2, #1
    1a00:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1a04:	4611      	mov	r1, r2
		// .. soundBuffer
	}
}
    1a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    1a0a:	f002 b98b 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>
    1a0e:	bf00      	nop
    1a10:	200008f0 	.word	0x200008f0
    1a14:	00ffff00 	.word	0x00ffff00
    1a18:	00050400 	.word	0x00050400

00001a1c <BigHouse::onCellTarget(unsigned char)>:
		// .. soundBuffer
	}
}

void BigHouse::onCellTarget(byte n) {
    1a1c:	b538      	push	{r3, r4, r5, lr}
    1a1e:	4604      	mov	r4, r0
    1a20:	460d      	mov	r5, r1
	lightState ls;
	byte gln;

	msg->outln("onCellTarget");
    1a22:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1a26:	4929      	ldr	r1, [pc, #164]	; (1acc <BigHouse::onCellTarget(unsigned char)+0xb0>)
    1a28:	f004 ff06 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(5000); else addScore(3000);
    1a2c:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1a30:	b1d3      	cbz	r3, 1a68 <BigHouse::onCellTarget(unsigned char)+0x4c>
    1a32:	f241 3188 	movw	r1, #5000	; 0x1388
    1a36:	4620      	mov	r0, r4
    1a38:	f003 f898 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1a40:	4620      	mov	r0, r4
    1a42:	f003 f8ff 	bl	4c44 <PinGame::addBonus(unsigned long)>
	ls = cellblock_ls->getState(n);
    1a46:	4629      	mov	r1, r5
    1a48:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a4c:	f002 f9b4 	bl	3db8 <LightGroup::getState(unsigned char)>
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1a50:	2801      	cmp	r0, #1
    1a52:	d021      	beq.n	1a98 <BigHouse::onCellTarget(unsigned char)+0x7c>
	else if (ls == BLINK_L) {
    1a54:	2802      	cmp	r0, #2
    1a56:	d00d      	beq.n	1a74 <BigHouse::onCellTarget(unsigned char)+0x58>
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
    1a58:	4629      	mov	r1, r5
    1a5a:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a5e:	2201      	movs	r2, #1
}
    1a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
    1a64:	f002 b95e 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>
void BigHouse::onCellTarget(byte n) {
	lightState ls;
	byte gln;

	msg->outln("onCellTarget");
	if (_3balls) addScore(5000); else addScore(3000);
    1a68:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1a6c:	4620      	mov	r0, r4
    1a6e:	f003 f87d 	bl	4b6c <PinGame::addScore(unsigned long)>
    1a72:	e7e3      	b.n	1a3c <BigHouse::onCellTarget(unsigned char)+0x20>
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
    1a74:	4629      	mov	r1, r5
    1a76:	2200      	movs	r2, #0
    1a78:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a7c:	f002 f952 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		cellBlockSeq |= bit(n);
    1a80:	2101      	movs	r1, #1
    1a82:	f894 3533 	ldrb.w	r3, [r4, #1331]	; 0x533
    1a86:	fa01 f505 	lsl.w	r5, r1, r5
    1a8a:	431d      	orrs	r5, r3
    1a8c:	b2ed      	uxtb	r5, r5
		if (cellBlockSeq == 0b1111) {
    1a8e:	2d0f      	cmp	r5, #15
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
    1a90:	f884 5533 	strb.w	r5, [r4, #1331]	; 0x533
		if (cellBlockSeq == 0b1111) {
    1a94:	d008      	beq.n	1aa8 <BigHouse::onCellTarget(unsigned char)+0x8c>
    1a96:	bd38      	pop	{r3, r4, r5, pc}

	msg->outln("onCellTarget");
	if (_3balls) addScore(5000); else addScore(3000);
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1a98:	4629      	mov	r1, r5
    1a9a:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a9e:	2202      	movs	r2, #2
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}
    1aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	msg->outln("onCellTarget");
	if (_3balls) addScore(5000); else addScore(3000);
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1aa4:	f002 b93e 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
		if (cellBlockSeq == 0b1111) {
			gln = extraball_ls->switchTheFirst(ON_L);
    1aa8:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1aac:	f002 f9f8 	bl	3ea0 <LightGroup::switchTheFirst(lightState)>
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
    1ab0:	f894 3532 	ldrb.w	r3, [r4, #1330]	; 0x532
    1ab4:	b92b      	cbnz	r3, 1ac2 <BigHouse::onCellTarget(unsigned char)+0xa6>
    1ab6:	28ff      	cmp	r0, #255	; 0xff
    1ab8:	d003      	beq.n	1ac2 <BigHouse::onCellTarget(unsigned char)+0xa6>
																 // .. soundBuffer
			cellBlockSeq = 0;
    1aba:	2300      	movs	r3, #0
    1abc:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
    1ac0:	bd38      	pop	{r3, r4, r5, pc}
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
		if (cellBlockSeq == 0b1111) {
			gln = extraball_ls->switchTheFirst(ON_L);
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
    1ac2:	4903      	ldr	r1, [pc, #12]	; (1ad0 <BigHouse::onCellTarget(unsigned char)+0xb4>)
    1ac4:	4620      	mov	r0, r4
    1ac6:	f003 f851 	bl	4b6c <PinGame::addScore(unsigned long)>
    1aca:	e7f6      	b.n	1aba <BigHouse::onCellTarget(unsigned char)+0x9e>
    1acc:	20000900 	.word	0x20000900
    1ad0:	000186a0 	.word	0x000186a0

00001ad4 <BigHouse::onTopRollover(unsigned char)>:
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	4604      	mov	r4, r0
    1ad8:	460d      	mov	r5, r1
	msg->outln("onTopRollover");
    1ada:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1ade:	492f      	ldr	r1, [pc, #188]	; (1b9c <BigHouse::onTopRollover(unsigned char)+0xc8>)
    1ae0:	f004 feaa 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(3000); else addScore(1000);
    1ae4:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1ae8:	b35b      	cbz	r3, 1b42 <BigHouse::onTopRollover(unsigned char)+0x6e>
    1aea:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1aee:	4620      	mov	r0, r4
    1af0:	f003 f83c 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1af4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1af8:	4620      	mov	r0, r4
    1afa:	f003 f8a3 	bl	4c44 <PinGame::addBonus(unsigned long)>
	if (n == 1) { // center rollover
    1afe:	2d01      	cmp	r5, #1
    1b00:	d02b      	beq.n	1b5a <BigHouse::onTopRollover(unsigned char)+0x86>
		if (isLightActive(18)) addScore(100000);
		if (isLightActive(19)) advanceMultiplier();
	}
	if (extraball_ls->isActive(n)) {
    1b02:	4629      	mov	r1, r5
    1b04:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1b08:	f002 f968 	bl	3ddc <LightGroup::isActive(unsigned char)>
    1b0c:	b1c0      	cbz	r0, 1b40 <BigHouse::onTopRollover(unsigned char)+0x6c>
		extraball_ls->set(n, OFF_L);
    1b0e:	2200      	movs	r2, #0
    1b10:	4629      	mov	r1, r5
    1b12:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1b16:	f002 f905 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		lastchance_ls->setAll(OFF_L);
    1b1a:	2100      	movs	r1, #0
    1b1c:	f8d4 0570 	ldr.w	r0, [r4, #1392]	; 0x570
    1b20:	f002 f990 	bl	3e44 <LightGroup::setAll(lightState)>
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
	// .. soundBuffer
}

void BigHouse::awardExtraBall() {
	player[playerOn].ballsLeft++;
    1b24:	f894 3387 	ldrb.w	r3, [r4, #903]	; 0x387
	extraBallGiven = true;
    1b28:	2101      	movs	r1, #1
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
	// .. soundBuffer
}

void BigHouse::awardExtraBall() {
	player[playerOn].ballsLeft++;
    1b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1b32:	f893 2354 	ldrb.w	r2, [r3, #852]	; 0x354
    1b36:	440a      	add	r2, r1
    1b38:	f883 2354 	strb.w	r2, [r3, #852]	; 0x354
	extraBallGiven = true;
    1b3c:	f884 1532 	strb.w	r1, [r4, #1330]	; 0x532
    1b40:	bd70      	pop	{r4, r5, r6, pc}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
	msg->outln("onTopRollover");
	if (_3balls) addScore(3000); else addScore(1000);
    1b42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1b46:	4620      	mov	r0, r4
    1b48:	f003 f810 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1b50:	4620      	mov	r0, r4
    1b52:	f003 f877 	bl	4c44 <PinGame::addBonus(unsigned long)>
	if (n == 1) { // center rollover
    1b56:	2d01      	cmp	r5, #1
    1b58:	d1d3      	bne.n	1b02 <BigHouse::onTopRollover(unsigned char)+0x2e>
	}
	inline bool isLightOn(byte n) {
		return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
	}
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
    1b5a:	4e11      	ldr	r6, [pc, #68]	; (1ba0 <BigHouse::onTopRollover(unsigned char)+0xcc>)
    1b5c:	2112      	movs	r1, #18
    1b5e:	6830      	ldr	r0, [r6, #0]
    1b60:	f002 fab2 	bl	40c8 <LightSet::getLight(int)>
		if (isLightActive(18)) addScore(100000);
    1b64:	7843      	ldrb	r3, [r0, #1]
    1b66:	b99b      	cbnz	r3, 1b90 <BigHouse::onTopRollover(unsigned char)+0xbc>
    1b68:	6830      	ldr	r0, [r6, #0]
    1b6a:	2113      	movs	r1, #19
    1b6c:	f002 faac 	bl	40c8 <LightSet::getLight(int)>
		if (isLightActive(19)) advanceMultiplier();
    1b70:	7843      	ldrb	r3, [r0, #1]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d0c5      	beq.n	1b02 <BigHouse::onTopRollover(unsigned char)+0x2e>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1b76:	f894 1538 	ldrb.w	r1, [r4, #1336]	; 0x538
    1b7a:	2902      	cmp	r1, #2
    1b7c:	d8c1      	bhi.n	1b02 <BigHouse::onTopRollover(unsigned char)+0x2e>
    1b7e:	1c4b      	adds	r3, r1, #1
    1b80:	f8d4 0584 	ldr.w	r0, [r4, #1412]	; 0x584
    1b84:	2201      	movs	r2, #1
    1b86:	f884 3538 	strb.w	r3, [r4, #1336]	; 0x538
    1b8a:	f002 f8cb 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
    1b8e:	e7b8      	b.n	1b02 <BigHouse::onTopRollover(unsigned char)+0x2e>
void BigHouse::onTopRollover(byte n) {
	msg->outln("onTopRollover");
	if (_3balls) addScore(3000); else addScore(1000);
	addBonus(1000);
	if (n == 1) { // center rollover
		if (isLightActive(18)) addScore(100000);
    1b90:	4904      	ldr	r1, [pc, #16]	; (1ba4 <BigHouse::onTopRollover(unsigned char)+0xd0>)
    1b92:	4620      	mov	r0, r4
    1b94:	f002 ffea 	bl	4b6c <PinGame::addScore(unsigned long)>
    1b98:	e7e6      	b.n	1b68 <BigHouse::onTopRollover(unsigned char)+0x94>
    1b9a:	bf00      	nop
    1b9c:	20000910 	.word	0x20000910
    1ba0:	20002ac8 	.word	0x20002ac8
    1ba4:	000186a0 	.word	0x000186a0

00001ba8 <BigHouse::onLeftKicker()>:
		awardExtraBall();
	}
	// .. soundBuffer
}

void BigHouse::onLeftKicker() {
    1ba8:	b510      	push	{r4, lr}
    1baa:	4604      	mov	r4, r0
    1bac:	b082      	sub	sp, #8
	msg->outln("onLeftKicker");
    1bae:	4919      	ldr	r1, [pc, #100]	; (1c14 <BigHouse::onLeftKicker()+0x6c>)
    1bb0:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1bb4:	f004 fe40 	bl	6838 <Msg::outln(char const*)>
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1bb8:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1bbc:	b1c3      	cbz	r3, 1bf0 <BigHouse::onLeftKicker()+0x48>
    1bbe:	f241 3188 	movw	r1, #5000	; 0x1388
    1bc2:	4620      	mov	r0, r4
    1bc4:	f002 ffd2 	bl	4b6c <PinGame::addScore(unsigned long)>
	if (!ballTrap[0]) { // ball already trapped
    1bc8:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    1bcc:	b1cb      	cbz	r3, 1c02 <BigHouse::onLeftKicker()+0x5a>
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
	inline void setLight(byte n, lightState s) { 
		LightGroup::activeLightSet->getLight(n)->set(s);
    1bce:	4b12      	ldr	r3, [pc, #72]	; (1c18 <BigHouse::onLeftKicker()+0x70>)
    1bd0:	210f      	movs	r1, #15
    1bd2:	6818      	ldr	r0, [r3, #0]
    1bd4:	f002 fa78 	bl	40c8 <LightSet::getLight(int)>
    1bd8:	2100      	movs	r1, #0
    1bda:	2332      	movs	r3, #50	; 0x32
    1bdc:	22c8      	movs	r2, #200	; 0xc8
    1bde:	9100      	str	r1, [sp, #0]
    1be0:	2102      	movs	r1, #2
    1be2:	f001 ffab 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
		extraball_ls->set(1, ON_L);
	}
	else {
		setLight(15, BLINK_L);
		ballTrap[0] = true;
    1be6:	2301      	movs	r3, #1
    1be8:	f884 352d 	strb.w	r3, [r4, #1325]	; 0x52d
		// ... soundBuffer
	}
	//startTrapSequence(0);
}
    1bec:	b002      	add	sp, #8
    1bee:	bd10      	pop	{r4, pc}
}

void BigHouse::onLeftKicker() {
	msg->outln("onLeftKicker");
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1bf0:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1bf4:	4620      	mov	r0, r4
    1bf6:	f002 ffb9 	bl	4b6c <PinGame::addScore(unsigned long)>
	if (!ballTrap[0]) { // ball already trapped
    1bfa:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d1e5      	bne.n	1bce <BigHouse::onLeftKicker()+0x26>
		extraball_ls->set(1, ON_L);
    1c02:	2201      	movs	r2, #1
    1c04:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1c08:	4611      	mov	r1, r2
		setLight(15, BLINK_L);
		ballTrap[0] = true;
		// ... soundBuffer
	}
	//startTrapSequence(0);
}
    1c0a:	b002      	add	sp, #8
    1c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void BigHouse::onLeftKicker() {
	msg->outln("onLeftKicker");
	// score
	if (_3balls) addScore(5000); else addScore(3000);
	if (!ballTrap[0]) { // ball already trapped
		extraball_ls->set(1, ON_L);
    1c10:	f002 b888 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>
    1c14:	20000920 	.word	0x20000920
    1c18:	20002ac8 	.word	0x20002ac8

00001c1c <BigHouse::onRightKicker()>:
		// ... soundBuffer
	}
	//startTrapSequence(0);
}

void BigHouse::onRightKicker() {
    1c1c:	b510      	push	{r4, lr}
    1c1e:	4604      	mov	r4, r0
	msg->outln("onRightKicker");
    1c20:	4905      	ldr	r1, [pc, #20]	; (1c38 <BigHouse::onRightKicker()+0x1c>)
    1c22:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c26:	f004 fe07 	bl	6838 <Msg::outln(char const*)>
	addScore(25000);
    1c2a:	4620      	mov	r0, r4
    1c2c:	f246 11a8 	movw	r1, #25000	; 0x61a8
	//if (getLight(20) == BLINK_L) startMultiball(); // ???
	//startTrapSequence(2);
}
    1c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	//startTrapSequence(0);
}

void BigHouse::onRightKicker() {
	msg->outln("onRightKicker");
	addScore(25000);
    1c34:	f002 bf9a 	b.w	4b6c <PinGame::addScore(unsigned long)>
    1c38:	20000930 	.word	0x20000930

00001c3c <BigHouse::onTopHole()>:
	//if (getLight(20) == BLINK_L) startMultiball(); // ???
	//startTrapSequence(2);
}

void BigHouse::onTopHole() { // hole
    1c3c:	b510      	push	{r4, lr}
    1c3e:	4604      	mov	r4, r0
	msg->outln("onTopHole");
    1c40:	490a      	ldr	r1, [pc, #40]	; (1c6c <BigHouse::onTopHole()+0x30>)
    1c42:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c46:	f004 fdf7 	bl	6838 <Msg::outln(char const*)>
	addScore(25000);
    1c4a:	4620      	mov	r0, r4
    1c4c:	f246 11a8 	movw	r1, #25000	; 0x61a8
    1c50:	f002 ff8c 	bl	4b6c <PinGame::addScore(unsigned long)>
	}
	inline bool isLightOn(byte n) {
		return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
	}
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <BigHouse::onTopHole()+0x34>)
    1c56:	210f      	movs	r1, #15
    1c58:	6818      	ldr	r0, [r3, #0]
    1c5a:	f002 fa35 	bl	40c8 <LightSet::getLight(int)>
	if (isLightActive(15)) ballTrap[2] = true;
    1c5e:	7843      	ldrb	r3, [r0, #1]
    1c60:	b113      	cbz	r3, 1c68 <BigHouse::onTopHole()+0x2c>
    1c62:	2301      	movs	r3, #1
    1c64:	f884 352f 	strb.w	r3, [r4, #1327]	; 0x52f
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	bf00      	nop
    1c6c:	20000940 	.word	0x20000940
    1c70:	20002ac8 	.word	0x20002ac8

00001c74 <BigHouse::onLeftRollover()>:
	//else //..
	//startTrapSequence(1);
}

void BigHouse::onLeftRollover() {
    1c74:	b510      	push	{r4, lr}
    1c76:	4604      	mov	r4, r0
	msg->outln("onLeftRollover");
    1c78:	4908      	ldr	r1, [pc, #32]	; (1c9c <BigHouse::onLeftRollover()+0x28>)
    1c7a:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c7e:	f004 fddb 	bl	6838 <Msg::outln(char const*)>
	addScore(25000);
    1c82:	4620      	mov	r0, r4
    1c84:	f246 11a8 	movw	r1, #25000	; 0x61a8
    1c88:	f002 ff70 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1c8c:	4620      	mov	r0, r4
    1c8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
    1c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::onLeftRollover() {
	msg->outln("onLeftRollover");
	addScore(25000);
	addBonus(1000);
    1c96:	f002 bfd5 	b.w	4c44 <PinGame::addBonus(unsigned long)>
    1c9a:	bf00      	nop
    1c9c:	2000094c 	.word	0x2000094c

00001ca0 <BigHouse::onReturnRollover(unsigned char)>:
}

void BigHouse::onReturnRollover(byte n) {
    1ca0:	b510      	push	{r4, lr}
    1ca2:	4604      	mov	r4, r0
	msg->outln("onReturnRollover");
    1ca4:	490f      	ldr	r1, [pc, #60]	; (1ce4 <BigHouse::onReturnRollover(unsigned char)+0x44>)
    1ca6:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1caa:	f004 fdc5 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(5000);
    1cae:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1cb2:	b95b      	cbnz	r3, 1ccc <BigHouse::onReturnRollover(unsigned char)+0x2c>
	else addScore(3000);
    1cb4:	4620      	mov	r0, r4
    1cb6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1cba:	f002 ff57 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1cbe:	4620      	mov	r0, r4
    1cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onReturnRollover(byte n) {
	msg->outln("onReturnRollover");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1cc8:	f002 bfbc 	b.w	4c44 <PinGame::addBonus(unsigned long)>
	addBonus(1000);
}

void BigHouse::onReturnRollover(byte n) {
	msg->outln("onReturnRollover");
	if (_3balls) addScore(5000);
    1ccc:	4620      	mov	r0, r4
    1cce:	f241 3188 	movw	r1, #5000	; 0x1388
    1cd2:	f002 ff4b 	bl	4b6c <PinGame::addScore(unsigned long)>
	else addScore(3000);
	addBonus(1000);
    1cd6:	4620      	mov	r0, r4
    1cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onReturnRollover(byte n) {
	msg->outln("onReturnRollover");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1ce0:	f002 bfb0 	b.w	4c44 <PinGame::addBonus(unsigned long)>
    1ce4:	2000095c 	.word	0x2000095c

00001ce8 <BigHouse::onOutRollover(unsigned char)>:
	//..
}

void BigHouse::onOutRollover(byte n) {
    1ce8:	b510      	push	{r4, lr}
    1cea:	4604      	mov	r4, r0
	msg->outln("onOutTarget");
    1cec:	490f      	ldr	r1, [pc, #60]	; (1d2c <BigHouse::onOutRollover(unsigned char)+0x44>)
    1cee:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1cf2:	f004 fda1 	bl	6838 <Msg::outln(char const*)>
	if (_3balls) addScore(5000);
    1cf6:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1cfa:	b95b      	cbnz	r3, 1d14 <BigHouse::onOutRollover(unsigned char)+0x2c>
	else addScore(3000);
    1cfc:	4620      	mov	r0, r4
    1cfe:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1d02:	f002 ff33 	bl	4b6c <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1d06:	4620      	mov	r0, r4
    1d08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onOutRollover(byte n) {
	msg->outln("onOutTarget");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1d10:	f002 bf98 	b.w	4c44 <PinGame::addBonus(unsigned long)>
	//..
}

void BigHouse::onOutRollover(byte n) {
	msg->outln("onOutTarget");
	if (_3balls) addScore(5000);
    1d14:	4620      	mov	r0, r4
    1d16:	f241 3188 	movw	r1, #5000	; 0x1388
    1d1a:	f002 ff27 	bl	4b6c <PinGame::addScore(unsigned long)>
	else addScore(3000);
	addBonus(1000);
    1d1e:	4620      	mov	r0, r4
    1d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onOutRollover(byte n) {
	msg->outln("onOutTarget");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1d28:	f002 bf8c 	b.w	4c44 <PinGame::addBonus(unsigned long)>
    1d2c:	20000970 	.word	0x20000970

00001d30 <BigHouse::onPopBumper()>:
	//..
}

void BigHouse::onPopBumper() {
    1d30:	b510      	push	{r4, lr}
    1d32:	4604      	mov	r4, r0
	msg->outln("onPopBumper");
    1d34:	4909      	ldr	r1, [pc, #36]	; (1d5c <BigHouse::onPopBumper()+0x2c>)
    1d36:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1d3a:	f004 fd7d 	bl	6838 <Msg::outln(char const*)>
	addScore(1000);
    1d3e:	4620      	mov	r0, r4
    1d40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1d44:	f002 ff12 	bl	4b6c <PinGame::addScore(unsigned long)>
	special_ls->rotateRight();
    1d48:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1d4c:	f002 f8f4 	bl	3f38 <LightGroup::rotateRight()>
	extraball_ls->rotateRight();
    1d50:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
}
    1d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onPopBumper() {
	msg->outln("onPopBumper");
	addScore(1000);
	special_ls->rotateRight();
	extraball_ls->rotateRight();
    1d58:	f002 b8ee 	b.w	3f38 <LightGroup::rotateRight()>
    1d5c:	2000097c 	.word	0x2000097c

00001d60 <BigHouse::onBallOnChain()>:
void BigHouse::onRubber() {
	addScore(30);
	special_ls->rotateRight();
}

void BigHouse::onBallOnChain() {
    1d60:	b510      	push	{r4, lr}
    1d62:	4604      	mov	r4, r0
	msg->outln("onBallOnChain");
    1d64:	4905      	ldr	r1, [pc, #20]	; (1d7c <BigHouse::onBallOnChain()+0x1c>)
    1d66:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1d6a:	f004 fd65 	bl	6838 <Msg::outln(char const*)>
	addScore(5000);
    1d6e:	4620      	mov	r0, r4
    1d70:	f241 3188 	movw	r1, #5000	; 0x1388
	//switches += 4;
}
    1d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	special_ls->rotateRight();
}

void BigHouse::onBallOnChain() {
	msg->outln("onBallOnChain");
	addScore(5000);
    1d78:	f002 bef8 	b.w	4b6c <PinGame::addScore(unsigned long)>
    1d7c:	20000988 	.word	0x20000988

00001d80 <BigHouse::dropTimerRoutine(unsigned long&)>:
	// ..TODO
}

// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
    1d80:	b570      	push	{r4, r5, r6, lr}
    1d82:	4604      	mov	r4, r0
	msg->outln("dropTimerRoutine()");
    1d84:	4927      	ldr	r1, [pc, #156]	; (1e24 <BigHouse::dropTimerRoutine(unsigned long&)+0xa4>)
    1d86:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1d8a:	f004 fd55 	bl	6838 <Msg::outln(char const*)>
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
    1d8e:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1d92:	2102      	movs	r1, #2
    1d94:	f002 f822 	bl	3ddc <LightGroup::isActive(unsigned char)>
    1d98:	bb58      	cbnz	r0, 1df2 <BigHouse::dropTimerRoutine(unsigned long&)+0x72>
    1d9a:	4605      	mov	r5, r0
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
    1d9c:	2101      	movs	r1, #1
    1d9e:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1da2:	f002 f81b 	bl	3ddc <LightGroup::isActive(unsigned char)>
    1da6:	4606      	mov	r6, r0
    1da8:	b978      	cbnz	r0, 1dca <BigHouse::dropTimerRoutine(unsigned long&)+0x4a>
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
    1daa:	4601      	mov	r1, r0
    1dac:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1db0:	f002 f814 	bl	3ddc <LightGroup::isActive(unsigned char)>
    1db4:	bb58      	cbnz	r0, 1e0e <BigHouse::dropTimerRoutine(unsigned long&)+0x8e>
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
    1db6:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
    1dba:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    1dbe:	4b1a      	ldr	r3, [pc, #104]	; (1e28 <BigHouse::dropTimerRoutine(unsigned long&)+0xa8>)
    1dc0:	491a      	ldr	r1, [pc, #104]	; (1e2c <BigHouse::dropTimerRoutine(unsigned long&)+0xac>)
	}
}
    1dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
    1dc6:	f004 bdbf 	b.w	6948 <Msg::warn(char const*, char const*, char const*)>
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
		droptarget_ls->set(1, OFF_L);
    1dca:	462a      	mov	r2, r5
    1dcc:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1dd0:	2101      	movs	r1, #1
    1dd2:	f001 ffa7 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(0, BLINK_L);
    1dd6:	4629      	mov	r1, r5
    1dd8:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1ddc:	2202      	movs	r2, #2
    1dde:	f001 ffa1 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
    1de2:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    1de6:	f241 3188 	movw	r1, #5000	; 0x1388
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}
    1dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
    1dee:	f003 bfcd 	b.w	5d8c <TimerTask::setPeriod(unsigned long)>
// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
	msg->outln("dropTimerRoutine()");
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
    1df2:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1df6:	2200      	movs	r2, #0
    1df8:	2102      	movs	r1, #2
    1dfa:	f001 ff93 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(1, BLINK_L);
    1dfe:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1e02:	2202      	movs	r2, #2
    1e04:	2101      	movs	r1, #1
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}
    1e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
	msg->outln("dropTimerRoutine()");
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
    1e0a:	f001 bf8b 	b.w	3d24 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
    1e0e:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1e12:	4632      	mov	r2, r6
    1e14:	4631      	mov	r1, r6
    1e16:	f001 ff85 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
		resetDropTargets();
    1e1a:	4620      	mov	r0, r4
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}
    1e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
    1e20:	f7ff bcb4 	b.w	178c <BigHouse::resetDropTargets()>
    1e24:	20000998 	.word	0x20000998
    1e28:	200009ac 	.word	0x200009ac
    1e2c:	200009c0 	.word	0x200009c0

00001e30 <BigHouse::switchToNextLightShow()>:
	}
	inline void switchOffAllLights() { LightGroup::activeLightSet->switchOffAllLights(); }
    1e30:	4b43      	ldr	r3, [pc, #268]	; (1f40 <BigHouse::switchToNextLightShow()+0x110>)

void BigHouse::stopLightShow() {
	lshow_tmr->disable();
}

void BigHouse::switchToNextLightShow() {
    1e32:	b570      	push	{r4, r5, r6, lr}
    1e34:	4604      	mov	r4, r0
    1e36:	6818      	ldr	r0, [r3, #0]
    1e38:	f002 f95e 	bl	40f8 <LightSet::switchOffAllLights()>
	switchOffAllLights();
	if (++lightShowType > 7) lightShowType = 0;
    1e3c:	f894 3549 	ldrb.w	r3, [r4, #1353]	; 0x549
    1e40:	3301      	adds	r3, #1
    1e42:	b2db      	uxtb	r3, r3
    1e44:	2b07      	cmp	r3, #7
    1e46:	f884 3549 	strb.w	r3, [r4, #1353]	; 0x549
    1e4a:	d924      	bls.n	1e96 <BigHouse::switchToNextLightShow()+0x66>
    1e4c:	2300      	movs	r3, #0
    1e4e:	f884 3549 	strb.w	r3, [r4, #1353]	; 0x549
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1e52:	2112      	movs	r1, #18
    1e54:	483b      	ldr	r0, [pc, #236]	; (1f44 <BigHouse::switchToNextLightShow()+0x114>)
    1e56:	f00a f809 	bl	be6c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1e5a:	483b      	ldr	r0, [pc, #236]	; (1f48 <BigHouse::switchToNextLightShow()+0x118>)
    1e5c:	f504 65b5 	add.w	r5, r4, #1448	; 0x5a8
    1e60:	f504 66b9 	add.w	r6, r4, #1480	; 0x5c8
    1e64:	f00a f9c4 	bl	c1f0 <Print::println()>
	case 2:
	case 4:
		Serial.println("Original lightshow");
		for (byte i = 0; i < 8; i++) {
			//lShow_set[i]->setAll(OFF_L);
			lShow_set[i]->set(0, ON_L);
    1e68:	f855 0f04 	ldr.w	r0, [r5, #4]!
    1e6c:	2201      	movs	r2, #1
    1e6e:	2100      	movs	r1, #0
    1e70:	f001 ff58 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
	switch (lightShowType) {
	case 0: // original light show
	case 2:
	case 4:
		Serial.println("Original lightshow");
		for (byte i = 0; i < 8; i++) {
    1e74:	42ae      	cmp	r6, r5
    1e76:	d1f7      	bne.n	1e68 <BigHouse::switchToNextLightShow()+0x38>
			//lShow_set[i]->setAll(OFF_L);
			lShow_set[i]->set(0, ON_L);
		}
		lightShowDelay = 200; // ms
    1e78:	21c8      	movs	r1, #200	; 0xc8
		lightShowOrder = false;
    1e7a:	2300      	movs	r3, #0
		Serial.println("Original lightshow");
		for (byte i = 0; i < 8; i++) {
			//lShow_set[i]->setAll(OFF_L);
			lShow_set[i]->set(0, ON_L);
		}
		lightShowDelay = 200; // ms
    1e7c:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		lightShowOrder = false;
    1e80:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		break;
	case 7: // light wave
		Serial.println("Wave lightshow");
		lightShowDelay = 20;
	}
	lightShowStep = 0;
    1e84:	2300      	movs	r3, #0
	lshow_tmr->setPeriod(lightShowDelay);
    1e86:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
		break;
	case 7: // light wave
		Serial.println("Wave lightshow");
		lightShowDelay = 20;
	}
	lightShowStep = 0;
    1e8a:	f8a4 354a 	strh.w	r3, [r4, #1354]	; 0x54a
	lshow_tmr->setPeriod(lightShowDelay);
}
    1e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	case 7: // light wave
		Serial.println("Wave lightshow");
		lightShowDelay = 20;
	}
	lightShowStep = 0;
	lshow_tmr->setPeriod(lightShowDelay);
    1e92:	f003 bf7b 	b.w	5d8c <TimerTask::setPeriod(unsigned long)>
}

void BigHouse::switchToNextLightShow() {
	switchOffAllLights();
	if (++lightShowType > 7) lightShowType = 0;
	switch (lightShowType) {
    1e96:	3b01      	subs	r3, #1
    1e98:	2b06      	cmp	r3, #6
    1e9a:	d8da      	bhi.n	1e52 <BigHouse::switchToNextLightShow()+0x22>
    1e9c:	a201      	add	r2, pc, #4	; (adr r2, 1ea4 <BigHouse::switchToNextLightShow()+0x74>)
    1e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ea2:	bf00      	nop
    1ea4:	00001ec1 	.word	0x00001ec1
    1ea8:	00001e53 	.word	0x00001e53
    1eac:	00001ed7 	.word	0x00001ed7
    1eb0:	00001e53 	.word	0x00001e53
    1eb4:	00001eed 	.word	0x00001eed
    1eb8:	00001f09 	.word	0x00001f09
    1ebc:	00001f27 	.word	0x00001f27
    1ec0:	2110      	movs	r1, #16
    1ec2:	4822      	ldr	r0, [pc, #136]	; (1f4c <BigHouse::switchToNextLightShow()+0x11c>)
    1ec4:	f009 ffd2 	bl	be6c <usb_serial_write>
    1ec8:	481f      	ldr	r0, [pc, #124]	; (1f48 <BigHouse::switchToNextLightShow()+0x118>)
    1eca:	f00a f991 	bl	c1f0 <Print::println()>
		lightShowDelay = 200; // ms
		lightShowOrder = false;
		break;
	case 1: // linear on -> linear off
		Serial.println("Linear lightshow");
		lightShowDelay = 15; // ms
    1ece:	210f      	movs	r1, #15
    1ed0:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		break;
    1ed4:	e7d6      	b.n	1e84 <BigHouse::switchToNextLightShow()+0x54>
    1ed6:	2116      	movs	r1, #22
    1ed8:	481d      	ldr	r0, [pc, #116]	; (1f50 <BigHouse::switchToNextLightShow()+0x120>)
    1eda:	f009 ffc7 	bl	be6c <usb_serial_write>
    1ede:	481a      	ldr	r0, [pc, #104]	; (1f48 <BigHouse::switchToNextLightShow()+0x118>)
    1ee0:	f00a f986 	bl	c1f0 <Print::println()>
	case 3: // groups flashing
		Serial.println("Groups flash lightshow");
		lightShowDelay = 100;
    1ee4:	2164      	movs	r1, #100	; 0x64
    1ee6:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		break;
    1eea:	e7cb      	b.n	1e84 <BigHouse::switchToNextLightShow()+0x54>
    1eec:	2110      	movs	r1, #16
    1eee:	4819      	ldr	r0, [pc, #100]	; (1f54 <BigHouse::switchToNextLightShow()+0x124>)
    1ef0:	f009 ffbc 	bl	be6c <usb_serial_write>
    1ef4:	4814      	ldr	r0, [pc, #80]	; (1f48 <BigHouse::switchToNextLightShow()+0x118>)
    1ef6:	f00a f97b 	bl	c1f0 <Print::println()>
	case 5: // random on -> random off
		Serial.println("random lightshow");
		lightShowDelay = 20;
    1efa:	2114      	movs	r1, #20
		lightShowOrder = true;
    1efc:	2301      	movs	r3, #1
		Serial.println("Groups flash lightshow");
		lightShowDelay = 100;
		break;
	case 5: // random on -> random off
		Serial.println("random lightshow");
		lightShowDelay = 20;
    1efe:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		lightShowOrder = true;
    1f02:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		break;
    1f06:	e7bd      	b.n	1e84 <BigHouse::switchToNextLightShow()+0x54>
    1f08:	210d      	movs	r1, #13
    1f0a:	4813      	ldr	r0, [pc, #76]	; (1f58 <BigHouse::switchToNextLightShow()+0x128>)
    1f0c:	f009 ffae 	bl	be6c <usb_serial_write>
    1f10:	480d      	ldr	r0, [pc, #52]	; (1f48 <BigHouse::switchToNextLightShow()+0x118>)
    1f12:	f00a f96d 	bl	c1f0 <Print::println()>
	case 6: // PCM
		Serial.println("PCM lightshow");
		lightShowOrder = true;
    1f16:	2301      	movs	r3, #1
    1f18:	f8b4 1544 	ldrh.w	r1, [r4, #1348]	; 0x544
    1f1c:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		lightShowArg = 1;
    1f20:	f8a4 3546 	strh.w	r3, [r4, #1350]	; 0x546
		break;
    1f24:	e7ae      	b.n	1e84 <BigHouse::switchToNextLightShow()+0x54>
    1f26:	210e      	movs	r1, #14
    1f28:	480c      	ldr	r0, [pc, #48]	; (1f5c <BigHouse::switchToNextLightShow()+0x12c>)
    1f2a:	f009 ff9f 	bl	be6c <usb_serial_write>
    1f2e:	4806      	ldr	r0, [pc, #24]	; (1f48 <BigHouse::switchToNextLightShow()+0x118>)
    1f30:	f00a f95e 	bl	c1f0 <Print::println()>
	case 7: // light wave
		Serial.println("Wave lightshow");
		lightShowDelay = 20;
    1f34:	2314      	movs	r3, #20
    1f36:	4619      	mov	r1, r3
    1f38:	f8a4 3544 	strh.w	r3, [r4, #1348]	; 0x544
    1f3c:	e7a2      	b.n	1e84 <BigHouse::switchToNextLightShow()+0x54>
    1f3e:	bf00      	nop
    1f40:	20002ac8 	.word	0x20002ac8
    1f44:	200009d0 	.word	0x200009d0
    1f48:	20001fdc 	.word	0x20001fdc
    1f4c:	200009e4 	.word	0x200009e4
    1f50:	200009f8 	.word	0x200009f8
    1f54:	20000a10 	.word	0x20000a10
    1f58:	20000a24 	.word	0x20000a24
    1f5c:	20000a34 	.word	0x20000a34

00001f60 <BigHouse::startLightShow()>:
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}

void BigHouse::startLightShow() {
    1f60:	b510      	push	{r4, lr}
	msg->outln(F("startLightShow..."));
    1f62:	4909      	ldr	r1, [pc, #36]	; (1f88 <BigHouse::startLightShow()+0x28>)
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}

void BigHouse::startLightShow() {
    1f64:	4604      	mov	r4, r0
	msg->outln(F("startLightShow..."));
    1f66:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1f6a:	f004 fc35 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	lightShowType = 10;
    1f6e:	230a      	movs	r3, #10
	switchToNextLightShow();
    1f70:	4620      	mov	r0, r4
	}
}

void BigHouse::startLightShow() {
	msg->outln(F("startLightShow..."));
	lightShowType = 10;
    1f72:	f884 3549 	strb.w	r3, [r4, #1353]	; 0x549
	switchToNextLightShow();
    1f76:	f7ff ff5b 	bl	1e30 <BigHouse::switchToNextLightShow()>
	lshow_tmr->enable();
    1f7a:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550

}
    1f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::startLightShow() {
	msg->outln(F("startLightShow..."));
	lightShowType = 10;
	switchToNextLightShow();
	lshow_tmr->enable();
    1f82:	f003 bf09 	b.w	5d98 <TimerTask::enable()>
    1f86:	bf00      	nop
    1f88:	20000a44 	.word	0x20000a44

00001f8c <BigHouse::lightShowCycle(unsigned long&)>:
	}
	lightShowStep = 0;
	lshow_tmr->setPeriod(lightShowDelay);
}

void BigHouse::lightShowCycle(uint32_t &ms) {
    1f8c:	b570      	push	{r4, r5, r6, lr}
	byte i;

	switch (lightShowType) {
    1f8e:	f890 3549 	ldrb.w	r3, [r0, #1353]	; 0x549
	}
	lightShowStep = 0;
	lshow_tmr->setPeriod(lightShowDelay);
}

void BigHouse::lightShowCycle(uint32_t &ms) {
    1f92:	b082      	sub	sp, #8
    1f94:	4604      	mov	r4, r0
	byte i;

	switch (lightShowType) {
    1f96:	2b07      	cmp	r3, #7
    1f98:	d827      	bhi.n	1fea <BigHouse::lightShowCycle(unsigned long&)+0x5e>
    1f9a:	e8df f003 	tbb	[pc, r3]
    1f9e:	7639      	.short	0x7639
    1fa0:	04398939 	.word	0x04398939
    1fa4:	2da5      	.short	0x2da5
	byte getNextPlayerOn();
	String getTopPlayerString(byte playerNum);
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
    1fa6:	4b7f      	ldr	r3, [pc, #508]	; (21a4 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    void copy(Light &from);
	void copy(Light *from);
    void reset();

    // define the state of the light
    inline void set(bool st) { set(st ? ON_L : OFF_L); }
    1fa8:	2500      	movs	r5, #0
    1faa:	681e      	ldr	r6, [r3, #0]
		else lShow_set[7]->setAll(OFF_L);
		lShow_set[i]->setAll(ON_L);
		if (lightShowStep >= 48) switchToNextLightShow();
		break;
	case 5:
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
    1fac:	f008 fc98 	bl	a8e0 <micros>
    1fb0:	4b7d      	ldr	r3, [pc, #500]	; (21a8 <BigHouse::lightShowCycle(unsigned long&)+0x21c>)
    1fb2:	4601      	mov	r1, r0
    1fb4:	4630      	mov	r0, r6
    1fb6:	fba3 2301 	umull	r2, r3, r3, r1
    1fba:	095b      	lsrs	r3, r3, #5
    1fbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1fc0:	eba1 1103 	sub.w	r1, r1, r3, lsl #4
    1fc4:	f002 f880 	bl	40c8 <LightSet::getLight(int)>
    1fc8:	f894 1548 	ldrb.w	r1, [r4, #1352]	; 0x548
    1fcc:	2332      	movs	r3, #50	; 0x32
    1fce:	9500      	str	r5, [sp, #0]
    1fd0:	22c8      	movs	r2, #200	; 0xc8
    1fd2:	f001 fdb3 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
		if (lightShowStep == 100) lightShowOrder = false;
    1fd6:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    1fda:	2964      	cmp	r1, #100	; 0x64
    1fdc:	f000 80de 	beq.w	219c <BigHouse::lightShowCycle(unsigned long&)+0x210>
		if (lightShowStep >= 200) switchToNextLightShow();
    1fe0:	29c7      	cmp	r1, #199	; 0xc7
    1fe2:	d904      	bls.n	1fee <BigHouse::lightShowCycle(unsigned long&)+0x62>
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
		if (lightShowStep == 150) switchToNextLightShow();
		break;
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
    1fe4:	4620      	mov	r0, r4
    1fe6:	f7ff ff23 	bl	1e30 <BigHouse::switchToNextLightShow()>
    1fea:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
		break;
	}
	lightShowStep++;
    1fee:	3101      	adds	r1, #1
    1ff0:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    1ff4:	b002      	add	sp, #8
    1ff6:	bd70      	pop	{r4, r5, r6, pc}
		}
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
		if (lightShowStep == 150) switchToNextLightShow();
		break;
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
    1ff8:	f8b0 154a 	ldrh.w	r1, [r0, #1354]	; 0x54a
    1ffc:	292f      	cmp	r1, #47	; 0x2f
    1ffe:	f240 80c2 	bls.w	2186 <BigHouse::lightShowCycle(unsigned long&)+0x1fa>
		if (lightShowStep == 100) switchToNextLightShow();
    2002:	2964      	cmp	r1, #100	; 0x64
    2004:	d0ee      	beq.n	1fe4 <BigHouse::lightShowCycle(unsigned long&)+0x58>
		break;
	}
	lightShowStep++;
    2006:	3101      	adds	r1, #1
    2008:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    200c:	b002      	add	sp, #8
    200e:	bd70      	pop	{r4, r5, r6, pc}

	switch (lightShowType) {
	case 0: // original light show
	case 2:
	case 4:
		if (lightShowOrder) for (i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
    2010:	f890 3548 	ldrb.w	r3, [r0, #1352]	; 0x548
    2014:	f500 65b5 	add.w	r5, r0, #1448	; 0x5a8
    2018:	f500 66b9 	add.w	r6, r0, #1480	; 0x5c8
    201c:	b343      	cbz	r3, 2070 <BigHouse::lightShowCycle(unsigned long&)+0xe4>
    201e:	f855 0f04 	ldr.w	r0, [r5, #4]!
    2022:	f001 ffd1 	bl	3fc8 <LightGroup::rotateLeft()>
    2026:	42b5      	cmp	r5, r6
    2028:	d1f9      	bne.n	201e <BigHouse::lightShowCycle(unsigned long&)+0x92>
		else for (i = 0; i < 8; i++) lShow_set[i]->rotateRight();
		if (lightShowOrder) lightShowDelay += 5; else lightShowDelay -= 5;
    202a:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
    202e:	2b00      	cmp	r3, #0
    2030:	d072      	beq.n	2118 <BigHouse::lightShowCycle(unsigned long&)+0x18c>
    2032:	f8b4 1544 	ldrh.w	r1, [r4, #1348]	; 0x544
    2036:	3105      	adds	r1, #5
    2038:	b289      	uxth	r1, r1
    203a:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
    203e:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    2042:	f003 fea3 	bl	5d8c <TimerTask::setPeriod(unsigned long)>
		if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
    2046:	f8b4 3544 	ldrh.w	r3, [r4, #1348]	; 0x544
    204a:	3b65      	subs	r3, #101	; 0x65
    204c:	b29b      	uxth	r3, r3
    204e:	2bc6      	cmp	r3, #198	; 0xc6
    2050:	d905      	bls.n	205e <BigHouse::lightShowCycle(unsigned long&)+0xd2>
    2052:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
    2056:	f083 0301 	eor.w	r3, r3, #1
    205a:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		//lights->print();
		if (lightShowStep >= 80) switchToNextLightShow();
    205e:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    2062:	294f      	cmp	r1, #79	; 0x4f
    2064:	d8be      	bhi.n	1fe4 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    2066:	3101      	adds	r1, #1
    2068:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    206c:	b002      	add	sp, #8
    206e:	bd70      	pop	{r4, r5, r6, pc}
	switch (lightShowType) {
	case 0: // original light show
	case 2:
	case 4:
		if (lightShowOrder) for (i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
		else for (i = 0; i < 8; i++) lShow_set[i]->rotateRight();
    2070:	f855 0f04 	ldr.w	r0, [r5, #4]!
    2074:	f001 ff60 	bl	3f38 <LightGroup::rotateRight()>
    2078:	42ae      	cmp	r6, r5
    207a:	d0d6      	beq.n	202a <BigHouse::lightShowCycle(unsigned long&)+0x9e>
    207c:	f855 0f04 	ldr.w	r0, [r5, #4]!
    2080:	f001 ff5a 	bl	3f38 <LightGroup::rotateRight()>
    2084:	42ae      	cmp	r6, r5
    2086:	d1f3      	bne.n	2070 <BigHouse::lightShowCycle(unsigned long&)+0xe4>
    2088:	e7cf      	b.n	202a <BigHouse::lightShowCycle(unsigned long&)+0x9e>
		if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
		//lights->print();
		if (lightShowStep >= 80) switchToNextLightShow();
		break;
	case 1:
		if (lightShowStep < 48) invertLight(lightShowStep);
    208a:	f8b0 154a 	ldrh.w	r1, [r0, #1354]	; 0x54a
    208e:	292f      	cmp	r1, #47	; 0x2f
    2090:	d860      	bhi.n	2154 <BigHouse::lightShowCycle(unsigned long&)+0x1c8>
	}
	inline void pulseLight(byte n, uint16_t pulsePeriod = 250) {
		LightGroup::activeLightSet->getLight(n)->pulse(pulsePeriod);
	}
	inline void invertLight(byte n) {
		LightGroup::activeLightSet->getLight(n)->invert();
    2092:	4b44      	ldr	r3, [pc, #272]	; (21a4 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    2094:	6818      	ldr	r0, [r3, #0]
    2096:	f002 f817 	bl	40c8 <LightSet::getLight(int)>
    209a:	f001 fd87 	bl	3bac <Light::invert()>
		else invertLight(lightShowStep - 48);
		if (lightShowStep >= 95) switchToNextLightShow();
    209e:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    20a2:	295e      	cmp	r1, #94	; 0x5e
    20a4:	d89e      	bhi.n	1fe4 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    20a6:	3101      	adds	r1, #1
    20a8:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    20ac:	b002      	add	sp, #8
    20ae:	bd70      	pop	{r4, r5, r6, pc}
		if (lightShowStep < 48) invertLight(lightShowStep);
		else invertLight(lightShowStep - 48);
		if (lightShowStep >= 95) switchToNextLightShow();
		break;
	case 3:
		i = lightShowStep & 0x07; // i = 0..7
    20b0:	f890 554a 	ldrb.w	r5, [r0, #1354]	; 0x54a
		if (i > 0) lShow_set[i-1]->setAll(OFF_L); 
    20b4:	f015 0507 	ands.w	r5, r5, #7
    20b8:	d055      	beq.n	2166 <BigHouse::lightShowCycle(unsigned long&)+0x1da>
    20ba:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    20be:	2100      	movs	r1, #0
    20c0:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
    20c4:	f001 febe 	bl	3e44 <LightGroup::setAll(lightState)>
		else lShow_set[7]->setAll(OFF_L);
		lShow_set[i]->setAll(ON_L);
    20c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    20cc:	2101      	movs	r1, #1
    20ce:	f8d5 05ac 	ldr.w	r0, [r5, #1452]	; 0x5ac
    20d2:	f001 feb7 	bl	3e44 <LightGroup::setAll(lightState)>
		if (lightShowStep >= 48) switchToNextLightShow();
    20d6:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    20da:	292f      	cmp	r1, #47	; 0x2f
    20dc:	d882      	bhi.n	1fe4 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    20de:	3101      	adds	r1, #1
    20e0:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    20e4:	b002      	add	sp, #8
    20e6:	bd70      	pop	{r4, r5, r6, pc}
	byte getNextPlayerOn();
	String getTopPlayerString(byte playerNum);
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
    20e8:	4d2e      	ldr	r5, [pc, #184]	; (21a4 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
		if (lightShowStep == 100) lightShowOrder = false;
		if (lightShowStep >= 200) switchToNextLightShow();
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
    20ea:	2100      	movs	r1, #0
    20ec:	6828      	ldr	r0, [r5, #0]
    20ee:	f001 ffeb 	bl	40c8 <LightSet::getLight(int)>
    20f2:	7846      	ldrb	r6, [r0, #1]
			getActiveLightSet()->switchOnAllLights();
    20f4:	6828      	ldr	r0, [r5, #0]
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
		if (lightShowStep == 100) lightShowOrder = false;
		if (lightShowStep >= 200) switchToNextLightShow();
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
    20f6:	b9b6      	cbnz	r6, 2126 <BigHouse::lightShowCycle(unsigned long&)+0x19a>
			getActiveLightSet()->switchOnAllLights();
    20f8:	f002 f81a 	bl	4130 <LightSet::switchOnAllLights()>
			if (lightShowOrder) {
    20fc:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
				lightShowArg += 2;
    2100:	f8b4 1546 	ldrh.w	r1, [r4, #1350]	; 0x546
		if (lightShowStep >= 200) switchToNextLightShow();
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
			getActiveLightSet()->switchOnAllLights();
			if (lightShowOrder) {
    2104:	b3ab      	cbz	r3, 2172 <BigHouse::lightShowCycle(unsigned long&)+0x1e6>
				lightShowArg += 2;
    2106:	3102      	adds	r1, #2
    2108:	b289      	uxth	r1, r1
				if (lightShowArg >= 25) lightShowOrder = false;
    210a:	2918      	cmp	r1, #24
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
			getActiveLightSet()->switchOnAllLights();
			if (lightShowOrder) {
				lightShowArg += 2;
    210c:	f8a4 1546 	strh.w	r1, [r4, #1350]	; 0x546
				if (lightShowArg >= 25) lightShowOrder = false;
    2110:	d910      	bls.n	2134 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
    2112:	f884 6548 	strb.w	r6, [r4, #1352]	; 0x548
    2116:	e00d      	b.n	2134 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
	case 0: // original light show
	case 2:
	case 4:
		if (lightShowOrder) for (i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
		else for (i = 0; i < 8; i++) lShow_set[i]->rotateRight();
		if (lightShowOrder) lightShowDelay += 5; else lightShowDelay -= 5;
    2118:	f8b4 1544 	ldrh.w	r1, [r4, #1348]	; 0x544
    211c:	3905      	subs	r1, #5
    211e:	b289      	uxth	r1, r1
    2120:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
    2124:	e78b      	b.n	203e <BigHouse::lightShowCycle(unsigned long&)+0xb2>
				if (lightShowArg <= 1) lightShowOrder = true;
			}
			lightShowDelay = lightShowArg;
		}
		else { // switch OFF cycle
			getActiveLightSet()->switchOffAllLights();
    2126:	f001 ffe7 	bl	40f8 <LightSet::switchOffAllLights()>
			lightShowDelay = 26 - lightShowArg;
    212a:	f8b4 1546 	ldrh.w	r1, [r4, #1350]	; 0x546
    212e:	f1c1 011a 	rsb	r1, r1, #26
    2132:	b289      	uxth	r1, r1
    2134:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		}
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
    2138:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    213c:	f003 fe26 	bl	5d8c <TimerTask::setPeriod(unsigned long)>
		if (lightShowStep == 150) switchToNextLightShow();
    2140:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    2144:	2996      	cmp	r1, #150	; 0x96
    2146:	f43f af4d 	beq.w	1fe4 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    214a:	3101      	adds	r1, #1
    214c:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    2150:	b002      	add	sp, #8
    2152:	bd70      	pop	{r4, r5, r6, pc}
	}
	inline void pulseLight(byte n, uint16_t pulsePeriod = 250) {
		LightGroup::activeLightSet->getLight(n)->pulse(pulsePeriod);
	}
	inline void invertLight(byte n) {
		LightGroup::activeLightSet->getLight(n)->invert();
    2154:	4b13      	ldr	r3, [pc, #76]	; (21a4 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    2156:	3930      	subs	r1, #48	; 0x30
    2158:	6818      	ldr	r0, [r3, #0]
    215a:	b2c9      	uxtb	r1, r1
    215c:	f001 ffb4 	bl	40c8 <LightSet::getLight(int)>
    2160:	f001 fd24 	bl	3bac <Light::invert()>
    2164:	e79b      	b.n	209e <BigHouse::lightShowCycle(unsigned long&)+0x112>
		if (lightShowStep >= 95) switchToNextLightShow();
		break;
	case 3:
		i = lightShowStep & 0x07; // i = 0..7
		if (i > 0) lShow_set[i-1]->setAll(OFF_L); 
		else lShow_set[7]->setAll(OFF_L);
    2166:	4629      	mov	r1, r5
    2168:	f8d0 05c8 	ldr.w	r0, [r0, #1480]	; 0x5c8
    216c:	f001 fe6a 	bl	3e44 <LightGroup::setAll(lightState)>
    2170:	e7aa      	b.n	20c8 <BigHouse::lightShowCycle(unsigned long&)+0x13c>
			if (lightShowOrder) {
				lightShowArg += 2;
				if (lightShowArg >= 25) lightShowOrder = false;
			}
			else {
				lightShowArg -= 2;
    2172:	3902      	subs	r1, #2
    2174:	b289      	uxth	r1, r1
				if (lightShowArg <= 1) lightShowOrder = true;
    2176:	2901      	cmp	r1, #1
			if (lightShowOrder) {
				lightShowArg += 2;
				if (lightShowArg >= 25) lightShowOrder = false;
			}
			else {
				lightShowArg -= 2;
    2178:	f8a4 1546 	strh.w	r1, [r4, #1350]	; 0x546
				if (lightShowArg <= 1) lightShowOrder = true;
    217c:	d8da      	bhi.n	2134 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
    217e:	2301      	movs	r3, #1
    2180:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
    2184:	e7d6      	b.n	2134 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
	inline void blinkLight(byte n, 
		uint16_t blinkPeriod = 250, byte blinkDutyC = 50, byte ticks = 0) {
			LightGroup::activeLightSet->getLight(n)->blink(blinkPeriod, blinkDutyC, ticks);
	}
	inline void pulseLight(byte n, uint16_t pulsePeriod = 250) {
		LightGroup::activeLightSet->getLight(n)->pulse(pulsePeriod);
    2186:	4b07      	ldr	r3, [pc, #28]	; (21a4 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    2188:	6818      	ldr	r0, [r3, #0]
    218a:	f001 ff9d 	bl	40c8 <LightSet::getLight(int)>
    218e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2192:	f001 fd1d 	bl	3bd0 <Light::pulse(unsigned short)>
    2196:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    219a:	e732      	b.n	2002 <BigHouse::lightShowCycle(unsigned long&)+0x76>
		lShow_set[i]->setAll(ON_L);
		if (lightShowStep >= 48) switchToNextLightShow();
		break;
	case 5:
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
		if (lightShowStep == 100) lightShowOrder = false;
    219c:	f884 5548 	strb.w	r5, [r4, #1352]	; 0x548
    21a0:	e725      	b.n	1fee <BigHouse::lightShowCycle(unsigned long&)+0x62>
    21a2:	bf00      	nop
    21a4:	20002ac8 	.word	0x20002ac8
    21a8:	aaaaaaab 	.word	0xaaaaaaab

000021ac <BigHouse::getTopScoreStr(unsigned char)>:
		break;
	}
	lightShowStep++;
}

String BigHouse::getTopScoreStr(byte n) {
    21ac:	b570      	push	{r4, r5, r6, lr}
    21ae:	b088      	sub	sp, #32
    21b0:	4614      	mov	r4, r2
    21b2:	4605      	mov	r5, r0
    21b4:	460e      	mov	r6, r1

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    21b6:	a804      	add	r0, sp, #16
    21b8:	491f      	ldr	r1, [pc, #124]	; (2238 <BigHouse::getTopScoreStr(unsigned char)+0x8c>)
    21ba:	f00a f91f 	bl	c3fc <String::String(char const*)>
	String st = " (" + String(n) + ") ";
    21be:	4621      	mov	r1, r4
    21c0:	4668      	mov	r0, sp
	st += topScore[n].playerName + "- ";
    21c2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
	}
	lightShowStep++;
}

String BigHouse::getTopScoreStr(byte n) {
	String st = " (" + String(n) + ") ";
    21c6:	f00a f95d 	bl	c484 <String::String(unsigned char)>
    21ca:	4669      	mov	r1, sp
    21cc:	a804      	add	r0, sp, #16
	st += topScore[n].playerName + "- ";
    21ce:	00a4      	lsls	r4, r4, #2
	}
	lightShowStep++;
}

String BigHouse::getTopScoreStr(byte n) {
	String st = " (" + String(n) + ") ";
    21d0:	f00a fa48 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    21d4:	4919      	ldr	r1, [pc, #100]	; (223c <BigHouse::getTopScoreStr(unsigned char)+0x90>)
    21d6:	f00a fa4d 	bl	c674 <operator+(StringSumHelper const&, char const*)>
    21da:	4601      	mov	r1, r0
    21dc:	4628      	mov	r0, r5
    21de:	f00a f933 	bl	c448 <String::String(String const&)>
    21e2:	4668      	mov	r0, sp
    21e4:	f00a f8ca 	bl	c37c <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    21e8:	a804      	add	r0, sp, #16
    21ea:	f00a f8c7 	bl	c37c <String::~String()>
	st += topScore[n].playerName + "- ";
    21ee:	1931      	adds	r1, r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
    21f0:	a804      	add	r0, sp, #16
    21f2:	f501 712b 	add.w	r1, r1, #684	; 0x2ac
    21f6:	f00a f927 	bl	c448 <String::String(String const&)>
    21fa:	a804      	add	r0, sp, #16
    21fc:	4910      	ldr	r1, [pc, #64]	; (2240 <BigHouse::getTopScoreStr(unsigned char)+0x94>)
    21fe:	f00a fa39 	bl	c674 <operator+(StringSumHelper const&, char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    2202:	4601      	mov	r1, r0
    2204:	4628      	mov	r0, r5
    2206:	f00a f9f7 	bl	c5f8 <String::append(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    220a:	a804      	add	r0, sp, #16
    220c:	f00a f8b6 	bl	c37c <String::~String()>
	st += topScore[n].scoreString + "  ";
    2210:	1931      	adds	r1, r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2212:	a804      	add	r0, sp, #16
    2214:	f501 7127 	add.w	r1, r1, #668	; 0x29c
    2218:	f00a f916 	bl	c448 <String::String(String const&)>
    221c:	a804      	add	r0, sp, #16
    221e:	4909      	ldr	r1, [pc, #36]	; (2244 <BigHouse::getTopScoreStr(unsigned char)+0x98>)
    2220:	f00a fa28 	bl	c674 <operator+(StringSumHelper const&, char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    2224:	4601      	mov	r1, r0
    2226:	4628      	mov	r0, r5
    2228:	f00a f9e6 	bl	c5f8 <String::append(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    222c:	a804      	add	r0, sp, #16
    222e:	f00a f8a5 	bl	c37c <String::~String()>
	return st;
}
    2232:	4628      	mov	r0, r5
    2234:	b008      	add	sp, #32
    2236:	bd70      	pop	{r4, r5, r6, pc}
    2238:	20000a58 	.word	0x20000a58
    223c:	20000a5c 	.word	0x20000a5c
    2240:	20000a60 	.word	0x20000a60
    2244:	20000a64 	.word	0x20000a64

00002248 <BigHouse::startDisplayShow()>:

void BigHouse::startDisplayShow() {
    2248:	b510      	push	{r4, lr}
	msg->outln(F("startDisplayShow..."));
    224a:	4907      	ldr	r1, [pc, #28]	; (2268 <BigHouse::startDisplayShow()+0x20>)
	st += topScore[n].playerName + "- ";
	st += topScore[n].scoreString + "  ";
	return st;
}

void BigHouse::startDisplayShow() {
    224c:	4604      	mov	r4, r0
	msg->outln(F("startDisplayShow..."));
    224e:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    2252:	f004 fac1 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	displayShowStep = 0;
    2256:	2300      	movs	r3, #0
	dshow_tmr->enable();
    2258:	f8d4 0558 	ldr.w	r0, [r4, #1368]	; 0x558
	return st;
}

void BigHouse::startDisplayShow() {
	msg->outln(F("startDisplayShow..."));
	displayShowStep = 0;
    225c:	f884 3540 	strb.w	r3, [r4, #1344]	; 0x540
	dshow_tmr->enable();
}
    2260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::startDisplayShow() {
	msg->outln(F("startDisplayShow..."));
	displayShowStep = 0;
	dshow_tmr->enable();
    2264:	f003 bd98 	b.w	5d98 <TimerTask::enable()>
    2268:	20000a68 	.word	0x20000a68

0000226c <BigHouse::setPinballMode(pinballMode)>:
	setPinballMode(SHOW_MODE);
	//startLightShow();
	//startDisplayShow();
}

void BigHouse::setPinballMode(pinballMode m) {
    226c:	b530      	push	{r4, r5, lr}
    226e:	b085      	sub	sp, #20
    2270:	460c      	mov	r4, r1
    2272:	4605      	mov	r5, r0
	String s;
    2274:	2100      	movs	r1, #0
    2276:	4668      	mov	r0, sp
    2278:	f00a f8c0 	bl	c3fc <String::String(char const*)>

	PinGame::setPinballMode(m);
    227c:	4621      	mov	r1, r4
    227e:	4628      	mov	r0, r5
    2280:	f002 f9b4 	bl	45ec <PinGame::setPinballMode(pinballMode)>
	switch (m) {
    2284:	b14c      	cbz	r4, 229a <BigHouse::setPinballMode(pinballMode)+0x2e>
    2286:	2c01      	cmp	r4, #1
    2288:	d102      	bne.n	2290 <BigHouse::setPinballMode(pinballMode)+0x24>
	case SHOW_MODE:
		startLightShow();
		startDisplayShow();
		break;
	case GAME_MODE:
		startNewGame();
    228a:	4628      	mov	r0, r5
    228c:	f000 f842 	bl	2314 <BigHouse::startNewGame()>
	//startLightShow();
	//startDisplayShow();
}

void BigHouse::setPinballMode(pinballMode m) {
	String s;
    2290:	4668      	mov	r0, sp
    2292:	f00a f873 	bl	c37c <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2296:	b005      	add	sp, #20
    2298:	bd30      	pop	{r4, r5, pc}
	String s;

	PinGame::setPinballMode(m);
	switch (m) {
	case SHOW_MODE:
		startLightShow();
    229a:	4628      	mov	r0, r5
    229c:	f7ff fe60 	bl	1f60 <BigHouse::startLightShow()>
		startDisplayShow();
    22a0:	4628      	mov	r0, r5
    22a2:	f7ff ffd1 	bl	2248 <BigHouse::startDisplayShow()>
	//startLightShow();
	//startDisplayShow();
}

void BigHouse::setPinballMode(pinballMode m) {
	String s;
    22a6:	4668      	mov	r0, sp
    22a8:	f00a f868 	bl	c37c <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    22ac:	b005      	add	sp, #20
    22ae:	bd30      	pop	{r4, r5, pc}

000022b0 <BigHouse::begin()>:
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
}

void BigHouse::begin() {
    22b0:	b510      	push	{r4, lr}
    22b2:	4604      	mov	r4, r0
	msg->outln(F("BigHouse begin..."));
    22b4:	4916      	ldr	r1, [pc, #88]	; (2310 <BigHouse::begin()+0x60>)
    22b6:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    22ba:	f004 fa8d 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	reset();
    22be:	4620      	mov	r0, r4
    22c0:	f002 fbb2 	bl	4a28 <PinGame::reset()>
	lamps->setProtection(SND16_LMP, true);
    22c4:	68a0      	ldr	r0, [r4, #8]
    22c6:	2201      	movs	r2, #1
    22c8:	2104      	movs	r1, #4
    22ca:	f000 fa71 	bl	27b0 <BitMappedSet::setProtection(unsigned short, bool)>
	lamps->setProtection(RAMP_LMP, true);
    22ce:	68a0      	ldr	r0, [r4, #8]
    22d0:	2201      	movs	r2, #1
    22d2:	210c      	movs	r1, #12
    22d4:	f000 fa6c 	bl	27b0 <BitMappedSet::setProtection(unsigned short, bool)>
	lamps->setProtection(BALLGATE_LMP, true);
    22d8:	68a0      	ldr	r0, [r4, #8]
    22da:	2201      	movs	r2, #1
    22dc:	210d      	movs	r1, #13
    22de:	f000 fa67 	bl	27b0 <BitMappedSet::setProtection(unsigned short, bool)>
	lamps->setProtection(AUGER_LMP, true);
    22e2:	68a0      	ldr	r0, [r4, #8]
    22e4:	2201      	movs	r2, #1
    22e6:	210e      	movs	r1, #14
    22e8:	f000 fa62 	bl	27b0 <BitMappedSet::setProtection(unsigned short, bool)>
	setSound(SND_SHUT_UP);
    22ec:	6823      	ldr	r3, [r4, #0]
    22ee:	4620      	mov	r0, r4
    22f0:	211f      	movs	r1, #31
    22f2:	689b      	ldr	r3, [r3, #8]
    22f4:	4798      	blx	r3
	//msg->outln(F("bank reset..."));
	act.bankReset.activate(250);
    22f6:	f504 6055 	add.w	r0, r4, #3408	; 0xd50
    22fa:	21fa      	movs	r1, #250	; 0xfa
    22fc:	2200      	movs	r2, #0
    22fe:	f003 fa71 	bl	57e4 <Sys80b_Actuator::activate(unsigned short, unsigned short)>
	//msg->outln(F("starting shows..."));
	setPinballMode(SHOW_MODE);
    2302:	4620      	mov	r0, r4
    2304:	2100      	movs	r1, #0
	//startLightShow();
	//startDisplayShow();
}
    2306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lamps->setProtection(AUGER_LMP, true);
	setSound(SND_SHUT_UP);
	//msg->outln(F("bank reset..."));
	act.bankReset.activate(250);
	//msg->outln(F("starting shows..."));
	setPinballMode(SHOW_MODE);
    230a:	f7ff bfaf 	b.w	226c <BigHouse::setPinballMode(pinballMode)>
    230e:	bf00      	nop
    2310:	20000a7c 	.word	0x20000a7c

00002314 <BigHouse::startNewGame()>:
		// TODO...
		break;
	}
}

void BigHouse::startNewGame() {
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	4604      	mov	r4, r0
	//startNewGame();
	setPinballMode(GAME_MODE);
    2318:	2101      	movs	r1, #1
    231a:	f7ff ffa7 	bl	226c <BigHouse::setPinballMode(pinballMode)>
	multiballMode = false;
    231e:	2500      	movs	r5, #0
	bonusAdvanceSwitches = 100;
    2320:	2264      	movs	r2, #100	; 0x64
	cellBlockSeq = 0;
	multiSeq = 0;
	extraBallGiven = false;
	setSound(SND_MUSIC);
    2322:	6823      	ldr	r3, [r4, #0]
void BigHouse::startNewGame() {
	//startNewGame();
	setPinballMode(GAME_MODE);
	multiballMode = false;
	bonusAdvanceSwitches = 100;
	cellBlockSeq = 0;
    2324:	f884 5533 	strb.w	r5, [r4, #1331]	; 0x533
	multiSeq = 0;
	extraBallGiven = false;
	setSound(SND_MUSIC);
    2328:	4620      	mov	r0, r4

void BigHouse::startNewGame() {
	//startNewGame();
	setPinballMode(GAME_MODE);
	multiballMode = false;
	bonusAdvanceSwitches = 100;
    232a:	f8a4 253a 	strh.w	r2, [r4, #1338]	; 0x53a
	cellBlockSeq = 0;
	multiSeq = 0;
	extraBallGiven = false;
	setSound(SND_MUSIC);
    232e:	210f      	movs	r1, #15
	//startNewGame();
	setPinballMode(GAME_MODE);
	multiballMode = false;
	bonusAdvanceSwitches = 100;
	cellBlockSeq = 0;
	multiSeq = 0;
    2330:	f884 5538 	strb.w	r5, [r4, #1336]	; 0x538
}

void BigHouse::startNewGame() {
	//startNewGame();
	setPinballMode(GAME_MODE);
	multiballMode = false;
    2334:	f884 552c 	strb.w	r5, [r4, #1324]	; 0x52c
	bonusAdvanceSwitches = 100;
	cellBlockSeq = 0;
	multiSeq = 0;
	extraBallGiven = false;
	setSound(SND_MUSIC);
    2338:	689b      	ldr	r3, [r3, #8]
	setPinballMode(GAME_MODE);
	multiballMode = false;
	bonusAdvanceSwitches = 100;
	cellBlockSeq = 0;
	multiSeq = 0;
	extraBallGiven = false;
    233a:	f884 5532 	strb.w	r5, [r4, #1330]	; 0x532
	setSound(SND_MUSIC);
    233e:	4798      	blx	r3
	resetDropTargets();
    2340:	4620      	mov	r0, r4
    2342:	f7ff fa23 	bl	178c <BigHouse::resetDropTargets()>
	inline void setOnGameRelay(bool st) { setLamp(Q_RELAY_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    2346:	462b      	mov	r3, r5
    2348:	462a      	mov	r2, r5
//void BigHouse::onKeyPressed(UserKey butt) {
//	PinGame::onKeyPressed(butt);
//}

void BigHouse::resetCapturedBalls() {
	for (byte i = 0; i<3; i++) ballTrap[i] = false;
    234a:	f884 552d 	strb.w	r5, [r4, #1325]	; 0x52d
    234e:	f884 552e 	strb.w	r5, [r4, #1326]	; 0x52e
    2352:	210c      	movs	r1, #12
    2354:	f884 552f 	strb.w	r5, [r4, #1327]	; 0x52f
	capturedBalls = 0;
    2358:	f884 5530 	strb.w	r5, [r4, #1328]	; 0x530
    235c:	68a0      	ldr	r0, [r4, #8]
    235e:	f000 f9ef 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
    2362:	462b      	mov	r3, r5
    2364:	68a0      	ldr	r0, [r4, #8]
    2366:	2201      	movs	r2, #1
    2368:	210d      	movs	r1, #13
	setSound(SND_MUSIC);
	resetDropTargets();
	resetCapturedBalls();
	liftRamp(false);
	openGate(true);
}
    236a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    236e:	f000 b9e7 	b.w	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
    2372:	bf00      	nop

00002374 <BigHouse::onSwitchEvent(unsigned char, bool)>:
// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    2374:	10cb      	asrs	r3, r1, #3
    2376:	f001 0107 	and.w	r1, r1, #7
    237a:	eb03 0383 	add.w	r3, r3, r3, lsl #2

// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
    237e:	b570      	push	{r4, r5, r6, lr}
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    2380:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	switch (_state) {
    2384:	f890 551a 	ldrb.w	r5, [r0, #1306]	; 0x51a

// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
    2388:	4606      	mov	r6, r0
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    238a:	f001 04ff 	and.w	r4, r1, #255	; 0xff
	switch (_state) {
    238e:	b37d      	cbz	r5, 23f0 <BigHouse::onSwitchEvent(unsigned char, bool)+0x7c>
    2390:	2d01      	cmp	r5, #1
    2392:	d12c      	bne.n	23ee <BigHouse::onSwitchEvent(unsigned char, bool)+0x7a>
			setPinballMode(GAME_MODE);
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
    2394:	f8b0 3398 	ldrh.w	r3, [r0, #920]	; 0x398
    2398:	f8b0 253a 	ldrh.w	r2, [r0, #1338]	; 0x53a
    239c:	4293      	cmp	r3, r2
    239e:	d306      	bcc.n	23ae <BigHouse::onSwitchEvent(unsigned char, bool)+0x3a>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    23a0:	f890 1538 	ldrb.w	r1, [r0, #1336]	; 0x538
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
    23a4:	1a9b      	subs	r3, r3, r2
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    23a6:	2902      	cmp	r1, #2
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
    23a8:	f8a0 3398 	strh.w	r3, [r0, #920]	; 0x398
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    23ac:	d92f      	bls.n	240e <BigHouse::onSwitchEvent(unsigned char, bool)+0x9a>
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
    23ae:	f1a4 031a 	sub.w	r3, r4, #26
    23b2:	2b32      	cmp	r3, #50	; 0x32
    23b4:	d822      	bhi.n	23fc <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    23b6:	e8df f003 	tbb	[pc, r3]
    23ba:	2133      	.short	0x2133
    23bc:	3d382121 	.word	0x3d382121
    23c0:	215a554b 	.word	0x215a554b
    23c4:	21212121 	.word	0x21212121
    23c8:	55763d68 	.word	0x55763d68
    23cc:	218d845a 	.word	0x218d845a
    23d0:	3d682121 	.word	0x3d682121
    23d4:	a0925576 	.word	0xa0925576
    23d8:	212121a9 	.word	0x212121a9
    23dc:	b3763d68 	.word	0xb3763d68
    23e0:	2121a092 	.word	0x2121a092
    23e4:	3d682121 	.word	0x3d682121
    23e8:	8492b376 	.word	0x8492b376
    23ec:	ae          	.byte	0xae
    23ed:	00          	.byte	0x00
    23ee:	bd70      	pop	{r4, r5, r6, pc}
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_state) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
    23f0:	2c2f      	cmp	r4, #47	; 0x2f
    23f2:	d103      	bne.n	23fc <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    23f4:	b112      	cbz	r2, 23fc <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    23f6:	f890 337c 	ldrb.w	r3, [r0, #892]	; 0x37c
    23fa:	b903      	cbnz	r3, 23fe <BigHouse::onSwitchEvent(unsigned char, bool)+0x8a>
    23fc:	bd70      	pop	{r4, r5, r6, pc}
			credits--;
    23fe:	3b01      	subs	r3, #1
			setPinballMode(GAME_MODE);
    2400:	2101      	movs	r1, #1
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_state) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
			credits--;
    2402:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_state) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
			credits--;
			setPinballMode(GAME_MODE);
    240a:	f7ff bf2f 	b.w	226c <BigHouse::setPinballMode(pinballMode)>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    240e:	1c4b      	adds	r3, r1, #1
    2410:	f8d0 0584 	ldr.w	r0, [r0, #1412]	; 0x584
    2414:	462a      	mov	r2, r5
    2416:	f886 3538 	strb.w	r3, [r6, #1336]	; 0x538
    241a:	f001 fc83 	bl	3d24 <LightGroup::set(unsigned char, lightState)>
    241e:	e7c6      	b.n	23ae <BigHouse::onSwitchEvent(unsigned char, bool)+0x3a>
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
    2420:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
    2426:	f7ff bc9b 	b.w	1d60 <BigHouse::onBallOnChain()>
			DISPATCH1(onLeftRollover(), 30);
    242a:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    242c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
    2430:	f7ff bc20 	b.w	1c74 <BigHouse::onLeftRollover()>
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
    2434:	f1a4 011f 	sub.w	r1, r4, #31
    2438:	4b3b      	ldr	r3, [pc, #236]	; (2528 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    243a:	4630      	mov	r0, r6
    243c:	fb83 2301 	smull	r2, r3, r3, r1
    2440:	17c9      	asrs	r1, r1, #31
    2442:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
    244a:	b2c9      	uxtb	r1, r1
    244c:	f7ff ba9e 	b.w	198c <BigHouse::onBreakTarget(unsigned char)>
	special_ls->rotateRight();
	extraball_ls->rotateRight();
}

void BigHouse::onRubber() {
	addScore(30);
    2450:	4630      	mov	r0, r6
    2452:	211e      	movs	r1, #30
    2454:	f002 fb8a 	bl	4b6c <PinGame::addScore(unsigned long)>
	special_ls->rotateRight();
    2458:	f8d6 0574 	ldr.w	r0, [r6, #1396]	; 0x574
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    245c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	extraball_ls->rotateRight();
}

void BigHouse::onRubber() {
	addScore(30);
	special_ls->rotateRight();
    2460:	f001 bd6a 	b.w	3f38 <LightGroup::rotateRight()>
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
    2464:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
    246a:	f7ff bc61 	b.w	1d30 <BigHouse::onPopBumper()>
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
    246e:	f1a4 0122 	sub.w	r1, r4, #34	; 0x22
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
    2472:	4b2d      	ldr	r3, [pc, #180]	; (2528 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    2474:	4630      	mov	r0, r6
    2476:	fb83 2301 	smull	r2, r3, r3, r1
    247a:	17c9      	asrs	r1, r1, #31
    247c:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
    2484:	b2c9      	uxtb	r1, r1
    2486:	f7ff bac9 	b.w	1a1c <BigHouse::onCellTarget(unsigned char)>
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
    248a:	f1a4 0128 	sub.w	r1, r4, #40	; 0x28
    248e:	4b26      	ldr	r3, [pc, #152]	; (2528 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    2490:	4630      	mov	r0, r6
    2492:	fb83 2301 	smull	r2, r3, r3, r1
    2496:	17c9      	asrs	r1, r1, #31
    2498:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    249c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
    24a0:	b2c9      	uxtb	r1, r1
    24a2:	f7ff b9a7 	b.w	17f4 <BigHouse::onDropTarget(unsigned char)>
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
    24a6:	f1a4 012a 	sub.w	r1, r4, #42	; 0x2a
    24aa:	4b1f      	ldr	r3, [pc, #124]	; (2528 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    24ac:	4630      	mov	r0, r6
    24ae:	fb83 2301 	smull	r2, r3, r3, r1
    24b2:	17c9      	asrs	r1, r1, #31
    24b4:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    24b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
    24bc:	b2c9      	uxtb	r1, r1
    24be:	f7ff ba1d 	b.w	18fc <BigHouse::onJailTarget(unsigned char)>
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
    24c2:	f1b4 012d 	subs.w	r1, r4, #45	; 0x2d
    24c6:	4630      	mov	r0, r6
    24c8:	bf18      	it	ne
    24ca:	2101      	movne	r1, #1
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    24cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
    24d0:	f7ff bc0a 	b.w	1ce8 <BigHouse::onOutRollover(unsigned char)>
			DISPATCH1(onLeftKicker(), 46);
    24d4:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    24d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
    24da:	f7ff bb65 	b.w	1ba8 <BigHouse::onLeftKicker()>
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
    24de:	f1a4 0136 	sub.w	r1, r4, #54	; 0x36
    24e2:	4b11      	ldr	r3, [pc, #68]	; (2528 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    24e4:	4630      	mov	r0, r6
    24e6:	fb83 2301 	smull	r2, r3, r3, r1
    24ea:	17c9      	asrs	r1, r1, #31
    24ec:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    24f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
    24f4:	b2c9      	uxtb	r1, r1
    24f6:	f7ff baed 	b.w	1ad4 <BigHouse::onTopRollover(unsigned char)>
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
    24fa:	f1b4 0137 	subs.w	r1, r4, #55	; 0x37
    24fe:	4630      	mov	r0, r6
    2500:	bf18      	it	ne
    2502:	2101      	movne	r1, #1
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
    2508:	f7ff bbca 	b.w	1ca0 <BigHouse::onReturnRollover(unsigned char)>
			DISPATCH1(onRightKicker(), 56);
    250c:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    250e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
			DISPATCH1(onRightKicker(), 56);
    2512:	f7ff bb83 	b.w	1c1c <BigHouse::onRightKicker()>
			DISPATCH1(tilt(), 57);
			DISPATCH1(onOutHole(), 66);
			DISPATCH1(onTopHole(), 76);
    2516:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
			DISPATCH1(onRightKicker(), 56);
			DISPATCH1(tilt(), 57);
			DISPATCH1(onOutHole(), 66);
			DISPATCH1(onTopHole(), 76);
    251c:	f7ff bb8e 	b.w	1c3c <BigHouse::onTopHole()>
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
    2520:	f1a4 012b 	sub.w	r1, r4, #43	; 0x2b
    2524:	e7a5      	b.n	2472 <BigHouse::onSwitchEvent(unsigned char, bool)+0xfe>
    2526:	bf00      	nop
    2528:	66666667 	.word	0x66666667

0000252c <BigHouse::displayShowCycle(unsigned long&)>:

void BigHouse::stopDisplayShow() {
	dshow_tmr->disable();
}

void BigHouse::displayShowCycle(uint32_t& ms) {
    252c:	b570      	push	{r4, r5, r6, lr}
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
    252e:	f890 2540 	ldrb.w	r2, [r0, #1344]	; 0x540

void BigHouse::stopDisplayShow() {
	dshow_tmr->disable();
}

void BigHouse::displayShowCycle(uint32_t& ms) {
    2532:	b084      	sub	sp, #16
    2534:	4605      	mov	r5, r0
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
    2536:	b1fa      	cbz	r2, 2578 <BigHouse::displayShowCycle(unsigned long&)+0x4c>
		displayScoresAndCredits();
		dshow_tmr->setPeriod(1000u);
	}
	else if (displayShowStep == 3) {
    2538:	2a03      	cmp	r2, #3
    253a:	d028      	beq.n	258e <BigHouse::displayShowCycle(unsigned long&)+0x62>
		extDisplay->clear();
		extDisplay->setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
    253c:	d917      	bls.n	256e <BigHouse::displayShowCycle(unsigned long&)+0x42>
		if (displayShowStep == 4) 
    253e:	2a04      	cmp	r2, #4
    2540:	d04b      	beq.n	25da <BigHouse::displayShowCycle(unsigned long&)+0xae>
			extDisplay->setDynamicFX(0, F("*ARTISTI DELLA FUGA*"), DFX_type::RIGHT_INS);
		String st = getTopScoreStr(displayShowStep - 4);
    2542:	3a04      	subs	r2, #4
    2544:	4629      	mov	r1, r5
    2546:	4668      	mov	r0, sp
    2548:	b2d2      	uxtb	r2, r2
    254a:	f7ff fe2f 	bl	21ac <BigHouse::getTopScoreStr(unsigned char)>
		extDisplay->setDynamicFX(1, st , DFX_type::LEFT_INS);
    254e:	2305      	movs	r3, #5
    2550:	466a      	mov	r2, sp
    2552:	2101      	movs	r1, #1
    2554:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
    2558:	f001 f8fa 	bl	3750 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)>
		if (displayShowStep == 3 + TOP_SCORES) {
    255c:	f895 3540 	ldrb.w	r3, [r5, #1344]	; 0x540
    2560:	2b08      	cmp	r3, #8
    2562:	d033      	beq.n	25cc <BigHouse::displayShowCycle(unsigned long&)+0xa0>
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
		if (displayShowStep == 4) 
			extDisplay->setDynamicFX(0, F("*ARTISTI DELLA FUGA*"), DFX_type::RIGHT_INS);
		String st = getTopScoreStr(displayShowStep - 4);
    2564:	4668      	mov	r0, sp
    2566:	f009 ff09 	bl	c37c <String::~String()>
    256a:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
			return;
		}
	}
	displayShowStep++;
    256e:	3201      	adds	r2, #1
    2570:	f885 2540 	strb.w	r2, [r5, #1344]	; 0x540
}
    2574:	b004      	add	sp, #16
    2576:	bd70      	pop	{r4, r5, r6, pc}

void BigHouse::displayShowCycle(uint32_t& ms) {
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
		displayScoresAndCredits();
    2578:	f002 f938 	bl	47ec <PinGame::displayScoresAndCredits()>
		dshow_tmr->setPeriod(1000u);
    257c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2580:	f8d5 0558 	ldr.w	r0, [r5, #1368]	; 0x558
    2584:	f003 fc02 	bl	5d8c <TimerTask::setPeriod(unsigned long)>
    2588:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
    258c:	e7ef      	b.n	256e <BigHouse::displayShowCycle(unsigned long&)+0x42>
	}
	else if (displayShowStep == 3) {
		extDisplay->clear();
    258e:	f8d0 63a0 	ldr.w	r6, [r0, #928]	; 0x3a0
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	}

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    2592:	7f33      	ldrb	r3, [r6, #28]
    2594:	b15b      	cbz	r3, 25ae <BigHouse::displayShowCycle(unsigned long&)+0x82>
    2596:	2400      	movs	r4, #0
    2598:	4621      	mov	r1, r4
    259a:	3401      	adds	r4, #1
    259c:	4630      	mov	r0, r6
    259e:	f001 f963 	bl	3868 <ExtTextDisplay::clearLine(unsigned char)>
    25a2:	7f33      	ldrb	r3, [r6, #28]
    25a4:	b2e4      	uxtb	r4, r4
    25a6:	42a3      	cmp	r3, r4
    25a8:	d8f6      	bhi.n	2598 <BigHouse::displayShowCycle(unsigned long&)+0x6c>
    25aa:	f8d5 63a0 	ldr.w	r6, [r5, #928]	; 0x3a0
		bool blinking = false, bool clearBefore = false) {
		putText(line, (const char*)text, pos, blinking, clearBefore);
	}

	inline void setDynamicFX(byte line, const __FlashStringHelper* text, DFX_type effectId) {
		setDynamicFX(line, (const char*)text, effectId);
    25ae:	4a10      	ldr	r2, [pc, #64]	; (25f0 <BigHouse::displayShowCycle(unsigned long&)+0xc4>)
    25b0:	4630      	mov	r0, r6
    25b2:	2305      	movs	r3, #5
    25b4:	2100      	movs	r1, #0
    25b6:	f001 f8b7 	bl	3728 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>
		extDisplay->setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
    25ba:	f640 11c4 	movw	r1, #2500	; 0x9c4
    25be:	f8d5 0558 	ldr.w	r0, [r5, #1368]	; 0x558
    25c2:	f003 fbe3 	bl	5d8c <TimerTask::setPeriod(unsigned long)>
    25c6:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
    25ca:	e7d0      	b.n	256e <BigHouse::displayShowCycle(unsigned long&)+0x42>
		if (displayShowStep == 4) 
			extDisplay->setDynamicFX(0, F("*ARTISTI DELLA FUGA*"), DFX_type::RIGHT_INS);
		String st = getTopScoreStr(displayShowStep - 4);
		extDisplay->setDynamicFX(1, st , DFX_type::LEFT_INS);
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
    25cc:	2300      	movs	r3, #0
			return;
    25ce:	4668      	mov	r0, sp
		if (displayShowStep == 4) 
			extDisplay->setDynamicFX(0, F("*ARTISTI DELLA FUGA*"), DFX_type::RIGHT_INS);
		String st = getTopScoreStr(displayShowStep - 4);
		extDisplay->setDynamicFX(1, st , DFX_type::LEFT_INS);
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
    25d0:	f885 3540 	strb.w	r3, [r5, #1344]	; 0x540
			return;
    25d4:	f009 fed2 	bl	c37c <String::~String()>
    25d8:	e7cc      	b.n	2574 <BigHouse::displayShowCycle(unsigned long&)+0x48>
    25da:	4a06      	ldr	r2, [pc, #24]	; (25f4 <BigHouse::displayShowCycle(unsigned long&)+0xc8>)
    25dc:	2306      	movs	r3, #6
    25de:	2100      	movs	r1, #0
    25e0:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
    25e4:	f001 f8a0 	bl	3728 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>
    25e8:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
    25ec:	e7a9      	b.n	2542 <BigHouse::displayShowCycle(unsigned long&)+0x16>
    25ee:	bf00      	nop
    25f0:	20000a90 	.word	0x20000a90
    25f4:	20000aa8 	.word	0x20000aa8

000025f8 <BigHouse::timerRoutine(int, unsigned long&)>:
	return ballReady;
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
    25f8:	f8d0 355c 	ldr.w	r3, [r0, #1372]	; 0x55c
    25fc:	428b      	cmp	r3, r1
    25fe:	d01b      	beq.n	2638 <BigHouse::timerRoutine(int, unsigned long&)+0x40>
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
    2600:	f8d0 3560 	ldr.w	r3, [r0, #1376]	; 0x560
    2604:	4299      	cmp	r1, r3
	if (ballReady) act.ballRelease.set(true);
	brel_tmr->enable();
	return ballReady;
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
    2606:	b410      	push	{r4}
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
    2608:	d019      	beq.n	263e <BigHouse::timerRoutine(int, unsigned long&)+0x46>
		//msg->outln(F("* light show timer"));
		lightShowCycle(ms);
		return;
		}
	if (taskId == ballRelease_tt) {
    260a:	f8d0 3564 	ldr.w	r3, [r0, #1380]	; 0x564
    260e:	4299      	cmp	r1, r3
    2610:	d01a      	beq.n	2648 <BigHouse::timerRoutine(int, unsigned long&)+0x50>
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
    2612:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
    2616:	4299      	cmp	r1, r3
    2618:	d009      	beq.n	262e <BigHouse::timerRoutine(int, unsigned long&)+0x36>
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
    261a:	f8d0 2520 	ldr.w	r2, [r0, #1312]	; 0x520
    261e:	4b0e      	ldr	r3, [pc, #56]	; (2658 <BigHouse::timerRoutine(int, unsigned long&)+0x60>)
    2620:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    2624:	490d      	ldr	r1, [pc, #52]	; (265c <BigHouse::timerRoutine(int, unsigned long&)+0x64>)
}
    2626:	f85d 4b04 	ldr.w	r4, [sp], #4
	}
	if (taskId == display_tt) {
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
    262a:	f004 b9a1 	b.w	6970 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
		displayShowCycle(ms);
    262e:	4611      	mov	r1, r2
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}
    2630:	f85d 4b04 	ldr.w	r4, [sp], #4
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
		displayShowCycle(ms);
    2634:	f7ff bf7a 	b.w	252c <BigHouse::displayShowCycle(unsigned long&)>
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
		dropTimerRoutine(ms);
    2638:	4611      	mov	r1, r2
    263a:	f7ff bba1 	b.w	1d80 <BigHouse::dropTimerRoutine(unsigned long&)>
		return;
	};
	if (taskId == lightShow_tt) {
		//msg->outln(F("* light show timer"));
		lightShowCycle(ms);
    263e:	4611      	mov	r1, r2
	if (taskId == display_tt) {
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}
    2640:	f85d 4b04 	ldr.w	r4, [sp], #4
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
		//msg->outln(F("* light show timer"));
		lightShowCycle(ms);
    2644:	f7ff bca2 	b.w	1f8c <BigHouse::lightShowCycle(unsigned long&)>
		return;
		}
	if (taskId == ballRelease_tt) {
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
    2648:	f500 6058 	add.w	r0, r0, #3456	; 0xd80
    264c:	2100      	movs	r1, #0
	if (taskId == display_tt) {
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}
    264e:	f85d 4b04 	ldr.w	r4, [sp], #4
		lightShowCycle(ms);
		return;
		}
	if (taskId == ballRelease_tt) {
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
    2652:	f003 b8b1 	b.w	57b8 <Sys80b_Actuator::set(bool)>
    2656:	bf00      	nop
    2658:	20000ac0 	.word	0x20000ac0
    265c:	20000ad0 	.word	0x20000ad0

00002660 <non-virtual thunk to BigHouse::timerRoutine(int, unsigned long&)>:
	int getGameNumber();
	String getTopScoreStr(byte n);
	bool releaseBall();
	void setSound(byte n);
	//void snd16Update(uint32_t& t);
	void timerRoutine(int taskIdentifer, uint32_t& ms);
    2660:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    2664:	f7ff bfc8 	b.w	25f8 <BigHouse::timerRoutine(int, unsigned long&)>

00002668 <BigHouse::setSound(unsigned char)>:

inline int BigHouse::getGameNumber() {
	return GAME_NUMBER;
}

void BigHouse::setSound(byte snd) {
    2668:	b570      	push	{r4, r5, r6, lr}
    266a:	460e      	mov	r6, r1
    266c:	4605      	mov	r5, r0
    266e:	2301      	movs	r3, #1
    2670:	2104      	movs	r1, #4
	setLamp(SND16_LMP, (snd & 0x10) == 0, true); // light #4 sound16 update (active low)
    2672:	f086 0410 	eor.w	r4, r6, #16
    2676:	6880      	ldr	r0, [r0, #8]
    2678:	f3c4 1400 	ubfx	r4, r4, #4, #1
    267c:	4622      	mov	r2, r4
    267e:	f000 f85f 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
    2682:	4a08      	ldr	r2, [pc, #32]	; (26a4 <BigHouse::setSound(unsigned char)+0x3c>)
	Serial.printf("%d: sound16: %d\n", millis(), ((snd & 0x10) == 0) ? 1 : 0);
    2684:	4623      	mov	r3, r4
    2686:	4908      	ldr	r1, [pc, #32]	; (26a8 <BigHouse::setSound(unsigned char)+0x40>)
    2688:	6812      	ldr	r2, [r2, #0]
    268a:	4808      	ldr	r0, [pc, #32]	; (26ac <BigHouse::setSound(unsigned char)+0x44>)
    268c:	f009 fdc8 	bl	c220 <Print::printf(char const*, ...)>
	inline byte getChangedSwitchState() { return switchGrid.getLastChangedSwitchState(); }
	inline byte getCurrentReturns() { return _returnsInput; }
	void feedDisplay();
	bool renderNextLampsGroup();
	bool renderLampsGroup(byte lg);
	bool renderLamp(byte l) { return renderLampsGroup(l >> 2); }
    2690:	4628      	mov	r0, r5
    2692:	2101      	movs	r1, #1
    2694:	f002 ff58 	bl	5548 <Sys80b::renderLampsGroup(unsigned char)>
	renderLamp(SND16_LMP); // immediate update
	Sys80b::setSound(snd);
    2698:	4631      	mov	r1, r6
    269a:	4628      	mov	r0, r5
}
    269c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void BigHouse::setSound(byte snd) {
	setLamp(SND16_LMP, (snd & 0x10) == 0, true); // light #4 sound16 update (active low)
	Serial.printf("%d: sound16: %d\n", millis(), ((snd & 0x10) == 0) ? 1 : 0);
	renderLamp(SND16_LMP); // immediate update
	Sys80b::setSound(snd);
    26a0:	f002 bcfe 	b.w	50a0 <Sys80b::setSound(unsigned char)>
    26a4:	20002d58 	.word	0x20002d58
    26a8:	20000ae0 	.word	0x20000ae0
    26ac:	20001fdc 	.word	0x20001fdc

000026b0 <BitMappedSet::~BitMappedSet()>:
	_change = new byte[_arraySize];
	_protection = new byte[_arraySize];
	reset();
}

BitMappedSet::~BitMappedSet() {
    26b0:	b510      	push	{r4, lr}
    26b2:	4604      	mov	r4, r0
	delete[] _state;
    26b4:	6800      	ldr	r0, [r0, #0]
    26b6:	b108      	cbz	r0, 26bc <BitMappedSet::~BitMappedSet()+0xc>
    26b8:	f009 fd5a 	bl	c170 <operator delete[](void*)>
	delete[] _change;
    26bc:	68a0      	ldr	r0, [r4, #8]
    26be:	b108      	cbz	r0, 26c4 <BitMappedSet::~BitMappedSet()+0x14>
    26c0:	f009 fd56 	bl	c170 <operator delete[](void*)>
	delete[] _protection;
    26c4:	6860      	ldr	r0, [r4, #4]
    26c6:	b108      	cbz	r0, 26cc <BitMappedSet::~BitMappedSet()+0x1c>
    26c8:	f009 fd52 	bl	c170 <operator delete[](void*)>
}
    26cc:	4620      	mov	r0, r4
    26ce:	bd10      	pop	{r4, pc}

000026d0 <BitMappedSet::reset()>:

void BitMappedSet::reset() {
    26d0:	b510      	push	{r4, lr}
    26d2:	4604      	mov	r4, r0
	//Serial.println("BitMappedSet reset...");
	delay(100);
    26d4:	2064      	movs	r0, #100	; 0x64
    26d6:	f008 f89d 	bl	a814 <delay>
	for (uint16_t i = 0; i < _arraySize; i++) {
    26da:	7ba3      	ldrb	r3, [r4, #14]
    26dc:	b163      	cbz	r3, 26f8 <BitMappedSet::reset()+0x28>
    26de:	2300      	movs	r3, #0
		_state[i] = 0;
    26e0:	461a      	mov	r2, r3
    26e2:	6820      	ldr	r0, [r4, #0]
}

void BitMappedSet::reset() {
	//Serial.println("BitMappedSet reset...");
	delay(100);
	for (uint16_t i = 0; i < _arraySize; i++) {
    26e4:	1c59      	adds	r1, r3, #1
		_state[i] = 0;
    26e6:	54c2      	strb	r2, [r0, r3]
		_change[i] = 0;
    26e8:	68a0      	ldr	r0, [r4, #8]
    26ea:	54c2      	strb	r2, [r0, r3]
		_protection[i] = 0;
    26ec:	6860      	ldr	r0, [r4, #4]
    26ee:	54c2      	strb	r2, [r0, r3]
}

void BitMappedSet::reset() {
	//Serial.println("BitMappedSet reset...");
	delay(100);
	for (uint16_t i = 0; i < _arraySize; i++) {
    26f0:	b28b      	uxth	r3, r1
    26f2:	7ba1      	ldrb	r1, [r4, #14]
    26f4:	4299      	cmp	r1, r3
    26f6:	d8f4      	bhi.n	26e2 <BitMappedSet::reset()+0x12>
    26f8:	bd10      	pop	{r4, pc}
    26fa:	bf00      	nop

000026fc <BitMappedSet::BitMappedSet(unsigned short)>:

BitMappedSet::BitMappedSet() {
	BitMappedSet(32u);
}

BitMappedSet::BitMappedSet(uint16_t size) {
    26fc:	b538      	push	{r3, r4, r5, lr}
    26fe:	460d      	mov	r5, r1
    2700:	4604      	mov	r4, r0
	//Serial.println("BitMappedSet(n) init...");
	delay(100);
    2702:	2064      	movs	r0, #100	; 0x64
    2704:	f008 f886 	bl	a814 <delay>
    2708:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    270c:	4629      	mov	r1, r5
    270e:	bf28      	it	cs
    2710:	f44f 6180 	movcs.w	r1, #1024	; 0x400
	if (size > MAX_SIZE) size = MAX_SIZE;
	_size = size;
	_arraySize = (byte)(((size - 1) >> 3) + 1);
    2714:	1e48      	subs	r0, r1, #1

BitMappedSet::BitMappedSet(uint16_t size) {
	//Serial.println("BitMappedSet(n) init...");
	delay(100);
	if (size > MAX_SIZE) size = MAX_SIZE;
	_size = size;
    2716:	81a1      	strh	r1, [r4, #12]
	_arraySize = (byte)(((size - 1) >> 3) + 1);
    2718:	10c0      	asrs	r0, r0, #3
    271a:	3001      	adds	r0, #1
    271c:	b2c0      	uxtb	r0, r0
    271e:	73a0      	strb	r0, [r4, #14]
	//Serial.print("BitMappedSet(");
	//Serial.println(size);
	//Serial.println("): array size : ");
	//Serial.println(_arraySize);
	_state = new byte[_arraySize];
    2720:	f009 fd24 	bl	c16c <operator new[](unsigned int)>
    2724:	6020      	str	r0, [r4, #0]
	_change = new byte[_arraySize];
    2726:	7ba0      	ldrb	r0, [r4, #14]
    2728:	f009 fd20 	bl	c16c <operator new[](unsigned int)>
    272c:	60a0      	str	r0, [r4, #8]
	_protection = new byte[_arraySize];
    272e:	7ba0      	ldrb	r0, [r4, #14]
    2730:	f009 fd1c 	bl	c16c <operator new[](unsigned int)>
    2734:	6060      	str	r0, [r4, #4]
	reset();
    2736:	4620      	mov	r0, r4
    2738:	f7ff ffca 	bl	26d0 <BitMappedSet::reset()>
}
    273c:	4620      	mov	r0, r4
    273e:	bd38      	pop	{r3, r4, r5, pc}

00002740 <BitMappedSet::setState(unsigned short, bool, bool)>:
		_protection[i] = 0;
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
    2740:	b470      	push	{r4, r5, r6}
	if (n >= _size) return false;
    2742:	8984      	ldrh	r4, [r0, #12]
    2744:	428c      	cmp	r4, r1
    2746:	d90c      	bls.n	2762 <BitMappedSet::setState(unsigned short, bool, bool)+0x22>
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
    2748:	f001 0507 	and.w	r5, r1, #7
    274c:	2401      	movs	r4, #1
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
    274e:	10c9      	asrs	r1, r1, #3
	byte bitVal = (byte)1 << (n & 7);
    2750:	40ac      	lsls	r4, r5
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    2752:	b289      	uxth	r1, r1

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
    2754:	b2e5      	uxtb	r5, r4
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    2756:	b143      	cbz	r3, 276a <BitMappedSet::setState(unsigned short, bool, bool)+0x2a>
	if (state) {
    2758:	b16a      	cbz	r2, 2776 <BitMappedSet::setState(unsigned short, bool, bool)+0x36>
		if ((_state[byteNum] & bitVal) == 0) {
    275a:	6804      	ldr	r4, [r0, #0]
    275c:	5c63      	ldrb	r3, [r4, r1]
    275e:	421d      	tst	r5, r3
    2760:	d018      	beq.n	2794 <BitMappedSet::setState(unsigned short, bool, bool)+0x54>
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
    2762:	2300      	movs	r3, #0
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	return false;
}
    2764:	4618      	mov	r0, r3
    2766:	bc70      	pop	{r4, r5, r6}
    2768:	4770      	bx	lr
// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    276a:	6846      	ldr	r6, [r0, #4]
    276c:	5c76      	ldrb	r6, [r6, r1]
    276e:	4235      	tst	r5, r6
    2770:	d1f8      	bne.n	2764 <BitMappedSet::setState(unsigned short, bool, bool)+0x24>
	if (state) {
    2772:	2a00      	cmp	r2, #0
    2774:	d1f1      	bne.n	275a <BitMappedSet::setState(unsigned short, bool, bool)+0x1a>
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	else {
		if ((_state[byteNum] & bitVal) > 0) {
    2776:	6806      	ldr	r6, [r0, #0]
    2778:	5c73      	ldrb	r3, [r6, r1]
    277a:	421d      	tst	r5, r3
    277c:	d015      	beq.n	27aa <BitMappedSet::setState(unsigned short, bool, bool)+0x6a>
			_state[byteNum] &= ~bitVal;
    277e:	ea23 0404 	bic.w	r4, r3, r4
			_change[byteNum] |= bitVal;
			return true;
    2782:	2301      	movs	r3, #1
			return true;
		}
	}
	else {
		if ((_state[byteNum] & bitVal) > 0) {
			_state[byteNum] &= ~bitVal;
    2784:	5474      	strb	r4, [r6, r1]
			_change[byteNum] |= bitVal;
    2786:	6880      	ldr	r0, [r0, #8]
    2788:	5c42      	ldrb	r2, [r0, r1]
    278a:	4315      	orrs	r5, r2
    278c:	5445      	strb	r5, [r0, r1]
			return true;
		}
	}
	return false;
}
    278e:	4618      	mov	r0, r3
    2790:	bc70      	pop	{r4, r5, r6}
    2792:	4770      	bx	lr
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
	if (state) {
		if ((_state[byteNum] & bitVal) == 0) {
			_state[byteNum] |= bitVal;
    2794:	ea45 0203 	orr.w	r2, r5, r3
			_change[byteNum] |= bitVal;
			return true;
    2798:	2301      	movs	r3, #1
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
	if (state) {
		if ((_state[byteNum] & bitVal) == 0) {
			_state[byteNum] |= bitVal;
    279a:	5462      	strb	r2, [r4, r1]
			_change[byteNum] |= bitVal;
    279c:	6880      	ldr	r0, [r0, #8]
    279e:	5c42      	ldrb	r2, [r0, r1]
    27a0:	4315      	orrs	r5, r2
    27a2:	5445      	strb	r5, [r0, r1]
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	return false;
}
    27a4:	4618      	mov	r0, r3
    27a6:	bc70      	pop	{r4, r5, r6}
    27a8:	4770      	bx	lr
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
    27aa:	4613      	mov	r3, r2
    27ac:	e7da      	b.n	2764 <BitMappedSet::setState(unsigned short, bool, bool)+0x24>
    27ae:	bf00      	nop

000027b0 <BitMappedSet::setProtection(unsigned short, bool)>:
	}
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
    27b0:	8983      	ldrh	r3, [r0, #12]
    27b2:	428b      	cmp	r3, r1
    27b4:	d90e      	bls.n	27d4 <BitMappedSet::setProtection(unsigned short, bool)+0x24>
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
    27b6:	2301      	movs	r3, #1
		}
	}
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
    27b8:	b410      	push	{r4}
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
    27ba:	f001 0407 	and.w	r4, r1, #7
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
    27be:	10c9      	asrs	r1, r1, #3
	byte bitVal = (byte)1 << (n & 7u);
    27c0:	40a3      	lsls	r3, r4
	if (protection) _protection[byteNum] |= bitVal;
    27c2:	b289      	uxth	r1, r1
    27c4:	b93a      	cbnz	r2, 27d6 <BitMappedSet::setProtection(unsigned short, bool)+0x26>
	else _protection[byteNum] &= ~bitVal;
    27c6:	6840      	ldr	r0, [r0, #4]
    27c8:	5c42      	ldrb	r2, [r0, r1]
    27ca:	ea22 0303 	bic.w	r3, r2, r3
    27ce:	5443      	strb	r3, [r0, r1]
}
    27d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    27d4:	4770      	bx	lr

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
	if (protection) _protection[byteNum] |= bitVal;
    27d6:	6842      	ldr	r2, [r0, #4]
    27d8:	5c50      	ldrb	r0, [r2, r1]
    27da:	4303      	orrs	r3, r0
    27dc:	5453      	strb	r3, [r2, r1]
    27de:	e7f7      	b.n	27d0 <BitMappedSet::setProtection(unsigned short, bool)+0x20>

000027e0 <BitMappedSet::getStates4(unsigned short)>:
	_change[byteNum] &= ~bitVal;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    27e0:	7b82      	ldrb	r2, [r0, #14]
	byte bitVal = (byte)1 << (n & 7u);
	_change[byteNum] &= ~bitVal;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    27e2:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return 0;
    27e4:	429a      	cmp	r2, r3
    27e6:	d907      	bls.n	27f8 <BitMappedSet::getStates4(unsigned short)+0x18>
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
    27e8:	6802      	ldr	r2, [r0, #0]
    27ea:	5cd0      	ldrb	r0, [r2, r3]
    27ec:	07cb      	lsls	r3, r1, #31
    27ee:	bf54      	ite	pl
    27f0:	f000 000f 	andpl.w	r0, r0, #15
    27f4:	0900      	lsrmi	r0, r0, #4
    27f6:	4770      	bx	lr
	_change[byteNum] &= ~bitVal;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    27f8:	2000      	movs	r0, #0
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
}
    27fa:	4770      	bx	lr

000027fc <BitMappedSet::getStates8(unsigned short)>:

byte BitMappedSet::getStates8(uint16_t group) {
	if (group >= _arraySize) return 0;
    27fc:	7b83      	ldrb	r3, [r0, #14]
    27fe:	428b      	cmp	r3, r1
    2800:	d902      	bls.n	2808 <BitMappedSet::getStates8(unsigned short)+0xc>
	return _state[group];
    2802:	6803      	ldr	r3, [r0, #0]
    2804:	5c58      	ldrb	r0, [r3, r1]
    2806:	4770      	bx	lr
	if (byteNum >= _arraySize) return 0;
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
}

byte BitMappedSet::getStates8(uint16_t group) {
	if (group >= _arraySize) return 0;
    2808:	2000      	movs	r0, #0
	return _state[group];
}
    280a:	4770      	bx	lr

0000280c <BitMappedSet::getChanges4(unsigned short)>:

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    280c:	7b82      	ldrb	r2, [r0, #14]
	if (group >= _arraySize) return 0;
	return _state[group];
}

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    280e:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return 0;
    2810:	429a      	cmp	r2, r3
    2812:	d907      	bls.n	2824 <BitMappedSet::getChanges4(unsigned short)+0x18>
	return ((group & 1u) == 0) ? _change[byteNum] & 0x0f : (_change[byteNum] & 0xf0) >> 4;
    2814:	6882      	ldr	r2, [r0, #8]
    2816:	5cd0      	ldrb	r0, [r2, r3]
    2818:	07cb      	lsls	r3, r1, #31
    281a:	bf54      	ite	pl
    281c:	f000 000f 	andpl.w	r0, r0, #15
    2820:	0900      	lsrmi	r0, r0, #4
    2822:	4770      	bx	lr
	return _state[group];
}

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    2824:	2000      	movs	r0, #0
	return ((group & 1u) == 0) ? _change[byteNum] & 0x0f : (_change[byteNum] & 0xf0) >> 4;
}
    2826:	4770      	bx	lr

00002828 <BitMappedSet::clearChanges4(unsigned short)>:
	return _change[group];
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return;
    2828:	7b82      	ldrb	r2, [r0, #14]
	if (group >= _arraySize) return 0;
	return _change[group];
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    282a:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return;
    282c:	429a      	cmp	r2, r3
    282e:	d907      	bls.n	2840 <BitMappedSet::clearChanges4(unsigned short)+0x18>
	if ((group & 1u) == 0) _change[byteNum] &= 0xf0;
    2830:	f011 0f01 	tst.w	r1, #1
    2834:	6881      	ldr	r1, [r0, #8]
    2836:	5cca      	ldrb	r2, [r1, r3]
    2838:	d003      	beq.n	2842 <BitMappedSet::clearChanges4(unsigned short)+0x1a>
	else _change[byteNum] &= 0x0f;
    283a:	f002 020f 	and.w	r2, r2, #15
    283e:	54ca      	strb	r2, [r1, r3]
    2840:	4770      	bx	lr
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return;
	if ((group & 1u) == 0) _change[byteNum] &= 0xf0;
    2842:	f022 020f 	bic.w	r2, r2, #15
    2846:	54ca      	strb	r2, [r1, r3]
    2848:	4770      	bx	lr
    284a:	bf00      	nop

0000284c <CmdExecutor::_getParts(String&)>:
		Serial.println("'!");
	}
	return ok;
}

void CmdExecutor::_getParts(String& cmd) {
    284c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int i0, i1, len;
	i0 = 0;
	i1 = 0;
	
	//firstArgIdx = 0;
	_partsCount = 0;
    2850:	2500      	movs	r5, #0
		Serial.println("'!");
	}
	return ok;
}

void CmdExecutor::_getParts(String& cmd) {
    2852:	b085      	sub	sp, #20
	int i0, i1, len;
	i0 = 0;
	i1 = 0;
	
	//firstArgIdx = 0;
	_partsCount = 0;
    2854:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    2858:	f8d1 8008 	ldr.w	r8, [r1, #8]
	len = cmd.length();
	if (len == 0) return;
    285c:	f1b8 0f00 	cmp.w	r8, #0
    2860:	d039      	beq.n	28d6 <CmdExecutor::_getParts(String&)+0x8a>
    2862:	460f      	mov	r7, r1
    2864:	4606      	mov	r6, r0
    2866:	462c      	mov	r4, r5
    2868:	e002      	b.n	2870 <CmdExecutor::_getParts(String&)+0x24>
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) < 32) cmd.setCharAt(i0, 32);
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) == ',') cmd.setCharAt(i0, 32);
	for (_partsCount = 0; _partsCount < MAX_PARTS; _partsCount++) {
		while (cmd.charAt(i0) <= 32 && i0 < len) i0++; // search 1st non-space char
    286a:	4544      	cmp	r4, r8
    286c:	da06      	bge.n	287c <CmdExecutor::_getParts(String&)+0x30>
    286e:	3401      	adds	r4, #1
    2870:	4621      	mov	r1, r4
    2872:	4638      	mov	r0, r7
    2874:	f009 ff22 	bl	c6bc <String::charAt(unsigned int) const>
    2878:	2820      	cmp	r0, #32
    287a:	d9f6      	bls.n	286a <CmdExecutor::_getParts(String&)+0x1e>
		if (i0 == len) break;
    287c:	4544      	cmp	r4, r8
    287e:	d02d      	beq.n	28dc <CmdExecutor::_getParts(String&)+0x90>
    2880:	4625      	mov	r5, r4
    2882:	e002      	b.n	288a <CmdExecutor::_getParts(String&)+0x3e>
		i1 = i0;
		while (cmd.charAt(i1) > 32 && i1 < len) i1++; // search 1st space char
    2884:	4545      	cmp	r5, r8
    2886:	da06      	bge.n	2896 <CmdExecutor::_getParts(String&)+0x4a>
    2888:	3501      	adds	r5, #1
    288a:	4629      	mov	r1, r5
    288c:	4638      	mov	r0, r7
    288e:	f009 ff15 	bl	c6bc <String::charAt(unsigned int) const>
    2892:	2820      	cmp	r0, #32
    2894:	d8f6      	bhi.n	2884 <CmdExecutor::_getParts(String&)+0x38>
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
    2896:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
    289a:	462b      	mov	r3, r5
    289c:	4622      	mov	r2, r4
    289e:	4639      	mov	r1, r7
    28a0:	eb06 1900 	add.w	r9, r6, r0, lsl #4
    28a4:	4668      	mov	r0, sp
    28a6:	f009 ff41 	bl	c72c <String::substring(unsigned int, unsigned int) const>
    28aa:	4668      	mov	r0, sp
    28ac:	f109 094c 	add.w	r9, r9, #76	; 0x4c
    28b0:	f009 ff68 	bl	c784 <String::toLowerCase()>
    28b4:	4601      	mov	r1, r0
    28b6:	4648      	mov	r0, r9
    28b8:	f009 fe3e 	bl	c538 <String::operator=(String const&)>
    28bc:	4668      	mov	r0, sp
    28be:	f009 fd5d 	bl	c37c <String::~String()>
		_cmdPartIdx[_partsCount] = i0;
    28c2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
    28c6:	18f2      	adds	r2, r6, r3
	_partsCount = 0;
	len = cmd.length();
	if (len == 0) return;
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) < 32) cmd.setCharAt(i0, 32);
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) == ',') cmd.setCharAt(i0, 32);
	for (_partsCount = 0; _partsCount < MAX_PARTS; _partsCount++) {
    28c8:	3301      	adds	r3, #1
    28ca:	2b03      	cmp	r3, #3
		while (cmd.charAt(i0) <= 32 && i0 < len) i0++; // search 1st non-space char
		if (i0 == len) break;
		i1 = i0;
		while (cmd.charAt(i1) > 32 && i1 < len) i1++; // search 1st space char
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
		_cmdPartIdx[_partsCount] = i0;
    28cc:	f882 408c 	strb.w	r4, [r2, #140]	; 0x8c
	_partsCount = 0;
	len = cmd.length();
	if (len == 0) return;
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) < 32) cmd.setCharAt(i0, 32);
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) == ',') cmd.setCharAt(i0, 32);
	for (_partsCount = 0; _partsCount < MAX_PARTS; _partsCount++) {
    28d0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
    28d4:	ddc7      	ble.n	2866 <CmdExecutor::_getParts(String&)+0x1a>
	}
	for (i1 = _partsCount; i1 < MAX_PARTS; i1++) {
		_cmdPartStr[i1] = "";
		_cmdPartIdx[i1] = i0;
	}
}
    28d6:	b005      	add	sp, #20
    28d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
		_cmdPartIdx[_partsCount] = i0;
		//if (_partsCount == 1) firstArgIdx = i0;
		i0 = i1;
	}
	for (i1 = _partsCount; i1 < MAX_PARTS; i1++) {
    28dc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
    28e0:	2b03      	cmp	r3, #3
    28e2:	dcf8      	bgt.n	28d6 <CmdExecutor::_getParts(String&)+0x8a>
    28e4:	eb06 1503 	add.w	r5, r6, r3, lsl #4
    28e8:	338c      	adds	r3, #140	; 0x8c
    28ea:	f106 0790 	add.w	r7, r6, #144	; 0x90
    28ee:	b2e4      	uxtb	r4, r4
    28f0:	354c      	adds	r5, #76	; 0x4c
    28f2:	441e      	add	r6, r3
		_cmdPartStr[i1] = "";
    28f4:	4628      	mov	r0, r5
    28f6:	4906      	ldr	r1, [pc, #24]	; (2910 <CmdExecutor::_getParts(String&)+0xc4>)
    28f8:	f009 fe2e 	bl	c558 <String::operator=(char const*)>
		_cmdPartIdx[i1] = i0;
    28fc:	f806 4b01 	strb.w	r4, [r6], #1
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
		_cmdPartIdx[_partsCount] = i0;
		//if (_partsCount == 1) firstArgIdx = i0;
		i0 = i1;
	}
	for (i1 = _partsCount; i1 < MAX_PARTS; i1++) {
    2900:	42be      	cmp	r6, r7
    2902:	f105 0510 	add.w	r5, r5, #16
    2906:	d1f5      	bne.n	28f4 <CmdExecutor::_getParts(String&)+0xa8>
		_cmdPartStr[i1] = "";
		_cmdPartIdx[i1] = i0;
	}
}
    2908:	b005      	add	sp, #20
    290a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    290e:	bf00      	nop
    2910:	20000af0 	.word	0x20000af0

00002914 <CmdExecutor::execCmd(String)>:

#include <MemoryFree.h>
#include "Board_Sys80b.h"
#include "PinGame.h"

bool CmdExecutor::execCmd(String command) {
    2914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2918:	b08a      	sub	sp, #40	; 0x28
    291a:	460e      	mov	r6, r1
    291c:	4604      	mov	r4, r0
	String s;
    291e:	2100      	movs	r1, #0
    2920:	a802      	add	r0, sp, #8
    2922:	f009 fd6b 	bl	c3fc <String::String(char const*)>
    2926:	68b3      	ldr	r3, [r6, #8]

	unsigned int len = command.length();
	if (len == 0) return false;
    2928:	b18b      	cbz	r3, 294e <CmdExecutor::execCmd(String)+0x3a>
	if (_hw == nullptr || _sys == nullptr) {
    292a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    292c:	2a00      	cmp	r2, #0
    292e:	f000 825b 	beq.w	2de8 <CmdExecutor::execCmd(String)+0x4d4>
    2932:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2934:	2a00      	cmp	r2, #0
    2936:	f000 8257 	beq.w	2de8 <CmdExecutor::execCmd(String)+0x4d4>
		Serial.print(F("execCmd(..): WARNING: neither system or board undefined!"));
		return false;
	}
	if (len > MAX_LENGTH) command = command.substring(0, MAX_LENGTH-1);
    293a:	2b80      	cmp	r3, #128	; 0x80
    293c:	f200 80f7 	bhi.w	2b2e <CmdExecutor::execCmd(String)+0x21a>
	_getParts(command);
    2940:	4631      	mov	r1, r6
    2942:	4620      	mov	r0, r4
    2944:	f7ff ff82 	bl	284c <CmdExecutor::_getParts(String&)>
	//	Serial.print(_cmdPart[i]);
	//	Serial.println("'");
	//}
	//if (_partsCount > 0) Serial.println("---");

	if (_partsCount == 0) return false;
    2948:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    294c:	b93b      	cbnz	r3, 295e <CmdExecutor::execCmd(String)+0x4a>

	unsigned int len = command.length();
	if (len == 0) return false;
	if (_hw == nullptr || _sys == nullptr) {
		Serial.print(F("execCmd(..): WARNING: neither system or board undefined!"));
		return false;
    294e:	2500      	movs	r5, #0
#include <MemoryFree.h>
#include "Board_Sys80b.h"
#include "PinGame.h"

bool CmdExecutor::execCmd(String command) {
	String s;
    2950:	a802      	add	r0, sp, #8
    2952:	f009 fd13 	bl	c37c <String::~String()>
		Serial.print(F("* Unknown or incorrect command: '"));
		Serial.print(cmd);
		Serial.println("'!");
	}
	return ok;
}
    2956:	4628      	mov	r0, r5
    2958:	b00a      	add	sp, #40	; 0x28
    295a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	//	Serial.println("'");
	//}
	//if (_partsCount > 0) Serial.println("---");

	if (_partsCount == 0) return false;
	String& cmd = _cmdPartStr[0];
    295e:	f104 084c 	add.w	r8, r4, #76	; 0x4c
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
    2962:	6821      	ldr	r1, [r4, #0]
    2964:	4640      	mov	r0, r8
    2966:	f009 fe93 	bl	c690 <String::equals(char const*) const>
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;

	if (cmd == soundCmd) {
    296a:	2800      	cmp	r0, #0
    296c:	f040 80f6 	bne.w	2b5c <CmdExecutor::execCmd(String)+0x248>

	if (_partsCount == 0) return false;
	String& cmd = _cmdPartStr[0];
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;
    2970:	4605      	mov	r5, r0
    2972:	6861      	ldr	r1, [r4, #4]
    2974:	4640      	mov	r0, r8
    2976:	f009 fe8b 	bl	c690 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt() & 0x1f;
			_sys->setSound(arg2);
		}
		ok = true;
	}
	if (cmd == solenoidCmd) {
    297a:	2800      	cmp	r0, #0
    297c:	f040 8314 	bne.w	2fa8 <CmdExecutor::execCmd(String)+0x694>
    2980:	68a1      	ldr	r1, [r4, #8]
    2982:	4640      	mov	r0, r8
    2984:	f009 fe84 	bl	c690 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt();
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
    2988:	2800      	cmp	r0, #0
    298a:	f040 82f1 	bne.w	2f70 <CmdExecutor::execCmd(String)+0x65c>
    298e:	68e1      	ldr	r1, [r4, #12]
    2990:	4640      	mov	r0, r8
    2992:	f009 fe7d 	bl	c690 <String::equals(char const*) const>
			arg3 = _cmdPartStr[3].toInt();
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
	}
	if (cmd == lampCmd) {
    2996:	2800      	cmp	r0, #0
    2998:	f040 8349 	bne.w	302e <CmdExecutor::execCmd(String)+0x71a>
    299c:	6921      	ldr	r1, [r4, #16]
    299e:	4640      	mov	r0, r8
    29a0:	f009 fe76 	bl	c690 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLamp(arg1, arg2 > 0, true);
		}
		ok = true;
	}
	if (cmd == lightCmd) {
    29a4:	2800      	cmp	r0, #0
    29a6:	f040 8334 	bne.w	3012 <CmdExecutor::execCmd(String)+0x6fe>
    29aa:	6961      	ldr	r1, [r4, #20]
    29ac:	4640      	mov	r0, r8
    29ae:	f009 fe6f 	bl	c690 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == blinklightCmd) {
    29b2:	2800      	cmp	r0, #0
    29b4:	f040 8315 	bne.w	2fe2 <CmdExecutor::execCmd(String)+0x6ce>
    29b8:	69a1      	ldr	r1, [r4, #24]
    29ba:	4640      	mov	r0, r8
    29bc:	f009 fe68 	bl	c690 <String::equals(char const*) const>
		arg1 = _cmdPartStr[1].toInt();
		if (_partsCount >= 3) arg2 = _cmdPartStr[2].toInt(); else arg2 = 250u;
		_sys->blinkLight(arg1, arg2);
		ok = true;
	}
	if (cmd == pulselightCmd) {
    29c0:	2800      	cmp	r0, #0
    29c2:	f040 82ff 	bne.w	2fc4 <CmdExecutor::execCmd(String)+0x6b0>
    29c6:	69e1      	ldr	r1, [r4, #28]
    29c8:	4640      	mov	r0, r8
    29ca:	f009 fe61 	bl	c690 <String::equals(char const*) const>
		arg1 = _cmdPartStr[1].toInt();
		_sys->pulseLight(arg1);
		ok = true;
	}
	if (cmd == ledgridCmd) {
    29ce:	2800      	cmp	r0, #0
    29d0:	f040 8253 	bne.w	2e7a <CmdExecutor::execCmd(String)+0x566>
    29d4:	6a21      	ldr	r1, [r4, #32]
    29d6:	4640      	mov	r0, r8
    29d8:	f009 fe5a 	bl	c690 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt() & 0xff;
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
	}
	if (cmd == ledgridmodeCmd) {
    29dc:	2800      	cmp	r0, #0
    29de:	f040 822b 	bne.w	2e38 <CmdExecutor::execCmd(String)+0x524>
    29e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    29e4:	4640      	mov	r0, r8
    29e6:	f009 fe53 	bl	c690 <String::equals(char const*) const>
			_hw->ledGridMode = LG_OFF;
			ok = true;
		}
		ok = true;
	}
	if (cmd == lcdCmd) {
    29ea:	2800      	cmp	r0, #0
    29ec:	f040 8211 	bne.w	2e12 <CmdExecutor::execCmd(String)+0x4fe>
    29f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    29f2:	4640      	mov	r0, r8
    29f4:	f009 fe4c 	bl	c690 <String::equals(char const*) const>
			s = command.substring(_cmdPartIdx[2]);
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
	}
	if (cmd == displayCmd) {
    29f8:	2800      	cmp	r0, #0
    29fa:	f040 81fa 	bne.w	2df2 <CmdExecutor::execCmd(String)+0x4de>
    29fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2a00:	4640      	mov	r0, r8
    2a02:	f009 fe45 	bl	c690 <String::equals(char const*) const>
			_sys->display.setText(arg1, s);
		}
		ok = true;
	}

	if (cmd == factorysettingsCmd) {
    2a06:	2800      	cmp	r0, #0
    2a08:	f040 829f 	bne.w	2f4a <CmdExecutor::execCmd(String)+0x636>
    2a0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2a0e:	4640      	mov	r0, r8
    2a10:	f009 fe3e 	bl	c690 <String::equals(char const*) const>
		_hw->restoreFactorySettings(true);
		_hw->lcdclr();
		_hw->lcdprn(0, F("Factory Settings restored."));
		ok = true;
	}
	if (cmd == freememCmd) {
    2a14:	2800      	cmp	r0, #0
    2a16:	f040 826d 	bne.w	2ef4 <CmdExecutor::execCmd(String)+0x5e0>
    2a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a1c:	4640      	mov	r0, r8
    2a1e:	f009 fe37 	bl	c690 <String::equals(char const*) const>
		s = String(freeMemory());
		_hw->lcdprn(0, s);
		_hw->lcdprn(F(" bytes free"));
		ok = true;
	}
	if (cmd == revCmd) {
    2a22:	2800      	cmp	r0, #0
    2a24:	d031      	beq.n	2a8a <CmdExecutor::execCmd(String)+0x176>
		_hw->lcdclr();
    2a26:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2a28:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    byte getSettingBit(byte bitPos);
    bool saveSettingByte(byte addr, byte byteMask, byte value);
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    2a2c:	b11b      	cbz	r3, 2a36 <CmdExecutor::execCmd(String)+0x122>
    2a2e:	4618      	mov	r0, r3
    2a30:	f007 faa8 	bl	9f84 <LiquidCrystalFast::clear()>
    2a34:	6c60      	ldr	r0, [r4, #68]	; 0x44
		_hw->lcdprn(0, F("PRB rev."));
    2a36:	2300      	movs	r3, #0
    2a38:	4a52      	ldr	r2, [pc, #328]	; (2b84 <CmdExecutor::execCmd(String)+0x270>)
    2a3a:	4619      	mov	r1, r3
    2a3c:	f003 fab0 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2a40:	6c63      	ldr	r3, [r4, #68]	; 0x44
		s = String(_hw->getRevision());
    2a42:	a806      	add	r0, sp, #24
    2a44:	f893 10ec 	ldrb.w	r1, [r3, #236]	; 0xec
    2a48:	f009 fd1c 	bl	c484 <String::String(unsigned char)>
    2a4c:	a906      	add	r1, sp, #24
    2a4e:	a802      	add	r0, sp, #8
    2a50:	f009 fd7a 	bl	c548 <String::operator=(String&&)>
    2a54:	a806      	add	r0, sp, #24
    2a56:	f009 fc91 	bl	c37c <String::~String()>
		_hw->lcdprn(s);
    2a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a5c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    inline void lcdprn(const char* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(const __FlashStringHelper* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(String& st) { if (_lcd != nullptr) _lcd->print(st); }
    2a60:	b160      	cbz	r0, 2a7c <CmdExecutor::execCmd(String)+0x168>
    2a62:	a902      	add	r1, sp, #8
    2a64:	f009 fb9e 	bl	c1a4 <Print::print(String const&)>
		_hw->lcdprn(F(" by"));
    2a68:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a6a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    inline void lcdprn(const char* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(const __FlashStringHelper* st) { if (_lcd != nullptr) _lcd->print(st); }
    2a6e:	b128      	cbz	r0, 2a7c <CmdExecutor::execCmd(String)+0x168>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2a70:	6803      	ldr	r3, [r0, #0]
    2a72:	2203      	movs	r2, #3
    2a74:	4944      	ldr	r1, [pc, #272]	; (2b88 <CmdExecutor::execCmd(String)+0x274>)
    2a76:	685b      	ldr	r3, [r3, #4]
    2a78:	4798      	blx	r3
    2a7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		_hw->lcdprn(1, F("F.Volpi - ITALY"));
		ok = true;
    2a7c:	2501      	movs	r5, #1
		_hw->lcdclr();
		_hw->lcdprn(0, F("PRB rev."));
		s = String(_hw->getRevision());
		_hw->lcdprn(s);
		_hw->lcdprn(F(" by"));
		_hw->lcdprn(1, F("F.Volpi - ITALY"));
    2a7e:	4618      	mov	r0, r3
    2a80:	4a42      	ldr	r2, [pc, #264]	; (2b8c <CmdExecutor::execCmd(String)+0x278>)
    2a82:	2300      	movs	r3, #0
    2a84:	4629      	mov	r1, r5
    2a86:	f003 fa8b 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2a8c:	4640      	mov	r0, r8
    2a8e:	f009 fdff 	bl	c690 <String::equals(char const*) const>
		ok = true;
	}
	if (cmd == pocCmd) {
    2a92:	b368      	cbz	r0, 2af0 <CmdExecutor::execCmd(String)+0x1dc>
		if (_partsCount > 1 && _cmdPartStr[1] == clrStr) _hw->resetPowerOnCounter();
    2a94:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2a98:	2b01      	cmp	r3, #1
    2a9a:	dd07      	ble.n	2aac <CmdExecutor::execCmd(String)+0x198>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2a9c:	493c      	ldr	r1, [pc, #240]	; (2b90 <CmdExecutor::execCmd(String)+0x27c>)
    2a9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2aa2:	f009 fdf5 	bl	c690 <String::equals(char const*) const>
    2aa6:	2800      	cmp	r0, #0
    2aa8:	f040 834b 	bne.w	3142 <CmdExecutor::execCmd(String)+0x82e>
		_hw->lcdclr();
    2aac:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2aae:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    byte getSettingBit(byte bitPos);
    bool saveSettingByte(byte addr, byte byteMask, byte value);
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    2ab2:	b11b      	cbz	r3, 2abc <CmdExecutor::execCmd(String)+0x1a8>
    2ab4:	4618      	mov	r0, r3
    2ab6:	f007 fa65 	bl	9f84 <LiquidCrystalFast::clear()>
    2aba:	6c60      	ldr	r0, [r4, #68]	; 0x44
		_hw->lcdprn(0, F("Power-on counter"));
    2abc:	2300      	movs	r3, #0
    2abe:	4a35      	ldr	r2, [pc, #212]	; (2b94 <CmdExecutor::execCmd(String)+0x280>)
		s = String(_hw->getPowerOnCounter());
		_hw->lcdprn(1, s);
		ok = true;
    2ac0:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == pocCmd) {
		if (_partsCount > 1 && _cmdPartStr[1] == clrStr) _hw->resetPowerOnCounter();
		_hw->lcdclr();
		_hw->lcdprn(0, F("Power-on counter"));
    2ac2:	4619      	mov	r1, r3
    2ac4:	f003 fa6c 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2ac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
		s = String(_hw->getPowerOnCounter());
    2aca:	220a      	movs	r2, #10
    2acc:	a806      	add	r0, sp, #24
    2ace:	f8b3 10ee 	ldrh.w	r1, [r3, #238]	; 0xee
    2ad2:	f009 fceb 	bl	c4ac <String::String(int, unsigned char)>
    2ad6:	a906      	add	r1, sp, #24
    2ad8:	a802      	add	r0, sp, #8
    2ada:	f009 fd35 	bl	c548 <String::operator=(String&&)>
    2ade:	a806      	add	r0, sp, #24
    2ae0:	f009 fc4c 	bl	c37c <String::~String()>
		_hw->lcdprn(1, s);
    2ae4:	2300      	movs	r3, #0
    2ae6:	aa02      	add	r2, sp, #8
    2ae8:	4629      	mov	r1, r5
    2aea:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2aec:	f003 fa72 	bl	5fd4 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
    2af0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    2af2:	4640      	mov	r0, r8
    2af4:	f009 fdcc 	bl	c690 <String::equals(char const*) const>
		ok = true;
	}
	if (cmd == resetCmd) {
    2af8:	2800      	cmp	r0, #0
    2afa:	d153      	bne.n	2ba4 <CmdExecutor::execCmd(String)+0x290>
    2afc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2afe:	4640      	mov	r0, r8
    2b00:	f009 fdc6 	bl	c690 <String::equals(char const*) const>
		_sys->reset();
		_hw->lcdclr();
		_hw->lcdprn(0, F("Reset done."));
		ok = true;
	}
	if (cmd == helpCmd) {
    2b04:	2800      	cmp	r0, #0
    2b06:	d164      	bne.n	2bd2 <CmdExecutor::execCmd(String)+0x2be>
		Serial.print(resetCmd);	Serial.println(F(" : reset system 80/B"));
		Serial.println(helpCmd);
		Serial.println();
		ok = true;
	}
	if (!ok) {
    2b08:	2d00      	cmp	r5, #0
    2b0a:	f040 8304 	bne.w	3116 <CmdExecutor::execCmd(String)+0x802>
    2b0e:	2121      	movs	r1, #33	; 0x21
    2b10:	4821      	ldr	r0, [pc, #132]	; (2b98 <CmdExecutor::execCmd(String)+0x284>)
    2b12:	f009 f9ab 	bl	be6c <usb_serial_write>
		Serial.print(F("* Unknown or incorrect command: '"));
		Serial.print(cmd);
    2b16:	4641      	mov	r1, r8
    2b18:	4820      	ldr	r0, [pc, #128]	; (2b9c <CmdExecutor::execCmd(String)+0x288>)
    2b1a:	f009 fb43 	bl	c1a4 <Print::print(String const&)>
    2b1e:	2102      	movs	r1, #2
    2b20:	481f      	ldr	r0, [pc, #124]	; (2ba0 <CmdExecutor::execCmd(String)+0x28c>)
    2b22:	f009 f9a3 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2b26:	481d      	ldr	r0, [pc, #116]	; (2b9c <CmdExecutor::execCmd(String)+0x288>)
    2b28:	f009 fb62 	bl	c1f0 <Print::println()>
    2b2c:	e710      	b.n	2950 <CmdExecutor::execCmd(String)+0x3c>
	if (len == 0) return false;
	if (_hw == nullptr || _sys == nullptr) {
		Serial.print(F("execCmd(..): WARNING: neither system or board undefined!"));
		return false;
	}
	if (len > MAX_LENGTH) command = command.substring(0, MAX_LENGTH-1);
    2b2e:	237f      	movs	r3, #127	; 0x7f
    2b30:	2200      	movs	r2, #0
    2b32:	4631      	mov	r1, r6
    2b34:	a806      	add	r0, sp, #24
    2b36:	f009 fdf9 	bl	c72c <String::substring(unsigned int, unsigned int) const>
    2b3a:	a906      	add	r1, sp, #24
    2b3c:	4630      	mov	r0, r6
    2b3e:	f009 fd03 	bl	c548 <String::operator=(String&&)>
    2b42:	a806      	add	r0, sp, #24
    2b44:	f009 fc1a 	bl	c37c <String::~String()>
	_getParts(command);
    2b48:	4631      	mov	r1, r6
    2b4a:	4620      	mov	r0, r4
    2b4c:	f7ff fe7e 	bl	284c <CmdExecutor::_getParts(String&)>
	//	Serial.print(_cmdPart[i]);
	//	Serial.println("'");
	//}
	//if (_partsCount > 0) Serial.println("---");

	if (_partsCount == 0) return false;
    2b50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2b54:	2b00      	cmp	r3, #0
    2b56:	f43f aefa 	beq.w	294e <CmdExecutor::execCmd(String)+0x3a>
    2b5a:	e700      	b.n	295e <CmdExecutor::execCmd(String)+0x4a>
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;

	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
    2b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2b60:	f009 fe20 	bl	c7a4 <String::toInt() const>
		_sys->setSound(arg1);
    2b64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;

	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
    2b66:	f000 071f 	and.w	r7, r0, #31
		_sys->setSound(arg1);
    2b6a:	681a      	ldr	r2, [r3, #0]
    2b6c:	4618      	mov	r0, r3
    2b6e:	4639      	mov	r1, r7
    2b70:	6893      	ldr	r3, [r2, #8]
    2b72:	4798      	blx	r3
		if (_partsCount > 2) {
    2b74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2b78:	2b02      	cmp	r3, #2
    2b7a:	f300 82ef 	bgt.w	315c <CmdExecutor::execCmd(String)+0x848>
			arg2 = _cmdPartStr[2].toInt() & 0x1f;
			_sys->setSound(arg2);
		}
		ok = true;
    2b7e:	2501      	movs	r5, #1
    2b80:	e6f7      	b.n	2972 <CmdExecutor::execCmd(String)+0x5e>
    2b82:	bf00      	nop
    2b84:	20000bc0 	.word	0x20000bc0
    2b88:	20000bcc 	.word	0x20000bcc
    2b8c:	20000bd0 	.word	0x20000bd0
    2b90:	20000b78 	.word	0x20000b78
    2b94:	20000be0 	.word	0x20000be0
    2b98:	20000d84 	.word	0x20000d84
    2b9c:	20001fdc 	.word	0x20001fdc
    2ba0:	20000da8 	.word	0x20000da8
		s = String(_hw->getPowerOnCounter());
		_hw->lcdprn(1, s);
		ok = true;
	}
	if (cmd == resetCmd) {
		_sys->reset();
    2ba4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    2ba6:	f001 ff3f 	bl	4a28 <PinGame::reset()>
		_hw->lcdclr();
    2baa:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2bac:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    2bb0:	b11b      	cbz	r3, 2bba <CmdExecutor::execCmd(String)+0x2a6>
    2bb2:	4618      	mov	r0, r3
    2bb4:	f007 f9e6 	bl	9f84 <LiquidCrystalFast::clear()>
    2bb8:	6c60      	ldr	r0, [r4, #68]	; 0x44
		_hw->lcdprn(0, F("Reset done."));
    2bba:	2300      	movs	r3, #0
    2bbc:	4ab7      	ldr	r2, [pc, #732]	; (2e9c <CmdExecutor::execCmd(String)+0x588>)
    2bbe:	4619      	mov	r1, r3
    2bc0:	f003 f9ee 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2bc4:	4640      	mov	r0, r8
    2bc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2bc8:	f009 fd62 	bl	c690 <String::equals(char const*) const>
		ok = true;
	}
	if (cmd == helpCmd) {
    2bcc:	2800      	cmp	r0, #0
    2bce:	f000 82a2 	beq.w	3116 <CmdExecutor::execCmd(String)+0x802>
		static const char* str1 = " <number> [<number>]";
		static const char* str2 = " clear | <number> <0|1>";
		static const char* str3 = " clear | <row> <text>";
		_hw->lcdclr();
    2bd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2bd4:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    2bd8:	b11b      	cbz	r3, 2be2 <CmdExecutor::execCmd(String)+0x2ce>
    2bda:	4618      	mov	r0, r3
    2bdc:	f007 f9d2 	bl	9f84 <LiquidCrystalFast::clear()>
    2be0:	6c60      	ldr	r0, [r4, #68]	; 0x44
		_hw->lcdprn(0, F("See serial comm"));
    2be2:	2300      	movs	r3, #0
		Serial.println(F(" : show board revision"));
		Serial.print(pocCmd);
		Serial.println(F(" [clear] : [clear and] show power-on counter"));
		Serial.print(resetCmd);	Serial.println(F(" : reset system 80/B"));
		Serial.println(helpCmd);
		Serial.println();
    2be4:	2501      	movs	r5, #1
	if (cmd == helpCmd) {
		static const char* str1 = " <number> [<number>]";
		static const char* str2 = " clear | <number> <0|1>";
		static const char* str3 = " clear | <row> <text>";
		_hw->lcdclr();
		_hw->lcdprn(0, F("See serial comm"));
    2be6:	4aae      	ldr	r2, [pc, #696]	; (2ea0 <CmdExecutor::execCmd(String)+0x58c>)
    2be8:	4619      	mov	r1, r3
    2bea:	f003 f9d9 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
		_hw->lcdprn(1, F("for list of cmd."));
    2bee:	2300      	movs	r3, #0
    2bf0:	4aac      	ldr	r2, [pc, #688]	; (2ea4 <CmdExecutor::execCmd(String)+0x590>)
    2bf2:	4629      	mov	r1, r5
    2bf4:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2bf6:	f003 f9d3 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2bfa:	2113      	movs	r1, #19
    2bfc:	48aa      	ldr	r0, [pc, #680]	; (2ea8 <CmdExecutor::execCmd(String)+0x594>)
    2bfe:	f009 f935 	bl	be6c <usb_serial_write>
    2c02:	48aa      	ldr	r0, [pc, #680]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2c04:	f009 faf4 	bl	c1f0 <Print::println()>
		Serial.println(F("AVAILABLE COMMANDS:"));
		Serial.print(soundCmd);	Serial.println(str1);
    2c08:	6826      	ldr	r6, [r4, #0]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c0a:	4630      	mov	r0, r6
    2c0c:	f00b f858 	bl	dcc0 <strlen>
    2c10:	4601      	mov	r1, r0
    2c12:	4630      	mov	r0, r6
    2c14:	f009 f92a 	bl	be6c <usb_serial_write>
    2c18:	2114      	movs	r1, #20
    2c1a:	48a5      	ldr	r0, [pc, #660]	; (2eb0 <CmdExecutor::execCmd(String)+0x59c>)
    2c1c:	f009 f926 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c20:	48a2      	ldr	r0, [pc, #648]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2c22:	f009 fae5 	bl	c1f0 <Print::println()>
		Serial.print(solenoidCmd); Serial.println(str2);
    2c26:	6866      	ldr	r6, [r4, #4]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c28:	4630      	mov	r0, r6
    2c2a:	f00b f849 	bl	dcc0 <strlen>
    2c2e:	4601      	mov	r1, r0
    2c30:	4630      	mov	r0, r6
    2c32:	f009 f91b 	bl	be6c <usb_serial_write>
    2c36:	2117      	movs	r1, #23
    2c38:	489e      	ldr	r0, [pc, #632]	; (2eb4 <CmdExecutor::execCmd(String)+0x5a0>)
    2c3a:	f009 f917 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c3e:	489b      	ldr	r0, [pc, #620]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2c40:	f009 fad6 	bl	c1f0 <Print::println()>
		Serial.print(pulsesolenoidCmd);	Serial.println(F(" <number> [<milliseconds>]"));
    2c44:	68a6      	ldr	r6, [r4, #8]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c46:	4630      	mov	r0, r6
    2c48:	f00b f83a 	bl	dcc0 <strlen>
    2c4c:	4601      	mov	r1, r0
    2c4e:	4630      	mov	r0, r6
    2c50:	f009 f90c 	bl	be6c <usb_serial_write>
    2c54:	211a      	movs	r1, #26
    2c56:	4898      	ldr	r0, [pc, #608]	; (2eb8 <CmdExecutor::execCmd(String)+0x5a4>)
    2c58:	f009 f908 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c5c:	4893      	ldr	r0, [pc, #588]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2c5e:	f009 fac7 	bl	c1f0 <Print::println()>
		Serial.print(lampCmd); Serial.println(str2);
    2c62:	68e6      	ldr	r6, [r4, #12]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c64:	4630      	mov	r0, r6
    2c66:	f00b f82b 	bl	dcc0 <strlen>
    2c6a:	4601      	mov	r1, r0
    2c6c:	4630      	mov	r0, r6
    2c6e:	f009 f8fd 	bl	be6c <usb_serial_write>
    2c72:	2117      	movs	r1, #23
    2c74:	488f      	ldr	r0, [pc, #572]	; (2eb4 <CmdExecutor::execCmd(String)+0x5a0>)
    2c76:	f009 f8f9 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c7a:	488c      	ldr	r0, [pc, #560]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2c7c:	f009 fab8 	bl	c1f0 <Print::println()>
		Serial.print(lightCmd);	Serial.println(str2);
    2c80:	6926      	ldr	r6, [r4, #16]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c82:	4630      	mov	r0, r6
    2c84:	f00b f81c 	bl	dcc0 <strlen>
    2c88:	4601      	mov	r1, r0
    2c8a:	4630      	mov	r0, r6
    2c8c:	f009 f8ee 	bl	be6c <usb_serial_write>
    2c90:	2117      	movs	r1, #23
    2c92:	4888      	ldr	r0, [pc, #544]	; (2eb4 <CmdExecutor::execCmd(String)+0x5a0>)
    2c94:	f009 f8ea 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c98:	4884      	ldr	r0, [pc, #528]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2c9a:	f009 faa9 	bl	c1f0 <Print::println()>
		Serial.print(blinklightCmd); Serial.println(F(" <number> [<period>]"));
    2c9e:	6966      	ldr	r6, [r4, #20]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2ca0:	4630      	mov	r0, r6
    2ca2:	f00b f80d 	bl	dcc0 <strlen>
    2ca6:	4601      	mov	r1, r0
    2ca8:	4630      	mov	r0, r6
    2caa:	f009 f8df 	bl	be6c <usb_serial_write>
    2cae:	2114      	movs	r1, #20
    2cb0:	4882      	ldr	r0, [pc, #520]	; (2ebc <CmdExecutor::execCmd(String)+0x5a8>)
    2cb2:	f009 f8db 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2cb6:	487d      	ldr	r0, [pc, #500]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2cb8:	f009 fa9a 	bl	c1f0 <Print::println()>
		Serial.print(pulselightCmd); Serial.println(F(" <number>"));
    2cbc:	69a6      	ldr	r6, [r4, #24]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2cbe:	4630      	mov	r0, r6
    2cc0:	f00a fffe 	bl	dcc0 <strlen>
    2cc4:	4601      	mov	r1, r0
    2cc6:	4630      	mov	r0, r6
    2cc8:	f009 f8d0 	bl	be6c <usb_serial_write>
    2ccc:	2109      	movs	r1, #9
    2cce:	487c      	ldr	r0, [pc, #496]	; (2ec0 <CmdExecutor::execCmd(String)+0x5ac>)
    2cd0:	f009 f8cc 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2cd4:	4875      	ldr	r0, [pc, #468]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2cd6:	f009 fa8b 	bl	c1f0 <Print::println()>
		Serial.print(ledgridmodeCmd); Serial.println(F(" lights | switches | off"));
    2cda:	6a26      	ldr	r6, [r4, #32]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2cdc:	4630      	mov	r0, r6
    2cde:	f00a ffef 	bl	dcc0 <strlen>
    2ce2:	4601      	mov	r1, r0
    2ce4:	4630      	mov	r0, r6
    2ce6:	f009 f8c1 	bl	be6c <usb_serial_write>
    2cea:	2118      	movs	r1, #24
    2cec:	4875      	ldr	r0, [pc, #468]	; (2ec4 <CmdExecutor::execCmd(String)+0x5b0>)
    2cee:	f009 f8bd 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2cf2:	486e      	ldr	r0, [pc, #440]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2cf4:	f009 fa7c 	bl	c1f0 <Print::println()>
		Serial.print(lcdCmd); Serial.println(str3);
    2cf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2cfa:	4630      	mov	r0, r6
    2cfc:	f00a ffe0 	bl	dcc0 <strlen>
    2d00:	4601      	mov	r1, r0
    2d02:	4630      	mov	r0, r6
    2d04:	f009 f8b2 	bl	be6c <usb_serial_write>
    2d08:	2115      	movs	r1, #21
    2d0a:	486f      	ldr	r0, [pc, #444]	; (2ec8 <CmdExecutor::execCmd(String)+0x5b4>)
    2d0c:	f009 f8ae 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d10:	4866      	ldr	r0, [pc, #408]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2d12:	f009 fa6d 	bl	c1f0 <Print::println()>
		Serial.print(displayCmd); Serial.println(str3);
    2d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2d18:	4630      	mov	r0, r6
    2d1a:	f00a ffd1 	bl	dcc0 <strlen>
    2d1e:	4601      	mov	r1, r0
    2d20:	4630      	mov	r0, r6
    2d22:	f009 f8a3 	bl	be6c <usb_serial_write>
    2d26:	2115      	movs	r1, #21
    2d28:	4867      	ldr	r0, [pc, #412]	; (2ec8 <CmdExecutor::execCmd(String)+0x5b4>)
    2d2a:	f009 f89f 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d2e:	485f      	ldr	r0, [pc, #380]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2d30:	f009 fa5e 	bl	c1f0 <Print::println()>
		Serial.print(factorysettingsCmd);
    2d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2d36:	4630      	mov	r0, r6
    2d38:	f00a ffc2 	bl	dcc0 <strlen>
    2d3c:	4601      	mov	r1, r0
    2d3e:	4630      	mov	r0, r6
    2d40:	f009 f894 	bl	be6c <usb_serial_write>
    2d44:	2124      	movs	r1, #36	; 0x24
    2d46:	4861      	ldr	r0, [pc, #388]	; (2ecc <CmdExecutor::execCmd(String)+0x5b8>)
    2d48:	f009 f890 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d4c:	4857      	ldr	r0, [pc, #348]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2d4e:	f009 fa4f 	bl	c1f0 <Print::println()>
		Serial.println(F(" : restore factory settings in NVRAM"));
		Serial.print(freememCmd);
    2d52:	6b26      	ldr	r6, [r4, #48]	; 0x30
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2d54:	4630      	mov	r0, r6
    2d56:	f00a ffb3 	bl	dcc0 <strlen>
    2d5a:	4601      	mov	r1, r0
    2d5c:	4630      	mov	r0, r6
    2d5e:	f009 f885 	bl	be6c <usb_serial_write>
    2d62:	211c      	movs	r1, #28
    2d64:	485a      	ldr	r0, [pc, #360]	; (2ed0 <CmdExecutor::execCmd(String)+0x5bc>)
    2d66:	f009 f881 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d6a:	4850      	ldr	r0, [pc, #320]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2d6c:	f009 fa40 	bl	c1f0 <Print::println()>
		Serial.println(F(" : show Teensy's free memory"));
		Serial.print(revCmd);
    2d70:	6b66      	ldr	r6, [r4, #52]	; 0x34
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2d72:	4630      	mov	r0, r6
    2d74:	f00a ffa4 	bl	dcc0 <strlen>
    2d78:	4601      	mov	r1, r0
    2d7a:	4630      	mov	r0, r6
    2d7c:	f009 f876 	bl	be6c <usb_serial_write>
    2d80:	2116      	movs	r1, #22
    2d82:	4854      	ldr	r0, [pc, #336]	; (2ed4 <CmdExecutor::execCmd(String)+0x5c0>)
    2d84:	f009 f872 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2d88:	4848      	ldr	r0, [pc, #288]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2d8a:	f009 fa31 	bl	c1f0 <Print::println()>
		Serial.println(F(" : show board revision"));
		Serial.print(pocCmd);
    2d8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2d90:	4630      	mov	r0, r6
    2d92:	f00a ff95 	bl	dcc0 <strlen>
    2d96:	4601      	mov	r1, r0
    2d98:	4630      	mov	r0, r6
    2d9a:	f009 f867 	bl	be6c <usb_serial_write>
    2d9e:	212c      	movs	r1, #44	; 0x2c
    2da0:	484d      	ldr	r0, [pc, #308]	; (2ed8 <CmdExecutor::execCmd(String)+0x5c4>)
    2da2:	f009 f863 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2da6:	4841      	ldr	r0, [pc, #260]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2da8:	f009 fa22 	bl	c1f0 <Print::println()>
		Serial.println(F(" [clear] : [clear and] show power-on counter"));
		Serial.print(resetCmd);	Serial.println(F(" : reset system 80/B"));
    2dac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2dae:	4630      	mov	r0, r6
    2db0:	f00a ff86 	bl	dcc0 <strlen>
    2db4:	4601      	mov	r1, r0
    2db6:	4630      	mov	r0, r6
    2db8:	f009 f858 	bl	be6c <usb_serial_write>
    2dbc:	2114      	movs	r1, #20
    2dbe:	4847      	ldr	r0, [pc, #284]	; (2edc <CmdExecutor::execCmd(String)+0x5c8>)
    2dc0:	f009 f854 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2dc4:	4839      	ldr	r0, [pc, #228]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2dc6:	f009 fa13 	bl	c1f0 <Print::println()>
		Serial.println(helpCmd);
    2dca:	6c24      	ldr	r4, [r4, #64]	; 0x40
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2dcc:	4620      	mov	r0, r4
    2dce:	f00a ff77 	bl	dcc0 <strlen>
    2dd2:	4601      	mov	r1, r0
    2dd4:	4620      	mov	r0, r4
    2dd6:	f009 f849 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2dda:	4834      	ldr	r0, [pc, #208]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2ddc:	f009 fa08 	bl	c1f0 <Print::println()>
		Serial.println();
    2de0:	4832      	ldr	r0, [pc, #200]	; (2eac <CmdExecutor::execCmd(String)+0x598>)
    2de2:	f009 fa05 	bl	c1f0 <Print::println()>
    2de6:	e5b3      	b.n	2950 <CmdExecutor::execCmd(String)+0x3c>
    2de8:	2138      	movs	r1, #56	; 0x38
    2dea:	483d      	ldr	r0, [pc, #244]	; (2ee0 <CmdExecutor::execCmd(String)+0x5cc>)
    2dec:	f009 f83e 	bl	be6c <usb_serial_write>
    2df0:	e5ad      	b.n	294e <CmdExecutor::execCmd(String)+0x3a>
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
	}
	if (cmd == displayCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->display.clear();
    2df2:	f104 055c 	add.w	r5, r4, #92	; 0x5c
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2df6:	493b      	ldr	r1, [pc, #236]	; (2ee4 <CmdExecutor::execCmd(String)+0x5d0>)
    2df8:	4628      	mov	r0, r5
    2dfa:	f009 fc49 	bl	c690 <String::equals(char const*) const>
    2dfe:	4607      	mov	r7, r0
    2e00:	2800      	cmp	r0, #0
    2e02:	f000 8163 	beq.w	30cc <CmdExecutor::execCmd(String)+0x7b8>
    2e06:	6ca0      	ldr	r0, [r4, #72]	; 0x48
		else {
			arg1 = _cmdPartStr[1].toInt() & 1;
			s = command.substring(_cmdPartIdx[2]);
			_sys->display.setText(arg1, s);
		}
		ok = true;
    2e08:	2501      	movs	r5, #1
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
	}
	if (cmd == displayCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->display.clear();
    2e0a:	3010      	adds	r0, #16
    2e0c:	f002 fdee 	bl	59ec <TextDisplay::clear()>
    2e10:	e5f5      	b.n	29fe <CmdExecutor::execCmd(String)+0xea>
    2e12:	4934      	ldr	r1, [pc, #208]	; (2ee4 <CmdExecutor::execCmd(String)+0x5d0>)
    2e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2e18:	f009 fc3a 	bl	c690 <String::equals(char const*) const>
			ok = true;
		}
		ok = true;
	}
	if (cmd == lcdCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->lcdclr();
    2e1c:	4681      	mov	r9, r0
    2e1e:	2800      	cmp	r0, #0
    2e20:	f000 81b1 	beq.w	3186 <CmdExecutor::execCmd(String)+0x872>
    2e24:	6c63      	ldr	r3, [r4, #68]	; 0x44
		else {
			s = command.substring(_cmdPartIdx[2]);
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
    2e26:	2501      	movs	r5, #1
    2e28:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    2e2c:	2800      	cmp	r0, #0
    2e2e:	f43f addf 	beq.w	29f0 <CmdExecutor::execCmd(String)+0xdc>
    2e32:	f007 f8a7 	bl	9f84 <LiquidCrystalFast::clear()>
    2e36:	e5db      	b.n	29f0 <CmdExecutor::execCmd(String)+0xdc>
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
	}
	if (cmd == ledgridmodeCmd) {
		if (_cmdPartStr[1] == "lamps") {
    2e38:	f104 055c 	add.w	r5, r4, #92	; 0x5c
    2e3c:	492a      	ldr	r1, [pc, #168]	; (2ee8 <CmdExecutor::execCmd(String)+0x5d4>)
    2e3e:	4628      	mov	r0, r5
    2e40:	f009 fc26 	bl	c690 <String::equals(char const*) const>
    2e44:	b118      	cbz	r0, 2e4e <CmdExecutor::execCmd(String)+0x53a>
			_hw->ledGridMode = LG_LAMPS;
    2e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2e48:	2202      	movs	r2, #2
    2e4a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    2e4e:	4927      	ldr	r1, [pc, #156]	; (2eec <CmdExecutor::execCmd(String)+0x5d8>)
    2e50:	4628      	mov	r0, r5
    2e52:	f009 fc1d 	bl	c690 <String::equals(char const*) const>
			ok = true;
		}
		if (_cmdPartStr[1] == "switches") {
    2e56:	b118      	cbz	r0, 2e60 <CmdExecutor::execCmd(String)+0x54c>
			_hw->ledGridMode = LG_SWITCHES;
    2e58:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2e5a:	2201      	movs	r2, #1
    2e5c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    2e60:	4628      	mov	r0, r5
    2e62:	4923      	ldr	r1, [pc, #140]	; (2ef0 <CmdExecutor::execCmd(String)+0x5dc>)
    2e64:	f009 fc14 	bl	c690 <String::equals(char const*) const>
			ok = true;
		}
		if (_cmdPartStr[1] == "off") {
    2e68:	2800      	cmp	r0, #0
    2e6a:	f000 8168 	beq.w	313e <CmdExecutor::execCmd(String)+0x82a>
			_hw->ledGridMode = LG_OFF;
    2e6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2e70:	2200      	movs	r2, #0
			ok = true;
		}
		ok = true;
    2e72:	2501      	movs	r5, #1
		if (_cmdPartStr[1] == "switches") {
			_hw->ledGridMode = LG_SWITCHES;
			ok = true;
		}
		if (_cmdPartStr[1] == "off") {
			_hw->ledGridMode = LG_OFF;
    2e74:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    2e78:	e5b3      	b.n	29e2 <CmdExecutor::execCmd(String)+0xce>
		arg1 = _cmdPartStr[1].toInt();
		_sys->pulseLight(arg1);
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
    2e7a:	f104 055c 	add.w	r5, r4, #92	; 0x5c
    2e7e:	4919      	ldr	r1, [pc, #100]	; (2ee4 <CmdExecutor::execCmd(String)+0x5d0>)
    2e80:	4628      	mov	r0, r5
    2e82:	f009 fc05 	bl	c690 <String::equals(char const*) const>
    2e86:	2800      	cmp	r0, #0
    2e88:	f000 8147 	beq.w	311a <CmdExecutor::execCmd(String)+0x806>
    2e8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		else {
			arg1 = _cmdPartStr[1].toInt() & 7;
			arg2 = _cmdPartStr[2].toInt() & 0xff;
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
    2e8e:	2501      	movs	r5, #1
		arg1 = _cmdPartStr[1].toInt();
		_sys->pulseLight(arg1);
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
    2e90:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2e94:	f003 fbc4 	bl	6620 <Led8x8::clear()>
    2e98:	e59c      	b.n	29d4 <CmdExecutor::execCmd(String)+0xc0>
    2e9a:	bf00      	nop
    2e9c:	20000bf4 	.word	0x20000bf4
    2ea0:	20000c00 	.word	0x20000c00
    2ea4:	20000c10 	.word	0x20000c10
    2ea8:	20000c24 	.word	0x20000c24
    2eac:	20001fdc 	.word	0x20001fdc
    2eb0:	20000c38 	.word	0x20000c38
    2eb4:	20000c50 	.word	0x20000c50
    2eb8:	20000c68 	.word	0x20000c68
    2ebc:	20000c84 	.word	0x20000c84
    2ec0:	20000c9c 	.word	0x20000c9c
    2ec4:	20000ca8 	.word	0x20000ca8
    2ec8:	20000cc4 	.word	0x20000cc4
    2ecc:	20000cdc 	.word	0x20000cdc
    2ed0:	20000d04 	.word	0x20000d04
    2ed4:	20000d24 	.word	0x20000d24
    2ed8:	20000d3c 	.word	0x20000d3c
    2edc:	20000d6c 	.word	0x20000d6c
    2ee0:	20000b3c 	.word	0x20000b3c
    2ee4:	20000b78 	.word	0x20000b78
    2ee8:	20000b80 	.word	0x20000b80
    2eec:	20000b88 	.word	0x20000b88
    2ef0:	20000b94 	.word	0x20000b94
		_hw->lcdclr();
		_hw->lcdprn(0, F("Factory Settings restored."));
		ok = true;
	}
	if (cmd == freememCmd) {
		_hw->restoreFactorySettings(true);
    2ef4:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2ef6:	2101      	movs	r1, #1
    2ef8:	f003 f8cc 	bl	6094 <Board_Sys80b::restoreFactorySettings(bool)>
    2efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2efe:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    2f02:	b108      	cbz	r0, 2f08 <CmdExecutor::execCmd(String)+0x5f4>
    2f04:	f007 f83e 	bl	9f84 <LiquidCrystalFast::clear()>
		_hw->lcdclr();
		s = String(freeMemory());
    2f08:	f002 ff52 	bl	5db0 <freeMemory>
    2f0c:	220a      	movs	r2, #10
    2f0e:	4601      	mov	r1, r0
    2f10:	a806      	add	r0, sp, #24
    2f12:	f009 facb 	bl	c4ac <String::String(int, unsigned char)>
    2f16:	a906      	add	r1, sp, #24
    2f18:	a802      	add	r0, sp, #8
    2f1a:	f009 fb15 	bl	c548 <String::operator=(String&&)>
    2f1e:	a806      	add	r0, sp, #24
    2f20:	f009 fa2c 	bl	c37c <String::~String()>
		_hw->lcdprn(0, s);
    2f24:	2300      	movs	r3, #0
    2f26:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2f28:	aa02      	add	r2, sp, #8
    2f2a:	4619      	mov	r1, r3
    2f2c:	f003 f852 	bl	5fd4 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
    2f30:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f32:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    inline void lcdprn(const char* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(const __FlashStringHelper* st) { if (_lcd != nullptr) _lcd->print(st); }
    2f36:	2800      	cmp	r0, #0
    2f38:	f000 810e 	beq.w	3158 <CmdExecutor::execCmd(String)+0x844>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2f3c:	6803      	ldr	r3, [r0, #0]
    2f3e:	220b      	movs	r2, #11
    2f40:	49a0      	ldr	r1, [pc, #640]	; (31c4 <CmdExecutor::execCmd(String)+0x8b0>)
		_hw->lcdprn(F(" bytes free"));
		ok = true;
    2f42:	2501      	movs	r5, #1
    2f44:	685b      	ldr	r3, [r3, #4]
    2f46:	4798      	blx	r3
    2f48:	e567      	b.n	2a1a <CmdExecutor::execCmd(String)+0x106>
		}
		ok = true;
	}

	if (cmd == factorysettingsCmd) {
		_hw->restoreFactorySettings(true);
    2f4a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2f4c:	2101      	movs	r1, #1
    2f4e:	f003 f8a1 	bl	6094 <Board_Sys80b::restoreFactorySettings(bool)>
		_hw->lcdclr();
    2f52:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2f54:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    byte getSettingBit(byte bitPos);
    bool saveSettingByte(byte addr, byte byteMask, byte value);
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    2f58:	b11b      	cbz	r3, 2f62 <CmdExecutor::execCmd(String)+0x64e>
    2f5a:	4618      	mov	r0, r3
    2f5c:	f007 f812 	bl	9f84 <LiquidCrystalFast::clear()>
    2f60:	6c60      	ldr	r0, [r4, #68]	; 0x44
		_hw->lcdprn(0, F("Factory Settings restored."));
    2f62:	2300      	movs	r3, #0
    2f64:	4a98      	ldr	r2, [pc, #608]	; (31c8 <CmdExecutor::execCmd(String)+0x8b4>)
		ok = true;
    2f66:	2501      	movs	r5, #1
	}

	if (cmd == factorysettingsCmd) {
		_hw->restoreFactorySettings(true);
		_hw->lcdclr();
		_hw->lcdprn(0, F("Factory Settings restored."));
    2f68:	4619      	mov	r1, r3
    2f6a:	f003 f819 	bl	5fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2f6e:	e54d      	b.n	2a0c <CmdExecutor::execCmd(String)+0xf8>
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2f70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2f74:	f009 fc16 	bl	c7a4 <String::toInt() const>
    2f78:	4607      	mov	r7, r0
		arg2 = _cmdPartStr[2].toInt();
    2f7a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2f7e:	f009 fc11 	bl	c7a4 <String::toInt() const>
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
    2f82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
		}
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
		arg2 = _cmdPartStr[2].toInt();
    2f86:	4681      	mov	r9, r0
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
    2f88:	2b02      	cmp	r3, #2
    2f8a:	f000 8111 	beq.w	31b0 <CmdExecutor::execCmd(String)+0x89c>
		else {
			arg3 = _cmdPartStr[3].toInt();
    2f8e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
    2f92:	2501      	movs	r5, #1
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
		arg2 = _cmdPartStr[2].toInt();
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
		else {
			arg3 = _cmdPartStr[3].toInt();
    2f94:	f009 fc06 	bl	c7a4 <String::toInt() const>
			_sys->activateSolenoid(arg1, arg2, arg3);
    2f98:	fa1f f289 	uxth.w	r2, r9
    2f9c:	b283      	uxth	r3, r0
    2f9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    2fa0:	b2f9      	uxtb	r1, r7
    2fa2:	f002 f9d7 	bl	5354 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    2fa6:	e4f2      	b.n	298e <CmdExecutor::execCmd(String)+0x7a>
			_sys->setSound(arg2);
		}
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
    2fa8:	f104 055c 	add.w	r5, r4, #92	; 0x5c
    2fac:	4987      	ldr	r1, [pc, #540]	; (31cc <CmdExecutor::execCmd(String)+0x8b8>)
    2fae:	4628      	mov	r0, r5
    2fb0:	f009 fb6e 	bl	c690 <String::equals(char const*) const>
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d077      	beq.n	30a8 <CmdExecutor::execCmd(String)+0x794>
    2fb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		else {
			arg1 = _cmdPartStr[1].toInt();
			arg2 = _cmdPartStr[2].toInt();
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
    2fba:	2501      	movs	r5, #1
			_sys->setSound(arg2);
		}
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
    2fbc:	68d8      	ldr	r0, [r3, #12]
    2fbe:	f001 ff53 	bl	4e68 <SolenoidSet::resetAll()>
    2fc2:	e4dd      	b.n	2980 <CmdExecutor::execCmd(String)+0x6c>
		if (_partsCount >= 3) arg2 = _cmdPartStr[2].toInt(); else arg2 = 250u;
		_sys->blinkLight(arg1, arg2);
		ok = true;
	}
	if (cmd == pulselightCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2fc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
		_sys->pulseLight(arg1);
		ok = true;
    2fc8:	2501      	movs	r5, #1
		if (_partsCount >= 3) arg2 = _cmdPartStr[2].toInt(); else arg2 = 250u;
		_sys->blinkLight(arg1, arg2);
		ok = true;
	}
	if (cmd == pulselightCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2fca:	f009 fbeb 	bl	c7a4 <String::toInt() const>
    2fce:	4b80      	ldr	r3, [pc, #512]	; (31d0 <CmdExecutor::execCmd(String)+0x8bc>)
    2fd0:	b2c1      	uxtb	r1, r0
    2fd2:	4607      	mov	r7, r0
    2fd4:	6818      	ldr	r0, [r3, #0]
    2fd6:	f001 f877 	bl	40c8 <LightSet::getLight(int)>
    2fda:	21fa      	movs	r1, #250	; 0xfa
    2fdc:	f000 fdf8 	bl	3bd0 <Light::pulse(unsigned short)>
    2fe0:	e4f1      	b.n	29c6 <CmdExecutor::execCmd(String)+0xb2>
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == blinklightCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2fe2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2fe6:	f009 fbdd 	bl	c7a4 <String::toInt() const>
		if (_partsCount >= 3) arg2 = _cmdPartStr[2].toInt(); else arg2 = 250u;
    2fea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == blinklightCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2fee:	4607      	mov	r7, r0
		if (_partsCount >= 3) arg2 = _cmdPartStr[2].toInt(); else arg2 = 250u;
    2ff0:	2b02      	cmp	r3, #2
    2ff2:	f300 80c1 	bgt.w	3178 <CmdExecutor::execCmd(String)+0x864>
    2ff6:	f04f 09fa 	mov.w	r9, #250	; 0xfa
	inline void setLight(byte n, bool s) {
		LightGroup::activeLightSet->getLight(n)->set(s ? ON_L : OFF_L);
	}
	inline void blinkLight(byte n, 
		uint16_t blinkPeriod = 250, byte blinkDutyC = 50, byte ticks = 0) {
			LightGroup::activeLightSet->getLight(n)->blink(blinkPeriod, blinkDutyC, ticks);
    2ffa:	4b75      	ldr	r3, [pc, #468]	; (31d0 <CmdExecutor::execCmd(String)+0x8bc>)
    2ffc:	b2f9      	uxtb	r1, r7
		_sys->blinkLight(arg1, arg2);
		ok = true;
    2ffe:	2501      	movs	r5, #1
    3000:	6818      	ldr	r0, [r3, #0]
    3002:	f001 f861 	bl	40c8 <LightSet::getLight(int)>
    3006:	4649      	mov	r1, r9
    3008:	2300      	movs	r3, #0
    300a:	2232      	movs	r2, #50	; 0x32
    300c:	f000 fdba 	bl	3b84 <Light::blink(unsigned short, unsigned char, unsigned char)>
    3010:	e4d2      	b.n	29b8 <CmdExecutor::execCmd(String)+0xa4>
			_sys->setLamp(arg1, arg2 > 0, true);
		}
		ok = true;
	}
	if (cmd == lightCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
    3012:	f104 055c 	add.w	r5, r4, #92	; 0x5c
    3016:	496d      	ldr	r1, [pc, #436]	; (31cc <CmdExecutor::execCmd(String)+0x8b8>)
    3018:	4628      	mov	r0, r5
    301a:	f009 fb39 	bl	c690 <String::equals(char const*) const>
    301e:	4681      	mov	r9, r0
    3020:	b330      	cbz	r0, 3070 <CmdExecutor::execCmd(String)+0x75c>
		return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
	}
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
	}
	inline void switchOffAllLights() { LightGroup::activeLightSet->switchOffAllLights(); }
    3022:	4b6b      	ldr	r3, [pc, #428]	; (31d0 <CmdExecutor::execCmd(String)+0x8bc>)
		else {
			arg1 = _cmdPartStr[1].toInt();
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
    3024:	2501      	movs	r5, #1
    3026:	6818      	ldr	r0, [r3, #0]
    3028:	f001 f866 	bl	40f8 <LightSet::switchOffAllLights()>
    302c:	e4bd      	b.n	29aa <CmdExecutor::execCmd(String)+0x96>
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
	}
	if (cmd == lampCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
    302e:	f104 055c 	add.w	r5, r4, #92	; 0x5c
    3032:	4966      	ldr	r1, [pc, #408]	; (31cc <CmdExecutor::execCmd(String)+0x8b8>)
    3034:	4628      	mov	r0, r5
    3036:	f009 fb2b 	bl	c690 <String::equals(char const*) const>
    303a:	b128      	cbz	r0, 3048 <CmdExecutor::execCmd(String)+0x734>
    303c:	4b64      	ldr	r3, [pc, #400]	; (31d0 <CmdExecutor::execCmd(String)+0x8bc>)
		else {
			arg1 = _cmdPartStr[1].toInt();
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLamp(arg1, arg2 > 0, true);
		}
		ok = true;
    303e:	2501      	movs	r5, #1
    3040:	6818      	ldr	r0, [r3, #0]
    3042:	f001 f859 	bl	40f8 <LightSet::switchOffAllLights()>
    3046:	e4a9      	b.n	299c <CmdExecutor::execCmd(String)+0x88>
		ok = true;
	}
	if (cmd == lampCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
		else {
			arg1 = _cmdPartStr[1].toInt();
    3048:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLamp(arg1, arg2 > 0, true);
		}
		ok = true;
    304a:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == lampCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
		else {
			arg1 = _cmdPartStr[1].toInt();
    304c:	f009 fbaa 	bl	c7a4 <String::toInt() const>
    3050:	4607      	mov	r7, r0
			arg2 = _cmdPartStr[2].toInt();
    3052:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3056:	f009 fba5 	bl	c7a4 <String::toInt() const>
    305a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	inline void setOnGameRelay(bool st) { setLamp(Q_RELAY_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    305c:	2800      	cmp	r0, #0
    305e:	b2f9      	uxtb	r1, r7
    3060:	6898      	ldr	r0, [r3, #8]
    3062:	462b      	mov	r3, r5
    3064:	bfd4      	ite	le
    3066:	2200      	movle	r2, #0
    3068:	2201      	movgt	r2, #1
    306a:	f7ff fb69 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
    306e:	e495      	b.n	299c <CmdExecutor::execCmd(String)+0x88>
		ok = true;
	}
	if (cmd == lightCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
		else {
			arg1 = _cmdPartStr[1].toInt();
    3070:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
    3072:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == lightCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
		else {
			arg1 = _cmdPartStr[1].toInt();
    3074:	f009 fb96 	bl	c7a4 <String::toInt() const>
    3078:	4607      	mov	r7, r0
			arg2 = _cmdPartStr[2].toInt();
    307a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    307e:	f009 fb91 	bl	c7a4 <String::toInt() const>
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
	inline void setLight(byte n, lightState s) { 
		LightGroup::activeLightSet->getLight(n)->set(s);
	}
	inline void setLight(byte n, bool s) {
		LightGroup::activeLightSet->getLight(n)->set(s ? ON_L : OFF_L);
    3082:	4b53      	ldr	r3, [pc, #332]	; (31d0 <CmdExecutor::execCmd(String)+0x8bc>)
    3084:	4682      	mov	sl, r0
    3086:	b2f9      	uxtb	r1, r7
    3088:	6818      	ldr	r0, [r3, #0]
    308a:	f001 f81d 	bl	40c8 <LightSet::getLight(int)>
    308e:	f1ba 0f00 	cmp.w	sl, #0
    3092:	f8cd 9000 	str.w	r9, [sp]
    3096:	f04f 0332 	mov.w	r3, #50	; 0x32
    309a:	bfd4      	ite	le
    309c:	2100      	movle	r1, #0
    309e:	2101      	movgt	r1, #1
    30a0:	22c8      	movs	r2, #200	; 0xc8
    30a2:	f000 fd4b 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    30a6:	e480      	b.n	29aa <CmdExecutor::execCmd(String)+0x96>
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
		else {
			arg1 = _cmdPartStr[1].toInt();
    30a8:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt();
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
    30aa:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
		else {
			arg1 = _cmdPartStr[1].toInt();
    30ac:	f009 fb7a 	bl	c7a4 <String::toInt() const>
    30b0:	4607      	mov	r7, r0
			arg2 = _cmdPartStr[2].toInt();
    30b2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    30b6:	f009 fb75 	bl	c7a4 <String::toInt() const>
			_sys->setSolenoid(arg1, arg2 > 0);
    30ba:	2800      	cmp	r0, #0
    30bc:	b2f9      	uxtb	r1, r7
    30be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    30c0:	bfd4      	ite	le
    30c2:	2200      	movle	r2, #0
    30c4:	2201      	movgt	r2, #1
    30c6:	f002 f92f 	bl	5328 <Sys80b::setSolenoid(unsigned char, bool)>
    30ca:	e459      	b.n	2980 <CmdExecutor::execCmd(String)+0x6c>
		ok = true;
	}
	if (cmd == displayCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->display.clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 1;
    30cc:	4628      	mov	r0, r5
			s = command.substring(_cmdPartIdx[2]);
			_sys->display.setText(arg1, s);
		}
		ok = true;
    30ce:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == displayCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->display.clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 1;
    30d0:	f009 fb68 	bl	c7a4 <String::toInt() const>
			s = command.substring(_cmdPartIdx[2]);
    30d4:	f894 208e 	ldrb.w	r2, [r4, #142]	; 0x8e
		ok = true;
	}
	if (cmd == displayCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->display.clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 1;
    30d8:	4681      	mov	r9, r0
			s = command.substring(_cmdPartIdx[2]);
    30da:	4631      	mov	r1, r6
    30dc:	a806      	add	r0, sp, #24
    30de:	f009 fb49 	bl	c774 <String::substring(unsigned int) const>
    30e2:	a906      	add	r1, sp, #24
    30e4:	a802      	add	r0, sp, #8
    30e6:	f009 fa2f 	bl	c548 <String::operator=(String&&)>
    30ea:	a806      	add	r0, sp, #24
    30ec:	f009 f946 	bl	c37c <String::~String()>
			_sys->display.setText(arg1, s);
    30f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    30f2:	a902      	add	r1, sp, #8
    30f4:	a806      	add	r0, sp, #24
    30f6:	f103 0610 	add.w	r6, r3, #16
    30fa:	f009 f9a5 	bl	c448 <String::String(String const&)>
	}
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    30fe:	9b06      	ldr	r3, [sp, #24]
    3100:	ea09 0105 	and.w	r1, r9, r5
    3104:	4630      	mov	r0, r6
    3106:	9700      	str	r7, [sp, #0]
    3108:	463a      	mov	r2, r7
    310a:	f002 fce3 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    310e:	a806      	add	r0, sp, #24
    3110:	f009 f934 	bl	c37c <String::~String()>
    3114:	e473      	b.n	29fe <CmdExecutor::execCmd(String)+0xea>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    3116:	2501      	movs	r5, #1
    3118:	e41a      	b.n	2950 <CmdExecutor::execCmd(String)+0x3c>
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 7;
    311a:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt() & 0xff;
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
    311c:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 7;
    311e:	f009 fb41 	bl	c7a4 <String::toInt() const>
    3122:	f000 0707 	and.w	r7, r0, #7
			arg2 = _cmdPartStr[2].toInt() & 0xff;
    3126:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    312a:	f009 fb3b 	bl	c7a4 <String::toInt() const>
			_hw->ledGrid->setRow(arg1, arg2);
    312e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3130:	b2c2      	uxtb	r2, r0
    3132:	4639      	mov	r1, r7
    3134:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3138:	f003 fa48 	bl	65cc <Led8x8::setRow(unsigned char, unsigned char)>
    313c:	e44a      	b.n	29d4 <CmdExecutor::execCmd(String)+0xc0>
		}
		if (_cmdPartStr[1] == "off") {
			_hw->ledGridMode = LG_OFF;
			ok = true;
		}
		ok = true;
    313e:	2501      	movs	r5, #1
    3140:	e44f      	b.n	29e2 <CmdExecutor::execCmd(String)+0xce>
		_hw->lcdprn(F(" by"));
		_hw->lcdprn(1, F("F.Volpi - ITALY"));
		ok = true;
	}
	if (cmd == pocCmd) {
		if (_partsCount > 1 && _cmdPartStr[1] == clrStr) _hw->resetPowerOnCounter();
    3142:	6c65      	ldr	r5, [r4, #68]	; 0x44
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    inline byte readReturns() { return switchMatrix_IO->mcpReadPB(); }
    inline bool readSlamSw() { return (digitalReadFast(SLAM_PIN) == HIGH); }
    inline uint16_t getPowerOnCounter() { return _poc; }
    inline void resetPowerOnCounter() { NVData->writeWord(0, 0); _poc = 0; }
    3144:	2200      	movs	r2, #0
    3146:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    314a:	4611      	mov	r1, r2
    314c:	f004 f8e0 	bl	7310 <NVData_class::writeWord(unsigned short, unsigned short)>
    3150:	2300      	movs	r3, #0
    3152:	f8a5 30ee 	strh.w	r3, [r5, #238]	; 0xee
    3156:	e4a9      	b.n	2aac <CmdExecutor::execCmd(String)+0x198>
		_hw->restoreFactorySettings(true);
		_hw->lcdclr();
		s = String(freeMemory());
		_hw->lcdprn(0, s);
		_hw->lcdprn(F(" bytes free"));
		ok = true;
    3158:	2501      	movs	r5, #1
    315a:	e45e      	b.n	2a1a <CmdExecutor::execCmd(String)+0x106>

	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
		_sys->setSound(arg1);
		if (_partsCount > 2) {
			arg2 = _cmdPartStr[2].toInt() & 0x1f;
    315c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
			_sys->setSound(arg2);
		}
		ok = true;
    3160:	2501      	movs	r5, #1

	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
		_sys->setSound(arg1);
		if (_partsCount > 2) {
			arg2 = _cmdPartStr[2].toInt() & 0x1f;
    3162:	f009 fb1f 	bl	c7a4 <String::toInt() const>
			_sys->setSound(arg2);
    3166:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3168:	f000 011f 	and.w	r1, r0, #31
    316c:	681a      	ldr	r2, [r3, #0]
    316e:	4618      	mov	r0, r3
    3170:	6893      	ldr	r3, [r2, #8]
    3172:	4798      	blx	r3
    3174:	f7ff bbfd 	b.w	2972 <CmdExecutor::execCmd(String)+0x5e>
		}
		ok = true;
	}
	if (cmd == blinklightCmd) {
		arg1 = _cmdPartStr[1].toInt();
		if (_partsCount >= 3) arg2 = _cmdPartStr[2].toInt(); else arg2 = 250u;
    3178:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    317c:	f009 fb12 	bl	c7a4 <String::toInt() const>
    3180:	fa1f f980 	uxth.w	r9, r0
    3184:	e739      	b.n	2ffa <CmdExecutor::execCmd(String)+0x6e6>
		ok = true;
	}
	if (cmd == lcdCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->lcdclr();
		else {
			s = command.substring(_cmdPartIdx[2]);
    3186:	f894 208e 	ldrb.w	r2, [r4, #142]	; 0x8e
    318a:	4631      	mov	r1, r6
    318c:	a806      	add	r0, sp, #24
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
    318e:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == lcdCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->lcdclr();
		else {
			s = command.substring(_cmdPartIdx[2]);
    3190:	f009 faf0 	bl	c774 <String::substring(unsigned int) const>
    3194:	a906      	add	r1, sp, #24
    3196:	a802      	add	r0, sp, #8
    3198:	f009 f9d6 	bl	c548 <String::operator=(String&&)>
    319c:	a806      	add	r0, sp, #24
    319e:	f009 f8ed 	bl	c37c <String::~String()>
			_hw->lcdprn(0, s, arg1);
    31a2:	4649      	mov	r1, r9
    31a4:	b2fb      	uxtb	r3, r7
    31a6:	aa02      	add	r2, sp, #8
    31a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    31aa:	f002 ff13 	bl	5fd4 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
    31ae:	e41f      	b.n	29f0 <CmdExecutor::execCmd(String)+0xdc>
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
		arg2 = _cmdPartStr[2].toInt();
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
    31b0:	b282      	uxth	r2, r0
    31b2:	2300      	movs	r3, #0
    31b4:	b2f9      	uxtb	r1, r7
    31b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    31b8:	f002 f8cc 	bl	5354 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
		else {
			arg3 = _cmdPartStr[3].toInt();
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
    31bc:	2501      	movs	r5, #1
    31be:	f7ff bbe6 	b.w	298e <CmdExecutor::execCmd(String)+0x7a>
    31c2:	bf00      	nop
    31c4:	20000bb4 	.word	0x20000bb4
    31c8:	20000b98 	.word	0x20000b98
    31cc:	20000b78 	.word	0x20000b78
    31d0:	20002ac8 	.word	0x20002ac8

000031d4 <TextDisplay::getVisibleChar(unsigned char, unsigned char)>:
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    31d4:	7e03      	ldrb	r3, [r0, #24]
    31d6:	428b      	cmp	r3, r1
    31d8:	d907      	bls.n	31ea <TextDisplay::getVisibleChar(unsigned char, unsigned char)+0x16>
    31da:	7e43      	ldrb	r3, [r0, #25]
    31dc:	4293      	cmp	r3, r2
    31de:	d904      	bls.n	31ea <TextDisplay::getVisibleChar(unsigned char, unsigned char)+0x16>
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
	void setChar(byte row, byte col, byte ch);
	inline byte getChar(byte row, byte col) {
		return (validPosition(row, col)) ? (byte)textRow[row][col] : ERR_BYTE;
    31e0:	6843      	ldr	r3, [r0, #4]
    31e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    31e6:	5c98      	ldrb	r0, [r3, r2]
	}
	inline virtual byte getVisibleChar(byte row, byte col) { return getChar(row, col); }
    31e8:	4770      	bx	lr
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
	void setChar(byte row, byte col, byte ch);
	inline byte getChar(byte row, byte col) {
		return (validPosition(row, col)) ? (byte)textRow[row][col] : ERR_BYTE;
    31ea:	2021      	movs	r0, #33	; 0x21
    31ec:	4770      	bx	lr
    31ee:	bf00      	nop

000031f0 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]>:
	blinkParams[line].enabled = true;
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
    31f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
    31f4:	6845      	ldr	r5, [r0, #4]
    31f6:	fa0f f981 	sxth.w	r9, r1
	blinkParams[line].enabled = true;
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
    31fa:	b086      	sub	sp, #24
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
    31fc:	eb05 1549 	add.w	r5, r5, r9, lsl #5
	if (!ln.dfxEnabled) return;
    3200:	7cab      	ldrb	r3, [r5, #18]
    3202:	2b00      	cmp	r3, #0
    3204:	d037      	beq.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
	byte tLen = ln.text.length();
	byte dWidth = display->getWidth();
    3206:	f8d0 a000 	ldr.w	sl, [r0]
    320a:	460e      	mov	r6, r1
	byte i;
	char ch;

	switch (ln.dfxType) {
    320c:	7c6b      	ldrb	r3, [r5, #17]
    320e:	4607      	mov	r7, r0
    3210:	f89a 8019 	ldrb.w	r8, [sl, #25]
// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
	if (!ln.dfxEnabled) return;
	byte tLen = ln.text.length();
    3214:	7a2c      	ldrb	r4, [r5, #8]
	byte dWidth = display->getWidth();
	byte i;
	char ch;

	switch (ln.dfxType) {
    3216:	2b09      	cmp	r3, #9
    3218:	f200 8102 	bhi.w	3420 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x230>
    321c:	e8df f013 	tbh	[pc, r3, lsl #1]
    3220:	000a006b 	.word	0x000a006b
    3224:	009d007d 	.word	0x009d007d
    3228:	009d00ba 	.word	0x009d00ba
    322c:	00d300ba 	.word	0x00d300ba
    3230:	002e00e9 	.word	0x002e00e9
	case NONE:
		display->setText(line, ln.dfxStep, ln.text);
		ln.dfxEnabled = false;
		break;
	case BOUNCE_IN: // endless fx
		display->setText(line, ln.dfxStep, ln.text);
    3234:	f895 8018 	ldrb.w	r8, [r5, #24]
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}
	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    3238:	f04f 0900 	mov.w	r9, #0
    323c:	4629      	mov	r1, r5
    323e:	a802      	add	r0, sp, #8
    3240:	f009 f902 	bl	c448 <String::String(String const&)>
    3244:	9b02      	ldr	r3, [sp, #8]
    3246:	4642      	mov	r2, r8
    3248:	4631      	mov	r1, r6
    324a:	4650      	mov	r0, sl
    324c:	f8cd 9000 	str.w	r9, [sp]
    3250:	f002 fc40 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    3254:	a802      	add	r0, sp, #8
    3256:	f009 f891 	bl	c37c <String::~String()>
		if (ln.dfxAux == 0) { // text direction: left
    325a:	7eab      	ldrb	r3, [r5, #26]
    325c:	2b00      	cmp	r3, #0
    325e:	f000 80ec 	beq.w	343a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x24a>
			if (--ln.dfxStep == 0) ln.dfxAux = 1;
		}
		else { // text direction: right
			if (++ln.dfxStep == rows - tLen) ln.dfxAux = 0;
    3262:	8b2b      	ldrh	r3, [r5, #24]
    3264:	3301      	adds	r3, #1
    3266:	b29b      	uxth	r3, r3
    3268:	832b      	strh	r3, [r5, #24]
    326a:	7f3a      	ldrb	r2, [r7, #28]
    326c:	1b14      	subs	r4, r2, r4
    326e:	42a3      	cmp	r3, r4
    3270:	d101      	bne.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    3272:	f885 901a 	strb.w	r9, [r5, #26]
	default:
		ln.dfxType = NONE;
		ln.dfxEnabled = false;
		return;
	}
}
    3276:	b006      	add	sp, #24
    3278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ch = ln.text.charAt(ln.dfxStep--);
			display->setChar(line, 0, ch);
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
    327c:	f007 fb30 	bl	a8e0 <micros>
    3280:	6839      	ldr	r1, [r7, #0]
    3282:	b2c0      	uxtb	r0, r0
    3284:	684b      	ldr	r3, [r1, #4]
    3286:	fbb0 f2f8 	udiv	r2, r0, r8
    328a:	fb08 0412 	mls	r4, r8, r2, r0
    328e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    3292:	7e0b      	ldrb	r3, [r1, #24]
    3294:	b2e4      	uxtb	r4, r4
    3296:	7e49      	ldrb	r1, [r1, #25]
    3298:	e004      	b.n	32a4 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xb4>
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
				break;
			}
			else if (++i == dWidth) i = 0;
    329a:	3401      	adds	r4, #1
    329c:	b2e4      	uxtb	r4, r4
    329e:	45a0      	cmp	r8, r4
    32a0:	bf08      	it	eq
    32a2:	2400      	moveq	r4, #0
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    32a4:	429e      	cmp	r6, r3
    32a6:	d2f8      	bcs.n	329a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xaa>
    32a8:	428c      	cmp	r4, r1
    32aa:	d2f6      	bcs.n	329a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xaa>
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
    32ac:	5d02      	ldrb	r2, [r0, r4]
    32ae:	2a20      	cmp	r2, #32
    32b0:	d1f3      	bne.n	329a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xaa>
				ch = ln.text.charAt(i);
    32b2:	4621      	mov	r1, r4
    32b4:	4628      	mov	r0, r5
    32b6:	f009 fa01 	bl	c6bc <String::charAt(unsigned int) const>
				display->setChar(line, i, ch);
    32ba:	4622      	mov	r2, r4
    32bc:	4603      	mov	r3, r0
    32be:	4631      	mov	r1, r6
    32c0:	6838      	ldr	r0, [r7, #0]
    32c2:	f002 fcaf 	bl	5c24 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
				ln.dfxStep++;
    32c6:	8b2b      	ldrh	r3, [r5, #24]
    32c8:	3301      	adds	r3, #1
    32ca:	b29b      	uxth	r3, r3
				break;
			}
			else if (++i == dWidth) i = 0;
		}
		if (ln.dfxStep == dWidth) {
    32cc:	4543      	cmp	r3, r8
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
    32ce:	832b      	strh	r3, [r5, #24]
				break;
			}
			else if (++i == dWidth) i = 0;
		}
		if (ln.dfxStep == dWidth) {
    32d0:	d1d1      	bne.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
	}
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    32d2:	2400      	movs	r4, #0
			display->setText(line, ln.text);
    32d4:	683f      	ldr	r7, [r7, #0]
    32d6:	4629      	mov	r1, r5
    32d8:	a802      	add	r0, sp, #8
    32da:	f009 f8b5 	bl	c448 <String::String(String const&)>
    32de:	9b02      	ldr	r3, [sp, #8]
    32e0:	4638      	mov	r0, r7
    32e2:	4631      	mov	r1, r6
    32e4:	4622      	mov	r2, r4
    32e6:	9400      	str	r4, [sp, #0]
    32e8:	f002 fbf4 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    32ec:	a802      	add	r0, sp, #8
    32ee:	f009 f845 	bl	c37c <String::~String()>
			ln.dfxEnabled = false; // effect process completed
    32f2:	74ac      	strb	r4, [r5, #18]
    32f4:	e7bf      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
	byte i;
	char ch;

	switch (ln.dfxType) {
	case NONE:
		display->setText(line, ln.dfxStep, ln.text);
    32f6:	7e2f      	ldrb	r7, [r5, #24]
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}
	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    32f8:	2400      	movs	r4, #0
    32fa:	4629      	mov	r1, r5
    32fc:	a802      	add	r0, sp, #8
    32fe:	f009 f8a3 	bl	c448 <String::String(String const&)>
    3302:	9b02      	ldr	r3, [sp, #8]
    3304:	463a      	mov	r2, r7
    3306:	4631      	mov	r1, r6
    3308:	4650      	mov	r0, sl
    330a:	9400      	str	r4, [sp, #0]
    330c:	f002 fbe2 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    3310:	a802      	add	r0, sp, #8
    3312:	f009 f833 	bl	c37c <String::~String()>
		ln.dfxEnabled = false;
    3316:	74ac      	strb	r4, [r5, #18]
    3318:	e7ad      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		else { // text direction: right
			if (++ln.dfxStep == rows - tLen) ln.dfxAux = 0;
		}
		break;
	case BOUNCE_OUT: // endless fx
		display->setText(line, ln.text, (short)ln.dfxStep);
    331a:	4629      	mov	r1, r5
    331c:	a802      	add	r0, sp, #8
    331e:	f009 f893 	bl	c448 <String::String(String const&)>
	}
	inline void setText(byte row, __FlashStringHelper* text, bool clearBefore = false) {
		setText(row, 0, (const char*)text, clearBefore);
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
    3322:	f04f 0e00 	mov.w	lr, #0
    3326:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
    332a:	4631      	mov	r1, r6
    332c:	9a02      	ldr	r2, [sp, #8]
    332e:	4650      	mov	r0, sl
    3330:	f8cd e000 	str.w	lr, [sp]
    3334:	f002 fbfe 	bl	5b34 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    3338:	a802      	add	r0, sp, #8
    333a:	f009 f81f 	bl	c37c <String::~String()>
		if (ln.dfxAux == 0) { // text direction: left
    333e:	7eab      	ldrb	r3, [r5, #26]
    3340:	2b00      	cmp	r3, #0
    3342:	d171      	bne.n	3428 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x238>
			if (++ln.dfxStep == tLen - rows) ln.dfxAux = 1;
    3344:	8b2b      	ldrh	r3, [r5, #24]
    3346:	3301      	adds	r3, #1
    3348:	b29b      	uxth	r3, r3
    334a:	832b      	strh	r3, [r5, #24]
    334c:	7f3a      	ldrb	r2, [r7, #28]
    334e:	1aa4      	subs	r4, r4, r2
    3350:	42a3      	cmp	r3, r4
    3352:	d190      	bne.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    3354:	2301      	movs	r3, #1
    3356:	76ab      	strb	r3, [r5, #26]
    3358:	e78d      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
		}
		break;
	case LEFT_SCRL:
	case LEFT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
    335a:	4629      	mov	r1, r5
    335c:	a802      	add	r0, sp, #8
    335e:	f009 f873 	bl	c448 <String::String(String const&)>
    3362:	2701      	movs	r7, #1
    3364:	8b2b      	ldrh	r3, [r5, #24]
    3366:	4631      	mov	r1, r6
    3368:	9a02      	ldr	r2, [sp, #8]
    336a:	4650      	mov	r0, sl
    336c:	eb03 0e07 	add.w	lr, r3, r7
    3370:	b21b      	sxth	r3, r3
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
    3372:	ebc8 0804 	rsb	r8, r8, r4
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
		}
		break;
	case LEFT_SCRL:
	case LEFT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
    3376:	f8a5 e018 	strh.w	lr, [r5, #24]
    337a:	9700      	str	r7, [sp, #0]
    337c:	f002 fbda 	bl	5b34 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    3380:	a802      	add	r0, sp, #8
    3382:	f008 fffb 	bl	c37c <String::~String()>
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
    3386:	8b2b      	ldrh	r3, [r5, #24]
    3388:	4543      	cmp	r3, r8
    338a:	f77f af74 	ble.w	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		break;
	case RIGHT_SCRL:
	case RIGHT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
    338e:	2300      	movs	r3, #0
    3390:	74ab      	strb	r3, [r5, #18]
    3392:	e770      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
		break;
	case RIGHT_SCRL:
	case RIGHT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
    3394:	4629      	mov	r1, r5
    3396:	a802      	add	r0, sp, #8
    3398:	f009 f856 	bl	c448 <String::String(String const&)>
    339c:	8b2b      	ldrh	r3, [r5, #24]
    339e:	2701      	movs	r7, #1
    33a0:	9a02      	ldr	r2, [sp, #8]
    33a2:	f103 3eff 	add.w	lr, r3, #4294967295
    33a6:	4631      	mov	r1, r6
    33a8:	b21b      	sxth	r3, r3
    33aa:	4650      	mov	r0, sl
    33ac:	f8a5 e018 	strh.w	lr, [r5, #24]
    33b0:	9700      	str	r7, [sp, #0]
    33b2:	f002 fbbf 	bl	5b34 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    33b6:	a802      	add	r0, sp, #8
    33b8:	f008 ffe0 	bl	c37c <String::~String()>
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
    33bc:	8b2b      	ldrh	r3, [r5, #24]
    33be:	42a3      	cmp	r3, r4
    33c0:	f67f af59 	bls.w	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    33c4:	e7e3      	b.n	338e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x19e>
		break;
	case LEFT_ROT: // endless fx
		if (ln.dfxStep == tLen-1) { // rightmost text character index on display
    33c6:	3c01      	subs	r4, #1
    33c8:	8b2b      	ldrh	r3, [r5, #24]
    33ca:	42a3      	cmp	r3, r4
    33cc:	d04d      	beq.n	346a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x27a>
			display->setText(line, ln.text);
			ln.dfxStep = 0;
		}
		else {
			display->scrollLeft(line);
    33ce:	4650      	mov	r0, sl
    33d0:	f002 fbf2 	bl	5bb8 <TextDisplay::scrollLeft(unsigned char)>
			ch = ln.text.charAt(ln.dfxStep++);
    33d4:	8b29      	ldrh	r1, [r5, #24]
    33d6:	4628      	mov	r0, r5
    33d8:	1c4b      	adds	r3, r1, #1
    33da:	832b      	strh	r3, [r5, #24]
    33dc:	f009 f96e 	bl	c6bc <String::charAt(unsigned int) const>
			display->setChar(line, dWidth-1, ch);
    33e0:	f108 32ff 	add.w	r2, r8, #4294967295
    33e4:	4603      	mov	r3, r0
    33e6:	4631      	mov	r1, r6
    33e8:	b2d2      	uxtb	r2, r2
    33ea:	6838      	ldr	r0, [r7, #0]
    33ec:	f002 fc1a 	bl	5c24 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
    33f0:	e741      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		}
		break;
	case RIGHT_ROT: // endless fx
		if (ln.dfxStep == 0) { // leftmost text character index on display
    33f2:	f8b5 8018 	ldrh.w	r8, [r5, #24]
    33f6:	f1b8 0f00 	cmp.w	r8, #0
    33fa:	d126      	bne.n	344a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x25a>
			display->setText(line, ln.text);
    33fc:	4629      	mov	r1, r5
    33fe:	a802      	add	r0, sp, #8
    3400:	f009 f822 	bl	c448 <String::String(String const&)>
			ln.dfxStep = tLen - 1;
    3404:	3c01      	subs	r4, #1
	}
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    3406:	9b02      	ldr	r3, [sp, #8]
    3408:	4642      	mov	r2, r8
    340a:	4631      	mov	r1, r6
    340c:	4650      	mov	r0, sl
    340e:	f8cd 8000 	str.w	r8, [sp]
    3412:	f002 fb5f 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
			display->setChar(line, dWidth-1, ch);
		}
		break;
	case RIGHT_ROT: // endless fx
		if (ln.dfxStep == 0) { // leftmost text character index on display
			display->setText(line, ln.text);
    3416:	a802      	add	r0, sp, #8
    3418:	f008 ffb0 	bl	c37c <String::~String()>
			ln.dfxStep = tLen - 1;
    341c:	832c      	strh	r4, [r5, #24]
    341e:	e72a      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
			display->setText(line, ln.text);
			ln.dfxEnabled = false; // effect process completed
		}
		break;
	default:
		ln.dfxType = NONE;
    3420:	2300      	movs	r3, #0
    3422:	746b      	strb	r3, [r5, #17]
		ln.dfxEnabled = false;
    3424:	74ab      	strb	r3, [r5, #18]
    3426:	e726      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		display->setText(line, ln.text, (short)ln.dfxStep);
		if (ln.dfxAux == 0) { // text direction: left
			if (++ln.dfxStep == tLen - rows) ln.dfxAux = 1;
		}
		else { // text direction: right
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
    3428:	8b2b      	ldrh	r3, [r5, #24]
    342a:	3b01      	subs	r3, #1
    342c:	b29b      	uxth	r3, r3
    342e:	832b      	strh	r3, [r5, #24]
    3430:	2b00      	cmp	r3, #0
    3432:	f47f af20 	bne.w	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    3436:	76ab      	strb	r3, [r5, #26]
    3438:	e71d      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		ln.dfxEnabled = false;
		break;
	case BOUNCE_IN: // endless fx
		display->setText(line, ln.dfxStep, ln.text);
		if (ln.dfxAux == 0) { // text direction: left
			if (--ln.dfxStep == 0) ln.dfxAux = 1;
    343a:	8b2b      	ldrh	r3, [r5, #24]
    343c:	3b01      	subs	r3, #1
    343e:	b29b      	uxth	r3, r3
    3440:	832b      	strh	r3, [r5, #24]
    3442:	2b00      	cmp	r3, #0
    3444:	f47f af17 	bne.w	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    3448:	e784      	b.n	3354 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x164>
		if (ln.dfxStep == 0) { // leftmost text character index on display
			display->setText(line, ln.text);
			ln.dfxStep = tLen - 1;
		}
		else {
			display->scrollRight(line);
    344a:	4650      	mov	r0, sl
    344c:	f002 fbd2 	bl	5bf4 <TextDisplay::scrollRight(unsigned char)>
			ch = ln.text.charAt(ln.dfxStep--);
    3450:	8b29      	ldrh	r1, [r5, #24]
    3452:	4628      	mov	r0, r5
    3454:	1e4b      	subs	r3, r1, #1
    3456:	832b      	strh	r3, [r5, #24]
    3458:	f009 f930 	bl	c6bc <String::charAt(unsigned int) const>
			display->setChar(line, 0, ch);
    345c:	4631      	mov	r1, r6
    345e:	4603      	mov	r3, r0
    3460:	2200      	movs	r2, #0
    3462:	6838      	ldr	r0, [r7, #0]
    3464:	f002 fbde 	bl	5c24 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
    3468:	e705      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    346a:	2400      	movs	r4, #0
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
		break;
	case LEFT_ROT: // endless fx
		if (ln.dfxStep == tLen-1) { // rightmost text character index on display
			display->setText(line, ln.text);
    346c:	4629      	mov	r1, r5
    346e:	a802      	add	r0, sp, #8
    3470:	f008 ffea 	bl	c448 <String::String(String const&)>
    3474:	9b02      	ldr	r3, [sp, #8]
    3476:	4631      	mov	r1, r6
    3478:	4650      	mov	r0, sl
    347a:	4622      	mov	r2, r4
    347c:	9400      	str	r4, [sp, #0]
    347e:	f002 fb29 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    3482:	a802      	add	r0, sp, #8
    3484:	f008 ff7a 	bl	c37c <String::~String()>
			ln.dfxStep = 0;
    3488:	832c      	strh	r4, [r5, #24]
    348a:	e6f4      	b.n	3276 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>

0000348c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>:
	inputText = text;
	_enableDisplayEffect(line, effectId);
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
    348c:	7f03      	ldrb	r3, [r0, #28]
    348e:	428b      	cmp	r3, r1
    3490:	d800      	bhi.n	3494 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x8>
    3492:	4770      	bx	lr
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
    3494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3498:	460d      	mov	r5, r1
    349a:	b08c      	sub	sp, #48	; 0x30
	void rotateUp();
	void rotateDown();
	//void writeChar(byte row, byte col, byte chr);
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
    349c:	6801      	ldr	r1, [r0, #0]
    349e:	4604      	mov	r4, r0
    34a0:	4668      	mov	r0, sp
    34a2:	4617      	mov	r7, r2
    34a4:	311c      	adds	r1, #28
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
    34a6:	fa0f f885 	sxth.w	r8, r5
    34aa:	f008 ffcd 	bl	c448 <String::String(String const&)>
	byte txLen = inputText.length();
	byte columns = display->getWidth();

	//delete &ln.text;
	ln.dfxDelay = STD_DFX_DELAY;
    34ae:	211e      	movs	r1, #30
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
    34b0:	2f01      	cmp	r7, #1
void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
	byte txLen = inputText.length();
    34b2:	f894 9014 	ldrb.w	r9, [r4, #20]
	byte columns = display->getWidth();
    34b6:	e894 0048 	ldmia.w	r4, {r3, r6}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
    34ba:	eb06 1648 	add.w	r6, r6, r8, lsl #5
    34be:	f893 a019 	ldrb.w	sl, [r3, #25]
	byte txLen = inputText.length();
	byte columns = display->getWidth();

	//delete &ln.text;
	ln.dfxDelay = STD_DFX_DELAY;
    34c2:	83b1      	strh	r1, [r6, #28]
	ln.dfxType = effectId;
    34c4:	7477      	strb	r7, [r6, #17]

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
    34c6:	d010      	beq.n	34ea <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x5e>
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
	}
	if (effectId == BOUNCE_OUT) {
    34c8:	2f02      	cmp	r7, #2
    34ca:	d019      	beq.n	3500 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
		if (txLen < rows) effectId = BOUNCE_IN;
		else if (txLen == rows) effectId = NONE;
	}

	switch (effectId) {
    34cc:	2f09      	cmp	r7, #9
    34ce:	f200 80e2 	bhi.w	3696 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x20a>
    34d2:	e8df f017 	tbh	[pc, r7, lsl #1]
    34d6:	00da      	.short	0x00da
    34d8:	00e00019 	.word	0x00e00019
    34dc:	00a50087 	.word	0x00a50087
    34e0:	002c00c5 	.word	0x002c00c5
    34e4:	00d6004e 	.word	0x00d6004e
    34e8:	007b      	.short	0x007b
	ln.dfxDelay = STD_DFX_DELAY;
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
		if (txLen > rows) effectId = BOUNCE_OUT;
    34ea:	7f22      	ldrb	r2, [r4, #28]
    34ec:	4591      	cmp	r9, r2
    34ee:	d903      	bls.n	34f8 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x6c>
		ln.dfxStep = 0; // first char position on display
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
		//display->setText(line, ln.text);
		break;
	case BOUNCE_OUT:
		ln.dfxStep = 0; // first char of displayed extended line 
    34f0:	2300      	movs	r3, #0
    34f2:	8333      	strh	r3, [r6, #24]
		ln.dfxAux = 0; // text direction: 0 = left, 1 = right
    34f4:	76b3      	strb	r3, [r6, #26]
		//display->setText(line, ln.text);
		break;
    34f6:	e00b      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
    34f8:	bf14      	ite	ne
    34fa:	2701      	movne	r7, #1
    34fc:	2700      	moveq	r7, #0
    34fe:	e7e5      	b.n	34cc <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x40>
    3500:	7f22      	ldrb	r2, [r4, #28]
	}
	if (effectId == BOUNCE_OUT) {
		if (txLen < rows) effectId = BOUNCE_IN;
    3502:	4591      	cmp	r9, r2
    3504:	f080 80bf 	bcs.w	3686 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1fa>
	switch (effectId) {
	case NONE:
		ln.text = inputText;
		break;
	case BOUNCE_IN:
		ln.dfxStep = 0; // first char position on display
    3508:	2200      	movs	r2, #0
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
    350a:	2301      	movs	r3, #1
	switch (effectId) {
	case NONE:
		ln.text = inputText;
		break;
	case BOUNCE_IN:
		ln.dfxStep = 0; // first char position on display
    350c:	8332      	strh	r2, [r6, #24]
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
    350e:	76b3      	strb	r3, [r6, #26]
	default:
		ln.dfxEnabled = false;
		ln.dfxStep = 0; // chars completed
		return;
	}
	ln.dfxEnabled = true;
    3510:	2301      	movs	r3, #1
    3512:	74b3      	strb	r3, [r6, #18]
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
    3514:	7f23      	ldrb	r3, [r4, #28]
    3516:	42ab      	cmp	r3, r5
    3518:	d903      	bls.n	3522 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x96>
    351a:	4629      	mov	r1, r5
    351c:	4620      	mov	r0, r4
    351e:	f7ff fe67 	bl	31f0 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]>
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
    3522:	4668      	mov	r0, sp
    3524:	f008 ff2a 	bl	c37c <String::~String()>
	}
	ln.dfxEnabled = true;
	//display->clearRow(line);
	DFXStep(line);
	//delete &spaces;
}
    3528:	b00c      	add	sp, #48	; 0x30
    352a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    352e:	af08      	add	r7, sp, #32
    3530:	f104 010c 	add.w	r1, r4, #12
    3534:	4638      	mov	r0, r7
    3536:	f008 ff87 	bl	c448 <String::String(String const&)>
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
		ln.dfxStep = 0; // first char of displayed extended line 
		break;
	case RIGHT_INS:
		ln.text = inputText + display->getRowCopy(line);
    353a:	6823      	ldr	r3, [r4, #0]
	inline void scrollUp() { rotateUp(); clearRow(rows - 1); }
	inline void scrollDown() { rotateDown(); clearRow(0); }
	void rotateUp();
	void rotateDown();
	//void writeChar(byte row, byte col, byte chr);
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
    353c:	7e1a      	ldrb	r2, [r3, #24]
    353e:	42aa      	cmp	r2, r5
    3540:	f200 80cf 	bhi.w	36e2 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x256>
    3544:	f10d 0910 	add.w	r9, sp, #16
    3548:	4976      	ldr	r1, [pc, #472]	; (3724 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    354a:	4648      	mov	r0, r9
    354c:	f008 ff56 	bl	c3fc <String::String(char const*)>
    3550:	4649      	mov	r1, r9
    3552:	4638      	mov	r0, r7
    3554:	f009 f886 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    3558:	4601      	mov	r1, r0
    355a:	4630      	mov	r0, r6
    355c:	f008 ffec 	bl	c538 <String::operator=(String const&)>
    3560:	4648      	mov	r0, r9
    3562:	f008 ff0b 	bl	c37c <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    3566:	4638      	mov	r0, r7
    3568:	f008 ff08 	bl	c37c <String::~String()>
		ln.dfxStep = inputText.length(); // first char of displayed extended line 
    356c:	6963      	ldr	r3, [r4, #20]
    356e:	8333      	strh	r3, [r6, #24]
		break;
    3570:	e7ce      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    3572:	f1b9 0f00 	cmp.w	r9, #0
    3576:	f040 80ce 	bne.w	3716 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x28a>
    357a:	7e1a      	ldrb	r2, [r3, #24]
    357c:	42aa      	cmp	r2, r5
    357e:	f200 80c2 	bhi.w	3706 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x27a>
    3582:	af08      	add	r7, sp, #32
    3584:	4967      	ldr	r1, [pc, #412]	; (3724 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    3586:	4638      	mov	r0, r7
    3588:	f008 ff38 	bl	c3fc <String::String(char const*)>
    358c:	4639      	mov	r1, r7
    358e:	4630      	mov	r0, r6
    3590:	f008 ffda 	bl	c548 <String::operator=(String&&)>
    3594:	4638      	mov	r0, r7
    3596:	f008 fef1 	bl	c37c <String::~String()>
		ln.dfxStep = txLen-1; // rightmost text character index on display
    359a:	f109 33ff 	add.w	r3, r9, #4294967295
    359e:	8333      	strh	r3, [r6, #24]
	case RIGHT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    35a0:	f1b9 0f00 	cmp.w	r9, #0
    35a4:	f040 8085 	bne.w	36b2 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x226>
    35a8:	6823      	ldr	r3, [r4, #0]
    35aa:	7e1a      	ldrb	r2, [r3, #24]
    35ac:	42aa      	cmp	r2, r5
    35ae:	d879      	bhi.n	36a4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x218>
    35b0:	495c      	ldr	r1, [pc, #368]	; (3724 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    35b2:	4638      	mov	r0, r7
    35b4:	f008 ff22 	bl	c3fc <String::String(char const*)>
    35b8:	4639      	mov	r1, r7
    35ba:	4630      	mov	r0, r6
    35bc:	f008 ffc4 	bl	c548 <String::operator=(String&&)>
    35c0:	4638      	mov	r0, r7
    35c2:	f008 fedb 	bl	c37c <String::~String()>
		ln.dfxStep = 0; // leftmost text character index on display
    35c6:	2300      	movs	r3, #0
    35c8:	8333      	strh	r3, [r6, #24]
		break;
    35ca:	e7a1      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
	case SPRAY:
		ln.text = inputText; // cuts overwidth lines
    35cc:	f104 010c 	add.w	r1, r4, #12
    35d0:	4630      	mov	r0, r6
    35d2:	f008 ffb1 	bl	c538 <String::operator=(String const&)>
		display->clearRow(line);
    35d6:	4629      	mov	r1, r5
    35d8:	6820      	ldr	r0, [r4, #0]
    35da:	f002 fa67 	bl	5aac <TextDisplay::clearRow(unsigned char)>
		ln.dfxStep = 0; // completed line characters
    35de:	2300      	movs	r3, #0
    35e0:	8333      	strh	r3, [r6, #24]
		break;
    35e2:	e795      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
    35e4:	7e1a      	ldrb	r2, [r3, #24]
    35e6:	42aa      	cmp	r2, r5
    35e8:	d869      	bhi.n	36be <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x232>
    35ea:	f10d 0910 	add.w	r9, sp, #16
    35ee:	494d      	ldr	r1, [pc, #308]	; (3724 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    35f0:	4648      	mov	r0, r9
    35f2:	f008 ff03 	bl	c3fc <String::String(char const*)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    35f6:	4649      	mov	r1, r9
    35f8:	a808      	add	r0, sp, #32
    35fa:	f008 ff25 	bl	c448 <String::String(String const&)>
		ln.dfxStep = 0; // first char of displayed extended line 
		ln.dfxAux = 0; // text direction: 0 = left, 1 = right
		//display->setText(line, ln.text);
		break;
	case LEFT_SCRL:
		ln.text = display->getRowCopy(line) + spaces;
    35fe:	4669      	mov	r1, sp
    3600:	a808      	add	r0, sp, #32
	case RIGHT_SCRL:
		ln.text = spaces + display->getRowCopy(line);
		ln.dfxStep = columns; // first char of displayed extended line 
		break;
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
    3602:	f009 f82f 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    3606:	4601      	mov	r1, r0
    3608:	4630      	mov	r0, r6
    360a:	f008 ff95 	bl	c538 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    360e:	a808      	add	r0, sp, #32
    3610:	f008 feb4 	bl	c37c <String::~String()>
    3614:	4648      	mov	r0, r9
    3616:	f008 feb1 	bl	c37c <String::~String()>
		ln.dfxStep = 0; // first char of displayed extended line 
    361a:	2300      	movs	r3, #0
    361c:	8333      	strh	r3, [r6, #24]
		break;
    361e:	e777      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3620:	af08      	add	r7, sp, #32
    3622:	4669      	mov	r1, sp
    3624:	4638      	mov	r0, r7
    3626:	f008 ff0f 	bl	c448 <String::String(String const&)>
	case LEFT_SCRL:
		ln.text = display->getRowCopy(line) + spaces;
		ln.dfxStep = 0; // first char of displayed extended line 
		break;
	case RIGHT_SCRL:
		ln.text = spaces + display->getRowCopy(line);
    362a:	6823      	ldr	r3, [r4, #0]
    362c:	7e1a      	ldrb	r2, [r3, #24]
    362e:	42aa      	cmp	r2, r5
    3630:	d84e      	bhi.n	36d0 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x244>
    3632:	f10d 0910 	add.w	r9, sp, #16
    3636:	493b      	ldr	r1, [pc, #236]	; (3724 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    3638:	4648      	mov	r0, r9
    363a:	f008 fedf 	bl	c3fc <String::String(char const*)>
    363e:	4649      	mov	r1, r9
    3640:	4638      	mov	r0, r7
    3642:	f009 f80f 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    3646:	4601      	mov	r1, r0
    3648:	4630      	mov	r0, r6
    364a:	f008 ff75 	bl	c538 <String::operator=(String const&)>
    364e:	4648      	mov	r0, r9
    3650:	f008 fe94 	bl	c37c <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    3654:	4638      	mov	r0, r7
    3656:	f008 fe91 	bl	c37c <String::~String()>
		ln.dfxStep = columns; // first char of displayed extended line 
    365a:	f8a6 a018 	strh.w	sl, [r6, #24]
		break;
    365e:	e757      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
    3660:	7e1a      	ldrb	r2, [r3, #24]
    3662:	42aa      	cmp	r2, r5
    3664:	d846      	bhi.n	36f4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x268>
    3666:	f10d 0910 	add.w	r9, sp, #16
    366a:	492e      	ldr	r1, [pc, #184]	; (3724 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    366c:	4648      	mov	r0, r9
    366e:	f008 fec5 	bl	c3fc <String::String(char const*)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3672:	4649      	mov	r1, r9
    3674:	a808      	add	r0, sp, #32
    3676:	f008 fee7 	bl	c448 <String::String(String const&)>
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
    367a:	a808      	add	r0, sp, #32
    367c:	f104 010c 	add.w	r1, r4, #12
    3680:	e7bf      	b.n	3602 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x176>
    3682:	af08      	add	r7, sp, #32
    3684:	e78c      	b.n	35a0 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x114>
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
	}
	if (effectId == BOUNCE_OUT) {
		if (txLen < rows) effectId = BOUNCE_IN;
		else if (txLen == rows) effectId = NONE;
    3686:	f47f af33 	bne.w	34f0 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x64>
	}

	switch (effectId) {
	case NONE:
		ln.text = inputText;
    368a:	f104 010c 	add.w	r1, r4, #12
    368e:	4630      	mov	r0, r6
    3690:	f008 ff52 	bl	c538 <String::operator=(String const&)>
		break;
    3694:	e73c      	b.n	3510 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
		ln.text = inputText; // cuts overwidth lines
		display->clearRow(line);
		ln.dfxStep = 0; // completed line characters
		break;
	default:
		ln.dfxEnabled = false;
    3696:	2300      	movs	r3, #0
		ln.dfxStep = 0; // chars completed
		return;
    3698:	4668      	mov	r0, sp
		ln.text = inputText; // cuts overwidth lines
		display->clearRow(line);
		ln.dfxStep = 0; // completed line characters
		break;
	default:
		ln.dfxEnabled = false;
    369a:	74b3      	strb	r3, [r6, #18]
		ln.dfxStep = 0; // chars completed
    369c:	8333      	strh	r3, [r6, #24]
		return;
    369e:	f008 fe6d 	bl	c37c <String::~String()>
    36a2:	e741      	b.n	3528 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x9c>
    36a4:	685b      	ldr	r3, [r3, #4]
    36a6:	4638      	mov	r0, r7
    36a8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    36ac:	f008 fea6 	bl	c3fc <String::String(char const*)>
    36b0:	e782      	b.n	35b8 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x12c>
		break;
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
		ln.dfxStep = txLen-1; // rightmost text character index on display
	case RIGHT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    36b2:	f104 010c 	add.w	r1, r4, #12
    36b6:	4638      	mov	r0, r7
    36b8:	f008 fec6 	bl	c448 <String::String(String const&)>
    36bc:	e77c      	b.n	35b8 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x12c>
    36be:	685b      	ldr	r3, [r3, #4]
    36c0:	f10d 0910 	add.w	r9, sp, #16
    36c4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    36c8:	4648      	mov	r0, r9
    36ca:	f008 fe97 	bl	c3fc <String::String(char const*)>
    36ce:	e792      	b.n	35f6 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x16a>
    36d0:	685b      	ldr	r3, [r3, #4]
    36d2:	f10d 0910 	add.w	r9, sp, #16
    36d6:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    36da:	4648      	mov	r0, r9
    36dc:	f008 fe8e 	bl	c3fc <String::String(char const*)>
    36e0:	e7ad      	b.n	363e <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1b2>
    36e2:	685b      	ldr	r3, [r3, #4]
    36e4:	f10d 0910 	add.w	r9, sp, #16
    36e8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    36ec:	4648      	mov	r0, r9
    36ee:	f008 fe85 	bl	c3fc <String::String(char const*)>
    36f2:	e72d      	b.n	3550 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0xc4>
    36f4:	685b      	ldr	r3, [r3, #4]
    36f6:	f10d 0910 	add.w	r9, sp, #16
    36fa:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    36fe:	4648      	mov	r0, r9
    3700:	f008 fe7c 	bl	c3fc <String::String(char const*)>
    3704:	e7b5      	b.n	3672 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1e6>
    3706:	685b      	ldr	r3, [r3, #4]
    3708:	af08      	add	r7, sp, #32
    370a:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    370e:	4638      	mov	r0, r7
    3710:	f008 fe74 	bl	c3fc <String::String(char const*)>
    3714:	e73a      	b.n	358c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x100>
	case RIGHT_INS:
		ln.text = inputText + display->getRowCopy(line);
		ln.dfxStep = inputText.length(); // first char of displayed extended line 
		break;
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    3716:	af08      	add	r7, sp, #32
    3718:	f104 010c 	add.w	r1, r4, #12
    371c:	4638      	mov	r0, r7
    371e:	f008 fe93 	bl	c448 <String::String(String const&)>
    3722:	e733      	b.n	358c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x100>
    3724:	20000af0 	.word	0x20000af0

00003728 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>:
		startBlinking(line);
	}
	else stopBlinking(line);
}

void ExtTextDisplay::setDynamicFX(byte line, const char* text, DFX_type effectId) {
    3728:	b570      	push	{r4, r5, r6, lr}
	if (line >= rows) return;
    372a:	7f04      	ldrb	r4, [r0, #28]
    372c:	428c      	cmp	r4, r1
    372e:	d800      	bhi.n	3732 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)+0xa>
    3730:	bd70      	pop	{r4, r5, r6, pc}
    3732:	461e      	mov	r6, r3
    3734:	460d      	mov	r5, r1
    3736:	4604      	mov	r4, r0
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
    3738:	4611      	mov	r1, r2
    373a:	300c      	adds	r0, #12
    373c:	f008 ff0c 	bl	c558 <String::operator=(char const*)>
	_enableDisplayEffect(line, effectId);
    3740:	4632      	mov	r2, r6
    3742:	4629      	mov	r1, r5
    3744:	4620      	mov	r0, r4
}
    3746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void ExtTextDisplay::setDynamicFX(byte line, const char* text, DFX_type effectId) {
	if (line >= rows) return;
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
    374a:	f7ff be9f 	b.w	348c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>
    374e:	bf00      	nop

00003750 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)>:
}

 void ExtTextDisplay::setDynamicFX(byte line, String& text, DFX_type effectId) {
    3750:	b570      	push	{r4, r5, r6, lr}
	if (line >= rows) return;
    3752:	7f04      	ldrb	r4, [r0, #28]
    3754:	428c      	cmp	r4, r1
    3756:	d800      	bhi.n	375a <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)+0xa>
    3758:	bd70      	pop	{r4, r5, r6, pc}
    375a:	461e      	mov	r6, r3
    375c:	460d      	mov	r5, r1
    375e:	4604      	mov	r4, r0
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
    3760:	4611      	mov	r1, r2
    3762:	300c      	adds	r0, #12
    3764:	f008 fee8 	bl	c538 <String::operator=(String const&)>
	_enableDisplayEffect(line, effectId);
    3768:	4632      	mov	r2, r6
    376a:	4629      	mov	r1, r5
    376c:	4620      	mov	r0, r4
}
    376e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 void ExtTextDisplay::setDynamicFX(byte line, String& text, DFX_type effectId) {
	if (line >= rows) return;
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
    3772:	f7ff be8b 	b.w	348c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>
    3776:	bf00      	nop

00003778 <ExtTextDisplay::update(unsigned long)>:
		ln.dfxEnabled = false;
		return;
	}
}

bool ExtTextDisplay::update(uint32_t t) {
    3778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool changed = false;

	// DFX
	DFXTextLine* ln;
	for (byte i = 0; i < rows; i++) {
    377c:	7f05      	ldrb	r5, [r0, #28]
    377e:	2d00      	cmp	r5, #0
    3780:	d057      	beq.n	3832 <ExtTextDisplay::update(unsigned long)+0xba>
    3782:	2400      	movs	r4, #0
    3784:	4606      	mov	r6, r0
    3786:	460f      	mov	r7, r1
    3788:	4620      	mov	r0, r4
		ln = &extLine[i];
    378a:	6873      	ldr	r3, [r6, #4]
    378c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
		if (ln->dfxEnabled) {
    3790:	7c9a      	ldrb	r2, [r3, #18]
    3792:	b14a      	cbz	r2, 37a8 <ExtTextDisplay::update(unsigned long)+0x30>
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
    3794:	695a      	ldr	r2, [r3, #20]
    3796:	8b99      	ldrh	r1, [r3, #28]
    3798:	1aba      	subs	r2, r7, r2
    379a:	428a      	cmp	r2, r1
    379c:	d304      	bcc.n	37a8 <ExtTextDisplay::update(unsigned long)+0x30>
				ln->dfxLastStepTime = t;
    379e:	615f      	str	r7, [r3, #20]
				DFXStep(i);
				changed = true;
    37a0:	2001      	movs	r0, #1
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
    37a2:	7f35      	ldrb	r5, [r6, #28]
    37a4:	42a5      	cmp	r5, r4
    37a6:	d83d      	bhi.n	3824 <ExtTextDisplay::update(unsigned long)+0xac>
bool ExtTextDisplay::update(uint32_t t) {
	bool changed = false;

	// DFX
	DFXTextLine* ln;
	for (byte i = 0; i < rows; i++) {
    37a8:	3401      	adds	r4, #1
    37aa:	b2e4      	uxtb	r4, r4
    37ac:	42ac      	cmp	r4, r5
    37ae:	d3ec      	bcc.n	378a <ExtTextDisplay::update(unsigned long)+0x12>
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    37b0:	2d00      	cmp	r5, #0
    37b2:	d041      	beq.n	3838 <ExtTextDisplay::update(unsigned long)+0xc0>
    37b4:	2300      	movs	r3, #0
    37b6:	f8d6 e008 	ldr.w	lr, [r6, #8]
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    37ba:	f04f 0c64 	mov.w	ip, #100	; 0x64
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    37be:	4698      	mov	r8, r3
    37c0:	e008      	b.n	37d4 <ExtTextDisplay::update(unsigned long)+0x5c>
    37c2:	428d      	cmp	r5, r1
    37c4:	d912      	bls.n	37ec <ExtTextDisplay::update(unsigned long)+0x74>
    37c6:	f882 8010 	strb.w	r8, [r2, #16]
    37ca:	7f35      	ldrb	r5, [r6, #28]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    37cc:	3301      	adds	r3, #1
    37ce:	b2db      	uxtb	r3, r3
    37d0:	429d      	cmp	r5, r3
    37d2:	d925      	bls.n	3820 <ExtTextDisplay::update(unsigned long)+0xa8>
		bl = &blinkParams[i];
    37d4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    37d8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
    37dc:	7c11      	ldrb	r1, [r2, #16]
    37de:	2900      	cmp	r1, #0
    37e0:	d0f4      	beq.n	37cc <ExtTextDisplay::update(unsigned long)+0x54>
	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
    37e2:	6955      	ldr	r5, [r2, #20]
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    37e4:	8b51      	ldrh	r1, [r2, #26]
	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
    37e6:	1b7d      	subs	r5, r7, r5
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    37e8:	2900      	cmp	r1, #0
    37ea:	d1ea      	bne.n	37c2 <ExtTextDisplay::update(unsigned long)+0x4a>
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
    37ec:	8b14      	ldrh	r4, [r2, #24]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    37ee:	3301      	adds	r3, #1
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    37f0:	f892 a012 	ldrb.w	sl, [r2, #18]
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
    37f4:	f892 9011 	ldrb.w	r9, [r2, #17]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    37f8:	b2db      	uxtb	r3, r3
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    37fa:	fbb5 f1f4 	udiv	r1, r5, r4
    37fe:	fb04 5511 	mls	r5, r4, r1, r5
    3802:	fb0c f505 	mul.w	r5, ip, r5
    3806:	fbb5 f4f4 	udiv	r4, r5, r4
    380a:	4554      	cmp	r4, sl
    380c:	bf8c      	ite	hi
    380e:	2400      	movhi	r4, #0
    3810:	2401      	movls	r4, #1
				if (bl->phase != lastState) changed = true;
    3812:	45a1      	cmp	r9, r4
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    3814:	7454      	strb	r4, [r2, #17]
    3816:	7f35      	ldrb	r5, [r6, #28]
				if (bl->phase != lastState) changed = true;
    3818:	bf18      	it	ne
    381a:	2001      	movne	r0, #1
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    381c:	429d      	cmp	r5, r3
    381e:	d8d9      	bhi.n	37d4 <ExtTextDisplay::update(unsigned long)+0x5c>
    3820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3824:	4630      	mov	r0, r6
    3826:	4621      	mov	r1, r4
    3828:	f7ff fce2 	bl	31f0 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]>
    382c:	7f35      	ldrb	r5, [r6, #28]
		ln = &extLine[i];
		if (ln->dfxEnabled) {
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
				ln->dfxLastStepTime = t;
				DFXStep(i);
				changed = true;
    382e:	2001      	movs	r0, #1
    3830:	e7ba      	b.n	37a8 <ExtTextDisplay::update(unsigned long)+0x30>
		return;
	}
}

bool ExtTextDisplay::update(uint32_t t) {
	bool changed = false;
    3832:	4628      	mov	r0, r5
			}
		}
	}

	return changed;
}
    3834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000383c <ExtTextDisplay::_clearBlinkMask(unsigned char)>:
	LineBlinkParams& bl = blinkParams[row];
	if (bl.enabled) return ((bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
	return ch;
}

 void ExtTextDisplay::_clearBlinkMask(byte row) {
    383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 LineBlinkParams& lbp = blinkParams[row];
    383e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3842:	6883      	ldr	r3, [r0, #8]
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
    3844:	7f42      	ldrb	r2, [r0, #29]
	if (bl.enabled) return ((bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
	return ch;
}

 void ExtTextDisplay::_clearBlinkMask(byte row) {
	 LineBlinkParams& lbp = blinkParams[row];
    3846:	eb03 0681 	add.w	r6, r3, r1, lsl #2
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
    384a:	b162      	cbz	r2, 3866 <ExtTextDisplay::_clearBlinkMask(unsigned char)+0x2a>
    384c:	4605      	mov	r5, r0
    384e:	2400      	movs	r4, #0
    3850:	2720      	movs	r7, #32
    3852:	4621      	mov	r1, r4
    3854:	3401      	adds	r4, #1
    3856:	4630      	mov	r0, r6
    3858:	f008 ff40 	bl	c6dc <String::operator[](unsigned int)>
    385c:	7007      	strb	r7, [r0, #0]
    385e:	b2e4      	uxtb	r4, r4
    3860:	7f6b      	ldrb	r3, [r5, #29]
    3862:	42a3      	cmp	r3, r4
    3864:	d8f5      	bhi.n	3852 <ExtTextDisplay::_clearBlinkMask(unsigned char)+0x16>
    3866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003868 <ExtTextDisplay::clearLine(unsigned char)>:
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}

void ExtTextDisplay::clearLine(byte line) {
    3868:	b538      	push	{r3, r4, r5, lr}
    386a:	4604      	mov	r4, r0
	display->clearRow(line);
    386c:	6800      	ldr	r0, [r0, #0]
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}

void ExtTextDisplay::clearLine(byte line) {
    386e:	460d      	mov	r5, r1
	display->clearRow(line);
    3870:	f002 f91c 	bl	5aac <TextDisplay::clearRow(unsigned char)>
	}

	inline void stopDynamicFX(byte line) {
		if (line < rows) extLine[line].dfxEnabled = false;
    3874:	7f23      	ldrb	r3, [r4, #28]
    3876:	6860      	ldr	r0, [r4, #4]
    3878:	42ab      	cmp	r3, r5
    387a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    387e:	d901      	bls.n	3884 <ExtTextDisplay::clearLine(unsigned char)+0x1c>
    3880:	2300      	movs	r3, #0
    3882:	7483      	strb	r3, [r0, #18]
	inline void setBlinkMask(byte line, String& mask) {
		blinkParams[line].mask = mask.substring(0, cols);
	}

	inline void stopBlinking(byte line) {
		blinkParams[line].enabled = false;
    3884:	68a3      	ldr	r3, [r4, #8]
    3886:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    388a:	2200      	movs	r2, #0
    388c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	stopDynamicFX(line);
	stopBlinking(line);
	extLine[line].text = "";
    3890:	4904      	ldr	r1, [pc, #16]	; (38a4 <ExtTextDisplay::clearLine(unsigned char)+0x3c>)
    3892:	741a      	strb	r2, [r3, #16]
    3894:	f008 fe60 	bl	c558 <String::operator=(char const*)>
	_clearBlinkMask(line);
    3898:	4629      	mov	r1, r5
    389a:	4620      	mov	r0, r4
}
    389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void ExtTextDisplay::clearLine(byte line) {
	display->clearRow(line);
	stopDynamicFX(line);
	stopBlinking(line);
	extLine[line].text = "";
	_clearBlinkMask(line);
    38a0:	f7ff bfcc 	b.w	383c <ExtTextDisplay::_clearBlinkMask(unsigned char)>
    38a4:	20000af0 	.word	0x20000af0

000038a8 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)>:
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
    38a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38ac:	2500      	movs	r5, #0
    38ae:	4606      	mov	r6, r0
    38b0:	460f      	mov	r7, r1
    38b2:	b084      	sub	sp, #16
    38b4:	6005      	str	r5, [r0, #0]
    38b6:	4629      	mov	r1, r5
    38b8:	6045      	str	r5, [r0, #4]
    38ba:	300c      	adds	r0, #12
    38bc:	f008 fd9e 	bl	c3fc <String::String(char const*)>
    38c0:	7775      	strb	r5, [r6, #29]
    38c2:	7735      	strb	r5, [r6, #28]
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    38c4:	f04f 0820 	mov.w	r8, #32
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
    38c8:	6037      	str	r7, [r6, #0]
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    38ca:	2008      	movs	r0, #8
    38cc:	7e3c      	ldrb	r4, [r7, #24]
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
    38ce:	7734      	strb	r4, [r6, #28]
    38d0:	7e7b      	ldrb	r3, [r7, #25]
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    38d2:	fb08 0004 	mla	r0, r8, r4, r0
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
    38d6:	7773      	strb	r3, [r6, #29]
	extLine = new DFXTextLine[rows];
    38d8:	f008 fc48 	bl	c16c <operator new[](unsigned int)>
    38dc:	6044      	str	r4, [r0, #4]
    38de:	f100 0908 	add.w	r9, r0, #8
    38e2:	f8c0 8000 	str.w	r8, [r0]
    38e6:	b1ac      	cbz	r4, 3914 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x6c>
    38e8:	1e67      	subs	r7, r4, #1
		uint32_t startTime = 0; // blink effect start time
		uint16_t period = DEF_BLINK_PERIOD; // blink _period (on+off) [ms]
		uint16_t duration = DEF_BLINK_DURATION; // blink effect duration [ms]: 0 is forever
	};

	struct DFXTextLine {
    38ea:	f04f 0801 	mov.w	r8, #1
    38ee:	464c      	mov	r4, r9
    38f0:	3f01      	subs	r7, #1
    38f2:	4620      	mov	r0, r4
    38f4:	2100      	movs	r1, #0
    38f6:	3420      	adds	r4, #32
    38f8:	f008 fd80 	bl	c3fc <String::String(char const*)>
    38fc:	1c7a      	adds	r2, r7, #1
    38fe:	f804 8c10 	strb.w	r8, [r4, #-16]
    3902:	f804 5c0f 	strb.w	r5, [r4, #-15]
    3906:	f804 5c0e 	strb.w	r5, [r4, #-14]
    390a:	f844 5c0c 	str.w	r5, [r4, #-12]
    390e:	f824 5c08 	strh.w	r5, [r4, #-8]
    3912:	d1ed      	bne.n	38f0 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x48>
	blinkParams = new LineBlinkParams[rows];
    3914:	7f34      	ldrb	r4, [r6, #28]
    3916:	271c      	movs	r7, #28
    3918:	2008      	movs	r0, #8

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    391a:	f8c6 9004 	str.w	r9, [r6, #4]
	blinkParams = new LineBlinkParams[rows];
    391e:	1e65      	subs	r5, r4, #1
    3920:	fb07 0004 	mla	r0, r7, r4, r0
    3924:	f008 fc22 	bl	c16c <operator new[](unsigned int)>
    3928:	6007      	str	r7, [r0, #0]
    392a:	f100 0808 	add.w	r8, r0, #8
    392e:	6044      	str	r4, [r0, #4]
    3930:	b1d4      	cbz	r4, 3968 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0xc0>
    3932:	4644      	mov	r4, r8
	static const byte LINE_MAX_LEN = 100;
	static const uint16_t STD_DFX_DELAY = 30;
	static const int DEF_BLINK_PERIOD = 500; // [ms]
	static const int DEF_BLINK_DURATION = 0; // [ms]

	struct LineBlinkParams {
    3934:	2700      	movs	r7, #0
    3936:	f04f 0a01 	mov.w	sl, #1
    393a:	f04f 0932 	mov.w	r9, #50	; 0x32
    393e:	4620      	mov	r0, r4
    3940:	2100      	movs	r1, #0
    3942:	f008 fd5b 	bl	c3fc <String::String(char const*)>
    3946:	3d01      	subs	r5, #1
    3948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    394c:	7427      	strb	r7, [r4, #16]
    394e:	f884 a011 	strb.w	sl, [r4, #17]
    3952:	341c      	adds	r4, #28
    3954:	f824 3c04 	strh.w	r3, [r4, #-4]
    3958:	1c6b      	adds	r3, r5, #1
    395a:	f804 9c0a 	strb.w	r9, [r4, #-10]
    395e:	f844 7c08 	str.w	r7, [r4, #-8]
    3962:	f824 7c02 	strh.w	r7, [r4, #-2]
    3966:	d1ea      	bne.n	393e <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x96>
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    3968:	7f33      	ldrb	r3, [r6, #28]
ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
    396a:	f8c6 8008 	str.w	r8, [r6, #8]
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    396e:	b38b      	cbz	r3, 39d4 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x12c>
    3970:	2500      	movs	r5, #0
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
		bl->phase = true;
    3972:	f04f 0901 	mov.w	r9, #1
		bl->dutyCycle = 50;
    3976:	2732      	movs	r7, #50	; 0x32
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
    3978:	46aa      	mov	sl, r5
    397a:	e001      	b.n	3980 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0xd8>
    397c:	f8d6 8008 	ldr.w	r8, [r6, #8]
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
    3980:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
    3984:	6831      	ldr	r1, [r6, #0]
    3986:	4668      	mov	r0, sp
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    3988:	3501      	adds	r5, #1
		bl = &(blinkParams[i]);
    398a:	eb08 0483 	add.w	r4, r8, r3, lsl #2
    398e:	311c      	adds	r1, #28
    3990:	f008 fd5a 	bl	c448 <String::String(String const&)>
		bl->mask = display->getSpacesRow();
    3994:	4669      	mov	r1, sp
    3996:	4620      	mov	r0, r4
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    3998:	b2ed      	uxtb	r5, r5
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
    399a:	f008 fdd5 	bl	c548 <String::operator=(String&&)>
    399e:	4668      	mov	r0, sp
    39a0:	f008 fcec 	bl	c37c <String::~String()>
		bl->enabled = false;
		bl->phase = true;
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
    39a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
    39a8:	f884 a010 	strb.w	sl, [r4, #16]
		bl->phase = true;
    39ac:	f884 9011 	strb.w	r9, [r4, #17]
		bl->dutyCycle = 50;
    39b0:	74a7      	strb	r7, [r4, #18]
		bl->period = DEF_BLINK_PERIOD;
		bl->duration = DEF_BLINK_DURATION;
    39b2:	f8a4 a01a 	strh.w	sl, [r4, #26]
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
		bl->phase = true;
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
    39b6:	8323      	strh	r3, [r4, #24]
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    39b8:	7f33      	ldrb	r3, [r6, #28]
    39ba:	42ab      	cmp	r3, r5
    39bc:	d8de      	bhi.n	397c <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0xd4>
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	}

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    39be:	b14b      	cbz	r3, 39d4 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x12c>
    39c0:	2400      	movs	r4, #0
    39c2:	4621      	mov	r1, r4
    39c4:	3401      	adds	r4, #1
    39c6:	4630      	mov	r0, r6
    39c8:	f7ff ff4e 	bl	3868 <ExtTextDisplay::clearLine(unsigned char)>
    39cc:	7f33      	ldrb	r3, [r6, #28]
    39ce:	b2e4      	uxtb	r4, r4
    39d0:	42a3      	cmp	r3, r4
    39d2:	d8f6      	bhi.n	39c2 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x11a>
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}
    39d4:	4630      	mov	r0, r6
    39d6:	b004      	add	sp, #16
    39d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000039dc <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)>:
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    39dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39e0:	4605      	mov	r5, r0
	char ch;
	byte max = text.length() + pos;
    39e2:	6897      	ldr	r7, [r2, #8]
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    39e4:	461c      	mov	r4, r3
    39e6:	4690      	mov	r8, r2
	char ch;
	byte max = text.length() + pos;
    39e8:	441f      	add	r7, r3
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    39ea:	460e      	mov	r6, r1
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
    39ec:	f7ff ff26 	bl	383c <ExtTextDisplay::_clearBlinkMask(unsigned char)>
	for (byte i = pos; i < cols && i < max; i++) {
    39f0:	7f6b      	ldrb	r3, [r5, #29]
    39f2:	42a3      	cmp	r3, r4
    39f4:	d91f      	bls.n	3a36 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
    39f6:	b2ff      	uxtb	r7, r7
    39f8:	42bc      	cmp	r4, r7
    39fa:	d21c      	bcs.n	3a36 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
    39fc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    3a00:	46a1      	mov	r9, r4
    3a02:	00b6      	lsls	r6, r6, #2
    3a04:	e001      	b.n	3a0a <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x2e>
    3a06:	42a7      	cmp	r7, r4
    3a08:	d915      	bls.n	3a36 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
		ch = text.charAt(i - pos);
    3a0a:	ebc9 0104 	rsb	r1, r9, r4
    3a0e:	4640      	mov	r0, r8
    3a10:	f008 fe54 	bl	c6bc <String::charAt(unsigned int) const>
    3a14:	4682      	mov	sl, r0
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    3a16:	68a8      	ldr	r0, [r5, #8]
    3a18:	4621      	mov	r1, r4

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    3a1a:	3401      	adds	r4, #1
		ch = text.charAt(i - pos);
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    3a1c:	4430      	add	r0, r6
    3a1e:	f008 fe5d 	bl	c6dc <String::operator[](unsigned int)>
    3a22:	f1ba 0f20 	cmp.w	sl, #32

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    3a26:	b2e4      	uxtb	r4, r4
		ch = text.charAt(i - pos);
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    3a28:	bf14      	ite	ne
    3a2a:	2278      	movne	r2, #120	; 0x78
    3a2c:	2220      	moveq	r2, #32
    3a2e:	7002      	strb	r2, [r0, #0]

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    3a30:	7f6b      	ldrb	r3, [r5, #29]
    3a32:	42a3      	cmp	r3, r4
    3a34:	d8e7      	bhi.n	3a06 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x2a>
    3a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a3a:	bf00      	nop

00003a3c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>:
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    3a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    3a40:	7f04      	ldrb	r4, [r0, #28]
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    3a42:	b089      	sub	sp, #36	; 0x24
    3a44:	4690      	mov	r8, r2
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    3a46:	428c      	cmp	r4, r1
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    3a48:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    3a4c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    3a50:	d802      	bhi.n	3a58 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x1c>
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    3a52:	b009      	add	sp, #36	; 0x24
    3a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
    3a58:	b20e      	sxth	r6, r1
    3a5a:	4604      	mov	r4, r0
    3a5c:	6840      	ldr	r0, [r0, #4]
    3a5e:	460d      	mov	r5, r1
    3a60:	0177      	lsls	r7, r6, #5
    3a62:	4641      	mov	r1, r8
    3a64:	4699      	mov	r9, r3
    3a66:	9203      	str	r2, [sp, #12]
    3a68:	4438      	add	r0, r7
	extLine[line].dfxType = NONE;
    3a6a:	f04f 0b00 	mov.w	fp, #0

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
    3a6e:	f008 fd63 	bl	c538 <String::operator=(String const&)>
	extLine[line].dfxType = NONE;
    3a72:	6863      	ldr	r3, [r4, #4]
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
    3a74:	4641      	mov	r1, r8
    3a76:	a804      	add	r0, sp, #16
 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    3a78:	441f      	add	r7, r3
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
    3a7a:	6823      	ldr	r3, [r4, #0]
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
    3a7c:	f8a7 9018 	strh.w	r9, [r7, #24]
 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    3a80:	f887 b011 	strb.w	fp, [r7, #17]
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
    3a84:	f887 b012 	strb.w	fp, [r7, #18]
	display->setText(line, pos, text, clearBefore);
    3a88:	9302      	str	r3, [sp, #8]
    3a8a:	f008 fcdd 	bl	c448 <String::String(String const&)>
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}
	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    3a8e:	a802      	add	r0, sp, #8
    3a90:	4629      	mov	r1, r5
    3a92:	c80d      	ldmia	r0, {r0, r2, r3}
    3a94:	9200      	str	r2, [sp, #0]
    3a96:	464a      	mov	r2, r9
    3a98:	f002 f81c 	bl	5ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    3a9c:	a804      	add	r0, sp, #16
    3a9e:	f008 fc6d 	bl	c37c <String::~String()>
	if (blinking) {
    3aa2:	f1ba 0f00 	cmp.w	sl, #0
    3aa6:	d109      	bne.n	3abc <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x80>
	inline void setBlinkMask(byte line, String& mask) {
		blinkParams[line].mask = mask.substring(0, cols);
	}

	inline void stopBlinking(byte line) {
		blinkParams[line].enabled = false;
    3aa8:	68a3      	ldr	r3, [r4, #8]
    3aaa:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    3aae:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    3ab2:	f886 a010 	strb.w	sl, [r6, #16]
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    3ab6:	b009      	add	sp, #36	; 0x24
    3ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    3abc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
	if (blinking) {
		_setBlinkMask(line, text, pos);
    3ac0:	4629      	mov	r1, r5
    3ac2:	4620      	mov	r0, r4
    3ac4:	464b      	mov	r3, r9
    3ac6:	4642      	mov	r2, r8

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    3ac8:	00b6      	lsls	r6, r6, #2
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
	if (blinking) {
		_setBlinkMask(line, text, pos);
    3aca:	f7ff ff87 	bl	39dc <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)>

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    3ace:	68a3      	ldr	r3, [r4, #8]
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
    3ad0:	2532      	movs	r5, #50	; 0x32
    3ad2:	4a07      	ldr	r2, [pc, #28]	; (3af0 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0xb4>)

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    3ad4:	4433      	add	r3, r6
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    3ad6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3ada:	2101      	movs	r1, #1
    3adc:	6812      	ldr	r2, [r2, #0]
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
    3ade:	749d      	strb	r5, [r3, #18]
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3ae0:	68a4      	ldr	r4, [r4, #8]

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    3ae2:	f8a3 b01a 	strh.w	fp, [r3, #26]
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3ae6:	4426      	add	r6, r4
//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    3ae8:	8318      	strh	r0, [r3, #24]
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3aea:	7431      	strb	r1, [r6, #16]
	blinkParams[line].startTime = millis();
    3aec:	6172      	str	r2, [r6, #20]
    3aee:	e7b0      	b.n	3a52 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x16>
    3af0:	20002d58 	.word	0x20002d58

00003af4 <Light::Light()>:

#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
    3af4:	2200      	movs	r2, #0
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
	blinkDutyCycle = 50;
    3af6:	2132      	movs	r1, #50	; 0x32
*/

#include "Light.h"

// constructor with default property values
Light::Light() {
    3af8:	b410      	push	{r4}
	on = false;
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
    3afa:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
	blinkDutyCycle = 50;
    3afe:	7101      	strb	r1, [r0, #4]

#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
    3b00:	7002      	strb	r2, [r0, #0]
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
    3b02:	8044      	strh	r4, [r0, #2]
#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
	impulse = false;
    3b04:	7382      	strb	r2, [r0, #14]
	state = OFF_L;
    3b06:	7042      	strb	r2, [r0, #1]
	blinkPeriod = 500;
	blinkDutyCycle = 50;
	activePeriod = 0;
    3b08:	8182      	strh	r2, [r0, #12]
	//updated = true;
	//_changed = false;
}
    3b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b0e:	4770      	bx	lr

00003b10 <Light::copy(Light*)>:
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
	on = from->on;
	state = from->state;
    3b10:	784a      	ldrb	r2, [r1, #1]
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
    3b12:	884b      	ldrh	r3, [r1, #2]
	activationTime = from.activationTime;
	activePeriod = from.activePeriod;
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
    3b14:	b470      	push	{r4, r5, r6}
	on = from->on;
    3b16:	780c      	ldrb	r4, [r1, #0]
	state = from->state;
    3b18:	7042      	strb	r2, [r0, #1]
	activePeriod = from.activePeriod;
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
	on = from->on;
    3b1a:	7004      	strb	r4, [r0, #0]
	state = from->state;
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
    3b1c:	8043      	strh	r3, [r0, #2]
	blinkDutyCycle = from->blinkDutyCycle;
    3b1e:	790b      	ldrb	r3, [r1, #4]
    3b20:	7103      	strb	r3, [r0, #4]
	activationTime = from->activationTime;
    3b22:	688e      	ldr	r6, [r1, #8]
	activePeriod = from->activePeriod;
    3b24:	898d      	ldrh	r5, [r1, #12]
	impulse = from->impulse;
    3b26:	7b8c      	ldrb	r4, [r1, #14]
	pulseTime = from->pulseTime;
    3b28:	690a      	ldr	r2, [r1, #16]
	pulsePeriod = from->pulsePeriod;
    3b2a:	8a8b      	ldrh	r3, [r1, #20]
	on = from->on;
	state = from->state;
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
	blinkDutyCycle = from->blinkDutyCycle;
	activationTime = from->activationTime;
    3b2c:	6086      	str	r6, [r0, #8]
	activePeriod = from->activePeriod;
    3b2e:	8185      	strh	r5, [r0, #12]
	impulse = from->impulse;
    3b30:	7384      	strb	r4, [r0, #14]
	pulseTime = from->pulseTime;
    3b32:	6102      	str	r2, [r0, #16]
	pulsePeriod = from->pulsePeriod;
    3b34:	8283      	strh	r3, [r0, #20]
}
    3b36:	bc70      	pop	{r4, r5, r6}
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop

00003b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>:
	blinkPeriod = 500; // ON+STATIC_TEXT (ms)
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
    3b3c:	b410      	push	{r4}
	on = (st != OFF_L);
    3b3e:	1c0c      	adds	r4, r1, #0
    3b40:	bf18      	it	ne
    3b42:	2401      	movne	r4, #1
	if (st == ON_L && st != state) {
    3b44:	2901      	cmp	r1, #1
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    3b46:	7004      	strb	r4, [r0, #0]
	blinkPeriod = 500; // ON+STATIC_TEXT (ms)
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
    3b48:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	on = (st != OFF_L);
	if (st == ON_L && st != state) {
    3b4c:	d00d      	beq.n	3b6a <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x2e>
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
    3b4e:	2902      	cmp	r1, #2
    3b50:	d107      	bne.n	3b62 <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x26>
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    3b52:	2a00      	cmp	r2, #0
    3b54:	bf08      	it	eq
    3b56:	22c8      	moveq	r2, #200	; 0xc8
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
    3b58:	2b00      	cmp	r3, #0
    3b5a:	bf08      	it	eq
    3b5c:	2332      	moveq	r3, #50	; 0x32
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    3b5e:	8042      	strh	r2, [r0, #2]
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
    3b60:	7103      	strb	r3, [r0, #4]
	}
	state = st;
    3b62:	7041      	strb	r1, [r0, #1]
}
    3b64:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b68:	4770      	bx	lr
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
	if (st == ON_L && st != state) {
    3b6a:	7843      	ldrb	r3, [r0, #1]
    3b6c:	2b01      	cmp	r3, #1
    3b6e:	d0f8      	beq.n	3b62 <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x26>
    3b70:	4b03      	ldr	r3, [pc, #12]	; (3b80 <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x44>)
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
    3b72:	8184      	strh	r4, [r0, #12]
    3b74:	681b      	ldr	r3, [r3, #0]
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
}
    3b76:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
	if (st == ON_L && st != state) {
		activationTime = millis();
    3b7a:	6083      	str	r3, [r0, #8]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    3b7c:	7041      	strb	r1, [r0, #1]
}
    3b7e:	4770      	bx	lr
    3b80:	20002d58 	.word	0x20002d58

00003b84 <Light::blink(unsigned short, unsigned char, unsigned char)>:

void Light::blink(uint16_t blinkP, byte blinkDutyC, byte ticks) {
    3b84:	b430      	push	{r4, r5}
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    3b86:	b20c      	sxth	r4, r1
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    3b88:	2501      	movs	r5, #1
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
    3b8a:	2a00      	cmp	r2, #0
    3b8c:	bf08      	it	eq
    3b8e:	2232      	moveq	r2, #50	; 0x32
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    3b90:	2900      	cmp	r1, #0
    3b92:	bf08      	it	eq
    3b94:	21c8      	moveq	r1, #200	; 0xc8
	state = st;
}

void Light::blink(uint16_t blinkP, byte blinkDutyC, byte ticks) {
	set(BLINK_L, blinkP, blinkDutyC);
	activePeriod = blinkP * ticks;
    3b96:	fb04 f303 	mul.w	r3, r4, r3
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    3b9a:	2402      	movs	r4, #2
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    3b9c:	7005      	strb	r5, [r0, #0]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    3b9e:	7044      	strb	r4, [r0, #1]
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
    3ba0:	7102      	strb	r2, [r0, #4]
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    3ba2:	8041      	strh	r1, [r0, #2]
	state = st;
}

void Light::blink(uint16_t blinkP, byte blinkDutyC, byte ticks) {
	set(BLINK_L, blinkP, blinkDutyC);
	activePeriod = blinkP * ticks;
    3ba4:	8183      	strh	r3, [r0, #12]
}
    3ba6:	bc30      	pop	{r4, r5}
    3ba8:	4770      	bx	lr
    3baa:	bf00      	nop

00003bac <Light::invert()>:

// inverts light ON/OFF static state
void Light::invert() {
	if (state == ON_L) set(OFF_L);
    3bac:	7843      	ldrb	r3, [r0, #1]
    3bae:	2b01      	cmp	r3, #1
    3bb0:	d008      	beq.n	3bc4 <Light::invert()+0x18>
	else if (state == OFF_L) set(ON_L);
    3bb2:	b933      	cbnz	r3, 3bc2 <Light::invert()+0x16>
    3bb4:	4905      	ldr	r1, [pc, #20]	; (3bcc <Light::invert()+0x20>)
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    3bb6:	2201      	movs	r2, #1
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
    3bb8:	8183      	strh	r3, [r0, #12]
    3bba:	680b      	ldr	r3, [r1, #0]
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    3bbc:	7002      	strb	r2, [r0, #0]
	if (st == ON_L && st != state) {
		activationTime = millis();
    3bbe:	6083      	str	r3, [r0, #8]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    3bc0:	7042      	strb	r2, [r0, #1]
    3bc2:	4770      	bx	lr
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    3bc4:	2300      	movs	r3, #0
    3bc6:	7003      	strb	r3, [r0, #0]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    3bc8:	7043      	strb	r3, [r0, #1]
    3bca:	4770      	bx	lr
    3bcc:	20002d58 	.word	0x20002d58

00003bd0 <Light::pulse(unsigned short)>:
void Light::invert() {
	if (state == ON_L) set(OFF_L);
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
    3bd0:	b410      	push	{r4}
	pulsePeriod = pulseP;
	impulse = true;
	pulseTime = millis();
	on = !on;
    3bd2:	7803      	ldrb	r3, [r0, #0]
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
	impulse = true;
    3bd4:	2401      	movs	r4, #1
    3bd6:	4a05      	ldr	r2, [pc, #20]	; (3bec <Light::pulse(unsigned short)+0x1c>)
	pulseTime = millis();
	on = !on;
    3bd8:	4063      	eors	r3, r4
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
	impulse = true;
    3bda:	7384      	strb	r4, [r0, #14]
    3bdc:	6812      	ldr	r2, [r2, #0]
	if (state == ON_L) set(OFF_L);
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
    3bde:	8281      	strh	r1, [r0, #20]
	impulse = true;
	pulseTime = millis();
    3be0:	6102      	str	r2, [r0, #16]
	on = !on;
    3be2:	7003      	strb	r3, [r0, #0]
}
    3be4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3be8:	4770      	bx	lr
    3bea:	bf00      	nop
    3bec:	20002d58 	.word	0x20002d58

00003bf0 <Light::update(unsigned long)>:
// return true when light changes its on/off state
bool Light::update(uint32_t ms) {
	bool prevState = on;

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
    3bf0:	7843      	ldrb	r3, [r0, #1]
    3bf2:	2b02      	cmp	r3, #2
	pulseTime = millis();
	on = !on;
}

// return true when light changes its on/off state
bool Light::update(uint32_t ms) {
    3bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool prevState = on;
    3bf6:	7805      	ldrb	r5, [r0, #0]

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
    3bf8:	d01c      	beq.n	3c34 <Light::update(unsigned long)+0x44>
    3bfa:	462b      	mov	r3, r5
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
	}

	// pulse state
	if (impulse) {
    3bfc:	7b82      	ldrb	r2, [r0, #14]
    3bfe:	b122      	cbz	r2, 3c0a <Light::update(unsigned long)+0x1a>
		if ((ms - pulseTime) > pulsePeriod) {
    3c00:	6902      	ldr	r2, [r0, #16]
    3c02:	8a84      	ldrh	r4, [r0, #20]
    3c04:	1a8a      	subs	r2, r1, r2
    3c06:	42a2      	cmp	r2, r4
    3c08:	d80e      	bhi.n	3c28 <Light::update(unsigned long)+0x38>
			on = !on;
		}
	}

	// checks light active time
	if (on) {
    3c0a:	b153      	cbz	r3, 3c22 <Light::update(unsigned long)+0x32>
		if (activePeriod > 0 && (ms - activationTime) >= (uint32_t)activePeriod) {
    3c0c:	8982      	ldrh	r2, [r0, #12]
    3c0e:	b142      	cbz	r2, 3c22 <Light::update(unsigned long)+0x32>
    3c10:	6884      	ldr	r4, [r0, #8]
    3c12:	1b09      	subs	r1, r1, r4
    3c14:	4291      	cmp	r1, r2
    3c16:	d304      	bcc.n	3c22 <Light::update(unsigned long)+0x32>
			activePeriod = 0; // resets previous active-time setting
    3c18:	2200      	movs	r2, #0
    3c1a:	4613      	mov	r3, r2
    3c1c:	8182      	strh	r2, [r0, #12]
			state = OFF_L;
    3c1e:	7042      	strb	r2, [r0, #1]
			on = false;
    3c20:	7002      	strb	r2, [r0, #0]
		}
	}

	return (on != prevState);
}
    3c22:	ea85 0003 	eor.w	r0, r5, r3
    3c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
			on = !on;
    3c28:	f083 0301 	eor.w	r3, r3, #1
	}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
    3c2c:	2200      	movs	r2, #0
			on = !on;
    3c2e:	7003      	strb	r3, [r0, #0]
	}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
    3c30:	7382      	strb	r2, [r0, #14]
    3c32:	e7ea      	b.n	3c0a <Light::update(unsigned long)+0x1a>

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
		uint32_t t; // blink ON time
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
    3c34:	6882      	ldr	r2, [r0, #8]
    3c36:	2464      	movs	r4, #100	; 0x64
	bool prevState = on;

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
		uint32_t t; // blink ON time
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
    3c38:	8846      	ldrh	r6, [r0, #2]
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
    3c3a:	1a8a      	subs	r2, r1, r2
    3c3c:	f890 e004 	ldrb.w	lr, [r0, #4]
    3c40:	fbb2 f7f6 	udiv	r7, r2, r6
    3c44:	fb06 2217 	mls	r2, r6, r7, r2
    3c48:	fb04 f202 	mul.w	r2, r4, r2
    3c4c:	fbb2 f3f6 	udiv	r3, r2, r6
    3c50:	4573      	cmp	r3, lr
    3c52:	bf2c      	ite	cs
    3c54:	2300      	movcs	r3, #0
    3c56:	2301      	movcc	r3, #1
    3c58:	7003      	strb	r3, [r0, #0]
    3c5a:	e7cf      	b.n	3bfc <Light::update(unsigned long)+0xc>

00003c5c <LightGroup::LightGroup(char const*, long, ...)>:
//	nameStr = "";
//	_tmpLight = new Light();
//	_size = 0;
//}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
    3c5c:	b40c      	push	{r2, r3}
    3c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c60:	460e      	mov	r6, r1
    3c62:	b085      	sub	sp, #20
    3c64:	2100      	movs	r1, #0
    3c66:	4604      	mov	r4, r0
    3c68:	f008 fbc8 	bl	c3fc <String::String(char const*)>
	_size = 0; 
    3c6c:	2300      	movs	r3, #0
	_tmpLight = new Light();
    3c6e:	2018      	movs	r0, #24
//	_tmpLight = new Light();
//	_size = 0;
//}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
    3c70:	7523      	strb	r3, [r4, #20]
	_tmpLight = new Light();
    3c72:	f008 fa79 	bl	c168 <operator new(unsigned int)>
    3c76:	4607      	mov	r7, r0
    3c78:	f7ff ff3c 	bl	3af4 <Light::Light()>
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
    3c7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
//	_size = 0;
//}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
	_tmpLight = new Light();
    3c7e:	61a7      	str	r7, [r4, #24]
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
    3c80:	1c6b      	adds	r3, r5, #1
    3c82:	7d20      	ldrb	r0, [r4, #20]
    3c84:	d007      	beq.n	3c96 <LightGroup::LightGroup(char const*, long, ...)+0x3a>
    3c86:	ab0a      	add	r3, sp, #40	; 0x28
    3c88:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3c8c:	3001      	adds	r0, #1
    3c8e:	3201      	adds	r2, #1
    3c90:	b2c0      	uxtb	r0, r0
    3c92:	d1f9      	bne.n	3c88 <LightGroup::LightGroup(char const*, long, ...)+0x2c>
    3c94:	7520      	strb	r0, [r4, #20]
	lightNum = new byte[_size];
    3c96:	f008 fa69 	bl	c16c <operator new[](unsigned int)>
	ip = &lNumber;
	for (byte i = 0; i < _size; i++) lightNum[i] = (byte)*(ip+i);
    3c9a:	7d23      	ldrb	r3, [r4, #20]
LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
	_tmpLight = new Light();
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
	lightNum = new byte[_size];
    3c9c:	6120      	str	r0, [r4, #16]
	ip = &lNumber;
	for (byte i = 0; i < _size; i++) lightNum[i] = (byte)*(ip+i);
    3c9e:	b15b      	cbz	r3, 3cb8 <LightGroup::LightGroup(char const*, long, ...)+0x5c>
    3ca0:	2300      	movs	r3, #0
    3ca2:	e003      	b.n	3cac <LightGroup::LightGroup(char const*, long, ...)+0x50>
    3ca4:	aa0a      	add	r2, sp, #40	; 0x28
    3ca6:	6920      	ldr	r0, [r4, #16]
    3ca8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3cac:	1c59      	adds	r1, r3, #1
    3cae:	54c5      	strb	r5, [r0, r3]
    3cb0:	7d22      	ldrb	r2, [r4, #20]
    3cb2:	b2cb      	uxtb	r3, r1
    3cb4:	429a      	cmp	r2, r3
    3cb6:	d8f5      	bhi.n	3ca4 <LightGroup::LightGroup(char const*, long, ...)+0x48>
	nameStr = String(setName);
    3cb8:	4631      	mov	r1, r6
    3cba:	4668      	mov	r0, sp
    3cbc:	f008 fb9e 	bl	c3fc <String::String(char const*)>
    3cc0:	4669      	mov	r1, sp
    3cc2:	4620      	mov	r0, r4
    3cc4:	f008 fc40 	bl	c548 <String::operator=(String&&)>
    3cc8:	4668      	mov	r0, sp
    3cca:	f008 fb57 	bl	c37c <String::~String()>
	//Serial.printf("new light group (size:%i) '", _size);
	//Serial.print(nameStr);
	//Serial.print("':[");
	//for (int i = 0; i < _size; i++) Serial.printf("%i,",lightNum[i]);
	//Serial.println("]");
}
    3cce:	4620      	mov	r0, r4
    3cd0:	b005      	add	sp, #20
    3cd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3cd6:	b002      	add	sp, #8
    3cd8:	4770      	bx	lr
    3cda:	bf00      	nop

00003cdc <LightGroup::light(unsigned char)>:
	//Serial.println("]");
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
	 if (activeLightSet == nullptr) {
    3cdc:	4b0d      	ldr	r3, [pc, #52]	; (3d14 <LightGroup::light(unsigned char)+0x38>)
	//for (int i = 0; i < _size; i++) Serial.printf("%i,", lightNum[i]);
	//Serial.println("]");
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
    3cde:	b510      	push	{r4, lr}
	 if (activeLightSet == nullptr) {
    3ce0:	681c      	ldr	r4, [r3, #0]
    3ce2:	b1a4      	cbz	r4, 3d0e <LightGroup::light(unsigned char)+0x32>
		 Serial.println(F("LightGroup::light: undefined light set"));
		 delay(100);
		 return nullptr;
	 }
	 Light* l = activeLightSet->getLight(lightNum[n]);
    3ce4:	6903      	ldr	r3, [r0, #16]
    3ce6:	4620      	mov	r0, r4
    3ce8:	5c59      	ldrb	r1, [r3, r1]
    3cea:	f000 f9ed 	bl	40c8 <LightSet::getLight(int)>
	 if (l == nullptr) {
    3cee:	4604      	mov	r4, r0
    3cf0:	b108      	cbz	r0, 3cf6 <LightGroup::light(unsigned char)+0x1a>
    3cf2:	4620      	mov	r0, r4
    3cf4:	bd10      	pop	{r4, pc}
    3cf6:	211e      	movs	r1, #30
    3cf8:	4807      	ldr	r0, [pc, #28]	; (3d18 <LightGroup::light(unsigned char)+0x3c>)
    3cfa:	f008 f8b7 	bl	be6c <usb_serial_write>
    3cfe:	4807      	ldr	r0, [pc, #28]	; (3d1c <LightGroup::light(unsigned char)+0x40>)
    3d00:	f008 fa76 	bl	c1f0 <Print::println()>
		 Serial.println(F("LightGroup::light: null light!"));
		 delay(100);
    3d04:	2064      	movs	r0, #100	; 0x64
    3d06:	f006 fd85 	bl	a814 <delay>
    3d0a:	4620      	mov	r0, r4
    3d0c:	bd10      	pop	{r4, pc}
    3d0e:	2126      	movs	r1, #38	; 0x26
    3d10:	4803      	ldr	r0, [pc, #12]	; (3d20 <LightGroup::light(unsigned char)+0x44>)
    3d12:	e7f2      	b.n	3cfa <LightGroup::light(unsigned char)+0x1e>
    3d14:	20002ac8 	.word	0x20002ac8
    3d18:	20000ddc 	.word	0x20000ddc
    3d1c:	20001fdc 	.word	0x20001fdc
    3d20:	20000db4 	.word	0x20000db4

00003d24 <LightGroup::set(unsigned char, lightState)>:
	 }
	 return l;
}

void LightGroup::set(byte n, lightState st) {
	if (activeLightSet == nullptr) {
    3d24:	4b11      	ldr	r3, [pc, #68]	; (3d6c <LightGroup::set(unsigned char, lightState)+0x48>)
    3d26:	681b      	ldr	r3, [r3, #0]
		 delay(100);
	 }
	 return l;
}

void LightGroup::set(byte n, lightState st) {
    3d28:	b570      	push	{r4, r5, r6, lr}
    3d2a:	b082      	sub	sp, #8
	if (activeLightSet == nullptr) {
    3d2c:	b1db      	cbz	r3, 3d66 <LightGroup::set(unsigned char, lightState)+0x42>
		Serial.println(F("LightGroup::set: undefined light set!"));
		delay(100);
		return;
	}
	if (n >= _size) {
    3d2e:	7d03      	ldrb	r3, [r0, #20]
    3d30:	428b      	cmp	r3, r1
    3d32:	d90b      	bls.n	3d4c <LightGroup::set(unsigned char, lightState)+0x28>
    3d34:	4616      	mov	r6, r2
		Serial.println(F("LightGroup::set: illegal light number"));
		delay(100);
		return;
	}
	light(n)->set(st);
    3d36:	f7ff ffd1 	bl	3cdc <LightGroup::light(unsigned char)>
    3d3a:	2200      	movs	r2, #0
    3d3c:	2332      	movs	r3, #50	; 0x32
    3d3e:	4631      	mov	r1, r6
    3d40:	9200      	str	r2, [sp, #0]
    3d42:	22c8      	movs	r2, #200	; 0xc8
    3d44:	f7ff fefa 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
}
    3d48:	b002      	add	sp, #8
    3d4a:	bd70      	pop	{r4, r5, r6, pc}
    3d4c:	2125      	movs	r1, #37	; 0x25
    3d4e:	4808      	ldr	r0, [pc, #32]	; (3d70 <LightGroup::set(unsigned char, lightState)+0x4c>)
    3d50:	f008 f88c 	bl	be6c <usb_serial_write>
    3d54:	4807      	ldr	r0, [pc, #28]	; (3d74 <LightGroup::set(unsigned char, lightState)+0x50>)
    3d56:	f008 fa4b 	bl	c1f0 <Print::println()>
		delay(100);
		return;
	}
	if (n >= _size) {
		Serial.println(F("LightGroup::set: illegal light number"));
		delay(100);
    3d5a:	2064      	movs	r0, #100	; 0x64
		return;
	}
	light(n)->set(st);
}
    3d5c:	b002      	add	sp, #8
    3d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay(100);
		return;
	}
	if (n >= _size) {
		Serial.println(F("LightGroup::set: illegal light number"));
		delay(100);
    3d62:	f006 bd57 	b.w	a814 <delay>
    3d66:	2125      	movs	r1, #37	; 0x25
    3d68:	4803      	ldr	r0, [pc, #12]	; (3d78 <LightGroup::set(unsigned char, lightState)+0x54>)
    3d6a:	e7f1      	b.n	3d50 <LightGroup::set(unsigned char, lightState)+0x2c>
    3d6c:	20002ac8 	.word	0x20002ac8
    3d70:	20000e24 	.word	0x20000e24
    3d74:	20001fdc 	.word	0x20001fdc
    3d78:	20000dfc 	.word	0x20000dfc

00003d7c <LightGroup::pulse(unsigned char, unsigned short)>:
	}
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
    3d7c:	4b0b      	ldr	r3, [pc, #44]	; (3dac <LightGroup::pulse(unsigned char, unsigned short)+0x30>)
    3d7e:	681b      	ldr	r3, [r3, #0]
		return;
	}
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
    3d80:	b510      	push	{r4, lr}
	if (activeLightSet == nullptr) {
    3d82:	b13b      	cbz	r3, 3d94 <LightGroup::pulse(unsigned char, unsigned short)+0x18>
    3d84:	4614      	mov	r4, r2
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
		return;
	}
	light(n)->pulse(tm);
    3d86:	f7ff ffa9 	bl	3cdc <LightGroup::light(unsigned char)>
    3d8a:	4621      	mov	r1, r4
}
    3d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
		return;
	}
	light(n)->pulse(tm);
    3d90:	f7ff bf1e 	b.w	3bd0 <Light::pulse(unsigned short)>
    3d94:	2127      	movs	r1, #39	; 0x27
    3d96:	4806      	ldr	r0, [pc, #24]	; (3db0 <LightGroup::pulse(unsigned char, unsigned short)+0x34>)
    3d98:	f008 f868 	bl	be6c <usb_serial_write>
    3d9c:	4805      	ldr	r0, [pc, #20]	; (3db4 <LightGroup::pulse(unsigned char, unsigned short)+0x38>)
    3d9e:	f008 fa27 	bl	c1f0 <Print::println()>
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
    3da2:	2064      	movs	r0, #100	; 0x64
		return;
	}
	light(n)->pulse(tm);
}
    3da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
    3da8:	f006 bd34 	b.w	a814 <delay>
    3dac:	20002ac8 	.word	0x20002ac8
    3db0:	20000e78 	.word	0x20000e78
    3db4:	20001fdc 	.word	0x20001fdc

00003db8 <LightGroup::getState(unsigned char)>:
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3db8:	4b07      	ldr	r3, [pc, #28]	; (3dd8 <LightGroup::getState(unsigned char)+0x20>)
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	b14b      	cbz	r3, 3dd2 <LightGroup::getState(unsigned char)+0x1a>
		return;
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
    3dbe:	b510      	push	{r4, lr}
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3dc0:	7d03      	ldrb	r3, [r0, #20]
    3dc2:	428b      	cmp	r3, r1
    3dc4:	d801      	bhi.n	3dca <LightGroup::getState(unsigned char)+0x12>
    3dc6:	2000      	movs	r0, #0
	return light(n)->state;
}
    3dc8:	bd10      	pop	{r4, pc}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
	return light(n)->state;
    3dca:	f7ff ff87 	bl	3cdc <LightGroup::light(unsigned char)>
    3dce:	7840      	ldrb	r0, [r0, #1]
    3dd0:	bd10      	pop	{r4, pc}
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3dd2:	4618      	mov	r0, r3
	return light(n)->state;
}
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop
    3dd8:	20002ac8 	.word	0x20002ac8

00003ddc <LightGroup::isActive(unsigned char)>:

bool LightGroup::isActive(byte n) {
    3ddc:	b538      	push	{r3, r4, r5, lr}
	if (activeLightSet == nullptr) {
    3dde:	4b14      	ldr	r3, [pc, #80]	; (3e30 <LightGroup::isActive(unsigned char)+0x54>)
    3de0:	681c      	ldr	r4, [r3, #0]
    3de2:	b1c4      	cbz	r4, 3e16 <LightGroup::isActive(unsigned char)+0x3a>
		Serial.println(F("LightGroup::isActive: undefined light set!"));
		delay(100);
		return false;
	}
	if (n >= _size) {
    3de4:	7d03      	ldrb	r3, [r0, #20]
    3de6:	460d      	mov	r5, r1
    3de8:	428b      	cmp	r3, r1
    3dea:	d908      	bls.n	3dfe <LightGroup::isActive(unsigned char)+0x22>
		Serial.println(F("LightGroup::isActive: illegal light number"));
		delay(100);
		return false;
	}
	Light* l = light(n);
    3dec:	f7ff ff76 	bl	3cdc <LightGroup::light(unsigned char)>
	if (l == nullptr) {
    3df0:	4604      	mov	r4, r0
    3df2:	b198      	cbz	r0, 3e1c <LightGroup::isActive(unsigned char)+0x40>
    void blink(uint16_t blinkP = DEF_BLNK_PERIOD, byte blinkDutyC = 50, byte ticks = 0);
    void invert();
    void pulse(uint16_t pulseP = DEF_PULSE_PERIOD);
    bool update(uint32_t ms);
    inline bool isActive() const { return (state != OFF_L); }
    3df4:	7840      	ldrb	r0, [r0, #1]
    3df6:	3000      	adds	r0, #0
    3df8:	bf18      	it	ne
    3dfa:	2001      	movne	r0, #1
		Serial.printf(F("LightGroup::isActive: undefined light #%d\n"), n);
		delay(100);
		return false;
	}
	return l->isActive();
}
    3dfc:	bd38      	pop	{r3, r4, r5, pc}
    3dfe:	212a      	movs	r1, #42	; 0x2a
    3e00:	480c      	ldr	r0, [pc, #48]	; (3e34 <LightGroup::isActive(unsigned char)+0x58>)
    3e02:	f008 f833 	bl	be6c <usb_serial_write>
    3e06:	480c      	ldr	r0, [pc, #48]	; (3e38 <LightGroup::isActive(unsigned char)+0x5c>)
    3e08:	f008 f9f2 	bl	c1f0 <Print::println()>
		delay(100);
		return false;
	}
	if (n >= _size) {
		Serial.println(F("LightGroup::isActive: illegal light number"));
		delay(100);
    3e0c:	2064      	movs	r0, #100	; 0x64
    3e0e:	f006 fd01 	bl	a814 <delay>
		return false;
    3e12:	2000      	movs	r0, #0
    3e14:	bd38      	pop	{r3, r4, r5, pc}
    3e16:	212a      	movs	r1, #42	; 0x2a
    3e18:	4808      	ldr	r0, [pc, #32]	; (3e3c <LightGroup::isActive(unsigned char)+0x60>)
    3e1a:	e7f2      	b.n	3e02 <LightGroup::isActive(unsigned char)+0x26>
	}
	Light* l = light(n);
	if (l == nullptr) {
		Serial.printf(F("LightGroup::isActive: undefined light #%d\n"), n);
    3e1c:	462a      	mov	r2, r5
    3e1e:	4908      	ldr	r1, [pc, #32]	; (3e40 <LightGroup::isActive(unsigned char)+0x64>)
    3e20:	4805      	ldr	r0, [pc, #20]	; (3e38 <LightGroup::isActive(unsigned char)+0x5c>)
    3e22:	f008 fa0d 	bl	c240 <Print::printf(__FlashStringHelper const*, ...)>
		delay(100);
    3e26:	2064      	movs	r0, #100	; 0x64
    3e28:	f006 fcf4 	bl	a814 <delay>
		return false;
    3e2c:	4620      	mov	r0, r4
    3e2e:	bd38      	pop	{r3, r4, r5, pc}
    3e30:	20002ac8 	.word	0x20002ac8
    3e34:	20000ecc 	.word	0x20000ecc
    3e38:	20001fdc 	.word	0x20001fdc
    3e3c:	20000ea0 	.word	0x20000ea0
    3e40:	20000ef8 	.word	0x20000ef8

00003e44 <LightGroup::setAll(lightState)>:
	}
	return l->isActive();
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
    3e44:	4b13      	ldr	r3, [pc, #76]	; (3e94 <LightGroup::setAll(lightState)+0x50>)
    3e46:	681b      	ldr	r3, [r3, #0]
		return false;
	}
	return l->isActive();
}

void LightGroup::setAll(lightState st) {
    3e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e4a:	b083      	sub	sp, #12
	if (activeLightSet == nullptr) {
    3e4c:	b1ab      	cbz	r3, 3e7a <LightGroup::setAll(lightState)+0x36>
		Serial.println(F("LightGroup::setAll: undefined light set!"));
		delay(100);
		return;
	}
	for (int i = 0; i < _size; i++) light(i)->set(st);
    3e4e:	7d03      	ldrb	r3, [r0, #20]
    3e50:	4605      	mov	r5, r0
    3e52:	b183      	cbz	r3, 3e76 <LightGroup::setAll(lightState)+0x32>
    3e54:	2400      	movs	r4, #0
    3e56:	460e      	mov	r6, r1
    3e58:	4627      	mov	r7, r4
    3e5a:	b2e1      	uxtb	r1, r4
    3e5c:	4628      	mov	r0, r5
    3e5e:	f7ff ff3d 	bl	3cdc <LightGroup::light(unsigned char)>
    3e62:	2332      	movs	r3, #50	; 0x32
    3e64:	9700      	str	r7, [sp, #0]
    3e66:	22c8      	movs	r2, #200	; 0xc8
    3e68:	4631      	mov	r1, r6
    3e6a:	3401      	adds	r4, #1
    3e6c:	f7ff fe66 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    3e70:	7d2b      	ldrb	r3, [r5, #20]
    3e72:	42a3      	cmp	r3, r4
    3e74:	dcf1      	bgt.n	3e5a <LightGroup::setAll(lightState)+0x16>
}
    3e76:	b003      	add	sp, #12
    3e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e7a:	2128      	movs	r1, #40	; 0x28
    3e7c:	4806      	ldr	r0, [pc, #24]	; (3e98 <LightGroup::setAll(lightState)+0x54>)
    3e7e:	f007 fff5 	bl	be6c <usb_serial_write>
    3e82:	4806      	ldr	r0, [pc, #24]	; (3e9c <LightGroup::setAll(lightState)+0x58>)
    3e84:	f008 f9b4 	bl	c1f0 <Print::println()>
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::setAll: undefined light set!"));
		delay(100);
    3e88:	2064      	movs	r0, #100	; 0x64
		return;
	}
	for (int i = 0; i < _size; i++) light(i)->set(st);
}
    3e8a:	b003      	add	sp, #12
    3e8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::setAll: undefined light set!"));
		delay(100);
    3e90:	f006 bcc0 	b.w	a814 <delay>
    3e94:	20002ac8 	.word	0x20002ac8
    3e98:	20000f24 	.word	0x20000f24
    3e9c:	20001fdc 	.word	0x20001fdc

00003ea0 <LightGroup::switchTheFirst(lightState)>:
// to the given state.
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
	byte i;

	if (activeLightSet == nullptr) {
    3ea0:	4b1a      	ldr	r3, [pc, #104]	; (3f0c <LightGroup::switchTheFirst(lightState)+0x6c>)
    3ea2:	681b      	ldr	r3, [r3, #0]
}

// switch the first light of the group of a different state than st
// to the given state.
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
    3ea4:	b570      	push	{r4, r5, r6, lr}
    3ea6:	b082      	sub	sp, #8
	byte i;

	if (activeLightSet == nullptr) {
    3ea8:	b313      	cbz	r3, 3ef0 <LightGroup::switchTheFirst(lightState)+0x50>
    3eaa:	4605      	mov	r5, r0
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3eac:	7d00      	ldrb	r0, [r0, #20]
    3eae:	b1d0      	cbz	r0, 3ee6 <LightGroup::switchTheFirst(lightState)+0x46>
    3eb0:	460e      	mov	r6, r1
    3eb2:	2400      	movs	r4, #0
    3eb4:	e003      	b.n	3ebe <LightGroup::switchTheFirst(lightState)+0x1e>
    3eb6:	b2d4      	uxtb	r4, r2
    3eb8:	7d2b      	ldrb	r3, [r5, #20]
    3eba:	42a3      	cmp	r3, r4
    3ebc:	d915      	bls.n	3eea <LightGroup::switchTheFirst(lightState)+0x4a>
		if (light(i)->state != st) {
    3ebe:	4621      	mov	r1, r4
    3ec0:	4628      	mov	r0, r5
    3ec2:	f7ff ff0b 	bl	3cdc <LightGroup::light(unsigned char)>
    3ec6:	7843      	ldrb	r3, [r0, #1]
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3ec8:	1c62      	adds	r2, r4, #1
		if (light(i)->state != st) {
    3eca:	42b3      	cmp	r3, r6
    3ecc:	d0f3      	beq.n	3eb6 <LightGroup::switchTheFirst(lightState)+0x16>
			light(i)->set(st);
    3ece:	4621      	mov	r1, r4
    3ed0:	4628      	mov	r0, r5
    3ed2:	f7ff ff03 	bl	3cdc <LightGroup::light(unsigned char)>
    3ed6:	2200      	movs	r2, #0
    3ed8:	4631      	mov	r1, r6
    3eda:	2332      	movs	r3, #50	; 0x32
    3edc:	9200      	str	r2, [sp, #0]
    3ede:	22c8      	movs	r2, #200	; 0xc8
    3ee0:	f7ff fe2c 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
			break;
    3ee4:	4620      	mov	r0, r4
		}
	}
	return i;
}
    3ee6:	b002      	add	sp, #8
    3ee8:	bd70      	pop	{r4, r5, r6, pc}
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3eea:	4620      	mov	r0, r4
			light(i)->set(st);
			break;
		}
	}
	return i;
}
    3eec:	b002      	add	sp, #8
    3eee:	bd70      	pop	{r4, r5, r6, pc}
    3ef0:	2130      	movs	r1, #48	; 0x30
    3ef2:	4807      	ldr	r0, [pc, #28]	; (3f10 <LightGroup::switchTheFirst(lightState)+0x70>)
    3ef4:	f007 ffba 	bl	be6c <usb_serial_write>
    3ef8:	4806      	ldr	r0, [pc, #24]	; (3f14 <LightGroup::switchTheFirst(lightState)+0x74>)
    3efa:	f008 f979 	bl	c1f0 <Print::println()>
byte LightGroup::switchTheFirst(lightState st) {
	byte i;

	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
    3efe:	2064      	movs	r0, #100	; 0x64
    3f00:	f006 fc88 	bl	a814 <delay>
    3f04:	20ff      	movs	r0, #255	; 0xff
			light(i)->set(st);
			break;
		}
	}
	return i;
}
    3f06:	b002      	add	sp, #8
    3f08:	bd70      	pop	{r4, r5, r6, pc}
    3f0a:	bf00      	nop
    3f0c:	20002ac8 	.word	0x20002ac8
    3f10:	20000f50 	.word	0x20000f50
    3f14:	20001fdc 	.word	0x20001fdc

00003f18 <LightGroup::switchTheFirst(lightState, unsigned short)>:

byte LightGroup::switchTheFirst(lightState st, uint16_t maxP) {
    3f18:	b570      	push	{r4, r5, r6, lr}
    3f1a:	4615      	mov	r5, r2
    3f1c:	4606      	mov	r6, r0
	byte gl;
	gl = switchTheFirst(st);
    3f1e:	f7ff ffbf 	bl	3ea0 <LightGroup::switchTheFirst(lightState)>
    3f22:	4604      	mov	r4, r0
	if (maxP > 0 && gl != 0xff) light(gl)->activePeriod = maxP;
    3f24:	b135      	cbz	r5, 3f34 <LightGroup::switchTheFirst(lightState, unsigned short)+0x1c>
    3f26:	28ff      	cmp	r0, #255	; 0xff
    3f28:	d004      	beq.n	3f34 <LightGroup::switchTheFirst(lightState, unsigned short)+0x1c>
    3f2a:	4630      	mov	r0, r6
    3f2c:	4621      	mov	r1, r4
    3f2e:	f7ff fed5 	bl	3cdc <LightGroup::light(unsigned char)>
    3f32:	8185      	strh	r5, [r0, #12]
	return gl;
}
    3f34:	4620      	mov	r0, r4
    3f36:	bd70      	pop	{r4, r5, r6, pc}

00003f38 <LightGroup::rotateRight()>:
		for (int i = _size - 1; i > 0; i--) light(i + 1)->copy(light(i));
	}
	light(0)->reset();
}

void LightGroup::rotateRight() {
    3f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
    3f3a:	4b1f      	ldr	r3, [pc, #124]	; (3fb8 <LightGroup::rotateRight()+0x80>)
    3f3c:	681b      	ldr	r3, [r3, #0]
    3f3e:	2b00      	cmp	r3, #0
    3f40:	d036      	beq.n	3fb0 <LightGroup::rotateRight()+0x78>
		Serial.println(F("LightGroup::rotateRight: undefined light set!"));
		delay(100);
		return;
	}
	if (_size <= 1) {
    3f42:	7d01      	ldrb	r1, [r0, #20]
    3f44:	4606      	mov	r6, r0
    3f46:	2901      	cmp	r1, #1
    3f48:	d926      	bls.n	3f98 <LightGroup::rotateRight()+0x60>
		delay(100);
		return;
	}
	//Serial.print("rotateRight on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(_size - 1));
    3f4a:	3901      	subs	r1, #1
    3f4c:	6984      	ldr	r4, [r0, #24]
    3f4e:	b2c9      	uxtb	r1, r1
    3f50:	f7ff fec4 	bl	3cdc <LightGroup::light(unsigned char)>
    3f54:	4601      	mov	r1, r0
    3f56:	4620      	mov	r0, r4
    3f58:	f7ff fdda 	bl	3b10 <Light::copy(Light*)>
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
    3f5c:	7d34      	ldrb	r4, [r6, #20]
    3f5e:	3c02      	subs	r4, #2
    3f60:	d411      	bmi.n	3f86 <LightGroup::rotateRight()+0x4e>
    3f62:	b2e5      	uxtb	r5, r4
    3f64:	4630      	mov	r0, r6
    3f66:	3c01      	subs	r4, #1
    3f68:	1c69      	adds	r1, r5, #1
    3f6a:	b2c9      	uxtb	r1, r1
    3f6c:	f7ff feb6 	bl	3cdc <LightGroup::light(unsigned char)>
    3f70:	4607      	mov	r7, r0
    3f72:	4629      	mov	r1, r5
    3f74:	4630      	mov	r0, r6
    3f76:	f7ff feb1 	bl	3cdc <LightGroup::light(unsigned char)>
    3f7a:	4601      	mov	r1, r0
    3f7c:	4638      	mov	r0, r7
    3f7e:	f7ff fdc7 	bl	3b10 <Light::copy(Light*)>
    3f82:	1c63      	adds	r3, r4, #1
    3f84:	d1ed      	bne.n	3f62 <LightGroup::rotateRight()+0x2a>
	light(0)->copy(_tmpLight);
    3f86:	2100      	movs	r1, #0
    3f88:	4630      	mov	r0, r6
    3f8a:	f7ff fea7 	bl	3cdc <LightGroup::light(unsigned char)>
    3f8e:	69b1      	ldr	r1, [r6, #24]
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	}
	//Serial.print("rotateRight on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
    3f94:	f7ff bdbc 	b.w	3b10 <Light::copy(Light*)>
    3f98:	2128      	movs	r1, #40	; 0x28
    3f9a:	4808      	ldr	r0, [pc, #32]	; (3fbc <LightGroup::rotateRight()+0x84>)
    3f9c:	f007 ff66 	bl	be6c <usb_serial_write>
    3fa0:	4807      	ldr	r0, [pc, #28]	; (3fc0 <LightGroup::rotateRight()+0x88>)
    3fa2:	f008 f925 	bl	c1f0 <Print::println()>
		delay(100);
		return;
	}
	if (_size <= 1) {
		Serial.println(F("LightGroup::rotateRight: group size <= 1"));
		delay(100);
    3fa6:	2064      	movs	r0, #100	; 0x64
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		delay(100);
		return;
	}
	if (_size <= 1) {
		Serial.println(F("LightGroup::rotateRight: group size <= 1"));
		delay(100);
    3fac:	f006 bc32 	b.w	a814 <delay>
    3fb0:	212d      	movs	r1, #45	; 0x2d
    3fb2:	4804      	ldr	r0, [pc, #16]	; (3fc4 <LightGroup::rotateRight()+0x8c>)
    3fb4:	e7f2      	b.n	3f9c <LightGroup::rotateRight()+0x64>
    3fb6:	bf00      	nop
    3fb8:	20002ac8 	.word	0x20002ac8
    3fbc:	20001044 	.word	0x20001044
    3fc0:	20001fdc 	.word	0x20001fdc
    3fc4:	20001014 	.word	0x20001014

00003fc8 <LightGroup::rotateLeft()>:
	for (int i = 0; i < _size - 1; i++)
		light(i)->copy(light(i + 1));
	light(_size - 1)->reset();
}

void LightGroup::rotateLeft() {
    3fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
    3fca:	4b1f      	ldr	r3, [pc, #124]	; (4048 <LightGroup::rotateLeft()+0x80>)
    3fcc:	681b      	ldr	r3, [r3, #0]
    3fce:	b37b      	cbz	r3, 4030 <LightGroup::rotateLeft()+0x68>
		Serial.println(F("LightGroup::rotateLeft: undefined light set!"));
		delay(100);
		return;
	}
	if (_size <= 1) return;
    3fd0:	7d03      	ldrb	r3, [r0, #20]
    3fd2:	4606      	mov	r6, r0
    3fd4:	2b01      	cmp	r3, #1
    3fd6:	d928      	bls.n	402a <LightGroup::rotateLeft()+0x62>
	//Serial.print("rotateLeft on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(0));
    3fd8:	6984      	ldr	r4, [r0, #24]
    3fda:	2100      	movs	r1, #0
    3fdc:	f7ff fe7e 	bl	3cdc <LightGroup::light(unsigned char)>
    3fe0:	4601      	mov	r1, r0
    3fe2:	4620      	mov	r0, r4
    3fe4:	f7ff fd94 	bl	3b10 <Light::copy(Light*)>
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
    3fe8:	7d31      	ldrb	r1, [r6, #20]
    3fea:	2901      	cmp	r1, #1
    3fec:	dd1e      	ble.n	402c <LightGroup::rotateLeft()+0x64>
    3fee:	2500      	movs	r5, #0
    3ff0:	b2ec      	uxtb	r4, r5
    3ff2:	4630      	mov	r0, r6
    3ff4:	3501      	adds	r5, #1
    3ff6:	4621      	mov	r1, r4
    3ff8:	f7ff fe70 	bl	3cdc <LightGroup::light(unsigned char)>
    3ffc:	1c61      	adds	r1, r4, #1
    3ffe:	4607      	mov	r7, r0
    4000:	4630      	mov	r0, r6
    4002:	b2c9      	uxtb	r1, r1
    4004:	f7ff fe6a 	bl	3cdc <LightGroup::light(unsigned char)>
    4008:	4601      	mov	r1, r0
    400a:	4638      	mov	r0, r7
    400c:	f7ff fd80 	bl	3b10 <Light::copy(Light*)>
    4010:	7d31      	ldrb	r1, [r6, #20]
    4012:	3901      	subs	r1, #1
    4014:	42a9      	cmp	r1, r5
    4016:	dceb      	bgt.n	3ff0 <LightGroup::rotateLeft()+0x28>
	light(_size - 1)->copy(_tmpLight);
    4018:	b2c9      	uxtb	r1, r1
    401a:	4630      	mov	r0, r6
    401c:	f7ff fe5e 	bl	3cdc <LightGroup::light(unsigned char)>
    4020:	69b1      	ldr	r1, [r6, #24]
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    4022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (_size <= 1) return;
	//Serial.print("rotateLeft on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(0));
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
	light(_size - 1)->copy(_tmpLight);
    4026:	f7ff bd73 	b.w	3b10 <Light::copy(Light*)>
    402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    402c:	3901      	subs	r1, #1
    402e:	e7f3      	b.n	4018 <LightGroup::rotateLeft()+0x50>
    4030:	212c      	movs	r1, #44	; 0x2c
    4032:	4806      	ldr	r0, [pc, #24]	; (404c <LightGroup::rotateLeft()+0x84>)
    4034:	f007 ff1a 	bl	be6c <usb_serial_write>
    4038:	4805      	ldr	r0, [pc, #20]	; (4050 <LightGroup::rotateLeft()+0x88>)
    403a:	f008 f8d9 	bl	c1f0 <Print::println()>
}

void LightGroup::rotateLeft() {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::rotateLeft: undefined light set!"));
		delay(100);
    403e:	2064      	movs	r0, #100	; 0x64
	_tmpLight->copy(light(0));
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
	light(_size - 1)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    4040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

void LightGroup::rotateLeft() {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::rotateLeft: undefined light set!"));
		delay(100);
    4044:	f006 bbe6 	b.w	a814 <delay>
    4048:	20002ac8 	.word	0x20002ac8
    404c:	200010c4 	.word	0x200010c4
    4050:	20001fdc 	.word	0x20001fdc

00004054 <LightSet::LightSet(int)>:
//}

LightSet::LightSet(int ls_size) {
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    4054:	f5b1 7f80 	cmp.w	r1, #256	; 0x100

//LightSet::LightSet() {
//	_size = 0;
//}

LightSet::LightSet(int ls_size) {
    4058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    405c:	4607      	mov	r7, r0
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    405e:	dc17      	bgt.n	4090 <LightSet::LightSet(int)+0x3c>
	light = new Light[ls_size];
    4060:	f1b1 6faa 	cmp.w	r1, #89128960	; 0x5500000
    4064:	460e      	mov	r6, r1
    4066:	d91c      	bls.n	40a2 <LightSet::LightSet(int)+0x4e>
    4068:	f04f 30ff 	mov.w	r0, #4294967295
    406c:	180c      	adds	r4, r1, r0
    406e:	f008 f87d 	bl	c16c <operator new[](unsigned int)>
    4072:	4680      	mov	r8, r0
    4074:	4645      	mov	r5, r8
    4076:	3c01      	subs	r4, #1
    4078:	4628      	mov	r0, r5
    407a:	f7ff fd3b 	bl	3af4 <Light::Light()>
    407e:	3518      	adds	r5, #24
    4080:	1c63      	adds	r3, r4, #1
    4082:	d1f8      	bne.n	4076 <LightSet::LightSet(int)+0x22>
    4084:	f8c7 8000 	str.w	r8, [r7]
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
}
    4088:	4638      	mov	r0, r7
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
	light = new Light[ls_size];
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
    408a:	607e      	str	r6, [r7, #4]
}
    408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

LightSet::LightSet(int ls_size) {
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
	light = new Light[ls_size];
    4090:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    4094:	24ff      	movs	r4, #255	; 0xff
    4096:	f008 f869 	bl	c16c <operator new[](unsigned int)>
//}

LightSet::LightSet(int ls_size) {
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    409a:	f44f 7680 	mov.w	r6, #256	; 0x100
	light = new Light[ls_size];
    409e:	4680      	mov	r8, r0
    40a0:	e7e8      	b.n	4074 <LightSet::LightSet(int)+0x20>
    40a2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    40a6:	1e4c      	subs	r4, r1, #1
    40a8:	00c0      	lsls	r0, r0, #3
    40aa:	f008 f85f 	bl	c16c <operator new[](unsigned int)>
    40ae:	1c62      	adds	r2, r4, #1
    40b0:	4680      	mov	r8, r0
    40b2:	d0e7      	beq.n	4084 <LightSet::LightSet(int)+0x30>
    40b4:	e7de      	b.n	4074 <LightSet::LightSet(int)+0x20>
    40b6:	bf00      	nop

000040b8 <LightSet::~LightSet()>:
	light = larray;
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
}

LightSet::~LightSet() {
    40b8:	b510      	push	{r4, lr}
    40ba:	4604      	mov	r4, r0
	delete[] light;
    40bc:	6800      	ldr	r0, [r0, #0]
    40be:	b108      	cbz	r0, 40c4 <LightSet::~LightSet()+0xc>
    40c0:	f008 f856 	bl	c170 <operator delete[](void*)>
	//delete lightChanges;
}
    40c4:	4620      	mov	r0, r4
    40c6:	bd10      	pop	{r4, pc}

000040c8 <LightSet::getLight(int)>:
	return _size;
}

 //returns nullptr if <light> is too big
 Light* LightSet::getLight(int n) {
	 if (n < 0 || n >= _size) {
    40c8:	2900      	cmp	r1, #0
 int LightSet::getSize() {
	return _size;
}

 //returns nullptr if <light> is too big
 Light* LightSet::getLight(int n) {
    40ca:	b508      	push	{r3, lr}
	 if (n < 0 || n >= _size) {
    40cc:	db08      	blt.n	40e0 <LightSet::getLight(int)+0x18>
    40ce:	6843      	ldr	r3, [r0, #4]
    40d0:	4299      	cmp	r1, r3
    40d2:	da05      	bge.n	40e0 <LightSet::getLight(int)+0x18>
		 Serial.printf(F("WARNING: LightSet::getLight(): invalid light number %d\n"), n);
		 return nullptr;
	 }
	 return &(light[n]);
    40d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    40d8:	6800      	ldr	r0, [r0, #0]
    40da:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
    40de:	bd08      	pop	{r3, pc}
    40e0:	460a      	mov	r2, r1
}

 //returns nullptr if <light> is too big
 Light* LightSet::getLight(int n) {
	 if (n < 0 || n >= _size) {
		 Serial.printf(F("WARNING: LightSet::getLight(): invalid light number %d\n"), n);
    40e2:	4803      	ldr	r0, [pc, #12]	; (40f0 <LightSet::getLight(int)+0x28>)
    40e4:	4903      	ldr	r1, [pc, #12]	; (40f4 <LightSet::getLight(int)+0x2c>)
    40e6:	f008 f8ab 	bl	c240 <Print::printf(__FlashStringHelper const*, ...)>
		 return nullptr;
    40ea:	2000      	movs	r0, #0
    40ec:	bd08      	pop	{r3, pc}
    40ee:	bf00      	nop
    40f0:	20001fdc 	.word	0x20001fdc
    40f4:	20001100 	.word	0x20001100

000040f8 <LightSet::switchOffAllLights()>:
 void LightSet::resetAll() {
	for (byte i = 0; i < _size; i++) light[i].reset();
}

 void LightSet::switchOffAllLights() {
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
    40f8:	6843      	ldr	r3, [r0, #4]
    40fa:	2b00      	cmp	r3, #0
    40fc:	dd16      	ble.n	412c <LightSet::switchOffAllLights()+0x34>

 void LightSet::resetAll() {
	for (byte i = 0; i < _size; i++) light[i].reset();
}

 void LightSet::switchOffAllLights() {
    40fe:	b570      	push	{r4, r5, r6, lr}
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
    4100:	2400      	movs	r4, #0

 void LightSet::resetAll() {
	for (byte i = 0; i < _size; i++) light[i].reset();
}

 void LightSet::switchOffAllLights() {
    4102:	b082      	sub	sp, #8
    4104:	4605      	mov	r5, r0
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
    4106:	4626      	mov	r6, r4
    4108:	682a      	ldr	r2, [r5, #0]
    410a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    410e:	3401      	adds	r4, #1
    4110:	2332      	movs	r3, #50	; 0x32
    4112:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    4116:	9600      	str	r6, [sp, #0]
    4118:	22c8      	movs	r2, #200	; 0xc8
    411a:	2100      	movs	r1, #0
    411c:	f7ff fd0e 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    4120:	686b      	ldr	r3, [r5, #4]
    4122:	b2e4      	uxtb	r4, r4
    4124:	429c      	cmp	r4, r3
    4126:	dbef      	blt.n	4108 <LightSet::switchOffAllLights()+0x10>
}
    4128:	b002      	add	sp, #8
    412a:	bd70      	pop	{r4, r5, r6, pc}
    412c:	4770      	bx	lr
    412e:	bf00      	nop

00004130 <LightSet::switchOnAllLights()>:

 void LightSet::switchOnAllLights() {
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
    4130:	6843      	ldr	r3, [r0, #4]
    4132:	2b00      	cmp	r3, #0
    4134:	dd16      	ble.n	4164 <LightSet::switchOnAllLights()+0x34>

 void LightSet::switchOffAllLights() {
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
}

 void LightSet::switchOnAllLights() {
    4136:	b570      	push	{r4, r5, r6, lr}
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
    4138:	2400      	movs	r4, #0

 void LightSet::switchOffAllLights() {
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
}

 void LightSet::switchOnAllLights() {
    413a:	b082      	sub	sp, #8
    413c:	4605      	mov	r5, r0
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
    413e:	4626      	mov	r6, r4
    4140:	682a      	ldr	r2, [r5, #0]
    4142:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    4146:	3401      	adds	r4, #1
    4148:	2332      	movs	r3, #50	; 0x32
    414a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    414e:	9600      	str	r6, [sp, #0]
    4150:	22c8      	movs	r2, #200	; 0xc8
    4152:	2101      	movs	r1, #1
    4154:	f7ff fcf2 	bl	3b3c <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    4158:	686b      	ldr	r3, [r5, #4]
    415a:	b2e4      	uxtb	r4, r4
    415c:	429c      	cmp	r4, r3
    415e:	dbef      	blt.n	4140 <LightSet::switchOnAllLights()+0x10>
 }
    4160:	b002      	add	sp, #8
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)>:
// Updates all low-level "lamps" according to corresponding "lights" state.
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet& ls, byte from, byte to) {
	byte top;
	
	if (from > to) return;
    4168:	429a      	cmp	r2, r3
    416a:	d81d      	bhi.n	41a8 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x40>
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
 }

// Updates all low-level "lamps" according to corresponding "lights" state.
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet& ls, byte from, byte to) {
    416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    416e:	4614      	mov	r4, r2
    4170:	4606      	mov	r6, r0
    4172:	460f      	mov	r7, r1
	byte top;
	
	if (from > to) return;
	if (to == 0) top = _size; else top = to + 1;
    4174:	b1ab      	cbz	r3, 41a2 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x3a>
    4176:	3301      	adds	r3, #1
    4178:	6842      	ldr	r2, [r0, #4]
    417a:	b2dd      	uxtb	r5, r3
	if (top > _size) top = _size;
    417c:	4295      	cmp	r5, r2
    417e:	dd0d      	ble.n	419c <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x34>
    4180:	b2d5      	uxtb	r5, r2
    4182:	e00b      	b.n	419c <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x34>
	for (byte i = from; i < top; i++) ls.setState(i, light[i].on);
    4184:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    4188:	4621      	mov	r1, r4
    418a:	3401      	adds	r4, #1
    418c:	6832      	ldr	r2, [r6, #0]
    418e:	2300      	movs	r3, #0
    4190:	b2e4      	uxtb	r4, r4
    4192:	f812 2030 	ldrb.w	r2, [r2, r0, lsl #3]
    4196:	4638      	mov	r0, r7
    4198:	f7fe fad2 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
    419c:	42a5      	cmp	r5, r4
    419e:	d8f1      	bhi.n	4184 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x1c>
    41a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet& ls, byte from, byte to) {
	byte top;
	
	if (from > to) return;
	if (to == 0) top = _size; else top = to + 1;
    41a2:	6842      	ldr	r2, [r0, #4]
    41a4:	b2d5      	uxtb	r5, r2
    41a6:	e7e9      	b.n	417c <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x14>
    41a8:	4770      	bx	lr
    41aa:	bf00      	nop

000041ac <LightSet::update(unsigned long)>:
	if (top > _size) top = _size;
	for (byte i = from; i < top; i++) ls.setState(i, light[i].on);
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
    41ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    41ae:	6843      	ldr	r3, [r0, #4]
    41b0:	2b00      	cmp	r3, #0
    41b2:	dd15      	ble.n	41e0 <LightSet::update(unsigned long)+0x34>
    41b4:	2400      	movs	r4, #0
    41b6:	460f      	mov	r7, r1
    41b8:	4606      	mov	r6, r0
    41ba:	4625      	mov	r5, r4
		if (light[i].update(ms) && !changes) changes = true;
    41bc:	6833      	ldr	r3, [r6, #0]
    41be:	eb04 0044 	add.w	r0, r4, r4, lsl #1
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    41c2:	3401      	adds	r4, #1
		if (light[i].update(ms) && !changes) changes = true;
    41c4:	4639      	mov	r1, r7
    41c6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    41ca:	f7ff fd11 	bl	3bf0 <Light::update(unsigned long)>
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    41ce:	6873      	ldr	r3, [r6, #4]
    41d0:	b2e4      	uxtb	r4, r4
		if (light[i].update(ms) && !changes) changes = true;
    41d2:	42a8      	cmp	r0, r5
    41d4:	bf88      	it	hi
    41d6:	2501      	movhi	r5, #1
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    41d8:	429c      	cmp	r4, r3
    41da:	dbef      	blt.n	41bc <LightSet::update(unsigned long)+0x10>
		if (light[i].update(ms) && !changes) changes = true;
	}
	return changes;
}
    41dc:	4628      	mov	r0, r5
    41de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (byte i = from; i < top; i++) ls.setState(i, light[i].on);
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
    41e0:	2500      	movs	r5, #0
    41e2:	e7fb      	b.n	41dc <LightSet::update(unsigned long)+0x30>

000041e4 <Sys80b::onSwitchEvent(unsigned char, bool)>:
	inline byte get4LampGroupOutput() {	return currentLampGroup; }
	inline byte get4LampStatesOutput() { return lamps->getStates4(currentLampGroup); }
	inline uint32_t getSolenoidsOutput() { return solenoids->getStates(); }
	virtual void updateSound(uint32_t& ms);
	inline uint16_t getDisplayOutput() { return display.LastData();	}
	virtual void onSwitchEvent(byte sw, bool st) {}
    41e4:	4770      	bx	lr
    41e6:	bf00      	nop

000041e8 <PinGame::begin()>:
public:
	PinGame(Board_Sys80b& board);
	virtual ~PinGame();

	void reset();
	virtual void begin() {};
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop

000041ec <PinGame::timerRoutine(int, unsigned long&)>:
	//void updateAndRenderLamps(uint32_t ms);
	//void onSwitchEvent(byte sw, bool st);
	virtual void millisRoutine(uint32_t& ms);
	inline String getGameName() { return _gameName; } // returns game name
	inline int getGameNumber() { return _gameNum; } //  returns Gottileb game id number
	virtual void timerRoutine(int taskIdentifer, uint32_t& tm) {}
    41ec:	4770      	bx	lr
    41ee:	bf00      	nop

000041f0 <non-virtual thunk to PinGame::timerRoutine(int, unsigned long&)>:
    41f0:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    41f4:	e7fa      	b.n	41ec <PinGame::timerRoutine(int, unsigned long&)>
    41f6:	bf00      	nop

000041f8 <PinGame::~PinGame()>:
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    41f8:	4b31      	ldr	r3, [pc, #196]	; (42c0 <PinGame::~PinGame()+0xc8>)
    41fa:	b570      	push	{r4, r5, r6, lr}
    41fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
	delete lights;
    4200:	f8d0 439c 	ldr.w	r4, [r0, #924]	; 0x39c
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    4204:	4605      	mov	r5, r0
    4206:	6003      	str	r3, [r0, #0]
    4208:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
	delete lights;
    420c:	b134      	cbz	r4, 421c <PinGame::~PinGame()+0x24>
    420e:	4620      	mov	r0, r4
    4210:	f7ff ff52 	bl	40b8 <LightSet::~LightSet()>
    4214:	4620      	mov	r0, r4
    4216:	2108      	movs	r1, #8
    4218:	f007 ffac 	bl	c174 <operator delete(void*, unsigned int)>
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    421c:	f505 60a1 	add.w	r0, r5, #1288	; 0x508
    4220:	f505 7626 	add.w	r6, r5, #664	; 0x298
    4224:	f008 f8aa 	bl	c37c <String::~String()>

#include "Arduino.h"
#include "TimerTask.h"
//#define MAX_TASKS 20

class TimerSet {
    4228:	f205 40e4 	addw	r0, r5, #1252	; 0x4e4
    422c:	f008 f8a6 	bl	c37c <String::~String()>
    4230:	f205 40d4 	addw	r0, r5, #1236	; 0x4d4
    4234:	f008 f8a2 	bl	c37c <String::~String()>
    4238:	f205 40bc 	addw	r0, r5, #1212	; 0x4bc
    423c:	f008 f89e 	bl	c37c <String::~String()>
    4240:	f205 40a4 	addw	r0, r5, #1188	; 0x4a4
    4244:	f008 f89a 	bl	c37c <String::~String()>
    4248:	f205 408c 	addw	r0, r5, #1164	; 0x48c
    424c:	f008 f896 	bl	c37c <String::~String()>
    4250:	f205 4074 	addw	r0, r5, #1140	; 0x474
    4254:	f008 f892 	bl	c37c <String::~String()>

#include "Arduino.h"
#include "Sys80b.h"
//class Sys80b;

class Sys80b_Sensor {
    4258:	f505 608b 	add.w	r0, r5, #1112	; 0x458
    425c:	f008 f88e 	bl	c37c <String::~String()>
    4260:	f505 6088 	add.w	r0, r5, #1088	; 0x440
    4264:	f008 f88a 	bl	c37c <String::~String()>
    4268:	f505 6085 	add.w	r0, r5, #1064	; 0x428
    426c:	f008 f886 	bl	c37c <String::~String()>
    4270:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    4274:	f008 f882 	bl	c37c <String::~String()>
    4278:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
    427c:	f008 f87e 	bl	c37c <String::~String()>
    4280:	f505 7078 	add.w	r0, r5, #992	; 0x3e0
    4284:	f008 f87a 	bl	c37c <String::~String()>
    4288:	f505 7453 	add.w	r4, r5, #844	; 0x34c
    428c:	f505 7072 	add.w	r0, r5, #968	; 0x3c8
    4290:	f008 f874 	bl	c37c <String::~String()>
    4294:	f505 706c 	add.w	r0, r5, #944	; 0x3b0
    4298:	f008 f870 	bl	c37c <String::~String()>
    429c:	42a6      	cmp	r6, r4
    429e:	d009      	beq.n	42b4 <PinGame::~PinGame()+0xbc>
    42a0:	3c24      	subs	r4, #36	; 0x24
#include "ExtTextDisplay.h"

enum pinballMode { SHOW_MODE, GAME_MODE, TEST_MODE, BOOKKEEP_MODE };

// top score entry
struct TopPlay {
    42a2:	f104 0014 	add.w	r0, r4, #20
    42a6:	f008 f869 	bl	c37c <String::~String()>
    42aa:	1d20      	adds	r0, r4, #4
    42ac:	f008 f866 	bl	c37c <String::~String()>
    42b0:	42a6      	cmp	r6, r4
    42b2:	d1f5      	bne.n	42a0 <PinGame::~PinGame()+0xa8>
    42b4:	4628      	mov	r0, r5
    42b6:	f000 ff0d 	bl	50d4 <Sys80b::~Sys80b()>
	delete lights;
}
    42ba:	4628      	mov	r0, r5
    42bc:	bd70      	pop	{r4, r5, r6, pc}
    42be:	bf00      	nop
    42c0:	20001140 	.word	0x20001140

000042c4 <non-virtual thunk to PinGame::~PinGame()>:
	bool _3balls;
	//String inits;

public:
	PinGame(Board_Sys80b& board);
	virtual ~PinGame();
    42c4:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    42c8:	f7ff bf96 	b.w	41f8 <PinGame::~PinGame()>

000042cc <PinGame::~PinGame()>:
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    42cc:	b510      	push	{r4, lr}
    42ce:	4604      	mov	r4, r0
	delete lights;
}
    42d0:	f7ff ff92 	bl	41f8 <PinGame::~PinGame()>
    42d4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    42d8:	4620      	mov	r0, r4
    42da:	f007 ff4b 	bl	c174 <operator delete(void*, unsigned int)>
    42de:	4620      	mov	r0, r4
    42e0:	bd10      	pop	{r4, pc}
    42e2:	bf00      	nop

000042e4 <non-virtual thunk to PinGame::~PinGame()>:
    42e4:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    42e8:	f7ff bff0 	b.w	42cc <PinGame::~PinGame()>

000042ec <PinGame::PinGame(Board_Sys80b&)>:
#include "LightSet.h"

const byte PinGame::dPlayerRow[] = { 0, 0, 1, 1 };
const byte PinGame::dPlayerCol[] = { 0, 10, 0, 10 };

PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
    42ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42f0:	b086      	sub	sp, #24
    42f2:	4604      	mov	r4, r0
    42f4:	f000 ffa0 	bl	5238 <Sys80b::Sys80b(Board_Sys80b&)>
    42f8:	4bab      	ldr	r3, [pc, #684]	; (45a8 <PinGame::PinGame(Board_Sys80b&)+0x2bc>)
    42fa:	f504 7527 	add.w	r5, r4, #668	; 0x29c
    42fe:	f504 7654 	add.w	r6, r4, #848	; 0x350
    4302:	f103 0234 	add.w	r2, r3, #52	; 0x34
    4306:	6023      	str	r3, [r4, #0]
    4308:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
#include "ExtTextDisplay.h"

enum pinballMode { SHOW_MODE, GAME_MODE, TEST_MODE, BOOKKEEP_MODE };

// top score entry
struct TopPlay {
    430c:	2100      	movs	r1, #0
    430e:	4628      	mov	r0, r5
    4310:	f008 f874 	bl	c3fc <String::String(char const*)>
    4314:	f105 0010 	add.w	r0, r5, #16
    4318:	3524      	adds	r5, #36	; 0x24
    431a:	2100      	movs	r1, #0
    431c:	f008 f86e 	bl	c3fc <String::String(char const*)>
    4320:	42ae      	cmp	r6, r5
    4322:	d1f3      	bne.n	430c <PinGame::PinGame(Board_Sys80b&)+0x20>
    4324:	2230      	movs	r2, #48	; 0x30
    4326:	2100      	movs	r1, #0
    4328:	f504 7053 	add.w	r0, r4, #844	; 0x34c
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    432c:	f504 756c 	add.w	r5, r4, #944	; 0x3b0
    4330:	f009 f81e 	bl	d370 <memset>
    4334:	2306      	movs	r3, #6
    4336:	4628      	mov	r0, r5
    4338:	2100      	movs	r1, #0
    433a:	f884 33ac 	strb.w	r3, [r4, #940]	; 0x3ac
    433e:	f504 7672 	add.w	r6, r4, #968	; 0x3c8
		SENSOR(rightCoin, RIGHTCOIN_SW, "Right coin");
		SENSOR(centerCoin, CENTERCOIN_SW, "Right coin");
		SENSOR(replay, REPLAY_SW, "Replay button");
		SENSOR(tilt, REPLAY_SW, "Tilt (cabinet)");
		// constructor
		StdSw(Sys80b* sys) : _sys(sys) {
    4342:	f8c4 43a4 	str.w	r4, [r4, #932]	; 0x3a4
    4346:	f504 7878 	add.w	r8, r4, #992	; 0x3e0
    434a:	f8c4 43a8 	str.w	r4, [r4, #936]	; 0x3a8
    434e:	f504 6782 	add.w	r7, r4, #1040	; 0x410
    4352:	f008 f853 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    4356:	4995      	ldr	r1, [pc, #596]	; (45ac <PinGame::PinGame(Board_Sys80b&)+0x2c0>)
    4358:	a802      	add	r0, sp, #8
    435a:	f008 f863 	bl	c424 <String::String(__FlashStringHelper const*)>
    435e:	a902      	add	r1, sp, #8
    4360:	4628      	mov	r0, r5
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4362:	f504 757e 	add.w	r5, r4, #1016	; 0x3f8
		descr = String(descrText);
    4366:	f008 f8ef 	bl	c548 <String::operator=(String&&)>
    436a:	a802      	add	r0, sp, #8
    436c:	f008 f806 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4370:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    4374:	2307      	movs	r3, #7
    4376:	4630      	mov	r0, r6
    4378:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    437c:	2100      	movs	r1, #0
    437e:	f884 33c4 	strb.w	r3, [r4, #964]	; 0x3c4
    4382:	f008 f83b 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    4386:	498a      	ldr	r1, [pc, #552]	; (45b0 <PinGame::PinGame(Board_Sys80b&)+0x2c4>)
    4388:	a802      	add	r0, sp, #8
    438a:	f008 f84b 	bl	c424 <String::String(__FlashStringHelper const*)>
    438e:	a902      	add	r1, sp, #8
    4390:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4392:	f504 6685 	add.w	r6, r4, #1064	; 0x428
		descr = String(descrText);
    4396:	f008 f8d7 	bl	c548 <String::operator=(String&&)>
    439a:	a802      	add	r0, sp, #8
    439c:	f007 ffee 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    43a0:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    43a4:	2310      	movs	r3, #16
    43a6:	4640      	mov	r0, r8
    43a8:	f8c4 23d8 	str.w	r2, [r4, #984]	; 0x3d8
    43ac:	2100      	movs	r1, #0
    43ae:	f884 33dc 	strb.w	r3, [r4, #988]	; 0x3dc
    43b2:	f008 f823 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    43b6:	497f      	ldr	r1, [pc, #508]	; (45b4 <PinGame::PinGame(Board_Sys80b&)+0x2c8>)
    43b8:	a802      	add	r0, sp, #8
    43ba:	f008 f833 	bl	c424 <String::String(__FlashStringHelper const*)>
    43be:	a902      	add	r1, sp, #8
    43c0:	4640      	mov	r0, r8
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    43c2:	f04f 082f 	mov.w	r8, #47	; 0x2f
		descr = String(descrText);
    43c6:	f008 f8bf 	bl	c548 <String::operator=(String&&)>
    43ca:	a802      	add	r0, sp, #8
    43cc:	f007 ffd6 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    43d0:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    43d4:	2311      	movs	r3, #17
    43d6:	4628      	mov	r0, r5
    43d8:	f8c4 23f0 	str.w	r2, [r4, #1008]	; 0x3f0
    43dc:	2100      	movs	r1, #0
    43de:	f884 33f4 	strb.w	r3, [r4, #1012]	; 0x3f4
    43e2:	f008 f80b 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    43e6:	4974      	ldr	r1, [pc, #464]	; (45b8 <PinGame::PinGame(Board_Sys80b&)+0x2cc>)
    43e8:	a802      	add	r0, sp, #8
    43ea:	f008 f81b 	bl	c424 <String::String(__FlashStringHelper const*)>
    43ee:	a902      	add	r1, sp, #8
    43f0:	4628      	mov	r0, r5
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    43f2:	f504 6588 	add.w	r5, r4, #1088	; 0x440
		descr = String(descrText);
    43f6:	f008 f8a7 	bl	c548 <String::operator=(String&&)>
    43fa:	a802      	add	r0, sp, #8
    43fc:	f007 ffbe 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4400:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    4404:	231b      	movs	r3, #27
    4406:	4638      	mov	r0, r7
    4408:	f8c4 2408 	str.w	r2, [r4, #1032]	; 0x408
    440c:	2100      	movs	r1, #0
    440e:	f884 340c 	strb.w	r3, [r4, #1036]	; 0x40c
    4412:	f007 fff3 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    4416:	4969      	ldr	r1, [pc, #420]	; (45bc <PinGame::PinGame(Board_Sys80b&)+0x2d0>)
    4418:	a802      	add	r0, sp, #8
    441a:	f008 f803 	bl	c424 <String::String(__FlashStringHelper const*)>
    441e:	a902      	add	r1, sp, #8
    4420:	4638      	mov	r0, r7
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4422:	f504 678b 	add.w	r7, r4, #1112	; 0x458
		descr = String(descrText);
    4426:	f008 f88f 	bl	c548 <String::operator=(String&&)>
    442a:	a802      	add	r0, sp, #8
    442c:	f007 ffa6 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4430:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    4434:	2325      	movs	r3, #37	; 0x25
    4436:	4630      	mov	r0, r6
    4438:	f8c4 2420 	str.w	r2, [r4, #1056]	; 0x420
    443c:	2100      	movs	r1, #0
    443e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    4442:	f007 ffdb 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    4446:	495d      	ldr	r1, [pc, #372]	; (45bc <PinGame::PinGame(Board_Sys80b&)+0x2d0>)
    4448:	a802      	add	r0, sp, #8
    444a:	f007 ffeb 	bl	c424 <String::String(__FlashStringHelper const*)>
    444e:	a902      	add	r1, sp, #8
    4450:	4630      	mov	r0, r6
    4452:	f204 46e4 	addw	r6, r4, #1252	; 0x4e4
    4456:	f008 f877 	bl	c548 <String::operator=(String&&)>
    445a:	a802      	add	r0, sp, #8
    445c:	f007 ff8e 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4460:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
    4464:	f884 843c 	strb.w	r8, [r4, #1084]	; 0x43c
    4468:	4628      	mov	r0, r5
    446a:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    446e:	2100      	movs	r1, #0
    4470:	f007 ffc4 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    4474:	4952      	ldr	r1, [pc, #328]	; (45c0 <PinGame::PinGame(Board_Sys80b&)+0x2d4>)
    4476:	a802      	add	r0, sp, #8
    4478:	f007 ffd4 	bl	c424 <String::String(__FlashStringHelper const*)>
    447c:	a902      	add	r1, sp, #8
    447e:	4628      	mov	r0, r5
    4480:	f504 65a1 	add.w	r5, r4, #1288	; 0x508
    4484:	f008 f860 	bl	c548 <String::operator=(String&&)>
    4488:	a802      	add	r0, sp, #8
    448a:	f007 ff77 	bl	c37c <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    448e:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
    4492:	f884 8454 	strb.w	r8, [r4, #1108]	; 0x454
    4496:	4638      	mov	r0, r7
    4498:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    449c:	2100      	movs	r1, #0
    449e:	f007 ffad 	bl	c3fc <String::String(char const*)>
		descr = String(descrText);
    44a2:	4948      	ldr	r1, [pc, #288]	; (45c4 <PinGame::PinGame(Board_Sys80b&)+0x2d8>)
    44a4:	a802      	add	r0, sp, #8
    44a6:	f007 ffbd 	bl	c424 <String::String(__FlashStringHelper const*)>
    44aa:	a902      	add	r1, sp, #8
    44ac:	4638      	mov	r0, r7
    44ae:	f008 f84b 	bl	c548 <String::operator=(String&&)>
    44b2:	a802      	add	r0, sp, #8
    44b4:	f007 ff62 	bl	c37c <String::~String()>
		ACTUATOR(knocker, SOLENOIDS, KNOCKER_SOL, "knocker");
		ACTUATOR(outhole, SOLENOIDS, OUTHOLE_SOL, "outhole");
		ACTUATOR(relay_Q, LAMPS, Q_RELAY_LAMP, "Q relay");
		ACTUATOR(relay_T, LAMPS, T_RELAY_LAMP, "T relay");
		// constructor
		StdAct(Sys80b* sys) : _sys(sys) {
    44b8:	2301      	movs	r3, #1
    44ba:	4a43      	ldr	r2, [pc, #268]	; (45c8 <PinGame::PinGame(Board_Sys80b&)+0x2dc>)
    44bc:	4621      	mov	r1, r4
    44be:	f8c4 4468 	str.w	r4, [r4, #1128]	; 0x468
    44c2:	f204 406c 	addw	r0, r4, #1132	; 0x46c
    44c6:	9200      	str	r2, [sp, #0]
    44c8:	461a      	mov	r2, r3
    44ca:	f001 f955 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    44ce:	483f      	ldr	r0, [pc, #252]	; (45cc <PinGame::PinGame(Board_Sys80b&)+0x2e0>)
    44d0:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    44d4:	2308      	movs	r3, #8
    44d6:	2201      	movs	r2, #1
    44d8:	9000      	str	r0, [sp, #0]
    44da:	f204 4084 	addw	r0, r4, #1156	; 0x484
    44de:	f001 f94b 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    44e2:	483b      	ldr	r0, [pc, #236]	; (45d0 <PinGame::PinGame(Board_Sys80b&)+0x2e4>)
    44e4:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    44e8:	2309      	movs	r3, #9
    44ea:	2201      	movs	r2, #1
    44ec:	9000      	str	r0, [sp, #0]
    44ee:	f204 409c 	addw	r0, r4, #1180	; 0x49c
    44f2:	f001 f941 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    44f6:	4837      	ldr	r0, [pc, #220]	; (45d4 <PinGame::PinGame(Board_Sys80b&)+0x2e8>)
    44f8:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    44fc:	2300      	movs	r3, #0
    44fe:	2203      	movs	r2, #3
    4500:	9000      	str	r0, [sp, #0]
    4502:	f204 40b4 	addw	r0, r4, #1204	; 0x4b4
    4506:	f001 f937 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    450a:	4833      	ldr	r0, [pc, #204]	; (45d8 <PinGame::PinGame(Board_Sys80b&)+0x2ec>)
    450c:	2301      	movs	r3, #1
    450e:	2203      	movs	r2, #3
    4510:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    4514:	9000      	str	r0, [sp, #0]
    4516:	f204 40cc 	addw	r0, r4, #1228	; 0x4cc
    451a:	f001 f92d 	bl	5778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    451e:	4630      	mov	r0, r6
    4520:	f001 fb8e 	bl	5c40 <TimerSet::TimerSet()>
    4524:	2100      	movs	r1, #0
    4526:	4628      	mov	r0, r5
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
	_gameNum = 0;
    4528:	460f      	mov	r7, r1
#include "LightSet.h"

const byte PinGame::dPlayerRow[] = { 0, 0, 1, 1 };
const byte PinGame::dPlayerCol[] = { 0, 10, 0, 10 };

PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
    452a:	f007 ff67 	bl	c3fc <String::String(char const*)>
	msg->outln(F("Game init..."));
    452e:	492b      	ldr	r1, [pc, #172]	; (45dc <PinGame::PinGame(Board_Sys80b&)+0x2f0>)
    4530:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4534:	f002 f950 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	delay(100);
    4538:	2064      	movs	r0, #100	; 0x64
    453a:	f006 f96b 	bl	a814 <delay>
	extDisplay = new ExtTextDisplay(display);
    453e:	2020      	movs	r0, #32
    4540:	f007 fe12 	bl	c168 <operator new(unsigned int)>
    4544:	4680      	mov	r8, r0
    4546:	f104 0110 	add.w	r1, r4, #16
    454a:	f7ff f9ad 	bl	38a8 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)>
    454e:	f8c4 83a0 	str.w	r8, [r4, #928]	; 0x3a0
	lights = new LightSet(LAMPS_COUNT);
    4552:	2008      	movs	r0, #8
    4554:	f007 fe08 	bl	c168 <operator new(unsigned int)>
    4558:	4680      	mov	r8, r0
    455a:	2130      	movs	r1, #48	; 0x30
    455c:	f7ff fd7a 	bl	4054 <LightSet::LightSet(int)>
	_gameName = String("<no_name>");
    4560:	491f      	ldr	r1, [pc, #124]	; (45e0 <PinGame::PinGame(Board_Sys80b&)+0x2f4>)

PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
    4562:	f8c4 839c 	str.w	r8, [r4, #924]	; 0x39c
	_gameName = String("<no_name>");
    4566:	a802      	add	r0, sp, #8
    4568:	f007 ff48 	bl	c3fc <String::String(char const*)>
    456c:	a902      	add	r1, sp, #8
    456e:	4628      	mov	r0, r5
	_gameNum = 0;
	tmr.name = F("Pinball timer");
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    4570:	463d      	mov	r5, r7
PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
    4572:	f007 ffe9 	bl	c548 <String::operator=(String&&)>
    4576:	a802      	add	r0, sp, #8
    4578:	f007 ff00 	bl	c37c <String::~String()>
	_gameNum = 0;
	tmr.name = F("Pinball timer");
    457c:	4630      	mov	r0, r6
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
	_gameNum = 0;
    457e:	f8a4 7518 	strh.w	r7, [r4, #1304]	; 0x518
	tmr.name = F("Pinball timer");
    4582:	4918      	ldr	r1, [pc, #96]	; (45e4 <PinGame::PinGame(Board_Sys80b&)+0x2f8>)
    4584:	f007 fff2 	bl	c56c <String::operator=(__FlashStringHelper const*)>
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    4588:	b2a9      	uxth	r1, r5
    458a:	3501      	adds	r5, #1
    458c:	2201      	movs	r2, #1
    458e:	68a0      	ldr	r0, [r4, #8]
    4590:	f7fe f90e 	bl	27b0 <BitMappedSet::setProtection(unsigned short, bool)>
    4594:	2d03      	cmp	r5, #3
    4596:	d1f7      	bne.n	4588 <PinGame::PinGame(Board_Sys80b&)+0x29c>
	//void switchModeStep(byte stp);
	byte getNextPlayerOn();
	String getTopPlayerString(byte playerNum);
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
    4598:	4b13      	ldr	r3, [pc, #76]	; (45e8 <PinGame::PinGame(Board_Sys80b&)+0x2fc>)
	setActiveLightSet(lights);
	//reset();
}
    459a:	4620      	mov	r0, r4
    459c:	f8d4 239c 	ldr.w	r2, [r4, #924]	; 0x39c
    45a0:	601a      	str	r2, [r3, #0]
    45a2:	b006      	add	sp, #24
    45a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45a8:	20001140 	.word	0x20001140
    45ac:	20001180 	.word	0x20001180
    45b0:	20001194 	.word	0x20001194
    45b4:	200011a0 	.word	0x200011a0
    45b8:	200011b8 	.word	0x200011b8
    45bc:	200011c4 	.word	0x200011c4
    45c0:	200011d0 	.word	0x200011d0
    45c4:	200011e0 	.word	0x200011e0
    45c8:	20000744 	.word	0x20000744
    45cc:	2000052c 	.word	0x2000052c
    45d0:	20000534 	.word	0x20000534
    45d4:	200011f0 	.word	0x200011f0
    45d8:	200011f8 	.word	0x200011f8
    45dc:	20001200 	.word	0x20001200
    45e0:	20001210 	.word	0x20001210
    45e4:	2000121c 	.word	0x2000121c
    45e8:	20002ac8 	.word	0x20002ac8

000045ec <PinGame::setPinballMode(pinballMode)>:
	p.ballsLeft = getBallsCount();
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
    45ec:	b570      	push	{r4, r5, r6, lr}
    45ee:	b084      	sub	sp, #16
    45f0:	4606      	mov	r6, r0
    45f2:	460c      	mov	r4, r1
	String s;
    45f4:	2100      	movs	r1, #0
    45f6:	4668      	mov	r0, sp
    45f8:	f007 ff00 	bl	c3fc <String::String(char const*)>

	msg->clr();
    45fc:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
    4600:	f002 f876 	bl	66f0 <Msg::clr()>
	msg->out(F("Switching mode: "));
    4604:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
    4608:	4922      	ldr	r1, [pc, #136]	; (4694 <PinGame::setPinballMode(pinballMode)+0xa8>)
    460a:	f002 fa51 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
	msg->outln(m);
    460e:	4621      	mov	r1, r4
    4610:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
    4614:	220a      	movs	r2, #10
    4616:	f002 f911 	bl	683c <Msg::outln(unsigned long, int)>
	_state = m;
    461a:	f886 451a 	strb.w	r4, [r6, #1306]	; 0x51a
	//modeStep = 0;
	switch (m) {
    461e:	b1ec      	cbz	r4, 465c <PinGame::setPinballMode(pinballMode)+0x70>
    4620:	2c01      	cmp	r4, #1
    4622:	d116      	bne.n	4652 <PinGame::setPinballMode(pinballMode)+0x66>
	inline void setOnGameRelay(bool st) { setLamp(Q_RELAY_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    4624:	2300      	movs	r3, #0
    4626:	4622      	mov	r2, r4
    4628:	68b0      	ldr	r0, [r6, #8]
    462a:	4619      	mov	r1, r3
    462c:	f7fe f888 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
		extDisplay->clear();
		_gameOver = true;
		break;
	case GAME_MODE:
		setOnGameRelay(true); // game over
		extDisplay->clear();
    4630:	f8d6 53a0 	ldr.w	r5, [r6, #928]	; 0x3a0
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	}

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    4634:	7f2b      	ldrb	r3, [r5, #28]
    4636:	b14b      	cbz	r3, 464c <PinGame::setPinballMode(pinballMode)+0x60>
    4638:	2400      	movs	r4, #0
    463a:	4621      	mov	r1, r4
    463c:	3401      	adds	r4, #1
    463e:	4628      	mov	r0, r5
    4640:	f7ff f912 	bl	3868 <ExtTextDisplay::clearLine(unsigned char)>
    4644:	7f2b      	ldrb	r3, [r5, #28]
    4646:	b2e4      	uxtb	r4, r4
    4648:	42a3      	cmp	r3, r4
    464a:	d8f6      	bhi.n	463a <PinGame::setPinballMode(pinballMode)+0x4e>
		_gameOver = false;
    464c:	2300      	movs	r3, #0
    464e:	f886 351b 	strb.w	r3, [r6, #1307]	; 0x51b
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
	String s;
    4652:	4668      	mov	r0, sp
    4654:	f007 fe92 	bl	c37c <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    4658:	b004      	add	sp, #16
    465a:	bd70      	pop	{r4, r5, r6, pc}
    465c:	4623      	mov	r3, r4
    465e:	4622      	mov	r2, r4
    4660:	4621      	mov	r1, r4
    4662:	68b0      	ldr	r0, [r6, #8]
    4664:	f7fe f86c 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
	_state = m;
	//modeStep = 0;
	switch (m) {
	case SHOW_MODE:
		setOnGameRelay(false); // game over
		extDisplay->clear();
    4668:	f8d6 53a0 	ldr.w	r5, [r6, #928]	; 0x3a0
    466c:	7f2b      	ldrb	r3, [r5, #28]
    466e:	b143      	cbz	r3, 4682 <PinGame::setPinballMode(pinballMode)+0x96>
    4670:	4621      	mov	r1, r4
    4672:	3401      	adds	r4, #1
    4674:	4628      	mov	r0, r5
    4676:	f7ff f8f7 	bl	3868 <ExtTextDisplay::clearLine(unsigned char)>
    467a:	7f2b      	ldrb	r3, [r5, #28]
    467c:	b2e4      	uxtb	r4, r4
    467e:	42a3      	cmp	r3, r4
    4680:	d8f6      	bhi.n	4670 <PinGame::setPinballMode(pinballMode)+0x84>
		_gameOver = true;
    4682:	2301      	movs	r3, #1
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
	String s;
    4684:	4668      	mov	r0, sp
	//modeStep = 0;
	switch (m) {
	case SHOW_MODE:
		setOnGameRelay(false); // game over
		extDisplay->clear();
		_gameOver = true;
    4686:	f886 351b 	strb.w	r3, [r6, #1307]	; 0x51b
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
	String s;
    468a:	f007 fe77 	bl	c37c <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    468e:	b004      	add	sp, #16
    4690:	bd70      	pop	{r4, r5, r6, pc}
    4692:	bf00      	nop
    4694:	2000122c 	.word	0x2000122c

00004698 <PinGame::onKeyPressed(UserKey)>:
		}
	}
	else keyRepeat = false;
}

void PinGame::onKeyPressed(UserKey key)	{
    4698:	b538      	push	{r3, r4, r5, lr}
    469a:	460c      	mov	r4, r1
    469c:	4605      	mov	r5, r0
    469e:	210e      	movs	r1, #14
    46a0:	4818      	ldr	r0, [pc, #96]	; (4704 <PinGame::onKeyPressed(UserKey)+0x6c>)
    46a2:	f007 fbe3 	bl	be6c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    46a6:	4818      	ldr	r0, [pc, #96]	; (4708 <PinGame::onKeyPressed(UserKey)+0x70>)
    46a8:	f007 fda2 	bl	c1f0 <Print::println()>
	//msg->out("onKeyPressed: ");
	//msg->outln(key);
	Serial.println("onKeyPressed()");

	switch (key) {
    46ac:	2c02      	cmp	r4, #2
    46ae:	d006      	beq.n	46be <PinGame::onKeyPressed(UserKey)+0x26>
    46b0:	2c04      	cmp	r4, #4
    46b2:	d103      	bne.n	46bc <PinGame::onKeyPressed(UserKey)+0x24>
		break;
	case RIGHTADV_KEY:
		break;
	case TEST_KEY:
		//onTestButtonPressed();
		if (_gameOver) setPinballMode(TEST_MODE);
    46b4:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    46b8:	b9d3      	cbnz	r3, 46f0 <PinGame::onKeyPressed(UserKey)+0x58>
    46ba:	bd38      	pop	{r3, r4, r5, pc}
    46bc:	bd38      	pop	{r3, r4, r5, pc}

	switch (key) {
	case REPLAY_KEY:
		break;
	case LEFTADV_KEY: // rotate ledgrid mode
		if (_state == SHOW_MODE) {
    46be:	f895 351a 	ldrb.w	r3, [r5, #1306]	; 0x51a
    46c2:	2b00      	cmp	r3, #0
    46c4:	d1f9      	bne.n	46ba <PinGame::onKeyPressed(UserKey)+0x22>
			switch (hw->ledGridMode) {
    46c6:	f8d5 228c 	ldr.w	r2, [r5, #652]	; 0x28c
    46ca:	f892 109c 	ldrb.w	r1, [r2, #156]	; 0x9c
    46ce:	2901      	cmp	r1, #1
    46d0:	d00b      	beq.n	46ea <PinGame::onKeyPressed(UserKey)+0x52>
    46d2:	d313      	bcc.n	46fc <PinGame::onKeyPressed(UserKey)+0x64>
    46d4:	2902      	cmp	r1, #2
    46d6:	d101      	bne.n	46dc <PinGame::onKeyPressed(UserKey)+0x44>
				break;
			case LG_SWITCHES:
				hw->ledGridMode = LG_LAMPS;
				break;
			case LG_LAMPS:
				hw->ledGridMode = LG_OFF;
    46d8:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
				break;
			}
			msg->outln("Ledgrid mode changed.");
    46dc:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
    46e0:	490a      	ldr	r1, [pc, #40]	; (470c <PinGame::onKeyPressed(UserKey)+0x74>)
		if (_gameOver) setPinballMode(TEST_MODE);
		break;
	case NO_KEY:
		break;
	}
}
    46e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				break;
			case LG_LAMPS:
				hw->ledGridMode = LG_OFF;
				break;
			}
			msg->outln("Ledgrid mode changed.");
    46e6:	f002 b8a7 	b.w	6838 <Msg::outln(char const*)>
			switch (hw->ledGridMode) {
			case LG_OFF:
				hw->ledGridMode = LG_SWITCHES;
				break;
			case LG_SWITCHES:
				hw->ledGridMode = LG_LAMPS;
    46ea:	f882 409c 	strb.w	r4, [r2, #156]	; 0x9c
    46ee:	e7f5      	b.n	46dc <PinGame::onKeyPressed(UserKey)+0x44>
		break;
	case RIGHTADV_KEY:
		break;
	case TEST_KEY:
		//onTestButtonPressed();
		if (_gameOver) setPinballMode(TEST_MODE);
    46f0:	4628      	mov	r0, r5
    46f2:	2102      	movs	r1, #2
		break;
	case NO_KEY:
		break;
	}
}
    46f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		break;
	case RIGHTADV_KEY:
		break;
	case TEST_KEY:
		//onTestButtonPressed();
		if (_gameOver) setPinballMode(TEST_MODE);
    46f8:	f7ff bf78 	b.w	45ec <PinGame::setPinballMode(pinballMode)>
		break;
	case LEFTADV_KEY: // rotate ledgrid mode
		if (_state == SHOW_MODE) {
			switch (hw->ledGridMode) {
			case LG_OFF:
				hw->ledGridMode = LG_SWITCHES;
    46fc:	2301      	movs	r3, #1
    46fe:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    4702:	e7eb      	b.n	46dc <PinGame::onKeyPressed(UserKey)+0x44>
    4704:	20001240 	.word	0x20001240
    4708:	20001fdc 	.word	0x20001fdc
    470c:	20001250 	.word	0x20001250

00004710 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>:

	String crStr = String(credits);
	extDisplay->putText(1, crStr, 10 - crStr.length());
}

String PinGame::getScoreStr(uint32_t scr, byte digits, bool leadingZeros, bool dots) {
    4710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4714:	b088      	sub	sp, #32
    4716:	4617      	mov	r7, r2
    4718:	4606      	mov	r6, r0
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(const __FlashStringHelper *pgmstr) : String(pgmstr) {}
    471a:	4933      	ldr	r1, [pc, #204]	; (47e8 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xd8>)
    471c:	a804      	add	r0, sp, #16
    471e:	461d      	mov	r5, r3
    4720:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    4724:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    4728:	f007 fe7c 	bl	c424 <String::String(__FlashStringHelper const*)>
	byte ch, i, len;
	String st = F("0000000000") + String(scr);
    472c:	220a      	movs	r2, #10
    472e:	4639      	mov	r1, r7
    4730:	4668      	mov	r0, sp
    4732:	f007 fecf 	bl	c4d4 <String::String(unsigned long, unsigned char)>
    4736:	4669      	mov	r1, sp
    4738:	a804      	add	r0, sp, #16
    473a:	f007 ff93 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    473e:	4601      	mov	r1, r0
    4740:	4630      	mov	r0, r6
    4742:	f007 fe81 	bl	c448 <String::String(String const&)>
    4746:	4668      	mov	r0, sp
    4748:	f007 fe18 	bl	c37c <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    474c:	a804      	add	r0, sp, #16
    474e:	f007 fe15 	bl	c37c <String::~String()>
	if (digits > 10) digits = 10;
	st = st.substring(st.length() - digits);
    4752:	2d0a      	cmp	r5, #10
    4754:	68b2      	ldr	r2, [r6, #8]
    4756:	4631      	mov	r1, r6
    4758:	a804      	add	r0, sp, #16
    475a:	bf94      	ite	ls
    475c:	1b52      	subls	r2, r2, r5
    475e:	3a0a      	subhi	r2, #10
    4760:	f008 f808 	bl	c774 <String::substring(unsigned int) const>
    4764:	a904      	add	r1, sp, #16
    4766:	4630      	mov	r0, r6
    4768:	f007 feee 	bl	c548 <String::operator=(String&&)>
    476c:	a804      	add	r0, sp, #16
    476e:	f007 fe05 	bl	c37c <String::~String()>
	len = st.length();
    4772:	7a37      	ldrb	r7, [r6, #8]

	// zero clearing
	if (!leadingZeros && len > 2) { // cut leading zeros
    4774:	2f02      	cmp	r7, #2
    4776:	bf94      	ite	ls
    4778:	2300      	movls	r3, #0
    477a:	2301      	movhi	r3, #1
    477c:	42a3      	cmp	r3, r4
    477e:	d902      	bls.n	4786 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x76>
		for (i = 0; i < (len - 2) && st.charAt(i) == '0'; i++) st.setCharAt(i, ' ');
    4780:	1ebd      	subs	r5, r7, #2
    4782:	2d00      	cmp	r5, #0
    4784:	dc1e      	bgt.n	47c4 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xb4>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
    4786:	2f03      	cmp	r7, #3
    4788:	d918      	bls.n	47bc <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xac>
    478a:	f1b8 0f00 	cmp.w	r8, #0
    478e:	d015      	beq.n	47bc <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xac>
    4790:	1f3d      	subs	r5, r7, #4
    4792:	2403      	movs	r4, #3
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
    4794:	4629      	mov	r1, r5
    4796:	4630      	mov	r0, r6
    4798:	f007 ff90 	bl	c6bc <String::charAt(unsigned int) const>
    479c:	4603      	mov	r3, r0
			if (ch == ' ') break;
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    479e:	4629      	mov	r1, r5
    47a0:	4630      	mov	r0, r6
    47a2:	f063 027f 	orn	r2, r3, #127	; 0x7f
	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
    47a6:	2b20      	cmp	r3, #32
    47a8:	f1a5 0503 	sub.w	r5, r5, #3
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    47ac:	b2d2      	uxtb	r2, r2
	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
    47ae:	d005      	beq.n	47bc <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xac>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
    47b0:	3403      	adds	r4, #3
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    47b2:	f007 ff8d 	bl	c6d0 <String::setCharAt(unsigned int, char)>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
    47b6:	b2e4      	uxtb	r4, r4
    47b8:	42a7      	cmp	r7, r4
    47ba:	d8eb      	bhi.n	4794 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x84>
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
		}
	}

	return st;
}
    47bc:	4630      	mov	r0, r6
    47be:	b008      	add	sp, #32
    47c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	st = st.substring(st.length() - digits);
	len = st.length();

	// zero clearing
	if (!leadingZeros && len > 2) { // cut leading zeros
		for (i = 0; i < (len - 2) && st.charAt(i) == '0'; i++) st.setCharAt(i, ' ');
    47c4:	2400      	movs	r4, #0
    47c6:	4621      	mov	r1, r4
    47c8:	4630      	mov	r0, r6
    47ca:	f007 ff77 	bl	c6bc <String::charAt(unsigned int) const>
    47ce:	2830      	cmp	r0, #48	; 0x30
    47d0:	d1d9      	bne.n	4786 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x76>
    47d2:	4621      	mov	r1, r4
    47d4:	3401      	adds	r4, #1
    47d6:	2220      	movs	r2, #32
    47d8:	4630      	mov	r0, r6
    47da:	b2e4      	uxtb	r4, r4
    47dc:	f007 ff78 	bl	c6d0 <String::setCharAt(unsigned int, char)>
    47e0:	42ac      	cmp	r4, r5
    47e2:	dad0      	bge.n	4786 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x76>
    47e4:	e7ef      	b.n	47c6 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xb6>
    47e6:	bf00      	nop
    47e8:	20001270 	.word	0x20001270

000047ec <PinGame::displayScoresAndCredits()>:
	extDisplay->putText(1, crStr, 9);
	//delete& crStr;
}

// TODO
void PinGame::displayScoresAndCredits() {
    47ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47f0:	b097      	sub	sp, #92	; 0x5c
    47f2:	4606      	mov	r6, r0
	String st[4];
    47f4:	2100      	movs	r1, #0
    47f6:	a806      	add	r0, sp, #24
    47f8:	f007 fe00 	bl	c3fc <String::String(char const*)>
    47fc:	2100      	movs	r1, #0
    47fe:	a80a      	add	r0, sp, #40	; 0x28
    4800:	f007 fdfc 	bl	c3fc <String::String(char const*)>
    4804:	2100      	movs	r1, #0
    4806:	a80e      	add	r0, sp, #56	; 0x38
    4808:	f007 fdf8 	bl	c3fc <String::String(char const*)>
    480c:	a812      	add	r0, sp, #72	; 0x48
    480e:	2100      	movs	r1, #0
    4810:	f007 fdf4 	bl	c3fc <String::String(char const*)>
	//displayFx->putText(0, st[0], 0);
	//displayFx->putText(0, st[1], 12);
	//displayFx->putText(1, st[2], 0);
	//displayFx->putText(1, st[3], 12);

	extDisplay->clear();
    4814:	f8d6 53a0 	ldr.w	r5, [r6, #928]	; 0x3a0
    4818:	7f2b      	ldrb	r3, [r5, #28]
    481a:	b14b      	cbz	r3, 4830 <PinGame::displayScoresAndCredits()+0x44>
    481c:	2400      	movs	r4, #0
    481e:	4621      	mov	r1, r4
    4820:	3401      	adds	r4, #1
    4822:	4628      	mov	r0, r5
    4824:	f7ff f820 	bl	3868 <ExtTextDisplay::clearLine(unsigned char)>
    4828:	7f2b      	ldrb	r3, [r5, #28]
    482a:	b2e4      	uxtb	r4, r4
    482c:	42a3      	cmp	r3, r4
    482e:	d8f6      	bhi.n	481e <PinGame::displayScoresAndCredits()+0x32>
    4830:	4635      	mov	r5, r6
    4832:	af06      	add	r7, sp, #24
    4834:	f106 0930 	add.w	r9, r6, #48	; 0x30
	for (i = 0; i < 4; i++) st[i] = getScoreStr(player[i].score, SCORE_DIGITS, false);
    4838:	f04f 0800 	mov.w	r8, #0
    483c:	2308      	movs	r3, #8
    483e:	f8d5 234c 	ldr.w	r2, [r5, #844]	; 0x34c
    4842:	4631      	mov	r1, r6
    4844:	f8cd 8004 	str.w	r8, [sp, #4]
    4848:	eb0d 0003 	add.w	r0, sp, r3
    484c:	f8cd 8000 	str.w	r8, [sp]
    4850:	f7ff ff5e 	bl	4710 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>
    4854:	350c      	adds	r5, #12
    4856:	a902      	add	r1, sp, #8
    4858:	4638      	mov	r0, r7
    485a:	f007 fe75 	bl	c548 <String::operator=(String&&)>
    485e:	a802      	add	r0, sp, #8
    4860:	f007 fd8c 	bl	c37c <String::~String()>
    4864:	45a9      	cmp	r9, r5
    4866:	f107 0710 	add.w	r7, r7, #16
    486a:	f04f 0400 	mov.w	r4, #0
    486e:	d1e5      	bne.n	483c <PinGame::displayScoresAndCredits()+0x50>
	extDisplay->putText(0, st[0] ,0);
    4870:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    4874:	4623      	mov	r3, r4
    4876:	aa06      	add	r2, sp, #24
    4878:	4621      	mov	r1, r4
    487a:	9401      	str	r4, [sp, #4]
    487c:	9400      	str	r4, [sp, #0]
    487e:	f7ff f8dd 	bl	3a3c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(0, st[1], 12);
    4882:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    4886:	aa0a      	add	r2, sp, #40	; 0x28
    4888:	4621      	mov	r1, r4
    488a:	9401      	str	r4, [sp, #4]
    488c:	230c      	movs	r3, #12
    488e:	9400      	str	r4, [sp, #0]
    4890:	f7ff f8d4 	bl	3a3c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(1, st[2], 0);
    4894:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    4898:	4623      	mov	r3, r4
    489a:	aa0e      	add	r2, sp, #56	; 0x38
    489c:	9401      	str	r4, [sp, #4]
    489e:	2101      	movs	r1, #1
    48a0:	9400      	str	r4, [sp, #0]
    48a2:	f7ff f8cb 	bl	3a3c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(1, st[3], 12);
    48a6:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    48aa:	aa12      	add	r2, sp, #72	; 0x48
    48ac:	230c      	movs	r3, #12
    48ae:	9401      	str	r4, [sp, #4]
    48b0:	2101      	movs	r1, #1
    48b2:	9400      	str	r4, [sp, #0]
    48b4:	f7ff f8c2 	bl	3a3c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>

	String crStr = String(credits);
    48b8:	f896 137c 	ldrb.w	r1, [r6, #892]	; 0x37c
    48bc:	a802      	add	r0, sp, #8
    48be:	f007 fde1 	bl	c484 <String::String(unsigned char)>
	extDisplay->putText(1, crStr, 10 - crStr.length());
    48c2:	9b04      	ldr	r3, [sp, #16]
    48c4:	aa02      	add	r2, sp, #8
    48c6:	2101      	movs	r1, #1
    48c8:	f1c3 030a 	rsb	r3, r3, #10
    48cc:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    48d0:	9401      	str	r4, [sp, #4]
    48d2:	b2db      	uxtb	r3, r3
    48d4:	9400      	str	r4, [sp, #0]
    48d6:	f7ff f8b1 	bl	3a3c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(0, st[0] ,0);
	extDisplay->putText(0, st[1], 12);
	extDisplay->putText(1, st[2], 0);
	extDisplay->putText(1, st[3], 12);

	String crStr = String(credits);
    48da:	a802      	add	r0, sp, #8
    48dc:	f007 fd4e 	bl	c37c <String::~String()>
	//delete& crStr;
}

// TODO
void PinGame::displayScoresAndCredits() {
	String st[4];
    48e0:	a812      	add	r0, sp, #72	; 0x48
    48e2:	f007 fd4b 	bl	c37c <String::~String()>
    48e6:	a80e      	add	r0, sp, #56	; 0x38
    48e8:	f007 fd48 	bl	c37c <String::~String()>
    48ec:	a80a      	add	r0, sp, #40	; 0x28
    48ee:	f007 fd45 	bl	c37c <String::~String()>
    48f2:	a806      	add	r0, sp, #24
    48f4:	f007 fd42 	bl	c37c <String::~String()>
	extDisplay->putText(1, st[2], 0);
	extDisplay->putText(1, st[3], 12);

	String crStr = String(credits);
	extDisplay->putText(1, crStr, 10 - crStr.length());
}
    48f8:	b017      	add	sp, #92	; 0x5c
    48fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    48fe:	bf00      	nop

00004900 <PinGame::loadHighScores()>:
	uint32_t sc;
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
    4900:	2300      	movs	r3, #0
	}

	return st;
}

void PinGame::loadHighScores() {
    4902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4906:	4606      	mov	r6, r0
    4908:	b089      	sub	sp, #36	; 0x24
	uint32_t sc;
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
    490a:	2424      	movs	r4, #36	; 0x24
    490c:	f500 7527 	add.w	r5, r0, #668	; 0x29c
    4910:	f500 7954 	add.w	r9, r0, #848	; 0x350
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
    4914:	4698      	mov	r8, r3
    4916:	2701      	movs	r7, #1
	uint32_t sc;
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
    4918:	f88d 300f 	strb.w	r3, [sp, #15]
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
    491c:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4920:	4621      	mov	r1, r4
    4922:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4926:	f002 fb5d 	bl	6fe4 <NVData_class::readDWord(unsigned short)>
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
    492a:	2308      	movs	r3, #8

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
    492c:	4602      	mov	r2, r0
		topScore[i].score = sc;
    492e:	f845 0c04 	str.w	r0, [r5, #-4]
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
    4932:	4631      	mov	r1, r6
    4934:	a804      	add	r0, sp, #16
    4936:	9701      	str	r7, [sp, #4]
    4938:	f8cd 8000 	str.w	r8, [sp]
    493c:	f7ff fee8 	bl	4710 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>
    4940:	a904      	add	r1, sp, #16
    4942:	4628      	mov	r0, r5
    4944:	f007 fe00 	bl	c548 <String::operator=(String&&)>
    4948:	a804      	add	r0, sp, #16
    494a:	f007 fd17 	bl	c37c <String::~String()>
		inits[0] = (char)(hw->NVData->readByte(j + 4));
    494e:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4952:	1d21      	adds	r1, r4, #4
    4954:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4958:	b289      	uxth	r1, r1
    495a:	f002 fb03 	bl	6f64 <NVData_class::readByte(unsigned short)>
		inits[1] = (char)(hw->NVData->readByte(j + 5));
    495e:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4962:	1d61      	adds	r1, r4, #5
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
		inits[0] = (char)(hw->NVData->readByte(j + 4));
    4964:	f88d 000c 	strb.w	r0, [sp, #12]
		inits[1] = (char)(hw->NVData->readByte(j + 5));
    4968:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    496c:	b289      	uxth	r1, r1
    496e:	f002 faf9 	bl	6f64 <NVData_class::readByte(unsigned short)>
		inits[2] = (char)(hw->NVData->readByte(j + 6));
    4972:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4976:	1da1      	adds	r1, r4, #6
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
		inits[0] = (char)(hw->NVData->readByte(j + 4));
		inits[1] = (char)(hw->NVData->readByte(j + 5));
    4978:	f88d 000d 	strb.w	r0, [sp, #13]
		inits[2] = (char)(hw->NVData->readByte(j + 6));
    497c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4980:	3408      	adds	r4, #8
    4982:	b289      	uxth	r1, r1
    4984:	f002 faee 	bl	6f64 <NVData_class::readByte(unsigned short)>
		topScore[i].playerName = String(inits);
    4988:	a903      	add	r1, sp, #12
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
		inits[0] = (char)(hw->NVData->readByte(j + 4));
		inits[1] = (char)(hw->NVData->readByte(j + 5));
		inits[2] = (char)(hw->NVData->readByte(j + 6));
    498a:	f88d 000e 	strb.w	r0, [sp, #14]
		topScore[i].playerName = String(inits);
    498e:	a804      	add	r0, sp, #16
    4990:	f007 fd34 	bl	c3fc <String::String(char const*)>
    4994:	a904      	add	r1, sp, #16
    4996:	f105 0010 	add.w	r0, r5, #16
    499a:	3524      	adds	r5, #36	; 0x24
    499c:	f007 fdd4 	bl	c548 <String::operator=(String&&)>
    49a0:	a804      	add	r0, sp, #16
    49a2:	f007 fceb 	bl	c37c <String::~String()>
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
	for (i = 0; i < TOP_SCORES; i++) {
    49a6:	454d      	cmp	r5, r9
    49a8:	b2a4      	uxth	r4, r4
    49aa:	d1b7      	bne.n	491c <PinGame::loadHighScores()+0x1c>
		//Serial.print(topScore[i].playerName);
		//Serial.print(" -  ");		
		//Serial.println(topScore[i].scoreString);
		//delay(100);
	}
}
    49ac:	b009      	add	sp, #36	; 0x24
    49ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    49b2:	bf00      	nop

000049b4 <PinGame::loadAwardScoreLevels()>:

void PinGame::loadAwardScoreLevels() {
    49b4:	b570      	push	{r4, r5, r6, lr}
    49b6:	4606      	mov	r6, r0
    49b8:	2416      	movs	r4, #22
    49ba:	f500 7562 	add.w	r5, r0, #904	; 0x388
	//msg->outln(F("- loadAwardScoreLevels()..."));
	for (byte i = 0; i < 3; i++) {
		awardLevelScore[i] = hw->NVData->readDWord(22 + i * 4);
    49be:	4621      	mov	r1, r4
    49c0:	3404      	adds	r4, #4
    49c2:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    49c6:	b2a4      	uxth	r4, r4
    49c8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    49cc:	f002 fb0a 	bl	6fe4 <NVData_class::readDWord(unsigned short)>
	}
}

void PinGame::loadAwardScoreLevels() {
	//msg->outln(F("- loadAwardScoreLevels()..."));
	for (byte i = 0; i < 3; i++) {
    49d0:	2c22      	cmp	r4, #34	; 0x22
		awardLevelScore[i] = hw->NVData->readDWord(22 + i * 4);
    49d2:	f845 0f04 	str.w	r0, [r5, #4]!
	}
}

void PinGame::loadAwardScoreLevels() {
	//msg->outln(F("- loadAwardScoreLevels()..."));
	for (byte i = 0; i < 3; i++) {
    49d6:	d1f2      	bne.n	49be <PinGame::loadAwardScoreLevels()+0xa>
		awardLevelScore[i] = hw->NVData->readDWord(22 + i * 4);
		//Serial.printf("level %d: ", i + 1);
		//Serial.println(awardLevelScore[i]);
	}
}
    49d8:	bd70      	pop	{r4, r5, r6, pc}
    49da:	bf00      	nop

000049dc <PinGame::loadCoinsPerCredits()>:

void PinGame::loadCoinsPerCredits() {
    49dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49e0:	4607      	mov	r7, r0
    49e2:	2500      	movs	r5, #0
			ch_coins[i] = coins_ratio[v];
			//Serial.printf("chute %d: %d credit(s) for %d coin(s)\n", 
			//	i+1 , ch_credits[i], ch_coins[i]);
		}
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
    49e4:	f04f 0801 	mov.w	r8, #1

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
    49e8:	4e0e      	ldr	r6, [pc, #56]	; (4a24 <PinGame::loadCoinsPerCredits()+0x48>)
    49ea:	f500 7460 	add.w	r4, r0, #896	; 0x380
void PinGame::loadCoinsPerCredits() {
	byte i, v;

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
    49ee:	b2e9      	uxtb	r1, r5
    49f0:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
    49f4:	f001 fce8 	bl	63c8 <Board_Sys80b::getSettingByte(unsigned char)>
    49f8:	f000 001f 	and.w	r0, r0, #31
		if (v <= 24) {
    49fc:	2818      	cmp	r0, #24
			ch_credits[i] = credits_ratio[v];
			ch_coins[i] = coins_ratio[v];
    49fe:	eb06 0300 	add.w	r3, r6, r0
	byte i, v;

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
		if (v <= 24) {
    4a02:	d80a      	bhi.n	4a1a <PinGame::loadCoinsPerCredits()+0x3e>
			ch_credits[i] = credits_ratio[v];
    4a04:	5c32      	ldrb	r2, [r6, r0]
			ch_coins[i] = coins_ratio[v];
    4a06:	7f1b      	ldrb	r3, [r3, #28]

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
    4a08:	7022      	strb	r2, [r4, #0]
			ch_coins[i] = coins_ratio[v];
    4a0a:	f804 3c03 	strb.w	r3, [r4, #-3]
    4a0e:	3501      	adds	r5, #1
    4a10:	3401      	adds	r4, #1

void PinGame::loadCoinsPerCredits() {
	byte i, v;

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
    4a12:	2d03      	cmp	r5, #3
    4a14:	d1eb      	bne.n	49ee <PinGame::loadCoinsPerCredits()+0x12>
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
			ch_coins[i] = 1;
		}
	}
}
    4a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ch_coins[i] = coins_ratio[v];
			//Serial.printf("chute %d: %d credit(s) for %d coin(s)\n", 
			//	i+1 , ch_credits[i], ch_coins[i]);
		}
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
    4a1a:	f884 8000 	strb.w	r8, [r4]
			ch_coins[i] = 1;
    4a1e:	f804 8c03 	strb.w	r8, [r4, #-3]
    4a22:	e7f4      	b.n	4a0e <PinGame::loadCoinsPerCredits()+0x32>
    4a24:	60001620 	.word	0x60001620

00004a28 <PinGame::reset()>:
PinGame::~PinGame() {
	delete lights;
}

// pinball generic initialization procedures
void PinGame::reset() {
    4a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a2c:	4605      	mov	r5, r0
    4a2e:	b08b      	sub	sp, #44	; 0x2c
	byte i;

	msg->outln(F("Game reset..."));
    4a30:	493d      	ldr	r1, [pc, #244]	; (4b28 <PinGame::reset()+0x100>)
	//delay(100);
	Sys80b::reset();
	// variables init
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
    4a32:	2600      	movs	r6, #0

// pinball generic initialization procedures
void PinGame::reset() {
	byte i;

	msg->outln(F("Game reset..."));
    4a34:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    4a38:	f505 742b 	add.w	r4, r5, #684	; 0x2ac
    4a3c:	f001 fecc 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	//delay(100);
	Sys80b::reset();
    4a40:	4628      	mov	r0, r5
    4a42:	f000 fc43 	bl	52cc <Sys80b::reset()>
    4a46:	f8d5 239c 	ldr.w	r2, [r5, #924]	; 0x39c
    4a4a:	4b38      	ldr	r3, [pc, #224]	; (4b2c <PinGame::reset()+0x104>)
	//_gameOver = true;
	_players = 0;
	credits = 0; // TODO

	//hw->lcdclr();
	String st = F("Game: ");
    4a4c:	a802      	add	r0, sp, #8
    4a4e:	4938      	ldr	r1, [pc, #224]	; (4b30 <PinGame::reset()+0x108>)
    4a50:	f505 7958 	add.w	r9, r5, #864	; 0x360
	msg->outln(F("Game reset..."));
	//delay(100);
	Sys80b::reset();
	// variables init
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
    4a54:	f885 6281 	strb.w	r6, [r5, #641]	; 0x281

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
	for (i = 0; i < TOP_SCORES; i++) {
		topScore[i].playerName = String("FAB");
		topScore[i].score = 1000;
    4a58:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
	//_keyRepeat = false;
	//_mode = NORMAL_MODE;
	//_gameOver = true;
	_players = 0;
    4a5c:	f885 651c 	strb.w	r6, [r5, #1308]	; 0x51c
	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
	for (i = 0; i < TOP_SCORES; i++) {
		topScore[i].playerName = String("FAB");
		topScore[i].score = 1000;
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
    4a60:	2701      	movs	r7, #1
	_keyPressed = NO_KEY;
	//_keyRepeat = false;
	//_mode = NORMAL_MODE;
	//_gameOver = true;
	_players = 0;
	credits = 0; // TODO
    4a62:	f885 637c 	strb.w	r6, [r5, #892]	; 0x37c
    4a66:	601a      	str	r2, [r3, #0]

	//hw->lcdclr();
	String st = F("Game: ");
    4a68:	f007 fcdc 	bl	c424 <String::String(__FlashStringHelper const*)>
	//void renderNextLampsGroup();
	//void updateLights(uint32_t ms);
	//void updateAndRenderLamps(uint32_t ms);
	//void onSwitchEvent(byte sw, bool st);
	virtual void millisRoutine(uint32_t& ms);
	inline String getGameName() { return _gameName; } // returns game name
    4a6c:	f505 61a1 	add.w	r1, r5, #1288	; 0x508
    4a70:	a806      	add	r0, sp, #24
    4a72:	f007 fce9 	bl	c448 <String::String(String const&)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    4a76:	a906      	add	r1, sp, #24
    4a78:	a802      	add	r0, sp, #8
    4a7a:	f007 fdbd 	bl	c5f8 <String::append(String const&)>
	st += getGameName();
    4a7e:	a806      	add	r0, sp, #24
    4a80:	f007 fc7c 	bl	c37c <String::~String()>
	hw->lcdprn(0, st);
    4a84:	4633      	mov	r3, r6
    4a86:	aa02      	add	r2, sp, #8
    4a88:	4631      	mov	r1, r6
    4a8a:	f8d5 028c 	ldr.w	r0, [r5, #652]	; 0x28c
    4a8e:	f001 faa1 	bl	5fd4 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
	//delay(50);

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
    4a92:	f885 6383 	strb.w	r6, [r5, #899]	; 0x383
    4a96:	f885 6384 	strb.w	r6, [r5, #900]	; 0x384
    4a9a:	f885 6385 	strb.w	r6, [r5, #901]	; 0x385
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
    4a9e:	f8c5 634c 	str.w	r6, [r5, #844]	; 0x34c
    4aa2:	f8c5 6358 	str.w	r6, [r5, #856]	; 0x358
    4aa6:	f8c5 6364 	str.w	r6, [r5, #868]	; 0x364
    4aaa:	f8c5 6370 	str.w	r6, [r5, #880]	; 0x370
	for (i = 0; i < TOP_SCORES; i++) {
		topScore[i].playerName = String("FAB");
    4aae:	4921      	ldr	r1, [pc, #132]	; (4b34 <PinGame::reset()+0x10c>)
    4ab0:	a806      	add	r0, sp, #24
    4ab2:	f007 fca3 	bl	c3fc <String::String(char const*)>
    4ab6:	a906      	add	r1, sp, #24
    4ab8:	4620      	mov	r0, r4
    4aba:	f007 fd45 	bl	c548 <String::operator=(String&&)>
    4abe:	a806      	add	r0, sp, #24
    4ac0:	f007 fc5c 	bl	c37c <String::~String()>
		topScore[i].score = 1000;
    4ac4:	f844 8c14 	str.w	r8, [r4, #-20]
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
    4ac8:	2308      	movs	r3, #8
    4aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4ace:	4629      	mov	r1, r5
    4ad0:	a806      	add	r0, sp, #24
    4ad2:	9701      	str	r7, [sp, #4]
    4ad4:	9700      	str	r7, [sp, #0]
    4ad6:	f7ff fe1b 	bl	4710 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>
    4ada:	a906      	add	r1, sp, #24
    4adc:	f1a4 0010 	sub.w	r0, r4, #16
    4ae0:	3424      	adds	r4, #36	; 0x24
    4ae2:	f007 fd31 	bl	c548 <String::operator=(String&&)>
    4ae6:	a806      	add	r0, sp, #24
    4ae8:	f007 fc48 	bl	c37c <String::~String()>
	hw->lcdprn(0, st);
	//delay(50);

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
	for (i = 0; i < TOP_SCORES; i++) {
    4aec:	45a1      	cmp	r9, r4
    4aee:	d1de      	bne.n	4aae <PinGame::reset()+0x86>
    4af0:	2400      	movs	r4, #0
		topScore[i].playerName = String("FAB");
		topScore[i].score = 1000;
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
	}
	for (i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    4af2:	b2a1      	uxth	r1, r4
    4af4:	3401      	adds	r4, #1
    4af6:	2201      	movs	r2, #1
    4af8:	68a8      	ldr	r0, [r5, #8]
    4afa:	f7fd fe59 	bl	27b0 <BitMappedSet::setProtection(unsigned short, bool)>
    4afe:	2c03      	cmp	r4, #3
    4b00:	d1f7      	bne.n	4af2 <PinGame::reset()+0xca>
														   
	//_3balls = (getBallsCount() == 3) ? true : false;
	_3balls = true; // TODO
    4b02:	2301      	movs	r3, #1
	loadCoinsPerCredits();
    4b04:	4628      	mov	r0, r5
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
	}
	for (i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
														   
	//_3balls = (getBallsCount() == 3) ? true : false;
	_3balls = true; // TODO
    4b06:	f885 351d 	strb.w	r3, [r5, #1309]	; 0x51d
	loadCoinsPerCredits();
    4b0a:	f7ff ff67 	bl	49dc <PinGame::loadCoinsPerCredits()>
	loadAwardScoreLevels();
    4b0e:	4628      	mov	r0, r5
    4b10:	f7ff ff50 	bl	49b4 <PinGame::loadAwardScoreLevels()>
	loadHighScores();
    4b14:	4628      	mov	r0, r5
    4b16:	f7ff fef3 	bl	4900 <PinGame::loadHighScores()>
	//_gameOver = true;
	_players = 0;
	credits = 0; // TODO

	//hw->lcdclr();
	String st = F("Game: ");
    4b1a:	a802      	add	r0, sp, #8
    4b1c:	f007 fc2e 	bl	c37c <String::~String()>
	loadAwardScoreLevels();
	loadHighScores();
	//defaultBallsPerPlay = (getSettingSwitch(25) == 1) ? 3 : 5;
	
	//setPinballMode(SHOW_MODE);
}
    4b20:	b00b      	add	sp, #44	; 0x2c
    4b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b26:	bf00      	nop
    4b28:	2000127c 	.word	0x2000127c
    4b2c:	20002ac8 	.word	0x20002ac8
    4b30:	2000128c 	.word	0x2000128c
    4b34:	20001294 	.word	0x20001294

00004b38 <PinGame::addCredits(unsigned char)>:
		addCredits(ch_credits[cch]);
		coins[cch] = 0;
	}
}

void PinGame::addCredits(byte increment) {
    4b38:	b538      	push	{r3, r4, r5, lr}
    4b3a:	4604      	mov	r4, r0
    4b3c:	460d      	mov	r5, r1
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4b3e:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
    4b42:	2101      	movs	r1, #1
    4b44:	f001 fc40 	bl	63c8 <Board_Sys80b::getSettingByte(unsigned char)>
	//prevcr = credits;
	credits += increment;
    4b48:	f894 137c 	ldrb.w	r1, [r4, #892]	; 0x37c
	}
}

void PinGame::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4b4c:	4b06      	ldr	r3, [pc, #24]	; (4b68 <PinGame::addCredits(unsigned char)+0x30>)
    4b4e:	f3c0 1087 	ubfx	r0, r0, #6, #8
	//prevcr = credits;
	credits += increment;
    4b52:	4429      	add	r1, r5
	}
}

void PinGame::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4b54:	4418      	add	r0, r3
	//prevcr = credits;
	credits += increment;
    4b56:	b2c9      	uxtb	r1, r1
	}
}

void PinGame::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4b58:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	//prevcr = credits;
	credits += increment;
    4b5c:	4299      	cmp	r1, r3
    4b5e:	bf28      	it	cs
    4b60:	4619      	movcs	r1, r3
    4b62:	f884 137c 	strb.w	r1, [r4, #892]	; 0x37c
    4b66:	bd38      	pop	{r3, r4, r5, pc}
    4b68:	60001620 	.word	0x60001620

00004b6c <PinGame::addScore(unsigned long)>:
	player[playerOn].ballsLeft++;
	activateSolenoid(KNOCKER_SOL, 250); // knocker
	//stdAct.knocker.activate(250);
}

void PinGame::addScore(uint32_t sc) {
    4b6c:	b570      	push	{r4, r5, r6, lr}
	byte lev;

	player[playerOn].score += sc;
    4b6e:	f890 3387 	ldrb.w	r3, [r0, #903]	; 0x387
	player[playerOn].ballsLeft++;
	activateSolenoid(KNOCKER_SOL, 250); // knocker
	//stdAct.knocker.activate(250);
}

void PinGame::addScore(uint32_t sc) {
    4b72:	4604      	mov	r4, r0
	byte lev;

	player[playerOn].score += sc;
    4b74:	005d      	lsls	r5, r3, #1
    4b76:	18ea      	adds	r2, r5, r3
    4b78:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4b7c:	f8d2 034c 	ldr.w	r0, [r2, #844]	; 0x34c
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
    4b80:	f892 6355 	ldrb.w	r6, [r2, #853]	; 0x355
}

void PinGame::addScore(uint32_t sc) {
	byte lev;

	player[playerOn].score += sc;
    4b84:	4401      	add	r1, r0
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
    4b86:	2e02      	cmp	r6, #2
}

void PinGame::addScore(uint32_t sc) {
	byte lev;

	player[playerOn].score += sc;
    4b88:	f8c2 134c 	str.w	r1, [r2, #844]	; 0x34c
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
    4b8c:	d805      	bhi.n	4b9a <PinGame::addScore(unsigned long)+0x2e>
    4b8e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    4b92:	f8d0 038c 	ldr.w	r0, [r0, #908]	; 0x38c
    4b96:	4281      	cmp	r1, r0
    4b98:	d227      	bcs.n	4bea <PinGame::addScore(unsigned long)+0x7e>
			addCredits(1);
			setSolenoid(KNOCKER_SOL, true); // kicker
		}
	}
	// update for top score
	if (!player[playerOn].topScorer && player[playerOn].score >= topScore[0].score) {
    4b9a:	442b      	add	r3, r5
    4b9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4ba0:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
    4ba4:	b92a      	cbnz	r2, 4bb2 <PinGame::addScore(unsigned long)+0x46>
    4ba6:	f8d3 134c 	ldr.w	r1, [r3, #844]	; 0x34c
    4baa:	f8d4 2298 	ldr.w	r2, [r4, #664]	; 0x298
    4bae:	4291      	cmp	r1, r2
    4bb0:	d200      	bcs.n	4bb4 <PinGame::addScore(unsigned long)+0x48>
    4bb2:	bd70      	pop	{r4, r5, r6, pc}
		player[playerOn].topScorer = true;
    4bb4:	2601      	movs	r6, #1
    inline void lcdprn(String& st) { if (_lcd != nullptr) _lcd->print(st); }
    void lcdprn(byte line, const char* st, byte col = 0);
    void lcdprn(byte line, const __FlashStringHelper* st, byte col = 0);
    void lcdprn(byte line, String& st, byte col = 0);

    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    4bb6:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    4bba:	2116      	movs	r1, #22
    4bbc:	f883 6356 	strb.w	r6, [r3, #854]	; 0x356
    4bc0:	f001 fc0c 	bl	63dc <Board_Sys80b::getSettingBit(unsigned char)>
    4bc4:	4605      	mov	r5, r0
    4bc6:	2117      	movs	r1, #23
    4bc8:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    4bcc:	f001 fc06 	bl	63dc <Board_Sys80b::getSettingBit(unsigned char)>
		addCredits(hw->getSettingSwitch(23) * 2 + hw->getSettingSwitch(24));
    4bd0:	eb00 0145 	add.w	r1, r0, r5, lsl #1
    4bd4:	4620      	mov	r0, r4
    4bd6:	b2c9      	uxtb	r1, r1
    4bd8:	f7ff ffae 	bl	4b38 <PinGame::addCredits(unsigned char)>
		setSolenoid(KNOCKER_SOL, true); // kicker
    4bdc:	4632      	mov	r2, r6
    4bde:	4620      	mov	r0, r4
    4be0:	2108      	movs	r1, #8
	}
}
    4be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}
	// update for top score
	if (!player[playerOn].topScorer && player[playerOn].score >= topScore[0].score) {
		player[playerOn].topScorer = true;
		addCredits(hw->getSettingSwitch(23) * 2 + hw->getSettingSwitch(24));
		setSolenoid(KNOCKER_SOL, true); // kicker
    4be6:	f000 bb9f 	b.w	5328 <Sys80b::setSolenoid(unsigned char, bool)>

	player[playerOn].score += sc;
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
		player[playerOn].awardLevelReached++;
    4bea:	3601      	adds	r6, #1
    4bec:	211c      	movs	r1, #28
    4bee:	f882 6355 	strb.w	r6, [r2, #853]	; 0x355
    4bf2:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    4bf6:	f001 fbf1 	bl	63dc <Board_Sys80b::getSettingBit(unsigned char)>
		if (hw->getSettingSwitch(29) == 1) addExtraBall();
    4bfa:	2801      	cmp	r0, #1
    4bfc:	d00c      	beq.n	4c18 <PinGame::addScore(unsigned long)+0xac>
		else {
			addCredits(1);
    4bfe:	2101      	movs	r1, #1
    4c00:	4620      	mov	r0, r4
    4c02:	f7ff ff99 	bl	4b38 <PinGame::addCredits(unsigned char)>
			setSolenoid(KNOCKER_SOL, true); // kicker
    4c06:	2201      	movs	r2, #1
    4c08:	2108      	movs	r1, #8
    4c0a:	4620      	mov	r0, r4
    4c0c:	f000 fb8c 	bl	5328 <Sys80b::setSolenoid(unsigned char, bool)>
    4c10:	f894 3387 	ldrb.w	r3, [r4, #903]	; 0x387
    4c14:	005d      	lsls	r5, r3, #1
    4c16:	e7c0      	b.n	4b9a <PinGame::addScore(unsigned long)+0x2e>
//	displayScoresAndCredits();
//	//setSound(_);
//}

void PinGame::addExtraBall() {
	player[playerOn].ballsLeft++;
    4c18:	f894 5387 	ldrb.w	r5, [r4, #903]	; 0x387
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    4c1c:	2300      	movs	r3, #0
    4c1e:	22fa      	movs	r2, #250	; 0xfa
    4c20:	2108      	movs	r1, #8
//	displayScoresAndCredits();
//	//setSound(_);
//}

void PinGame::addExtraBall() {
	player[playerOn].ballsLeft++;
    4c22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    4c26:	4620      	mov	r0, r4
//	displayScoresAndCredits();
//	//setSound(_);
//}

void PinGame::addExtraBall() {
	player[playerOn].ballsLeft++;
    4c28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    4c2c:	f895 6354 	ldrb.w	r6, [r5, #852]	; 0x354
    4c30:	3601      	adds	r6, #1
    4c32:	f885 6354 	strb.w	r6, [r5, #852]	; 0x354
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    4c36:	f000 fb8d 	bl	5354 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    4c3a:	f894 3387 	ldrb.w	r3, [r4, #903]	; 0x387
    4c3e:	005d      	lsls	r5, r3, #1
    4c40:	e7ab      	b.n	4b9a <PinGame::addScore(unsigned long)+0x2e>
    4c42:	bf00      	nop

00004c44 <PinGame::addBonus(unsigned long)>:
		setSolenoid(KNOCKER_SOL, true); // kicker
	}
}

void PinGame::addBonus(uint32_t sc) {
	player[playerOn].bonus += sc;
    4c44:	f890 3387 	ldrb.w	r3, [r0, #903]	; 0x387
    4c48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4c4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4c50:	f8d0 3350 	ldr.w	r3, [r0, #848]	; 0x350
    4c54:	4419      	add	r1, r3
    4c56:	f8c0 1350 	str.w	r1, [r0, #848]	; 0x350
    4c5a:	4770      	bx	lr

00004c5c <PinGame::_checkPressedKey(unsigned long&)>:
// Must be called at regular times, with period <= KEY_REPEAT_PERIOD
void PinGame::_checkPressedKey(uint32_t& ms) {
	static UserKey prevKey = NO_KEY;
	static bool keyRepeat = false;

	if (_keyPressed != NO_KEY) {
    4c5c:	f890 3281 	ldrb.w	r3, [r0, #641]	; 0x281
    4c60:	b18b      	cbz	r3, 4c86 <PinGame::_checkPressedKey(unsigned long&)+0x2a>
//}

// Checks for keys command, implementing hold&repeat feature and calling upper-level event handler
// onKeyPressed(..) function.
// Must be called at regular times, with period <= KEY_REPEAT_PERIOD
void PinGame::_checkPressedKey(uint32_t& ms) {
    4c62:	b570      	push	{r4, r5, r6, lr}
	static UserKey prevKey = NO_KEY;
	static bool keyRepeat = false;

	if (_keyPressed != NO_KEY) {
		if (_keyPressed != prevKey) {
    4c64:	4d15      	ldr	r5, [pc, #84]	; (4cbc <PinGame::_checkPressedKey(unsigned long&)+0x60>)
    4c66:	782c      	ldrb	r4, [r5, #0]
    4c68:	429c      	cmp	r4, r3
    4c6a:	d10f      	bne.n	4c8c <PinGame::_checkPressedKey(unsigned long&)+0x30>
			onKeyPressed(_keyPressed);
			prevKey = _keyPressed;
		}
		else {
			if (!keyRepeat) {
    4c6c:	4b14      	ldr	r3, [pc, #80]	; (4cc0 <PinGame::_checkPressedKey(unsigned long&)+0x64>)
    4c6e:	781d      	ldrb	r5, [r3, #0]
    4c70:	b9ad      	cbnz	r5, 4c9e <PinGame::_checkPressedKey(unsigned long&)+0x42>
				if (ms - _keyUpdateTime >= KEY_REPEAT_DELAY) keyRepeat = true;
    4c72:	6809      	ldr	r1, [r1, #0]
    4c74:	f8d0 2288 	ldr.w	r2, [r0, #648]	; 0x288
    4c78:	1a8a      	subs	r2, r1, r2
    4c7a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
    4c7e:	d314      	bcc.n	4caa <PinGame::_checkPressedKey(unsigned long&)+0x4e>
    4c80:	2201      	movs	r2, #1
    4c82:	701a      	strb	r2, [r3, #0]
    4c84:	bd70      	pop	{r4, r5, r6, pc}
					onKeyPressed(_keyPressed);
				}
			}
		}
	}
	else keyRepeat = false;
    4c86:	4a0e      	ldr	r2, [pc, #56]	; (4cc0 <PinGame::_checkPressedKey(unsigned long&)+0x64>)
    4c88:	7013      	strb	r3, [r2, #0]
}
    4c8a:	4770      	bx	lr
	static UserKey prevKey = NO_KEY;
	static bool keyRepeat = false;

	if (_keyPressed != NO_KEY) {
		if (_keyPressed != prevKey) {
			onKeyPressed(_keyPressed);
    4c8c:	6802      	ldr	r2, [r0, #0]
    4c8e:	4604      	mov	r4, r0
    4c90:	4619      	mov	r1, r3
    4c92:	6a13      	ldr	r3, [r2, #32]
    4c94:	4798      	blx	r3
			prevKey = _keyPressed;
    4c96:	f894 3281 	ldrb.w	r3, [r4, #641]	; 0x281
    4c9a:	702b      	strb	r3, [r5, #0]
    4c9c:	bd70      	pop	{r4, r5, r6, pc}
		else {
			if (!keyRepeat) {
				if (ms - _keyUpdateTime >= KEY_REPEAT_DELAY) keyRepeat = true;
			}
			else { // repeating key
				if (ms - _keyUpdateTime >= KEY_REPEAT_PERIOD) {
    4c9e:	680d      	ldr	r5, [r1, #0]
    4ca0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
    4ca4:	1aeb      	subs	r3, r5, r3
    4ca6:	2bc7      	cmp	r3, #199	; 0xc7
    4ca8:	d800      	bhi.n	4cac <PinGame::_checkPressedKey(unsigned long&)+0x50>
    4caa:	bd70      	pop	{r4, r5, r6, pc}
					//Serial.print("key repeating...");
					_keyUpdateTime = ms;
					onKeyPressed(_keyPressed);
    4cac:	6803      	ldr	r3, [r0, #0]
    4cae:	4621      	mov	r1, r4
				if (ms - _keyUpdateTime >= KEY_REPEAT_DELAY) keyRepeat = true;
			}
			else { // repeating key
				if (ms - _keyUpdateTime >= KEY_REPEAT_PERIOD) {
					//Serial.print("key repeating...");
					_keyUpdateTime = ms;
    4cb0:	f8c0 5288 	str.w	r5, [r0, #648]	; 0x288
					onKeyPressed(_keyPressed);
    4cb4:	6a1b      	ldr	r3, [r3, #32]
				}
			}
		}
	}
	else keyRepeat = false;
}
    4cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
			else { // repeating key
				if (ms - _keyUpdateTime >= KEY_REPEAT_PERIOD) {
					//Serial.print("key repeating...");
					_keyUpdateTime = ms;
					onKeyPressed(_keyPressed);
    4cba:	4718      	bx	r3
    4cbc:	20002acd 	.word	0x20002acd
    4cc0:	20002acc 	.word	0x20002acc

00004cc4 <PinGame::millisRoutine(unsigned long&)>:
	case NO_KEY:
		break;
	}
}

void PinGame::millisRoutine(uint32_t& ms) {
    4cc4:	b570      	push	{r4, r5, r6, lr}
    4cc6:	4604      	mov	r4, r0
    4cc8:	460d      	mov	r5, r1

	tmr.update(ms);
	_checkPressedKey(ms);

	// updates all non-steady mode lights state
	/* if (currentLampGroup == 0) */ LightGroup::activeLightSet->update(ms);
    4cca:	4e0f      	ldr	r6, [pc, #60]	; (4d08 <PinGame::millisRoutine(unsigned long&)+0x44>)
	}
}

void PinGame::millisRoutine(uint32_t& ms) {

	tmr.update(ms);
    4ccc:	f200 40e4 	addw	r0, r0, #1252	; 0x4e4
    4cd0:	f001 f80e 	bl	5cf0 <TimerSet::update(unsigned long&)>
	_checkPressedKey(ms);
    4cd4:	4629      	mov	r1, r5
    4cd6:	4620      	mov	r0, r4
    4cd8:	f7ff ffc0 	bl	4c5c <PinGame::_checkPressedKey(unsigned long&)>

	// updates all non-steady mode lights state
	/* if (currentLampGroup == 0) */ LightGroup::activeLightSet->update(ms);
    4cdc:	6829      	ldr	r1, [r5, #0]
    4cde:	6830      	ldr	r0, [r6, #0]
    4ce0:	f7ff fa64 	bl	41ac <LightSet::update(unsigned long)>
	
	// PERCHE' NON FUNZIONA ?!
	//byte cl = currentLampGroup << 2;
	//LightGroup::activeLightSet->renderToLamps(lamps, cl, cl + 3);
	LightGroup::activeLightSet->renderToLamps(*lamps);
    4ce4:	2300      	movs	r3, #0
    4ce6:	6830      	ldr	r0, [r6, #0]
    4ce8:	68a1      	ldr	r1, [r4, #8]
    4cea:	461a      	mov	r2, r3
    4cec:	f7ff fa3c 	bl	4168 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)>
	
	extDisplay->update(ms);
    4cf0:	6829      	ldr	r1, [r5, #0]
    4cf2:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
    4cf6:	f7fe fd3f 	bl	3778 <ExtTextDisplay::update(unsigned long)>
	
	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
    4cfa:	4629      	mov	r1, r5
    4cfc:	4620      	mov	r0, r4
}
    4cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//LightGroup::activeLightSet->renderToLamps(lamps, cl, cl + 3);
	LightGroup::activeLightSet->renderToLamps(*lamps);
	
	extDisplay->update(ms);
	
	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
    4d02:	f000 bcd5 	b.w	56b0 <Sys80b::_millisRoutine(unsigned long&)>
    4d06:	bf00      	nop
    4d08:	20002ac8 	.word	0x20002ac8

00004d0c <SolenoidSet::SolenoidSet(unsigned char)>:
}

SolenoidSet::SolenoidSet(byte n) {
	//Serial.println("SolenoidSet(n) init...");
	//delay(100);
	if (n == 0 || n >= MAX_COUNT) {
    4d0c:	1e4b      	subs	r3, r1, #1
    4d0e:	2b1e      	cmp	r3, #30
	//delay(100);
	_solenoid = nullptr;
	_size = 0;
}

SolenoidSet::SolenoidSet(byte n) {
    4d10:	b570      	push	{r4, r5, r6, lr}
    4d12:	4606      	mov	r6, r0
	//Serial.println("SolenoidSet(n) init...");
	//delay(100);
	if (n == 0 || n >= MAX_COUNT) {
    4d14:	d825      	bhi.n	4d62 <SolenoidSet::SolenoidSet(unsigned char)+0x56>
		_solenoid = nullptr;
		_size = 0;
		return;
	}
	_solenoid = new Solenoid[n];
    4d16:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4d1a:	460c      	mov	r4, r1
#include "Arduino.h"
#include "BitMappedSet.h"

//class Solenoid;

struct Solenoid {
    4d1c:	f241 3588 	movw	r5, #5000	; 0x1388
    4d20:	00c0      	lsls	r0, r0, #3
    4d22:	f007 fa23 	bl	c16c <operator new[](unsigned int)>
    4d26:	2100      	movs	r1, #0
    4d28:	f100 0318 	add.w	r3, r0, #24
    4d2c:	460a      	mov	r2, r1
    4d2e:	3101      	adds	r1, #1
    4d30:	f803 2c18 	strb.w	r2, [r3, #-24]
    4d34:	f843 2c14 	str.w	r2, [r3, #-20]
    4d38:	3318      	adds	r3, #24
    4d3a:	428c      	cmp	r4, r1
    4d3c:	f823 2c28 	strh.w	r2, [r3, #-40]
    4d40:	f823 5c26 	strh.w	r5, [r3, #-38]
    4d44:	f823 2c24 	strh.w	r2, [r3, #-36]
    4d48:	d1f1      	bne.n	4d2e <SolenoidSet::SolenoidSet(unsigned char)+0x22>
    4d4a:	6030      	str	r0, [r6, #0]
	_state = new BitMappedSet(n);
    4d4c:	2010      	movs	r0, #16
    4d4e:	f007 fa0b 	bl	c168 <operator new(unsigned int)>
    4d52:	4605      	mov	r5, r0
    4d54:	4621      	mov	r1, r4
    4d56:	f7fd fcd1 	bl	26fc <BitMappedSet::BitMappedSet(unsigned short)>
    4d5a:	6075      	str	r5, [r6, #4]
	_size = n;
    4d5c:	7234      	strb	r4, [r6, #8]
}
    4d5e:	4630      	mov	r0, r6
    4d60:	bd70      	pop	{r4, r5, r6, pc}

SolenoidSet::SolenoidSet(byte n) {
	//Serial.println("SolenoidSet(n) init...");
	//delay(100);
	if (n == 0 || n >= MAX_COUNT) {
		_solenoid = nullptr;
    4d62:	2300      	movs	r3, #0
    4d64:	6003      	str	r3, [r0, #0]
		_size = 0;
    4d66:	7203      	strb	r3, [r0, #8]
		return;
	}
	_solenoid = new Solenoid[n];
	_state = new BitMappedSet(n);
	_size = n;
}
    4d68:	4630      	mov	r0, r6
    4d6a:	bd70      	pop	{r4, r5, r6, pc}

00004d6c <SolenoidSet::~SolenoidSet()>:

SolenoidSet::~SolenoidSet() {
    4d6c:	b538      	push	{r3, r4, r5, lr}
    4d6e:	4604      	mov	r4, r0
	delete[] _solenoid;
    4d70:	6800      	ldr	r0, [r0, #0]
    4d72:	b108      	cbz	r0, 4d78 <SolenoidSet::~SolenoidSet()+0xc>
    4d74:	f007 f9fc 	bl	c170 <operator delete[](void*)>
	delete _state;
    4d78:	6865      	ldr	r5, [r4, #4]
    4d7a:	b135      	cbz	r5, 4d8a <SolenoidSet::~SolenoidSet()+0x1e>
    4d7c:	4628      	mov	r0, r5
    4d7e:	f7fd fc97 	bl	26b0 <BitMappedSet::~BitMappedSet()>
    4d82:	4628      	mov	r0, r5
    4d84:	2110      	movs	r1, #16
    4d86:	f007 f9f5 	bl	c174 <operator delete(void*, unsigned int)>
}
    4d8a:	4620      	mov	r0, r4
    4d8c:	bd38      	pop	{r3, r4, r5, pc}
    4d8e:	bf00      	nop

00004d90 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>:
byte SolenoidSet::getSize() {
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
    4d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Solenoid& sol = _solenoid[n];
    4d92:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    4d96:	6805      	ldr	r5, [r0, #0]
    4d98:	00e4      	lsls	r4, r4, #3
	if (sol.active == state) return false;
    4d9a:	5d2e      	ldrb	r6, [r5, r4]
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
	Solenoid& sol = _solenoid[n];
    4d9c:	192f      	adds	r7, r5, r4
	if (sol.active == state) return false;
    4d9e:	4296      	cmp	r6, r2
    4da0:	d00e      	beq.n	4dc0 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)+0x30>
	sol.active = state;
    4da2:	552a      	strb	r2, [r5, r4]
	if (state) sol.swOnTime = t;
    4da4:	681b      	ldr	r3, [r3, #0]
    4da6:	b94a      	cbnz	r2, 4dbc <SolenoidSet::_switch(unsigned char, bool, unsigned long&)+0x2c>
	else sol.swOffTime = t;
    4da8:	617b      	str	r3, [r7, #20]
    4daa:	4605      	mov	r5, r0
    4dac:	460c      	mov	r4, r1
	_state->setState(n, state);
    4dae:	2300      	movs	r3, #0
    4db0:	6840      	ldr	r0, [r0, #4]
    4db2:	f7fd fcc5 	bl	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
	_lastChanged = n;
    4db6:	726c      	strb	r4, [r5, #9]
	return true;
    4db8:	2001      	movs	r0, #1
    4dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
	Solenoid& sol = _solenoid[n];
	if (sol.active == state) return false;
	sol.active = state;
	if (state) sol.swOnTime = t;
    4dbc:	613b      	str	r3, [r7, #16]
    4dbe:	e7f4      	b.n	4daa <SolenoidSet::_switch(unsigned char, bool, unsigned long&)+0x1a>
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
	Solenoid& sol = _solenoid[n];
	if (sol.active == state) return false;
    4dc0:	2000      	movs	r0, #0
	if (state) sol.swOnTime = t;
	else sol.swOffTime = t;
	_state->setState(n, state);
	_lastChanged = n;
	return true;
}
    4dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004dc4 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]>:
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4dc6:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    4dca:	6804      	ldr	r4, [r0, #0]
    4dcc:	4f0c      	ldr	r7, [pc, #48]	; (4e00 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]+0x3c>)
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4dce:	b083      	sub	sp, #12
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4dd0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
	sol.settingTime = millis();
	if (delay == 0) {
    4dd4:	461e      	mov	r6, r3
    4dd6:	683b      	ldr	r3, [r7, #0]
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4dd8:	4615      	mov	r5, r2
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
    4dda:	6063      	str	r3, [r4, #4]
	if (delay == 0) {
    4ddc:	b146      	cbz	r6, 4df0 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]+0x2c>
		uint32_t t = millis();
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
    4dde:	2d00      	cmp	r5, #0
	sol.swOnDelay = delay;
	return true;
}
    4de0:	f04f 0001 	mov.w	r0, #1
	if (delay == 0) {
		uint32_t t = millis();
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
	sol.swOnDelay = delay;
    4de4:	81a6      	strh	r6, [r4, #12]
	sol.settingTime = millis();
	if (delay == 0) {
		uint32_t t = millis();
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
    4de6:	bf08      	it	eq
    4de8:	25fa      	moveq	r5, #250	; 0xfa
    4dea:	8125      	strh	r5, [r4, #8]
	sol.swOnDelay = delay;
	return true;
}
    4dec:	b003      	add	sp, #12
    4dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4df0:	683f      	ldr	r7, [r7, #0]
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	if (delay == 0) {
		uint32_t t = millis();
    4df2:	ab02      	add	r3, sp, #8
		_switch(n, true, t);
    4df4:	2201      	movs	r2, #1
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	if (delay == 0) {
		uint32_t t = millis();
    4df6:	f843 7d04 	str.w	r7, [r3, #-4]!
		_switch(n, true, t);
    4dfa:	f7ff ffc9 	bl	4d90 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
    4dfe:	e7ee      	b.n	4dde <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]+0x1a>
    4e00:	20002d58 	.word	0x20002d58

00004e04 <SolenoidSet::setState(unsigned char, bool)>:
	return true;
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
    4e04:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (n >= _size) return false;
    4e06:	7a05      	ldrb	r5, [r0, #8]
	return true;
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
    4e08:	b083      	sub	sp, #12
	if (n >= _size) return false;
    4e0a:	428d      	cmp	r5, r1
    4e0c:	d91a      	bls.n	4e44 <SolenoidSet::setState(unsigned char, bool)+0x40>
	Solenoid& sol = _solenoid[n];
    4e0e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    4e12:	6806      	ldr	r6, [r0, #0]
    4e14:	f8df e034 	ldr.w	lr, [pc, #52]	; 4e4c <SolenoidSet::setState(unsigned char, bool)+0x48>
	sol.settingTime = millis();
	sol.swOnDelay = 0;
    4e18:	2500      	movs	r5, #0

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4e1a:	00db      	lsls	r3, r3, #3
    4e1c:	f8de c000 	ldr.w	ip, [lr]
    4e20:	18f4      	adds	r4, r6, r3
	sol.settingTime = millis();
	sol.swOnDelay = 0;
	sol.activePeriod = 0;
	if (sol.active == state) return false;
    4e22:	5cf3      	ldrb	r3, [r6, r3]
    4e24:	4293      	cmp	r3, r2
// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
    4e26:	f8c4 c004 	str.w	ip, [r4, #4]
	sol.swOnDelay = 0;
    4e2a:	81a5      	strh	r5, [r4, #12]
	sol.activePeriod = 0;
    4e2c:	8125      	strh	r5, [r4, #8]
	if (sol.active == state) return false;
    4e2e:	d009      	beq.n	4e44 <SolenoidSet::setState(unsigned char, bool)+0x40>
    4e30:	f8de 4000 	ldr.w	r4, [lr]
	uint32_t t = millis();
    4e34:	ab02      	add	r3, sp, #8
    4e36:	f843 4d04 	str.w	r4, [r3, #-4]!
	_switch(n, state, t);
    4e3a:	f7ff ffa9 	bl	4d90 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
    4e3e:	2001      	movs	r0, #1
	return true;
}
    4e40:	b003      	add	sp, #12
    4e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
    4e44:	2000      	movs	r0, #0
	sol.activePeriod = 0;
	if (sol.active == state) return false;
	uint32_t t = millis();
	_switch(n, state, t);
	return true;
}
    4e46:	b003      	add	sp, #12
    4e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e4a:	bf00      	nop
    4e4c:	20002d58 	.word	0x20002d58

00004e50 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)>:
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4e50:	b410      	push	{r4}
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
    4e52:	7a04      	ldrb	r4, [r0, #8]
    4e54:	428c      	cmp	r4, r1
    4e56:	d903      	bls.n	4e60 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)+0x10>
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
	sol.swOnDelay = delay;
	return true;
}
    4e58:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e5c:	f7ff bfb2 	b.w	4dc4 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]>
    4e60:	2000      	movs	r0, #0
    4e62:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e66:	4770      	bx	lr

00004e68 <SolenoidSet::resetAll()>:

// resets all solenoids
 void SolenoidSet::resetAll() {
    4e68:	b538      	push	{r3, r4, r5, lr}
	for (byte n = 0; n < _size; n++) setState(n, false);
    4e6a:	7a03      	ldrb	r3, [r0, #8]
    4e6c:	b15b      	cbz	r3, 4e86 <SolenoidSet::resetAll()+0x1e>
    4e6e:	4605      	mov	r5, r0
    4e70:	2400      	movs	r4, #0
    4e72:	4621      	mov	r1, r4
    4e74:	3401      	adds	r4, #1
    4e76:	2200      	movs	r2, #0
    4e78:	4628      	mov	r0, r5
    4e7a:	f7ff ffc3 	bl	4e04 <SolenoidSet::setState(unsigned char, bool)>
    4e7e:	7a2b      	ldrb	r3, [r5, #8]
    4e80:	b2e4      	uxtb	r4, r4
    4e82:	42a3      	cmp	r3, r4
    4e84:	d8f5      	bhi.n	4e72 <SolenoidSet::resetAll()+0xa>
    4e86:	bd38      	pop	{r3, r4, r5, pc}

00004e88 <SolenoidSet::update(unsigned long&)>:
}

// returns true on changes
bool SolenoidSet::update(uint32_t& t) {
    4e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4e8c:	7a02      	ldrb	r2, [r0, #8]
    4e8e:	2a00      	cmp	r2, #0
    4e90:	d05b      	beq.n	4f4a <SolenoidSet::update(unsigned long&)+0xc2>
    4e92:	2500      	movs	r5, #0
    4e94:	4689      	mov	r9, r1
    4e96:	4607      	mov	r7, r0
    4e98:	462e      	mov	r6, r5
    4e9a:	46ae      	mov	lr, r5
    4e9c:	e00d      	b.n	4eba <SolenoidSet::update(unsigned long&)+0x32>
		sol = &_solenoid[i];
		changedState = false;
		if (sol->active) { // solenoid activated ?
			// check if solenoid is active for too long time
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
    4e9e:	8961      	ldrh	r1, [r4, #10]
    4ea0:	b129      	cbz	r1, 4eae <SolenoidSet::update(unsigned long&)+0x26>
    4ea2:	f8d9 3000 	ldr.w	r3, [r9]
    4ea6:	6920      	ldr	r0, [r4, #16]
    4ea8:	1a1b      	subs	r3, r3, r0
    4eaa:	428b      	cmp	r3, r1
    4eac:	d83b      	bhi.n	4f26 <SolenoidSet::update(unsigned long&)+0x9e>
				_switch(i, false, t);
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4eae:	8923      	ldrh	r3, [r4, #8]
    4eb0:	bb53      	cbnz	r3, 4f08 <SolenoidSet::update(unsigned long&)+0x80>
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4eb2:	3601      	adds	r6, #1
    4eb4:	3518      	adds	r5, #24
    4eb6:	42b2      	cmp	r2, r6
    4eb8:	dd23      	ble.n	4f02 <SolenoidSet::update(unsigned long&)+0x7a>
		sol = &_solenoid[i];
    4eba:	683c      	ldr	r4, [r7, #0]
		changedState = false;
		if (sol->active) { // solenoid activated ?
    4ebc:	f814 8005 	ldrb.w	r8, [r4, r5]
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
		sol = &_solenoid[i];
    4ec0:	442c      	add	r4, r5
		changedState = false;
		if (sol->active) { // solenoid activated ?
    4ec2:	f1b8 0f00 	cmp.w	r8, #0
    4ec6:	d1ea      	bne.n	4e9e <SolenoidSet::update(unsigned long&)+0x16>
				_switch(i, false, t);
				changedState = true;
			}
		}
		// check if solenoid should switch on after a delay (on active == false)
		else if ((sol->swOnDelay > 0) && (t - sol->settingTime) >= sol->swOnDelay) {
    4ec8:	89a3      	ldrh	r3, [r4, #12]
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d0f1      	beq.n	4eb2 <SolenoidSet::update(unsigned long&)+0x2a>
    4ece:	f8d9 1000 	ldr.w	r1, [r9]
    4ed2:	6860      	ldr	r0, [r4, #4]
    4ed4:	1a09      	subs	r1, r1, r0
    4ed6:	4299      	cmp	r1, r3
    4ed8:	d3eb      	bcc.n	4eb2 <SolenoidSet::update(unsigned long&)+0x2a>
			_switch(i, true, t);
    4eda:	fa5f fa86 	uxtb.w	sl, r6
    4ede:	464b      	mov	r3, r9
    4ee0:	2201      	movs	r2, #1
    4ee2:	4638      	mov	r0, r7
    4ee4:	4651      	mov	r1, sl
    4ee6:	f7ff ff53 	bl	4d90 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
			sol->swOnDelay = 0;
    4eea:	f8a4 800c 	strh.w	r8, [r4, #12]
    4eee:	7a3a      	ldrb	r2, [r7, #8]
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4ef0:	3601      	adds	r6, #1
			changedState = true;
		}

		if (changedState) {
			_lastChanged = i;
			changes = true;
    4ef2:	f04f 0e01 	mov.w	lr, #1
			sol->swOnDelay = 0;
			changedState = true;
		}

		if (changedState) {
			_lastChanged = i;
    4ef6:	f887 a009 	strb.w	sl, [r7, #9]
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4efa:	42b2      	cmp	r2, r6
    4efc:	f105 0518 	add.w	r5, r5, #24
    4f00:	dcdb      	bgt.n	4eba <SolenoidSet::update(unsigned long&)+0x32>
	//		changes = true;
	//	}
	//}

	return changes;
}
    4f02:	4670      	mov	r0, lr
    4f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
				_switch(i, false, t);
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4f08:	6924      	ldr	r4, [r4, #16]
    4f0a:	f8d9 1000 	ldr.w	r1, [r9]
    4f0e:	1b09      	subs	r1, r1, r4
    4f10:	428b      	cmp	r3, r1
    4f12:	d2ce      	bcs.n	4eb2 <SolenoidSet::update(unsigned long&)+0x2a>
    4f14:	fa5f fa86 	uxtb.w	sl, r6
				_switch(i, false, t);
    4f18:	464b      	mov	r3, r9
    4f1a:	2200      	movs	r2, #0
    4f1c:	4651      	mov	r1, sl
    4f1e:	4638      	mov	r0, r7
    4f20:	f7ff ff36 	bl	4d90 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
    4f24:	e7e3      	b.n	4eee <SolenoidSet::update(unsigned long&)+0x66>
		sol = &_solenoid[i];
		changedState = false;
		if (sol->active) { // solenoid activated ?
			// check if solenoid is active for too long time
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
				_switch(i, false, t);
    4f26:	fa5f fa86 	uxtb.w	sl, r6
    4f2a:	2200      	movs	r2, #0
    4f2c:	464b      	mov	r3, r9
    4f2e:	4638      	mov	r0, r7
    4f30:	4651      	mov	r1, sl
    4f32:	f7ff ff2d 	bl	4d90 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4f36:	8922      	ldrh	r2, [r4, #8]
    4f38:	2a00      	cmp	r2, #0
    4f3a:	d0d8      	beq.n	4eee <SolenoidSet::update(unsigned long&)+0x66>
    4f3c:	6921      	ldr	r1, [r4, #16]
    4f3e:	f8d9 3000 	ldr.w	r3, [r9]
    4f42:	1a5b      	subs	r3, r3, r1
    4f44:	4293      	cmp	r3, r2
    4f46:	d9d2      	bls.n	4eee <SolenoidSet::update(unsigned long&)+0x66>
    4f48:	e7e6      	b.n	4f18 <SolenoidSet::update(unsigned long&)+0x90>
	for (byte n = 0; n < _size; n++) setState(n, false);
}

// returns true on changes
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
    4f4a:	4696      	mov	lr, r2
	//		_lastChanged = i;
	//		changes = true;
	//	}
	//}

	return changes;
    4f4c:	e7d9      	b.n	4f02 <SolenoidSet::update(unsigned long&)+0x7a>
    4f4e:	bf00      	nop

00004f50 <SolenoidSet::getStates()>:
}

// Returns a 32-bit word with actual solenoid states coded in its bits:
// bit n contains state of solenoid n.
uint32_t SolenoidSet::getStates() {
    4f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t bits = 0;
	for (byte i = 0; i*8 < _size; i++) bits |= ((uint32_t)_state->getStates8(i) << (8 * i));
    4f52:	7a06      	ldrb	r6, [r0, #8]
    4f54:	b186      	cbz	r6, 4f78 <SolenoidSet::getStates()+0x28>
    4f56:	2500      	movs	r5, #0
    4f58:	4607      	mov	r7, r0
    4f5a:	462c      	mov	r4, r5
    4f5c:	462e      	mov	r6, r5
    4f5e:	4621      	mov	r1, r4
    4f60:	3401      	adds	r4, #1
    4f62:	6878      	ldr	r0, [r7, #4]
    4f64:	b2e4      	uxtb	r4, r4
    4f66:	f7fd fc49 	bl	27fc <BitMappedSet::getStates8(unsigned short)>
    4f6a:	7a3b      	ldrb	r3, [r7, #8]
    4f6c:	40a8      	lsls	r0, r5
    4f6e:	00e5      	lsls	r5, r4, #3
    4f70:	429d      	cmp	r5, r3
    4f72:	ea46 0600 	orr.w	r6, r6, r0
    4f76:	dbf2      	blt.n	4f5e <SolenoidSet::getStates()+0xe>
	return bits;
}
    4f78:	4630      	mov	r0, r6
    4f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004f7c <SwitchGrid8x8::SwitchGrid8x8()>:
* 8x8 pinball switch grid I/O functions.
*/

#include "SwitchGrid8x8.h"

SwitchGrid8x8::SwitchGrid8x8() {
    4f7c:	b4f0      	push	{r4, r5, r6, r7}
    4f7e:	f200 260b 	addw	r6, r0, #523	; 0x20b
    4f82:	4607      	mov	r7, r0
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
    4f84:	2200      	movs	r2, #0
    4f86:	f200 2403 	addw	r4, r0, #515	; 0x203
    4f8a:	4603      	mov	r3, r0
* 8x8 pinball switch grid I/O functions.
*/

#include "SwitchGrid8x8.h"

SwitchGrid8x8::SwitchGrid8x8() {
    4f8c:	4635      	mov	r5, r6
    4f8e:	f103 0120 	add.w	r1, r3, #32
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
    4f92:	f804 2f01 	strb.w	r2, [r4, #1]!
		returns_changed[i] = 0;
    4f96:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
    4f9a:	f843 2f04 	str.w	r2, [r3, #4]!
    4f9e:	428b      	cmp	r3, r1
    4fa0:	f04f 0000 	mov.w	r0, #0
    4fa4:	d1f9      	bne.n	4f9a <SwitchGrid8x8::SwitchGrid8x8()+0x1e>

SwitchGrid8x8::SwitchGrid8x8() {
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
    4fa6:	42b4      	cmp	r4, r6
    4fa8:	d1f1      	bne.n	4f8e <SwitchGrid8x8::SwitchGrid8x8()+0x12>
		returns_latch[i] = 0;
		returns_changed[i] = 0;
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
	}
	lastSwitchChanged = 0xff;
    4faa:	23ff      	movs	r3, #255	; 0xff
	lastSwitchChState = false;
    4fac:	70b8      	strb	r0, [r7, #2]
	_strobe = 0;
    4fae:	f887 0214 	strb.w	r0, [r7, #532]	; 0x214
}
    4fb2:	4638      	mov	r0, r7
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
		returns_changed[i] = 0;
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
	}
	lastSwitchChanged = 0xff;
    4fb4:	707b      	strb	r3, [r7, #1]
	lastSwitchChState = false;
	_strobe = 0;
}
    4fb6:	bcf0      	pop	{r4, r5, r6, r7}
    4fb8:	4770      	bx	lr
    4fba:	bf00      	nop

00004fbc <SwitchGrid8x8::~SwitchGrid8x8()>:

SwitchGrid8x8::~SwitchGrid8x8() {
    4fbc:	b510      	push	{r4, lr}
    4fbe:	4604      	mov	r4, r0
	delete[] returns_latch;
    4fc0:	f510 7001 	adds.w	r0, r0, #516	; 0x204
    4fc4:	d001      	beq.n	4fca <SwitchGrid8x8::~SwitchGrid8x8()+0xe>
    4fc6:	f007 f8d3 	bl	c170 <operator delete[](void*)>
	delete[] returns_changed;
    4fca:	f514 7003 	adds.w	r0, r4, #524	; 0x20c
    4fce:	d001      	beq.n	4fd4 <SwitchGrid8x8::~SwitchGrid8x8()+0x18>
    4fd0:	f007 f8ce 	bl	c170 <operator delete[](void*)>
	delete[] swChangeTime;
    4fd4:	1d20      	adds	r0, r4, #4
    4fd6:	d001      	beq.n	4fdc <SwitchGrid8x8::~SwitchGrid8x8()+0x20>
    4fd8:	f007 f8ca 	bl	c170 <operator delete[](void*)>
}
    4fdc:	4620      	mov	r0, r4
    4fde:	bd10      	pop	{r4, pc}

00004fe0 <SwitchGrid8x8::incrementStrobe()>:

byte SwitchGrid8x8::incrementStrobe() {
	if (++_strobe > 7) _strobe = 0;
    4fe0:	f890 3214 	ldrb.w	r3, [r0, #532]	; 0x214
    4fe4:	3301      	adds	r3, #1
    4fe6:	b2db      	uxtb	r3, r3
    4fe8:	2b07      	cmp	r3, #7
    4fea:	d905      	bls.n	4ff8 <SwitchGrid8x8::incrementStrobe()+0x18>
    4fec:	2200      	movs	r2, #0
    4fee:	4613      	mov	r3, r2
    4ff0:	f880 2214 	strb.w	r2, [r0, #532]	; 0x214
	return _strobe;
}
    4ff4:	4618      	mov	r0, r3
    4ff6:	4770      	bx	lr
	delete[] returns_changed;
	delete[] swChangeTime;
}

byte SwitchGrid8x8::incrementStrobe() {
	if (++_strobe > 7) _strobe = 0;
    4ff8:	f880 3214 	strb.w	r3, [r0, #532]	; 0x214
	return _strobe;
}
    4ffc:	4618      	mov	r0, r3
    4ffe:	4770      	bx	lr

00005000 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)>:
// tm = current system time [ms]
// returns changed bits (0 if no bit has changed)
 byte SwitchGrid8x8::setRow(byte r, byte val, uint32_t& tm) {
	byte diff, b, bv;

	r &= 7;
    5000:	f001 0107 	and.w	r1, r1, #7
	diff = returns_latch[r] ^ val;
    5004:	eb00 0c01 	add.w	ip, r0, r1
// Has unbounce effect on on->off transitions, with delay defined by SW_ONOFF_DELAY [ms].
// <r> = row [0..7]
// <val> = value [0..255]
// tm = current system time [ms]
// returns changed bits (0 if no bit has changed)
 byte SwitchGrid8x8::setRow(byte r, byte val, uint32_t& tm) {
    5008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    500c:	4607      	mov	r7, r0
	byte diff, b, bv;

	r &= 7;
	diff = returns_latch[r] ^ val;
    500e:	f89c 0204 	ldrb.w	r0, [ip, #516]	; 0x204
	if (diff > 0) { // changes detected!
    5012:	4050      	eors	r0, r2
    5014:	d03e      	beq.n	5094 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x94>
    5016:	014d      	lsls	r5, r1, #5
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // test bit value
    5018:	2401      	movs	r4, #1
	inline bool currentRowChanged() { return (lastRowChanges > 0) ? true : false; }
	bool getSwitchState(byte switchNum);
	bool getSwitchState(byte col, byte row);
	bool setSwitch(byte switchNum, bool state, bool seamless = false);
	inline uint32_t getSwitchLastChangeTime(byte col, byte row) { return swChangeTime[row & 7][col & 7]; }
	inline byte getSwitchNumber(byte col, byte row) { return (row & 7) * 10 + (col & 7); }
    501a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    501e:	4699      	mov	r9, r3
    5020:	f105 0e20 	add.w	lr, r5, #32

	r &= 7;
	diff = returns_latch[r] ^ val;
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
    5024:	7038      	strb	r0, [r7, #0]
    5026:	443d      	add	r5, r7
    5028:	40a1      	lsls	r1, r4
    502a:	44be      	add	lr, r7
    502c:	e00e      	b.n	504c <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x4c>
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
				lastSwitchChanged = getSwitchNumber(b, r);
				lastSwitchChState = ((val & bv) > 0);
				if (lastSwitchChState) { // switch has just closed
					returns_latch[r] |= bv; 
    502e:	f89c 6204 	ldrb.w	r6, [ip, #516]	; 0x204
    5032:	4326      	orrs	r6, r4
    5034:	f88c 6204 	strb.w	r6, [ip, #516]	; 0x204
					swChangeTime[r][b] = tm;
    5038:	f8d9 6000 	ldr.w	r6, [r9]
    503c:	606e      	str	r6, [r5, #4]
    503e:	3504      	adds	r5, #4
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
				}
			}
			bv <<= 1;
    5040:	0064      	lsls	r4, r4, #1
    5042:	3101      	adds	r1, #1
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // test bit value
		for (b = 0; b < 8; b++) { // for each bit...
    5044:	4575      	cmp	r5, lr
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
				}
			}
			bv <<= 1;
    5046:	b2e4      	uxtb	r4, r4
    5048:	b2c9      	uxtb	r1, r1
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // test bit value
		for (b = 0; b < 8; b++) { // for each bit...
    504a:	d023      	beq.n	5094 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x94>
			if (diff & bv) { // bit has changed!
    504c:	4220      	tst	r0, r4
				swChangeCount[r][b]++;
				lastSwitchChanged = getSwitchNumber(b, r);
				lastSwitchChState = ((val & bv) > 0);
    504e:	ea02 0604 	and.w	r6, r2, r4
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // test bit value
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
    5052:	d0f4      	beq.n	503e <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x3e>
				swChangeCount[r][b]++;
				lastSwitchChanged = getSwitchNumber(b, r);
				lastSwitchChState = ((val & bv) > 0);
    5054:	2e00      	cmp	r6, #0
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // test bit value
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
    5056:	f8d5 6104 	ldr.w	r6, [r5, #260]	; 0x104
				lastSwitchChanged = getSwitchNumber(b, r);
				lastSwitchChState = ((val & bv) > 0);
    505a:	bf14      	ite	ne
    505c:	f04f 0801 	movne.w	r8, #1
    5060:	f04f 0800 	moveq.w	r8, #0
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // test bit value
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
    5064:	f106 0601 	add.w	r6, r6, #1
    5068:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
				lastSwitchChanged = getSwitchNumber(b, r);
    506c:	7079      	strb	r1, [r7, #1]
				lastSwitchChState = ((val & bv) > 0);
    506e:	f887 8002 	strb.w	r8, [r7, #2]
				if (lastSwitchChState) { // switch has just closed
    5072:	d1dc      	bne.n	502e <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x2e>
					returns_latch[r] |= bv; 
					swChangeTime[r][b] = tm;
				}
				else { // switch now open
					if (tm - swChangeTime[r][b] >= SW_ONOFF_DELAY) { // debounce condition
    5074:	f8d9 6000 	ldr.w	r6, [r9]
    5078:	686b      	ldr	r3, [r5, #4]
    507a:	1af6      	subs	r6, r6, r3
    507c:	2e31      	cmp	r6, #49	; 0x31
    507e:	d90b      	bls.n	5098 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x98>
						returns_latch[r] &= ~bv;
    5080:	f89c 6204 	ldrb.w	r6, [ip, #516]	; 0x204
    5084:	ea26 0604 	bic.w	r6, r6, r4
    5088:	f88c 6204 	strb.w	r6, [ip, #516]	; 0x204
						swChangeTime[r][b] = tm;
    508c:	f8d9 6000 	ldr.w	r6, [r9]
    5090:	606e      	str	r6, [r5, #4]
    5092:	e7d4      	b.n	503e <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x3e>
	#ifdef SWGRID_TRACK_CHANGES
		returns_changed[r] |= diff;
	#endif
	}
	return diff;
}
    5094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				else { // switch now open
					if (tm - swChangeTime[r][b] >= SW_ONOFF_DELAY) { // debounce condition
						returns_latch[r] &= ~bv;
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
    5098:	ea20 0004 	bic.w	r0, r0, r4
    509c:	e7cf      	b.n	503e <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x3e>
    509e:	bf00      	nop

000050a0 <Sys80b::setSound(unsigned char)>:
 void Sys80b::checkSolenoids(uint32_t& t) {
	if (solenoids->update(t)) hw->writeSolenoids(solenoids->getStates());
}

// snd = 0..31
void Sys80b::setSound(byte snd) {
    50a0:	b430      	push	{r4, r5}
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    50a2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
    50a6:	f8d0 4278 	ldr.w	r4, [r0, #632]	; 0x278
    50aa:	42a2      	cmp	r2, r4
    50ac:	d20c      	bcs.n	50c8 <Sys80b::setSound(unsigned char)+0x28>
		unsigned p = _firstPtr + _valuesCount++;
    50ae:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
    50b2:	1c55      	adds	r5, r2, #1
    50b4:	4413      	add	r3, r2
		if (p >= _size) p -= _size;
		_buff[p] = value;
    50b6:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    50ba:	f8c0 5274 	str.w	r5, [r0, #628]	; 0x274
		if (p >= _size) p -= _size;
    50be:	429c      	cmp	r4, r3
    50c0:	bf98      	it	ls
    50c2:	1b1b      	subls	r3, r3, r4
		_buff[p] = value;
    50c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	soundBuffer.put(snd);
	_soundPendingCmd = true;
    50c8:	2301      	movs	r3, #1
}
    50ca:	bc30      	pop	{r4, r5}
}

// snd = 0..31
void Sys80b::setSound(byte snd) {
	soundBuffer.put(snd);
	_soundPendingCmd = true;
    50cc:	f880 3280 	strb.w	r3, [r0, #640]	; 0x280
}
    50d0:	4770      	bx	lr
    50d2:	bf00      	nop

000050d4 <Sys80b::~Sys80b()>:
	_soundOutTime = 0;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    50d4:	b538      	push	{r3, r4, r5, lr}
    50d6:	4b18      	ldr	r3, [pc, #96]	; (5138 <Sys80b::~Sys80b()+0x64>)
    50d8:	4604      	mov	r4, r0
	delete solenoids;
    50da:	68c5      	ldr	r5, [r0, #12]
	_soundOutTime = 0;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    50dc:	6003      	str	r3, [r0, #0]
	delete solenoids;
    50de:	b135      	cbz	r5, 50ee <Sys80b::~Sys80b()+0x1a>
    50e0:	4628      	mov	r0, r5
    50e2:	f7ff fe43 	bl	4d6c <SolenoidSet::~SolenoidSet()>
    50e6:	4628      	mov	r0, r5
    50e8:	210c      	movs	r1, #12
    50ea:	f007 f843 	bl	c174 <operator delete(void*, unsigned int)>
	delete lamps;
    50ee:	68a5      	ldr	r5, [r4, #8]
    50f0:	b135      	cbz	r5, 5100 <Sys80b::~Sys80b()+0x2c>
    50f2:	4628      	mov	r0, r5
    50f4:	f7fd fadc 	bl	26b0 <BitMappedSet::~BitMappedSet()>
    50f8:	4628      	mov	r0, r5
    50fa:	2110      	movs	r1, #16
    50fc:	f007 f83a 	bl	c174 <operator delete(void*, unsigned int)>
		_buff = new Type[_size];
		Clear();
	}

	~Buffer() {
		delete[] _buff;
    5100:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    5104:	b108      	cbz	r0, 510a <Sys80b::~Sys80b()+0x36>
    5106:	f007 f833 	bl	c170 <operator delete[](void*)>
	_soundOutTime = 0;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    510a:	f104 0054 	add.w	r0, r4, #84	; 0x54
    510e:	f7ff ff55 	bl	4fbc <SwitchGrid8x8::~SwitchGrid8x8()>
// Sys80/b's display control. It provides:
// - a buffer for byte-data to send to HW display
// - getNextDisplayData() function for retrieving bytes to send to HW display
// rev: nov/19
//class Sys80b_Display : public ExtTextDisplay {
class Sys80b_Display : public TextDisplay {
    5112:	4b0a      	ldr	r3, [pc, #40]	; (513c <Sys80b::~Sys80b()+0x68>)
    5114:	6c20      	ldr	r0, [r4, #64]	; 0x40
    5116:	6123      	str	r3, [r4, #16]
    5118:	b108      	cbz	r0, 511e <Sys80b::~Sys80b()+0x4a>
    511a:	f007 f829 	bl	c170 <operator delete[](void*)>
// Basic fixed-size alphanumeric display object which provides.:
// - both char and row (line) text set/get functions
// - vertical/horizontal shift and rotate functions
// - getRowCopy() function that returns a new string with row text
// rev: nov/19
class TextDisplay { 
    511e:	4b08      	ldr	r3, [pc, #32]	; (5140 <Sys80b::~Sys80b()+0x6c>)
    5120:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5124:	6123      	str	r3, [r4, #16]
    5126:	f007 f929 	bl	c37c <String::~String()>
    512a:	f104 0018 	add.w	r0, r4, #24
    512e:	f007 f925 	bl	c37c <String::~String()>
	delete solenoids;
	delete lamps;
}
    5132:	4620      	mov	r0, r4
    5134:	bd38      	pop	{r3, r4, r5, pc}
    5136:	bf00      	nop
    5138:	200012c4 	.word	0x200012c4
    513c:	200012b8 	.word	0x200012b8
    5140:	200012ac 	.word	0x200012ac

00005144 <Sys80b::~Sys80b()>:
	_soundOutTime = 0;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    5144:	b510      	push	{r4, lr}
    5146:	4604      	mov	r4, r0
	delete solenoids;
	delete lamps;
}
    5148:	f7ff ffc4 	bl	50d4 <Sys80b::~Sys80b()>
    514c:	f44f 7125 	mov.w	r1, #660	; 0x294
    5150:	4620      	mov	r0, r4
    5152:	f007 f80f 	bl	c174 <operator delete(void*, unsigned int)>
    5156:	4620      	mov	r0, r4
    5158:	bd10      	pop	{r4, pc}
    515a:	bf00      	nop

0000515c <Sys80b::onSlamSwitchEvent(bool)>:
	inline byte get4LampStatesOutput() { return lamps->getStates4(currentLampGroup); }
	inline uint32_t getSolenoidsOutput() { return solenoids->getStates(); }
	virtual void updateSound(uint32_t& ms);
	inline uint16_t getDisplayOutput() { return display.LastData();	}
	virtual void onSwitchEvent(byte sw, bool st) {}
	virtual void onSlamSwitchEvent(bool active) { if (active) Serial.println("Slam switch!"); }
    515c:	b901      	cbnz	r1, 5160 <Sys80b::onSlamSwitchEvent(bool)+0x4>
    515e:	4770      	bx	lr
    5160:	b508      	push	{r3, lr}
    5162:	210c      	movs	r1, #12
    5164:	4803      	ldr	r0, [pc, #12]	; (5174 <Sys80b::onSlamSwitchEvent(bool)+0x18>)
    5166:	f006 fe81 	bl	be6c <usb_serial_write>
    516a:	4803      	ldr	r0, [pc, #12]	; (5178 <Sys80b::onSlamSwitchEvent(bool)+0x1c>)
    516c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5170:	f007 b83e 	b.w	c1f0 <Print::println()>
    5174:	200012e0 	.word	0x200012e0
    5178:	20001fdc 	.word	0x20001fdc

0000517c <Sys80b::updateSound(unsigned long&)>:
		return true;
	}
	return false;
}

void Sys80b::updateSound(uint32_t& tm) {
    517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//_soundPendingCmd = !(soundBuffer.isEmpty() && snd == 0);

	//static byte delayCounter = 0;
	byte snd;

	if (!_soundPendingCmd) return;
    517e:	f890 3280 	ldrb.w	r3, [r0, #640]	; 0x280
    5182:	b36b      	cbz	r3, 51e0 <Sys80b::updateSound(unsigned long&)+0x64>
	//else {
	//	snd = soundBuffer.get();
	//	_soundValueOut = true;
	//}

	if (_soundOutTime > 0) { // sound output value already set
    5184:	f8d0 2284 	ldr.w	r2, [r0, #644]	; 0x284
    5188:	b35a      	cbz	r2, 51e2 <Sys80b::updateSound(unsigned long&)+0x66>
		if (tm - _soundOutTime < 8) return; // introduces a delay of 8 ms before clearing output
    518a:	680b      	ldr	r3, [r1, #0]
    518c:	1a9a      	subs	r2, r3, r2
    518e:	2a07      	cmp	r2, #7
    5190:	d926      	bls.n	51e0 <Sys80b::updateSound(unsigned long&)+0x64>
		_soundOutTime = 0;
    5192:	2200      	movs	r2, #0
		//delayCounter = 0;
		snd = 0; // clear sound output
		if (soundBuffer.isEmpty()) _soundPendingCmd = false;
    5194:	f8d0 3274 	ldr.w	r3, [r0, #628]	; 0x274
    5198:	24ff      	movs	r4, #255	; 0xff
	//	_soundValueOut = true;
	//}

	if (_soundOutTime > 0) { // sound output value already set
		if (tm - _soundOutTime < 8) return; // introduces a delay of 8 ms before clearing output
		_soundOutTime = 0;
    519a:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
		//delayCounter = 0;
		snd = 0; // clear sound output
		if (soundBuffer.isEmpty()) _soundPendingCmd = false;
    519e:	2b00      	cmp	r3, #0
    51a0:	d140      	bne.n	5224 <Sys80b::updateSound(unsigned long&)+0xa8>
    51a2:	f880 3280 	strb.w	r3, [r0, #640]	; 0x280
    51a6:	4623      	mov	r3, r4
    51a8:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    51ac:	4619      	mov	r1, r3
    51ae:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    51b2:	f002 fd19 	bl	7be8 <PIO::mcpWritePB(unsigned char)>
    51b6:	4b1c      	ldr	r3, [pc, #112]	; (5228 <Sys80b::updateSound(unsigned long&)+0xac>)
		snd = soundBuffer.get();
		_soundOutTime = tm;
	}

	hw->writeSound(~(snd & 0x7f)); // only bits 0..6, not the 7th bit
	Serial.printf("%d: writeSound(", millis());
    51b8:	491c      	ldr	r1, [pc, #112]	; (522c <Sys80b::updateSound(unsigned long&)+0xb0>)
    51ba:	681a      	ldr	r2, [r3, #0]
    51bc:	481c      	ldr	r0, [pc, #112]	; (5230 <Sys80b::updateSound(unsigned long&)+0xb4>)
    51be:	f007 f82f 	bl	c220 <Print::printf(char const*, ...)>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    51c2:	4621      	mov	r1, r4
    51c4:	2300      	movs	r3, #0
    51c6:	2202      	movs	r2, #2
    51c8:	4819      	ldr	r0, [pc, #100]	; (5230 <Sys80b::updateSound(unsigned long&)+0xb4>)
    51ca:	f007 f849 	bl	c260 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    51ce:	2101      	movs	r1, #1
    51d0:	4818      	ldr	r0, [pc, #96]	; (5234 <Sys80b::updateSound(unsigned long&)+0xb8>)
    51d2:	f006 fe4b 	bl	be6c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    51d6:	4816      	ldr	r0, [pc, #88]	; (5230 <Sys80b::updateSound(unsigned long&)+0xb4>)
	Serial.print((byte)(~(snd & 0x7f)), BIN);
	Serial.println(")");
 }
    51d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    51dc:	f007 b808 	b.w	c1f0 <Print::println()>
    51e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_buff[p] = value;
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
    51e2:	f8d0 4274 	ldr.w	r4, [r0, #628]	; 0x274
    51e6:	b1d4      	cbz	r4, 521e <Sys80b::updateSound(unsigned long&)+0xa2>
		Type value = _buff[_firstPtr++];
    51e8:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
		if (_firstPtr == _size) _firstPtr = 0;
		_valuesCount--;
    51ec:	3c01      	subs	r4, #1
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    51ee:	f8d0 726c 	ldr.w	r7, [r0, #620]	; 0x26c
    51f2:	1c5d      	adds	r5, r3, #1
		if (_firstPtr == _size) _firstPtr = 0;
    51f4:	f8d0 6278 	ldr.w	r6, [r0, #632]	; 0x278
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    51f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
		if (_firstPtr == _size) _firstPtr = 0;
    51fc:	42b5      	cmp	r5, r6
		_valuesCount--;
    51fe:	f8c0 4274 	str.w	r4, [r0, #628]	; 0x274
    5202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    5206:	f8c0 5270 	str.w	r5, [r0, #624]	; 0x270
		if (_firstPtr == _size) _firstPtr = 0;
    520a:	bf08      	it	eq
    520c:	f8c0 2270 	streq.w	r2, [r0, #624]	; 0x270
    5210:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    5214:	461c      	mov	r4, r3
		snd = 0; // clear sound output
		if (soundBuffer.isEmpty()) _soundPendingCmd = false;
	}
	else { // setting sound value output
		snd = soundBuffer.get();
		_soundOutTime = tm;
    5216:	680a      	ldr	r2, [r1, #0]
    5218:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
    521c:	e7c4      	b.n	51a8 <Sys80b::updateSound(unsigned long&)+0x2c>
		_buff[p] = value;
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
    521e:	24ff      	movs	r4, #255	; 0xff
    5220:	4623      	mov	r3, r4
    5222:	e7f8      	b.n	5216 <Sys80b::updateSound(unsigned long&)+0x9a>
	if (_soundOutTime > 0) { // sound output value already set
		if (tm - _soundOutTime < 8) return; // introduces a delay of 8 ms before clearing output
		_soundOutTime = 0;
		//delayCounter = 0;
		snd = 0; // clear sound output
		if (soundBuffer.isEmpty()) _soundPendingCmd = false;
    5224:	4623      	mov	r3, r4
    5226:	e7bf      	b.n	51a8 <Sys80b::updateSound(unsigned long&)+0x2c>
    5228:	20002d58 	.word	0x20002d58
    522c:	200012f0 	.word	0x200012f0
    5230:	20001fdc 	.word	0x20001fdc
    5234:	200002d4 	.word	0x200002d4

00005238 <Sys80b::Sys80b(Board_Sys80b&)>:
#include "Sys80b.h"

//#include "SolenoidSet.h"

Sys80b::Sys80b(Board_Sys80b& board) {
    5238:	b570      	push	{r4, r5, r6, lr}
    523a:	4a20      	ldr	r2, [pc, #128]	; (52bc <Sys80b::Sys80b(Board_Sys80b&)+0x84>)
    523c:	4604      	mov	r4, r0
    523e:	4b20      	ldr	r3, [pc, #128]	; (52c0 <Sys80b::Sys80b(Board_Sys80b&)+0x88>)
    5240:	3010      	adds	r0, #16
    5242:	f840 2c10 	str.w	r2, [r0, #-16]
    5246:	460e      	mov	r6, r1
    5248:	6063      	str	r3, [r4, #4]
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    524a:	2500      	movs	r5, #0
    524c:	f000 fada 	bl	5804 <Sys80b_Display::Sys80b_Display()>
    5250:	f104 0054 	add.w	r0, r4, #84	; 0x54
    5254:	f7ff fe92 	bl	4f7c <SwitchGrid8x8::SwitchGrid8x8()>
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    5258:	230a      	movs	r3, #10
		_buff = new Type[_size];
    525a:	2014      	movs	r0, #20
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    525c:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
		_buff = new Type[_size];
    5260:	f006 ff84 	bl	c16c <operator new[](unsigned int)>
    5264:	210e      	movs	r1, #14
    5266:	f8c4 026c 	str.w	r0, [r4, #620]	; 0x26c
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    526a:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
		_valuesCount = 0;
    526e:	f8c4 5274 	str.w	r5, [r4, #628]	; 0x274
    5272:	4814      	ldr	r0, [pc, #80]	; (52c4 <Sys80b::Sys80b(Board_Sys80b&)+0x8c>)
    5274:	f006 fdfa 	bl	be6c <usb_serial_write>
    5278:	4813      	ldr	r0, [pc, #76]	; (52c8 <Sys80b::Sys80b(Board_Sys80b&)+0x90>)
    527a:	f006 ffb9 	bl	c1f0 <Print::println()>
	Serial.println("Sys80b init...");
	//delay(100);
	hw = &board;
	msg = &(board.msg);
    527e:	f106 03a0 	add.w	r3, r6, #160	; 0xa0
//#include "SolenoidSet.h"

Sys80b::Sys80b(Board_Sys80b& board) {
	Serial.println("Sys80b init...");
	//delay(100);
	hw = &board;
    5282:	f8c4 628c 	str.w	r6, [r4, #652]	; 0x28c
	msg = &(board.msg);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
    5286:	200c      	movs	r0, #12

Sys80b::Sys80b(Board_Sys80b& board) {
	Serial.println("Sys80b init...");
	//delay(100);
	hw = &board;
	msg = &(board.msg);
    5288:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
    528c:	f006 ff6c 	bl	c168 <operator new(unsigned int)>
    5290:	4606      	mov	r6, r0
    5292:	2109      	movs	r1, #9
    5294:	f7ff fd3a 	bl	4d0c <SolenoidSet::SolenoidSet(unsigned char)>
    5298:	60e6      	str	r6, [r4, #12]
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
    529a:	2010      	movs	r0, #16
    529c:	f006 ff64 	bl	c168 <operator new(unsigned int)>
    52a0:	2130      	movs	r1, #48	; 0x30
    52a2:	4606      	mov	r6, r0
    52a4:	f7fd fa2a 	bl	26fc <BitMappedSet::BitMappedSet(unsigned short)>
	slamSwitchNormalState = true;
    52a8:	2301      	movs	r3, #1
	slamSwitchLastState = slamSwitchNormalState;
	//_soundValueOut = false;
	_soundOutTime = 0;
	//hw = nullptr;
	//reset();
}
    52aa:	4620      	mov	r0, r4
	//delay(100);
	hw = &board;
	msg = &(board.msg);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
    52ac:	60a6      	str	r6, [r4, #8]
	slamSwitchNormalState = true;
	slamSwitchLastState = slamSwitchNormalState;
	//_soundValueOut = false;
	_soundOutTime = 0;
    52ae:	f8c4 5284 	str.w	r5, [r4, #644]	; 0x284
	hw = &board;
	msg = &(board.msg);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
	slamSwitchNormalState = true;
    52b2:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
	slamSwitchLastState = slamSwitchNormalState;
    52b6:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
	//_soundValueOut = false;
	_soundOutTime = 0;
	//hw = nullptr;
	//reset();
}
    52ba:	bd70      	pop	{r4, r5, r6, pc}
    52bc:	200012c4 	.word	0x200012c4
    52c0:	20001300 	.word	0x20001300
    52c4:	20001308 	.word	0x20001308
    52c8:	20001fdc 	.word	0x20001fdc

000052cc <Sys80b::reset()>:
	delete solenoids;
	delete lamps;
}

// reset all outputs to 0
void Sys80b::reset() {
    52cc:	b538      	push	{r3, r4, r5, lr}
	msg->outln(F("Sys80b reset..."));
    52ce:	4915      	ldr	r1, [pc, #84]	; (5324 <Sys80b::reset()+0x58>)
	delete solenoids;
	delete lamps;
}

// reset all outputs to 0
void Sys80b::reset() {
    52d0:	4604      	mov	r4, r0
	msg->outln(F("Sys80b reset..."));
    52d2:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    52d6:	2500      	movs	r5, #0
    52d8:	f001 fa7e 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	delay(100);
    52dc:	2064      	movs	r0, #100	; 0x64
    52de:	f005 fa99 	bl	a814 <delay>

	hw->outputReset();
    52e2:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    52e6:	f000 fe19 	bl	5f1c <Board_Sys80b::outputReset()>
	lamps->reset();
    52ea:	68a0      	ldr	r0, [r4, #8]
    52ec:	f7fd f9f0 	bl	26d0 <BitMappedSet::reset()>
	solenoids->resetAll();
    52f0:	68e0      	ldr	r0, [r4, #12]
    52f2:	f7ff fdb9 	bl	4e68 <SolenoidSet::resetAll()>
	soundBuffer.Clear();
	setSound(15); // shout
    52f6:	6823      	ldr	r3, [r4, #0]
    52f8:	4620      	mov	r0, r4
    52fa:	210f      	movs	r1, #15
    52fc:	689b      	ldr	r3, [r3, #8]
    52fe:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
		_valuesCount = 0;
    5302:	f8c4 5274 	str.w	r5, [r4, #628]	; 0x274
    5306:	4798      	blx	r3
	currentLampGroup = 0;
    5308:	f884 527c 	strb.w	r5, [r4, #636]	; 0x27c
	display.reset();
    530c:	f104 0010 	add.w	r0, r4, #16
    5310:	f000 fb52 	bl	59b8 <Sys80b_Display::reset()>
	_soundPendingCmd = false;
	//_changedSwitchNum = 0xff;
	slamSwitchLastState = slamSwitchNormalState;
    5314:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
	solenoids->resetAll();
	soundBuffer.Clear();
	setSound(15); // shout
	currentLampGroup = 0;
	display.reset();
	_soundPendingCmd = false;
    5318:	f884 5280 	strb.w	r5, [r4, #640]	; 0x280
	//_changedSwitchNum = 0xff;
	slamSwitchLastState = slamSwitchNormalState;
    531c:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    5320:	bd38      	pop	{r3, r4, r5, pc}
    5322:	bf00      	nop
    5324:	20001318 	.word	0x20001318

00005328 <Sys80b::setSolenoid(unsigned char, bool)>:
}

// sets a solenoid state, updating internal variables
// n = [1..9]
void Sys80b::setSolenoid(byte n, bool active) {
	if (n < 1 || n > 9) return;
    5328:	3901      	subs	r1, #1
    532a:	b2c9      	uxtb	r1, r1
    532c:	2908      	cmp	r1, #8
    532e:	d900      	bls.n	5332 <Sys80b::setSolenoid(unsigned char, bool)+0xa>
    5330:	4770      	bx	lr
	//return 3; // TODO
}

// sets a solenoid state, updating internal variables
// n = [1..9]
void Sys80b::setSolenoid(byte n, bool active) {
    5332:	b538      	push	{r3, r4, r5, lr}
    5334:	4604      	mov	r4, r0
	if (n < 1 || n > 9) return;
	solenoids->setState(n-1, active);
    5336:	68c0      	ldr	r0, [r0, #12]
    5338:	f7ff fd64 	bl	4e04 <SolenoidSet::setState(unsigned char, bool)>
	hw->writeSolenoids(solenoids->getStates());
    533c:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
    5340:	68e0      	ldr	r0, [r4, #12]
    5342:	f7ff fe05 	bl	4f50 <SolenoidSet::getStates()>
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    void writeDisplayLD(byte b);
    inline void writeDisplayLD1(bool b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); } 
    inline void writeDisplayLD2(bool b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    5346:	b281      	uxth	r1, r0
    5348:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
}
    534c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5350:	f002 ba46 	b.w	77e0 <PIO::mcpWrite(unsigned short)>

00005354 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>:
// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
// n = [1..9]
 void Sys80b::activateSolenoid(byte n, uint16_t actPeriod, uint16_t swDelay) {
	//Serial.printf("activateSolenoid(%d, %d, %d)\n",n, actPeriod, swDelay);
	if (n < 1 || n > 9) return;
    5354:	3901      	subs	r1, #1
    5356:	b2c9      	uxtb	r1, r1
    5358:	2908      	cmp	r1, #8
    535a:	d814      	bhi.n	5386 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)+0x32>
	if (actPeriod == 0) actPeriod = SOL_DEF_TIME;
    535c:	2a00      	cmp	r2, #0
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
// n = [1..9]
 void Sys80b::activateSolenoid(byte n, uint16_t actPeriod, uint16_t swDelay) {
    535e:	b538      	push	{r3, r4, r5, lr}
    5360:	4604      	mov	r4, r0
	//Serial.printf("activateSolenoid(%d, %d, %d)\n",n, actPeriod, swDelay);
	if (n < 1 || n > 9) return;
	if (actPeriod == 0) actPeriod = SOL_DEF_TIME;
	solenoids->activate(n-1, actPeriod, swDelay);
    5362:	bf08      	it	eq
    5364:	f44f 72fa 	moveq.w	r2, #500	; 0x1f4
    5368:	68c0      	ldr	r0, [r0, #12]
    536a:	f7ff fd71 	bl	4e50 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)>
	hw->writeSolenoids(solenoids->getStates());
    536e:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
    5372:	68e0      	ldr	r0, [r4, #12]
    5374:	f7ff fdec 	bl	4f50 <SolenoidSet::getStates()>
    5378:	b281      	uxth	r1, r0
    537a:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
}
    537e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5382:	f002 ba2d 	b.w	77e0 <PIO::mcpWrite(unsigned short)>
    5386:	4770      	bx	lr

00005388 <Sys80b::checkSolenoids(unsigned long&)>:

// checks whether:
// - delay activation time elapsed (when delayedSwitch = true)
// - maximum active time elapsed for safe switch-off
 void Sys80b::checkSolenoids(uint32_t& t) {
    5388:	b538      	push	{r3, r4, r5, lr}
    538a:	4604      	mov	r4, r0
	if (solenoids->update(t)) hw->writeSolenoids(solenoids->getStates());
    538c:	68c0      	ldr	r0, [r0, #12]
    538e:	f7ff fd7b 	bl	4e88 <SolenoidSet::update(unsigned long&)>
    5392:	b900      	cbnz	r0, 5396 <Sys80b::checkSolenoids(unsigned long&)+0xe>
    5394:	bd38      	pop	{r3, r4, r5, pc}
    5396:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
    539a:	68e0      	ldr	r0, [r4, #12]
    539c:	f7ff fdd8 	bl	4f50 <SolenoidSet::getStates()>
    53a0:	b281      	uxth	r1, r0
    53a2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
}
    53a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    53aa:	f002 ba19 	b.w	77e0 <PIO::mcpWrite(unsigned short)>
    53ae:	bf00      	nop

000053b0 <Sys80b::incrementStrobe()>:

// uint16_t Sys80b::pullSoundCmd() {
//	return (soundBuffer.isEmpty()) ? 0 : soundBuffer.get();
//}

byte Sys80b::incrementStrobe() {
    53b0:	b538      	push	{r3, r4, r5, lr}
    53b2:	4605      	mov	r5, r0
	byte strb = switchGrid.incrementStrobe();
    53b4:	3054      	adds	r0, #84	; 0x54
    53b6:	f7ff fe13 	bl	4fe0 <SwitchGrid8x8::incrementStrobe()>
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    void writeDisplayLD(byte b);
    inline void writeDisplayLD1(bool b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); } 
    inline void writeDisplayLD2(bool b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    53ba:	2101      	movs	r1, #1
    53bc:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
    53c0:	4604      	mov	r4, r0
    53c2:	4081      	lsls	r1, r0
    53c4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    53c8:	43c9      	mvns	r1, r1
    53ca:	b2c9      	uxtb	r1, r1
    53cc:	f002 fb22 	bl	7a14 <PIO::mcpWritePA(unsigned char)>
	hw->writeStrobes(~(byte)(1u<<strb)); // strobe advance (inverted)
	return strb;
}
    53d0:	4620      	mov	r0, r4
    53d2:	bd38      	pop	{r3, r4, r5, pc}

000053d4 <Sys80b::acquireReturns(unsigned long&)>:
// Stores returns states in <_returnsInput> variable
// updating internal SwitchGrid8x8 object attributes.
// Returned value is also stored internally and readable
// through getChangedSwitch() function.
// returns: true in case of changes detected on current return  line
bool Sys80b::acquireReturns(uint32_t& t) {
    53d4:	b538      	push	{r3, r4, r5, lr}
    53d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
    53da:	4604      	mov	r4, r0
    53dc:	460d      	mov	r5, r1
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    inline byte readReturns() { return switchMatrix_IO->mcpReadPB(); }
    53de:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    53e2:	f002 f915 	bl	7610 <PIO::mcpReadPB()>
	_returnsInput = (byte)~(hw->readReturns()); // read actual switch returns on current strobe line (inverted)
    53e6:	43c0      	mvns	r0, r0
	inline byte getLastChanges() { return lastRowChanges; }
	// return 0xff when no changes occurred on current row
	inline byte getLastChangedSwitch() { return lastSwitchChanged; }
	inline bool getLastChangedSwitchState() { return lastSwitchChState; }
	inline byte getRow(byte r) { return returns_latch[r & 7]; }
	inline byte setCurrentRow(byte val, uint32_t& tm) { return setRow(_strobe, val, tm); }
    53e8:	462b      	mov	r3, r5
    53ea:	f894 1268 	ldrb.w	r1, [r4, #616]	; 0x268
    53ee:	b2c2      	uxtb	r2, r0
    53f0:	f104 0054 	add.w	r0, r4, #84	; 0x54
    53f4:	f884 227f 	strb.w	r2, [r4, #639]	; 0x27f
    53f8:	f7ff fe02 	bl	5000 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)>
	return (switchGrid.setCurrentRow(_returnsInput, t) > 0);
}
    53fc:	3000      	adds	r0, #0
    53fe:	bf18      	it	ne
    5400:	2001      	movne	r0, #1
    5402:	bd38      	pop	{r3, r4, r5, pc}

00005404 <Sys80b::feedDisplay()>:

// Gets next sequencial data to send to display and forwards each byte to its 
// correspondig line.
// If data contains a byte routed to both rows, it will be forwarded only once.
void Sys80b::feedDisplay() {
    5404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5408:	4605      	mov	r5, r0
    540a:	f04f 0901 	mov.w	r9, #1
    540e:	4f30      	ldr	r7, [pc, #192]	; (54d0 <Sys80b::feedDisplay()+0xcc>)
    5410:	f100 0810 	add.w	r8, r0, #16
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    5414:	4c2f      	ldr	r4, [pc, #188]	; (54d4 <Sys80b::feedDisplay()+0xd0>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5416:	4e30      	ldr	r6, [pc, #192]	; (54d8 <Sys80b::feedDisplay()+0xd4>)
	byte dc; // display control code: 1 = row 1; 2 = row 2; 3 = both rows
	byte db; // display data (8-bit);
	uint16_t LD_time = 25; // us

	for (int i = 0; i < 2; i++) { // 1 iteration only in case dc == 3
		dd = display.getNextDisplayData();
    5418:	4640      	mov	r0, r8
    541a:	f000 fa33 	bl	5884 <Sys80b_Display::getNextDisplayData()>
    541e:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		dc = (byte)((dd & 0x300) >> 8);
    5422:	f3c0 2b07 	ubfx	fp, r0, #8, #8
    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    5426:	b2c1      	uxtb	r1, r0
    5428:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    542c:	f002 faf2 	bl	7a14 <PIO::mcpWritePA(unsigned char)>
		db = (byte)(dd & 0xff);
		hw->writeDisplayData(db); // updates 8-bit data bus
		if (dc & 1u) hw->writeDisplayLD1(LOW); // LD on
    5430:	f01b 0e01 	ands.w	lr, fp, #1
	byte db; // display data (8-bit);
	uint16_t LD_time = 25; // us

	for (int i = 0; i < 2; i++) { // 1 iteration only in case dc == 3
		dd = display.getNextDisplayData();
		dc = (byte)((dd & 0x300) >> 8);
    5434:	f00b 0a03 	and.w	sl, fp, #3
		db = (byte)(dd & 0xff);
		hw->writeDisplayData(db); // updates 8-bit data bus
		if (dc & 1u) hw->writeDisplayLD1(LOW); // LD on
    5438:	d005      	beq.n	5446 <Sys80b::feedDisplay()+0x42>
			} else if (pin == 14) {
				CORE_PIN14_PORTCLEAR = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTCLEAR = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
    543a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    543e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    5446:	f00b 0302 	and.w	r3, fp, #2
		if (dc & 2u) hw->writeDisplayLD2(LOW);
    544a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    544e:	b12b      	cbz	r3, 545c <Sys80b::feedDisplay()+0x58>
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
    5450:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5454:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    545c:	6821      	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    545e:	683a      	ldr	r2, [r7, #0]
    5460:	fba6 3202 	umull	r3, r2, r6, r2
    5464:	0c92      	lsrs	r2, r2, #18
    5466:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    546a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    546e:	6823      	ldr	r3, [r4, #0]
    5470:	1a5b      	subs	r3, r3, r1
    5472:	429a      	cmp	r2, r3
    5474:	d8fb      	bhi.n	546e <Sys80b::feedDisplay()+0x6a>
		delayMicroseconds(LD_time);
		if (dc & 1u) hw->writeDisplayLD1(HIGH); // LD off
    5476:	f1be 0f00 	cmp.w	lr, #0
    547a:	d005      	beq.n	5488 <Sys80b::feedDisplay()+0x84>
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
    547c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5480:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (dc & 2u) hw->writeDisplayLD2(HIGH);
    5488:	b128      	cbz	r0, 5496 <Sys80b::feedDisplay()+0x92>
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
    548a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    548e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (dc == 3u) break; // CMD for both rows has already been sent
    5496:	f1ba 0f03 	cmp.w	sl, #3
    549a:	d008      	beq.n	54ae <Sys80b::feedDisplay()+0xaa>
		if (i == 0) delayMicroseconds(100u - LD_time); // only after first iteration
    549c:	f1b9 0f01 	cmp.w	r9, #1
    54a0:	d007      	beq.n	54b2 <Sys80b::feedDisplay()+0xae>
	uint16_t dd; // display control + data
	byte dc; // display control code: 1 = row 1; 2 = row 2; 3 = both rows
	byte db; // display data (8-bit);
	uint16_t LD_time = 25; // us

	for (int i = 0; i < 2; i++) { // 1 iteration only in case dc == 3
    54a2:	f1b9 0f02 	cmp.w	r9, #2
    54a6:	d002      	beq.n	54ae <Sys80b::feedDisplay()+0xaa>
    54a8:	f109 0901 	add.w	r9, r9, #1
    54ac:	e7b4      	b.n	5418 <Sys80b::feedDisplay()+0x14>
    54ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    54b2:	6821      	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    54b4:	683b      	ldr	r3, [r7, #0]
    54b6:	fba6 2303 	umull	r2, r3, r6, r3
    54ba:	0c9b      	lsrs	r3, r3, #18
    54bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    54c0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    54c4:	6822      	ldr	r2, [r4, #0]
    54c6:	1a52      	subs	r2, r2, r1
    54c8:	4293      	cmp	r3, r2
    54ca:	d8fb      	bhi.n	54c4 <Sys80b::feedDisplay()+0xc0>
    54cc:	e7ec      	b.n	54a8 <Sys80b::feedDisplay()+0xa4>
    54ce:	bf00      	nop
    54d0:	20001fa8 	.word	0x20001fa8
    54d4:	e0001004 	.word	0xe0001004
    54d8:	431bde83 	.word	0x431bde83

000054dc <Sys80b::renderNextLampsGroup()>:
}

// Real lamps update routine.
// Updates 1 consecutive group of 4 lamps for each call.
// Returns true in case of effective update forwarded.
bool Sys80b::renderNextLampsGroup() {
    54dc:	b570      	push	{r4, r5, r6, lr}
    54de:	4605      	mov	r5, r0
    54e0:	240c      	movs	r4, #12
	byte i;

	for (i = 0; i < 12; i++) { // search next not-updated group
		if (lamps->getChanges4(currentLampGroup) > 0) break;
    54e2:	f895 127c 	ldrb.w	r1, [r5, #636]	; 0x27c
    54e6:	68a8      	ldr	r0, [r5, #8]
    54e8:	f7fd f990 	bl	280c <BitMappedSet::getChanges4(unsigned short)>
    54ec:	b9c0      	cbnz	r0, 5520 <Sys80b::renderNextLampsGroup()+0x44>
		if (++currentLampGroup >= 12) currentLampGroup = 0;
    54ee:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    54f2:	3301      	adds	r3, #1
    54f4:	b2db      	uxtb	r3, r3
    54f6:	2b0b      	cmp	r3, #11
    54f8:	bf88      	it	hi
    54fa:	f885 027c 	strbhi.w	r0, [r5, #636]	; 0x27c
    54fe:	f104 30ff 	add.w	r0, r4, #4294967295
    5502:	bf98      	it	ls
    5504:	f885 327c 	strbls.w	r3, [r5, #636]	; 0x27c
// Updates 1 consecutive group of 4 lamps for each call.
// Returns true in case of effective update forwarded.
bool Sys80b::renderNextLampsGroup() {
	byte i;

	for (i = 0; i < 12; i++) { // search next not-updated group
    5508:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    550c:	d1e9      	bne.n	54e2 <Sys80b::renderNextLampsGroup()+0x6>
    550e:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c

    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    5512:	4621      	mov	r1, r4
    5514:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
    5518:	f002 f962 	bl	77e0 <PIO::mcpWrite(unsigned short)>
		hw->write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
		lamps->clearChanges4(currentLampGroup);
		return true;
	}
	hw->clearLampsOutput();
	return false;
    551c:	4620      	mov	r0, r4
}
    551e:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < 12; i++) { // search next not-updated group
		if (lamps->getChanges4(currentLampGroup) > 0) break;
		if (++currentLampGroup >= 12) currentLampGroup = 0;
	}
	if (i < 12) { // pending update
		hw->write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
    5520:	f895 427c 	ldrb.w	r4, [r5, #636]	; 0x27c
    5524:	f8d5 628c 	ldr.w	r6, [r5, #652]	; 0x28c
    5528:	4621      	mov	r1, r4
    552a:	68a8      	ldr	r0, [r5, #8]
    552c:	f7fd f958 	bl	27e0 <BitMappedSet::getStates4(unsigned short)>
    5530:	4621      	mov	r1, r4
    5532:	4602      	mov	r2, r0
    5534:	4630      	mov	r0, r6
    5536:	f000 fd9d 	bl	6074 <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>
		lamps->clearChanges4(currentLampGroup);
    553a:	68a8      	ldr	r0, [r5, #8]
    553c:	f895 127c 	ldrb.w	r1, [r5, #636]	; 0x27c
    5540:	f7fd f972 	bl	2828 <BitMappedSet::clearChanges4(unsigned short)>
    5544:	2001      	movs	r0, #1
    5546:	bd70      	pop	{r4, r5, r6, pc}

00005548 <Sys80b::renderLampsGroup(unsigned char)>:
	return false;
}

// Updates a group of 4 lamp.
// Returns true in case of effective update forwarded.
bool Sys80b::renderLampsGroup(byte lg) {
    5548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lamps->getChanges4(lg) > 0) { // pending changes ?
    554a:	b28d      	uxth	r5, r1
	return false;
}

// Updates a group of 4 lamp.
// Returns true in case of effective update forwarded.
bool Sys80b::renderLampsGroup(byte lg) {
    554c:	460e      	mov	r6, r1
    554e:	4604      	mov	r4, r0
	if (lamps->getChanges4(lg) > 0) { // pending changes ?
    5550:	6880      	ldr	r0, [r0, #8]
    5552:	4629      	mov	r1, r5
    5554:	f7fd f95a 	bl	280c <BitMappedSet::getChanges4(unsigned short)>
    5558:	b178      	cbz	r0, 557a <Sys80b::renderLampsGroup(unsigned char)+0x32>
		hw->write4Lamps(lg, lamps->getStates4(lg));
    555a:	f8d4 728c 	ldr.w	r7, [r4, #652]	; 0x28c
    555e:	4629      	mov	r1, r5
    5560:	68a0      	ldr	r0, [r4, #8]
    5562:	f7fd f93d 	bl	27e0 <BitMappedSet::getStates4(unsigned short)>
    5566:	4631      	mov	r1, r6
    5568:	4602      	mov	r2, r0
    556a:	4638      	mov	r0, r7
    556c:	f000 fd82 	bl	6074 <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>
		lamps->clearChanges4(lg);
    5570:	68a0      	ldr	r0, [r4, #8]
    5572:	4629      	mov	r1, r5
    5574:	f7fd f958 	bl	2828 <BitMappedSet::clearChanges4(unsigned short)>
		return true;
    5578:	2001      	movs	r0, #1
	}
	return false;
}
    557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000557c <Sys80b::setKeyPressed(UserKey, unsigned long&)>:
 }

// declare a key state change
// shoud always be called also after a key release with key = NO_KEY
void Sys80b::setKeyPressed(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) { // key has changed
    557c:	f890 3281 	ldrb.w	r3, [r0, #641]	; 0x281
    5580:	428b      	cmp	r3, r1
    5582:	d004      	beq.n	558e <Sys80b::setKeyPressed(UserKey, unsigned long&)+0x12>
		_keyPressed = key;
		_keyUpdateTime = ms;
    5584:	6813      	ldr	r3, [r2, #0]

// declare a key state change
// shoud always be called also after a key release with key = NO_KEY
void Sys80b::setKeyPressed(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) { // key has changed
		_keyPressed = key;
    5586:	f880 1281 	strb.w	r1, [r0, #641]	; 0x281
		_keyUpdateTime = ms;
    558a:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
    558e:	4770      	bx	lr

00005590 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)>:
	}
}

// Low-level switches state change handler routine.
void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
    5590:	b5f0      	push	{r4, r5, r6, r7, lr}
    5592:	b089      	sub	sp, #36	; 0x24
    5594:	460c      	mov	r4, r1
    5596:	4605      	mov	r5, r0
	String str;
    5598:	2100      	movs	r1, #0
    559a:	4668      	mov	r0, sp
		_keyUpdateTime = ms;
	}
}

// Low-level switches state change handler routine.
void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
    559c:	4616      	mov	r6, r2
    559e:	461f      	mov	r7, r3
	String str;
    55a0:	f006 ff2c 	bl	c3fc <String::String(char const*)>

	str = "switch ";
    55a4:	4937      	ldr	r1, [pc, #220]	; (5684 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xf4>)
    55a6:	4668      	mov	r0, sp
    55a8:	f006 ffd6 	bl	c558 <String::operator=(char const*)>
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
    55ac:	4621      	mov	r1, r4
    55ae:	4668      	mov	r0, sp
    55b0:	f007 f844 	bl	c63c <String::append(int)>
	str += sw;
	str += (st ? " closed" : " opened");
    55b4:	4b34      	ldr	r3, [pc, #208]	; (5688 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xf8>)
    55b6:	4935      	ldr	r1, [pc, #212]	; (568c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xfc>)
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    55b8:	4668      	mov	r0, sp
    55ba:	2e00      	cmp	r6, #0
    55bc:	bf08      	it	eq
    55be:	4619      	moveq	r1, r3
    55c0:	f007 f81e 	bl	c600 <String::append(char const*)>
	msg->outln(str);
    55c4:	4669      	mov	r1, sp
    55c6:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
    55ca:	f001 f96b 	bl	68a4 <Msg::outln(String&)>

	// user buttons pressed
	if (sw == LEFTADV_SW || sw == RIGHTADV_SW || sw == REPLAY_SW || sw == TEST_SW) {
    55ce:	1fa3      	subs	r3, r4, #6
    55d0:	2b01      	cmp	r3, #1
    55d2:	d92e      	bls.n	5632 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xa2>
    55d4:	2c10      	cmp	r4, #16
    55d6:	d02c      	beq.n	5632 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xa2>
    55d8:	2c2f      	cmp	r4, #47	; 0x2f
    55da:	d125      	bne.n	5628 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x98>
		case RIGHTADV_SW:
			key = RIGHTADV_KEY;
			str = "RIGHT";
			break;
		case REPLAY_SW:
			key = REPLAY_KEY;
    55dc:	2401      	movs	r4, #1
			str = "REPLAY";
    55de:	492c      	ldr	r1, [pc, #176]	; (5690 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x100>)
    55e0:	4668      	mov	r0, sp
    55e2:	f006 ffb9 	bl	c558 <String::operator=(char const*)>
			break;
		default:
			key = NO_KEY;
			str = "<unknown>";
		}
		if (st) {
    55e6:	b386      	cbz	r6, 564a <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xba>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    55e8:	492a      	ldr	r1, [pc, #168]	; (5694 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x104>)
    55ea:	a804      	add	r0, sp, #16
    55ec:	f006 ff06 	bl	c3fc <String::String(char const*)>
			str = "Key " + str + " pressed";
    55f0:	4669      	mov	r1, sp
    55f2:	a804      	add	r0, sp, #16
    55f4:	f007 f836 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    55f8:	4927      	ldr	r1, [pc, #156]	; (5698 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x108>)
    55fa:	f007 f83b 	bl	c674 <operator+(StringSumHelper const&, char const*)>
    55fe:	4601      	mov	r1, r0
    5600:	4668      	mov	r0, sp
    5602:	f006 ff99 	bl	c538 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    5606:	a804      	add	r0, sp, #16
    5608:	f006 feb8 	bl	c37c <String::~String()>
			msg->outln(str);
    560c:	4669      	mov	r1, sp
    560e:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
    5612:	f001 f947 	bl	68a4 <Msg::outln(String&)>
 }

// declare a key state change
// shoud always be called also after a key release with key = NO_KEY
void Sys80b::setKeyPressed(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) { // key has changed
    5616:	f895 3281 	ldrb.w	r3, [r5, #641]	; 0x281
    561a:	42a3      	cmp	r3, r4
    561c:	d004      	beq.n	5628 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x98>
		_keyPressed = key;
		_keyUpdateTime = ms;
    561e:	683b      	ldr	r3, [r7, #0]

// declare a key state change
// shoud always be called also after a key release with key = NO_KEY
void Sys80b::setKeyPressed(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) { // key has changed
		_keyPressed = key;
    5620:	f885 4281 	strb.w	r4, [r5, #641]	; 0x281
		_keyUpdateTime = ms;
    5624:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
	}
}

// Low-level switches state change handler routine.
void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
	String str;
    5628:	4668      	mov	r0, sp
    562a:	f006 fea7 	bl	c37c <String::~String()>
	//if (sw == TEST_SW) {
	//	msg->outln(F("key released."));
	//	if (st) onTestButtonPressed();
	//	return;
	//}
}
    562e:	b009      	add	sp, #36	; 0x24
    5630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	msg->outln(str);

	// user buttons pressed
	if (sw == LEFTADV_SW || sw == RIGHTADV_SW || sw == REPLAY_SW || sw == TEST_SW) {
		UserKey key;
		switch (sw) {
    5632:	2c07      	cmp	r4, #7
    5634:	d018      	beq.n	5668 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xd8>
    5636:	d90f      	bls.n	5658 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xc8>
    5638:	2c10      	cmp	r4, #16
    563a:	d11b      	bne.n	5674 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xe4>
			key = LEFTADV_KEY;
			str = "LEFT";
			break;
		case RIGHTADV_SW:
			key = RIGHTADV_KEY;
			str = "RIGHT";
    563c:	4917      	ldr	r1, [pc, #92]	; (569c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x10c>)
    563e:	4668      	mov	r0, sp
    5640:	f006 ff8a 	bl	c558 <String::operator=(char const*)>
		case LEFTADV_SW:
			key = LEFTADV_KEY;
			str = "LEFT";
			break;
		case RIGHTADV_SW:
			key = RIGHTADV_KEY;
    5644:	2403      	movs	r4, #3
			break;
		default:
			key = NO_KEY;
			str = "<unknown>";
		}
		if (st) {
    5646:	2e00      	cmp	r6, #0
    5648:	d1ce      	bne.n	55e8 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x58>
			str = "Key " + str + " pressed";
			msg->outln(str);
		}
		else {
			msg->outln(F("key released."));
    564a:	4915      	ldr	r1, [pc, #84]	; (56a0 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x110>)
			key = NO_KEY;
    564c:	4634      	mov	r4, r6
		if (st) {
			str = "Key " + str + " pressed";
			msg->outln(str);
		}
		else {
			msg->outln(F("key released."));
    564e:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
    5652:	f001 f8c1 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
    5656:	e7de      	b.n	5616 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x86>
	msg->outln(str);

	// user buttons pressed
	if (sw == LEFTADV_SW || sw == RIGHTADV_SW || sw == REPLAY_SW || sw == TEST_SW) {
		UserKey key;
		switch (sw) {
    5658:	2c06      	cmp	r4, #6
    565a:	d10d      	bne.n	5678 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xe8>
		case LEFTADV_SW:
			key = LEFTADV_KEY;
			str = "LEFT";
    565c:	4911      	ldr	r1, [pc, #68]	; (56a4 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x114>)
    565e:	4668      	mov	r0, sp
    5660:	f006 ff7a 	bl	c558 <String::operator=(char const*)>
	// user buttons pressed
	if (sw == LEFTADV_SW || sw == RIGHTADV_SW || sw == REPLAY_SW || sw == TEST_SW) {
		UserKey key;
		switch (sw) {
		case LEFTADV_SW:
			key = LEFTADV_KEY;
    5664:	2402      	movs	r4, #2
			str = "LEFT";
			break;
    5666:	e7be      	b.n	55e6 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x56>
			key = REPLAY_KEY;
			str = "REPLAY";
			break;
		case TEST_SW:
			key = TEST_KEY;
			str = "TEST";
    5668:	490f      	ldr	r1, [pc, #60]	; (56a8 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x118>)
    566a:	4668      	mov	r0, sp
    566c:	f006 ff74 	bl	c558 <String::operator=(char const*)>
		case REPLAY_SW:
			key = REPLAY_KEY;
			str = "REPLAY";
			break;
		case TEST_SW:
			key = TEST_KEY;
    5670:	2404      	movs	r4, #4
			str = "TEST";
			break;
    5672:	e7b8      	b.n	55e6 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x56>
	msg->outln(str);

	// user buttons pressed
	if (sw == LEFTADV_SW || sw == RIGHTADV_SW || sw == REPLAY_SW || sw == TEST_SW) {
		UserKey key;
		switch (sw) {
    5674:	2c2f      	cmp	r4, #47	; 0x2f
    5676:	d0b1      	beq.n	55dc <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x4c>
			key = TEST_KEY;
			str = "TEST";
			break;
		default:
			key = NO_KEY;
			str = "<unknown>";
    5678:	490c      	ldr	r1, [pc, #48]	; (56ac <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x11c>)
    567a:	4668      	mov	r0, sp
		case TEST_SW:
			key = TEST_KEY;
			str = "TEST";
			break;
		default:
			key = NO_KEY;
    567c:	2400      	movs	r4, #0
			str = "<unknown>";
    567e:	f006 ff6b 	bl	c558 <String::operator=(char const*)>
    5682:	e7b0      	b.n	55e6 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x56>
    5684:	20001338 	.word	0x20001338
    5688:	20001330 	.word	0x20001330
    568c:	20001328 	.word	0x20001328
    5690:	20001350 	.word	0x20001350
    5694:	2000136c 	.word	0x2000136c
    5698:	20000104 	.word	0x20000104
    569c:	20001348 	.word	0x20001348
    56a0:	20001374 	.word	0x20001374
    56a4:	20001340 	.word	0x20001340
    56a8:	20001358 	.word	0x20001358
    56ac:	20001360 	.word	0x20001360

000056b0 <Sys80b::_millisRoutine(unsigned long&)>:
// called every millisecond.
// Returns true when an input change has detected:
// either a switch from grid or the slam switch.
// In case of change detection, use getChangesSwitch()
// to get the event.
void Sys80b::_millisRoutine(uint32_t& ms) {
    56b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56b2:	4604      	mov	r4, r0
    56b4:	460d      	mov	r5, r1
	
	renderNextLampsGroup();
    56b6:	f7ff ff11 	bl	54dc <Sys80b::renderNextLampsGroup()>
	updateSound(ms);
    56ba:	6823      	ldr	r3, [r4, #0]
    56bc:	4629      	mov	r1, r5
    56be:	4620      	mov	r0, r4
    56c0:	68db      	ldr	r3, [r3, #12]
    56c2:	4798      	blx	r3
	checkSolenoids(ms);
    56c4:	4629      	mov	r1, r5
    56c6:	4620      	mov	r0, r4
    56c8:	f7ff fe5e 	bl	5388 <Sys80b::checkSolenoids(unsigned long&)>
	feedDisplay();
    56cc:	4620      	mov	r0, r4
    56ce:	f7ff fe99 	bl	5404 <Sys80b::feedDisplay()>
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    56d2:	4a24      	ldr	r2, [pc, #144]	; (5764 <Sys80b::_millisRoutine(unsigned long&)+0xb4>)
	// /* if (display.isLastPosition()) */ display.update(ms);
	
	bool slsw = hw->readSlamSw();
	if (slsw != slamSwitchLastState) {
    56d4:	f894 327e 	ldrb.w	r3, [r4, #638]	; 0x27e
    56d8:	6891      	ldr	r1, [r2, #8]
    56da:	f3c1 1600 	ubfx	r6, r1, #4, #1
    56de:	42b3      	cmp	r3, r6
    56e0:	d012      	beq.n	5708 <Sys80b::_millisRoutine(unsigned long&)+0x58>
		onSlamSwitchEvent(slamSwitchNormalState ? !slsw : slsw); // code from superclass
    56e2:	6823      	ldr	r3, [r4, #0]
    56e4:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    56e8:	695b      	ldr	r3, [r3, #20]
    56ea:	b9ba      	cbnz	r2, 571c <Sys80b::_millisRoutine(unsigned long&)+0x6c>
    56ec:	4a1e      	ldr	r2, [pc, #120]	; (5768 <Sys80b::_millisRoutine(unsigned long&)+0xb8>)
    56ee:	4631      	mov	r1, r6
    56f0:	4293      	cmp	r3, r2
    56f2:	d11c      	bne.n	572e <Sys80b::_millisRoutine(unsigned long&)+0x7e>
    56f4:	b131      	cbz	r1, 5704 <Sys80b::_millisRoutine(unsigned long&)+0x54>
    56f6:	210c      	movs	r1, #12
    56f8:	481c      	ldr	r0, [pc, #112]	; (576c <Sys80b::_millisRoutine(unsigned long&)+0xbc>)
    56fa:	f006 fbb7 	bl	be6c <usb_serial_write>
    56fe:	481c      	ldr	r0, [pc, #112]	; (5770 <Sys80b::_millisRoutine(unsigned long&)+0xc0>)
    5700:	f006 fd76 	bl	c1f0 <Print::println()>
		slamSwitchLastState = slsw;
    5704:	f884 627e 	strb.w	r6, [r4, #638]	; 0x27e
	}

	if (acquireReturns(ms)) { // any changes?
    5708:	4629      	mov	r1, r5
    570a:	4620      	mov	r0, r4
    570c:	f7ff fe62 	bl	53d4 <Sys80b::acquireReturns(unsigned long&)>
    5710:	b980      	cbnz	r0, 5734 <Sys80b::_millisRoutine(unsigned long&)+0x84>
		bool st = switchGrid.getLastChangedSwitchState();
		switchGrid.clearLastSwitchChanged();
		_onSwitchEvent(sw, st, ms);
		onSwitchEvent(sw, st); // virtual function: code provided by superclass
	}
	incrementStrobe();
    5712:	4620      	mov	r0, r4

	//_checkPressedKey(ms);
}
    5714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bool st = switchGrid.getLastChangedSwitchState();
		switchGrid.clearLastSwitchChanged();
		_onSwitchEvent(sw, st, ms);
		onSwitchEvent(sw, st); // virtual function: code provided by superclass
	}
	incrementStrobe();
    5718:	f7ff be4a 	b.w	53b0 <Sys80b::incrementStrobe()>
    571c:	f001 0110 	and.w	r1, r1, #16
    5720:	4a11      	ldr	r2, [pc, #68]	; (5768 <Sys80b::_millisRoutine(unsigned long&)+0xb8>)
    5722:	fab1 f181 	clz	r1, r1
    5726:	4293      	cmp	r3, r2
    5728:	ea4f 1151 	mov.w	r1, r1, lsr #5
    572c:	d0e2      	beq.n	56f4 <Sys80b::_millisRoutine(unsigned long&)+0x44>
	feedDisplay();
	// /* if (display.isLastPosition()) */ display.update(ms);
	
	bool slsw = hw->readSlamSw();
	if (slsw != slamSwitchLastState) {
		onSlamSwitchEvent(slamSwitchNormalState ? !slsw : slsw); // code from superclass
    572e:	4620      	mov	r0, r4
    5730:	4798      	blx	r3
    5732:	e7e7      	b.n	5704 <Sys80b::_millisRoutine(unsigned long&)+0x54>
    5734:	f894 6055 	ldrb.w	r6, [r4, #85]	; 0x55
	bool getSwitchState(byte col, byte row);
	bool setSwitch(byte switchNum, bool state, bool seamless = false);
	inline uint32_t getSwitchLastChangeTime(byte col, byte row) { return swChangeTime[row & 7][col & 7]; }
	inline byte getSwitchNumber(byte col, byte row) { return (row & 7) * 10 + (col & 7); }
	inline uint32_t getSwitchChangeCount(byte col, byte row) { return swChangeCount[row & 7][col & 7]; }
	void clearLastSwitchChanged() { lastSwitchChanged = 0xff; }
    5738:	22ff      	movs	r2, #255	; 0xff
    573a:	f894 7056 	ldrb.w	r7, [r4, #86]	; 0x56

	if (acquireReturns(ms)) { // any changes?
		byte sw = switchGrid.getLastChangedSwitch(); // surely sw != 0xff
		bool st = switchGrid.getLastChangedSwitchState();
		switchGrid.clearLastSwitchChanged();
		_onSwitchEvent(sw, st, ms);
    573e:	462b      	mov	r3, r5
    5740:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
    5744:	4631      	mov	r1, r6
    5746:	463a      	mov	r2, r7
    5748:	4620      	mov	r0, r4
    574a:	f7ff ff21 	bl	5590 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)>
		onSwitchEvent(sw, st); // virtual function: code provided by superclass
    574e:	6823      	ldr	r3, [r4, #0]
    5750:	4a08      	ldr	r2, [pc, #32]	; (5774 <Sys80b::_millisRoutine(unsigned long&)+0xc4>)
    5752:	691b      	ldr	r3, [r3, #16]
    5754:	4293      	cmp	r3, r2
    5756:	d0dc      	beq.n	5712 <Sys80b::_millisRoutine(unsigned long&)+0x62>
    5758:	463a      	mov	r2, r7
    575a:	4631      	mov	r1, r6
    575c:	4620      	mov	r0, r4
    575e:	4798      	blx	r3
    5760:	e7d7      	b.n	5712 <Sys80b::_millisRoutine(unsigned long&)+0x62>
    5762:	bf00      	nop
    5764:	4200c000 	.word	0x4200c000
    5768:	0000515d 	.word	0x0000515d
    576c:	200012e0 	.word	0x200012e0
    5770:	20001fdc 	.word	0x20001fdc
    5774:	000041e5 	.word	0x000041e5

00005778 <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>:
	_type = t;
	num = n;
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
    5778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const __FlashStringHelper* descrText) {
    577c:	f100 0508 	add.w	r5, r0, #8
	_type = t;
	num = n;
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
    5780:	b084      	sub	sp, #16
    5782:	4604      	mov	r4, r0
    5784:	4617      	mov	r7, r2
    5786:	461e      	mov	r6, r3
    5788:	4688      	mov	r8, r1
	const __FlashStringHelper* descrText) {
    578a:	4628      	mov	r0, r5
    578c:	2100      	movs	r1, #0
    578e:	f006 fe35 	bl	c3fc <String::String(char const*)>
	_sys = refSystem;
	_type = t;
	num = n;
	descr = String(descrText);
    5792:	990a      	ldr	r1, [sp, #40]	; 0x28
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
	const __FlashStringHelper* descrText) {
	_sys = refSystem;
    5794:	f8c4 8000 	str.w	r8, [r4]
	_type = t;
	num = n;
	descr = String(descrText);
    5798:	4668      	mov	r0, sp
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
	const __FlashStringHelper* descrText) {
	_sys = refSystem;
	_type = t;
    579a:	7127      	strb	r7, [r4, #4]
	num = n;
    579c:	7166      	strb	r6, [r4, #5]
	descr = String(descrText);
    579e:	f006 fe41 	bl	c424 <String::String(__FlashStringHelper const*)>
    57a2:	4669      	mov	r1, sp
    57a4:	4628      	mov	r0, r5
    57a6:	f006 fecf 	bl	c548 <String::operator=(String&&)>
    57aa:	4668      	mov	r0, sp
    57ac:	f006 fde6 	bl	c37c <String::~String()>
};
    57b0:	4620      	mov	r0, r4
    57b2:	b004      	add	sp, #16
    57b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000057b8 <Sys80b_Actuator::set(bool)>:
		return false;
	}
};

void Sys80b_Actuator::set(bool state) {
	switch (_type) {
    57b8:	7903      	ldrb	r3, [r0, #4]
    57ba:	2b01      	cmp	r3, #1
    57bc:	d00c      	beq.n	57d8 <Sys80b_Actuator::set(bool)+0x20>
    57be:	2b03      	cmp	r3, #3
    57c0:	d109      	bne.n	57d6 <Sys80b_Actuator::set(bool)+0x1e>
	inline void setOnGameRelay(bool st) { setLamp(Q_RELAY_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    57c2:	460a      	mov	r2, r1
    57c4:	2300      	movs	r3, #0
	default:
		return false;
	}
};

void Sys80b_Actuator::set(bool state) {
    57c6:	b410      	push	{r4}
    57c8:	6804      	ldr	r4, [r0, #0]
    57ca:	7941      	ldrb	r1, [r0, #5]
    57cc:	68a0      	ldr	r0, [r4, #8]
		_sys->setLamp(num, state);
		break;
	default:
		return;
	}
};
    57ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    57d2:	f7fc bfb5 	b.w	2740 <BitMappedSet::setState(unsigned short, bool, bool)>
    57d6:	4770      	bx	lr
};

void Sys80b_Actuator::set(bool state) {
	switch (_type) {
	case SOLENOIDS:
		_sys->setSolenoid(num, state);
    57d8:	460a      	mov	r2, r1
    57da:	7941      	ldrb	r1, [r0, #5]
    57dc:	6800      	ldr	r0, [r0, #0]
    57de:	f7ff bda3 	b.w	5328 <Sys80b::setSolenoid(unsigned char, bool)>
    57e2:	bf00      	nop

000057e4 <Sys80b_Actuator::activate(unsigned short, unsigned short)>:
	default:
		return;
	}
};

void Sys80b_Actuator::activate(uint16_t actPeriod, uint16_t swDelay) {
    57e4:	b410      	push	{r4}
	if (_type == SOLENOIDS)	_sys->activateSolenoid(num, actPeriod, swDelay);
    57e6:	7904      	ldrb	r4, [r0, #4]
    57e8:	2c01      	cmp	r4, #1
    57ea:	d002      	beq.n	57f2 <Sys80b_Actuator::activate(unsigned short, unsigned short)+0xe>
}
    57ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    57f0:	4770      	bx	lr
		return;
	}
};

void Sys80b_Actuator::activate(uint16_t actPeriod, uint16_t swDelay) {
	if (_type == SOLENOIDS)	_sys->activateSolenoid(num, actPeriod, swDelay);
    57f2:	4613      	mov	r3, r2
}
    57f4:	f85d 4b04 	ldr.w	r4, [sp], #4
		return;
	}
};

void Sys80b_Actuator::activate(uint16_t actPeriod, uint16_t swDelay) {
	if (_type == SOLENOIDS)	_sys->activateSolenoid(num, actPeriod, swDelay);
    57f8:	460a      	mov	r2, r1
    57fa:	7941      	ldrb	r1, [r0, #5]
    57fc:	6800      	ldr	r0, [r0, #0]
    57fe:	f7ff bda9 	b.w	5354 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    5802:	bf00      	nop

00005804 <Sys80b_Display::Sys80b_Display()>:
//	_pushCmd(3, CD_NORMAL_MODE);
//	_pushCmd(3, CD_BUF_PTR);
//	_pushCmd(3, CD_START_SCAN);
//}

Sys80b_Display::Sys80b_Display() : TextDisplay(2, DISPLAY_COLS) {
    5804:	b510      	push	{r4, lr}
    5806:	2102      	movs	r1, #2
    5808:	2214      	movs	r2, #20
    580a:	4604      	mov	r4, r0
    580c:	f000 f90a 	bl	5a24 <TextDisplay::TextDisplay(unsigned char, unsigned char)>
    5810:	4a06      	ldr	r2, [pc, #24]	; (582c <Sys80b_Display::Sys80b_Display()+0x28>)
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    5812:	2320      	movs	r3, #32
		_buff = new Type[_size];
    5814:	2040      	movs	r0, #64	; 0x40
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    5816:	63e3      	str	r3, [r4, #60]	; 0x3c
    5818:	6022      	str	r2, [r4, #0]
		_buff = new Type[_size];
    581a:	f006 fca7 	bl	c16c <operator new[](unsigned int)>
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    581e:	2300      	movs	r3, #0
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
		_buff = new Type[_size];
    5820:	6320      	str	r0, [r4, #48]	; 0x30
	//_init(*d);
}
    5822:	4620      	mov	r0, r4
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    5824:	6363      	str	r3, [r4, #52]	; 0x34
		_valuesCount = 0;
    5826:	63a3      	str	r3, [r4, #56]	; 0x38
    5828:	bd10      	pop	{r4, pc}
    582a:	bf00      	nop
    582c:	200012b8 	.word	0x200012b8

00005830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>:
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
}

void Sys80b_Display::_pushCmd(byte ld, byte cmd) {
    5830:	6b83      	ldr	r3, [r0, #56]	; 0x38
	if (cmdBuffer.getCount() >= CMD_BUF_LEN) return; // refused
    5832:	2b1f      	cmp	r3, #31
    5834:	dc25      	bgt.n	5882 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x52>
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
    5836:	0209      	lsls	r1, r1, #8
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
}

void Sys80b_Display::_pushCmd(byte ld, byte cmd) {
    5838:	b5f0      	push	{r4, r5, r6, r7, lr}
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    583a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	if (cmdBuffer.getCount() >= CMD_BUF_LEN) return; // refused
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
    583c:	f401 7140 	and.w	r1, r1, #768	; 0x300
    5840:	42ab      	cmp	r3, r5
    5842:	d21d      	bcs.n	5880 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x50>
		unsigned p = _firstPtr + _valuesCount++;
    5844:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
    5848:	1c5c      	adds	r4, r3, #1
		if (p >= _size) p -= _size;
		_buff[p] = value;
    584a:	f240 4601 	movw	r6, #1025	; 0x401
    584e:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    5852:	eb03 070c 	add.w	r7, r3, ip
    5856:	6384      	str	r4, [r0, #56]	; 0x38
		if (p >= _size) p -= _size;
		_buff[p] = value;
    5858:	430e      	orrs	r6, r1

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
    585a:	42bd      	cmp	r5, r7
    585c:	bf98      	it	ls
    585e:	1b7f      	subls	r7, r7, r5
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5860:	42a5      	cmp	r5, r4
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
		_buff[p] = value;
    5862:	f82e 6017 	strh.w	r6, [lr, r7, lsl #1]
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5866:	d90b      	bls.n	5880 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x50>
		unsigned p = _firstPtr + _valuesCount++;
    5868:	4464      	add	r4, ip
		if (p >= _size) p -= _size;
		_buff[p] = value;
    586a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    586e:	3302      	adds	r3, #2
		if (p >= _size) p -= _size;
    5870:	42ac      	cmp	r4, r5
		_buff[p] = value;
    5872:	ea41 0102 	orr.w	r1, r1, r2
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    5876:	6383      	str	r3, [r0, #56]	; 0x38
		if (p >= _size) p -= _size;
    5878:	bf28      	it	cs
    587a:	1b64      	subcs	r4, r4, r5
		_buff[p] = value;
    587c:	f82e 1014 	strh.w	r1, [lr, r4, lsl #1]
    5880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5882:	4770      	bx	lr

00005884 <Sys80b_Display::getNextDisplayData()>:
// returns a word with format 00000RLL.DDDDDDDD where:
// R = reset bit (active low)
// LL = LD2, LD1 bits (active high)
// DDDDDDDD = data byte
// at least LD1 or LD2 (or Reset) should be setPeriod for any effect
uint16_t Sys80b_Display::getNextDisplayData() {
    5884:	b538      	push	{r3, r4, r5, lr}
    5886:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5888:	4604      	mov	r4, r0

	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
    588a:	b15b      	cbz	r3, 58a4 <Sys80b_Display::getNextDisplayData()+0x20>
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    588c:	6b41      	ldr	r1, [r0, #52]	; 0x34
		if (_firstPtr == _size) _firstPtr = 0;
    588e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    5890:	1c4a      	adds	r2, r1, #1
    5892:	6b00      	ldr	r0, [r0, #48]	; 0x30
		if (_firstPtr == _size) _firstPtr = 0;
    5894:	42aa      	cmp	r2, r5
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    5896:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    589a:	6362      	str	r2, [r4, #52]	; 0x34
		if (_firstPtr == _size) _firstPtr = 0;
    589c:	d034      	beq.n	5908 <Sys80b_Display::getNextDisplayData()+0x84>
		_valuesCount--;
    589e:	3b01      	subs	r3, #1
    58a0:	63a3      	str	r3, [r4, #56]	; 0x38
    58a2:	bd38      	pop	{r3, r4, r5, pc}

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
    58a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    58a8:	7e02      	ldrb	r2, [r0, #24]
    58aa:	429a      	cmp	r2, r3
    58ac:	d815      	bhi.n	58da <Sys80b_Display::getNextDisplayData()+0x56>
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    58ae:	b373      	cbz	r3, 590e <Sys80b_Display::getNextDisplayData()+0x8a>
	data |= ch;
    58b0:	f240 6521 	movw	r5, #1569	; 0x621
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    58b4:	3301      	adds	r3, #1
    58b6:	b2da      	uxtb	r2, r3
    58b8:	2a01      	cmp	r2, #1
    58ba:	d952      	bls.n	5962 <Sys80b_Display::getNextDisplayData()+0xde>
		currentRow = 0;
		if (++currentCol == DISPLAY_COLS) {
    58bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
    58c0:	2200      	movs	r2, #0
		if (++currentCol == DISPLAY_COLS) {
    58c2:	3301      	adds	r3, #1
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
    58c4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
		if (++currentCol == DISPLAY_COLS) {
    58c8:	b2db      	uxtb	r3, r3
    58ca:	2b14      	cmp	r3, #20
    58cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    58d0:	d03c      	beq.n	594c <Sys80b_Display::getNextDisplayData()+0xc8>
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
    58d2:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	return data;
    58d6:	4628      	mov	r0, r5
    58d8:	bd38      	pop	{r3, r4, r5, pc}

	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
    58da:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    58de:	7e41      	ldrb	r1, [r0, #25]
    58e0:	4291      	cmp	r1, r2
    58e2:	d9e4      	bls.n	58ae <Sys80b_Display::getNextDisplayData()+0x2a>
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
	void setChar(byte row, byte col, byte ch);
	inline byte getChar(byte row, byte col) {
		return (validPosition(row, col)) ? (byte)textRow[row][col] : ERR_BYTE;
    58e4:	6841      	ldr	r1, [r0, #4]
    58e6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    58ea:	5c8a      	ldrb	r2, [r1, r2]
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = getChar(row, col);
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    58ec:	09d1      	lsrs	r1, r2, #7
    58ee:	d017      	beq.n	5920 <Sys80b_Display::getNextDisplayData()+0x9c>
    58f0:	18c1      	adds	r1, r0, r3
    58f2:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    58f6:	2901      	cmp	r1, #1
    58f8:	d112      	bne.n	5920 <Sys80b_Display::getNextDisplayData()+0x9c>
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    58fa:	bb7b      	cbnz	r3, 595c <Sys80b_Display::getNextDisplayData()+0xd8>
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    58fc:	2301      	movs	r3, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    58fe:	f44f 65a4 	mov.w	r5, #1312	; 0x520
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    5902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    5906:	e7e4      	b.n	58d2 <Sys80b_Display::getNextDisplayData()+0x4e>
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
		if (_firstPtr == _size) _firstPtr = 0;
    5908:	2200      	movs	r2, #0
    590a:	6362      	str	r2, [r4, #52]	; 0x34
    590c:	e7c7      	b.n	589e <Sys80b_Display::getNextDisplayData()+0x1a>
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    590e:	f240 5521 	movw	r5, #1313	; 0x521
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    5912:	2301      	movs	r3, #1
		if (++currentCol == DISPLAY_COLS) {
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
    5914:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	return data;
    5918:	4628      	mov	r0, r5
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    591a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
	return data;
    591e:	bd38      	pop	{r3, r4, r5, pc}
    5920:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5924:	b290      	uxth	r0, r2
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    5926:	b9fb      	cbnz	r3, 5968 <Sys80b_Display::getNextDisplayData()+0xe4>
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    5928:	2a01      	cmp	r2, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    592a:	f440 65a0 	orr.w	r5, r0, #1280	; 0x500
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    592e:	d1f0      	bne.n	5912 <Sys80b_Display::getNextDisplayData()+0x8e>
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5930:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    5932:	b1b1      	cbz	r1, 5962 <Sys80b_Display::getNextDisplayData()+0xde>
		unsigned p = _firstPtr + _valuesCount++;
    5934:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5936:	2201      	movs	r2, #1
		if (p >= _size) p -= _size;
    5938:	428b      	cmp	r3, r1
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    593a:	63a2      	str	r2, [r4, #56]	; 0x38
		if (p >= _size) p -= _size;
		_buff[p] = value;
    593c:	6b22      	ldr	r2, [r4, #48]	; 0x30

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
    593e:	bf28      	it	cs
    5940:	1a5b      	subcs	r3, r3, r1
		_buff[p] = value;
    5942:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
    5946:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    594a:	e7b3      	b.n	58b4 <Sys80b_Display::getNextDisplayData()+0x30>
	if (++currentRow > 1) {
		currentRow = 0;
		if (++currentCol == DISPLAY_COLS) {
			currentCol = 0;
    594c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
    5950:	2103      	movs	r1, #3
    5952:	22c0      	movs	r2, #192	; 0xc0
    5954:	4620      	mov	r0, r4
    5956:	f7ff ff6b 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
    595a:	e7ba      	b.n	58d2 <Sys80b_Display::getNextDisplayData()+0x4e>
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    595c:	f44f 65c4 	mov.w	r5, #1568	; 0x620
    5960:	e7a8      	b.n	58b4 <Sys80b_Display::getNextDisplayData()+0x30>
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    5962:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    5966:	e7b4      	b.n	58d2 <Sys80b_Display::getNextDisplayData()+0x4e>

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    5968:	2a01      	cmp	r2, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    596a:	f440 65c0 	orr.w	r5, r0, #1536	; 0x600
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    596e:	d1a1      	bne.n	58b4 <Sys80b_Display::getNextDisplayData()+0x30>
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5970:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    5972:	2900      	cmp	r1, #0
    5974:	d09e      	beq.n	58b4 <Sys80b_Display::getNextDisplayData()+0x30>
    5976:	e7dd      	b.n	5934 <Sys80b_Display::getNextDisplayData()+0xb0>

00005978 <Sys80b_Display::_sendInitSequence()>:
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
	cmdBuffer.put(base | CD_PREFIX);
	cmdBuffer.put(base | cmd);
}

void Sys80b_Display::_sendInitSequence() {
    5978:	b510      	push	{r4, lr}
	_pushCmd(3, CD_DIGIT_CNT | DISPLAY_COLS);
    597a:	2294      	movs	r2, #148	; 0x94
    597c:	2103      	movs	r1, #3
    597e:	f7ff ff57 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_DTIME_16CLK); // no sw effect
    5982:	2205      	movs	r2, #5
    5984:	2103      	movs	r1, #3
    5986:	f7ff ff53 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_DUTY_CYCLE | 0x3F); // maximum brightess
    598a:	227f      	movs	r2, #127	; 0x7f
    598c:	2103      	movs	r1, #3
    598e:	f7ff ff4f 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_NORMAL_MODE);
    5992:	2208      	movs	r2, #8
    5994:	2103      	movs	r1, #3
    5996:	f7ff ff4b 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_BUF_PTR);
    599a:	22c0      	movs	r2, #192	; 0xc0
    599c:	2103      	movs	r1, #3
    599e:	f7ff ff47 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_START_SCAN);
    59a2:	220e      	movs	r2, #14
    59a4:	2103      	movs	r1, #3
    59a6:	f7ff ff43 	bl	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_START_SCAN);
    59aa:	220e      	movs	r2, #14
    59ac:	2103      	movs	r1, #3
    59ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_pushCmd(3, CD_DTIME_16CLK); // no sw effect
	_pushCmd(3, CD_DUTY_CYCLE | 0x3F); // maximum brightess
	_pushCmd(3, CD_NORMAL_MODE);
	_pushCmd(3, CD_BUF_PTR);
	_pushCmd(3, CD_START_SCAN);
	_pushCmd(3, CD_START_SCAN);
    59b2:	f7ff bf3d 	b.w	5830 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
    59b6:	bf00      	nop

000059b8 <Sys80b_Display::reset()>:
Sys80b_Display::Sys80b_Display() : TextDisplay(2, DISPLAY_COLS) {
	//_init(*d);
}

void Sys80b_Display::reset() {
	currentCol = 0; // current display column
    59b8:	2300      	movs	r3, #0
    59ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c

Sys80b_Display::Sys80b_Display() : TextDisplay(2, DISPLAY_COLS) {
	//_init(*d);
}

void Sys80b_Display::reset() {
    59bc:	b510      	push	{r4, lr}
    59be:	4604      	mov	r4, r0
	currentCol = 0; // current display column
    59c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	currentRow = 0; // current display row
    59c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    59c8:	6343      	str	r3, [r0, #52]	; 0x34
		_valuesCount = 0;
    59ca:	6383      	str	r3, [r0, #56]	; 0x38
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    59cc:	b12a      	cbz	r2, 59da <Sys80b_Display::reset()+0x22>
		unsigned p = _firstPtr + _valuesCount++;
    59ce:	2101      	movs	r1, #1
		if (p >= _size) p -= _size;
		_buff[p] = value;
    59d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    59d2:	f44f 7240 	mov.w	r2, #768	; 0x300
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    59d6:	6381      	str	r1, [r0, #56]	; 0x38
		if (p >= _size) p -= _size;
		_buff[p] = value;
    59d8:	801a      	strh	r2, [r3, #0]
	cmdBuffer.Clear();
	cmdBuffer.put(0x0300u); // reset signal (active low) to both rows
	_sendInitSequence();
    59da:	4620      	mov	r0, r4
    59dc:	f7ff ffcc 	bl	5978 <Sys80b_Display::_sendInitSequence()>
	for (byte i = 0; i < 2; i++) mode[i] = NORMAL;
    59e0:	2300      	movs	r3, #0
    59e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    59e6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    59ea:	bd10      	pop	{r4, pc}

000059ec <TextDisplay::clear()>:
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    59ec:	7e03      	ldrb	r3, [r0, #24]
    59ee:	b1c3      	cbz	r3, 5a22 <TextDisplay::clear()+0x36>
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
    59f0:	b4f0      	push	{r4, r5, r6, r7}
	for (byte i = 0; i < rows; i++) {
    59f2:	2600      	movs	r6, #0
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
    59f4:	2520      	movs	r5, #32
    59f6:	4637      	mov	r7, r6
    59f8:	7e42      	ldrb	r2, [r0, #25]
    59fa:	00b4      	lsls	r4, r6, #2
    59fc:	b142      	cbz	r2, 5a10 <TextDisplay::clear()+0x24>
    59fe:	2300      	movs	r3, #0
    5a00:	6841      	ldr	r1, [r0, #4]
    5a02:	1c5a      	adds	r2, r3, #1
    5a04:	5909      	ldr	r1, [r1, r4]
    5a06:	54cd      	strb	r5, [r1, r3]
    5a08:	b2d3      	uxtb	r3, r2
    5a0a:	7e42      	ldrb	r2, [r0, #25]
    5a0c:	429a      	cmp	r2, r3
    5a0e:	d8f7      	bhi.n	5a00 <TextDisplay::clear()+0x14>
		textRow[i][columns] = 0;
    5a10:	6843      	ldr	r3, [r0, #4]
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    5a12:	3601      	adds	r6, #1
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
    5a14:	591b      	ldr	r3, [r3, r4]
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    5a16:	b2f6      	uxtb	r6, r6
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
    5a18:	549f      	strb	r7, [r3, r2]
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    5a1a:	7e03      	ldrb	r3, [r0, #24]
    5a1c:	42b3      	cmp	r3, r6
    5a1e:	d8eb      	bhi.n	59f8 <TextDisplay::clear()+0xc>
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
	}
}
    5a20:	bcf0      	pop	{r4, r5, r6, r7}
    5a22:	4770      	bx	lr

00005a24 <TextDisplay::TextDisplay(unsigned char, unsigned char)>:
#include "TextDisplay.h"

TextDisplay::TextDisplay(byte rws = MIN_ROWS_COUNT, byte cols = MIN_COLS_COUNT) {
    5a24:	4b20      	ldr	r3, [pc, #128]	; (5aa8 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x84>)
    5a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a2a:	f100 081c 	add.w	r8, r0, #28
    5a2e:	b084      	sub	sp, #16
    5a30:	4605      	mov	r5, r0
    5a32:	460c      	mov	r4, r1
    5a34:	f840 3b08 	str.w	r3, [r0], #8
    5a38:	2100      	movs	r1, #0
    5a3a:	4616      	mov	r6, r2
    5a3c:	f006 fcde 	bl	c3fc <String::String(char const*)>
    5a40:	4640      	mov	r0, r8
    5a42:	2100      	movs	r1, #0
    5a44:	f006 fcda 	bl	c3fc <String::String(char const*)>
	// dimensions check
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
    5a48:	b354      	cbz	r4, 5aa0 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x7c>
    5a4a:	00a0      	lsls	r0, r4, #2
	rows = rws;
    5a4c:	762c      	strb	r4, [r5, #24]
	if (cols == MIN_COLS_COUNT) cols = MIN_COLS_COUNT;
	columns = cols;
    5a4e:	766e      	strb	r6, [r5, #25]
	// creates "empty" display text lines filled with spaces
	textRow = new char*[rows];
    5a50:	f006 fb8c 	bl	c16c <operator new[](unsigned int)>
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
    5a54:	7e2b      	ldrb	r3, [r5, #24]
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
	rows = rws;
	if (cols == MIN_COLS_COUNT) cols = MIN_COLS_COUNT;
	columns = cols;
	// creates "empty" display text lines filled with spaces
	textRow = new char*[rows];
    5a56:	6068      	str	r0, [r5, #4]
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
    5a58:	b17b      	cbz	r3, 5a7a <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x56>
    5a5a:	4606      	mov	r6, r0
    5a5c:	2400      	movs	r4, #0
    5a5e:	e000      	b.n	5a62 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x3e>
    5a60:	686e      	ldr	r6, [r5, #4]
    5a62:	7e68      	ldrb	r0, [r5, #25]
    5a64:	b227      	sxth	r7, r4
    5a66:	3401      	adds	r4, #1
    5a68:	3001      	adds	r0, #1
    5a6a:	f006 fb7f 	bl	c16c <operator new[](unsigned int)>
    5a6e:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
    5a72:	b2e4      	uxtb	r4, r4
    5a74:	7e2b      	ldrb	r3, [r5, #24]
    5a76:	42a3      	cmp	r3, r4
    5a78:	d8f2      	bhi.n	5a60 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x3c>
	clear();
    5a7a:	4628      	mov	r0, r5
    5a7c:	f7ff ffb6 	bl	59ec <TextDisplay::clear()>
	spacesStr = String(textRow[0]); // empty text line string for further use
    5a80:	686b      	ldr	r3, [r5, #4]
    5a82:	4668      	mov	r0, sp
    5a84:	6819      	ldr	r1, [r3, #0]
    5a86:	f006 fcb9 	bl	c3fc <String::String(char const*)>
    5a8a:	4669      	mov	r1, sp
    5a8c:	4640      	mov	r0, r8
    5a8e:	f006 fd5b 	bl	c548 <String::operator=(String&&)>
    5a92:	4668      	mov	r0, sp
    5a94:	f006 fc72 	bl	c37c <String::~String()>
}
    5a98:	4628      	mov	r0, r5
    5a9a:	b004      	add	sp, #16
    5a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aa0:	2004      	movs	r0, #4
#include "TextDisplay.h"

TextDisplay::TextDisplay(byte rws = MIN_ROWS_COUNT, byte cols = MIN_COLS_COUNT) {
	// dimensions check
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
    5aa2:	2401      	movs	r4, #1
    5aa4:	e7d2      	b.n	5a4c <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x28>
    5aa6:	bf00      	nop
    5aa8:	200012ac 	.word	0x200012ac

00005aac <TextDisplay::clearRow(unsigned char)>:
		textRow[i][columns] = 0;
	}
}

void TextDisplay::clearRow(byte row) {
	if (row >= rows) return;
    5aac:	7e03      	ldrb	r3, [r0, #24]
    5aae:	428b      	cmp	r3, r1
    5ab0:	d90e      	bls.n	5ad0 <TextDisplay::clearRow(unsigned char)+0x24>
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
    5ab2:	7e43      	ldrb	r3, [r0, #25]
    5ab4:	b163      	cbz	r3, 5ad0 <TextDisplay::clearRow(unsigned char)+0x24>
    5ab6:	0089      	lsls	r1, r1, #2
    5ab8:	2300      	movs	r3, #0
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
	}
}

void TextDisplay::clearRow(byte row) {
    5aba:	b430      	push	{r4, r5}
	if (row >= rows) return;
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
    5abc:	2520      	movs	r5, #32
    5abe:	6844      	ldr	r4, [r0, #4]
    5ac0:	1c5a      	adds	r2, r3, #1
    5ac2:	5864      	ldr	r4, [r4, r1]
    5ac4:	54e5      	strb	r5, [r4, r3]
    5ac6:	b2d3      	uxtb	r3, r2
    5ac8:	7e42      	ldrb	r2, [r0, #25]
    5aca:	429a      	cmp	r2, r3
    5acc:	d8f7      	bhi.n	5abe <TextDisplay::clearRow(unsigned char)+0x12>
}
    5ace:	bc30      	pop	{r4, r5}
    5ad0:	4770      	bx	lr
    5ad2:	bf00      	nop

00005ad4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>:

// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
    5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (row > rows) return;
    5ad6:	7e04      	ldrb	r4, [r0, #24]
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
}

// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
    5ad8:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if (row > rows) return;
    5adc:	428c      	cmp	r4, r1
    5ade:	d317      	bcc.n	5b10 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    5ae0:	b9bd      	cbnz	r5, 5b12 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
    5ae2:	7e45      	ldrb	r5, [r0, #25]
	if (col > columns) return;
    5ae4:	42aa      	cmp	r2, r5
    5ae6:	d813      	bhi.n	5b10 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
	byte c = col;
	char* tRow = textRow[row];
    5ae8:	6846      	ldr	r6, [r0, #4]
	for (i = 0; srcText[i] != 0 && c < columns; i++) tRow[c++] = srcText[i];
    5aea:	781c      	ldrb	r4, [r3, #0]
	if (row > rows) return;
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
	if (col > columns) return;
	byte c = col;
	char* tRow = textRow[row];
    5aec:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
	for (i = 0; srcText[i] != 0 && c < columns; i++) tRow[c++] = srcText[i];
    5af0:	b174      	cbz	r4, 5b10 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
    5af2:	42aa      	cmp	r2, r5
    5af4:	d20c      	bcs.n	5b10 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
    5af6:	4611      	mov	r1, r2
    5af8:	e002      	b.n	5b00 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x2c>
    5afa:	7e45      	ldrb	r5, [r0, #25]
    5afc:	428d      	cmp	r5, r1
    5afe:	d907      	bls.n	5b10 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
    5b00:	1c4d      	adds	r5, r1, #1
    5b02:	5474      	strb	r4, [r6, r1]
    5b04:	b2e9      	uxtb	r1, r5
    5b06:	1a8c      	subs	r4, r1, r2
    5b08:	b2e4      	uxtb	r4, r4
    5b0a:	5d1c      	ldrb	r4, [r3, r4]
    5b0c:	2c00      	cmp	r4, #0
    5b0e:	d1f4      	bne.n	5afa <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x26>
    5b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
	if (row > rows) return;
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    5b12:	7e45      	ldrb	r5, [r0, #25]
    5b14:	2d00      	cmp	r5, #0
    5b16:	d0e5      	beq.n	5ae4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x10>
    5b18:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    5b1c:	2400      	movs	r4, #0
    5b1e:	2720      	movs	r7, #32
    5b20:	6846      	ldr	r6, [r0, #4]
    5b22:	1c65      	adds	r5, r4, #1
    5b24:	f856 600e 	ldr.w	r6, [r6, lr]
    5b28:	5537      	strb	r7, [r6, r4]
    5b2a:	b2ec      	uxtb	r4, r5
    5b2c:	7e45      	ldrb	r5, [r0, #25]
    5b2e:	42a5      	cmp	r5, r4
    5b30:	d8f6      	bhi.n	5b20 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x4c>
    5b32:	e7d7      	b.n	5ae4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x10>

00005b34 <TextDisplay::setText(unsigned char, char const*, short, bool)>:
}

// Copy <srcText> in <row>-th text buffer, starting from <offset>-th char of <srcText>.
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
    5b34:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (row >= rows) return;
    5b36:	7e04      	ldrb	r4, [r0, #24]
}

// Copy <srcText> in <row>-th text buffer, starting from <offset>-th char of <srcText>.
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
    5b38:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if (row >= rows) return;
    5b3c:	428c      	cmp	r4, r1
    5b3e:	d929      	bls.n	5b94 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
	short i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    5b40:	bb4d      	cbnz	r5, 5b96 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x62>
    5b42:	7e45      	ldrb	r5, [r0, #25]
	if (offset <= -((short)columns)) return; // too large negative offset 
    5b44:	426c      	negs	r4, r5
    5b46:	42a3      	cmp	r3, r4
    5b48:	dd24      	ble.n	5b94 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
	uint16_t ln = 0;
	while (srcText[ln] != 0) ln++;
    5b4a:	7814      	ldrb	r4, [r2, #0]
    5b4c:	b12c      	cbz	r4, 5b5a <TextDisplay::setText(unsigned char, char const*, short, bool)+0x26>
    5b4e:	2400      	movs	r4, #0
    5b50:	3401      	adds	r4, #1
    5b52:	b2a4      	uxth	r4, r4
    5b54:	5d16      	ldrb	r6, [r2, r4]
    5b56:	2e00      	cmp	r6, #0
    5b58:	d1fa      	bne.n	5b50 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x1c>
	if (offset >= ln) return; // too large offset 
    5b5a:	42a3      	cmp	r3, r4
    5b5c:	da1a      	bge.n	5b94 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>

	byte c = 0;
	char* tRow = textRow[row];
    5b5e:	6844      	ldr	r4, [r0, #4]
    5b60:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
	for (i = offset; c < columns; i++) {
    5b64:	b1b5      	cbz	r5, 5b94 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
    5b66:	4619      	mov	r1, r3
    5b68:	2501      	movs	r5, #1
		if (i < 0) tRow[c++] = 32;
    5b6a:	f04f 0e20 	mov.w	lr, #32
    5b6e:	e00a      	b.n	5b86 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x52>
		else {
			if (srcText[i] == 0) break;
    5b70:	5c56      	ldrb	r6, [r2, r1]
    5b72:	b17e      	cbz	r6, 5b94 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
			tRow[c++] = srcText[i];
    5b74:	553e      	strb	r6, [r7, r4]
	while (srcText[ln] != 0) ln++;
	if (offset >= ln) return; // too large offset 

	byte c = 0;
	char* tRow = textRow[row];
	for (i = offset; c < columns; i++) {
    5b76:	7e46      	ldrb	r6, [r0, #25]
    5b78:	3101      	adds	r1, #1
    5b7a:	1c6c      	adds	r4, r5, #1
    5b7c:	42ae      	cmp	r6, r5
    5b7e:	b209      	sxth	r1, r1
    5b80:	b2e4      	uxtb	r4, r4
    5b82:	d907      	bls.n	5b94 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
    5b84:	4625      	mov	r5, r4
    5b86:	1acc      	subs	r4, r1, r3
		if (i < 0) tRow[c++] = 32;
    5b88:	2900      	cmp	r1, #0
    5b8a:	b2e4      	uxtb	r4, r4
    5b8c:	daf0      	bge.n	5b70 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x3c>
    5b8e:	f807 e004 	strb.w	lr, [r7, r4]
    5b92:	e7f0      	b.n	5b76 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x42>
    5b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
	if (row >= rows) return;
	short i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    5b96:	7e45      	ldrb	r5, [r0, #25]
    5b98:	2d00      	cmp	r5, #0
    5b9a:	d0d3      	beq.n	5b44 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x10>
    5b9c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    5ba0:	2400      	movs	r4, #0
    5ba2:	2720      	movs	r7, #32
    5ba4:	6846      	ldr	r6, [r0, #4]
    5ba6:	1c65      	adds	r5, r4, #1
    5ba8:	f856 600e 	ldr.w	r6, [r6, lr]
    5bac:	5537      	strb	r7, [r6, r4]
    5bae:	b22c      	sxth	r4, r5
    5bb0:	7e45      	ldrb	r5, [r0, #25]
    5bb2:	42ac      	cmp	r4, r5
    5bb4:	dbf6      	blt.n	5ba4 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x70>
    5bb6:	e7c5      	b.n	5b44 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x10>

00005bb8 <TextDisplay::scrollLeft(unsigned char)>:
	}
}

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
    5bb8:	7e03      	ldrb	r3, [r0, #24]
    5bba:	428b      	cmp	r3, r1
    5bbc:	d913      	bls.n	5be6 <TextDisplay::scrollLeft(unsigned char)+0x2e>
	byte i;
	char* tRow = textRow[row];
    5bbe:	6842      	ldr	r2, [r0, #4]
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5bc0:	7e43      	ldrb	r3, [r0, #25]

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    5bc2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5bc6:	b17b      	cbz	r3, 5be8 <TextDisplay::scrollLeft(unsigned char)+0x30>
    5bc8:	2300      	movs	r3, #0
		}
	}
}

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
    5bca:	b410      	push	{r4}
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5bcc:	18cc      	adds	r4, r1, r3
    5bce:	1c5a      	adds	r2, r3, #1
    5bd0:	7864      	ldrb	r4, [r4, #1]
    5bd2:	54cc      	strb	r4, [r1, r3]
    5bd4:	b2d3      	uxtb	r3, r2
    5bd6:	7e42      	ldrb	r2, [r0, #25]
    5bd8:	429a      	cmp	r2, r3
    5bda:	d8f7      	bhi.n	5bcc <TextDisplay::scrollLeft(unsigned char)+0x14>
    5bdc:	3a01      	subs	r2, #1
	tRow[columns-1] = ' ';
    5bde:	2320      	movs	r3, #32
    5be0:	548b      	strb	r3, [r1, r2]
}
    5be2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5be6:	4770      	bx	lr
// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5be8:	f04f 32ff 	mov.w	r2, #4294967295
	tRow[columns-1] = ' ';
    5bec:	2320      	movs	r3, #32
    5bee:	548b      	strb	r3, [r1, r2]
    5bf0:	4770      	bx	lr
    5bf2:	bf00      	nop

00005bf4 <TextDisplay::scrollRight(unsigned char)>:
}

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
    5bf4:	7e03      	ldrb	r3, [r0, #24]
    5bf6:	428b      	cmp	r3, r1
    5bf8:	d912      	bls.n	5c20 <TextDisplay::scrollRight(unsigned char)+0x2c>
	byte i;
	char* tRow = textRow[row];
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    5bfa:	7e43      	ldrb	r3, [r0, #25]

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    5bfc:	6842      	ldr	r2, [r0, #4]
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    5bfe:	3b01      	subs	r3, #1

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    5c00:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    5c04:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    5c08:	d007      	beq.n	5c1a <TextDisplay::scrollRight(unsigned char)+0x26>
    5c0a:	18c8      	adds	r0, r1, r3
    5c0c:	1e5a      	subs	r2, r3, #1
    5c0e:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    5c12:	54c8      	strb	r0, [r1, r3]
    5c14:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
    5c18:	d1f7      	bne.n	5c0a <TextDisplay::scrollRight(unsigned char)+0x16>
	tRow[0] = ' ';
    5c1a:	2320      	movs	r3, #32
    5c1c:	700b      	strb	r3, [r1, #0]
    5c1e:	4770      	bx	lr
    5c20:	4770      	bx	lr
    5c22:	bf00      	nop

00005c24 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>:
void TextDisplay::getRowCopy(byte row, String& destStr) {
	if (row >= rows) return;
	destStr.copy((const char*)textRow[row], columns);
}

void TextDisplay::setChar(byte row, byte col, byte ch) {
    5c24:	b410      	push	{r4}
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    5c26:	7e04      	ldrb	r4, [r0, #24]
    5c28:	428c      	cmp	r4, r1
    5c2a:	d906      	bls.n	5c3a <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)+0x16>
    5c2c:	7e44      	ldrb	r4, [r0, #25]
    5c2e:	4294      	cmp	r4, r2
    5c30:	d903      	bls.n	5c3a <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)+0x16>
	if (!validPosition(row, col)) return; 
	textRow[row][col] = ch;
    5c32:	6840      	ldr	r0, [r0, #4]
    5c34:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    5c38:	548b      	strb	r3, [r1, r2]
}
    5c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    5c3e:	4770      	bx	lr

00005c40 <TimerSet::TimerSet()>:
* Contains C++ code.
*/

#include "TimerSet.h"

TimerSet::TimerSet() {
    5c40:	b510      	push	{r4, lr}
    5c42:	2100      	movs	r1, #0
    5c44:	4604      	mov	r4, r0
    5c46:	f006 fbd9 	bl	c3fc <String::String(char const*)>
	_first_timer = nullptr;
    5c4a:	2300      	movs	r3, #0
	_last_timer = nullptr;
	_count = 0;
	_nextTaskId = 0;
}
    5c4c:	4620      	mov	r0, r4
*/

#include "TimerSet.h"

TimerSet::TimerSet() {
	_first_timer = nullptr;
    5c4e:	6123      	str	r3, [r4, #16]
	_last_timer = nullptr;
    5c50:	6163      	str	r3, [r4, #20]
	_count = 0;
    5c52:	7623      	strb	r3, [r4, #24]
	_nextTaskId = 0;
    5c54:	61e3      	str	r3, [r4, #28]
}
    5c56:	bd10      	pop	{r4, pc}

00005c58 <TimerSet::add(TimerTask&)>:
//	Serial.print(_count);
//	Serial.println(")");
//	return true;
//}

int TimerSet::add(TimerTask& tt) {
    5c58:	b510      	push	{r4, lr}
	//Serial.print("Adding timer... ");
	if (&tt == nullptr) {
    5c5a:	2900      	cmp	r1, #0
    5c5c:	d034      	beq.n	5cc8 <TimerSet::add(TimerTask&)+0x70>
    5c5e:	4602      	mov	r2, r0
}

bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
    5c60:	7e00      	ldrb	r0, [r0, #24]
    5c62:	b988      	cbnz	r0, 5c88 <TimerSet::add(TimerTask&)+0x30>
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
    5c64:	2301      	movs	r3, #1
    5c66:	6111      	str	r1, [r2, #16]
    5c68:	7613      	strb	r3, [r2, #24]
	if (_last_timer != nullptr) _last_timer->_next = &tt;
    5c6a:	6953      	ldr	r3, [r2, #20]
    5c6c:	b103      	cbz	r3, 5c70 <TimerSet::add(TimerTask&)+0x18>
    5c6e:	6119      	str	r1, [r3, #16]
	_last_timer = &tt;
	tt._next = nullptr;
	tt.id = _nextTaskId;
    5c70:	69d0      	ldr	r0, [r2, #28]
	}
	Serial.println("_");
}

int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
    5c72:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
    5c76:	2300      	movs	r3, #0
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
    5c78:	6151      	str	r1, [r2, #20]
	}
	Serial.println("_");
}

int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
    5c7a:	42a0      	cmp	r0, r4
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
	tt.id = _nextTaskId;
    5c7c:	6008      	str	r0, [r1, #0]
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
    5c7e:	610b      	str	r3, [r1, #16]
int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
		_nextTaskId = 0;
		return INT32_MAX;
	}
	return _nextTaskId++;
    5c80:	bf18      	it	ne
    5c82:	1c43      	addne	r3, r0, #1
    5c84:	61d3      	str	r3, [r2, #28]
    5c86:	bd10      	pop	{r4, pc}

bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
	tt = _first_timer;
    5c88:	6913      	ldr	r3, [r2, #16]
	while (tt != nullptr) {
    5c8a:	b913      	cbnz	r3, 5c92 <TimerSet::add(TimerTask&)+0x3a>
    5c8c:	e00d      	b.n	5caa <TimerSet::add(TimerTask&)+0x52>
		if (tt == &ttask) return true;
		tt = tt->_next;
    5c8e:	691b      	ldr	r3, [r3, #16]
bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
	tt = _first_timer;
	while (tt != nullptr) {
    5c90:	b15b      	cbz	r3, 5caa <TimerSet::add(TimerTask&)+0x52>
		if (tt == &ttask) return true;
    5c92:	4299      	cmp	r1, r3
    5c94:	d1fb      	bne.n	5c8e <TimerSet::add(TimerTask&)+0x36>
    5c96:	211b      	movs	r1, #27
    5c98:	4810      	ldr	r0, [pc, #64]	; (5cdc <TimerSet::add(TimerTask&)+0x84>)
    5c9a:	f006 f8e7 	bl	be6c <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    5c9e:	4810      	ldr	r0, [pc, #64]	; (5ce0 <TimerSet::add(TimerTask&)+0x88>)
    5ca0:	f006 faa6 	bl	c1f0 <Print::println()>
		Serial.println(F("! Can't add null timertask!"));
		return -1;
	}
	if (contains(tt)) {
		Serial.println(F("! Can't add same timertask!"));
		return -2;
    5ca4:	f06f 0001 	mvn.w	r0, #1
    5ca8:	bd10      	pop	{r4, pc}
	}
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
    5caa:	2812      	cmp	r0, #18
    5cac:	d802      	bhi.n	5cb4 <TimerSet::add(TimerTask&)+0x5c>
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
    5cae:	3001      	adds	r0, #1
    5cb0:	7610      	strb	r0, [r2, #24]
    5cb2:	e7da      	b.n	5c6a <TimerSet::add(TimerTask&)+0x12>
    5cb4:	2123      	movs	r1, #35	; 0x23
    5cb6:	480b      	ldr	r0, [pc, #44]	; (5ce4 <TimerSet::add(TimerTask&)+0x8c>)
    5cb8:	f006 f8d8 	bl	be6c <usb_serial_write>
    5cbc:	4808      	ldr	r0, [pc, #32]	; (5ce0 <TimerSet::add(TimerTask&)+0x88>)
    5cbe:	f006 fa97 	bl	c1f0 <Print::println()>
		return -2;
	}
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
    5cc2:	f06f 0002 	mvn.w	r0, #2
    5cc6:	bd10      	pop	{r4, pc}
    5cc8:	211b      	movs	r1, #27
    5cca:	4807      	ldr	r0, [pc, #28]	; (5ce8 <TimerSet::add(TimerTask&)+0x90>)
    5ccc:	f006 f8ce 	bl	be6c <usb_serial_write>
    5cd0:	4803      	ldr	r0, [pc, #12]	; (5ce0 <TimerSet::add(TimerTask&)+0x88>)
    5cd2:	f006 fa8d 	bl	c1f0 <Print::println()>

int TimerSet::add(TimerTask& tt) {
	//Serial.print("Adding timer... ");
	if (&tt == nullptr) {
		Serial.println(F("! Can't add null timertask!"));
		return -1;
    5cd6:	f04f 30ff 	mov.w	r0, #4294967295
    5cda:	bd10      	pop	{r4, pc}
    5cdc:	200013c4 	.word	0x200013c4
    5ce0:	20001fdc 	.word	0x20001fdc
    5ce4:	200013a0 	.word	0x200013a0
    5ce8:	20001384 	.word	0x20001384

00005cec <TimerSet::add(TimerTask*)>:
	//Serial.println(")");
	return nextTaskId();
}

int TimerSet::add(TimerTask* tt) {
	return add(*tt);
    5cec:	f7ff bfb4 	b.w	5c58 <TimerSet::add(TimerTask&)>

00005cf0 <TimerSet::update(unsigned long&)>:
	return nullptr;
}

// checks all the registered Timertask
// returns: nearest next event time (ms)
uint32_t TimerSet::update(uint32_t& ms) {
    5cf0:	b570      	push	{r4, r5, r6, lr}
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
    5cf2:	7e03      	ldrb	r3, [r0, #24]
    5cf4:	b91b      	cbnz	r3, 5cfe <TimerSet::update(unsigned long&)+0xe>
// returns: nearest next event time (ms)
uint32_t TimerSet::update(uint32_t& ms) {
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
    5cf6:	f04f 35ff 	mov.w	r5, #4294967295
			rt = tt->update(_chkTime);
			if (rt < nextEventT) nextEventT = rt;
		}
	}
	return nextEventT;
}
    5cfa:	4628      	mov	r0, r5
    5cfc:	bd70      	pop	{r4, r5, r6, pc}
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
		_chkTime = ms;
    5cfe:	680b      	ldr	r3, [r1, #0]
		for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    5d00:	6904      	ldr	r4, [r0, #16]
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
		_chkTime = ms;
    5d02:	6203      	str	r3, [r0, #32]
		for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    5d04:	2c00      	cmp	r4, #0
    5d06:	d0f6      	beq.n	5cf6 <TimerSet::update(unsigned long&)+0x6>
    5d08:	f100 0620 	add.w	r6, r0, #32
    5d0c:	f04f 35ff 	mov.w	r5, #4294967295
			rt = tt->update(_chkTime);
    5d10:	4620      	mov	r0, r4
    5d12:	4631      	mov	r1, r6
    5d14:	f000 f81a 	bl	5d4c <TimerTask::update(unsigned long&)>
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
		_chkTime = ms;
		for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    5d18:	6924      	ldr	r4, [r4, #16]
    5d1a:	4285      	cmp	r5, r0
    5d1c:	bf28      	it	cs
    5d1e:	4605      	movcs	r5, r0
    5d20:	2c00      	cmp	r4, #0
    5d22:	d1f5      	bne.n	5d10 <TimerSet::update(unsigned long&)+0x20>
			rt = tt->update(_chkTime);
			if (rt < nextEventT) nextEventT = rt;
		}
	}
	return nextEventT;
}
    5d24:	4628      	mov	r0, r5
    5d26:	bd70      	pop	{r4, r5, r6, pc}

00005d28 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>:
	_enabled = en;
	tag = "";
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
    5d28:	b4f0      	push	{r4, r5, r6, r7}
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
    5d2a:	2600      	movs	r6, #0
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    5d2c:	4d06      	ldr	r5, [pc, #24]	; (5d48 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)+0x20>)
	_enabled = en;
	tag = "";
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
    5d2e:	f89d 7010 	ldrb.w	r7, [sp, #16]
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    5d32:	42b3      	cmp	r3, r6
    5d34:	bf08      	it	eq
    5d36:	462b      	moveq	r3, r5
TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
    5d38:	7206      	strb	r6, [r0, #8]
	_enabled = en;
    5d3a:	7707      	strb	r7, [r0, #28]
	tag = (name == NULL) ? "" : name;
	_next = NULL;
    5d3c:	6106      	str	r6, [r0, #16]
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
    5d3e:	6041      	str	r1, [r0, #4]
	//id = taskId;
	_period = ms;
    5d40:	6182      	str	r2, [r0, #24]
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    5d42:	60c3      	str	r3, [r0, #12]
	_next = NULL;
}
    5d44:	bcf0      	pop	{r4, r5, r6, r7}
    5d46:	4770      	bx	lr
    5d48:	20000af0 	.word	0x20000af0

00005d4c <TimerTask::update(unsigned long&)>:

// Updates Timertask state, checking whether its wait period has expired
// returns: remaining time before trigger [ms] > 0; 0 if not enabled
uint32_t TimerTask::update(uint32_t& chkTime) {
    5d4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t elapsed;

	if (!_enabled) return UINT32_MAX;
    5d4e:	7f03      	ldrb	r3, [r0, #28]
    5d50:	b913      	cbnz	r3, 5d58 <TimerTask::update(unsigned long&)+0xc>
    5d52:	f04f 30ff 	mov.w	r0, #4294967295
		}
		_startTime = chkTime;
		return _period;
	}
	return _period - elapsed;
}
    5d56:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t elapsed;

	if (!_enabled) return UINT32_MAX;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
    5d58:	680a      	ldr	r2, [r1, #0]
    5d5a:	6944      	ldr	r4, [r0, #20]
	if (elapsed >= _period) {
    5d5c:	6983      	ldr	r3, [r0, #24]
	uint32_t elapsed;

	if (!_enabled) return UINT32_MAX;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
    5d5e:	1b12      	subs	r2, r2, r4
	if (elapsed >= _period) {
    5d60:	429a      	cmp	r2, r3
    5d62:	d201      	bcs.n	5d68 <TimerTask::update(unsigned long&)+0x1c>
			return 0;
		}
		_startTime = chkTime;
		return _period;
	}
	return _period - elapsed;
    5d64:	1a98      	subs	r0, r3, r2
    5d66:	bd38      	pop	{r3, r4, r5, pc}
    5d68:	4604      	mov	r4, r0
	if (!_enabled) return UINT32_MAX;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
	if (elapsed >= _period) {
		execObj->timerRoutine(id, chkTime);
    5d6a:	6840      	ldr	r0, [r0, #4]
    5d6c:	460a      	mov	r2, r1
    5d6e:	460d      	mov	r5, r1
    5d70:	6803      	ldr	r3, [r0, #0]
    5d72:	6821      	ldr	r1, [r4, #0]
    5d74:	689b      	ldr	r3, [r3, #8]
    5d76:	4798      	blx	r3
		//if (funct != NULL) (_game->*funct)(chkTime);
		if (oneShot) {
    5d78:	7a23      	ldrb	r3, [r4, #8]
    5d7a:	b113      	cbz	r3, 5d82 <TimerTask::update(unsigned long&)+0x36>
			_enabled = false;
    5d7c:	2000      	movs	r0, #0
    5d7e:	7720      	strb	r0, [r4, #28]
			return 0;
    5d80:	bd38      	pop	{r3, r4, r5, pc}
		}
		_startTime = chkTime;
    5d82:	682b      	ldr	r3, [r5, #0]
		return _period;
    5d84:	69a0      	ldr	r0, [r4, #24]
		//if (funct != NULL) (_game->*funct)(chkTime);
		if (oneShot) {
			_enabled = false;
			return 0;
		}
		_startTime = chkTime;
    5d86:	6163      	str	r3, [r4, #20]
		return _period;
    5d88:	bd38      	pop	{r3, r4, r5, pc}
    5d8a:	bf00      	nop

00005d8c <TimerTask::setPeriod(unsigned long)>:
	Serial.print(_period);
	if (_enabled) Serial.print(",1]"); else Serial.print(",0]");
}

void TimerTask::setPeriod(uint32_t ms) {
	_period = ms;
    5d8c:	6181      	str	r1, [r0, #24]
    5d8e:	4770      	bx	lr

00005d90 <TimerTask::setPeriodic(bool)>:
	_period = ms;
	oneShot = !periodic;
}

void TimerTask::setPeriodic(bool periodic) {
	oneShot = !periodic;
    5d90:	f081 0101 	eor.w	r1, r1, #1
    5d94:	7201      	strb	r1, [r0, #8]
    5d96:	4770      	bx	lr

00005d98 <TimerTask::enable()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    5d98:	4b02      	ldr	r3, [pc, #8]	; (5da4 <TimerTask::enable()+0xc>)
}

void TimerTask::enable() {
	_startTime = millis();
	_enabled = true;
    5d9a:	2201      	movs	r2, #1
    5d9c:	681b      	ldr	r3, [r3, #0]
    5d9e:	7702      	strb	r2, [r0, #28]
void TimerTask::setPeriodic(bool periodic) {
	oneShot = !periodic;
}

void TimerTask::enable() {
	_startTime = millis();
    5da0:	6143      	str	r3, [r0, #20]
    5da2:	4770      	bx	lr
    5da4:	20002d58 	.word	0x20002d58

00005da8 <TimerTask::disable()>:
	_enabled = true;
}

void TimerTask::disable() {
	_enabled = false;
    5da8:	2300      	movs	r3, #0
    5daa:	7703      	strb	r3, [r0, #28]
    5dac:	4770      	bx	lr
    5dae:	bf00      	nop

00005db0 <freeMemory>:
extern "C" char* sbrk(int incr);
#else  // __ARM__
extern char* __brkval;
#endif  // __arm__

int freeMemory() {
    5db0:	b510      	push	{r4, lr}
    5db2:	b082      	sub	sp, #8
    char top;
#ifdef __arm__
    return &top - reinterpret_cast<char*>(sbrk(0));
    5db4:	2000      	movs	r0, #0
    5db6:	f008 f8d7 	bl	df68 <sbrk>
    5dba:	f10d 0407 	add.w	r4, sp, #7
#elif defined(CORE_TEENSY) || (ARDUINO > 103 && ARDUINO != 151)
    return &top - __brkval;
#else  // __arm__
    return __brkval ? &top - __brkval : &top - __malloc_heap_start;
#endif  // __arm__
    5dbe:	1a20      	subs	r0, r4, r0
    5dc0:	b002      	add	sp, #8
    5dc2:	bd10      	pop	{r4, pc}

00005dc4 <Board_Sys80b::Board_Sys80b()>:
#include <SPI.h>
#include <Bounce.h>

#define BOARD_SW_REV F("0.2003")

Board_Sys80b::Board_Sys80b() {	
    5dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dc6:	4d3b      	ldr	r5, [pc, #236]	; (5eb4 <Board_Sys80b::Board_Sys80b()+0xf0>)
    5dc8:	4606      	mov	r6, r0
    5dca:	4604      	mov	r4, r0
    5dcc:	4f3a      	ldr	r7, [pc, #232]	; (5eb8 <Board_Sys80b::Board_Sys80b()+0xf4>)
    5dce:	6828      	ldr	r0, [r5, #0]
    5dd0:	6869      	ldr	r1, [r5, #4]
    5dd2:	68aa      	ldr	r2, [r5, #8]
    5dd4:	68eb      	ldr	r3, [r5, #12]
    5dd6:	f844 7b04 	str.w	r7, [r4], #4
    5dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5ddc:	69eb      	ldr	r3, [r5, #28]
    5dde:	6928      	ldr	r0, [r5, #16]
    5de0:	6969      	ldr	r1, [r5, #20]
    5de2:	69aa      	ldr	r2, [r5, #24]
    5de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5de6:	6a28      	ldr	r0, [r5, #32]
    5de8:	224a      	movs	r2, #74	; 0x4a
    5dea:	f105 0124 	add.w	r1, r5, #36	; 0x24
    5dee:	6270      	str	r0, [r6, #36]	; 0x24
    5df0:	f106 0028 	add.w	r0, r6, #40	; 0x28
    5df4:	f004 fb12 	bl	a41c <memcpy>
    5df8:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    5dfc:	f000 fc44 	bl	6688 <Msg::Msg()>
	// pins setup
	pinMode(SLAM_PIN, INPUT_PULLUP);
    5e00:	2102      	movs	r1, #2
    5e02:	4608      	mov	r0, r1
    5e04:	f004 fdca 	bl	a99c <pinMode>
	pinMode(NEXTB_PIN, INPUT_PULLUP);
    5e08:	2102      	movs	r1, #2
    5e0a:	2003      	movs	r0, #3
    5e0c:	f004 fdc6 	bl	a99c <pinMode>
	pinMode(ENTRB_PIN, INPUT_PULLUP);
    5e10:	2102      	movs	r1, #2
    5e12:	2004      	movs	r0, #4
    5e14:	f004 fdc2 	bl	a99c <pinMode>
	pinMode(BACKB_PIN, INPUT_PULLUP);
    5e18:	2102      	movs	r1, #2
    5e1a:	2005      	movs	r0, #5
    5e1c:	f004 fdbe 	bl	a99c <pinMode>
	pinMode(REV_D0_PIN, INPUT_PULLUP);
    5e20:	2102      	movs	r1, #2
    5e22:	200b      	movs	r0, #11
    5e24:	f004 fdba 	bl	a99c <pinMode>
	pinMode(REV_D1_PIN, INPUT_PULLUP);
    5e28:	2102      	movs	r1, #2
    5e2a:	200c      	movs	r0, #12
    5e2c:	f004 fdb6 	bl	a99c <pinMode>
	pinMode(GPIO_SS_PIN, OUTPUT);
    5e30:	2101      	movs	r1, #1
    5e32:	200e      	movs	r0, #14
    5e34:	f004 fdb2 	bl	a99c <pinMode>
	pinMode(LG_SS_PIN, OUTPUT);
    5e38:	2101      	movs	r1, #1
    5e3a:	200f      	movs	r0, #15
    5e3c:	f004 fdae 	bl	a99c <pinMode>
	pinMode(SD_SS_PIN, OUTPUT);
    5e40:	2101      	movs	r1, #1
    5e42:	200a      	movs	r0, #10
    5e44:	f004 fdaa 	bl	a99c <pinMode>
	pinMode(D_LD1_PIN, OUTPUT);
    5e48:	2101      	movs	r1, #1
    5e4a:	2010      	movs	r0, #16
    5e4c:	f004 fda6 	bl	a99c <pinMode>
	pinMode(D_LD2_PIN, OUTPUT);
    5e50:	2101      	movs	r1, #1
    5e52:	2011      	movs	r0, #17
    5e54:	f004 fda2 	bl	a99c <pinMode>
	pinMode(D_RES_PIN, OUTPUT);
    5e58:	2101      	movs	r1, #1
    5e5a:	2012      	movs	r0, #18
    5e5c:	f004 fd9e 	bl	a99c <pinMode>
	digitalWrite(GPIO_SS_PIN, HIGH);
    5e60:	2101      	movs	r1, #1
    5e62:	200e      	movs	r0, #14
    5e64:	f004 fd8e 	bl	a984 <digitalWrite>
	digitalWrite(LG_SS_PIN, HIGH);
    5e68:	2101      	movs	r1, #1
    5e6a:	200f      	movs	r0, #15
    5e6c:	f004 fd8a 	bl	a984 <digitalWrite>
	digitalWrite(SD_SS_PIN, HIGH);
    5e70:	2101      	movs	r1, #1
    5e72:	200a      	movs	r0, #10
    5e74:	f004 fd86 	bl	a984 <digitalWrite>
	digitalWrite(D_LD1_PIN, LOW);
    5e78:	2100      	movs	r1, #0
    5e7a:	2010      	movs	r0, #16
    5e7c:	f004 fd82 	bl	a984 <digitalWrite>
	digitalWrite(D_LD2_PIN, LOW);
    5e80:	2100      	movs	r1, #0
    5e82:	2011      	movs	r0, #17
    5e84:	f004 fd7e 	bl	a984 <digitalWrite>
	digitalWrite(D_RES_PIN, LOW);
    5e88:	2100      	movs	r1, #0
    5e8a:	2012      	movs	r0, #18
    5e8c:	f004 fd7a 	bl	a984 <digitalWrite>

	Serial.begin(SERIAL_BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    5e90:	2008      	movs	r0, #8
    5e92:	f006 f969 	bl	c168 <operator new(unsigned int)>
	_poc = 0;
    5e96:	2200      	movs	r2, #0
	digitalWrite(D_LD1_PIN, LOW);
	digitalWrite(D_LD2_PIN, LOW);
	digitalWrite(D_RES_PIN, LOW);

	Serial.begin(SERIAL_BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    5e98:	4603      	mov	r3, r0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5e9a:	2107      	movs	r1, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    5e9c:	4807      	ldr	r0, [pc, #28]	; (5ebc <Board_Sys80b::Board_Sys80b()+0xf8>)
    5e9e:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
    5ea2:	6018      	str	r0, [r3, #0]
	_poc = 0;
	_lcd = nullptr;
}
    5ea4:	4630      	mov	r0, r6
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5ea6:	6059      	str	r1, [r3, #4]
	digitalWrite(D_LD2_PIN, LOW);
	digitalWrite(D_RES_PIN, LOW);

	Serial.begin(SERIAL_BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
	_poc = 0;
    5ea8:	f8a6 20ee 	strh.w	r2, [r6, #238]	; 0xee
	_lcd = nullptr;
    5eac:	f8c6 20f0 	str.w	r2, [r6, #240]	; 0xf0
}
    5eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5eb2:	bf00      	nop
    5eb4:	20001408 	.word	0x20001408
    5eb8:	20001478 	.word	0x20001478
    5ebc:	000186a0 	.word	0x000186a0

00005ec0 <Board_Sys80b::~Board_Sys80b()>:

Board_Sys80b::~Board_Sys80b() {
    5ec0:	b538      	push	{r3, r4, r5, lr}
    5ec2:	4604      	mov	r4, r0
	//delete lcd;
	delete ledGrid;
    5ec4:	2110      	movs	r1, #16
    5ec6:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    5eca:	f006 f953 	bl	c174 <operator delete(void*, unsigned int)>
	delete nextButton;
    5ece:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    5ed0:	2110      	movs	r1, #16
    5ed2:	f006 f94f 	bl	c174 <operator delete(void*, unsigned int)>
	delete enterButton;
    5ed6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5ed8:	2110      	movs	r1, #16
    5eda:	f006 f94b 	bl	c174 <operator delete(void*, unsigned int)>
	delete backButton;
    5ede:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    5ee2:	2110      	movs	r1, #16
    5ee4:	f006 f946 	bl	c174 <operator delete(void*, unsigned int)>
	delete _spiSettings;
    5ee8:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    5eec:	2108      	movs	r1, #8
    5eee:	f006 f941 	bl	c174 <operator delete(void*, unsigned int)>
	delete NVData;
    5ef2:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    5ef6:	b135      	cbz	r5, 5f06 <Board_Sys80b::~Board_Sys80b()+0x46>
    5ef8:	4628      	mov	r0, r5
    5efa:	f001 fa7b 	bl	73f4 <NVData_class::~NVData_class()>
    5efe:	4628      	mov	r0, r5
    5f00:	2164      	movs	r1, #100	; 0x64
    5f02:	f006 f937 	bl	c174 <operator delete(void*, unsigned int)>

#include "Arduino.h"

class LiquidCrystalFast;

class Msg {
    5f06:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    5f0a:	f006 fa37 	bl	c37c <String::~String()>
    5f0e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    5f12:	f006 fa33 	bl	c37c <String::~String()>
}
    5f16:	4620      	mov	r0, r4
    5f18:	bd38      	pop	{r3, r4, r5, pc}
    5f1a:	bf00      	nop

00005f1c <Board_Sys80b::outputReset()>:
	//delay(100);

	return true;
}

void Board_Sys80b::outputReset() {
    5f1c:	b570      	push	{r4, r5, r6, lr}
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    void writeDisplayLD(byte b);
    inline void writeDisplayLD1(bool b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); } 
    inline void writeDisplayLD2(bool b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    5f1e:	2100      	movs	r1, #0
    5f20:	4605      	mov	r5, r0
    5f22:	1c84      	adds	r4, r0, #2
    5f24:	f100 061a 	add.w	r6, r0, #26
    5f28:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    5f2c:	f001 fc58 	bl	77e0 <PIO::mcpWrite(unsigned short)>
//}

// adr = 0..11
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
    5f30:	f834 1f02 	ldrh.w	r1, [r4, #2]!
    5f34:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5f38:	0109      	lsls	r1, r1, #4
    5f3a:	b289      	uxth	r1, r1
    5f3c:	f001 fc50 	bl	77e0 <PIO::mcpWrite(unsigned short)>
	return true;
}

void Board_Sys80b::outputReset() {
	writeSolenoids(0);
	for (int i = 0; i < 12; i++) write4Lamps(i, 0);
    5f40:	42b4      	cmp	r4, r6
    5f42:	d1f5      	bne.n	5f30 <Board_Sys80b::outputReset()+0x14>
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
    5f44:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
    5f48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
    5f4c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5f50:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
    5f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	_lcd->setCursor(col, line);
	_lcd->print(st);
}

void Board_Sys80b::writeDisplayAndSoundReset(bool b) {
	if (_revision == 0) digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    5f58:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
    5f5c:	b91a      	cbnz	r2, 5f66 <Board_Sys80b::outputReset()+0x4a>
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
			} else if (pin == 18) {
				CORE_PIN18_PORTCLEAR = CORE_PIN18_BITMASK;
    5f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	displayAndSound_IO->mcpWritePB(b ? 0x7f : 0xff); // "sound" output 8th bit active LOW
    5f66:	217f      	movs	r1, #127	; 0x7f
    5f68:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    5f6c:	f001 fe3c 	bl	7be8 <PIO::mcpWritePB(unsigned char)>
void Board_Sys80b::outputReset() {
	writeSolenoids(0);
	for (int i = 0; i < 12; i++) write4Lamps(i, 0);
	writeDisplayLD(3u);
	writeDisplayAndSoundReset(true);
	delay(50);
    5f70:	2032      	movs	r0, #50	; 0x32
    5f72:	f004 fc4f 	bl	a814 <delay>
    void lcdprn(byte line, String& st, byte col = 0);

    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    5f76:	218f      	movs	r1, #143	; 0x8f
    5f78:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    5f7c:	f001 fe34 	bl	7be8 <PIO::mcpWritePB(unsigned char)>
	_lcd->setCursor(col, line);
	_lcd->print(st);
}

void Board_Sys80b::writeDisplayAndSoundReset(bool b) {
	if (_revision == 0) digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    5f80:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
    5f84:	b92b      	cbnz	r3, 5f92 <Board_Sys80b::outputReset()+0x76>
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
			} else if (pin == 18) {
				CORE_PIN18_PORTSET = CORE_PIN18_BITMASK;
    5f86:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	displayAndSound_IO->mcpWritePB(b ? 0x7f : 0xff); // "sound" output 8th bit active LOW
    5f92:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    5f96:	21ff      	movs	r1, #255	; 0xff
	writeDisplayLD(3u);
	writeDisplayAndSoundReset(true);
	delay(50);
	writeSound(0xf); // reset sound output (active low)
	writeDisplayAndSoundReset(false);
}
    5f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_lcd->print(st);
}

void Board_Sys80b::writeDisplayAndSoundReset(bool b) {
	if (_revision == 0) digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
	displayAndSound_IO->mcpWritePB(b ? 0x7f : 0xff); // "sound" output 8th bit active LOW
    5f9c:	f001 be24 	b.w	7be8 <PIO::mcpWritePB(unsigned char)>

00005fa0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>:
	if (_lcd == nullptr) return;
	_lcd->setCursor(col, line);
	_lcd->print(st);
}

void Board_Sys80b::lcdprn(byte line, const __FlashStringHelper* st, byte col) {
    5fa0:	b570      	push	{r4, r5, r6, lr}
	if (_lcd == nullptr) return;
    5fa2:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    5fa6:	b19e      	cbz	r6, 5fd0 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)+0x30>
    5fa8:	4604      	mov	r4, r0
    5faa:	4615      	mov	r5, r2
	_lcd->setCursor(col, line);
    5fac:	4630      	mov	r0, r6
    5fae:	460a      	mov	r2, r1
    5fb0:	4619      	mov	r1, r3
    5fb2:	f003 ffab 	bl	9f0c <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	_lcd->print(st);
    5fb6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5fba:	4628      	mov	r0, r5
    5fbc:	f007 fe80 	bl	dcc0 <strlen>
    5fc0:	6823      	ldr	r3, [r4, #0]
    5fc2:	4602      	mov	r2, r0
    5fc4:	4629      	mov	r1, r5
    5fc6:	4620      	mov	r0, r4
    5fc8:	685b      	ldr	r3, [r3, #4]
}
    5fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5fce:	4718      	bx	r3
    5fd0:	bd70      	pop	{r4, r5, r6, pc}
    5fd2:	bf00      	nop

00005fd4 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>:

void Board_Sys80b::lcdprn(byte line, String& st, byte col) {
    5fd4:	b570      	push	{r4, r5, r6, lr}
	if (_lcd == nullptr) return;
    5fd6:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    5fda:	b16e      	cbz	r6, 5ff8 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)+0x24>
    5fdc:	4615      	mov	r5, r2
    5fde:	4604      	mov	r4, r0
    5fe0:	460a      	mov	r2, r1
	_lcd->setCursor(col, line);
    5fe2:	4630      	mov	r0, r6
    5fe4:	4619      	mov	r1, r3
    5fe6:	f003 ff91 	bl	9f0c <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	_lcd->print(st);
    5fea:	4629      	mov	r1, r5
    5fec:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
}
    5ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void Board_Sys80b::lcdprn(byte line, String& st, byte col) {
	if (_lcd == nullptr) return;
	_lcd->setCursor(col, line);
	_lcd->print(st);
    5ff4:	f006 b8d6 	b.w	c1a4 <Print::print(String const&)>
    5ff8:	bd70      	pop	{r4, r5, r6, pc}
    5ffa:	bf00      	nop

00005ffc <Board_Sys80b::readButtons()>:
void Board_Sys80b::writeDisplayLD(byte b) {
	digitalWriteFast(D_LD1_PIN, ((b & 1) ? HIGH : LOW));
	digitalWriteFast(D_LD2_PIN, ((b & 2) ? HIGH : LOW));
}

Button Board_Sys80b::readButtons() {
    5ffc:	b510      	push	{r4, lr}
    5ffe:	4604      	mov	r4, r0
	//nextButton->update();
	//enterButton->update();
	//backButton->update();
	if (nextButton->read()) return NEXT_BUTT;
    6000:	6f80      	ldr	r0, [r0, #120]	; 0x78
    6002:	f004 f9cf 	bl	a3a4 <Bounce::read()>
    6006:	b108      	cbz	r0, 600c <Board_Sys80b::readButtons()+0x10>
    6008:	2003      	movs	r0, #3
    600a:	bd10      	pop	{r4, pc}
	if (enterButton->read()) return ENTER_BUTT;
    600c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    600e:	f004 f9c9 	bl	a3a4 <Bounce::read()>
    6012:	b108      	cbz	r0, 6018 <Board_Sys80b::readButtons()+0x1c>
    6014:	2002      	movs	r0, #2
	if (backButton->read()) return BACK_BUTT;
	return NONE_BUTT;
}
    6016:	bd10      	pop	{r4, pc}
	//nextButton->update();
	//enterButton->update();
	//backButton->update();
	if (nextButton->read()) return NEXT_BUTT;
	if (enterButton->read()) return ENTER_BUTT;
	if (backButton->read()) return BACK_BUTT;
    6018:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    601c:	f004 f9c2 	bl	a3a4 <Bounce::read()>

Button Board_Sys80b::readButtons() {
	//nextButton->update();
	//enterButton->update();
	//backButton->update();
	if (nextButton->read()) return NEXT_BUTT;
    6020:	3000      	adds	r0, #0
    6022:	bf18      	it	ne
    6024:	2001      	movne	r0, #1
    6026:	bd10      	pop	{r4, pc}

00006028 <Board_Sys80b::readButtonsChange()>:
	if (enterButton->read()) return ENTER_BUTT;
	if (backButton->read()) return BACK_BUTT;
	return NONE_BUTT;
}

bool Board_Sys80b::readButtonsChange() {
    6028:	b510      	push	{r4, lr}
    602a:	4604      	mov	r4, r0
	//if (nextButton->update()) return true;
	//if (enterButton->update()) return true;
	//if (backButton->update()) return true;
	//return false;

	return (nextButton->update() || enterButton->update()  || backButton->update());
    602c:	6f80      	ldr	r0, [r0, #120]	; 0x78
    602e:	f004 f9d5 	bl	a3dc <Bounce::update()>
    6032:	b108      	cbz	r0, 6038 <Board_Sys80b::readButtonsChange()+0x10>
    6034:	2001      	movs	r0, #1
    6036:	bd10      	pop	{r4, pc}
    6038:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    603a:	f004 f9cf 	bl	a3dc <Bounce::update()>
    603e:	2800      	cmp	r0, #0
    6040:	d1f8      	bne.n	6034 <Board_Sys80b::readButtonsChange()+0xc>
    6042:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    6046:	f004 f9c9 	bl	a3dc <Bounce::update()>
    604a:	3000      	adds	r0, #0
    604c:	bf18      	it	ne
    604e:	2001      	movne	r0, #1
}
    6050:	bd10      	pop	{r4, pc}
    6052:	bf00      	nop

00006054 <Board_Sys80b::_readHwRev()>:

byte Board_Sys80b::_readHwRev() {
    6054:	b510      	push	{r4, lr}
	byte rev = 0;
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
    6056:	200b      	movs	r0, #11
    6058:	f004 fc9a 	bl	a990 <digitalRead>

	return (nextButton->update() || enterButton->update()  || backButton->update());
}

byte Board_Sys80b::_readHwRev() {
	byte rev = 0;
    605c:	fab0 f480 	clz	r4, r0
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
	if (digitalRead(REV_D1_PIN) == LOW) rev += 2;
    6060:	200c      	movs	r0, #12

	return (nextButton->update() || enterButton->update()  || backButton->update());
}

byte Board_Sys80b::_readHwRev() {
	byte rev = 0;
    6062:	0964      	lsrs	r4, r4, #5
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
	if (digitalRead(REV_D1_PIN) == LOW) rev += 2;
    6064:	f004 fc94 	bl	a990 <digitalRead>
    6068:	b908      	cbnz	r0, 606e <Board_Sys80b::_readHwRev()+0x1a>
    606a:	3402      	adds	r4, #2
    606c:	b2e4      	uxtb	r4, r4
	return rev;
}
    606e:	4620      	mov	r0, r4
    6070:	bd10      	pop	{r4, pc}
    6072:	bf00      	nop

00006074 <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>:
//	digitalWriteFast(D_LD2_PIN, ((adr & 2) != 0) ? HIGH : LOW);
//}

// adr = 0..11
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
    6074:	290b      	cmp	r1, #11
    6076:	d900      	bls.n	607a <Board_Sys80b::write4Lamps(unsigned char, unsigned char)+0x6>
    6078:	4770      	bx	lr
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
    607a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    607e:	f002 020f 	and.w	r2, r2, #15
    6082:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
    6086:	8889      	ldrh	r1, [r1, #4]
    6088:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    608c:	b289      	uxth	r1, r1
    608e:	f001 bba7 	b.w	77e0 <PIO::mcpWrite(unsigned short)>
    6092:	bf00      	nop

00006094 <Board_Sys80b::restoreFactorySettings(bool)>:
}

void Board_Sys80b::restoreFactorySettings(bool immediateUpdate) {
    6094:	b570      	push	{r4, r5, r6, lr}
	msg.out(F("* Restoring factory settings... "));
    6096:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
}

void Board_Sys80b::restoreFactorySettings(bool immediateUpdate) {
    609a:	4604      	mov	r4, r0
    609c:	460e      	mov	r6, r1
	msg.out(F("* Restoring factory settings... "));
    609e:	4910      	ldr	r1, [pc, #64]	; (60e0 <Board_Sys80b::restoreFactorySettings(bool)+0x4c>)
    60a0:	4628      	mov	r0, r5
    60a2:	f000 fd05 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
	//NVData->clearAll();
	NVData->writeBytes(2u, factoryStatsBytes, 74);
    60a6:	f104 0228 	add.w	r2, r4, #40	; 0x28
    60aa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    60ae:	234a      	movs	r3, #74	; 0x4a
    60b0:	2102      	movs	r1, #2
    60b2:	f001 f88f 	bl	71d4 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)>
	NVData->writeBytes(SETTINGS_ADR, factorySettingsOpSw, 4);
    60b6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    60ba:	2164      	movs	r1, #100	; 0x64
    60bc:	f104 0224 	add.w	r2, r4, #36	; 0x24
    60c0:	2304      	movs	r3, #4
    60c2:	f001 f887 	bl	71d4 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)>
	msg.outln(F("ok."));
    60c6:	4628      	mov	r0, r5
    60c8:	4906      	ldr	r1, [pc, #24]	; (60e4 <Board_Sys80b::restoreFactorySettings(bool)+0x50>)
    60ca:	f000 fb85 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	if (immediateUpdate) NVData->update();
    60ce:	b906      	cbnz	r6, 60d2 <Board_Sys80b::restoreFactorySettings(bool)+0x3e>
    60d0:	bd70      	pop	{r4, r5, r6, pc}
    60d2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
}
    60d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg.out(F("* Restoring factory settings... "));
	//NVData->clearAll();
	NVData->writeBytes(2u, factoryStatsBytes, 74);
	NVData->writeBytes(SETTINGS_ADR, factorySettingsOpSw, 4);
	msg.outln(F("ok."));
	if (immediateUpdate) NVData->update();
    60da:	f001 b961 	b.w	73a0 <NVData_class::update()>
    60de:	bf00      	nop
    60e0:	20001488 	.word	0x20001488
    60e4:	200014ac 	.word	0x200014ac

000060e8 <Board_Sys80b::incrementPowerOnCounter()>:
	delay(50);
	writeSound(0xf); // reset sound output (active low)
	writeDisplayAndSoundReset(false);
}

uint16_t Board_Sys80b::incrementPowerOnCounter() {
    60e8:	b538      	push	{r3, r4, r5, lr}
    60ea:	4605      	mov	r5, r0
	if (!NVData->ready()) {
    60ec:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    60f0:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
    60f4:	b18c      	cbz	r4, 611a <Board_Sys80b::incrementPowerOnCounter()+0x32>
		msg.warn(F("NVData not available!"), CLASS_NAME, "incrementPowerOnCounter");
		return 0;
	}
	uint16_t poc = NVData->readWord(0);
    60f6:	2100      	movs	r1, #0
    60f8:	f000 ff50 	bl	6f9c <NVData_class::readWord(unsigned short)>
	if (poc++ == 0) restoreFactorySettings(false); // on first bootup only
    60fc:	1c44      	adds	r4, r0, #1
    60fe:	b2a4      	uxth	r4, r4
    6100:	b1a0      	cbz	r0, 612c <Board_Sys80b::incrementPowerOnCounter()+0x44>
	NVData->writeWord(0, poc);
    6102:	4622      	mov	r2, r4
    6104:	2100      	movs	r1, #0
    6106:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    610a:	f001 f901 	bl	7310 <NVData_class::writeWord(unsigned short, unsigned short)>
	NVData->update();
    610e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    6112:	f001 f945 	bl	73a0 <NVData_class::update()>
	if (!NVData->ready()) {
		msg.warn(F("NVData not available!"), CLASS_NAME, "incrementPowerOnCounter");
		return 0;
	}
	uint16_t poc = NVData->readWord(0);
	if (poc++ == 0) restoreFactorySettings(false); // on first bootup only
    6116:	4620      	mov	r0, r4
	NVData->writeWord(0, poc);
	NVData->update();
	return poc;
}
    6118:	bd38      	pop	{r3, r4, r5, pc}
	writeDisplayAndSoundReset(false);
}

uint16_t Board_Sys80b::incrementPowerOnCounter() {
	if (!NVData->ready()) {
		msg.warn(F("NVData not available!"), CLASS_NAME, "incrementPowerOnCounter");
    611a:	4628      	mov	r0, r5
    611c:	4b06      	ldr	r3, [pc, #24]	; (6138 <Board_Sys80b::incrementPowerOnCounter()+0x50>)
    611e:	4907      	ldr	r1, [pc, #28]	; (613c <Board_Sys80b::incrementPowerOnCounter()+0x54>)
    6120:	f850 2ba0 	ldr.w	r2, [r0], #160
    6124:	f000 fc24 	bl	6970 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>
    6128:	4620      	mov	r0, r4
    612a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
	}
	uint16_t poc = NVData->readWord(0);
	if (poc++ == 0) restoreFactorySettings(false); // on first bootup only
    612c:	4601      	mov	r1, r0
    612e:	4628      	mov	r0, r5
    6130:	f7ff ffb0 	bl	6094 <Board_Sys80b::restoreFactorySettings(bool)>
    6134:	e7e5      	b.n	6102 <Board_Sys80b::incrementPowerOnCounter()+0x1a>
    6136:	bf00      	nop
    6138:	200014b0 	.word	0x200014b0
    613c:	200014c8 	.word	0x200014c8

00006140 <Board_Sys80b::begin()>:
	delete backButton;
	delete _spiSettings;
	delete NVData;
}

bool Board_Sys80b::begin() {
    6140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6144:	4604      	mov	r4, r0
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
	inline void enableSerialOutput() { serialOutputEnabled = true; }
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    6146:	4605      	mov	r5, r0
	inline void disableLogOutput() { logFileEnabled = false; }
	inline void setPostDelay(uint16_t delay) { mdelay = delay; }
    6148:	2600      	movs	r6, #0
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
	inline void enableSerialOutput() { serialOutputEnabled = true; }
    614a:	2701      	movs	r7, #1
    614c:	b083      	sub	sp, #12
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    614e:	f855 1fa0 	ldr.w	r1, [r5, #160]!
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
	inline void enableSerialOutput() { serialOutputEnabled = true; }
    6152:	f880 70bf 	strb.w	r7, [r0, #191]	; 0xbf
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    6156:	30c8      	adds	r0, #200	; 0xc8
	inline void disableLogOutput() { logFileEnabled = false; }
	inline void setPostDelay(uint16_t delay) { mdelay = delay; }
    6158:	f820 6c0c 	strh.w	r6, [r0, #-12]
		lcd = &lcdispl; lcdOutputEnabled = true; 
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
    615c:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
	inline void enableSerialOutput() { serialOutputEnabled = true; }
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    6160:	f006 f9fa 	bl	c558 <String::operator=(char const*)>
    6164:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
	const char* hdr = "begin";
	msg.enableSerialOutput();
	msg.setPostDelay(0);
	msg.disableLCDOutput();
	msg.enableLogOutput();
	msg.normalOutputToLog = false;
    6168:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
	_revision = _readHwRev();
    616c:	4620      	mov	r0, r4
    616e:	f7ff ff71 	bl	6054 <Board_Sys80b::_readHwRev()>
	msg.out(F("Starting board rev."));
    6172:	4983      	ldr	r1, [pc, #524]	; (6380 <Board_Sys80b::begin()+0x240>)
	msg.enableSerialOutput();
	msg.setPostDelay(0);
	msg.disableLCDOutput();
	msg.enableLogOutput();
	msg.normalOutputToLog = false;
	_revision = _readHwRev();
    6174:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
	msg.out(F("Starting board rev."));
    6178:	4628      	mov	r0, r5
    617a:	f000 fc99 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
	msg.outln(_revision);
    617e:	220a      	movs	r2, #10
    6180:	4628      	mov	r0, r5
    6182:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    6186:	f000 fb59 	bl	683c <Msg::outln(unsigned long, int)>
	//delay(100);

	// SPI init
	msg.outln(F("- SPI init..."));
    618a:	497e      	ldr	r1, [pc, #504]	; (6384 <Board_Sys80b::begin()+0x244>)
    618c:	4628      	mov	r0, r5
    618e:	f000 fb23 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	SPI.begin();
    6192:	487d      	ldr	r0, [pc, #500]	; (6388 <Board_Sys80b::begin()+0x248>)
    6194:	f003 ffe6 	bl	a164 <SPIClass::begin()>
	//delay(100);

	// SD init
	msg.outln(F("- SD init..."));
    6198:	4628      	mov	r0, r5
    619a:	497c      	ldr	r1, [pc, #496]	; (638c <Board_Sys80b::begin()+0x24c>)
    619c:	f000 fb1c 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	if (!SD.begin(SD_SS_PIN)) {
    61a0:	210a      	movs	r1, #10
    61a2:	487b      	ldr	r0, [pc, #492]	; (6390 <Board_Sys80b::begin()+0x250>)
    61a4:	f001 fee2 	bl	7f6c <SDClass::begin(unsigned char)>
    61a8:	4681      	mov	r9, r0
    61aa:	2800      	cmp	r0, #0
    61ac:	f000 80ce 	beq.w	634c <Board_Sys80b::begin()+0x20c>
		return false;
	}
	//delay(100);

	// PIO init (Parallel Input/Output)
	msg.outln(F("- PIOs init..."));
    61b0:	4978      	ldr	r1, [pc, #480]	; (6394 <Board_Sys80b::begin()+0x254>)
    61b2:	4628      	mov	r0, r5
    61b4:	f000 fb10 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	solenoids_IO = new PIO(_spiSettings, GPIO_SS_PIN, 0, 0x0000); // all 16 pins set as output
    61b8:	2008      	movs	r0, #8
    61ba:	f005 ffd5 	bl	c168 <operator new(unsigned int)>
    61be:	4680      	mov	r8, r0
    61c0:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    61c4:	4633      	mov	r3, r6
    61c6:	220e      	movs	r2, #14
    61c8:	9600      	str	r6, [sp, #0]
    61ca:	f001 fbfd 	bl	79c8 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    61ce:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
	lamps_IO = new PIO(_spiSettings, GPIO_SS_PIN, 1, 0x0000); // all 16 pins set as output
    61d2:	2008      	movs	r0, #8
    61d4:	f005 ffc8 	bl	c168 <operator new(unsigned int)>
    61d8:	4680      	mov	r8, r0
    61da:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    61de:	463b      	mov	r3, r7
    61e0:	220e      	movs	r2, #14
    61e2:	9600      	str	r6, [sp, #0]
    61e4:	f001 fbf0 	bl	79c8 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    61e8:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
	switchMatrix_IO = new PIO(_spiSettings, GPIO_SS_PIN, 2, 0xff00); // 8 bits output + 8 bits input
    61ec:	2008      	movs	r0, #8
    61ee:	f005 ffbb 	bl	c168 <operator new(unsigned int)>
    61f2:	f44f 4e7f 	mov.w	lr, #65280	; 0xff00
    61f6:	4680      	mov	r8, r0
    61f8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    61fc:	2302      	movs	r3, #2
    61fe:	f8cd e000 	str.w	lr, [sp]
    6202:	220e      	movs	r2, #14
    6204:	f001 fbe0 	bl	79c8 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    6208:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
	displayAndSound_IO = new PIO(_spiSettings, GPIO_SS_PIN, 3, 0x0000); // all 16 pins set as output
    620c:	2008      	movs	r0, #8
    620e:	f005 ffab 	bl	c168 <operator new(unsigned int)>
    6212:	4680      	mov	r8, r0
    6214:	2303      	movs	r3, #3
    6216:	220e      	movs	r2, #14
    6218:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    621c:	9600      	str	r6, [sp, #0]
    621e:	f001 fbd3 	bl	79c8 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    6222:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	outputReset(); // hardware immediate resets
    6226:	4620      	mov	r0, r4
    6228:	f7ff fe78 	bl	5f1c <Board_Sys80b::outputReset()>
	//delay(100);

	msg.outln(F("- Buttons init..."));
    622c:	495a      	ldr	r1, [pc, #360]	; (6398 <Board_Sys80b::begin()+0x258>)
    622e:	4628      	mov	r0, r5
    6230:	f000 fad2 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	nextButton = new Bounce(NEXTB_PIN, DEBOUNCE_T);
    6234:	2010      	movs	r0, #16
    6236:	f005 ff97 	bl	c168 <operator new(unsigned int)>
    623a:	4680      	mov	r8, r0
    623c:	2264      	movs	r2, #100	; 0x64
    623e:	2103      	movs	r1, #3
    6240:	f004 f89e 	bl	a380 <Bounce::Bounce(unsigned char, unsigned long)>
    6244:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
    6248:	2010      	movs	r0, #16
    624a:	f005 ff8d 	bl	c168 <operator new(unsigned int)>
    624e:	4680      	mov	r8, r0
    6250:	2264      	movs	r2, #100	; 0x64
    6252:	2104      	movs	r1, #4
    6254:	f004 f894 	bl	a380 <Bounce::Bounce(unsigned char, unsigned long)>
    6258:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
    625c:	2010      	movs	r0, #16
    625e:	f005 ff83 	bl	c168 <operator new(unsigned int)>
    6262:	4680      	mov	r8, r0
    6264:	2264      	movs	r2, #100	; 0x64
    6266:	2105      	movs	r1, #5
    6268:	f004 f88a 	bl	a380 <Bounce::Bounce(unsigned char, unsigned long)>
	//delay(100);

	msg.out(F("- NVRAM init... "));
    626c:	494b      	ldr	r1, [pc, #300]	; (639c <Board_Sys80b::begin()+0x25c>)
	//delay(100);

	msg.outln(F("- Buttons init..."));
	nextButton = new Bounce(NEXTB_PIN, DEBOUNCE_T);
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
    626e:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
	//delay(100);

	msg.out(F("- NVRAM init... "));
    6272:	4628      	mov	r0, r5
    6274:	f000 fc1c 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
	NVData = new NVData_class();
    6278:	2064      	movs	r0, #100	; 0x64
    627a:	f005 ff75 	bl	c168 <operator new(unsigned int)>
    627e:	4680      	mov	r8, r0
    6280:	f000 fc6e 	bl	6b60 <NVData_class::NVData_class()>
	NVData->immediateWriteMode = false;
	//NVData->begin(NVData->EEPROM_NVD, 128, SD_SS_PIN);
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
    6284:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
	//delay(100);

	msg.out(F("- NVRAM init... "));
	NVData = new NVData_class();
    6288:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
	NVData->immediateWriteMode = false;
    628c:	f888 602d 	strb.w	r6, [r8, #45]	; 0x2d
	//NVData->begin(NVData->EEPROM_NVD, 128, SD_SS_PIN);
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
    6290:	2b00      	cmp	r3, #0
    6292:	d06c      	beq.n	636e <Board_Sys80b::begin()+0x22e>
    6294:	4643      	mov	r3, r8
	if (NVData->ready()) {
    6296:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    629a:	2b00      	cmp	r3, #0
    629c:	d060      	beq.n	6360 <Board_Sys80b::begin()+0x220>
		msg.outln(F("ok."));
    629e:	4940      	ldr	r1, [pc, #256]	; (63a0 <Board_Sys80b::begin()+0x260>)
    62a0:	4628      	mov	r0, r5
    62a2:	f000 fa99 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
		msg.out(F("- Power On Counter "));
    62a6:	493f      	ldr	r1, [pc, #252]	; (63a4 <Board_Sys80b::begin()+0x264>)
    62a8:	4628      	mov	r0, r5
    62aa:	f000 fc01 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
		msg.outln(_poc);
    62ae:	220a      	movs	r2, #10
    62b0:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    62b4:	4628      	mov	r0, r5
    62b6:	f000 fac1 	bl	683c <Msg::outln(unsigned long, int)>
		_poc = incrementPowerOnCounter();
    62ba:	4620      	mov	r0, r4
    62bc:	f7ff ff14 	bl	60e8 <Board_Sys80b::incrementPowerOnCounter()>
		msg.out(F("- New Power On Counter: "));
    62c0:	4939      	ldr	r1, [pc, #228]	; (63a8 <Board_Sys80b::begin()+0x268>)
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
	if (NVData->ready()) {
		msg.outln(F("ok."));
		msg.out(F("- Power On Counter "));
		msg.outln(_poc);
		_poc = incrementPowerOnCounter();
    62c2:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
		msg.out(F("- New Power On Counter: "));
    62c6:	4628      	mov	r0, r5
    62c8:	f000 fbf2 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
		msg.outln(_poc);
    62cc:	220a      	movs	r2, #10
    62ce:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    62d2:	4628      	mov	r0, r5
    62d4:	f000 fab2 	bl	683c <Msg::outln(unsigned long, int)>
	else {
		msg.warn(F("Troubles with NV Data initizlization: NV not available!"), CLASS_NAME, hdr);
	}
	//delay(100);

	msg.outln(F("- Led grid init..."));
    62d8:	4934      	ldr	r1, [pc, #208]	; (63ac <Board_Sys80b::begin()+0x26c>)
    62da:	4628      	mov	r0, r5
    62dc:	f000 fa7c 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
	delay(50);
    62e0:	2032      	movs	r0, #50	; 0x32
    62e2:	f004 fa97 	bl	a814 <delay>
	ledGrid = new Led8x8(_spiSettings, LG_SS_PIN);
    62e6:	2010      	movs	r0, #16
    62e8:	f005 ff3e 	bl	c168 <operator new(unsigned int)>
    62ec:	4606      	mov	r6, r0
    62ee:	220f      	movs	r2, #15
    62f0:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    62f4:	f000 f99a 	bl	662c <Led8x8::Led8x8(SPISettings*, int)>
    62f8:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	delay(10);
    62fc:	200a      	movs	r0, #10
    62fe:	f004 fa89 	bl	a814 <delay>
	ledGrid->setIntensity(1);
    6302:	2101      	movs	r1, #1
    6304:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    6308:	f000 f9b8 	bl	667c <Led8x8::setIntensity(unsigned char)>
	ledGrid->enabled = true;
    630c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    6310:	2201      	movs	r2, #1
	//lcd->clear();
	//lcd->print(F("PRB rev."));
	//lcd->println(_revision);
	//lcd->print(F("SW rev."));
	//lcd->print(BOARD_SW_REV);
	msg.clr();
    6312:	4628      	mov	r0, r5
	msg.outln(F("- Led grid init..."));
	delay(50);
	ledGrid = new Led8x8(_spiSettings, LG_SS_PIN);
	delay(10);
	ledGrid->setIntensity(1);
	ledGrid->enabled = true;
    6314:	701a      	strb	r2, [r3, #0]
	//lcd->clear();
	//lcd->print(F("PRB rev."));
	//lcd->println(_revision);
	//lcd->print(F("SW rev."));
	//lcd->print(BOARD_SW_REV);
	msg.clr();
    6316:	f000 f9eb 	bl	66f0 <Msg::clr()>
	msg.out(F("PRB rev."));
    631a:	4628      	mov	r0, r5
    631c:	4924      	ldr	r1, [pc, #144]	; (63b0 <Board_Sys80b::begin()+0x270>)
    631e:	f000 fbc7 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
	msg.outln(_revision);
    6322:	220a      	movs	r2, #10
    6324:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    6328:	4628      	mov	r0, r5
    632a:	f000 fa87 	bl	683c <Msg::outln(unsigned long, int)>
	msg.out(F("SW rev."));
    632e:	4628      	mov	r0, r5
    6330:	4920      	ldr	r1, [pc, #128]	; (63b4 <Board_Sys80b::begin()+0x274>)
    6332:	f000 fbbd 	bl	6ab0 <Msg::out(__FlashStringHelper const*)>
	msg.outln(BOARD_SW_REV);
    6336:	4628      	mov	r0, r5
    6338:	491f      	ldr	r1, [pc, #124]	; (63b8 <Board_Sys80b::begin()+0x278>)
    633a:	f000 fa4d 	bl	67d8 <Msg::outln(__FlashStringHelper const*)>
		lcd = &lcdispl; lcdOutputEnabled = true; 
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
    633e:	2300      	movs	r3, #0
	msg.disableLCDOutput();
	//delay(100);

	return true;
}
    6340:	4648      	mov	r0, r9
    6342:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
    6346:	b003      	add	sp, #12
    6348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	//delay(100);

	// SD init
	msg.outln(F("- SD init..."));
	if (!SD.begin(SD_SS_PIN)) {
		msg.err(F("can't init SD card!"), CLASS_NAME, hdr);
    634c:	4628      	mov	r0, r5
    634e:	6822      	ldr	r2, [r4, #0]
    6350:	4b1a      	ldr	r3, [pc, #104]	; (63bc <Board_Sys80b::begin()+0x27c>)
    6352:	491b      	ldr	r1, [pc, #108]	; (63c0 <Board_Sys80b::begin()+0x280>)
    6354:	f000 fb48 	bl	69e8 <Msg::err(__FlashStringHelper const*, char const*, char const*)>
	msg.outln(BOARD_SW_REV);
	msg.disableLCDOutput();
	//delay(100);

	return true;
}
    6358:	4648      	mov	r0, r9
    635a:	b003      	add	sp, #12
    635c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		_poc = incrementPowerOnCounter();
		msg.out(F("- New Power On Counter: "));
		msg.outln(_poc);
	}
	else {
		msg.warn(F("Troubles with NV Data initizlization: NV not available!"), CLASS_NAME, hdr);
    6360:	4b16      	ldr	r3, [pc, #88]	; (63bc <Board_Sys80b::begin()+0x27c>)
    6362:	4628      	mov	r0, r5
    6364:	6822      	ldr	r2, [r4, #0]
    6366:	4917      	ldr	r1, [pc, #92]	; (63c4 <Board_Sys80b::begin()+0x284>)
    6368:	f000 fb02 	bl	6970 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>
    636c:	e7b4      	b.n	62d8 <Board_Sys80b::begin()+0x198>

	msg.out(F("- NVRAM init... "));
	NVData = new NVData_class();
	NVData->immediateWriteMode = false;
	//NVData->begin(NVData->EEPROM_NVD, 128, SD_SS_PIN);
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
    636e:	230a      	movs	r3, #10
    6370:	4639      	mov	r1, r7
    6372:	4640      	mov	r0, r8
    6374:	2280      	movs	r2, #128	; 0x80
    6376:	f000 fce9 	bl	6d4c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)>
    637a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    637e:	e78a      	b.n	6296 <Board_Sys80b::begin()+0x156>
    6380:	200014e0 	.word	0x200014e0
    6384:	200014f4 	.word	0x200014f4
    6388:	20001f54 	.word	0x20001f54
    638c:	20001504 	.word	0x20001504
    6390:	20002ad0 	.word	0x20002ad0
    6394:	20001530 	.word	0x20001530
    6398:	20001540 	.word	0x20001540
    639c:	20001554 	.word	0x20001554
    63a0:	200014ac 	.word	0x200014ac
    63a4:	20001568 	.word	0x20001568
    63a8:	2000157c 	.word	0x2000157c
    63ac:	200015d0 	.word	0x200015d0
    63b0:	20000bc0 	.word	0x20000bc0
    63b4:	200015e4 	.word	0x200015e4
    63b8:	200015ec 	.word	0x200015ec
    63bc:	20001514 	.word	0x20001514
    63c0:	2000151c 	.word	0x2000151c
    63c4:	20001598 	.word	0x20001598

000063c8 <Board_Sys80b::getSettingByte(unsigned char)>:
	msg.outln(F("ok."));
	if (immediateUpdate) NVData->update();
}

byte Board_Sys80b::getSettingByte(byte addr) {
	if (addr > 3) return 0;
    63c8:	2903      	cmp	r1, #3
    63ca:	d901      	bls.n	63d0 <Board_Sys80b::getSettingByte(unsigned char)+0x8>
	return NVData->readByte(SETTINGS_ADR + addr);
}
    63cc:	2000      	movs	r0, #0
    63ce:	4770      	bx	lr
	if (immediateUpdate) NVData->update();
}

byte Board_Sys80b::getSettingByte(byte addr) {
	if (addr > 3) return 0;
	return NVData->readByte(SETTINGS_ADR + addr);
    63d0:	3164      	adds	r1, #100	; 0x64
    63d2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    63d6:	f000 bdc5 	b.w	6f64 <NVData_class::readByte(unsigned short)>
    63da:	bf00      	nop

000063dc <Board_Sys80b::getSettingBit(unsigned char)>:
}

byte Board_Sys80b::getSettingBit(byte bitPos) {
    63dc:	b510      	push	{r4, lr}
    63de:	460c      	mov	r4, r1
	bitPos &= 0x1fu; // = 0..31
	byte _byte = bitPos >> 3;
	byte _bit = bitPos & 7u;
	return (NVData->readByte(_byte) & (1 << _bit)) ? 1 : 0;
    63e0:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    63e4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
    63e8:	f004 0407 	and.w	r4, r4, #7
    63ec:	f000 fdba 	bl	6f64 <NVData_class::readByte(unsigned short)>
    63f0:	4120      	asrs	r0, r4
}
    63f2:	f000 0001 	and.w	r0, r0, #1
    63f6:	bd10      	pop	{r4, pc}

000063f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>:
			_writeCmd(++i, 0);
		}
	}
}

void Led8x8::_writeCmd(byte adr, byte data) {
    63f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    63fc:	4c57      	ldr	r4, [pc, #348]	; (655c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x164>)
    63fe:	4606      	mov	r6, r0
	SPI.beginTransaction(*_spis);
    6400:	6843      	ldr	r3, [r0, #4]
			_writeCmd(++i, 0);
		}
	}
}

void Led8x8::_writeCmd(byte adr, byte data) {
    6402:	4688      	mov	r8, r1
    6404:	7ce0      	ldrb	r0, [r4, #19]
    6406:	4617      	mov	r7, r2
    6408:	e893 1002 	ldmia.w	r3, {r1, ip}
    640c:	2800      	cmp	r0, #0
    640e:	d02b      	beq.n	6468 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x70>
			__disable_irq();
    6410:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6412:	7ce5      	ldrb	r5, [r4, #19]
    6414:	07ea      	lsls	r2, r5, #31
    6416:	462b      	mov	r3, r5
    6418:	d508      	bpl.n	642c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x34>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    641a:	f8df e170 	ldr.w	lr, [pc, #368]	; 658c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x194>
    641e:	6962      	ldr	r2, [r4, #20]
    6420:	f8de 0000 	ldr.w	r0, [lr]
    6424:	4010      	ands	r0, r2
    6426:	62a0      	str	r0, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6428:	f8ce 0000 	str.w	r0, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    642c:	07ad      	lsls	r5, r5, #30
    642e:	d506      	bpl.n	643e <Led8x8::_writeCmd(unsigned char, unsigned char)+0x46>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6430:	4d4b      	ldr	r5, [pc, #300]	; (6560 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x168>)
    6432:	69a2      	ldr	r2, [r4, #24]
    6434:	6828      	ldr	r0, [r5, #0]
    6436:	7ce3      	ldrb	r3, [r4, #19]
    6438:	4010      	ands	r0, r2
    643a:	62e0      	str	r0, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    643c:	6028      	str	r0, [r5, #0]
			}
			if (interruptMasksUsed & 0x04) {
    643e:	0758      	lsls	r0, r3, #29
    6440:	d506      	bpl.n	6450 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6442:	4d48      	ldr	r5, [pc, #288]	; (6564 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x16c>)
    6444:	69e2      	ldr	r2, [r4, #28]
    6446:	6828      	ldr	r0, [r5, #0]
    6448:	7ce3      	ldrb	r3, [r4, #19]
    644a:	4010      	ands	r0, r2
    644c:	6320      	str	r0, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    644e:	6028      	str	r0, [r5, #0]
			}
			if (interruptMasksUsed & 0x08) {
    6450:	071a      	lsls	r2, r3, #28
    6452:	d506      	bpl.n	6462 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x6a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6454:	4d44      	ldr	r5, [pc, #272]	; (6568 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x170>)
    6456:	6a22      	ldr	r2, [r4, #32]
    6458:	6828      	ldr	r0, [r5, #0]
    645a:	7ce3      	ldrb	r3, [r4, #19]
    645c:	4010      	ands	r0, r2
    645e:	6360      	str	r0, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6460:	6028      	str	r0, [r5, #0]
			}
			if (interruptMasksUsed & 0x10) {
    6462:	06db      	lsls	r3, r3, #27
    6464:	d467      	bmi.n	6536 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x13e>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    6466:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    6468:	68a3      	ldr	r3, [r4, #8]
    646a:	483c      	ldr	r0, [pc, #240]	; (655c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x164>)
    646c:	428b      	cmp	r3, r1
    646e:	d069      	beq.n	6544 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x14c>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    6470:	4b3e      	ldr	r3, [pc, #248]	; (656c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x174>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6472:	4d3f      	ldr	r5, [pc, #252]	; (6570 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x178>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    6474:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    6476:	6081      	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6478:	f3c3 1001 	ubfx	r0, r3, #4, #2
    647c:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6480:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    6484:	3301      	adds	r3, #1
    6486:	fbb0 f0f3 	udiv	r0, r0, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    648a:	2900      	cmp	r1, #0
    648c:	d051      	beq.n	6532 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x13a>
    648e:	fbb0 f3f1 	udiv	r3, r0, r1

			if (d && clkhz/d > _clock) d++;
    6492:	b14b      	cbz	r3, 64a8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
    6494:	fbb0 f0f3 	udiv	r0, r0, r3
    6498:	4288      	cmp	r0, r1
    649a:	bf88      	it	hi
    649c:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    649e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    64a2:	d351      	bcc.n	6548 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x150>
    64a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    64a8:	60e3      	str	r3, [r4, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    64aa:	6825      	ldr	r5, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    64ac:	2100      	movs	r1, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    64ae:	2003      	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    64b0:	f04f 0e01 	mov.w	lr, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    64b4:	6129      	str	r1, [r5, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    64b6:	6268      	str	r0, [r5, #36]	; 0x24
		port().CCR = _ccr;
    64b8:	642b      	str	r3, [r5, #64]	; 0x40
	SPI.beginTransaction(*_spis);
	digitalWrite(_ss_pin, LOW);
    64ba:	7a30      	ldrb	r0, [r6, #8]
		port().TCR = settings.tcr;
    64bc:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    64c0:	f8c5 e010 	str.w	lr, [r5, #16]
    64c4:	f004 fa5e 	bl	a984 <digitalWrite>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    64c8:	f008 020f 	and.w	r2, r8, #15
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    64cc:	6823      	ldr	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    64ce:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    64d0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    64d2:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
    64d6:	d0fb      	beq.n	64d0 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xd8>
    64d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    64da:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    64dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    64de:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    64e2:	d0fb      	beq.n	64dc <Led8x8::_writeCmd(unsigned char, unsigned char)+0xe4>
	SPI.transfer(adr & 0xf);
	SPI.transfer(data);
	digitalWrite(_ss_pin, HIGH);
    64e4:	2101      	movs	r1, #1
    64e6:	7a30      	ldrb	r0, [r6, #8]
    64e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    64ea:	f004 fa4b 	bl	a984 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    64ee:	7ce3      	ldrb	r3, [r4, #19]
    64f0:	491a      	ldr	r1, [pc, #104]	; (655c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x164>)
    64f2:	461a      	mov	r2, r3
    64f4:	b1db      	cbz	r3, 652e <Led8x8::_writeCmd(unsigned char, unsigned char)+0x136>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    64f6:	07de      	lsls	r6, r3, #31
    64f8:	d502      	bpl.n	6500 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x108>
    64fa:	6a88      	ldr	r0, [r1, #40]	; 0x28
    64fc:	491d      	ldr	r1, [pc, #116]	; (6574 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x17c>)
    64fe:	6008      	str	r0, [r1, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6500:	079d      	lsls	r5, r3, #30
    6502:	d503      	bpl.n	650c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x114>
    6504:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6506:	4b1c      	ldr	r3, [pc, #112]	; (6578 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x180>)
    6508:	7ce2      	ldrb	r2, [r4, #19]
    650a:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    650c:	0750      	lsls	r0, r2, #29
    650e:	d503      	bpl.n	6518 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x120>
    6510:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6512:	4b1a      	ldr	r3, [pc, #104]	; (657c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x184>)
    6514:	7ce2      	ldrb	r2, [r4, #19]
    6516:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6518:	0711      	lsls	r1, r2, #28
    651a:	d503      	bpl.n	6524 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x12c>
    651c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    651e:	4b18      	ldr	r3, [pc, #96]	; (6580 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x188>)
    6520:	7ce2      	ldrb	r2, [r4, #19]
    6522:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6524:	06d3      	lsls	r3, r2, #27
    6526:	d502      	bpl.n	652e <Led8x8::_writeCmd(unsigned char, unsigned char)+0x136>
    6528:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    652a:	4b16      	ldr	r3, [pc, #88]	; (6584 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x18c>)
    652c:	601a      	str	r2, [r3, #0]
    652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6532:	4603      	mov	r3, r0
    6534:	e7ad      	b.n	6492 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x9a>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6536:	4814      	ldr	r0, [pc, #80]	; (6588 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x190>)
    6538:	6a63      	ldr	r3, [r4, #36]	; 0x24
    653a:	6805      	ldr	r5, [r0, #0]
    653c:	402b      	ands	r3, r5
    653e:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6540:	6003      	str	r3, [r0, #0]
    6542:	e790      	b.n	6466 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x6e>
    6544:	68c3      	ldr	r3, [r0, #12]
    6546:	e7b0      	b.n	64aa <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb2>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    6548:	2b02      	cmp	r3, #2
    654a:	d904      	bls.n	6556 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x15e>
    654c:	3b02      	subs	r3, #2
    654e:	0859      	lsrs	r1, r3, #1
    6550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6554:	e7a8      	b.n	64a8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
    6556:	2300      	movs	r3, #0
    6558:	e7a6      	b.n	64a8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
    655a:	bf00      	nop
    655c:	20001f54 	.word	0x20001f54
    6560:	e000e184 	.word	0xe000e184
    6564:	e000e188 	.word	0xe000e188
    6568:	e000e18c 	.word	0xe000e18c
    656c:	400fc000 	.word	0x400fc000
    6570:	200015f4 	.word	0x200015f4
    6574:	e000e100 	.word	0xe000e100
    6578:	e000e104 	.word	0xe000e104
    657c:	e000e108 	.word	0xe000e108
    6580:	e000e10c 	.word	0xe000e10c
    6584:	e000e110 	.word	0xe000e110
    6588:	e000e190 	.word	0xe000e190
    658c:	e000e180 	.word	0xe000e180

00006590 <Led8x8::setRowByte(unsigned char, unsigned char)>:
	writeOptimization = true;
	clear();
}

// MSB on left
bool Led8x8::setRowByte(byte row, byte data) {
    6590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (enabled) {
    6592:	7807      	ldrb	r7, [r0, #0]
    6594:	b197      	cbz	r7, 65bc <Led8x8::setRowByte(unsigned char, unsigned char)+0x2c>
		byte v = revByte[data];
    6596:	4c0c      	ldr	r4, [pc, #48]	; (65c8 <Led8x8::setRowByte(unsigned char, unsigned char)+0x38>)
		row &= 7;
    6598:	f001 0507 	and.w	r5, r1, #7
		if (writeOptimization && v == _row[row]) return false;
    659c:	7843      	ldrb	r3, [r0, #1]
}

// MSB on left
bool Led8x8::setRowByte(byte row, byte data) {
	if (enabled) {
		byte v = revByte[data];
    659e:	5ca6      	ldrb	r6, [r4, r2]
		row &= 7;
		if (writeOptimization && v == _row[row]) return false;
    65a0:	b11b      	cbz	r3, 65aa <Led8x8::setRowByte(unsigned char, unsigned char)+0x1a>
    65a2:	68c3      	ldr	r3, [r0, #12]
    65a4:	5d5b      	ldrb	r3, [r3, r5]
    65a6:	42b3      	cmp	r3, r6
    65a8:	d00b      	beq.n	65c2 <Led8x8::setRowByte(unsigned char, unsigned char)+0x32>
    65aa:	4604      	mov	r4, r0
		_writeCmd(row + 1, v);
    65ac:	4632      	mov	r2, r6
    65ae:	1c69      	adds	r1, r5, #1
    65b0:	f7ff ff22 	bl	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
		_row[row] = v;
    65b4:	68e3      	ldr	r3, [r4, #12]
    65b6:	555e      	strb	r6, [r3, r5]
	}
	return true;
}
    65b8:	4638      	mov	r0, r7
    65ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		row &= 7;
		if (writeOptimization && v == _row[row]) return false;
		_writeCmd(row + 1, v);
		_row[row] = v;
	}
	return true;
    65bc:	2701      	movs	r7, #1
}
    65be:	4638      	mov	r0, r7
    65c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// MSB on left
bool Led8x8::setRowByte(byte row, byte data) {
	if (enabled) {
		byte v = revByte[data];
		row &= 7;
		if (writeOptimization && v == _row[row]) return false;
    65c2:	2700      	movs	r7, #0
    65c4:	e7f8      	b.n	65b8 <Led8x8::setRowByte(unsigned char, unsigned char)+0x28>
    65c6:	bf00      	nop
    65c8:	6000165c 	.word	0x6000165c

000065cc <Led8x8::setRow(unsigned char, unsigned char)>:
	}
	return true;
}

// MSB on right
bool Led8x8::setRow(byte row, byte data) {
    65cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (enabled) {
    65ce:	7807      	ldrb	r7, [r0, #0]
    65d0:	b187      	cbz	r7, 65f4 <Led8x8::setRow(unsigned char, unsigned char)+0x28>
		row &= 7;
		if (writeOptimization && data == _row[row]) return false;
    65d2:	7843      	ldrb	r3, [r0, #1]
}

// MSB on right
bool Led8x8::setRow(byte row, byte data) {
	if (enabled) {
		row &= 7;
    65d4:	f001 0507 	and.w	r5, r1, #7
		if (writeOptimization && data == _row[row]) return false;
    65d8:	b11b      	cbz	r3, 65e2 <Led8x8::setRow(unsigned char, unsigned char)+0x16>
    65da:	68c3      	ldr	r3, [r0, #12]
    65dc:	5d5b      	ldrb	r3, [r3, r5]
    65de:	4293      	cmp	r3, r2
    65e0:	d00b      	beq.n	65fa <Led8x8::setRow(unsigned char, unsigned char)+0x2e>
    65e2:	4604      	mov	r4, r0
		_writeCmd(row + 1, data);
    65e4:	1c69      	adds	r1, r5, #1
    65e6:	4616      	mov	r6, r2
    65e8:	f7ff ff06 	bl	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
		_row[row] = data;
    65ec:	68e3      	ldr	r3, [r4, #12]
    65ee:	555e      	strb	r6, [r3, r5]
	}
	return true;
}
    65f0:	4638      	mov	r0, r7
    65f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		row &= 7;
		if (writeOptimization && data == _row[row]) return false;
		_writeCmd(row + 1, data);
		_row[row] = data;
	}
	return true;
    65f4:	2701      	movs	r7, #1
}
    65f6:	4638      	mov	r0, r7
    65f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

// MSB on right
bool Led8x8::setRow(byte row, byte data) {
	if (enabled) {
		row &= 7;
		if (writeOptimization && data == _row[row]) return false;
    65fa:	2700      	movs	r7, #0
    65fc:	e7f8      	b.n	65f0 <Led8x8::setRow(unsigned char, unsigned char)+0x24>
    65fe:	bf00      	nop

00006600 <Led8x8::clear() [clone .part.3]>:
		_row[row] = data;
	}
	return true;
}

void Led8x8::clear() {
    6600:	2300      	movs	r3, #0
    6602:	b570      	push	{r4, r5, r6, lr}
    6604:	4605      	mov	r5, r0
	if (enabled) {
		byte i = 0;
		while (i < 8) {
			_row[i] = 0;
    6606:	461e      	mov	r6, r3
			_writeCmd(++i, 0);
    6608:	1c5c      	adds	r4, r3, #1

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) {
			_row[i] = 0;
    660a:	68e9      	ldr	r1, [r5, #12]
			_writeCmd(++i, 0);
    660c:	2200      	movs	r2, #0
    660e:	4628      	mov	r0, r5

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) {
			_row[i] = 0;
    6610:	54ce      	strb	r6, [r1, r3]
			_writeCmd(++i, 0);
    6612:	b2e1      	uxtb	r1, r4
    6614:	f7ff fef0 	bl	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
}

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) {
    6618:	2c08      	cmp	r4, #8
    661a:	4623      	mov	r3, r4
    661c:	d1f4      	bne.n	6608 <Led8x8::clear() [clone .part.3]+0x8>
			_row[i] = 0;
			_writeCmd(++i, 0);
		}
	}
}
    661e:	bd70      	pop	{r4, r5, r6, pc}

00006620 <Led8x8::clear()>:
	}
	return true;
}

void Led8x8::clear() {
	if (enabled) {
    6620:	7803      	ldrb	r3, [r0, #0]
    6622:	b10b      	cbz	r3, 6628 <Led8x8::clear()+0x8>
    6624:	f7ff bfec 	b.w	6600 <Led8x8::clear() [clone .part.3]>
    6628:	4770      	bx	lr
    662a:	bf00      	nop

0000662c <Led8x8::Led8x8(SPISettings*, int)>:
	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
    662c:	b510      	push	{r4, lr}
    662e:	4604      	mov	r4, r0
	_spis = ss;
	_ss_pin = pin;
	_row = new byte[8];
    6630:	2008      	movs	r0, #8
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
	_spis = ss;
    6632:	6061      	str	r1, [r4, #4]
	_ss_pin = pin;
    6634:	60a2      	str	r2, [r4, #8]
	_row = new byte[8];
    6636:	f005 fd99 	bl	c16c <operator new[](unsigned int)>
	for (int i = 0; i < 8; i++) _row[i] = 0;
    663a:	2300      	movs	r3, #0
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
	_spis = ss;
	_ss_pin = pin;
	_row = new byte[8];
    663c:	4602      	mov	r2, r0
    663e:	60e0      	str	r0, [r4, #12]
	for (int i = 0; i < 8; i++) _row[i] = 0;
    6640:	4619      	mov	r1, r3
    6642:	e000      	b.n	6646 <Led8x8::Led8x8(SPISettings*, int)+0x1a>
    6644:	68e2      	ldr	r2, [r4, #12]
    6646:	54d1      	strb	r1, [r2, r3]
    6648:	3301      	adds	r3, #1
    664a:	2b08      	cmp	r3, #8
    664c:	d1fa      	bne.n	6644 <Led8x8::Led8x8(SPISettings*, int)+0x18>
	_writeCmd(CMD_DECODE, 0); // Decode state off
    664e:	4620      	mov	r0, r4
    6650:	2200      	movs	r2, #0
    6652:	2109      	movs	r1, #9
    6654:	f7ff fed0 	bl	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
    6658:	4620      	mov	r0, r4
    665a:	2207      	movs	r2, #7
    665c:	210b      	movs	r1, #11
    665e:	f7ff fecb 	bl	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	digitalWrite(_ss_pin, HIGH);
	SPI.endTransaction();
}

void Led8x8::shutDownMode(bool b) { 
	_writeCmd(CMD_SHUTDWN, b ? 0 : 1); 
    6662:	2201      	movs	r2, #1
    6664:	210c      	movs	r1, #12
    6666:	4620      	mov	r0, r4
    6668:	f7ff fec6 	bl	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	_row = new byte[8];
	for (int i = 0; i < 8; i++) _row[i] = 0;
	_writeCmd(CMD_DECODE, 0); // Decode state off
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
	shutDownMode(false); // Shutdown mode off
	enabled = true;
    666c:	2301      	movs	r3, #1
    666e:	4620      	mov	r0, r4
    6670:	7023      	strb	r3, [r4, #0]
	writeOptimization = true;
    6672:	7063      	strb	r3, [r4, #1]
    6674:	f7ff ffc4 	bl	6600 <Led8x8::clear() [clone .part.3]>
	clear();
}
    6678:	4620      	mov	r0, r4
    667a:	bd10      	pop	{r4, pc}

0000667c <Led8x8::setIntensity(unsigned char)>:
void Led8x8::shutDownMode(bool b) { 
	_writeCmd(CMD_SHUTDWN, b ? 0 : 1); 
}

void Led8x8::setIntensity(byte i) { 
	_writeCmd(CMD_INTNSTY, i & 0xf); 
    667c:	f001 020f 	and.w	r2, r1, #15
    6680:	210a      	movs	r1, #10
    6682:	f7ff beb9 	b.w	63f8 <Led8x8::_writeCmd(unsigned char, unsigned char)>
    6686:	bf00      	nop

00006688 <Msg::Msg()>:
//	LiquidCrystalFast* lcdpt = nullptr;
//	bool lcdOutputEnabled = false;
//	bool serialOutputEnabled = false;
//}

Msg::Msg() {
    6688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    668a:	4604      	mov	r4, r0
    668c:	4b13      	ldr	r3, [pc, #76]	; (66dc <Msg::Msg()+0x54>)
    668e:	2100      	movs	r1, #0
    6690:	4d13      	ldr	r5, [pc, #76]	; (66e0 <Msg::Msg()+0x58>)
    6692:	2264      	movs	r2, #100	; 0x64
    6694:	f104 0628 	add.w	r6, r4, #40	; 0x28
    6698:	60a3      	str	r3, [r4, #8]
    669a:	4812      	ldr	r0, [pc, #72]	; (66e4 <Msg::Msg()+0x5c>)
    669c:	4b12      	ldr	r3, [pc, #72]	; (66e8 <Msg::Msg()+0x60>)
    669e:	4f13      	ldr	r7, [pc, #76]	; (66ec <Msg::Msg()+0x64>)
    66a0:	6065      	str	r5, [r4, #4]
	lcd = nullptr;
    66a2:	460d      	mov	r5, r1
//	LiquidCrystalFast* lcdpt = nullptr;
//	bool lcdOutputEnabled = false;
//	bool serialOutputEnabled = false;
//}

Msg::Msg() {
    66a4:	61a3      	str	r3, [r4, #24]
    66a6:	6122      	str	r2, [r4, #16]
    66a8:	6020      	str	r0, [r4, #0]
    66aa:	4630      	mov	r0, r6
    66ac:	60e7      	str	r7, [r4, #12]
    66ae:	f005 fea5 	bl	c3fc <String::String(char const*)>
    66b2:	4629      	mov	r1, r5
    66b4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    66b8:	f005 fea0 	bl	c3fc <String::String(char const*)>
	lcd = nullptr;
	lcdOutputEnabled = false;
	serialOutputEnabled = false;
	logFileEnabled = false;
	normalOutputToLog = false;
	logFileName = DEF_LOGFILE;
    66bc:	4630      	mov	r0, r6
//	bool lcdOutputEnabled = false;
//	bool serialOutputEnabled = false;
//}

Msg::Msg() {
	lcd = nullptr;
    66be:	6265      	str	r5, [r4, #36]	; 0x24
	lcdOutputEnabled = false;
    66c0:	77a5      	strb	r5, [r4, #30]
	serialOutputEnabled = false;
    66c2:	77e5      	strb	r5, [r4, #31]
	logFileEnabled = false;
    66c4:	f884 5020 	strb.w	r5, [r4, #32]
	normalOutputToLog = false;
    66c8:	7525      	strb	r5, [r4, #20]
	logFileName = DEF_LOGFILE;
    66ca:	68e1      	ldr	r1, [r4, #12]
    66cc:	f005 ff44 	bl	c558 <String::operator=(char const*)>
	//delay = 0; // delay disabled
	lcd = nullptr;
	mdelay = DEF_DELAY;
    66d0:	6923      	ldr	r3, [r4, #16]
	serialOutputEnabled = false;
	logFileEnabled = false;
	normalOutputToLog = false;
	logFileName = DEF_LOGFILE;
	//delay = 0; // delay disabled
	lcd = nullptr;
    66d2:	6265      	str	r5, [r4, #36]	; 0x24
	mdelay = DEF_DELAY;
}
    66d4:	4620      	mov	r0, r4
	logFileEnabled = false;
	normalOutputToLog = false;
	logFileName = DEF_LOGFILE;
	//delay = 0; // delay disabled
	lcd = nullptr;
	mdelay = DEF_DELAY;
    66d6:	83a3      	strh	r3, [r4, #28]
}
    66d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66da:	bf00      	nop
    66dc:	20001614 	.word	0x20001614
    66e0:	20001608 	.word	0x20001608
    66e4:	20001604 	.word	0x20001604
    66e8:	2000161c 	.word	0x2000161c
    66ec:	20001620 	.word	0x20001620

000066f0 <Msg::clr()>:
	if (lcd != nullptr) lcdOutputEnabled = true;
	else warn(F("Can't enable undefined LCD device!"), CLASS_NAME);
}

void Msg::clr() {
	if (lcdOutputEnabled) {
    66f0:	7f83      	ldrb	r3, [r0, #30]
void Msg::enableLCDOutput() { 
	if (lcd != nullptr) lcdOutputEnabled = true;
	else warn(F("Can't enable undefined LCD device!"), CLASS_NAME);
}

void Msg::clr() {
    66f2:	b510      	push	{r4, lr}
    66f4:	4604      	mov	r4, r0
	if (lcdOutputEnabled) {
    66f6:	b983      	cbnz	r3, 671a <Msg::clr()+0x2a>
		lcd->clear();
		lcd->setCursor(0, 0);
	}
	if (serialOutputEnabled) Serial.println(F("---"));
    66f8:	7fe3      	ldrb	r3, [r4, #31]
    66fa:	b933      	cbnz	r3, 670a <Msg::clr()+0x1a>
	if (mdelay) delay(mdelay);
    66fc:	8ba0      	ldrh	r0, [r4, #28]
    66fe:	b900      	cbnz	r0, 6702 <Msg::clr()+0x12>
    6700:	bd10      	pop	{r4, pc}
}
    6702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lcdOutputEnabled) {
		lcd->clear();
		lcd->setCursor(0, 0);
	}
	if (serialOutputEnabled) Serial.println(F("---"));
	if (mdelay) delay(mdelay);
    6706:	f004 b885 	b.w	a814 <delay>
    670a:	2103      	movs	r1, #3
    670c:	4807      	ldr	r0, [pc, #28]	; (672c <Msg::clr()+0x3c>)
    670e:	f005 fbad 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    6712:	4807      	ldr	r0, [pc, #28]	; (6730 <Msg::clr()+0x40>)
    6714:	f005 fd6c 	bl	c1f0 <Print::println()>
    6718:	e7f0      	b.n	66fc <Msg::clr()+0xc>
	else warn(F("Can't enable undefined LCD device!"), CLASS_NAME);
}

void Msg::clr() {
	if (lcdOutputEnabled) {
		lcd->clear();
    671a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    671c:	f003 fc32 	bl	9f84 <LiquidCrystalFast::clear()>
		lcd->setCursor(0, 0);
    6720:	2200      	movs	r2, #0
    6722:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6724:	4611      	mov	r1, r2
    6726:	f003 fbf1 	bl	9f0c <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
    672a:	e7e5      	b.n	66f8 <Msg::clr()+0x8>
    672c:	20001628 	.word	0x20001628
    6730:	20001fdc 	.word	0x20001fdc

00006734 <Msg::_buildFullMsg(String&, String&, char const*, char const*)>:
	buff = String(freeMemory()) + " bytes free.";
	outln(buff); 
	log(buff);
}

void Msg::_buildFullMsg(String& destStr, String& msg, const char* className, const char* funcName) {
    6734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6738:	460c      	mov	r4, r1
    673a:	461d      	mov	r5, r3
    673c:	4680      	mov	r8, r0
	destStr = "";
    673e:	4911      	ldr	r1, [pc, #68]	; (6784 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x50>)
    6740:	4620      	mov	r0, r4
	buff = String(freeMemory()) + " bytes free.";
	outln(buff); 
	log(buff);
}

void Msg::_buildFullMsg(String& destStr, String& msg, const char* className, const char* funcName) {
    6742:	4617      	mov	r7, r2
    6744:	9e06      	ldr	r6, [sp, #24]
	destStr = "";
    6746:	f005 ff07 	bl	c558 <String::operator=(char const*)>
	if (className != nullptr) {
    674a:	b1ad      	cbz	r5, 6778 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x44>
		destStr = className;
    674c:	4629      	mov	r1, r5
    674e:	4620      	mov	r0, r4
    6750:	f005 ff02 	bl	c558 <String::operator=(char const*)>
		if (funcName != nullptr) {
    6754:	b15e      	cbz	r6, 676e <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x3a>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    6756:	490c      	ldr	r1, [pc, #48]	; (6788 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x54>)
    6758:	4620      	mov	r0, r4
    675a:	f005 ff51 	bl	c600 <String::append(char const*)>
    675e:	4631      	mov	r1, r6
    6760:	4620      	mov	r0, r4
    6762:	f005 ff4d 	bl	c600 <String::append(char const*)>
    6766:	4909      	ldr	r1, [pc, #36]	; (678c <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x58>)
    6768:	4620      	mov	r0, r4
    676a:	f005 ff49 	bl	c600 <String::append(char const*)>
    676e:	f8d8 1018 	ldr.w	r1, [r8, #24]
    6772:	4620      	mov	r0, r4
    6774:	f005 ff44 	bl	c600 <String::append(char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    6778:	4639      	mov	r1, r7
    677a:	4620      	mov	r0, r4
			destStr += "()";
		}
		destStr += separator;
	}
	destStr += msg;
}
    677c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6780:	f005 bf3a 	b.w	c5f8 <String::append(String const&)>
    6784:	20000af0 	.word	0x20000af0
    6788:	2000162c 	.word	0x2000162c
    678c:	2000124c 	.word	0x2000124c

00006790 <Msg::_writeLogLn(__FlashStringHelper const*)>:
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLogLn(const __FlashStringHelper* msg) {
    6790:	b530      	push	{r4, r5, lr}
    6792:	b089      	sub	sp, #36	; 0x24
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6794:	6a82      	ldr	r2, [r0, #40]	; 0x28
    6796:	2313      	movs	r3, #19
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLogLn(const __FlashStringHelper* msg) {
    6798:	460d      	mov	r5, r1
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    679a:	4668      	mov	r0, sp
    679c:	490d      	ldr	r1, [pc, #52]	; (67d4 <Msg::_writeLogLn(__FlashStringHelper const*)+0x44>)
    679e:	f001 fc8f 	bl	80c0 <SDClass::open(char const*, unsigned char)>
	if (!f) return false;
    67a2:	4668      	mov	r0, sp
    67a4:	f001 fbda 	bl	7f5c <File::operator bool()>
    67a8:	4604      	mov	r4, r0
    67aa:	b168      	cbz	r0, 67c8 <Msg::_writeLogLn(__FlashStringHelper const*)+0x38>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    67ac:	4628      	mov	r0, r5
    67ae:	f007 fa87 	bl	dcc0 <strlen>
    67b2:	4629      	mov	r1, r5
    67b4:	4602      	mov	r2, r0
    67b6:	4668      	mov	r0, sp
    67b8:	f001 fb1e 	bl	7df8 <File::write(unsigned char const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    67bc:	4668      	mov	r0, sp
    67be:	f005 fd17 	bl	c1f0 <Print::println()>
	f.println(msg);
	f.close();
    67c2:	4668      	mov	r0, sp
    67c4:	f001 fbbc 	bl	7f40 <File::close()>
	return true;
}

// appends log text-line
bool Msg::_writeLogLn(const __FlashStringHelper* msg) {
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    67c8:	4668      	mov	r0, sp
    67ca:	f001 fba3 	bl	7f14 <File::~File()>
	if (!f) return false;
	f.println(msg);
	f.close();
	return true;
}
    67ce:	4620      	mov	r0, r4
    67d0:	b009      	add	sp, #36	; 0x24
    67d2:	bd30      	pop	{r4, r5, pc}
    67d4:	20002ad0 	.word	0x20002ad0

000067d8 <Msg::outln(__FlashStringHelper const*)>:
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    67d8:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(const __FlashStringHelper *txt) {
    67da:	b570      	push	{r4, r5, r6, lr}
    67dc:	4604      	mov	r4, r0
    67de:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->println(txt);
    67e0:	b9d3      	cbnz	r3, 6818 <Msg::outln(__FlashStringHelper const*)+0x40>
	if (serialOutputEnabled) Serial.println(txt);
    67e2:	7fe3      	ldrb	r3, [r4, #31]
    67e4:	b96b      	cbnz	r3, 6802 <Msg::outln(__FlashStringHelper const*)+0x2a>
	if (normalOutputToLog) _writeLogLn(txt);
    67e6:	7d23      	ldrb	r3, [r4, #20]
    67e8:	b933      	cbnz	r3, 67f8 <Msg::outln(__FlashStringHelper const*)+0x20>
	if (mdelay) delay(mdelay);
    67ea:	8ba0      	ldrh	r0, [r4, #28]
    67ec:	b900      	cbnz	r0, 67f0 <Msg::outln(__FlashStringHelper const*)+0x18>
    67ee:	bd70      	pop	{r4, r5, r6, pc}
}
    67f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
    67f4:	f004 b80e 	b.w	a814 <delay>
}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
    67f8:	4629      	mov	r1, r5
    67fa:	4620      	mov	r0, r4
    67fc:	f7ff ffc8 	bl	6790 <Msg::_writeLogLn(__FlashStringHelper const*)>
    6800:	e7f3      	b.n	67ea <Msg::outln(__FlashStringHelper const*)+0x12>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6802:	4628      	mov	r0, r5
    6804:	f007 fa5c 	bl	dcc0 <strlen>
    6808:	4601      	mov	r1, r0
    680a:	4628      	mov	r0, r5
    680c:	f005 fb2e 	bl	be6c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    6810:	4808      	ldr	r0, [pc, #32]	; (6834 <Msg::outln(__FlashStringHelper const*)+0x5c>)
    6812:	f005 fced 	bl	c1f0 <Print::println()>
    6816:	e7e6      	b.n	67e6 <Msg::outln(__FlashStringHelper const*)+0xe>
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    6818:	6a46      	ldr	r6, [r0, #36]	; 0x24
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    681a:	4608      	mov	r0, r1
    681c:	f007 fa50 	bl	dcc0 <strlen>
    6820:	4629      	mov	r1, r5
    6822:	6833      	ldr	r3, [r6, #0]
    6824:	4602      	mov	r2, r0
    6826:	4630      	mov	r0, r6
    6828:	685b      	ldr	r3, [r3, #4]
    682a:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    682c:	4630      	mov	r0, r6
    682e:	f005 fcdf 	bl	c1f0 <Print::println()>
    6832:	e7d6      	b.n	67e2 <Msg::outln(__FlashStringHelper const*)+0xa>
    6834:	20001fdc 	.word	0x20001fdc

00006838 <Msg::outln(char const*)>:
    6838:	f7ff bfce 	b.w	67d8 <Msg::outln(__FlashStringHelper const*)>

0000683c <Msg::outln(unsigned long, int)>:
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->println(n);
    683c:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(uint32_t n, int base) {
    683e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6840:	4604      	mov	r4, r0
    6842:	b085      	sub	sp, #20
    6844:	4616      	mov	r6, r2
    6846:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->println(n);
    6848:	bb03      	cbnz	r3, 688c <Msg::outln(unsigned long, int)+0x50>
	if (serialOutputEnabled) Serial.println(n, base);
    684a:	7fe3      	ldrb	r3, [r4, #31]
    684c:	b9a3      	cbnz	r3, 6878 <Msg::outln(unsigned long, int)+0x3c>
	if (normalOutputToLog) {
    684e:	7d23      	ldrb	r3, [r4, #20]
    6850:	b92b      	cbnz	r3, 685e <Msg::outln(unsigned long, int)+0x22>
		String st = String(n, base);
		_writeLogLn(st);
	}
	if (mdelay) delay(mdelay);
    6852:	8ba0      	ldrh	r0, [r4, #28]
    6854:	b108      	cbz	r0, 685a <Msg::outln(unsigned long, int)+0x1e>
    6856:	f003 ffdd 	bl	a814 <delay>
}
    685a:	b005      	add	sp, #20
    685c:	bdf0      	pop	{r4, r5, r6, r7, pc}

void Msg::outln(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->println(n);
	if (serialOutputEnabled) Serial.println(n, base);
	if (normalOutputToLog) {
		String st = String(n, base);
    685e:	b2f2      	uxtb	r2, r6
    6860:	4629      	mov	r1, r5
    6862:	4668      	mov	r0, sp
    6864:	f005 fe36 	bl	c4d4 <String::String(unsigned long, unsigned char)>
	bool _writeLog(const char* txt);
	bool _writeLog(const __FlashStringHelper* txt);
	inline bool _writeLog(String& txt) { return _writeLog(txt.c_str()); }
	bool _writeLogLn(const char* txt);
	bool _writeLogLn(const __FlashStringHelper* txt);
	inline bool _writeLogLn(String& txt) { return _writeLogLn(txt.c_str());	}
    6868:	9900      	ldr	r1, [sp, #0]
    686a:	4620      	mov	r0, r4
    686c:	f7ff ff90 	bl	6790 <Msg::_writeLogLn(__FlashStringHelper const*)>
    6870:	4668      	mov	r0, sp
    6872:	f005 fd83 	bl	c37c <String::~String()>
    6876:	e7ec      	b.n	6852 <Msg::outln(unsigned long, int)+0x16>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6878:	2300      	movs	r3, #0
    687a:	b2f2      	uxtb	r2, r6
    687c:	4629      	mov	r1, r5
    687e:	4808      	ldr	r0, [pc, #32]	; (68a0 <Msg::outln(unsigned long, int)+0x64>)
    6880:	f005 fcee 	bl	c260 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6884:	4806      	ldr	r0, [pc, #24]	; (68a0 <Msg::outln(unsigned long, int)+0x64>)
    6886:	f005 fcb3 	bl	c1f0 <Print::println()>
    688a:	e7e0      	b.n	684e <Msg::outln(unsigned long, int)+0x12>
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->println(n);
    688c:	6a47      	ldr	r7, [r0, #36]	; 0x24

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    688e:	2300      	movs	r3, #0
    6890:	220a      	movs	r2, #10
    6892:	4638      	mov	r0, r7
    6894:	f005 fce4 	bl	c260 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    6898:	4638      	mov	r0, r7
    689a:	f005 fca9 	bl	c1f0 <Print::println()>
    689e:	e7d4      	b.n	684a <Msg::outln(unsigned long, int)+0xe>
    68a0:	20001fdc 	.word	0x20001fdc

000068a4 <Msg::outln(String&)>:
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(String& txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    68a4:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(String& txt) {
    68a6:	b570      	push	{r4, r5, r6, lr}
    68a8:	4604      	mov	r4, r0
    68aa:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->println(txt);
    68ac:	b9bb      	cbnz	r3, 68de <Msg::outln(String&)+0x3a>
	if (serialOutputEnabled) Serial.println(txt);
    68ae:	7fe3      	ldrb	r3, [r4, #31]
    68b0:	b96b      	cbnz	r3, 68ce <Msg::outln(String&)+0x2a>
	if (normalOutputToLog) _writeLogLn(txt);
    68b2:	7d23      	ldrb	r3, [r4, #20]
    68b4:	b933      	cbnz	r3, 68c4 <Msg::outln(String&)+0x20>
	if (mdelay) delay(mdelay);
    68b6:	8ba0      	ldrh	r0, [r4, #28]
    68b8:	b900      	cbnz	r0, 68bc <Msg::outln(String&)+0x18>
    68ba:	bd70      	pop	{r4, r5, r6, pc}
}
    68bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void Msg::outln(String& txt) {
	if (lcdOutputEnabled) lcd->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
    68c0:	f003 bfa8 	b.w	a814 <delay>
    68c4:	6829      	ldr	r1, [r5, #0]
    68c6:	4620      	mov	r0, r4
    68c8:	f7ff ff62 	bl	6790 <Msg::_writeLogLn(__FlashStringHelper const*)>
    68cc:	e7f3      	b.n	68b6 <Msg::outln(String&)+0x12>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    68ce:	4629      	mov	r1, r5
    68d0:	4807      	ldr	r0, [pc, #28]	; (68f0 <Msg::outln(String&)+0x4c>)
    68d2:	f005 fc67 	bl	c1a4 <Print::print(String const&)>
    68d6:	4806      	ldr	r0, [pc, #24]	; (68f0 <Msg::outln(String&)+0x4c>)
    68d8:	f005 fc8a 	bl	c1f0 <Print::println()>
    68dc:	e7e9      	b.n	68b2 <Msg::outln(String&)+0xe>
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(String& txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    68de:	6a46      	ldr	r6, [r0, #36]	; 0x24
    68e0:	4630      	mov	r0, r6
    68e2:	f005 fc5f 	bl	c1a4 <Print::print(String const&)>
    68e6:	4630      	mov	r0, r6
    68e8:	f005 fc82 	bl	c1f0 <Print::println()>
    68ec:	e7df      	b.n	68ae <Msg::outln(String&)+0xa>
    68ee:	bf00      	nop
    68f0:	20001fdc 	.word	0x20001fdc

000068f4 <Msg::warn(String&, char const*, char const*)>:
void Msg::warn(const char* txt, const char* className, const char* callerName) {
	String buff = txt;
	warn(buff, className, callerName);
}

void Msg::warn(String& txt, const char* className, const char* callerName) {
    68f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68f8:	4604      	mov	r4, r0
    68fa:	b086      	sub	sp, #24
    68fc:	4688      	mov	r8, r1
    68fe:	4616      	mov	r6, r2
    6900:	461f      	mov	r7, r3
	String str = WARN_MSG;
    6902:	6841      	ldr	r1, [r0, #4]
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    6904:	f104 0538 	add.w	r5, r4, #56	; 0x38
	String buff = txt;
	warn(buff, className, callerName);
}

void Msg::warn(String& txt, const char* className, const char* callerName) {
	String str = WARN_MSG;
    6908:	a802      	add	r0, sp, #8
    690a:	f005 fd77 	bl	c3fc <String::String(char const*)>
    690e:	4641      	mov	r1, r8
    6910:	a802      	add	r0, sp, #8
    6912:	f005 fe71 	bl	c5f8 <String::append(String const&)>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    6916:	4633      	mov	r3, r6
    6918:	4629      	mov	r1, r5
    691a:	aa02      	add	r2, sp, #8
    691c:	4620      	mov	r0, r4
    691e:	9700      	str	r7, [sp, #0]
    6920:	f7ff ff08 	bl	6734 <Msg::_buildFullMsg(String&, String&, char const*, char const*)>
	outln(buff);
    6924:	4629      	mov	r1, r5
    6926:	4620      	mov	r0, r4
    6928:	f7ff ffbc 	bl	68a4 <Msg::outln(String&)>
	buff = txt;
	log(buff, className, callerName);
}

void Msg::log(String& txt, const char* className, const char* callerName) {
	if (!logFileEnabled) return;
    692c:	f894 3020 	ldrb.w	r3, [r4, #32]
    6930:	b11b      	cbz	r3, 693a <Msg::warn(String&, char const*, char const*)+0x46>
    6932:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6934:	4620      	mov	r0, r4
    6936:	f7ff ff2b 	bl	6790 <Msg::_writeLogLn(__FlashStringHelper const*)>
	String buff = txt;
	warn(buff, className, callerName);
}

void Msg::warn(String& txt, const char* className, const char* callerName) {
	String str = WARN_MSG;
    693a:	a802      	add	r0, sp, #8
    693c:	f005 fd1e 	bl	c37c <String::~String()>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}
    6940:	b006      	add	sp, #24
    6942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6946:	bf00      	nop

00006948 <Msg::warn(char const*, char const*, char const*)>:
//	lcd->setCursor(0, line);
//	lcd->print(st);
//	if (msgDelay) delay(msgDelay);
//}

void Msg::warn(const char* txt, const char* className, const char* callerName) {
    6948:	b570      	push	{r4, r5, r6, lr}
    694a:	b084      	sub	sp, #16
    694c:	4604      	mov	r4, r0
    694e:	4615      	mov	r5, r2
    6950:	461e      	mov	r6, r3
	String buff = txt;
    6952:	4668      	mov	r0, sp
    6954:	f005 fd52 	bl	c3fc <String::String(char const*)>
	warn(buff, className, callerName);
    6958:	4633      	mov	r3, r6
    695a:	462a      	mov	r2, r5
    695c:	4669      	mov	r1, sp
    695e:	4620      	mov	r0, r4
    6960:	f7ff ffc8 	bl	68f4 <Msg::warn(String&, char const*, char const*)>
//	lcd->print(st);
//	if (msgDelay) delay(msgDelay);
//}

void Msg::warn(const char* txt, const char* className, const char* callerName) {
	String buff = txt;
    6964:	4668      	mov	r0, sp
    6966:	f005 fd09 	bl	c37c <String::~String()>
	warn(buff, className, callerName);
}
    696a:	b004      	add	sp, #16
    696c:	bd70      	pop	{r4, r5, r6, pc}
    696e:	bf00      	nop

00006970 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>:
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}

void Msg::warn(const __FlashStringHelper* txt, const char* className, const char* callerName) {
    6970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		buff = txt;
    6974:	f100 0538 	add.w	r5, r0, #56	; 0x38
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}

void Msg::warn(const __FlashStringHelper* txt, const char* className, const char* callerName) {
    6978:	4604      	mov	r4, r0
    697a:	4616      	mov	r6, r2
    697c:	461f      	mov	r7, r3
		buff = txt;
    697e:	4628      	mov	r0, r5
    6980:	f005 fdf4 	bl	c56c <String::operator=(__FlashStringHelper const*)>
		warn(buff, className, callerName);
    6984:	463b      	mov	r3, r7
    6986:	4632      	mov	r2, r6
    6988:	4629      	mov	r1, r5
    698a:	4620      	mov	r0, r4
}
    698c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log(buff);
}

void Msg::warn(const __FlashStringHelper* txt, const char* className, const char* callerName) {
		buff = txt;
		warn(buff, className, callerName);
    6990:	f7ff bfb0 	b.w	68f4 <Msg::warn(String&, char const*, char const*)>

00006994 <Msg::err(String&, char const*, char const*)>:
void Msg::err(const char* txt, const char* className, const char* callerName) {
	buff = txt;
	err(buff, className, callerName);
}

void Msg::err(String& txt, const char* className, const char* callerName) {
    6994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6998:	4604      	mov	r4, r0
    699a:	b086      	sub	sp, #24
    699c:	4688      	mov	r8, r1
    699e:	4616      	mov	r6, r2
    69a0:	461f      	mov	r7, r3
	String str = ERR_MSG;
    69a2:	6881      	ldr	r1, [r0, #8]
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    69a4:	f104 0538 	add.w	r5, r4, #56	; 0x38
	buff = txt;
	err(buff, className, callerName);
}

void Msg::err(String& txt, const char* className, const char* callerName) {
	String str = ERR_MSG;
    69a8:	a802      	add	r0, sp, #8
    69aa:	f005 fd27 	bl	c3fc <String::String(char const*)>
    69ae:	4641      	mov	r1, r8
    69b0:	a802      	add	r0, sp, #8
    69b2:	f005 fe21 	bl	c5f8 <String::append(String const&)>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    69b6:	4633      	mov	r3, r6
    69b8:	4629      	mov	r1, r5
    69ba:	aa02      	add	r2, sp, #8
    69bc:	4620      	mov	r0, r4
    69be:	9700      	str	r7, [sp, #0]
    69c0:	f7ff feb8 	bl	6734 <Msg::_buildFullMsg(String&, String&, char const*, char const*)>
	outln(buff);
    69c4:	4629      	mov	r1, r5
    69c6:	4620      	mov	r0, r4
    69c8:	f7ff ff6c 	bl	68a4 <Msg::outln(String&)>
	buff = txt;
	log(buff, className, callerName);
}

void Msg::log(String& txt, const char* className, const char* callerName) {
	if (!logFileEnabled) return;
    69cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    69d0:	b11b      	cbz	r3, 69da <Msg::err(String&, char const*, char const*)+0x46>
    69d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    69d4:	4620      	mov	r0, r4
    69d6:	f7ff fedb 	bl	6790 <Msg::_writeLogLn(__FlashStringHelper const*)>
	buff = txt;
	err(buff, className, callerName);
}

void Msg::err(String& txt, const char* className, const char* callerName) {
	String str = ERR_MSG;
    69da:	a802      	add	r0, sp, #8
    69dc:	f005 fcce 	bl	c37c <String::~String()>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}
    69e0:	b006      	add	sp, #24
    69e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69e6:	bf00      	nop

000069e8 <Msg::err(__FlashStringHelper const*, char const*, char const*)>:

void Msg::err(const __FlashStringHelper* txt, const char* className, const char* callerName) {
    69e8:	b570      	push	{r4, r5, r6, lr}
    69ea:	b084      	sub	sp, #16
    69ec:	4604      	mov	r4, r0
    69ee:	4615      	mov	r5, r2
    69f0:	461e      	mov	r6, r3
	String buff = txt;
    69f2:	4668      	mov	r0, sp
    69f4:	f005 fd16 	bl	c424 <String::String(__FlashStringHelper const*)>
	err(buff, className, callerName);
    69f8:	4633      	mov	r3, r6
    69fa:	462a      	mov	r2, r5
    69fc:	4669      	mov	r1, sp
    69fe:	4620      	mov	r0, r4
    6a00:	f7ff ffc8 	bl	6994 <Msg::err(String&, char const*, char const*)>
	outln(buff);
	log(buff);
}

void Msg::err(const __FlashStringHelper* txt, const char* className, const char* callerName) {
	String buff = txt;
    6a04:	4668      	mov	r0, sp
    6a06:	f005 fcb9 	bl	c37c <String::~String()>
	err(buff, className, callerName);
}
    6a0a:	b004      	add	sp, #16
    6a0c:	bd70      	pop	{r4, r5, r6, pc}
    6a0e:	bf00      	nop

00006a10 <Msg::prFreeMem()>:

void Msg::prFreeMem() {
    6a10:	b530      	push	{r4, r5, lr}
    6a12:	b089      	sub	sp, #36	; 0x24
    6a14:	4604      	mov	r4, r0
	buff = String(freeMemory()) + " bytes free.";
    6a16:	f7ff f9cb 	bl	5db0 <freeMemory>
    6a1a:	220a      	movs	r2, #10
    6a1c:	4601      	mov	r1, r0
    6a1e:	4668      	mov	r0, sp
    6a20:	f005 fd44 	bl	c4ac <String::String(int, unsigned char)>
    6a24:	f104 0538 	add.w	r5, r4, #56	; 0x38
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    6a28:	4669      	mov	r1, sp
    6a2a:	a804      	add	r0, sp, #16
    6a2c:	f005 fd0c 	bl	c448 <String::String(String const&)>
    6a30:	490d      	ldr	r1, [pc, #52]	; (6a68 <Msg::prFreeMem()+0x58>)
    6a32:	a804      	add	r0, sp, #16
    6a34:	f005 fe1e 	bl	c674 <operator+(StringSumHelper const&, char const*)>
    6a38:	4601      	mov	r1, r0
    6a3a:	4628      	mov	r0, r5
    6a3c:	f005 fd7c 	bl	c538 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    6a40:	a804      	add	r0, sp, #16
    6a42:	f005 fc9b 	bl	c37c <String::~String()>
    6a46:	4668      	mov	r0, sp
    6a48:	f005 fc98 	bl	c37c <String::~String()>
	outln(buff); 
    6a4c:	4629      	mov	r1, r5
    6a4e:	4620      	mov	r0, r4
    6a50:	f7ff ff28 	bl	68a4 <Msg::outln(String&)>
	buff = txt;
	log(buff, className, callerName);
}

void Msg::log(String& txt, const char* className, const char* callerName) {
	if (!logFileEnabled) return;
    6a54:	f894 3020 	ldrb.w	r3, [r4, #32]
    6a58:	b11b      	cbz	r3, 6a62 <Msg::prFreeMem()+0x52>
    6a5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6a5c:	4620      	mov	r0, r4
    6a5e:	f7ff fe97 	bl	6790 <Msg::_writeLogLn(__FlashStringHelper const*)>

void Msg::prFreeMem() {
	buff = String(freeMemory()) + " bytes free.";
	outln(buff); 
	log(buff);
}
    6a62:	b009      	add	sp, #36	; 0x24
    6a64:	bd30      	pop	{r4, r5, pc}
    6a66:	bf00      	nop
    6a68:	20001654 	.word	0x20001654

00006a6c <Msg::_writeLog(__FlashStringHelper const*)>:
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLog(const __FlashStringHelper* msg) {
    6a6c:	b530      	push	{r4, r5, lr}
    6a6e:	b089      	sub	sp, #36	; 0x24
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6a70:	6a82      	ldr	r2, [r0, #40]	; 0x28
    6a72:	2313      	movs	r3, #19
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLog(const __FlashStringHelper* msg) {
    6a74:	460d      	mov	r5, r1
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6a76:	4668      	mov	r0, sp
    6a78:	490c      	ldr	r1, [pc, #48]	; (6aac <Msg::_writeLog(__FlashStringHelper const*)+0x40>)
    6a7a:	f001 fb21 	bl	80c0 <SDClass::open(char const*, unsigned char)>
	if (!f) return false;
    6a7e:	4668      	mov	r0, sp
    6a80:	f001 fa6c 	bl	7f5c <File::operator bool()>
    6a84:	4604      	mov	r4, r0
    6a86:	b150      	cbz	r0, 6a9e <Msg::_writeLog(__FlashStringHelper const*)+0x32>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6a88:	4628      	mov	r0, r5
    6a8a:	f007 f919 	bl	dcc0 <strlen>
    6a8e:	4629      	mov	r1, r5
    6a90:	4602      	mov	r2, r0
    6a92:	4668      	mov	r0, sp
    6a94:	f001 f9b0 	bl	7df8 <File::write(unsigned char const*, unsigned int)>
	f.print(msg);
	f.close();
    6a98:	4668      	mov	r0, sp
    6a9a:	f001 fa51 	bl	7f40 <File::close()>
	return true;
}

// appends log text-line
bool Msg::_writeLog(const __FlashStringHelper* msg) {
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6a9e:	4668      	mov	r0, sp
    6aa0:	f001 fa38 	bl	7f14 <File::~File()>
	if (!f) return false;
	f.print(msg);
	f.close();
	return true;
}
    6aa4:	4620      	mov	r0, r4
    6aa6:	b009      	add	sp, #36	; 0x24
    6aa8:	bd30      	pop	{r4, r5, pc}
    6aaa:	bf00      	nop
    6aac:	20002ad0 	.word	0x20002ad0

00006ab0 <Msg::out(__FlashStringHelper const*)>:
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
    6ab0:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(const __FlashStringHelper *txt) {
    6ab2:	b570      	push	{r4, r5, r6, lr}
    6ab4:	4604      	mov	r4, r0
    6ab6:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->print(txt);
    6ab8:	b9bb      	cbnz	r3, 6aea <Msg::out(__FlashStringHelper const*)+0x3a>
	if (serialOutputEnabled) Serial.print(txt);
    6aba:	7fe3      	ldrb	r3, [r4, #31]
    6abc:	b96b      	cbnz	r3, 6ada <Msg::out(__FlashStringHelper const*)+0x2a>
	if (normalOutputToLog) _writeLog(txt);
    6abe:	7d23      	ldrb	r3, [r4, #20]
    6ac0:	b933      	cbnz	r3, 6ad0 <Msg::out(__FlashStringHelper const*)+0x20>
	if (mdelay) delay(mdelay);
    6ac2:	8ba0      	ldrh	r0, [r4, #28]
    6ac4:	b900      	cbnz	r0, 6ac8 <Msg::out(__FlashStringHelper const*)+0x18>
    6ac6:	bd70      	pop	{r4, r5, r6, pc}
}
    6ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
    6acc:	f003 bea2 	b.w	a814 <delay>
}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
    6ad0:	4629      	mov	r1, r5
    6ad2:	4620      	mov	r0, r4
    6ad4:	f7ff ffca 	bl	6a6c <Msg::_writeLog(__FlashStringHelper const*)>
    6ad8:	e7f3      	b.n	6ac2 <Msg::out(__FlashStringHelper const*)+0x12>
    6ada:	4628      	mov	r0, r5
    6adc:	f007 f8f0 	bl	dcc0 <strlen>
    6ae0:	4601      	mov	r1, r0
    6ae2:	4628      	mov	r0, r5
    6ae4:	f005 f9c2 	bl	be6c <usb_serial_write>
    6ae8:	e7e9      	b.n	6abe <Msg::out(__FlashStringHelper const*)+0xe>
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
    6aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
    6aec:	4608      	mov	r0, r1
    6aee:	f007 f8e7 	bl	dcc0 <strlen>
    6af2:	4629      	mov	r1, r5
    6af4:	6833      	ldr	r3, [r6, #0]
    6af6:	4602      	mov	r2, r0
    6af8:	4630      	mov	r0, r6
    6afa:	685b      	ldr	r3, [r3, #4]
    6afc:	4798      	blx	r3
    6afe:	e7dc      	b.n	6aba <Msg::out(__FlashStringHelper const*)+0xa>

00006b00 <Msg::out(char const*)>:
    6b00:	f7ff bfd6 	b.w	6ab0 <Msg::out(__FlashStringHelper const*)>

00006b04 <Msg::out(unsigned long, int)>:
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->print(n);
    6b04:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(uint32_t n, int base) {
    6b06:	b570      	push	{r4, r5, r6, lr}
    6b08:	4604      	mov	r4, r0
    6b0a:	b084      	sub	sp, #16
    6b0c:	4616      	mov	r6, r2
    6b0e:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->print(n);
    6b10:	b9eb      	cbnz	r3, 6b4e <Msg::out(unsigned long, int)+0x4a>
	if (serialOutputEnabled) Serial.print(n, base);
    6b12:	7fe3      	ldrb	r3, [r4, #31]
    6b14:	b9a3      	cbnz	r3, 6b40 <Msg::out(unsigned long, int)+0x3c>
	if (normalOutputToLog) {
    6b16:	7d23      	ldrb	r3, [r4, #20]
    6b18:	b92b      	cbnz	r3, 6b26 <Msg::out(unsigned long, int)+0x22>
		String st = String(n, base);
		_writeLog(st);
	}
	if (mdelay) delay(mdelay);
    6b1a:	8ba0      	ldrh	r0, [r4, #28]
    6b1c:	b108      	cbz	r0, 6b22 <Msg::out(unsigned long, int)+0x1e>
    6b1e:	f003 fe79 	bl	a814 <delay>
}
    6b22:	b004      	add	sp, #16
    6b24:	bd70      	pop	{r4, r5, r6, pc}

void Msg::out(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->print(n);
	if (serialOutputEnabled) Serial.print(n, base);
	if (normalOutputToLog) {
		String st = String(n, base);
    6b26:	b2f2      	uxtb	r2, r6
    6b28:	4629      	mov	r1, r5
    6b2a:	4668      	mov	r0, sp
    6b2c:	f005 fcd2 	bl	c4d4 <String::String(unsigned long, unsigned char)>

protected:
	void _buildFullMsg(String& destStr, String& msg, const char* className, const char* funcName);
	bool _writeLog(const char* txt);
	bool _writeLog(const __FlashStringHelper* txt);
	inline bool _writeLog(String& txt) { return _writeLog(txt.c_str()); }
    6b30:	9900      	ldr	r1, [sp, #0]
    6b32:	4620      	mov	r0, r4
    6b34:	f7ff ff9a 	bl	6a6c <Msg::_writeLog(__FlashStringHelper const*)>
    6b38:	4668      	mov	r0, sp
    6b3a:	f005 fc1f 	bl	c37c <String::~String()>
    6b3e:	e7ec      	b.n	6b1a <Msg::out(unsigned long, int)+0x16>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6b40:	2300      	movs	r3, #0
    6b42:	b2f2      	uxtb	r2, r6
    6b44:	4629      	mov	r1, r5
    6b46:	4805      	ldr	r0, [pc, #20]	; (6b5c <Msg::out(unsigned long, int)+0x58>)
    6b48:	f005 fb8a 	bl	c260 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6b4c:	e7e3      	b.n	6b16 <Msg::out(unsigned long, int)+0x12>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6b4e:	2300      	movs	r3, #0
    6b50:	220a      	movs	r2, #10
    6b52:	6a40      	ldr	r0, [r0, #36]	; 0x24
    6b54:	f005 fb84 	bl	c260 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6b58:	e7db      	b.n	6b12 <Msg::out(unsigned long, int)+0xe>
    6b5a:	bf00      	nop
    6b5c:	20001fdc 	.word	0x20001fdc

00006b60 <NVData_class::NVData_class()>:
#include "NVData.h"
#include <EEPROM.h>

/** attenzione: MANCA supporto dispositivo FRAM **/

NVData_class::NVData_class() {
    6b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b62:	4912      	ldr	r1, [pc, #72]	; (6bac <NVData_class::NVData_class()+0x4c>)
    6b64:	4604      	mov	r4, r0
    6b66:	4e12      	ldr	r6, [pc, #72]	; (6bb0 <NVData_class::NVData_class()+0x50>)
    6b68:	3034      	adds	r0, #52	; 0x34
    6b6a:	4d12      	ldr	r5, [pc, #72]	; (6bb4 <NVData_class::NVData_class()+0x54>)
    6b6c:	4a12      	ldr	r2, [pc, #72]	; (6bb8 <NVData_class::NVData_class()+0x58>)
    6b6e:	4b13      	ldr	r3, [pc, #76]	; (6bbc <NVData_class::NVData_class()+0x5c>)
    6b70:	6026      	str	r6, [r4, #0]
    6b72:	6065      	str	r5, [r4, #4]
    6b74:	60a1      	str	r1, [r4, #8]
    6b76:	60e2      	str	r2, [r4, #12]
    6b78:	4911      	ldr	r1, [pc, #68]	; (6bc0 <NVData_class::NVData_class()+0x60>)
    6b7a:	4a12      	ldr	r2, [pc, #72]	; (6bc4 <NVData_class::NVData_class()+0x64>)
    6b7c:	6123      	str	r3, [r4, #16]
    6b7e:	4f12      	ldr	r7, [pc, #72]	; (6bc8 <NVData_class::NVData_class()+0x68>)
    6b80:	4b12      	ldr	r3, [pc, #72]	; (6bcc <NVData_class::NVData_class()+0x6c>)
    6b82:	4e13      	ldr	r6, [pc, #76]	; (6bd0 <NVData_class::NVData_class()+0x70>)
    6b84:	4d13      	ldr	r5, [pc, #76]	; (6bd4 <NVData_class::NVData_class()+0x74>)
    6b86:	6262      	str	r2, [r4, #36]	; 0x24
    6b88:	62a3      	str	r3, [r4, #40]	; 0x28
    6b8a:	6167      	str	r7, [r4, #20]
    6b8c:	61a6      	str	r6, [r4, #24]
    6b8e:	61e5      	str	r5, [r4, #28]
    6b90:	6221      	str	r1, [r4, #32]
    6b92:	f001 f9af 	bl	7ef4 <File::File()>
	immediateWriteMode = false;
    6b96:	2300      	movs	r3, #0
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
    6b98:	6822      	ldr	r2, [r4, #0]
	_fileBaseAdr = 0;
}
    6b9a:	4620      	mov	r0, r4
#include <EEPROM.h>

/** attenzione: MANCA supporto dispositivo FRAM **/

NVData_class::NVData_class() {
	immediateWriteMode = false;
    6b9c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
    6ba0:	6322      	str	r2, [r4, #48]	; 0x30

/** attenzione: MANCA supporto dispositivo FRAM **/

NVData_class::NVData_class() {
	immediateWriteMode = false;
	_ready = false;
    6ba2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	_fileName = (char*)DEFAULT_FILENAME;
	_fileBaseAdr = 0;
    6ba6:	6623      	str	r3, [r4, #96]	; 0x60
}
    6ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6baa:	bf00      	nop
    6bac:	20001680 	.word	0x20001680
    6bb0:	20001664 	.word	0x20001664
    6bb4:	20001670 	.word	0x20001670
    6bb8:	20001698 	.word	0x20001698
    6bbc:	200016ac 	.word	0x200016ac
    6bc0:	20001728 	.word	0x20001728
    6bc4:	20001744 	.word	0x20001744
    6bc8:	200016bc 	.word	0x200016bc
    6bcc:	20001760 	.word	0x20001760
    6bd0:	200016c8 	.word	0x200016c8
    6bd4:	200016ec 	.word	0x200016ec

00006bd8 <NVData_class::_warnMsg(String, String)>:

	_pendingChanges = false;
	return true;
}

void NVData_class::_warnMsg(String header, String msg) {
    6bd8:	b570      	push	{r4, r5, r6, lr}
	Serial.print("WARNING: NVData::");
	Serial.print(header);
    6bda:	4c0c      	ldr	r4, [pc, #48]	; (6c0c <NVData_class::_warnMsg(String, String)+0x34>)

	_pendingChanges = false;
	return true;
}

void NVData_class::_warnMsg(String header, String msg) {
    6bdc:	460e      	mov	r6, r1
    6bde:	480c      	ldr	r0, [pc, #48]	; (6c10 <NVData_class::_warnMsg(String, String)+0x38>)
    6be0:	2111      	movs	r1, #17
    6be2:	4615      	mov	r5, r2
    6be4:	f005 f942 	bl	be6c <usb_serial_write>
	Serial.print("WARNING: NVData::");
	Serial.print(header);
    6be8:	4631      	mov	r1, r6
    6bea:	4620      	mov	r0, r4
    6bec:	f005 fada 	bl	c1a4 <Print::print(String const&)>
    6bf0:	2104      	movs	r1, #4
    6bf2:	4808      	ldr	r0, [pc, #32]	; (6c14 <NVData_class::_warnMsg(String, String)+0x3c>)
    6bf4:	f005 f93a 	bl	be6c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    6bf8:	4629      	mov	r1, r5
    6bfa:	4620      	mov	r0, r4
    6bfc:	f005 fad2 	bl	c1a4 <Print::print(String const&)>
    6c00:	4620      	mov	r0, r4
	Serial.print("(): ");
	Serial.println(msg);
}
    6c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c06:	f005 baf3 	b.w	c1f0 <Print::println()>
    6c0a:	bf00      	nop
    6c0c:	20001fdc 	.word	0x20001fdc
    6c10:	20001774 	.word	0x20001774
    6c14:	20001788 	.word	0x20001788

00006c18 <NVData_class::_loadData()>:

bool NVData_class::_loadData() {
	const char* hdr = "_loadData";
	uint32_t sz;

	switch (device) {
    6c18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    6c1c:	2b01      	cmp	r3, #1
	}
	//else _warnMsg("_createEmptyFile", "Can't create settings file!");
	return (bool)f;
}

bool NVData_class::_loadData() {
    6c1e:	b570      	push	{r4, r5, r6, lr}
    6c20:	4605      	mov	r5, r0
    6c22:	b08c      	sub	sp, #48	; 0x30
	const char* hdr = "_loadData";
	uint32_t sz;

	switch (device) {
    6c24:	d02e      	beq.n	6c84 <NVData_class::_loadData()+0x6c>
    6c26:	d31c      	bcc.n	6c62 <NVData_class::_loadData()+0x4a>
    6c28:	2b02      	cmp	r3, #2
    6c2a:	d003      	beq.n	6c34 <NVData_class::_loadData()+0x1c>
	case FRAM_NVD:
		// TODO..
		_warnMsg(hdr, notImplemStr);
		break;
	}
	return true;
    6c2c:	2401      	movs	r4, #1
}
    6c2e:	4620      	mov	r0, r4
    6c30:	b00c      	add	sp, #48	; 0x30
    6c32:	bd70      	pop	{r4, r5, r6, pc}
		_f.read(_data, _size);
		_f.close();
		break;
	case FRAM_NVD:
		// TODO..
		_warnMsg(hdr, notImplemStr);
    6c34:	4941      	ldr	r1, [pc, #260]	; (6d3c <NVData_class::_loadData()+0x124>)
    6c36:	4668      	mov	r0, sp
    6c38:	f005 fbe0 	bl	c3fc <String::String(char const*)>
    6c3c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6c3e:	a804      	add	r0, sp, #16
		break;
	}
	return true;
    6c40:	2401      	movs	r4, #1
		_f.read(_data, _size);
		_f.close();
		break;
	case FRAM_NVD:
		// TODO..
		_warnMsg(hdr, notImplemStr);
    6c42:	f005 fbef 	bl	c424 <String::String(__FlashStringHelper const*)>
    6c46:	aa04      	add	r2, sp, #16
    6c48:	4669      	mov	r1, sp
    6c4a:	4628      	mov	r0, r5
    6c4c:	f7ff ffc4 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6c50:	a804      	add	r0, sp, #16
    6c52:	f005 fb93 	bl	c37c <String::~String()>
    6c56:	4668      	mov	r0, sp
    6c58:	f005 fb90 	bl	c37c <String::~String()>
		break;
	}
	return true;
}
    6c5c:	4620      	mov	r0, r4
    6c5e:	b00c      	add	sp, #48	; 0x30
    6c60:	bd70      	pop	{r4, r5, r6, pc}
	const char* hdr = "_loadData";
	uint32_t sz;

	switch (device) {
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) _data[i] = EEPROM.read(i);
    6c62:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    6c66:	2b00      	cmp	r3, #0
    6c68:	d0e0      	beq.n	6c2c <NVData_class::_loadData()+0x14>
    6c6a:	2400      	movs	r4, #0

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    6c6c:	4620      	mov	r0, r4
    6c6e:	6dae      	ldr	r6, [r5, #88]	; 0x58
    6c70:	f003 ff96 	bl	aba0 <eeprom_read_byte>
    6c74:	1c63      	adds	r3, r4, #1
    6c76:	5530      	strb	r0, [r6, r4]
    6c78:	b29c      	uxth	r4, r3
    6c7a:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    6c7e:	42a3      	cmp	r3, r4
    6c80:	d8f4      	bhi.n	6c6c <NVData_class::_loadData()+0x54>
    6c82:	e7d3      	b.n	6c2c <NVData_class::_loadData()+0x14>
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
    6c84:	2100      	movs	r1, #0
		_f = SD.open(_fileName, FILE_READ);
    6c86:	6b02      	ldr	r2, [r0, #48]	; 0x30
	switch (device) {
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) _data[i] = EEPROM.read(i);
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
    6c88:	6601      	str	r1, [r0, #96]	; 0x60
		_f = SD.open(_fileName, FILE_READ);
    6c8a:	a804      	add	r0, sp, #16
    6c8c:	492c      	ldr	r1, [pc, #176]	; (6d40 <NVData_class::_loadData()+0x128>)
    6c8e:	f001 fa17 	bl	80c0 <SDClass::open(char const*, unsigned char)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    6c92:	aa0c      	add	r2, sp, #48	; 0x30
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    6c94:	f89d 4014 	ldrb.w	r4, [sp, #20]
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
    6c98:	f105 0341 	add.w	r3, r5, #65	; 0x41
    6c9c:	f812 6d14 	ldrb.w	r6, [r2, #-20]!
    6ca0:	f105 004e 	add.w	r0, r5, #78	; 0x4e
    6ca4:	9906      	ldr	r1, [sp, #24]
    6ca6:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    6caa:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    6cae:	63e9      	str	r1, [r5, #60]	; 0x3c
    6cb0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6cb4:	f803 1b01 	strb.w	r1, [r3], #1
    6cb8:	4298      	cmp	r0, r3
    6cba:	d1f9      	bne.n	6cb0 <NVData_class::_loadData()+0x98>
    6cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		if (!_f) {
    6cbe:	f105 0634 	add.w	r6, r5, #52	; 0x34
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) _data[i] = EEPROM.read(i);
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
		_f = SD.open(_fileName, FILE_READ);
    6cc2:	a804      	add	r0, sp, #16
    6cc4:	652b      	str	r3, [r5, #80]	; 0x50
    6cc6:	f001 f925 	bl	7f14 <File::~File()>
		if (!_f) {
    6cca:	4630      	mov	r0, r6
    6ccc:	f001 f946 	bl	7f5c <File::operator bool()>
    6cd0:	4604      	mov	r4, r0
    6cd2:	b1e8      	cbz	r0, 6d10 <NVData_class::_loadData()+0xf8>
			_warnMsg(hdr, "can't open SD file");
			return false;
		}
		sz = _f.size();
    6cd4:	4630      	mov	r0, r6
    6cd6:	f001 f92f 	bl	7f38 <File::size()>
		if (sz < _size) {
    6cda:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
    6cde:	4288      	cmp	r0, r1
    6ce0:	d21d      	bcs.n	6d1e <NVData_class::_loadData()+0x106>
			_warnMsg(hdr, "target file too short: ignored");
    6ce2:	4916      	ldr	r1, [pc, #88]	; (6d3c <NVData_class::_loadData()+0x124>)
    6ce4:	a804      	add	r0, sp, #16
    6ce6:	f005 fb89 	bl	c3fc <String::String(char const*)>
			return false;
    6cea:	2400      	movs	r4, #0
			_warnMsg(hdr, "can't open SD file");
			return false;
		}
		sz = _f.size();
		if (sz < _size) {
			_warnMsg(hdr, "target file too short: ignored");
    6cec:	4668      	mov	r0, sp
    6cee:	4915      	ldr	r1, [pc, #84]	; (6d44 <NVData_class::_loadData()+0x12c>)
    6cf0:	f005 fb84 	bl	c3fc <String::String(char const*)>
    6cf4:	466a      	mov	r2, sp
    6cf6:	a904      	add	r1, sp, #16
    6cf8:	4628      	mov	r0, r5
    6cfa:	f7ff ff6d 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6cfe:	4668      	mov	r0, sp
    6d00:	f005 fb3c 	bl	c37c <String::~String()>
    6d04:	a804      	add	r0, sp, #16
    6d06:	f005 fb39 	bl	c37c <String::~String()>
		// TODO..
		_warnMsg(hdr, notImplemStr);
		break;
	}
	return true;
}
    6d0a:	4620      	mov	r0, r4
    6d0c:	b00c      	add	sp, #48	; 0x30
    6d0e:	bd70      	pop	{r4, r5, r6, pc}
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
		_f = SD.open(_fileName, FILE_READ);
		if (!_f) {
			_warnMsg(hdr, "can't open SD file");
    6d10:	490a      	ldr	r1, [pc, #40]	; (6d3c <NVData_class::_loadData()+0x124>)
    6d12:	a804      	add	r0, sp, #16
    6d14:	f005 fb72 	bl	c3fc <String::String(char const*)>
    6d18:	4668      	mov	r0, sp
    6d1a:	490b      	ldr	r1, [pc, #44]	; (6d48 <NVData_class::_loadData()+0x130>)
    6d1c:	e7e8      	b.n	6cf0 <NVData_class::_loadData()+0xd8>
		sz = _f.size();
		if (sz < _size) {
			_warnMsg(hdr, "target file too short: ignored");
			return false;
		}
		_fileBaseAdr = sz - _size;
    6d1e:	1a41      	subs	r1, r0, r1
		_f.seek(_fileBaseAdr);
    6d20:	4630      	mov	r0, r6
		sz = _f.size();
		if (sz < _size) {
			_warnMsg(hdr, "target file too short: ignored");
			return false;
		}
		_fileBaseAdr = sz - _size;
    6d22:	6629      	str	r1, [r5, #96]	; 0x60
		_f.seek(_fileBaseAdr);
    6d24:	f001 f8fe 	bl	7f24 <File::seek(unsigned long)>
		_f.read(_data, _size);
    6d28:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    6d2c:	6da9      	ldr	r1, [r5, #88]	; 0x58
    6d2e:	4630      	mov	r0, r6
    6d30:	f001 f8f2 	bl	7f18 <File::read(void*, unsigned short)>
		_f.close();
    6d34:	4630      	mov	r0, r6
    6d36:	f001 f903 	bl	7f40 <File::close()>
    6d3a:	e778      	b.n	6c2e <NVData_class::_loadData()+0x16>
    6d3c:	20001790 	.word	0x20001790
    6d40:	20002ad0 	.word	0x20002ad0
    6d44:	200017b0 	.word	0x200017b0
    6d48:	2000179c 	.word	0x2000179c

00006d4c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)>:
//	if (!_ready) _warnMsg(hdr, "Can't load data!");
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
    6d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d4e:	b08d      	sub	sp, #52	; 0x34
    6d50:	4616      	mov	r6, r2
    6d52:	4604      	mov	r4, r0
    6d54:	460f      	mov	r7, r1
	String st;
    6d56:	4668      	mov	r0, sp
    6d58:	2100      	movs	r1, #0
//	if (!_ready) _warnMsg(hdr, "Can't load data!");
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
    6d5a:	461d      	mov	r5, r3
	String st;
    6d5c:	f005 fb4e 	bl	c3fc <String::String(char const*)>
	const char* hdr = "begin";

	device = d;
	if (size > MAX_SIZE) {
    6d60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
	const char* hdr = "begin";

	device = d;
    6d64:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	if (size > MAX_SIZE) {
    6d68:	d82c      	bhi.n	6dc4 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x78>
		st = "NVData size ";
		st += size;
		st += " too big: trimmed to ";
		st += MAX_SIZE;
		_warnMsg(hdr, st);
		size = MAX_SIZE;
    6d6a:	4630      	mov	r0, r6
	}
	_size = size;
    6d6c:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
	_data = new byte[_size];
    6d70:	f005 f9fc 	bl	c16c <operator new[](unsigned int)>
	_ready = false;
    6d74:	2300      	movs	r3, #0
    void writeWord(uint16_t addr, uint16_t val);
    uint32_t readDWord(uint16_t addr);
    void writeDWord(uint16_t addr, uint32_t val);
    void dump(uint16_t from = 0, uint16_t to = 0);
    void update();
    inline void clearAll() { for (uint16_t i = 0; i < _size; i++) _data[i] = 0; }
    6d76:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		st += MAX_SIZE;
		_warnMsg(hdr, st);
		size = MAX_SIZE;
	}
	_size = size;
	_data = new byte[_size];
    6d7a:	65a0      	str	r0, [r4, #88]	; 0x58
	_ready = false;
    6d7c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    6d80:	b14a      	cbz	r2, 6d96 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x4a>
    6d82:	461e      	mov	r6, r3
    6d84:	e000      	b.n	6d88 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x3c>
    6d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d88:	1c59      	adds	r1, r3, #1
    6d8a:	54c6      	strb	r6, [r0, r3]
    6d8c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    6d90:	b28b      	uxth	r3, r1
    6d92:	429a      	cmp	r2, r3
    6d94:	d8f7      	bhi.n	6d86 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x3a>

	clearAll();
	if (device == FRAM_NVD) {
    6d96:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    6d9a:	2b02      	cmp	r3, #2
    6d9c:	d06d      	beq.n	6e7a <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x12e>
		_warnMsg(hdr, notImplemStr);
		return false;
	}
	if (device == SDFILE_NVD) {
		if (cs_pin == 0) {
    6d9e:	b90d      	cbnz	r5, 6da4 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x58>
    6da0:	2b01      	cmp	r3, #1
    6da2:	d051      	beq.n	6e48 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0xfc>
		//if (!SD.begin(cs_pin)) {
		//	_warnMsg(hdr, "cannot init SD device!");
		//	return false;
		//}
	}
	_pendingChanges = false;
    6da4:	2300      	movs	r3, #0
	_ready = _loadData();
    6da6:	4620      	mov	r0, r4
		//if (!SD.begin(cs_pin)) {
		//	_warnMsg(hdr, "cannot init SD device!");
		//	return false;
		//}
	}
	_pendingChanges = false;
    6da8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	_ready = _loadData();
    6dac:	f7ff ff34 	bl	6c18 <NVData_class::_loadData()>
    6db0:	4605      	mov	r5, r0
    6db2:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
    6db6:	b360      	cbz	r0, 6e12 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0xc6>
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
    6db8:	4668      	mov	r0, sp
    6dba:	f005 fadf 	bl	c37c <String::~String()>
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}
    6dbe:	4628      	mov	r0, r5
    6dc0:	b00d      	add	sp, #52	; 0x34
    6dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	String st;
	const char* hdr = "begin";

	device = d;
	if (size > MAX_SIZE) {
		st = "NVData size ";
    6dc4:	4932      	ldr	r1, [pc, #200]	; (6e90 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x144>)
    6dc6:	4668      	mov	r0, sp
    6dc8:	f005 fbc6 	bl	c558 <String::operator=(char const*)>
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    6dcc:	4631      	mov	r1, r6
    6dce:	4668      	mov	r0, sp
    6dd0:	f44f 6680 	mov.w	r6, #1024	; 0x400
    6dd4:	f005 fc32 	bl	c63c <String::append(int)>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    6dd8:	492e      	ldr	r1, [pc, #184]	; (6e94 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x148>)
    6dda:	4668      	mov	r0, sp
    6ddc:	f005 fc10 	bl	c600 <String::append(char const*)>
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    6de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6de4:	4668      	mov	r0, sp
    6de6:	f005 fc29 	bl	c63c <String::append(int)>
		st += size;
		st += " too big: trimmed to ";
		st += MAX_SIZE;
		_warnMsg(hdr, st);
    6dea:	a804      	add	r0, sp, #16
    6dec:	492a      	ldr	r1, [pc, #168]	; (6e98 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6dee:	f005 fb05 	bl	c3fc <String::String(char const*)>
    6df2:	4669      	mov	r1, sp
    6df4:	a808      	add	r0, sp, #32
    6df6:	f005 fb27 	bl	c448 <String::String(String const&)>
    6dfa:	aa08      	add	r2, sp, #32
    6dfc:	a904      	add	r1, sp, #16
    6dfe:	4620      	mov	r0, r4
    6e00:	f7ff feea 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6e04:	a808      	add	r0, sp, #32
    6e06:	f005 fab9 	bl	c37c <String::~String()>
    6e0a:	a804      	add	r0, sp, #16
    6e0c:	f005 fab6 	bl	c37c <String::~String()>
    6e10:	e7ab      	b.n	6d6a <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x1e>
		//	return false;
		//}
	}
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
    6e12:	4921      	ldr	r1, [pc, #132]	; (6e98 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6e14:	a804      	add	r0, sp, #16
    6e16:	f005 faf1 	bl	c3fc <String::String(char const*)>
    6e1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6e1c:	a808      	add	r0, sp, #32
    6e1e:	f005 fb01 	bl	c424 <String::String(__FlashStringHelper const*)>
    6e22:	aa08      	add	r2, sp, #32
    6e24:	a904      	add	r1, sp, #16
    6e26:	4620      	mov	r0, r4
    6e28:	f7ff fed6 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6e2c:	a808      	add	r0, sp, #32
    6e2e:	f005 faa5 	bl	c37c <String::~String()>
    6e32:	a804      	add	r0, sp, #16
    6e34:	f005 faa2 	bl	c37c <String::~String()>
    6e38:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
    6e3c:	4668      	mov	r0, sp
    6e3e:	f005 fa9d 	bl	c37c <String::~String()>
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}
    6e42:	4628      	mov	r0, r5
    6e44:	b00d      	add	sp, #52	; 0x34
    6e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_warnMsg(hdr, notImplemStr);
		return false;
	}
	if (device == SDFILE_NVD) {
		if (cs_pin == 0) {
			_warnMsg(hdr, "undefined SPI DS CS pin!");
    6e48:	4913      	ldr	r1, [pc, #76]	; (6e98 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6e4a:	a804      	add	r0, sp, #16
    6e4c:	f005 fad6 	bl	c3fc <String::String(char const*)>
    6e50:	a808      	add	r0, sp, #32
    6e52:	4912      	ldr	r1, [pc, #72]	; (6e9c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x150>)
    6e54:	f005 fad2 	bl	c3fc <String::String(char const*)>
    6e58:	aa08      	add	r2, sp, #32
    6e5a:	a904      	add	r1, sp, #16
    6e5c:	4620      	mov	r0, r4
    6e5e:	f7ff febb 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6e62:	a808      	add	r0, sp, #32
    6e64:	f005 fa8a 	bl	c37c <String::~String()>
    6e68:	a804      	add	r0, sp, #16
    6e6a:	f005 fa87 	bl	c37c <String::~String()>
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
    6e6e:	4668      	mov	r0, sp
    6e70:	f005 fa84 	bl	c37c <String::~String()>
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}
    6e74:	4628      	mov	r0, r5
    6e76:	b00d      	add	sp, #52	; 0x34
    6e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_data = new byte[_size];
	_ready = false;

	clearAll();
	if (device == FRAM_NVD) {
		_warnMsg(hdr, notImplemStr);
    6e7a:	4907      	ldr	r1, [pc, #28]	; (6e98 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6e7c:	a804      	add	r0, sp, #16
    6e7e:	f005 fabd 	bl	c3fc <String::String(char const*)>
    6e82:	a808      	add	r0, sp, #32
    6e84:	6a61      	ldr	r1, [r4, #36]	; 0x24
		return false;
    6e86:	2500      	movs	r5, #0
	_data = new byte[_size];
	_ready = false;

	clearAll();
	if (device == FRAM_NVD) {
		_warnMsg(hdr, notImplemStr);
    6e88:	f005 facc 	bl	c424 <String::String(__FlashStringHelper const*)>
    6e8c:	e7e4      	b.n	6e58 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x10c>
    6e8e:	bf00      	nop
    6e90:	200017d0 	.word	0x200017d0
    6e94:	200017e0 	.word	0x200017e0
    6e98:	20001514 	.word	0x20001514
    6e9c:	200017f8 	.word	0x200017f8

00006ea0 <NVData_class::_check(String, unsigned short, unsigned short)>:
	Serial.print(header);
	Serial.print("(): ");
	Serial.println(msg);
}

bool NVData_class::_check(String hdr, uint16_t addr, uint16_t addrLimit) {
    6ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!_ready) {
    6ea2:	f890 5054 	ldrb.w	r5, [r0, #84]	; 0x54
	Serial.print(header);
	Serial.print("(): ");
	Serial.println(msg);
}

bool NVData_class::_check(String hdr, uint16_t addr, uint16_t addrLimit) {
    6ea6:	b08d      	sub	sp, #52	; 0x34
    6ea8:	4604      	mov	r4, r0
	if (!_ready) {
    6eaa:	2d00      	cmp	r5, #0
    6eac:	d041      	beq.n	6f32 <NVData_class::_check(String, unsigned short, unsigned short)+0x92>
    6eae:	4616      	mov	r6, r2
    6eb0:	460f      	mov	r7, r1
		_warnMsg(hdr, notReadyStr);
		return false;
	}
	if (addrLimit == 0) addrLimit = _size - 1;
    6eb2:	b91b      	cbnz	r3, 6ebc <NVData_class::_check(String, unsigned short, unsigned short)+0x1c>
    6eb4:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    6eb8:	3b01      	subs	r3, #1
    6eba:	b29b      	uxth	r3, r3
	if (addr > addrLimit) {
    6ebc:	42b3      	cmp	r3, r6
    6ebe:	d302      	bcc.n	6ec6 <NVData_class::_check(String, unsigned short, unsigned short)+0x26>
		st += ")";
		_warnMsg(hdr, st);
		return false;
	}
	return true;
}
    6ec0:	4628      	mov	r0, r5
    6ec2:	b00d      	add	sp, #52	; 0x34
    6ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_warnMsg(hdr, notReadyStr);
		return false;
	}
	if (addrLimit == 0) addrLimit = _size - 1;
	if (addr > addrLimit) {
		_warnMsg(hdr, invalidAddrStr);
    6ec6:	4639      	mov	r1, r7
    6ec8:	a808      	add	r0, sp, #32
    6eca:	f005 fabd 	bl	c448 <String::String(String const&)>
    6ece:	6921      	ldr	r1, [r4, #16]
    6ed0:	a804      	add	r0, sp, #16
    6ed2:	2500      	movs	r5, #0
    6ed4:	f005 faa6 	bl	c424 <String::String(__FlashStringHelper const*)>
    6ed8:	aa04      	add	r2, sp, #16
    6eda:	a908      	add	r1, sp, #32
    6edc:	4620      	mov	r0, r4
    6ede:	f7ff fe7b 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6ee2:	a804      	add	r0, sp, #16
    6ee4:	f005 fa4a 	bl	c37c <String::~String()>
    6ee8:	a808      	add	r0, sp, #32
    6eea:	f005 fa47 	bl	c37c <String::~String()>
		String st = "(addr: " + addr;
    6eee:	491b      	ldr	r1, [pc, #108]	; (6f5c <NVData_class::_check(String, unsigned short, unsigned short)+0xbc>)
    6ef0:	4668      	mov	r0, sp
    6ef2:	4431      	add	r1, r6
    6ef4:	f005 fa82 	bl	c3fc <String::String(char const*)>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    6ef8:	4668      	mov	r0, sp
    6efa:	4919      	ldr	r1, [pc, #100]	; (6f60 <NVData_class::_check(String, unsigned short, unsigned short)+0xc0>)
    6efc:	f005 fb80 	bl	c600 <String::append(char const*)>
		st += ")";
		_warnMsg(hdr, st);
    6f00:	4639      	mov	r1, r7
    6f02:	a808      	add	r0, sp, #32
    6f04:	f005 faa0 	bl	c448 <String::String(String const&)>
    6f08:	4669      	mov	r1, sp
    6f0a:	a804      	add	r0, sp, #16
    6f0c:	f005 fa9c 	bl	c448 <String::String(String const&)>
    6f10:	aa04      	add	r2, sp, #16
    6f12:	a908      	add	r1, sp, #32
    6f14:	4620      	mov	r0, r4
    6f16:	f7ff fe5f 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6f1a:	a804      	add	r0, sp, #16
    6f1c:	f005 fa2e 	bl	c37c <String::~String()>
    6f20:	a808      	add	r0, sp, #32
    6f22:	f005 fa2b 	bl	c37c <String::~String()>
		return false;
	}
	if (addrLimit == 0) addrLimit = _size - 1;
	if (addr > addrLimit) {
		_warnMsg(hdr, invalidAddrStr);
		String st = "(addr: " + addr;
    6f26:	4668      	mov	r0, sp
    6f28:	f005 fa28 	bl	c37c <String::~String()>
		st += ")";
		_warnMsg(hdr, st);
		return false;
	}
	return true;
}
    6f2c:	4628      	mov	r0, r5
    6f2e:	b00d      	add	sp, #52	; 0x34
    6f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Serial.println(msg);
}

bool NVData_class::_check(String hdr, uint16_t addr, uint16_t addrLimit) {
	if (!_ready) {
		_warnMsg(hdr, notReadyStr);
    6f32:	a804      	add	r0, sp, #16
    6f34:	f005 fa88 	bl	c448 <String::String(String const&)>
    6f38:	69a1      	ldr	r1, [r4, #24]
    6f3a:	a808      	add	r0, sp, #32
    6f3c:	f005 fa72 	bl	c424 <String::String(__FlashStringHelper const*)>
    6f40:	aa08      	add	r2, sp, #32
    6f42:	a904      	add	r1, sp, #16
    6f44:	4620      	mov	r0, r4
    6f46:	f7ff fe47 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    6f4a:	a808      	add	r0, sp, #32
    6f4c:	f005 fa16 	bl	c37c <String::~String()>
    6f50:	a804      	add	r0, sp, #16
    6f52:	f005 fa13 	bl	c37c <String::~String()>
		st += ")";
		_warnMsg(hdr, st);
		return false;
	}
	return true;
}
    6f56:	4628      	mov	r0, r5
    6f58:	b00d      	add	sp, #52	; 0x34
    6f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f5c:	20001814 	.word	0x20001814
    6f60:	200002d4 	.word	0x200002d4

00006f64 <NVData_class::readByte(unsigned short)>:
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}

byte NVData_class::readByte(uint16_t addr) {
    6f64:	b570      	push	{r4, r5, r6, lr}
    6f66:	b084      	sub	sp, #16
    6f68:	4606      	mov	r6, r0
    6f6a:	460d      	mov	r5, r1
	if (!_check("readByte", addr)) return 0;
    6f6c:	490a      	ldr	r1, [pc, #40]	; (6f98 <NVData_class::readByte(unsigned short)+0x34>)
    6f6e:	4668      	mov	r0, sp
    6f70:	f005 fa44 	bl	c3fc <String::String(char const*)>
    6f74:	462a      	mov	r2, r5
    6f76:	4669      	mov	r1, sp
    6f78:	4630      	mov	r0, r6
    6f7a:	2300      	movs	r3, #0
    6f7c:	f7ff ff90 	bl	6ea0 <NVData_class::_check(String, unsigned short, unsigned short)>
    6f80:	4604      	mov	r4, r0
    6f82:	4668      	mov	r0, sp
    6f84:	f005 f9fa 	bl	c37c <String::~String()>
    6f88:	b11c      	cbz	r4, 6f92 <NVData_class::readByte(unsigned short)+0x2e>
	return _data[addr];
    6f8a:	6db3      	ldr	r3, [r6, #88]	; 0x58
    6f8c:	5d58      	ldrb	r0, [r3, r5]
}
    6f8e:	b004      	add	sp, #16
    6f90:	bd70      	pop	{r4, r5, r6, pc}
	//else Serial.println("begin completed.");
	return _ready;
}

byte NVData_class::readByte(uint16_t addr) {
	if (!_check("readByte", addr)) return 0;
    6f92:	4620      	mov	r0, r4
	return _data[addr];
}
    6f94:	b004      	add	sp, #16
    6f96:	bd70      	pop	{r4, r5, r6, pc}
    6f98:	2000181c 	.word	0x2000181c

00006f9c <NVData_class::readWord(unsigned short)>:

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint16_t NVData_class::readWord(uint16_t addr) {
    6f9c:	b570      	push	{r4, r5, r6, lr}
    6f9e:	b084      	sub	sp, #16
    6fa0:	4605      	mov	r5, r0
    6fa2:	460e      	mov	r6, r1
	const char* hdr = "readWord";
	if (!_check(hdr, addr, _size-2)) return 0;
    6fa4:	490e      	ldr	r1, [pc, #56]	; (6fe0 <NVData_class::readWord(unsigned short)+0x44>)
    6fa6:	4668      	mov	r0, sp
    6fa8:	f005 fa28 	bl	c3fc <String::String(char const*)>
    6fac:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    6fb0:	4632      	mov	r2, r6
    6fb2:	4669      	mov	r1, sp
    6fb4:	3b02      	subs	r3, #2
    6fb6:	4628      	mov	r0, r5
    6fb8:	b29b      	uxth	r3, r3
    6fba:	f7ff ff71 	bl	6ea0 <NVData_class::_check(String, unsigned short, unsigned short)>
    6fbe:	4604      	mov	r4, r0
    6fc0:	4668      	mov	r0, sp
    6fc2:	f005 f9db 	bl	c37c <String::~String()>
    6fc6:	b144      	cbz	r4, 6fda <NVData_class::readWord(unsigned short)+0x3e>
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
    6fc8:	1c72      	adds	r2, r6, #1
}

uint16_t NVData_class::readWord(uint16_t addr) {
	const char* hdr = "readWord";
	if (!_check(hdr, addr, _size-2)) return 0;
	uint16_t data = _data[addr++];
    6fca:	6da9      	ldr	r1, [r5, #88]	; 0x58
	data |= ((uint16_t)_data[addr]) << 8;
    6fcc:	b292      	uxth	r2, r2
    6fce:	5d8b      	ldrb	r3, [r1, r6]
    6fd0:	5c88      	ldrb	r0, [r1, r2]
    6fd2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	return data;
}
    6fd6:	b004      	add	sp, #16
    6fd8:	bd70      	pop	{r4, r5, r6, pc}
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint16_t NVData_class::readWord(uint16_t addr) {
	const char* hdr = "readWord";
	if (!_check(hdr, addr, _size-2)) return 0;
    6fda:	4620      	mov	r0, r4
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
	return data;
}
    6fdc:	b004      	add	sp, #16
    6fde:	bd70      	pop	{r4, r5, r6, pc}
    6fe0:	20001828 	.word	0x20001828

00006fe4 <NVData_class::readDWord(unsigned short)>:
	_data[addr++] = (byte)(val & 0x00ff);
	 _data[addr] = (byte)((val & 0xff00) >> 8);
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint32_t NVData_class::readDWord(uint16_t addr) {
    6fe4:	b570      	push	{r4, r5, r6, lr}
    6fe6:	b084      	sub	sp, #16
    6fe8:	4606      	mov	r6, r0
    6fea:	460d      	mov	r5, r1
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
    6fec:	4912      	ldr	r1, [pc, #72]	; (7038 <NVData_class::readDWord(unsigned short)+0x54>)
    6fee:	4668      	mov	r0, sp
    6ff0:	f005 fa04 	bl	c3fc <String::String(char const*)>
    6ff4:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
    6ff8:	462a      	mov	r2, r5
    6ffa:	4669      	mov	r1, sp
    6ffc:	3b04      	subs	r3, #4
    6ffe:	4630      	mov	r0, r6
    7000:	b29b      	uxth	r3, r3
    7002:	f7ff ff4d 	bl	6ea0 <NVData_class::_check(String, unsigned short, unsigned short)>
    7006:	4604      	mov	r4, r0
    7008:	4668      	mov	r0, sp
    700a:	f005 f9b7 	bl	c37c <String::~String()>
    700e:	b174      	cbz	r4, 702e <NVData_class::readDWord(unsigned short)+0x4a>
	uint32_t data = 0;
	uint16_t endAddr = addr + 3;
    7010:	1ceb      	adds	r3, r5, #3
    7012:	b29b      	uxth	r3, r3
	while (endAddr >= addr) {
    7014:	429d      	cmp	r5, r3
    7016:	d80d      	bhi.n	7034 <NVData_class::readDWord(unsigned short)+0x50>
    7018:	6db4      	ldr	r4, [r6, #88]	; 0x58
    701a:	2000      	movs	r0, #0
		data <<= 8;
		data |= _data[endAddr--];
    701c:	1e59      	subs	r1, r3, #1
    701e:	5ce2      	ldrb	r2, [r4, r3]
    7020:	b28b      	uxth	r3, r1
    7022:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
uint32_t NVData_class::readDWord(uint16_t addr) {
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
	uint32_t data = 0;
	uint16_t endAddr = addr + 3;
	while (endAddr >= addr) {
    7026:	429d      	cmp	r5, r3
    7028:	d9f8      	bls.n	701c <NVData_class::readDWord(unsigned short)+0x38>
		data <<= 8;
		data |= _data[endAddr--];
	}
	return data;
}
    702a:	b004      	add	sp, #16
    702c:	bd70      	pop	{r4, r5, r6, pc}
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint32_t NVData_class::readDWord(uint16_t addr) {
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
    702e:	4620      	mov	r0, r4
	while (endAddr >= addr) {
		data <<= 8;
		data |= _data[endAddr--];
	}
	return data;
}
    7030:	b004      	add	sp, #16
    7032:	bd70      	pop	{r4, r5, r6, pc}
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint32_t NVData_class::readDWord(uint16_t addr) {
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
    7034:	2000      	movs	r0, #0
    7036:	e7f8      	b.n	702a <NVData_class::readDWord(unsigned short)+0x46>
    7038:	20001834 	.word	0x20001834

0000703c <_GLOBAL__sub_I__ZN12NVData_classC2Ev>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    703c:	f003 bd8a 	b.w	ab54 <eeprom_initialize>

00007040 <NVData_class::_saveData()>:
		break;
	}
	return true;
}

bool NVData_class::_saveData() {
    7040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7044:	b094      	sub	sp, #80	; 0x50
    7046:	4605      	mov	r5, r0
	String hdr = "_saveData";
    7048:	495d      	ldr	r1, [pc, #372]	; (71c0 <NVData_class::_saveData()+0x180>)
    704a:	4668      	mov	r0, sp
    704c:	f005 f9d6 	bl	c3fc <String::String(char const*)>
    7050:	2117      	movs	r1, #23
    7052:	485c      	ldr	r0, [pc, #368]	; (71c4 <NVData_class::_saveData()+0x184>)
    7054:	f004 ff0a 	bl	be6c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    7058:	485b      	ldr	r0, [pc, #364]	; (71c8 <NVData_class::_saveData()+0x188>)
    705a:	f005 f8c9 	bl	c1f0 <Print::println()>
	Serial.println("- Saving data on NVData");
	if (!_ready) {
    705e:	f895 7054 	ldrb.w	r7, [r5, #84]	; 0x54
    7062:	b187      	cbz	r7, 7086 <NVData_class::_saveData()+0x46>
		_warnMsg(hdr, notReadyStr);
		return false;
	}

	switch (device) {
    7064:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    7068:	2b01      	cmp	r3, #1
    706a:	d052      	beq.n	7112 <NVData_class::_saveData()+0xd2>
    706c:	d339      	bcc.n	70e2 <NVData_class::_saveData()+0xa2>
    706e:	2b02      	cmp	r3, #2
    7070:	d023      	beq.n	70ba <NVData_class::_saveData()+0x7a>
		_warnMsg(hdr, notImplemStr);
		//for (uint16_t i = 0; i < _size; i++) ; // TODO..
		break;
	}

	_pendingChanges = false;
    7072:	2300      	movs	r3, #0
    7074:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	}
	return true;
}

bool NVData_class::_saveData() {
	String hdr = "_saveData";
    7078:	4668      	mov	r0, sp
    707a:	f005 f97f 	bl	c37c <String::~String()>
		break;
	}

	_pendingChanges = false;
	return true;
}
    707e:	4638      	mov	r0, r7
    7080:	b014      	add	sp, #80	; 0x50
    7082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool NVData_class::_saveData() {
	String hdr = "_saveData";
	Serial.println("- Saving data on NVData");
	if (!_ready) {
		_warnMsg(hdr, notReadyStr);
    7086:	4669      	mov	r1, sp
    7088:	a808      	add	r0, sp, #32
    708a:	f005 f9dd 	bl	c448 <String::String(String const&)>
    708e:	69a9      	ldr	r1, [r5, #24]
    7090:	a80c      	add	r0, sp, #48	; 0x30
    7092:	f005 f9c7 	bl	c424 <String::String(__FlashStringHelper const*)>
    7096:	aa0c      	add	r2, sp, #48	; 0x30
    7098:	a908      	add	r1, sp, #32
    709a:	4628      	mov	r0, r5
    709c:	f7ff fd9c 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    70a0:	a80c      	add	r0, sp, #48	; 0x30
    70a2:	f005 f96b 	bl	c37c <String::~String()>
    70a6:	a808      	add	r0, sp, #32
    70a8:	f005 f968 	bl	c37c <String::~String()>
	}
	return true;
}

bool NVData_class::_saveData() {
	String hdr = "_saveData";
    70ac:	4668      	mov	r0, sp
    70ae:	f005 f965 	bl	c37c <String::~String()>
		break;
	}

	_pendingChanges = false;
	return true;
}
    70b2:	4638      	mov	r0, r7
    70b4:	b014      	add	sp, #80	; 0x50
    70b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		//Serial.print(": _fileBaseAdr = ");
		//Serial.println(_fileBaseAdr);
		_f.close();
		break;
	case FRAM_NVD:
		_warnMsg(hdr, notImplemStr);
    70ba:	4669      	mov	r1, sp
    70bc:	a808      	add	r0, sp, #32
    70be:	f005 f9c3 	bl	c448 <String::String(String const&)>
    70c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    70c4:	a80c      	add	r0, sp, #48	; 0x30
    70c6:	f005 f9ad 	bl	c424 <String::String(__FlashStringHelper const*)>
    70ca:	aa0c      	add	r2, sp, #48	; 0x30
    70cc:	a908      	add	r1, sp, #32
    70ce:	4628      	mov	r0, r5
    70d0:	f7ff fd82 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    70d4:	a80c      	add	r0, sp, #48	; 0x30
    70d6:	f005 f951 	bl	c37c <String::~String()>
    70da:	a808      	add	r0, sp, #32
    70dc:	f005 f94e 	bl	c37c <String::~String()>
		//for (uint16_t i = 0; i < _size; i++) ; // TODO..
		break;
    70e0:	e7c7      	b.n	7072 <NVData_class::_saveData()+0x32>
		return false;
	}

	switch (device) {
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) EEPROM.update(i, _data[i]);
    70e2:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
    70e6:	f1b8 0f00 	cmp.w	r8, #0
    70ea:	d0c2      	beq.n	7072 <NVData_class::_saveData()+0x32>
    70ec:	2400      	movs	r4, #0
    70ee:	6dab      	ldr	r3, [r5, #88]	; 0x58

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    70f0:	4620      	mov	r0, r4
    70f2:	5d1e      	ldrb	r6, [r3, r4]
    70f4:	f003 fd54 	bl	aba0 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    70f8:	4286      	cmp	r6, r0
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    70fa:	4631      	mov	r1, r6
    70fc:	4620      	mov	r0, r4
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    70fe:	d003      	beq.n	7108 <NVData_class::_saveData()+0xc8>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    7100:	f003 fd86 	bl	ac10 <eeprom_write_byte>
    7104:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
    7108:	3401      	adds	r4, #1
    710a:	b2a4      	uxth	r4, r4
    710c:	45a0      	cmp	r8, r4
    710e:	d8ee      	bhi.n	70ee <NVData_class::_saveData()+0xae>
    7110:	e7af      	b.n	7072 <NVData_class::_saveData()+0x32>
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
    7112:	2313      	movs	r3, #19
    7114:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    7116:	a80c      	add	r0, sp, #48	; 0x30
    7118:	492c      	ldr	r1, [pc, #176]	; (71cc <NVData_class::_saveData()+0x18c>)
    711a:	f000 ffd1 	bl	80c0 <SDClass::open(char const*, unsigned char)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    711e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    7122:	aa14      	add	r2, sp, #80	; 0x50
    7124:	f105 0341 	add.w	r3, r5, #65	; 0x41
    7128:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    712c:	f105 004e 	add.w	r0, r5, #78	; 0x4e
    7130:	f812 4d14 	ldrb.w	r4, [r2, #-20]!
    7134:	990e      	ldr	r1, [sp, #56]	; 0x38
    7136:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
    713a:	63e9      	str	r1, [r5, #60]	; 0x3c
    713c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    7140:	f803 1b01 	strb.w	r1, [r3], #1
    7144:	4283      	cmp	r3, r0
    7146:	d1f9      	bne.n	713c <NVData_class::_saveData()+0xfc>
    7148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		if (!_f) {
    714a:	f105 0434 	add.w	r4, r5, #52	; 0x34
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) EEPROM.update(i, _data[i]);
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
    714e:	a80c      	add	r0, sp, #48	; 0x30
    7150:	652b      	str	r3, [r5, #80]	; 0x50
    7152:	f000 fedf 	bl	7f14 <File::~File()>
		if (!_f) {
    7156:	4620      	mov	r0, r4
    7158:	f000 ff00 	bl	7f5c <File::operator bool()>
    715c:	b180      	cbz	r0, 7180 <NVData_class::_saveData()+0x140>
			String msg = "Can't open file ";
			msg += _fileName;
			_warnMsg(hdr, msg);
			return false;
		}
		_f.write(_data, _size);
    715e:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    7162:	4620      	mov	r0, r4
    7164:	6da9      	ldr	r1, [r5, #88]	; 0x58
    7166:	f000 fe47 	bl	7df8 <File::write(unsigned char const*, unsigned int)>
		_fileBaseAdr = _f.size() - _size;
    716a:	4620      	mov	r0, r4
    716c:	f000 fee4 	bl	7f38 <File::size()>
    7170:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    7174:	1ac3      	subs	r3, r0, r3
		//Serial.print(hdr);
		//Serial.print(": _fileBaseAdr = ");
		//Serial.println(_fileBaseAdr);
		_f.close();
    7176:	4620      	mov	r0, r4
			msg += _fileName;
			_warnMsg(hdr, msg);
			return false;
		}
		_f.write(_data, _size);
		_fileBaseAdr = _f.size() - _size;
    7178:	662b      	str	r3, [r5, #96]	; 0x60
		//Serial.print(hdr);
		//Serial.print(": _fileBaseAdr = ");
		//Serial.println(_fileBaseAdr);
		_f.close();
    717a:	f000 fee1 	bl	7f40 <File::close()>
		break;
    717e:	e778      	b.n	7072 <NVData_class::_saveData()+0x32>
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
		if (!_f) {
			String msg = "Can't open file ";
    7180:	4913      	ldr	r1, [pc, #76]	; (71d0 <NVData_class::_saveData()+0x190>)
			msg += _fileName;
			_warnMsg(hdr, msg);
			return false;
    7182:	4607      	mov	r7, r0
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
		if (!_f) {
			String msg = "Can't open file ";
    7184:	a804      	add	r0, sp, #16
    7186:	f005 f939 	bl	c3fc <String::String(char const*)>
    718a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    718c:	a804      	add	r0, sp, #16
    718e:	f005 fa37 	bl	c600 <String::append(char const*)>
			msg += _fileName;
			_warnMsg(hdr, msg);
    7192:	4669      	mov	r1, sp
    7194:	a808      	add	r0, sp, #32
    7196:	f005 f957 	bl	c448 <String::String(String const&)>
    719a:	a904      	add	r1, sp, #16
    719c:	a80c      	add	r0, sp, #48	; 0x30
    719e:	f005 f953 	bl	c448 <String::String(String const&)>
    71a2:	aa0c      	add	r2, sp, #48	; 0x30
    71a4:	a908      	add	r1, sp, #32
    71a6:	4628      	mov	r0, r5
    71a8:	f7ff fd16 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    71ac:	a80c      	add	r0, sp, #48	; 0x30
    71ae:	f005 f8e5 	bl	c37c <String::~String()>
    71b2:	a808      	add	r0, sp, #32
    71b4:	f005 f8e2 	bl	c37c <String::~String()>
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
		if (!_f) {
			String msg = "Can't open file ";
    71b8:	a804      	add	r0, sp, #16
    71ba:	f005 f8df 	bl	c37c <String::~String()>
    71be:	e75b      	b.n	7078 <NVData_class::_saveData()+0x38>
    71c0:	20001880 	.word	0x20001880
    71c4:	2000188c 	.word	0x2000188c
    71c8:	20001fdc 	.word	0x20001fdc
    71cc:	20002ad0 	.word	0x20002ad0
    71d0:	200018a4 	.word	0x200018a4

000071d4 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)>:
	}
	_data[addr] = val;
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

void NVData_class::writeBytes(uint16_t addr, const byte* values, uint16_t size) {
    71d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71d8:	b08c      	sub	sp, #48	; 0x30
    71da:	4605      	mov	r5, r0
    71dc:	460c      	mov	r4, r1
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
    71de:	4949      	ldr	r1, [pc, #292]	; (7304 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x130>)
    71e0:	a808      	add	r0, sp, #32
	}
	_data[addr] = val;
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

void NVData_class::writeBytes(uint16_t addr, const byte* values, uint16_t size) {
    71e2:	4616      	mov	r6, r2
    71e4:	4698      	mov	r8, r3
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
    71e6:	f005 f909 	bl	c3fc <String::String(char const*)>
    71ea:	4622      	mov	r2, r4
    71ec:	a908      	add	r1, sp, #32
    71ee:	4628      	mov	r0, r5
    71f0:	2300      	movs	r3, #0
    71f2:	f7ff fe55 	bl	6ea0 <NVData_class::_check(String, unsigned short, unsigned short)>
    71f6:	4607      	mov	r7, r0
    71f8:	a808      	add	r0, sp, #32
    71fa:	f005 f8bf 	bl	c37c <String::~String()>
    71fe:	b1d7      	cbz	r7, 7236 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x62>
	if (size == 0) {
    7200:	f1b8 0f00 	cmp.w	r8, #0
    7204:	d01a      	beq.n	723c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x68>
		String st = wrongSizeStr + String(" 0");
		_warnMsg(hdr, st);
		return;
	}
	if (addr + size > _size) {
    7206:	eb04 0008 	add.w	r0, r4, r8
    720a:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    720e:	4627      	mov	r7, r4
    7210:	4298      	cmp	r0, r3
    7212:	dc42      	bgt.n	729a <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0xc6>
		size = _size - addr;
		st += size;
		_warnMsg(hdr, st);
	}

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
    7214:	4284      	cmp	r4, r0
    7216:	da07      	bge.n	7228 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x54>
    7218:	1be1      	subs	r1, r4, r7
    721a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    721c:	1c63      	adds	r3, r4, #1
    721e:	5c71      	ldrb	r1, [r6, r1]
    7220:	5511      	strb	r1, [r2, r4]
    7222:	b29c      	uxth	r4, r3
    7224:	4284      	cmp	r4, r0
    7226:	dbf7      	blt.n	7218 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x44>
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    7228:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    722c:	2b00      	cmp	r3, #0
    722e:	d163      	bne.n	72f8 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x124>
    7230:	2301      	movs	r3, #1
    7232:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
}
    7236:	b00c      	add	sp, #48	; 0x30
    7238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(const __FlashStringHelper *pgmstr) : String(pgmstr) {}
    723c:	6969      	ldr	r1, [r5, #20]
    723e:	a808      	add	r0, sp, #32
    7240:	f005 f8f0 	bl	c424 <String::String(__FlashStringHelper const*)>
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
	if (size == 0) {
		String st = wrongSizeStr + String(" 0");
    7244:	a804      	add	r0, sp, #16
    7246:	4930      	ldr	r1, [pc, #192]	; (7308 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x134>)
    7248:	f005 f8d8 	bl	c3fc <String::String(char const*)>
    724c:	a904      	add	r1, sp, #16
    724e:	a808      	add	r0, sp, #32
    7250:	f005 fa08 	bl	c664 <operator+(StringSumHelper const&, String const&)>
    7254:	4601      	mov	r1, r0
    7256:	4668      	mov	r0, sp
    7258:	f005 f8f6 	bl	c448 <String::String(String const&)>
    725c:	a804      	add	r0, sp, #16
    725e:	f005 f88d 	bl	c37c <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    7262:	a808      	add	r0, sp, #32
    7264:	f005 f88a 	bl	c37c <String::~String()>
		_warnMsg(hdr, st);
    7268:	a804      	add	r0, sp, #16
    726a:	4926      	ldr	r1, [pc, #152]	; (7304 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x130>)
    726c:	f005 f8c6 	bl	c3fc <String::String(char const*)>
    7270:	4669      	mov	r1, sp
    7272:	a808      	add	r0, sp, #32
    7274:	f005 f8e8 	bl	c448 <String::String(String const&)>
    7278:	aa08      	add	r2, sp, #32
    727a:	a904      	add	r1, sp, #16
    727c:	4628      	mov	r0, r5
    727e:	f7ff fcab 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    7282:	a808      	add	r0, sp, #32
    7284:	f005 f87a 	bl	c37c <String::~String()>
    7288:	a804      	add	r0, sp, #16
    728a:	f005 f877 	bl	c37c <String::~String()>
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
	if (size == 0) {
		String st = wrongSizeStr + String(" 0");
    728e:	4668      	mov	r0, sp
    7290:	f005 f874 	bl	c37c <String::~String()>
		_warnMsg(hdr, st);
	}

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}
    7294:	b00c      	add	sp, #48	; 0x30
    7296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		String st = wrongSizeStr + String(" 0");
		_warnMsg(hdr, st);
		return;
	}
	if (addr + size > _size) {
		String st = wrongSizeStr;
    729a:	6969      	ldr	r1, [r5, #20]
    729c:	4668      	mov	r0, sp
    729e:	f005 f8c1 	bl	c424 <String::String(__FlashStringHelper const*)>
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    72a2:	4641      	mov	r1, r8
    72a4:	4668      	mov	r0, sp
    72a6:	f005 f9c9 	bl	c63c <String::append(int)>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    72aa:	4918      	ldr	r1, [pc, #96]	; (730c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x138>)
    72ac:	4668      	mov	r0, sp
    72ae:	f005 f9a7 	bl	c600 <String::append(char const*)>
		st += size;
		st += ": trimming to ";
		size = _size - addr;
		st += size;
    72b2:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    72b6:	4668      	mov	r0, sp
    72b8:	ebc4 0808 	rsb	r8, r4, r8
    72bc:	fa1f f888 	uxth.w	r8, r8
    72c0:	4641      	mov	r1, r8
    72c2:	f005 f9bb 	bl	c63c <String::append(int)>
		_warnMsg(hdr, st);
    72c6:	490f      	ldr	r1, [pc, #60]	; (7304 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x130>)
    72c8:	a804      	add	r0, sp, #16
    72ca:	f005 f897 	bl	c3fc <String::String(char const*)>
    72ce:	4669      	mov	r1, sp
    72d0:	a808      	add	r0, sp, #32
    72d2:	f005 f8b9 	bl	c448 <String::String(String const&)>
    72d6:	aa08      	add	r2, sp, #32
    72d8:	a904      	add	r1, sp, #16
    72da:	4628      	mov	r0, r5
    72dc:	f7ff fc7c 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    72e0:	a808      	add	r0, sp, #32
    72e2:	f005 f84b 	bl	c37c <String::~String()>
    72e6:	a804      	add	r0, sp, #16
    72e8:	f005 f848 	bl	c37c <String::~String()>
		String st = wrongSizeStr + String(" 0");
		_warnMsg(hdr, st);
		return;
	}
	if (addr + size > _size) {
		String st = wrongSizeStr;
    72ec:	4668      	mov	r0, sp
    72ee:	f005 f845 	bl	c37c <String::~String()>
    72f2:	eb04 0008 	add.w	r0, r4, r8
    72f6:	e78d      	b.n	7214 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x40>
		st += size;
		_warnMsg(hdr, st);
	}

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    72f8:	4628      	mov	r0, r5
    72fa:	f7ff fea1 	bl	7040 <NVData_class::_saveData()>
}
    72fe:	b00c      	add	sp, #48	; 0x30
    7300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7304:	200018c4 	.word	0x200018c4
    7308:	200018d0 	.word	0x200018d0
    730c:	200018d4 	.word	0x200018d4

00007310 <NVData_class::writeWord(unsigned short, unsigned short)>:
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
	return data;
}

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
    7310:	b5f0      	push	{r4, r5, r6, r7, lr}
    7312:	b089      	sub	sp, #36	; 0x24
    7314:	4604      	mov	r4, r0
    7316:	460d      	mov	r5, r1
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
    7318:	4920      	ldr	r1, [pc, #128]	; (739c <NVData_class::writeWord(unsigned short, unsigned short)+0x8c>)
    731a:	a804      	add	r0, sp, #16
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
	return data;
}

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
    731c:	4616      	mov	r6, r2
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
    731e:	f005 f86d 	bl	c3fc <String::String(char const*)>
    7322:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    7326:	462a      	mov	r2, r5
    7328:	a904      	add	r1, sp, #16
    732a:	3b02      	subs	r3, #2
    732c:	4620      	mov	r0, r4
    732e:	b29b      	uxth	r3, r3
    7330:	f7ff fdb6 	bl	6ea0 <NVData_class::_check(String, unsigned short, unsigned short)>
    7334:	4607      	mov	r7, r0
    7336:	a804      	add	r0, sp, #16
    7338:	f005 f820 	bl	c37c <String::~String()>
    733c:	b90f      	cbnz	r7, 7342 <NVData_class::writeWord(unsigned short, unsigned short)+0x32>
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
	 _data[addr] = (byte)((val & 0xff00) >> 8);
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}
    733e:	b009      	add	sp, #36	; 0x24
    7340:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
	if (readWord(addr) == val) {
    7342:	4629      	mov	r1, r5
    7344:	4620      	mov	r0, r4
    7346:	f7ff fe29 	bl	6f9c <NVData_class::readWord(unsigned short)>
    734a:	42b0      	cmp	r0, r6
    734c:	d012      	beq.n	7374 <NVData_class::writeWord(unsigned short, unsigned short)+0x64>
		_warnMsg(hdr, updatedValsStr);
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
    734e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	 _data[addr] = (byte)((val & 0xff00) >> 8);
    7350:	1c6b      	adds	r3, r5, #1
    7352:	0a31      	lsrs	r1, r6, #8
	if (!_check(hdr, addr, _size-2)) return;
	if (readWord(addr) == val) {
		_warnMsg(hdr, updatedValsStr);
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
    7354:	5556      	strb	r6, [r2, r5]
	 _data[addr] = (byte)((val & 0xff00) >> 8);
    7356:	b29b      	uxth	r3, r3
    7358:	6da2      	ldr	r2, [r4, #88]	; 0x58
    735a:	54d1      	strb	r1, [r2, r3]
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    735c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    7360:	b923      	cbnz	r3, 736c <NVData_class::writeWord(unsigned short, unsigned short)+0x5c>
    7362:	2301      	movs	r3, #1
    7364:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
}
    7368:	b009      	add	sp, #36	; 0x24
    736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_warnMsg(hdr, updatedValsStr);
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
	 _data[addr] = (byte)((val & 0xff00) >> 8);
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    736c:	4620      	mov	r0, r4
    736e:	f7ff fe67 	bl	7040 <NVData_class::_saveData()>
    7372:	e7e4      	b.n	733e <NVData_class::writeWord(unsigned short, unsigned short)+0x2e>

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
	if (readWord(addr) == val) {
		_warnMsg(hdr, updatedValsStr);
    7374:	4909      	ldr	r1, [pc, #36]	; (739c <NVData_class::writeWord(unsigned short, unsigned short)+0x8c>)
    7376:	4668      	mov	r0, sp
    7378:	f005 f840 	bl	c3fc <String::String(char const*)>
    737c:	6a21      	ldr	r1, [r4, #32]
    737e:	a804      	add	r0, sp, #16
    7380:	f005 f850 	bl	c424 <String::String(__FlashStringHelper const*)>
    7384:	aa04      	add	r2, sp, #16
    7386:	4669      	mov	r1, sp
    7388:	4620      	mov	r0, r4
    738a:	f7ff fc25 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    738e:	a804      	add	r0, sp, #16
    7390:	f004 fff4 	bl	c37c <String::~String()>
    7394:	4668      	mov	r0, sp
    7396:	f004 fff1 	bl	c37c <String::~String()>
		return;
    739a:	e7d0      	b.n	733e <NVData_class::writeWord(unsigned short, unsigned short)+0x2e>
    739c:	200018e4 	.word	0x200018e4

000073a0 <NVData_class::update()>:
	}
	Serial.println();
}

void NVData_class::update() {
	if (!immediateWriteMode && _pendingChanges) _saveData();
    73a0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
		if ((i & 0x0f) == 0x0f) Serial.println(); else Serial.print(" ");
	}
	Serial.println();
}

void NVData_class::update() {
    73a4:	b510      	push	{r4, lr}
    73a6:	4604      	mov	r4, r0
    73a8:	b088      	sub	sp, #32
	if (!immediateWriteMode && _pendingChanges) _saveData();
    73aa:	b9bb      	cbnz	r3, 73dc <NVData_class::update()+0x3c>
    73ac:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
    73b0:	b9d3      	cbnz	r3, 73e8 <NVData_class::update()+0x48>
	else {
		if (!_pendingChanges) _warnMsg("update", updatedValsStr);
    73b2:	490f      	ldr	r1, [pc, #60]	; (73f0 <NVData_class::update()+0x50>)
    73b4:	a804      	add	r0, sp, #16
    73b6:	f005 f821 	bl	c3fc <String::String(char const*)>
    73ba:	6a21      	ldr	r1, [r4, #32]
    73bc:	4668      	mov	r0, sp
    73be:	f005 f831 	bl	c424 <String::String(__FlashStringHelper const*)>
    73c2:	466a      	mov	r2, sp
    73c4:	a904      	add	r1, sp, #16
    73c6:	4620      	mov	r0, r4
    73c8:	f7ff fc06 	bl	6bd8 <NVData_class::_warnMsg(String, String)>
    73cc:	4668      	mov	r0, sp
    73ce:	f004 ffd5 	bl	c37c <String::~String()>
    73d2:	a804      	add	r0, sp, #16
    73d4:	f004 ffd2 	bl	c37c <String::~String()>
		//Serial.print("immediateWriteMode = ");
		//Serial.print(immediateWriteMode);
		//Serial.print("; _pendingChanges = ");
		//Serial.println(_pendingChanges);
	}
}
    73d8:	b008      	add	sp, #32
    73da:	bd10      	pop	{r4, pc}
}

void NVData_class::update() {
	if (!immediateWriteMode && _pendingChanges) _saveData();
	else {
		if (!_pendingChanges) _warnMsg("update", updatedValsStr);
    73dc:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
    73e0:	2b00      	cmp	r3, #0
    73e2:	d0e6      	beq.n	73b2 <NVData_class::update()+0x12>
		//Serial.print("immediateWriteMode = ");
		//Serial.print(immediateWriteMode);
		//Serial.print("; _pendingChanges = ");
		//Serial.println(_pendingChanges);
	}
}
    73e4:	b008      	add	sp, #32
    73e6:	bd10      	pop	{r4, pc}
	}
	Serial.println();
}

void NVData_class::update() {
	if (!immediateWriteMode && _pendingChanges) _saveData();
    73e8:	f7ff fe2a 	bl	7040 <NVData_class::_saveData()>
		//Serial.print("immediateWriteMode = ");
		//Serial.print(immediateWriteMode);
		//Serial.print("; _pendingChanges = ");
		//Serial.println(_pendingChanges);
	}
}
    73ec:	b008      	add	sp, #32
    73ee:	bd10      	pop	{r4, pc}
    73f0:	200018fc 	.word	0x200018fc

000073f4 <NVData_class::~NVData_class()>:
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
	_fileBaseAdr = 0;
}

NVData_class::~NVData_class() {
    73f4:	b510      	push	{r4, lr}
    73f6:	4604      	mov	r4, r0
	update();
    73f8:	f7ff ffd2 	bl	73a0 <NVData_class::update()>
	delete[] _data;
    73fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    73fe:	b108      	cbz	r0, 7404 <NVData_class::~NVData_class()+0x10>
    7400:	f004 feb6 	bl	c170 <operator delete[](void*)>
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
	_fileBaseAdr = 0;
}

NVData_class::~NVData_class() {
    7404:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7408:	f000 fd84 	bl	7f14 <File::~File()>
	update();
	delete[] _data;
}
    740c:	4620      	mov	r0, r4
    740e:	bd10      	pop	{r4, pc}

00007410 <PIO::_byteWrite(unsigned char, unsigned char)>:
	_byteWrite(GPPUB, 0); // disable port B weak pullup resistors
	mcpWrite(0); // resets any MCP outputs
}

// GENERIC BYTE WRITE - will write a byte to a register, arguments are register address and the value to write
void PIO::_byteWrite(uint8_t reg, uint8_t value) {      // Accept the register and byte
    7410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7414:	4d70      	ldr	r5, [pc, #448]	; (75d8 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c8>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    7416:	6803      	ldr	r3, [r0, #0]
    7418:	7cee      	ldrb	r6, [r5, #19]
    741a:	e893 0110 	ldmia.w	r3, {r4, r8}
    741e:	2e00      	cmp	r6, #0
    7420:	d038      	beq.n	7494 <PIO::_byteWrite(unsigned char, unsigned char)+0x84>
			__disable_irq();
    7422:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7424:	f895 e013 	ldrb.w	lr, [r5, #19]
    7428:	f01e 0f01 	tst.w	lr, #1
    742c:	4673      	mov	r3, lr
    742e:	d008      	beq.n	7442 <PIO::_byteWrite(unsigned char, unsigned char)+0x32>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7430:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 75fc <PIO::_byteWrite(unsigned char, unsigned char)+0x1ec>
    7434:	696f      	ldr	r7, [r5, #20]
    7436:	f8dc 6000 	ldr.w	r6, [ip]
    743a:	403e      	ands	r6, r7
    743c:	62ae      	str	r6, [r5, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    743e:	f8cc 6000 	str.w	r6, [ip]
			}
			if (interruptMasksUsed & 0x02) {
    7442:	f01e 0f02 	tst.w	lr, #2
    7446:	d009      	beq.n	745c <PIO::_byteWrite(unsigned char, unsigned char)+0x4c>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7448:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 7600 <PIO::_byteWrite(unsigned char, unsigned char)+0x1f0>
    744c:	69af      	ldr	r7, [r5, #24]
    744e:	f8de 6000 	ldr.w	r6, [lr]
    7452:	7ceb      	ldrb	r3, [r5, #19]
    7454:	403e      	ands	r6, r7
    7456:	62ee      	str	r6, [r5, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7458:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x04) {
    745c:	075f      	lsls	r7, r3, #29
    745e:	d509      	bpl.n	7474 <PIO::_byteWrite(unsigned char, unsigned char)+0x64>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7460:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 7604 <PIO::_byteWrite(unsigned char, unsigned char)+0x1f4>
    7464:	69ef      	ldr	r7, [r5, #28]
    7466:	f8de 6000 	ldr.w	r6, [lr]
    746a:	7ceb      	ldrb	r3, [r5, #19]
    746c:	403e      	ands	r6, r7
    746e:	632e      	str	r6, [r5, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7470:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x08) {
    7474:	071e      	lsls	r6, r3, #28
    7476:	d509      	bpl.n	748c <PIO::_byteWrite(unsigned char, unsigned char)+0x7c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7478:	f8df e18c 	ldr.w	lr, [pc, #396]	; 7608 <PIO::_byteWrite(unsigned char, unsigned char)+0x1f8>
    747c:	6a2f      	ldr	r7, [r5, #32]
    747e:	f8de 6000 	ldr.w	r6, [lr]
    7482:	7ceb      	ldrb	r3, [r5, #19]
    7484:	403e      	ands	r6, r7
    7486:	636e      	str	r6, [r5, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7488:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x10) {
    748c:	06df      	lsls	r7, r3, #27
    748e:	f100 8081 	bmi.w	7594 <PIO::_byteWrite(unsigned char, unsigned char)+0x184>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7492:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7494:	68ab      	ldr	r3, [r5, #8]
    7496:	4e50      	ldr	r6, [pc, #320]	; (75d8 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c8>)
    7498:	42a3      	cmp	r3, r4
    749a:	f000 8084 	beq.w	75a6 <PIO::_byteWrite(unsigned char, unsigned char)+0x196>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    749e:	4b4f      	ldr	r3, [pc, #316]	; (75dc <PIO::_byteWrite(unsigned char, unsigned char)+0x1cc>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    74a0:	f8df e168 	ldr.w	lr, [pc, #360]	; 760c <PIO::_byteWrite(unsigned char, unsigned char)+0x1fc>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    74a4:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    74a6:	60b4      	str	r4, [r6, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    74a8:	f3c3 1601 	ubfx	r6, r3, #4, #2
    74ac:	f3c3 6382 	ubfx	r3, r3, #26, #3
    74b0:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
    74b4:	3301      	adds	r3, #1
    74b6:	fbb6 f6f3 	udiv	r6, r6, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    74ba:	2c00      	cmp	r4, #0
    74bc:	d065      	beq.n	758a <PIO::_byteWrite(unsigned char, unsigned char)+0x17a>
    74be:	fbb6 f3f4 	udiv	r3, r6, r4

			if (d && clkhz/d > _clock) d++;
    74c2:	2b00      	cmp	r3, #0
    74c4:	d064      	beq.n	7590 <PIO::_byteWrite(unsigned char, unsigned char)+0x180>
    74c6:	fbb6 f6f3 	udiv	r6, r6, r3
    74ca:	42a6      	cmp	r6, r4
    74cc:	bf88      	it	hi
    74ce:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    74d0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    74d4:	d376      	bcc.n	75c4 <PIO::_byteWrite(unsigned char, unsigned char)+0x1b4>
    74d6:	f647 74ff 	movw	r4, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    74da:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    74dc:	f04f 0c00 	mov.w	ip, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    74e0:	f04f 0e03 	mov.w	lr, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    74e4:	2601      	movs	r6, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    74e6:	f8c3 c010 	str.w	ip, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    74ea:	60ec      	str	r4, [r5, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    74ec:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		port().CCR = _ccr;
    74f0:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    74f2:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    74f6:	611e      	str	r6, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    74f8:	7904      	ldrb	r4, [r0, #4]
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    74fa:	0124      	lsls	r4, r4, #4
    74fc:	4e38      	ldr	r6, [pc, #224]	; (75e0 <PIO::_byteWrite(unsigned char, unsigned char)+0x1d0>)
    74fe:	1937      	adds	r7, r6, r4
    7500:	5934      	ldr	r4, [r6, r4]
    7502:	68ff      	ldr	r7, [r7, #12]
    7504:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7508:	7944      	ldrb	r4, [r0, #5]
    750a:	0064      	lsls	r4, r4, #1
    750c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    7510:	b2e4      	uxtb	r4, r4
    7512:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7514:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7516:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    751a:	d0fb      	beq.n	7514 <PIO::_byteWrite(unsigned char, unsigned char)+0x104>
    751c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    751e:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7520:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7522:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
    7526:	d0fb      	beq.n	7520 <PIO::_byteWrite(unsigned char, unsigned char)+0x110>
    7528:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    752a:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    752c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    752e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7532:	d0fb      	beq.n	752c <PIO::_byteWrite(unsigned char, unsigned char)+0x11c>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    7534:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7536:	7ce9      	ldrb	r1, [r5, #19]
    7538:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    753a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    753c:	4c26      	ldr	r4, [pc, #152]	; (75d8 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c8>)
    753e:	460b      	mov	r3, r1
    7540:	18b0      	adds	r0, r6, r2
    7542:	58b2      	ldr	r2, [r6, r2]
    7544:	68c0      	ldr	r0, [r0, #12]
    7546:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    754a:	2900      	cmp	r1, #0
    754c:	d029      	beq.n	75a2 <PIO::_byteWrite(unsigned char, unsigned char)+0x192>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    754e:	07ce      	lsls	r6, r1, #31
    7550:	d502      	bpl.n	7558 <PIO::_byteWrite(unsigned char, unsigned char)+0x148>
    7552:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7554:	4a23      	ldr	r2, [pc, #140]	; (75e4 <PIO::_byteWrite(unsigned char, unsigned char)+0x1d4>)
    7556:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7558:	0788      	lsls	r0, r1, #30
    755a:	d503      	bpl.n	7564 <PIO::_byteWrite(unsigned char, unsigned char)+0x154>
    755c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    755e:	4a22      	ldr	r2, [pc, #136]	; (75e8 <PIO::_byteWrite(unsigned char, unsigned char)+0x1d8>)
    7560:	7ceb      	ldrb	r3, [r5, #19]
    7562:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7564:	0759      	lsls	r1, r3, #29
    7566:	d503      	bpl.n	7570 <PIO::_byteWrite(unsigned char, unsigned char)+0x160>
    7568:	6b29      	ldr	r1, [r5, #48]	; 0x30
    756a:	4a20      	ldr	r2, [pc, #128]	; (75ec <PIO::_byteWrite(unsigned char, unsigned char)+0x1dc>)
    756c:	7ceb      	ldrb	r3, [r5, #19]
    756e:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7570:	071a      	lsls	r2, r3, #28
    7572:	d503      	bpl.n	757c <PIO::_byteWrite(unsigned char, unsigned char)+0x16c>
    7574:	6b69      	ldr	r1, [r5, #52]	; 0x34
    7576:	4a1e      	ldr	r2, [pc, #120]	; (75f0 <PIO::_byteWrite(unsigned char, unsigned char)+0x1e0>)
    7578:	7ceb      	ldrb	r3, [r5, #19]
    757a:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    757c:	06db      	lsls	r3, r3, #27
    757e:	d510      	bpl.n	75a2 <PIO::_byteWrite(unsigned char, unsigned char)+0x192>
    7580:	6baa      	ldr	r2, [r5, #56]	; 0x38
    7582:	4b1c      	ldr	r3, [pc, #112]	; (75f4 <PIO::_byteWrite(unsigned char, unsigned char)+0x1e4>)
    7584:	601a      	str	r2, [r3, #0]
	_SPIstart();                                 // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(reg);                                   // Send the register we want to write
	SPI.transfer(value);                                 // Send the byte
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    7586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    758a:	4633      	mov	r3, r6

			if (d && clkhz/d > _clock) d++;
    758c:	2b00      	cmp	r3, #0
    758e:	d19a      	bne.n	74c6 <PIO::_byteWrite(unsigned char, unsigned char)+0xb6>
    7590:	461c      	mov	r4, r3
    7592:	e7a2      	b.n	74da <PIO::_byteWrite(unsigned char, unsigned char)+0xca>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7594:	4e18      	ldr	r6, [pc, #96]	; (75f8 <PIO::_byteWrite(unsigned char, unsigned char)+0x1e8>)
    7596:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    7598:	6833      	ldr	r3, [r6, #0]
    759a:	403b      	ands	r3, r7
    759c:	63ab      	str	r3, [r5, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    759e:	6033      	str	r3, [r6, #0]
    75a0:	e777      	b.n	7492 <PIO::_byteWrite(unsigned char, unsigned char)+0x82>
    75a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    75a6:	6833      	ldr	r3, [r6, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    75a8:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    75aa:	68f6      	ldr	r6, [r6, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    75ac:	f04f 0e03 	mov.w	lr, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    75b0:	611c      	str	r4, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    75b2:	2401      	movs	r4, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    75b4:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		port().CCR = _ccr;
    75b8:	641e      	str	r6, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    75ba:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    75be:	611c      	str	r4, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    75c0:	7904      	ldrb	r4, [r0, #4]
    75c2:	e79a      	b.n	74fa <PIO::_byteWrite(unsigned char, unsigned char)+0xea>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    75c4:	2b02      	cmp	r3, #2
    75c6:	d904      	bls.n	75d2 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c2>
    75c8:	3b02      	subs	r3, #2
    75ca:	085c      	lsrs	r4, r3, #1
    75cc:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    75d0:	e783      	b.n	74da <PIO::_byteWrite(unsigned char, unsigned char)+0xca>
    75d2:	2400      	movs	r4, #0
    75d4:	e781      	b.n	74da <PIO::_byteWrite(unsigned char, unsigned char)+0xca>
    75d6:	bf00      	nop
    75d8:	20001f54 	.word	0x20001f54
    75dc:	400fc000 	.word	0x400fc000
    75e0:	20001988 	.word	0x20001988
    75e4:	e000e100 	.word	0xe000e100
    75e8:	e000e104 	.word	0xe000e104
    75ec:	e000e108 	.word	0xe000e108
    75f0:	e000e10c 	.word	0xe000e10c
    75f4:	e000e110 	.word	0xe000e110
    75f8:	e000e190 	.word	0xe000e190
    75fc:	e000e180 	.word	0xe000e180
    7600:	e000e184 	.word	0xe000e184
    7604:	e000e188 	.word	0xe000e188
    7608:	e000e18c 	.word	0xe000e18c
    760c:	200015f4 	.word	0x200015f4

00007610 <PIO::mcpReadPB()>:

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7610:	4965      	ldr	r1, [pc, #404]	; (77a8 <PIO::mcpReadPB()+0x198>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    7612:	6803      	ldr	r3, [r0, #0]
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
}

byte PIO::mcpReadPB() {       // This function will read 8 bits of I/O
    7614:	b5f0      	push	{r4, r5, r6, r7, lr}
    7616:	7ccc      	ldrb	r4, [r1, #19]
    7618:	e893 0024 	ldmia.w	r3, {r2, r5}
    761c:	2c00      	cmp	r4, #0
    761e:	d02b      	beq.n	7678 <PIO::mcpReadPB()+0x68>
			__disable_irq();
    7620:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7622:	7ccb      	ldrb	r3, [r1, #19]
    7624:	07de      	lsls	r6, r3, #31
    7626:	461c      	mov	r4, r3
    7628:	d508      	bpl.n	763c <PIO::mcpReadPB()+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    762a:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 77dc <PIO::mcpReadPB()+0x1cc>
    762e:	694f      	ldr	r7, [r1, #20]
    7630:	f8de 6000 	ldr.w	r6, [lr]
    7634:	403e      	ands	r6, r7
    7636:	628e      	str	r6, [r1, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7638:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    763c:	079b      	lsls	r3, r3, #30
    763e:	d506      	bpl.n	764e <PIO::mcpReadPB()+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7640:	4e5a      	ldr	r6, [pc, #360]	; (77ac <PIO::mcpReadPB()+0x19c>)
    7642:	698b      	ldr	r3, [r1, #24]
    7644:	6837      	ldr	r7, [r6, #0]
    7646:	7ccc      	ldrb	r4, [r1, #19]
    7648:	403b      	ands	r3, r7
    764a:	62cb      	str	r3, [r1, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    764c:	6033      	str	r3, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    764e:	0767      	lsls	r7, r4, #29
    7650:	d506      	bpl.n	7660 <PIO::mcpReadPB()+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7652:	4e57      	ldr	r6, [pc, #348]	; (77b0 <PIO::mcpReadPB()+0x1a0>)
    7654:	69cb      	ldr	r3, [r1, #28]
    7656:	6837      	ldr	r7, [r6, #0]
    7658:	7ccc      	ldrb	r4, [r1, #19]
    765a:	403b      	ands	r3, r7
    765c:	630b      	str	r3, [r1, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    765e:	6033      	str	r3, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    7660:	0726      	lsls	r6, r4, #28
    7662:	d506      	bpl.n	7672 <PIO::mcpReadPB()+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7664:	4e53      	ldr	r6, [pc, #332]	; (77b4 <PIO::mcpReadPB()+0x1a4>)
    7666:	6a0b      	ldr	r3, [r1, #32]
    7668:	6837      	ldr	r7, [r6, #0]
    766a:	7ccc      	ldrb	r4, [r1, #19]
    766c:	403b      	ands	r3, r7
    766e:	634b      	str	r3, [r1, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7670:	6033      	str	r3, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    7672:	06e3      	lsls	r3, r4, #27
    7674:	d47b      	bmi.n	776e <PIO::mcpReadPB()+0x15e>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7676:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7678:	688b      	ldr	r3, [r1, #8]
    767a:	4c4b      	ldr	r4, [pc, #300]	; (77a8 <PIO::mcpReadPB()+0x198>)
    767c:	4293      	cmp	r3, r2
    767e:	d07e      	beq.n	777e <PIO::mcpReadPB()+0x16e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7680:	4b4d      	ldr	r3, [pc, #308]	; (77b8 <PIO::mcpReadPB()+0x1a8>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7682:	4e4e      	ldr	r6, [pc, #312]	; (77bc <PIO::mcpReadPB()+0x1ac>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7684:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7686:	60a2      	str	r2, [r4, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7688:	f3c3 1401 	ubfx	r4, r3, #4, #2
    768c:	f3c3 6382 	ubfx	r3, r3, #26, #3
    7690:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
    7694:	3301      	adds	r3, #1
    7696:	fbb4 f4f3 	udiv	r4, r4, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    769a:	2a00      	cmp	r2, #0
    769c:	d062      	beq.n	7764 <PIO::mcpReadPB()+0x154>
    769e:	fbb4 f3f2 	udiv	r3, r4, r2

			if (d && clkhz/d > _clock) d++;
    76a2:	2b00      	cmp	r3, #0
    76a4:	d061      	beq.n	776a <PIO::mcpReadPB()+0x15a>
    76a6:	fbb4 f4f3 	udiv	r4, r4, r3
    76aa:	4294      	cmp	r4, r2
    76ac:	bf88      	it	hi
    76ae:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    76b0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    76b4:	d36f      	bcc.n	7796 <PIO::mcpReadPB()+0x186>
    76b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    76ba:	680b      	ldr	r3, [r1, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    76bc:	2700      	movs	r7, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    76be:	2603      	movs	r6, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    76c0:	2401      	movs	r4, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    76c2:	611f      	str	r7, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    76c4:	60ca      	str	r2, [r1, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    76c6:	625e      	str	r6, [r3, #36]	; 0x24
		port().CCR = _ccr;
    76c8:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    76ca:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    76cc:	611c      	str	r4, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    76ce:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    76d0:	0112      	lsls	r2, r2, #4
    76d2:	4c3b      	ldr	r4, [pc, #236]	; (77c0 <PIO::mcpReadPB()+0x1b0>)
    76d4:	18a5      	adds	r5, r4, r2
    76d6:	58a2      	ldr	r2, [r4, r2]
    76d8:	68ed      	ldr	r5, [r5, #12]
    76da:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    76de:	7942      	ldrb	r2, [r0, #5]
    76e0:	0052      	lsls	r2, r2, #1
    76e2:	f042 0241 	orr.w	r2, r2, #65	; 0x41
    76e6:	b2d2      	uxtb	r2, r2
    76e8:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    76ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    76ec:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    76f0:	d0fb      	beq.n	76ea <PIO::mcpReadPB()+0xda>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    76f2:	2213      	movs	r2, #19
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    76f4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    76f6:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    76f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    76fa:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    76fe:	d0fb      	beq.n	76f8 <PIO::mcpReadPB()+0xe8>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7700:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7702:	6f5d      	ldr	r5, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7704:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7708:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    770c:	d0fb      	beq.n	7706 <PIO::mcpReadPB()+0xf6>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    770e:	7902      	ldrb	r2, [r0, #4]
    7710:	6f58      	ldr	r0, [r3, #116]	; 0x74
    7712:	0113      	lsls	r3, r2, #4
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7714:	7cca      	ldrb	r2, [r1, #19]
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7716:	b2c0      	uxtb	r0, r0
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7718:	4e23      	ldr	r6, [pc, #140]	; (77a8 <PIO::mcpReadPB()+0x198>)
    771a:	18e5      	adds	r5, r4, r3
    771c:	58e4      	ldr	r4, [r4, r3]
    771e:	4613      	mov	r3, r2
    7720:	68ed      	ldr	r5, [r5, #12]
    7722:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    7726:	2a00      	cmp	r2, #0
    7728:	d028      	beq.n	777c <PIO::mcpReadPB()+0x16c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    772a:	07d7      	lsls	r7, r2, #31
    772c:	d502      	bpl.n	7734 <PIO::mcpReadPB()+0x124>
    772e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    7730:	4c24      	ldr	r4, [pc, #144]	; (77c4 <PIO::mcpReadPB()+0x1b4>)
    7732:	6025      	str	r5, [r4, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7734:	0795      	lsls	r5, r2, #30
    7736:	d503      	bpl.n	7740 <PIO::mcpReadPB()+0x130>
    7738:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    773a:	4a23      	ldr	r2, [pc, #140]	; (77c8 <PIO::mcpReadPB()+0x1b8>)
    773c:	7ccb      	ldrb	r3, [r1, #19]
    773e:	6014      	str	r4, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7740:	075c      	lsls	r4, r3, #29
    7742:	d503      	bpl.n	774c <PIO::mcpReadPB()+0x13c>
    7744:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    7746:	4a21      	ldr	r2, [pc, #132]	; (77cc <PIO::mcpReadPB()+0x1bc>)
    7748:	7ccb      	ldrb	r3, [r1, #19]
    774a:	6014      	str	r4, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    774c:	071a      	lsls	r2, r3, #28
    774e:	d503      	bpl.n	7758 <PIO::mcpReadPB()+0x148>
    7750:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    7752:	4a1f      	ldr	r2, [pc, #124]	; (77d0 <PIO::mcpReadPB()+0x1c0>)
    7754:	7ccb      	ldrb	r3, [r1, #19]
    7756:	6014      	str	r4, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7758:	06db      	lsls	r3, r3, #27
    775a:	d50f      	bpl.n	777c <PIO::mcpReadPB()+0x16c>
    775c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    775e:	4b1d      	ldr	r3, [pc, #116]	; (77d4 <PIO::mcpReadPB()+0x1c4>)
    7760:	601a      	str	r2, [r3, #0]
	_SPIstart();                      // Slave Select LOW before SPI action
	SPI.transfer(OPCODER | (_adr << 1));  // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOB);                      // Send the register we want to read
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
    7762:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7764:	4623      	mov	r3, r4

			if (d && clkhz/d > _clock) d++;
    7766:	2b00      	cmp	r3, #0
    7768:	d19d      	bne.n	76a6 <PIO::mcpReadPB()+0x96>
    776a:	461a      	mov	r2, r3
    776c:	e7a5      	b.n	76ba <PIO::mcpReadPB()+0xaa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    776e:	4c1a      	ldr	r4, [pc, #104]	; (77d8 <PIO::mcpReadPB()+0x1c8>)
    7770:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    7772:	6826      	ldr	r6, [r4, #0]
    7774:	4033      	ands	r3, r6
    7776:	638b      	str	r3, [r1, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7778:	6023      	str	r3, [r4, #0]
    777a:	e77c      	b.n	7676 <PIO::mcpReadPB()+0x66>
}
    777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    777e:	6823      	ldr	r3, [r4, #0]
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7780:	2201      	movs	r2, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7782:	2700      	movs	r7, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    7784:	68e4      	ldr	r4, [r4, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7786:	2603      	movs	r6, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7788:	611f      	str	r7, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    778a:	625e      	str	r6, [r3, #36]	; 0x24
		port().CCR = _ccr;
    778c:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    778e:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7790:	611a      	str	r2, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    7792:	7902      	ldrb	r2, [r0, #4]
    7794:	e79c      	b.n	76d0 <PIO::mcpReadPB()+0xc0>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7796:	2b02      	cmp	r3, #2
    7798:	d904      	bls.n	77a4 <PIO::mcpReadPB()+0x194>
    779a:	3b02      	subs	r3, #2
    779c:	085a      	lsrs	r2, r3, #1
    779e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    77a2:	e78a      	b.n	76ba <PIO::mcpReadPB()+0xaa>
    77a4:	2200      	movs	r2, #0
    77a6:	e788      	b.n	76ba <PIO::mcpReadPB()+0xaa>
    77a8:	20001f54 	.word	0x20001f54
    77ac:	e000e184 	.word	0xe000e184
    77b0:	e000e188 	.word	0xe000e188
    77b4:	e000e18c 	.word	0xe000e18c
    77b8:	400fc000 	.word	0x400fc000
    77bc:	200015f4 	.word	0x200015f4
    77c0:	20001988 	.word	0x20001988
    77c4:	e000e100 	.word	0xe000e100
    77c8:	e000e104 	.word	0xe000e104
    77cc:	e000e108 	.word	0xe000e108
    77d0:	e000e10c 	.word	0xe000e10c
    77d4:	e000e110 	.word	0xe000e110
    77d8:	e000e190 	.word	0xe000e190
    77dc:	e000e180 	.word	0xe000e180

000077e0 <PIO::mcpWrite(unsigned short)>:
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
}

void PIO::mcpWrite(uint16_t value) {
    77e0:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    77e2:	4c6b      	ldr	r4, [pc, #428]	; (7990 <PIO::mcpWrite(unsigned short)+0x1b0>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    77e4:	6803      	ldr	r3, [r0, #0]
    77e6:	7ce5      	ldrb	r5, [r4, #19]
    77e8:	e893 1004 	ldmia.w	r3, {r2, ip}
    77ec:	2d00      	cmp	r5, #0
    77ee:	d02c      	beq.n	784a <PIO::mcpWrite(unsigned short)+0x6a>
			__disable_irq();
    77f0:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    77f2:	7ce5      	ldrb	r5, [r4, #19]
    77f4:	07ef      	lsls	r7, r5, #31
    77f6:	462b      	mov	r3, r5
    77f8:	d508      	bpl.n	780c <PIO::mcpWrite(unsigned short)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    77fa:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 79c4 <PIO::mcpWrite(unsigned short)+0x1e4>
    77fe:	6966      	ldr	r6, [r4, #20]
    7800:	f8de 7000 	ldr.w	r7, [lr]
    7804:	4037      	ands	r7, r6
    7806:	62a7      	str	r7, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7808:	f8ce 7000 	str.w	r7, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    780c:	07ae      	lsls	r6, r5, #30
    780e:	d506      	bpl.n	781e <PIO::mcpWrite(unsigned short)+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7810:	4f60      	ldr	r7, [pc, #384]	; (7994 <PIO::mcpWrite(unsigned short)+0x1b4>)
    7812:	69a6      	ldr	r6, [r4, #24]
    7814:	683d      	ldr	r5, [r7, #0]
    7816:	7ce3      	ldrb	r3, [r4, #19]
    7818:	4035      	ands	r5, r6
    781a:	62e5      	str	r5, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    781c:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x04) {
    781e:	075d      	lsls	r5, r3, #29
    7820:	d506      	bpl.n	7830 <PIO::mcpWrite(unsigned short)+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7822:	4f5d      	ldr	r7, [pc, #372]	; (7998 <PIO::mcpWrite(unsigned short)+0x1b8>)
    7824:	69e6      	ldr	r6, [r4, #28]
    7826:	683d      	ldr	r5, [r7, #0]
    7828:	7ce3      	ldrb	r3, [r4, #19]
    782a:	4035      	ands	r5, r6
    782c:	6325      	str	r5, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    782e:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x08) {
    7830:	071f      	lsls	r7, r3, #28
    7832:	d506      	bpl.n	7842 <PIO::mcpWrite(unsigned short)+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7834:	4f59      	ldr	r7, [pc, #356]	; (799c <PIO::mcpWrite(unsigned short)+0x1bc>)
    7836:	6a26      	ldr	r6, [r4, #32]
    7838:	683d      	ldr	r5, [r7, #0]
    783a:	7ce3      	ldrb	r3, [r4, #19]
    783c:	4035      	ands	r5, r6
    783e:	6365      	str	r5, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7840:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x10) {
    7842:	06de      	lsls	r6, r3, #27
    7844:	f100 8086 	bmi.w	7954 <PIO::mcpWrite(unsigned short)+0x174>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7848:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    784a:	68a3      	ldr	r3, [r4, #8]
    784c:	4d50      	ldr	r5, [pc, #320]	; (7990 <PIO::mcpWrite(unsigned short)+0x1b0>)
    784e:	4293      	cmp	r3, r2
    7850:	f000 8088 	beq.w	7964 <PIO::mcpWrite(unsigned short)+0x184>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7854:	4b52      	ldr	r3, [pc, #328]	; (79a0 <PIO::mcpWrite(unsigned short)+0x1c0>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7856:	4f53      	ldr	r7, [pc, #332]	; (79a4 <PIO::mcpWrite(unsigned short)+0x1c4>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7858:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    785a:	60aa      	str	r2, [r5, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    785c:	f3c3 1501 	ubfx	r5, r3, #4, #2
    7860:	f3c3 6382 	ubfx	r3, r3, #26, #3
    7864:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    7868:	3301      	adds	r3, #1
    786a:	fbb5 f5f3 	udiv	r5, r5, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    786e:	2a00      	cmp	r2, #0
    7870:	d06b      	beq.n	794a <PIO::mcpWrite(unsigned short)+0x16a>
    7872:	fbb5 f3f2 	udiv	r3, r5, r2

			if (d && clkhz/d > _clock) d++;
    7876:	2b00      	cmp	r3, #0
    7878:	d06a      	beq.n	7950 <PIO::mcpWrite(unsigned short)+0x170>
    787a:	fbb5 f5f3 	udiv	r5, r5, r3
    787e:	4295      	cmp	r5, r2
    7880:	bf88      	it	hi
    7882:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7884:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    7888:	d379      	bcc.n	797e <PIO::mcpWrite(unsigned short)+0x19e>
    788a:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    788e:	6823      	ldr	r3, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7890:	f04f 0e00 	mov.w	lr, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7894:	2703      	movs	r7, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7896:	2501      	movs	r5, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7898:	f8c3 e010 	str.w	lr, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    789c:	60e2      	str	r2, [r4, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    789e:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    78a0:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    78a2:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    78a6:	611d      	str	r5, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    78a8:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    78aa:	0112      	lsls	r2, r2, #4
    78ac:	4d3e      	ldr	r5, [pc, #248]	; (79a8 <PIO::mcpWrite(unsigned short)+0x1c8>)
    78ae:	18ae      	adds	r6, r5, r2
    78b0:	58aa      	ldr	r2, [r5, r2]
    78b2:	68f6      	ldr	r6, [r6, #12]
    78b4:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78b8:	7942      	ldrb	r2, [r0, #5]
    78ba:	0052      	lsls	r2, r2, #1
    78bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    78c0:	b2d2      	uxtb	r2, r2
    78c2:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    78c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    78c6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    78ca:	d0fb      	beq.n	78c4 <PIO::mcpWrite(unsigned short)+0xe4>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78cc:	2212      	movs	r2, #18
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    78ce:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78d0:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    78d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    78d4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    78d8:	d0fb      	beq.n	78d2 <PIO::mcpWrite(unsigned short)+0xf2>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78da:	b2ca      	uxtb	r2, r1
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    78dc:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78de:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    78e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    78e2:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    78e6:	d0fb      	beq.n	78e0 <PIO::mcpWrite(unsigned short)+0x100>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78e8:	1209      	asrs	r1, r1, #8
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    78ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    78ec:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    78ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    78f0:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    78f4:	d0fb      	beq.n	78ee <PIO::mcpWrite(unsigned short)+0x10e>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    78f6:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    78f8:	7ce1      	ldrb	r1, [r4, #19]
    78fa:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    78fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    78fe:	4e24      	ldr	r6, [pc, #144]	; (7990 <PIO::mcpWrite(unsigned short)+0x1b0>)
    7900:	460b      	mov	r3, r1
    7902:	18a8      	adds	r0, r5, r2
    7904:	58aa      	ldr	r2, [r5, r2]
    7906:	68c0      	ldr	r0, [r0, #12]
    7908:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    790c:	2900      	cmp	r1, #0
    790e:	d028      	beq.n	7962 <PIO::mcpWrite(unsigned short)+0x182>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7910:	07cd      	lsls	r5, r1, #31
    7912:	d502      	bpl.n	791a <PIO::mcpWrite(unsigned short)+0x13a>
    7914:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    7916:	4a25      	ldr	r2, [pc, #148]	; (79ac <PIO::mcpWrite(unsigned short)+0x1cc>)
    7918:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    791a:	0788      	lsls	r0, r1, #30
    791c:	d503      	bpl.n	7926 <PIO::mcpWrite(unsigned short)+0x146>
    791e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7920:	4a23      	ldr	r2, [pc, #140]	; (79b0 <PIO::mcpWrite(unsigned short)+0x1d0>)
    7922:	7ce3      	ldrb	r3, [r4, #19]
    7924:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7926:	0759      	lsls	r1, r3, #29
    7928:	d503      	bpl.n	7932 <PIO::mcpWrite(unsigned short)+0x152>
    792a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    792c:	4a21      	ldr	r2, [pc, #132]	; (79b4 <PIO::mcpWrite(unsigned short)+0x1d4>)
    792e:	7ce3      	ldrb	r3, [r4, #19]
    7930:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7932:	071a      	lsls	r2, r3, #28
    7934:	d503      	bpl.n	793e <PIO::mcpWrite(unsigned short)+0x15e>
    7936:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7938:	4a1f      	ldr	r2, [pc, #124]	; (79b8 <PIO::mcpWrite(unsigned short)+0x1d8>)
    793a:	7ce3      	ldrb	r3, [r4, #19]
    793c:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    793e:	06db      	lsls	r3, r3, #27
    7940:	d50f      	bpl.n	7962 <PIO::mcpWrite(unsigned short)+0x182>
    7942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7944:	4b1d      	ldr	r3, [pc, #116]	; (79bc <PIO::mcpWrite(unsigned short)+0x1dc>)
    7946:	601a      	str	r2, [r3, #0]
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer((uint8_t)(value & 0xff));                      // Send the low byte (register address pointer will auto-increment after write)
	SPI.transfer((uint8_t)(value >> 8));                 // Shift the high byte down to the low byte location and send
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    7948:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    794a:	462b      	mov	r3, r5

			if (d && clkhz/d > _clock) d++;
    794c:	2b00      	cmp	r3, #0
    794e:	d194      	bne.n	787a <PIO::mcpWrite(unsigned short)+0x9a>
    7950:	461a      	mov	r2, r3
    7952:	e79c      	b.n	788e <PIO::mcpWrite(unsigned short)+0xae>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7954:	4d1a      	ldr	r5, [pc, #104]	; (79c0 <PIO::mcpWrite(unsigned short)+0x1e0>)
    7956:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7958:	682f      	ldr	r7, [r5, #0]
    795a:	403b      	ands	r3, r7
    795c:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    795e:	602b      	str	r3, [r5, #0]
    7960:	e772      	b.n	7848 <PIO::mcpWrite(unsigned short)+0x68>
    7962:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7964:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7966:	2200      	movs	r2, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    7968:	68ed      	ldr	r5, [r5, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    796a:	2703      	movs	r7, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    796c:	611a      	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    796e:	2201      	movs	r2, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7970:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7972:	641d      	str	r5, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7974:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7978:	611a      	str	r2, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    797a:	7902      	ldrb	r2, [r0, #4]
    797c:	e795      	b.n	78aa <PIO::mcpWrite(unsigned short)+0xca>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    797e:	2b02      	cmp	r3, #2
    7980:	d904      	bls.n	798c <PIO::mcpWrite(unsigned short)+0x1ac>
    7982:	3b02      	subs	r3, #2
    7984:	085a      	lsrs	r2, r3, #1
    7986:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    798a:	e780      	b.n	788e <PIO::mcpWrite(unsigned short)+0xae>
    798c:	2200      	movs	r2, #0
    798e:	e77e      	b.n	788e <PIO::mcpWrite(unsigned short)+0xae>
    7990:	20001f54 	.word	0x20001f54
    7994:	e000e184 	.word	0xe000e184
    7998:	e000e188 	.word	0xe000e188
    799c:	e000e18c 	.word	0xe000e18c
    79a0:	400fc000 	.word	0x400fc000
    79a4:	200015f4 	.word	0x200015f4
    79a8:	20001988 	.word	0x20001988
    79ac:	e000e100 	.word	0xe000e100
    79b0:	e000e104 	.word	0xe000e104
    79b4:	e000e108 	.word	0xe000e108
    79b8:	e000e10c 	.word	0xe000e10c
    79bc:	e000e110 	.word	0xe000e110
    79c0:	e000e190 	.word	0xe000e190
    79c4:	e000e180 	.word	0xe000e180

000079c8 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>:
*/

#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
    79c8:	b538      	push	{r3, r4, r5, lr}
    79ca:	4604      	mov	r4, r0
    79cc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	_spis = ss;
	_ss_pin = ss_pin;
	_adr = address;
    79d0:	7143      	strb	r3, [r0, #5]

#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
	_spis = ss;
    79d2:	6001      	str	r1, [r0, #0]
	_ss_pin = ss_pin;
	_adr = address;
	_byteWrite(IOCON, ADDR_ENABLE);
    79d4:	210a      	movs	r1, #10
#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
	_spis = ss;
	_ss_pin = ss_pin;
    79d6:	7102      	strb	r2, [r0, #4]
	_adr = address;
	_byteWrite(IOCON, ADDR_ENABLE);
    79d8:	2208      	movs	r2, #8
    79da:	f7ff fd19 	bl	7410 <PIO::_byteWrite(unsigned char, unsigned char)>
	//_wordWrite(IODIRA, pinsConfig); // pins direction configuration
	_byteWrite(IODIRA, (byte)(pinsConfig & 0xff));
    79de:	4620      	mov	r0, r4
    79e0:	b2ea      	uxtb	r2, r5
    79e2:	2100      	movs	r1, #0
    79e4:	f7ff fd14 	bl	7410 <PIO::_byteWrite(unsigned char, unsigned char)>
	_byteWrite(IODIRB, (byte)((pinsConfig & 0xff00) >> 8));
    79e8:	4620      	mov	r0, r4
    79ea:	0a2a      	lsrs	r2, r5, #8
    79ec:	2101      	movs	r1, #1
    79ee:	f7ff fd0f 	bl	7410 <PIO::_byteWrite(unsigned char, unsigned char)>
	_byteWrite(GPPUA, 0); // disable port A weak pullup resistors
    79f2:	4620      	mov	r0, r4
    79f4:	2200      	movs	r2, #0
    79f6:	210c      	movs	r1, #12
    79f8:	f7ff fd0a 	bl	7410 <PIO::_byteWrite(unsigned char, unsigned char)>
	_byteWrite(GPPUB, 0); // disable port B weak pullup resistors
    79fc:	4620      	mov	r0, r4
    79fe:	2200      	movs	r2, #0
    7a00:	210d      	movs	r1, #13
    7a02:	f7ff fd05 	bl	7410 <PIO::_byteWrite(unsigned char, unsigned char)>
	mcpWrite(0); // resets any MCP outputs
    7a06:	4620      	mov	r0, r4
    7a08:	2100      	movs	r1, #0
    7a0a:	f7ff fee9 	bl	77e0 <PIO::mcpWrite(unsigned short)>
}
    7a0e:	4620      	mov	r0, r4
    7a10:	bd38      	pop	{r3, r4, r5, pc}
    7a12:	bf00      	nop

00007a14 <PIO::mcpWritePA(unsigned char)>:
	SPI.transfer((uint8_t)(value & 0xff));                      // Send the low byte (register address pointer will auto-increment after write)
	SPI.transfer((uint8_t)(value >> 8));                 // Shift the high byte down to the low byte location and send
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePA(uint8_t value) {
    7a14:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7a16:	4c66      	ldr	r4, [pc, #408]	; (7bb0 <PIO::mcpWritePA(unsigned char)+0x19c>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    7a18:	6803      	ldr	r3, [r0, #0]
    7a1a:	7ce5      	ldrb	r5, [r4, #19]
    7a1c:	e893 1004 	ldmia.w	r3, {r2, ip}
    7a20:	2d00      	cmp	r5, #0
    7a22:	d02b      	beq.n	7a7c <PIO::mcpWritePA(unsigned char)+0x68>
			__disable_irq();
    7a24:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7a26:	7ce5      	ldrb	r5, [r4, #19]
    7a28:	07ef      	lsls	r7, r5, #31
    7a2a:	462b      	mov	r3, r5
    7a2c:	d508      	bpl.n	7a40 <PIO::mcpWritePA(unsigned char)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7a2e:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 7be4 <PIO::mcpWritePA(unsigned char)+0x1d0>
    7a32:	6966      	ldr	r6, [r4, #20]
    7a34:	f8de 7000 	ldr.w	r7, [lr]
    7a38:	4037      	ands	r7, r6
    7a3a:	62a7      	str	r7, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7a3c:	f8ce 7000 	str.w	r7, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    7a40:	07ae      	lsls	r6, r5, #30
    7a42:	d506      	bpl.n	7a52 <PIO::mcpWritePA(unsigned char)+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7a44:	4f5b      	ldr	r7, [pc, #364]	; (7bb4 <PIO::mcpWritePA(unsigned char)+0x1a0>)
    7a46:	69a6      	ldr	r6, [r4, #24]
    7a48:	683d      	ldr	r5, [r7, #0]
    7a4a:	7ce3      	ldrb	r3, [r4, #19]
    7a4c:	4035      	ands	r5, r6
    7a4e:	62e5      	str	r5, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7a50:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x04) {
    7a52:	075d      	lsls	r5, r3, #29
    7a54:	d506      	bpl.n	7a64 <PIO::mcpWritePA(unsigned char)+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7a56:	4f58      	ldr	r7, [pc, #352]	; (7bb8 <PIO::mcpWritePA(unsigned char)+0x1a4>)
    7a58:	69e6      	ldr	r6, [r4, #28]
    7a5a:	683d      	ldr	r5, [r7, #0]
    7a5c:	7ce3      	ldrb	r3, [r4, #19]
    7a5e:	4035      	ands	r5, r6
    7a60:	6325      	str	r5, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7a62:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x08) {
    7a64:	071f      	lsls	r7, r3, #28
    7a66:	d506      	bpl.n	7a76 <PIO::mcpWritePA(unsigned char)+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7a68:	4f54      	ldr	r7, [pc, #336]	; (7bbc <PIO::mcpWritePA(unsigned char)+0x1a8>)
    7a6a:	6a26      	ldr	r6, [r4, #32]
    7a6c:	683d      	ldr	r5, [r7, #0]
    7a6e:	7ce3      	ldrb	r3, [r4, #19]
    7a70:	4035      	ands	r5, r6
    7a72:	6365      	str	r5, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7a74:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x10) {
    7a76:	06de      	lsls	r6, r3, #27
    7a78:	d47c      	bmi.n	7b74 <PIO::mcpWritePA(unsigned char)+0x160>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7a7a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7a7c:	68a3      	ldr	r3, [r4, #8]
    7a7e:	4d4c      	ldr	r5, [pc, #304]	; (7bb0 <PIO::mcpWritePA(unsigned char)+0x19c>)
    7a80:	4293      	cmp	r3, r2
    7a82:	d07f      	beq.n	7b84 <PIO::mcpWritePA(unsigned char)+0x170>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7a84:	4b4e      	ldr	r3, [pc, #312]	; (7bc0 <PIO::mcpWritePA(unsigned char)+0x1ac>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7a86:	4f4f      	ldr	r7, [pc, #316]	; (7bc4 <PIO::mcpWritePA(unsigned char)+0x1b0>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7a88:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7a8a:	60aa      	str	r2, [r5, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7a8c:	f3c3 1501 	ubfx	r5, r3, #4, #2
    7a90:	f3c3 6382 	ubfx	r3, r3, #26, #3
    7a94:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    7a98:	3301      	adds	r3, #1
    7a9a:	fbb5 f5f3 	udiv	r5, r5, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7a9e:	2a00      	cmp	r2, #0
    7aa0:	d063      	beq.n	7b6a <PIO::mcpWritePA(unsigned char)+0x156>
    7aa2:	fbb5 f3f2 	udiv	r3, r5, r2

			if (d && clkhz/d > _clock) d++;
    7aa6:	2b00      	cmp	r3, #0
    7aa8:	d062      	beq.n	7b70 <PIO::mcpWritePA(unsigned char)+0x15c>
    7aaa:	fbb5 f5f3 	udiv	r5, r5, r3
    7aae:	4295      	cmp	r5, r2
    7ab0:	bf88      	it	hi
    7ab2:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7ab4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    7ab8:	d371      	bcc.n	7b9e <PIO::mcpWritePA(unsigned char)+0x18a>
    7aba:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7abe:	6823      	ldr	r3, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7ac0:	f04f 0e00 	mov.w	lr, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7ac4:	2703      	movs	r7, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7ac6:	2501      	movs	r5, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7ac8:	f8c3 e010 	str.w	lr, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7acc:	60e2      	str	r2, [r4, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7ace:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7ad0:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7ad2:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7ad6:	611d      	str	r5, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    7ad8:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7ada:	0112      	lsls	r2, r2, #4
    7adc:	4d3a      	ldr	r5, [pc, #232]	; (7bc8 <PIO::mcpWritePA(unsigned char)+0x1b4>)
    7ade:	18ae      	adds	r6, r5, r2
    7ae0:	58aa      	ldr	r2, [r5, r2]
    7ae2:	68f6      	ldr	r6, [r6, #12]
    7ae4:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7ae8:	7942      	ldrb	r2, [r0, #5]
    7aea:	0052      	lsls	r2, r2, #1
    7aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7af0:	b2d2      	uxtb	r2, r2
    7af2:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7af6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7afa:	d0fb      	beq.n	7af4 <PIO::mcpWritePA(unsigned char)+0xe0>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7afc:	2212      	movs	r2, #18
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7afe:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7b00:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7b04:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7b08:	d0fb      	beq.n	7b02 <PIO::mcpWritePA(unsigned char)+0xee>
    7b0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7b0c:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7b10:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7b14:	d0fb      	beq.n	7b0e <PIO::mcpWritePA(unsigned char)+0xfa>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    7b16:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7b18:	7ce1      	ldrb	r1, [r4, #19]
    7b1a:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7b1e:	4e24      	ldr	r6, [pc, #144]	; (7bb0 <PIO::mcpWritePA(unsigned char)+0x19c>)
    7b20:	460b      	mov	r3, r1
    7b22:	18a8      	adds	r0, r5, r2
    7b24:	58aa      	ldr	r2, [r5, r2]
    7b26:	68c0      	ldr	r0, [r0, #12]
    7b28:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    7b2c:	2900      	cmp	r1, #0
    7b2e:	d028      	beq.n	7b82 <PIO::mcpWritePA(unsigned char)+0x16e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7b30:	07cd      	lsls	r5, r1, #31
    7b32:	d502      	bpl.n	7b3a <PIO::mcpWritePA(unsigned char)+0x126>
    7b34:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    7b36:	4a25      	ldr	r2, [pc, #148]	; (7bcc <PIO::mcpWritePA(unsigned char)+0x1b8>)
    7b38:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7b3a:	0788      	lsls	r0, r1, #30
    7b3c:	d503      	bpl.n	7b46 <PIO::mcpWritePA(unsigned char)+0x132>
    7b3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7b40:	4a23      	ldr	r2, [pc, #140]	; (7bd0 <PIO::mcpWritePA(unsigned char)+0x1bc>)
    7b42:	7ce3      	ldrb	r3, [r4, #19]
    7b44:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7b46:	0759      	lsls	r1, r3, #29
    7b48:	d503      	bpl.n	7b52 <PIO::mcpWritePA(unsigned char)+0x13e>
    7b4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7b4c:	4a21      	ldr	r2, [pc, #132]	; (7bd4 <PIO::mcpWritePA(unsigned char)+0x1c0>)
    7b4e:	7ce3      	ldrb	r3, [r4, #19]
    7b50:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7b52:	071a      	lsls	r2, r3, #28
    7b54:	d503      	bpl.n	7b5e <PIO::mcpWritePA(unsigned char)+0x14a>
    7b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7b58:	4a1f      	ldr	r2, [pc, #124]	; (7bd8 <PIO::mcpWritePA(unsigned char)+0x1c4>)
    7b5a:	7ce3      	ldrb	r3, [r4, #19]
    7b5c:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7b5e:	06db      	lsls	r3, r3, #27
    7b60:	d50f      	bpl.n	7b82 <PIO::mcpWritePA(unsigned char)+0x16e>
    7b62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7b64:	4b1d      	ldr	r3, [pc, #116]	; (7bdc <PIO::mcpWritePA(unsigned char)+0x1c8>)
    7b66:	601a      	str	r2, [r3, #0]
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    7b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7b6a:	462b      	mov	r3, r5

			if (d && clkhz/d > _clock) d++;
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d19c      	bne.n	7aaa <PIO::mcpWritePA(unsigned char)+0x96>
    7b70:	461a      	mov	r2, r3
    7b72:	e7a4      	b.n	7abe <PIO::mcpWritePA(unsigned char)+0xaa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7b74:	4d1a      	ldr	r5, [pc, #104]	; (7be0 <PIO::mcpWritePA(unsigned char)+0x1cc>)
    7b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7b78:	682f      	ldr	r7, [r5, #0]
    7b7a:	403b      	ands	r3, r7
    7b7c:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7b7e:	602b      	str	r3, [r5, #0]
    7b80:	e77b      	b.n	7a7a <PIO::mcpWritePA(unsigned char)+0x66>
    7b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7b84:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7b86:	2200      	movs	r2, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    7b88:	68ed      	ldr	r5, [r5, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7b8a:	2703      	movs	r7, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7b8c:	611a      	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7b8e:	2201      	movs	r2, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7b90:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7b92:	641d      	str	r5, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7b94:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7b98:	611a      	str	r2, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    7b9a:	7902      	ldrb	r2, [r0, #4]
    7b9c:	e79d      	b.n	7ada <PIO::mcpWritePA(unsigned char)+0xc6>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7b9e:	2b02      	cmp	r3, #2
    7ba0:	d904      	bls.n	7bac <PIO::mcpWritePA(unsigned char)+0x198>
    7ba2:	3b02      	subs	r3, #2
    7ba4:	085a      	lsrs	r2, r3, #1
    7ba6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    7baa:	e788      	b.n	7abe <PIO::mcpWritePA(unsigned char)+0xaa>
    7bac:	2200      	movs	r2, #0
    7bae:	e786      	b.n	7abe <PIO::mcpWritePA(unsigned char)+0xaa>
    7bb0:	20001f54 	.word	0x20001f54
    7bb4:	e000e184 	.word	0xe000e184
    7bb8:	e000e188 	.word	0xe000e188
    7bbc:	e000e18c 	.word	0xe000e18c
    7bc0:	400fc000 	.word	0x400fc000
    7bc4:	200015f4 	.word	0x200015f4
    7bc8:	20001988 	.word	0x20001988
    7bcc:	e000e100 	.word	0xe000e100
    7bd0:	e000e104 	.word	0xe000e104
    7bd4:	e000e108 	.word	0xe000e108
    7bd8:	e000e10c 	.word	0xe000e10c
    7bdc:	e000e110 	.word	0xe000e110
    7be0:	e000e190 	.word	0xe000e190
    7be4:	e000e180 	.word	0xe000e180

00007be8 <PIO::mcpWritePB(unsigned char)>:
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePB(uint8_t value) {
    7be8:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7bea:	4c66      	ldr	r4, [pc, #408]	; (7d84 <PIO::mcpWritePB(unsigned char)+0x19c>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    7bec:	6803      	ldr	r3, [r0, #0]
    7bee:	7ce5      	ldrb	r5, [r4, #19]
    7bf0:	e893 1004 	ldmia.w	r3, {r2, ip}
    7bf4:	2d00      	cmp	r5, #0
    7bf6:	d02b      	beq.n	7c50 <PIO::mcpWritePB(unsigned char)+0x68>
			__disable_irq();
    7bf8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7bfa:	7ce5      	ldrb	r5, [r4, #19]
    7bfc:	07ef      	lsls	r7, r5, #31
    7bfe:	462b      	mov	r3, r5
    7c00:	d508      	bpl.n	7c14 <PIO::mcpWritePB(unsigned char)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7c02:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 7db8 <PIO::mcpWritePB(unsigned char)+0x1d0>
    7c06:	6966      	ldr	r6, [r4, #20]
    7c08:	f8de 7000 	ldr.w	r7, [lr]
    7c0c:	4037      	ands	r7, r6
    7c0e:	62a7      	str	r7, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7c10:	f8ce 7000 	str.w	r7, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    7c14:	07ae      	lsls	r6, r5, #30
    7c16:	d506      	bpl.n	7c26 <PIO::mcpWritePB(unsigned char)+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7c18:	4f5b      	ldr	r7, [pc, #364]	; (7d88 <PIO::mcpWritePB(unsigned char)+0x1a0>)
    7c1a:	69a6      	ldr	r6, [r4, #24]
    7c1c:	683d      	ldr	r5, [r7, #0]
    7c1e:	7ce3      	ldrb	r3, [r4, #19]
    7c20:	4035      	ands	r5, r6
    7c22:	62e5      	str	r5, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7c24:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x04) {
    7c26:	075d      	lsls	r5, r3, #29
    7c28:	d506      	bpl.n	7c38 <PIO::mcpWritePB(unsigned char)+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7c2a:	4f58      	ldr	r7, [pc, #352]	; (7d8c <PIO::mcpWritePB(unsigned char)+0x1a4>)
    7c2c:	69e6      	ldr	r6, [r4, #28]
    7c2e:	683d      	ldr	r5, [r7, #0]
    7c30:	7ce3      	ldrb	r3, [r4, #19]
    7c32:	4035      	ands	r5, r6
    7c34:	6325      	str	r5, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7c36:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x08) {
    7c38:	071f      	lsls	r7, r3, #28
    7c3a:	d506      	bpl.n	7c4a <PIO::mcpWritePB(unsigned char)+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7c3c:	4f54      	ldr	r7, [pc, #336]	; (7d90 <PIO::mcpWritePB(unsigned char)+0x1a8>)
    7c3e:	6a26      	ldr	r6, [r4, #32]
    7c40:	683d      	ldr	r5, [r7, #0]
    7c42:	7ce3      	ldrb	r3, [r4, #19]
    7c44:	4035      	ands	r5, r6
    7c46:	6365      	str	r5, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7c48:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x10) {
    7c4a:	06de      	lsls	r6, r3, #27
    7c4c:	d47c      	bmi.n	7d48 <PIO::mcpWritePB(unsigned char)+0x160>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7c4e:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7c50:	68a3      	ldr	r3, [r4, #8]
    7c52:	4d4c      	ldr	r5, [pc, #304]	; (7d84 <PIO::mcpWritePB(unsigned char)+0x19c>)
    7c54:	4293      	cmp	r3, r2
    7c56:	d07f      	beq.n	7d58 <PIO::mcpWritePB(unsigned char)+0x170>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7c58:	4b4e      	ldr	r3, [pc, #312]	; (7d94 <PIO::mcpWritePB(unsigned char)+0x1ac>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7c5a:	4f4f      	ldr	r7, [pc, #316]	; (7d98 <PIO::mcpWritePB(unsigned char)+0x1b0>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7c5c:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7c5e:	60aa      	str	r2, [r5, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7c60:	f3c3 1501 	ubfx	r5, r3, #4, #2
    7c64:	f3c3 6382 	ubfx	r3, r3, #26, #3
    7c68:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    7c6c:	3301      	adds	r3, #1
    7c6e:	fbb5 f5f3 	udiv	r5, r5, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7c72:	2a00      	cmp	r2, #0
    7c74:	d063      	beq.n	7d3e <PIO::mcpWritePB(unsigned char)+0x156>
    7c76:	fbb5 f3f2 	udiv	r3, r5, r2

			if (d && clkhz/d > _clock) d++;
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d062      	beq.n	7d44 <PIO::mcpWritePB(unsigned char)+0x15c>
    7c7e:	fbb5 f5f3 	udiv	r5, r5, r3
    7c82:	4295      	cmp	r5, r2
    7c84:	bf88      	it	hi
    7c86:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7c88:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    7c8c:	d371      	bcc.n	7d72 <PIO::mcpWritePB(unsigned char)+0x18a>
    7c8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7c92:	6823      	ldr	r3, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7c94:	f04f 0e00 	mov.w	lr, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7c98:	2703      	movs	r7, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7c9a:	2501      	movs	r5, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7c9c:	f8c3 e010 	str.w	lr, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7ca0:	60e2      	str	r2, [r4, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7ca2:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7ca4:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7ca6:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7caa:	611d      	str	r5, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    7cac:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7cae:	0112      	lsls	r2, r2, #4
    7cb0:	4d3a      	ldr	r5, [pc, #232]	; (7d9c <PIO::mcpWritePB(unsigned char)+0x1b4>)
    7cb2:	18ae      	adds	r6, r5, r2
    7cb4:	58aa      	ldr	r2, [r5, r2]
    7cb6:	68f6      	ldr	r6, [r6, #12]
    7cb8:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7cbc:	7942      	ldrb	r2, [r0, #5]
    7cbe:	0052      	lsls	r2, r2, #1
    7cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7cc4:	b2d2      	uxtb	r2, r2
    7cc6:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7cca:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7cce:	d0fb      	beq.n	7cc8 <PIO::mcpWritePB(unsigned char)+0xe0>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7cd0:	2213      	movs	r2, #19
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7cd2:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7cd4:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7cd8:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7cdc:	d0fb      	beq.n	7cd6 <PIO::mcpWritePB(unsigned char)+0xee>
    7cde:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7ce0:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7ce4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7ce8:	d0fb      	beq.n	7ce2 <PIO::mcpWritePB(unsigned char)+0xfa>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    7cea:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7cec:	7ce1      	ldrb	r1, [r4, #19]
    7cee:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7cf2:	4e24      	ldr	r6, [pc, #144]	; (7d84 <PIO::mcpWritePB(unsigned char)+0x19c>)
    7cf4:	460b      	mov	r3, r1
    7cf6:	18a8      	adds	r0, r5, r2
    7cf8:	58aa      	ldr	r2, [r5, r2]
    7cfa:	68c0      	ldr	r0, [r0, #12]
    7cfc:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    7d00:	2900      	cmp	r1, #0
    7d02:	d028      	beq.n	7d56 <PIO::mcpWritePB(unsigned char)+0x16e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7d04:	07cd      	lsls	r5, r1, #31
    7d06:	d502      	bpl.n	7d0e <PIO::mcpWritePB(unsigned char)+0x126>
    7d08:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    7d0a:	4a25      	ldr	r2, [pc, #148]	; (7da0 <PIO::mcpWritePB(unsigned char)+0x1b8>)
    7d0c:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7d0e:	0788      	lsls	r0, r1, #30
    7d10:	d503      	bpl.n	7d1a <PIO::mcpWritePB(unsigned char)+0x132>
    7d12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7d14:	4a23      	ldr	r2, [pc, #140]	; (7da4 <PIO::mcpWritePB(unsigned char)+0x1bc>)
    7d16:	7ce3      	ldrb	r3, [r4, #19]
    7d18:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7d1a:	0759      	lsls	r1, r3, #29
    7d1c:	d503      	bpl.n	7d26 <PIO::mcpWritePB(unsigned char)+0x13e>
    7d1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7d20:	4a21      	ldr	r2, [pc, #132]	; (7da8 <PIO::mcpWritePB(unsigned char)+0x1c0>)
    7d22:	7ce3      	ldrb	r3, [r4, #19]
    7d24:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7d26:	071a      	lsls	r2, r3, #28
    7d28:	d503      	bpl.n	7d32 <PIO::mcpWritePB(unsigned char)+0x14a>
    7d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7d2c:	4a1f      	ldr	r2, [pc, #124]	; (7dac <PIO::mcpWritePB(unsigned char)+0x1c4>)
    7d2e:	7ce3      	ldrb	r3, [r4, #19]
    7d30:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7d32:	06db      	lsls	r3, r3, #27
    7d34:	d50f      	bpl.n	7d56 <PIO::mcpWritePB(unsigned char)+0x16e>
    7d36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7d38:	4b1d      	ldr	r3, [pc, #116]	; (7db0 <PIO::mcpWritePB(unsigned char)+0x1c8>)
    7d3a:	601a      	str	r2, [r3, #0]
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOB);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    7d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7d3e:	462b      	mov	r3, r5

			if (d && clkhz/d > _clock) d++;
    7d40:	2b00      	cmp	r3, #0
    7d42:	d19c      	bne.n	7c7e <PIO::mcpWritePB(unsigned char)+0x96>
    7d44:	461a      	mov	r2, r3
    7d46:	e7a4      	b.n	7c92 <PIO::mcpWritePB(unsigned char)+0xaa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7d48:	4d1a      	ldr	r5, [pc, #104]	; (7db4 <PIO::mcpWritePB(unsigned char)+0x1cc>)
    7d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7d4c:	682f      	ldr	r7, [r5, #0]
    7d4e:	403b      	ands	r3, r7
    7d50:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7d52:	602b      	str	r3, [r5, #0]
    7d54:	e77b      	b.n	7c4e <PIO::mcpWritePB(unsigned char)+0x66>
    7d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7d58:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7d5a:	2200      	movs	r2, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    7d5c:	68ed      	ldr	r5, [r5, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7d5e:	2703      	movs	r7, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7d60:	611a      	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7d62:	2201      	movs	r2, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7d64:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7d66:	641d      	str	r5, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7d68:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7d6c:	611a      	str	r2, [r3, #16]

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    7d6e:	7902      	ldrb	r2, [r0, #4]
    7d70:	e79d      	b.n	7cae <PIO::mcpWritePB(unsigned char)+0xc6>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7d72:	2b02      	cmp	r3, #2
    7d74:	d904      	bls.n	7d80 <PIO::mcpWritePB(unsigned char)+0x198>
    7d76:	3b02      	subs	r3, #2
    7d78:	085a      	lsrs	r2, r3, #1
    7d7a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    7d7e:	e788      	b.n	7c92 <PIO::mcpWritePB(unsigned char)+0xaa>
    7d80:	2200      	movs	r2, #0
    7d82:	e786      	b.n	7c92 <PIO::mcpWritePB(unsigned char)+0xaa>
    7d84:	20001f54 	.word	0x20001f54
    7d88:	e000e184 	.word	0xe000e184
    7d8c:	e000e188 	.word	0xe000e188
    7d90:	e000e18c 	.word	0xe000e18c
    7d94:	400fc000 	.word	0x400fc000
    7d98:	200015f4 	.word	0x200015f4
    7d9c:	20001988 	.word	0x20001988
    7da0:	e000e100 	.word	0xe000e100
    7da4:	e000e104 	.word	0xe000e104
    7da8:	e000e108 	.word	0xe000e108
    7dac:	e000e10c 	.word	0xe000e10c
    7db0:	e000e110 	.word	0xe000e110
    7db4:	e000e190 	.word	0xe000e190
    7db8:	e000e180 	.word	0xe000e180

00007dbc <_GLOBAL__sub_I__Z4test12Board_Sys80b>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    7dbc:	f002 beca 	b.w	ab54 <eeprom_initialize>

00007dc0 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    7dc0:	2000      	movs	r0, #0
    7dc2:	4770      	bx	lr

00007dc4 <Print::flush()>:
	virtual void flush()				{ }
    7dc4:	4770      	bx	lr
    7dc6:	bf00      	nop

00007dc8 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    7dc8:	b510      	push	{r4, lr}
    7dca:	b082      	sub	sp, #8
  return write(&val, 1);
    7dcc:	6804      	ldr	r4, [r0, #0]
    7dce:	2201      	movs	r2, #1
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    7dd0:	ab02      	add	r3, sp, #8
    7dd2:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    7dd6:	4619      	mov	r1, r3
    7dd8:	6863      	ldr	r3, [r4, #4]
    7dda:	4798      	blx	r3
}
    7ddc:	b002      	add	sp, #8
    7dde:	bd10      	pop	{r4, pc}

00007de0 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    7de0:	69c0      	ldr	r0, [r0, #28]
    7de2:	b138      	cbz	r0, 7df4 <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    7de4:	6983      	ldr	r3, [r0, #24]
    7de6:	f647 72ff 	movw	r2, #32767	; 0x7fff
    7dea:	68c0      	ldr	r0, [r0, #12]
    7dec:	1a18      	subs	r0, r3, r0
    7dee:	4290      	cmp	r0, r2
    7df0:	bf28      	it	cs
    7df2:	4610      	movcs	r0, r2
}
    7df4:	4770      	bx	lr
    7df6:	bf00      	nop

00007df8 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    7df8:	69c3      	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    7dfa:	b510      	push	{r4, lr}
    7dfc:	4604      	mov	r4, r0
  size_t t;
  if (!_file) {
    7dfe:	b13b      	cbz	r3, 7e10 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7e00:	2000      	movs	r0, #0
    7e02:	7118      	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    7e04:	69e0      	ldr	r0, [r4, #28]
    7e06:	f001 fc5f 	bl	96c8 <SdFile::write(void const*, unsigned int)>
    7e0a:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    7e0c:	791b      	ldrb	r3, [r3, #4]
    7e0e:	b11b      	cbz	r3, 7e18 <File::write(unsigned char const*, unsigned int)+0x20>
    7e10:	2301      	movs	r3, #1

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    7e12:	2000      	movs	r0, #0
    7e14:	7123      	strb	r3, [r4, #4]
    7e16:	bd10      	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    7e18:	bd10      	pop	{r4, pc}
    7e1a:	bf00      	nop

00007e1c <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    7e1c:	69c0      	ldr	r0, [r0, #28]
    7e1e:	b178      	cbz	r0, 7e40 <File::read()+0x24>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7e20:	2201      	movs	r2, #1
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    7e22:	b500      	push	{lr}
    7e24:	b083      	sub	sp, #12
    7e26:	f10d 0107 	add.w	r1, sp, #7
    7e2a:	f001 fa15 	bl	9258 <SdFile::read(void*, unsigned int)>
    7e2e:	2801      	cmp	r0, #1
    7e30:	bf0c      	ite	eq
    7e32:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7e36:	f04f 30ff 	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    7e3a:	b003      	add	sp, #12
    7e3c:	f85d fb04 	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    7e40:	f04f 30ff 	mov.w	r0, #4294967295
    7e44:	4770      	bx	lr
    7e46:	bf00      	nop

00007e48 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    7e48:	69c3      	ldr	r3, [r0, #28]
    7e4a:	b1c3      	cbz	r3, 7e7e <File::peek()+0x36>
    7e4c:	2201      	movs	r2, #1
    return 0;
  }
  return t;
}

int File::peek() {
    7e4e:	b510      	push	{r4, lr}
    7e50:	b082      	sub	sp, #8
    7e52:	4604      	mov	r4, r0
    7e54:	4618      	mov	r0, r3
    7e56:	f10d 0107 	add.w	r1, sp, #7
    7e5a:	f001 f9fd 	bl	9258 <SdFile::read(void*, unsigned int)>
    7e5e:	2801      	cmp	r0, #1
    7e60:	d003      	beq.n	7e6a <File::peek()+0x22>
    7e62:	f04f 30ff 	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    7e66:	b002      	add	sp, #8
    7e68:	bd10      	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    7e6a:	69e0      	ldr	r0, [r4, #28]
    7e6c:	f89d 4007 	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    7e70:	68c1      	ldr	r1, [r0, #12]
    7e72:	3901      	subs	r1, #1
    7e74:	f001 faac 	bl	93d0 <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    7e78:	4620      	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    7e7a:	b002      	add	sp, #8
    7e7c:	bd10      	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    7e7e:	4618      	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    7e80:	4770      	bx	lr
    7e82:	bf00      	nop

00007e84 <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    7e84:	69c0      	ldr	r0, [r0, #28]
    7e86:	b108      	cbz	r0, 7e8c <File::flush()+0x8>
    _file->sync();
    7e88:	f001 bad2 	b.w	9430 <SdFile::sync()>
    7e8c:	4770      	bx	lr
    7e8e:	bf00      	nop

00007e90 <File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    7e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7e94:	2300      	movs	r3, #0
    7e96:	4605      	mov	r5, r0
    7e98:	4c15      	ldr	r4, [pc, #84]	; (7ef0 <File::File(SdFile, char const*)+0x60>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    7e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7e9e:	712b      	strb	r3, [r5, #4]
    7ea0:	4690      	mov	r8, r2
    7ea2:	60a8      	str	r0, [r5, #8]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    7ea4:	2024      	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    7ea6:	602c      	str	r4, [r5, #0]
    7ea8:	460c      	mov	r4, r1
    7eaa:	732b      	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    7eac:	f004 feec 	bl	cc88 <malloc>
    7eb0:	61e8      	str	r0, [r5, #28]
  if (_file) {
    7eb2:	b1c8      	cbz	r0, 7ee8 <File::File(SdFile, char const*)+0x58>
    memcpy(_file, &f, sizeof(SdFile));
    7eb4:	4606      	mov	r6, r0
    7eb6:	f104 0e20 	add.w	lr, r4, #32
    7eba:	6820      	ldr	r0, [r4, #0]
    7ebc:	3410      	adds	r4, #16
    7ebe:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    7ec2:	4637      	mov	r7, r6
    7ec4:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7ec8:	3610      	adds	r6, #16
    7eca:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7ece:	4574      	cmp	r4, lr
    7ed0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    7ed2:	d1f2      	bne.n	7eba <File::File(SdFile, char const*)+0x2a>
    7ed4:	6820      	ldr	r0, [r4, #0]
    
    strncpy(_name, n, 12);
    7ed6:	4641      	mov	r1, r8
    7ed8:	220c      	movs	r2, #12

File::File(SdFile f, const char *n) {
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
  if (_file) {
    memcpy(_file, &f, sizeof(SdFile));
    7eda:	6030      	str	r0, [r6, #0]
    
    strncpy(_name, n, 12);
    7edc:	f105 000d 	add.w	r0, r5, #13
    7ee0:	f005 ff5c 	bl	dd9c <strncpy>
    _name[12] = 0;
    7ee4:	2300      	movs	r3, #0
    7ee6:	766b      	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    7ee8:	4628      	mov	r0, r5
    7eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eee:	bf00      	nop
    7ef0:	2000190c 	.word	0x2000190c

00007ef4 <File::File()>:
    7ef4:	2200      	movs	r2, #0

File::File(void) {
    7ef6:	4906      	ldr	r1, [pc, #24]	; (7f10 <File::File()+0x1c>)
    7ef8:	b410      	push	{r4}
    7efa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7efe:	6001      	str	r1, [r0, #0]
    7f00:	7102      	strb	r2, [r0, #4]
    7f02:	6084      	str	r4, [r0, #8]
    7f04:	7302      	strb	r2, [r0, #12]
  _file = 0;
    7f06:	61c2      	str	r2, [r0, #28]
  _name[0] = 0;
    7f08:	7342      	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    7f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f0e:	4770      	bx	lr
    7f10:	2000190c 	.word	0x2000190c

00007f14 <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    7f14:	4770      	bx	lr
    7f16:	bf00      	nop

00007f18 <File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    7f18:	69c0      	ldr	r0, [r0, #28]
    7f1a:	b108      	cbz	r0, 7f20 <File::read(void*, unsigned short)+0x8>
    return _file->read(buf, nbyte);
    7f1c:	f001 b99c 	b.w	9258 <SdFile::read(void*, unsigned int)>
  return 0;
}
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop

00007f24 <File::seek(unsigned long)>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    7f24:	69c0      	ldr	r0, [r0, #28]
    7f26:	b130      	cbz	r0, 7f36 <File::seek(unsigned long)+0x12>
void File::flush() {
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
    7f28:	b508      	push	{r3, lr}
  if (! _file) return false;

  return _file->seekSet(pos);
    7f2a:	f001 fa51 	bl	93d0 <SdFile::seekSet(unsigned long)>
    7f2e:	3000      	adds	r0, #0
    7f30:	bf18      	it	ne
    7f32:	2001      	movne	r0, #1
}
    7f34:	bd08      	pop	{r3, pc}
    7f36:	4770      	bx	lr

00007f38 <File::size()>:
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    7f38:	69c0      	ldr	r0, [r0, #28]
    7f3a:	b100      	cbz	r0, 7f3e <File::size()+0x6>
    7f3c:	6980      	ldr	r0, [r0, #24]
  return _file->fileSize();
}
    7f3e:	4770      	bx	lr

00007f40 <File::close()>:

void File::close() {
  if (_file) {
    7f40:	69c3      	ldr	r3, [r0, #28]
    7f42:	b153      	cbz	r3, 7f5a <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    7f44:	b510      	push	{r4, lr}
    7f46:	4604      	mov	r4, r0
  if (_file) {
    _file->close();
    7f48:	4618      	mov	r0, r3
    7f4a:	f001 f911 	bl	9170 <SdFile::close()>
    free(_file); 
    7f4e:	69e0      	ldr	r0, [r4, #28]
    7f50:	f004 fea2 	bl	cc98 <free>
    _file = 0;
    7f54:	2300      	movs	r3, #0
    7f56:	61e3      	str	r3, [r4, #28]
    7f58:	bd10      	pop	{r4, pc}
    7f5a:	4770      	bx	lr

00007f5c <File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    7f5c:	69c0      	ldr	r0, [r0, #28]
    7f5e:	b118      	cbz	r0, 7f68 <File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    7f60:	7980      	ldrb	r0, [r0, #6]
    7f62:	3000      	adds	r0, #0
    7f64:	bf18      	it	ne
    7f66:	2001      	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    7f68:	4770      	bx	lr
    7f6a:	bf00      	nop

00007f6c <SDClass::begin(unsigned char)>:
  Sd2Card(void) : type_(0) {}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
    7f6c:	29fe      	cmp	r1, #254	; 0xfe

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    7f6e:	b538      	push	{r3, r4, r5, lr}
    7f70:	4605      	mov	r5, r0
    7f72:	d016      	beq.n	7fa2 <SDClass::begin(unsigned char)+0x36>
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
      return (ret == 0) ? true : false;
    }
    #endif
    return SD_init(sckRateID, chipSelectPin);
    7f74:	460a      	mov	r2, r1
    7f76:	2101      	movs	r1, #1
    7f78:	f000 fe12 	bl	8ba0 <Sd2Card::SD_init(unsigned char, unsigned char)>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    7f7c:	b908      	cbnz	r0, 7f82 <SDClass::begin(unsigned char)+0x16>
    7f7e:	2000      	movs	r0, #0
    7f80:	bd38      	pop	{r3, r4, r5, pc}
    7f82:	1d2c      	adds	r4, r5, #4
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    7f84:	2201      	movs	r2, #1
    7f86:	4629      	mov	r1, r5
    7f88:	4620      	mov	r0, r4
    7f8a:	f001 fe93 	bl	9cb4 <SdVolume::init(Sd2Card*, unsigned char)>
    7f8e:	b198      	cbz	r0, 7fb8 <SDClass::begin(unsigned char)+0x4c>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7f90:	4621      	mov	r1, r4
    7f92:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    7f96:	f001 f935 	bl	9204 <SdFile::openRoot(SdVolume*)>
    7f9a:	3000      	adds	r0, #0
    7f9c:	bf18      	it	ne
    7f9e:	2001      	movne	r0, #1
    7fa0:	bd38      	pop	{r3, r4, r5, pc}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
      chipSelectPin_ = BUILTIN_SDCARD;
    7fa2:	7001      	strb	r1, [r0, #0]
      uint8_t ret = SDHC_CardInit();
    7fa4:	f000 fb0e 	bl	85c4 <SDHC_CardInit()>
    7fa8:	4604      	mov	r4, r0
      type_ = SDHC_CardGetType();
    7faa:	f000 f9ef 	bl	838c <SDHC_CardGetType()>
    7fae:	70a8      	strb	r0, [r5, #2]
      return (ret == 0) ? true : false;
    7fb0:	fab4 f084 	clz	r0, r4
    7fb4:	0940      	lsrs	r0, r0, #5
    7fb6:	e7e1      	b.n	7f7c <SDClass::begin(unsigned char)+0x10>
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    7fb8:	4602      	mov	r2, r0
    7fba:	4629      	mov	r1, r5
    7fbc:	4620      	mov	r0, r4
    7fbe:	f001 fe79 	bl	9cb4 <SdVolume::init(Sd2Card*, unsigned char)>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    7fc2:	2800      	cmp	r0, #0
    7fc4:	d1e4      	bne.n	7f90 <SDClass::begin(unsigned char)+0x24>
         volume.init(card) &&
    7fc6:	2000      	movs	r0, #0
    7fc8:	bd38      	pop	{r3, r4, r5, pc}
    7fca:	bf00      	nop

00007fcc <SDClass::getParentDir(char const*, int*)>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fd0:	b099      	sub	sp, #100	; 0x64
    7fd2:	4692      	mov	sl, r2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7fd4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80bc <SDClass::getParentDir(char const*, int*)+0xf0>
    7fd8:	2200      	movs	r2, #0
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    7fda:	ad06      	add	r5, sp, #24
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7fdc:	4607      	mov	r7, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7fde:	3104      	adds	r1, #4
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    7fe0:	4690      	mov	r8, r2
    7fe2:	4628      	mov	r0, r5
    7fe4:	4654      	mov	r4, sl

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
    7fe6:	ae0f      	add	r6, sp, #60	; 0x3c
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7fe8:	9301      	str	r3, [sp, #4]
    7fea:	f88d 201c 	strb.w	r2, [sp, #28]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7fee:	f88d 201e 	strb.w	r2, [sp, #30]
    7ff2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    7ff6:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    7ffa:	f8cd 9018 	str.w	r9, [sp, #24]
    7ffe:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    8002:	f001 f8ff 	bl	9204 <SdFile::openRoot(SdVolume*)>
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    8006:	212f      	movs	r1, #47	; 0x2f
    8008:	4620      	mov	r0, r4
    800a:	f005 fc0d 	bl	d828 <strchr>
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    800e:	4621      	mov	r1, r4
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    8010:	b348      	cbz	r0, 8066 <SDClass::getParentDir(char const*, int*)+0x9a>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    8012:	7822      	ldrb	r2, [r4, #0]
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    8014:	1b03      	subs	r3, r0, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    8016:	a802      	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    8018:	2a2f      	cmp	r2, #47	; 0x2f
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    801a:	b2db      	uxtb	r3, r3
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    801c:	d043      	beq.n	80a6 <SDClass::getParentDir(char const*, int*)+0xda>
    801e:	2b0c      	cmp	r3, #12
    8020:	bf28      	it	cs
    8022:	230c      	movcs	r3, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    8024:	461a      	mov	r2, r3
    8026:	469b      	mov	fp, r3
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    8028:	441c      	add	r4, r3
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    802a:	f005 feb7 	bl	dd9c <strncpy>
    subdirname[idx] = 0;
    802e:	ab18      	add	r3, sp, #96	; 0x60

    // close the subdir (we reuse them) if open
    subdir->close();
    8030:	4630      	mov	r0, r6
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    8032:	445b      	add	r3, fp
    8034:	f803 8c58 	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    8038:	f001 f89a 	bl	9170 <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    803c:	2301      	movs	r3, #1
    803e:	aa02      	add	r2, sp, #8
    8040:	4629      	mov	r1, r5
    8042:	4630      	mov	r0, r6
    8044:	f001 fb34 	bl	96b0 <SdFile::open(SdFile*, char const*, unsigned char)>
    8048:	2800      	cmp	r0, #0
    804a:	d02e      	beq.n	80aa <SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    804c:	4628      	mov	r0, r5
    804e:	f001 f88f 	bl	9170 <SdFile::close()>
    8052:	462b      	mov	r3, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    8054:	212f      	movs	r1, #47	; 0x2f
    8056:	4620      	mov	r0, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    8058:	4635      	mov	r5, r6
    805a:	461e      	mov	r6, r3
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    805c:	f005 fbe4 	bl	d828 <strchr>
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    8060:	4621      	mov	r1, r4
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    8062:	2800      	cmp	r0, #0
    8064:	d1d5      	bne.n	8012 <SDClass::getParentDir(char const*, int*)+0x46>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    8066:	ebca 0404 	rsb	r4, sl, r4
    806a:	9801      	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    806c:	7929      	ldrb	r1, [r5, #4]
    806e:	6004      	str	r4, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    8070:	796a      	ldrb	r2, [r5, #5]
    8072:	79ab      	ldrb	r3, [r5, #6]
    8074:	68e8      	ldr	r0, [r5, #12]
    8076:	68ac      	ldr	r4, [r5, #8]
    8078:	692e      	ldr	r6, [r5, #16]
    807a:	7139      	strb	r1, [r7, #4]
    807c:	f895 e014 	ldrb.w	lr, [r5, #20]
    8080:	717a      	strb	r2, [r7, #5]
    8082:	69a9      	ldr	r1, [r5, #24]
    8084:	71bb      	strb	r3, [r7, #6]
    8086:	69ea      	ldr	r2, [r5, #28]
    8088:	6a2b      	ldr	r3, [r5, #32]
    808a:	60f8      	str	r0, [r7, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    808c:	4638      	mov	r0, r7
    808e:	f8c7 9000 	str.w	r9, [r7]
    8092:	60bc      	str	r4, [r7, #8]
    8094:	613e      	str	r6, [r7, #16]
    8096:	f887 e014 	strb.w	lr, [r7, #20]
    809a:	61b9      	str	r1, [r7, #24]
    809c:	61fa      	str	r2, [r7, #28]
    809e:	623b      	str	r3, [r7, #32]
    80a0:	b019      	add	sp, #100	; 0x64
    80a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    80a6:	3401      	adds	r4, #1
    80a8:	e7ad      	b.n	8006 <SDClass::getParentDir(char const*, int*)+0x3a>
{
  public:
	constexpr Print() : write_error(0) {}
    80aa:	7138      	strb	r0, [r7, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    80ac:	71b8      	strb	r0, [r7, #6]
  }

  *index = (int)(filepath - origpath);
  // parent is now the parent diretory of the file!
  return *parent;
}
    80ae:	4638      	mov	r0, r7
    80b0:	f8c7 9000 	str.w	r9, [r7]
    80b4:	b019      	add	sp, #100	; 0x64
    80b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80ba:	bf00      	nop
    80bc:	20001934 	.word	0x20001934

000080c0 <SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    80c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80c2:	b09d      	sub	sp, #116	; 0x74
    80c4:	4605      	mov	r5, r0
    80c6:	461f      	mov	r7, r3
    80c8:	4614      	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    80ca:	466b      	mov	r3, sp
    80cc:	a801      	add	r0, sp, #4
    80ce:	f7ff ff7d 	bl	7fcc <SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    80d2:	9a00      	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    80d4:	5ca3      	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    80d6:	4414      	add	r4, r2

  if (! filepath[0]) {
    80d8:	2b00      	cmp	r3, #0
    80da:	d042      	beq.n	8162 <SDClass::open(char const*, unsigned char)+0xa2>
    80dc:	2300      	movs	r3, #0
    80de:	4e32      	ldr	r6, [pc, #200]	; (81a8 <SDClass::open(char const*, unsigned char)+0xe8>)

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    80e0:	f89d 200a 	ldrb.w	r2, [sp, #10]
    80e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    80e8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    80ec:	960a      	str	r6, [sp, #40]	; 0x28
    80ee:	2a00      	cmp	r2, #0
    80f0:	d031      	beq.n	8156 <SDClass::open(char const*, unsigned char)+0x96>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    80f2:	463b      	mov	r3, r7
    80f4:	4622      	mov	r2, r4
    80f6:	a901      	add	r1, sp, #4
    80f8:	a80a      	add	r0, sp, #40	; 0x28
    80fa:	f001 fad9 	bl	96b0 <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    80fe:	b350      	cbz	r0, 8156 <SDClass::open(char const*, unsigned char)+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    8100:	a801      	add	r0, sp, #4
    8102:	f001 f835 	bl	9170 <SdFile::close()>

  if (mode & (O_APPEND | O_WRITE)) 
    8106:	f017 0f06 	tst.w	r7, #6
    810a:	d147      	bne.n	819c <SDClass::open(char const*, unsigned char)+0xdc>
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    810c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    file.seekSet(file.fileSize());
  return File(file, filepath);
    8110:	4622      	mov	r2, r4
    8112:	f89d 702e 	ldrb.w	r7, [sp, #46]	; 0x2e
    8116:	a913      	add	r1, sp, #76	; 0x4c
    8118:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    811a:	4628      	mov	r0, r5
    811c:	9613      	str	r6, [sp, #76]	; 0x4c
    811e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    8122:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    8124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    8126:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    812a:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
    812e:	9615      	str	r6, [sp, #84]	; 0x54
    8130:	9416      	str	r4, [sp, #88]	; 0x58
    8132:	9317      	str	r3, [sp, #92]	; 0x5c
    8134:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    8138:	9e10      	ldr	r6, [sp, #64]	; 0x40
    813a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    813c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    813e:	f88d e050 	strb.w	lr, [sp, #80]	; 0x50
    8142:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
    8146:	9619      	str	r6, [sp, #100]	; 0x64
    8148:	941a      	str	r4, [sp, #104]	; 0x68
    814a:	931b      	str	r3, [sp, #108]	; 0x6c
    814c:	f7ff fea0 	bl	7e90 <File::File(SdFile, char const*)>
}
    8150:	4628      	mov	r0, r5
    8152:	b01d      	add	sp, #116	; 0x74
    8154:	bdf0      	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    8156:	4628      	mov	r0, r5
    8158:	f7ff fecc 	bl	7ef4 <File::File()>
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    815c:	4628      	mov	r0, r5
    815e:	b01d      	add	sp, #116	; 0x74
    8160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8162:	f89d 3008 	ldrb.w	r3, [sp, #8]

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    8166:	a913      	add	r1, sp, #76	; 0x4c
    8168:	4a0f      	ldr	r2, [pc, #60]	; (81a8 <SDClass::open(char const*, unsigned char)+0xe8>)
    816a:	4628      	mov	r0, r5
    816c:	f89d 7009 	ldrb.w	r7, [sp, #9]
    8170:	f89d 600a 	ldrb.w	r6, [sp, #10]
    8174:	9c03      	ldr	r4, [sp, #12]
    8176:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    817a:	9213      	str	r2, [sp, #76]	; 0x4c
    817c:	9b04      	ldr	r3, [sp, #16]
    817e:	9a05      	ldr	r2, [sp, #20]
    8180:	f88d 7051 	strb.w	r7, [sp, #81]	; 0x51
    8184:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
    8188:	9415      	str	r4, [sp, #84]	; 0x54
    818a:	9316      	str	r3, [sp, #88]	; 0x58
    818c:	9217      	str	r2, [sp, #92]	; 0x5c
    818e:	f89d 7018 	ldrb.w	r7, [sp, #24]
    8192:	9e07      	ldr	r6, [sp, #28]
    8194:	9c08      	ldr	r4, [sp, #32]
    8196:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8198:	4a04      	ldr	r2, [pc, #16]	; (81ac <SDClass::open(char const*, unsigned char)+0xec>)
    819a:	e7d2      	b.n	8142 <SDClass::open(char const*, unsigned char)+0x82>
  }
  // close the parent
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
    819c:	a80a      	add	r0, sp, #40	; 0x28
    819e:	9910      	ldr	r1, [sp, #64]	; 0x40
    81a0:	f001 f916 	bl	93d0 <SdFile::seekSet(unsigned long)>
    81a4:	e7b2      	b.n	810c <SDClass::open(char const*, unsigned char)+0x4c>
    81a6:	bf00      	nop
    81a8:	20001934 	.word	0x20001934
    81ac:	20001928 	.word	0x20001928

000081b0 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    81b0:	4b06      	ldr	r3, [pc, #24]	; (81cc <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    81b2:	2200      	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    81b4:	2002      	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    81b6:	4906      	ldr	r1, [pc, #24]	; (81d0 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    81b8:	709a      	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    81ba:	6058      	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    81bc:	62d9      	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    81be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
    81c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    81c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    81ca:	4770      	bx	lr
    81cc:	20002ad0 	.word	0x20002ad0
    81d0:	20001934 	.word	0x20001934

000081d4 <sdhc_setSdclk(unsigned long)>:
    //IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    81d4:	4a26      	ldr	r2, [pc, #152]	; (8270 <sdhc_setSdclk(unsigned long)+0x9c>)
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    81d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    81da:	4b26      	ldr	r3, [pc, #152]	; (8274 <sdhc_setSdclk(unsigned long)+0xa0>)
    //IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    81dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    81de:	fb01 f000 	mul.w	r0, r1, r0
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    81e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    81e6:	4924      	ldr	r1, [pc, #144]	; (8278 <sdhc_setSdclk(unsigned long)+0xa4>)
    81e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    81ec:	fba1 1303 	umull	r1, r3, r1, r3
 Serial.print("VEND_SPEC2:    "); Serial.println(SDHC_VENDOR2,HEX);    // Vendor Specific2 register
 #endif
}
*/

static void sdhc_setSdclk(uint32_t kHzMax) {
    81f0:	b4f0      	push	{r4, r5, r6, r7}
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    81f2:	089b      	lsrs	r3, r3, #2
    81f4:	f3c2 24c2 	ubfx	r4, r2, #11, #3
    81f8:	4a20      	ldr	r2, [pc, #128]	; (827c <sdhc_setSdclk(unsigned long)+0xa8>)
    81fa:	3401      	adds	r4, #1
    81fc:	fbb2 f3f3 	udiv	r3, r2, r3
    8200:	fbb3 f4f4 	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8204:	ebb0 1f14 	cmp.w	r0, r4, lsr #4
    8208:	d22d      	bcs.n	8266 <sdhc_setSdclk(unsigned long)+0x92>
    820a:	2301      	movs	r3, #1
    820c:	e001      	b.n	8212 <sdhc_setSdclk(unsigned long)+0x3e>
    820e:	2bff      	cmp	r3, #255	; 0xff
    8210:	d805      	bhi.n	821e <sdhc_setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    8212:	005b      	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8214:	011a      	lsls	r2, r3, #4
    8216:	fbb4 f2f2 	udiv	r2, r4, r2
    821a:	4290      	cmp	r0, r2
    821c:	d3f7      	bcc.n	820e <sdhc_setSdclk(unsigned long)+0x3a>
    821e:	085a      	lsrs	r2, r3, #1
    8220:	0217      	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8222:	fbb4 f2f3 	udiv	r2, r4, r3
    8226:	4290      	cmp	r0, r2
    8228:	d220      	bcs.n	826c <sdhc_setSdclk(unsigned long)+0x98>
    822a:	0059      	lsls	r1, r3, #1
    822c:	2201      	movs	r2, #1
    dvs++;
    822e:	1c56      	adds	r6, r2, #1
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8230:	fbb4 f5f1 	udiv	r5, r4, r1
    8234:	42a8      	cmp	r0, r5
    8236:	4419      	add	r1, r3
    8238:	d213      	bcs.n	8262 <sdhc_setSdclk(unsigned long)+0x8e>
    823a:	2e10      	cmp	r6, #16
    823c:	4632      	mov	r2, r6
    823e:	d1f6      	bne.n	822e <sdhc_setSdclk(unsigned long)+0x5a>
    8240:	23f0      	movs	r3, #240	; 0xf0
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8242:	4c0f      	ldr	r4, [pc, #60]	; (8280 <sdhc_setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8244:	480f      	ldr	r0, [pc, #60]	; (8284 <sdhc_setSdclk(unsigned long)+0xb0>)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8246:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    8248:	4621      	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    824a:	4010      	ands	r0, r2
    824c:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
    8250:	ea40 0207 	orr.w	r2, r0, r7
    8254:	431a      	orrs	r2, r3
    8256:	62e2      	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    8258:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    825a:	071b      	lsls	r3, r3, #28
    825c:	d5fc      	bpl.n	8258 <sdhc_setSdclk(unsigned long)+0x84>
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif

//  Serial.printf("setSdclk: %d %d : %x %x\n\r", f_pll, m_sdClkKhz, sdclkfs, dvs);
}
    825e:	bcf0      	pop	{r4, r5, r6, r7}
    8260:	4770      	bx	lr
    8262:	0113      	lsls	r3, r2, #4
    8264:	e7ed      	b.n	8242 <sdhc_setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8266:	2700      	movs	r7, #0

static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    8268:	2301      	movs	r3, #1
    826a:	e7da      	b.n	8222 <sdhc_setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    826c:	2300      	movs	r3, #0
    826e:	e7e8      	b.n	8242 <sdhc_setSdclk(unsigned long)+0x6e>
    8270:	400fc000 	.word	0x400fc000
    8274:	400d8000 	.word	0x400d8000
    8278:	aaaaaaab 	.word	0xaaaaaaab
    827c:	5e69ec00 	.word	0x5e69ec00
    8280:	402c0000 	.word	0x402c0000
    8284:	fff0000f 	.word	0xfff0000f

00008288 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    8288:	4b20      	ldr	r3, [pc, #128]	; (830c <SDHC_CMD_Do(unsigned long)+0x84>)
    828a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    828c:	4619      	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    828e:	b410      	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    8290:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    8294:	461c      	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    8296:	631a      	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    8298:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    829a:	4b1c      	ldr	r3, [pc, #112]	; (830c <SDHC_CMD_Do(unsigned long)+0x84>)
    829c:	07d2      	lsls	r2, r2, #31
    829e:	d4fb      	bmi.n	8298 <SDHC_CMD_Do(unsigned long)+0x10>
    82a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    82a2:	0792      	lsls	r2, r2, #30
    82a4:	d4f8      	bmi.n	8298 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    82a6:	60d8      	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    82a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    82ac:	4618      	mov	r0, r3
    82ae:	e000      	b.n	82b2 <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    82b0:	b1aa      	cbz	r2, 82de <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    82b2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    82b4:	3a01      	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    82b6:	4b16      	ldr	r3, [pc, #88]	; (8310 <SDHC_CMD_Do(unsigned long)+0x88>)
    82b8:	4c14      	ldr	r4, [pc, #80]	; (830c <SDHC_CMD_Do(unsigned long)+0x84>)
    82ba:	400b      	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    82bc:	2b00      	cmp	r3, #0
    82be:	d0f7      	beq.n	82b0 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    82c0:	b16a      	cbz	r2, 82de <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    82c2:	2b01      	cmp	r3, #1
    82c4:	d10b      	bne.n	82de <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    82c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    82c8:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    82cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    82ce:	d00f      	beq.n	82f0 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    82d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    82d4:	2003      	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    82d6:	6323      	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    82d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    82dc:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    82de:	4a0b      	ldr	r2, [pc, #44]	; (830c <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    82e0:	2001      	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    82e2:	4b0c      	ldr	r3, [pc, #48]	; (8314 <SDHC_CMD_Do(unsigned long)+0x8c>)
    82e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
    82e6:	430b      	orrs	r3, r1
    82e8:	6313      	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    82ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    82ee:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    82f0:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    82f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    82f6:	d004      	beq.n	8302 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    82f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    82fc:	2005      	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    82fe:	6323      	str	r3, [r4, #48]	; 0x30
    8300:	e7f3      	b.n	82ea <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    8302:	f043 0301 	orr.w	r3, r3, #1
    8306:	6323      	str	r3, [r4, #48]	; 0x30
    8308:	e7ef      	b.n	82ea <SDHC_CMD_Do(unsigned long)+0x62>
    830a:	bf00      	nop
    830c:	402c0000 	.word	0x402c0000
    8310:	000e0001 	.word	0x000e0001
    8314:	000f0001 	.word	0x000f0001

00008318 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    8318:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    831a:	4d0d      	ldr	r5, [pc, #52]	; (8350 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    831c:	2600      	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    831e:	480d      	ldr	r0, [pc, #52]	; (8354 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    8320:	f240 34e7 	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    8324:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    8326:	f7ff ffaf 	bl	8288 <SDHC_CMD_Do(unsigned long)>
    832a:	4603      	mov	r3, r0
    832c:	e006      	b.n	833c <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    832e:	b94b      	cbnz	r3, 8344 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    8330:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    8332:	f7ff ffa9 	bl	8288 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    8336:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    8338:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    833a:	d005      	beq.n	8348 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    833c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    833e:	4805      	ldr	r0, [pc, #20]	; (8354 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    8340:	0752      	lsls	r2, r2, #29
    8342:	d4f4      	bmi.n	832e <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    8344:	4618      	mov	r0, r3
    8346:	bd70      	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    8348:	2800      	cmp	r0, #0
    834a:	bf08      	it	eq
    834c:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    834e:	bd70      	pop	{r4, r5, r6, pc}
    8350:	402c0000 	.word	0x402c0000
    8354:	0cdb0000 	.word	0x0cdb0000

00008358 <SDHC_ACMD41_SendOperationCond(unsigned long)>:
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    8358:	b538      	push	{r3, r4, r5, lr}
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    835a:	4c09      	ldr	r4, [pc, #36]	; (8380 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x28>)
    835c:	2300      	movs	r3, #0
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    835e:	4605      	mov	r5, r0
  SDHC_CMDARG = 0;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    8360:	4808      	ldr	r0, [pc, #32]	; (8384 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x2c>)
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    8362:	60a3      	str	r3, [r4, #8]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    8364:	f7ff ff90 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    8368:	b100      	cbz	r0, 836c <SDHC_ACMD41_SendOperationCond(unsigned long)+0x14>
  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }

  return result;
}
    836a:	bd38      	pop	{r3, r4, r5, pc}
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    836c:	6923      	ldr	r3, [r4, #16]

  SDHC_CMDARG = cond;

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    836e:	4806      	ldr	r0, [pc, #24]	; (8388 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x30>)

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }

  SDHC_CMDARG = cond;
    8370:	60a5      	str	r5, [r4, #8]

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    8372:	f7ff ff89 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8376:	2800      	cmp	r0, #0
    8378:	d1f7      	bne.n	836a <SDHC_ACMD41_SendOperationCond(unsigned long)+0x12>
    837a:	6923      	ldr	r3, [r4, #16]

  return result;
}
    837c:	bd38      	pop	{r3, r4, r5, pc}
    837e:	bf00      	nop
    8380:	402c0000 	.word	0x402c0000
    8384:	371a0000 	.word	0x371a0000
    8388:	29020000 	.word	0x29020000

0000838c <SDHC_CardGetType()>:
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    838c:	4b07      	ldr	r3, [pc, #28]	; (83ac <SDHC_CardGetType()+0x20>)
    838e:	781a      	ldrb	r2, [r3, #0]
    8390:	b94a      	cbnz	r2, 83a6 <SDHC_CardGetType()+0x1a>
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    8392:	789a      	ldrb	r2, [r3, #2]
    8394:	b12a      	cbz	r2, 83a2 <SDHC_CardGetType()+0x16>
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
    8396:	785b      	ldrb	r3, [r3, #1]
    8398:	2b00      	cmp	r3, #0
  return 3; // SD_CARD_TYPE_SDHC
    839a:	bf0c      	ite	eq
    839c:	2002      	moveq	r0, #2
    839e:	2003      	movne	r0, #3
    83a0:	4770      	bx	lr

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    83a2:	2001      	movs	r0, #1
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
  return 3; // SD_CARD_TYPE_SDHC
}
    83a4:	4770      	bx	lr
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    83a6:	2000      	movs	r0, #0
    83a8:	4770      	bx	lr
    83aa:	bf00      	nop
    83ac:	20002b24 	.word	0x20002b24

000083b0 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    83b0:	4b38      	ldr	r3, [pc, #224]	; (8494 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    83b2:	781a      	ldrb	r2, [r3, #0]
    83b4:	b10a      	cbz	r2, 83ba <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    83b6:	2003      	movs	r0, #3
    83b8:	4770      	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    83ba:	b570      	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    83bc:	785b      	ldrb	r3, [r3, #1]
    83be:	4606      	mov	r6, r0
    83c0:	b903      	cbnz	r3, 83c4 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    83c2:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    83c4:	4d34      	ldr	r5, [pc, #208]	; (8498 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    83c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    83ca:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    83ce:	4833      	ldr	r0, [pc, #204]	; (849c <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    83d0:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    83d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
    83d4:	f043 0310 	orr.w	r3, r3, #16
    83d8:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    83da:	60a9      	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    83dc:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    83de:	f7ff ff53 	bl	8288 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    83e2:	2800      	cmp	r0, #0
    83e4:	d14d      	bne.n	8482 <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    83e6:	462c      	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    83e8:	692b      	ldr	r3, [r5, #16]
    83ea:	f106 0240 	add.w	r2, r6, #64	; 0x40
    83ee:	f506 7010 	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    83f2:	4629      	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    83f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    83f6:	4e28      	ldr	r6, [pc, #160]	; (8498 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    83f8:	f043 0520 	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    83fc:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    8400:	6325      	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    8402:	d13f      	bne.n	8484 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    8404:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8406:	051d      	lsls	r5, r3, #20
    8408:	d5fc      	bpl.n	8404 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    840a:	6a0b      	ldr	r3, [r1, #32]
    840c:	3240      	adds	r2, #64	; 0x40
    840e:	f842 3c80 	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    8412:	6a0b      	ldr	r3, [r1, #32]
    8414:	f842 3c7c 	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    8418:	6a0b      	ldr	r3, [r1, #32]
    841a:	f842 3c78 	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    841e:	6a0b      	ldr	r3, [r1, #32]
    8420:	f842 3c74 	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    8424:	6a0b      	ldr	r3, [r1, #32]
    8426:	f842 3c70 	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    842a:	6a0b      	ldr	r3, [r1, #32]
    842c:	f842 3c6c 	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    8430:	6a0b      	ldr	r3, [r1, #32]
    8432:	f842 3c68 	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    8436:	6a0b      	ldr	r3, [r1, #32]
    8438:	f842 3c64 	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    843c:	6a0b      	ldr	r3, [r1, #32]
    843e:	f842 3c60 	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    8442:	6a0b      	ldr	r3, [r1, #32]
    8444:	f842 3c5c 	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    8448:	6a0b      	ldr	r3, [r1, #32]
    844a:	f842 3c58 	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    844e:	6a0b      	ldr	r3, [r1, #32]
    8450:	f842 3c54 	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    8454:	6a0b      	ldr	r3, [r1, #32]
    8456:	f842 3c50 	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    845a:	6a0b      	ldr	r3, [r1, #32]
    845c:	f842 3c4c 	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    8460:	6a0b      	ldr	r3, [r1, #32]
    8462:	f842 3c48 	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    8466:	6a0b      	ldr	r3, [r1, #32]
    8468:	f842 3c44 	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    846c:	4282      	cmp	r2, r0
    846e:	d1c1      	bne.n	83f4 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    8470:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    8472:	4909      	ldr	r1, [pc, #36]	; (8498 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    8474:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    8476:	4a08      	ldr	r2, [pc, #32]	; (8498 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    8478:	079b      	lsls	r3, r3, #30
    847a:	d5fb      	bpl.n	8474 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    847c:	4b08      	ldr	r3, [pc, #32]	; (84a0 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    847e:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    8480:	bd70      	pop	{r4, r5, r6, pc}
}
    8482:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    8484:	4a07      	ldr	r2, [pc, #28]	; (84a4 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    8486:	431a      	orrs	r2, r3
    8488:	6332      	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    848a:	f7ff ff45 	bl	8318 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    848e:	2001      	movs	r0, #1
    8490:	e7ef      	b.n	8472 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    8492:	bf00      	nop
    8494:	20002b24 	.word	0x20002b24
    8498:	402c0000 	.word	0x402c0000
    849c:	113a0010 	.word	0x113a0010
    84a0:	01000022 	.word	0x01000022
    84a4:	00700020 	.word	0x00700020

000084a8 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    84a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    84aa:	4b28      	ldr	r3, [pc, #160]	; (854c <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    84ac:	781a      	ldrb	r2, [r3, #0]
    84ae:	b10a      	cbz	r2, 84b4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    84b0:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    84b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    84b4:	785b      	ldrb	r3, [r3, #1]
    84b6:	4604      	mov	r4, r0
    84b8:	b903      	cbnz	r3, 84bc <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    84ba:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    84bc:	4d24      	ldr	r5, [pc, #144]	; (8550 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    84be:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    84c2:	4824      	ldr	r0, [pc, #144]	; (8554 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    84c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    84c6:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    84c8:	6cab      	ldr	r3, [r5, #72]	; 0x48
    84ca:	f023 0310 	bic.w	r3, r3, #16
    84ce:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    84d0:	60a9      	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    84d2:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    84d4:	f7ff fed8 	bl	8288 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    84d8:	2800      	cmp	r0, #0
    84da:	d1ea      	bne.n	84b2 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    84dc:	462a      	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    84de:	692b      	ldr	r3, [r5, #16]
    84e0:	f504 7700 	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    84e4:	462e      	mov	r6, r5
    84e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    84e8:	4919      	ldr	r1, [pc, #100]	; (8550 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    84ea:	06d8      	lsls	r0, r3, #27
    84ec:	d5fb      	bpl.n	84e6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    84ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    84f0:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    84f4:	d119      	bne.n	852a <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    84f6:	f104 0140 	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    84fa:	f854 3b04 	ldr.w	r3, [r4], #4
    84fe:	4d14      	ldr	r5, [pc, #80]	; (8550 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    8500:	42a1      	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    8502:	6213      	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    8504:	d1f9      	bne.n	84fa <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    8506:	6b33      	ldr	r3, [r6, #48]	; 0x30
    8508:	f043 0310 	orr.w	r3, r3, #16
    850c:	6333      	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    850e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    8510:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    8514:	d111      	bne.n	853a <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    8516:	428f      	cmp	r7, r1
    8518:	d1e5      	bne.n	84e6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    851a:	490d      	ldr	r1, [pc, #52]	; (8550 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    851c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    851e:	4a0c      	ldr	r2, [pc, #48]	; (8550 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    8520:	079b      	lsls	r3, r3, #30
    8522:	d5fb      	bpl.n	851c <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    8524:	4b0c      	ldr	r3, [pc, #48]	; (8558 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    8526:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    8528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    852a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    852c:	4b0b      	ldr	r3, [pc, #44]	; (855c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    852e:	4313      	orrs	r3, r2
    8530:	630b      	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    8532:	f7ff fef1 	bl	8318 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    8536:	2001      	movs	r0, #1
    8538:	e7ef      	b.n	851a <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    853a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    853c:	4b07      	ldr	r3, [pc, #28]	; (855c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    853e:	4313      	orrs	r3, r2
    8540:	632b      	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    8542:	f7ff fee9 	bl	8318 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    8546:	2001      	movs	r0, #1
    8548:	e7e7      	b.n	851a <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    854a:	bf00      	nop
    854c:	20002b24 	.word	0x20002b24
    8550:	402c0000 	.word	0x402c0000
    8554:	183a0000 	.word	0x183a0000
    8558:	01000012 	.word	0x01000012
    855c:	00700010 	.word	0x00700010

00008560 <initClock()>:
  }
  
  void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    8560:	4a16      	ldr	r2, [pc, #88]	; (85bc <initClock()+0x5c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    8562:	4b17      	ldr	r3, [pc, #92]	; (85c0 <initClock()+0x60>)
  }
  
  void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    8564:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    8568:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    856c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    8570:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    8574:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    8578:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    857c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    8580:	f041 0118 	orr.w	r1, r1, #24
    8584:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    8588:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    858c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    8590:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    8594:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    8598:	f042 020c 	orr.w	r2, r2, #12
    859c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    85a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    85a2:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    85a6:	625a      	str	r2, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    85a8:	69da      	ldr	r2, [r3, #28]
    85aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    85ae:	61da      	str	r2, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    85b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    85b2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
    85b6:	625a      	str	r2, [r3, #36]	; 0x24
    85b8:	4770      	bx	lr
    85ba:	bf00      	nop
    85bc:	400d8000 	.word	0x400d8000
    85c0:	400fc000 	.word	0x400fc000

000085c4 <SDHC_CardInit()>:

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t SDHC_CardInit(void)
{
    85c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

// initialize the SDHC Controller
// returns status of initialization(OK, nonInit, noCard, CardProtected)
static uint8_t SDHC_Init(void)
{
  initClock();
    85c8:	f7ff ffca 	bl	8560 <initClock()>
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    85cc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    85d0:	4ba9      	ldr	r3, [pc, #676]	; (8878 <SDHC_CardInit()+0x2b4>)
    85d2:	2105      	movs	r1, #5
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    85d4:	48a9      	ldr	r0, [pc, #676]	; (887c <SDHC_CardInit()+0x2b8>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    85d6:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    85da:	4ca9      	ldr	r4, [pc, #676]	; (8880 <SDHC_CardInit()+0x2bc>)
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    85dc:	4602      	mov	r2, r0
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    85de:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    85e2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    85e6:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    85ea:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    85ee:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    85f2:	6485      	str	r5, [r0, #72]	; 0x48
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    85f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    85f6:	431c      	orrs	r4, r3
    85f8:	62c4      	str	r4, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    85fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    85fc:	01dc      	lsls	r4, r3, #7
    85fe:	d4fc      	bmi.n	85fa <SDHC_CardInit()+0x36>

  /* Set the SDHC initial baud rate divider and start */
  sdhc_setSdclk(400);
    8600:	f44f 70c8 	mov.w	r0, #400	; 0x190
    8604:	f7ff fde6 	bl	81d4 <sdhc_setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    8608:	4a9c      	ldr	r2, [pc, #624]	; (887c <SDHC_CardInit()+0x2b8>)
    860a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    860c:	489b      	ldr	r0, [pc, #620]	; (887c <SDHC_CardInit()+0x2b8>)
    860e:	f013 0303 	ands.w	r3, r3, #3
    8612:	d1fa      	bne.n	860a <SDHC_CardInit()+0x46>

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    8614:	4c98      	ldr	r4, [pc, #608]	; (8878 <SDHC_CardInit()+0x2b4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    8616:	f247 0588 	movw	r5, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    861a:	f241 0788 	movw	r7, #4232	; 0x1088

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    861e:	f44f 3681 	mov.w	r6, #66048	; 0x10200

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    8622:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8626:	4602      	mov	r2, r0
#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    8628:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    862c:	f240 51dc 	movw	r1, #1500	; 0x5dc
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    8630:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    8634:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    8638:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    863c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    8640:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    8644:	f8c4 53c0 	str.w	r5, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    8648:	f8c4 53ac 	str.w	r5, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    864c:	f8c4 73b0 	str.w	r7, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    8650:	f8c4 53b4 	str.w	r5, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    8654:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    8658:	6046      	str	r6, [r0, #4]
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
    865a:	6a83      	ldr	r3, [r0, #40]	; 0x28
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    865c:	4c89      	ldr	r4, [pc, #548]	; (8884 <SDHC_CardInit()+0x2c0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    865e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    8662:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8666:	6283      	str	r3, [r0, #40]	; 0x28
    //SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
  //#endif

  /* Enable requests */
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    8668:	6b03      	ldr	r3, [r0, #48]	; 0x30
    866a:	6303      	str	r3, [r0, #48]	; 0x30
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    866c:	6344      	str	r4, [r0, #52]	; 0x34

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    866e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8670:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8674:	62d3      	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    8676:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8678:	4c80      	ldr	r4, [pc, #512]	; (887c <SDHC_CardInit()+0x2b8>)
    867a:	0118      	lsls	r0, r3, #4
    867c:	d4fb      	bmi.n	8676 <SDHC_CardInit()+0xb2>
#endif

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    867e:	3901      	subs	r1, #1
    8680:	d1f5      	bne.n	866e <SDHC_CardInit()+0xaa>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  // to do - check if this needed
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    8682:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8688:	6323      	str	r3, [r4, #48]	; 0x30
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    868a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    868c:	03da      	lsls	r2, r3, #15
    868e:	d409      	bmi.n	86a4 <SDHC_CardInit()+0xe0>
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    8690:	4b7d      	ldr	r3, [pc, #500]	; (8888 <SDHC_CardInit()+0x2c4>)
    8692:	2202      	movs	r2, #2
  sdCardDesc.address = 0;
    8694:	6059      	str	r1, [r3, #4]
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    return 0;
  } else {
    return SDHC_STATUS_NODISK;
    8696:	4610      	mov	r0, r2

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    8698:	7059      	strb	r1, [r3, #1]
  sdCardDesc.version2 = 0;
    869a:	7099      	strb	r1, [r3, #2]
  sdCardDesc.numBlocks = 0;
    869c:	6099      	str	r1, [r3, #8]
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    869e:	701a      	strb	r2, [r3, #0]
    86a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86a4:	4d78      	ldr	r5, [pc, #480]	; (8888 <SDHC_CardInit()+0x2c4>)

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    86a6:	4608      	mov	r0, r1
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    86a8:	7029      	strb	r1, [r5, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    86aa:	7069      	strb	r1, [r5, #1]
  sdCardDesc.version2 = 0;
    86ac:	70a9      	strb	r1, [r5, #2]
  sdCardDesc.numBlocks = 0;

  if (resS)
    return resS;

  SDHC_IRQSIGEN = 0;
    86ae:	63a1      	str	r1, [r4, #56]	; 0x38
static int SDHC_CMD0_GoToIdle(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    86b0:	60a1      	str	r1, [r4, #8]
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    86b2:	6069      	str	r1, [r5, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    86b4:	60a9      	str	r1, [r5, #8]

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    86b6:	f7ff fde7 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    86ba:	b968      	cbnz	r0, 86d8 <SDHC_CardInit()+0x114>
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    86bc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    86c0:	6922      	ldr	r2, [r4, #16]
  SDHC_CMDARG = cond;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    86c2:	4872      	ldr	r0, [pc, #456]	; (888c <SDHC_CardInit()+0x2c8>)
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    86c4:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    86c6:	f7ff fddf 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    86ca:	b948      	cbnz	r0, 86e0 <SDHC_CardInit()+0x11c>
    86cc:	6923      	ldr	r3, [r4, #16]
    return SDHC_STATUS_NOINIT;
  }

  resR = SDHC_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
    86ce:	6923      	ldr	r3, [r4, #16]
    86d0:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    86d4:	f000 80c1 	beq.w	885a <SDHC_CardInit()+0x296>

  SDHC_IRQSIGEN = 0;

  resR = SDHC_CMD0_GoToIdle();
  if (resR) {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    86d8:	2001      	movs	r0, #1
    86da:	7028      	strb	r0, [r5, #0]
    return SDHC_STATUS_NOINIT;
    86dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
  } else if (resR == SDHC_RESULT_NO_RESPONSE) {
    86e0:	2805      	cmp	r0, #5
    86e2:	d1f9      	bne.n	86d8 <SDHC_CardInit()+0x114>
  } else {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    return SDHC_STATUS_NOINIT;
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    86e4:	2000      	movs	r0, #0
    86e6:	f7ff fe37 	bl	8358 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    86ea:	2800      	cmp	r0, #0
    86ec:	d1f4      	bne.n	86d8 <SDHC_CardInit()+0x114>

  if (SDHC_CMDRSP0 & 0x300000) {
    86ee:	4b63      	ldr	r3, [pc, #396]	; (887c <SDHC_CardInit()+0x2b8>)
    86f0:	691a      	ldr	r2, [r3, #16]
    86f2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    86f6:	d01e      	beq.n	8736 <SDHC_CardInit()+0x172>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    86f8:	786a      	ldrb	r2, [r5, #1]
    //
    uint32_t ii = 0;
    86fa:	4604      	mov	r4, r0
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    86fc:	4f64      	ldr	r7, [pc, #400]	; (8890 <SDHC_CardInit()+0x2cc>)
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    86fe:	461e      	mov	r6, r3
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    8700:	2a00      	cmp	r2, #0
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    8702:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8894 <SDHC_CardInit()+0x2d0>
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    8706:	bf08      	it	eq
    8708:	f44f 1740 	moveq.w	r7, #3145728	; 0x300000
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    870c:	4638      	mov	r0, r7
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    870e:	3401      	adds	r4, #1
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    8710:	f7ff fe22 	bl	8358 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    8714:	2800      	cmp	r0, #0
    8716:	f040 80a3 	bne.w	8860 <SDHC_CardInit()+0x29c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    871a:	4544      	cmp	r4, r8
    871c:	6933      	ldr	r3, [r6, #16]
    871e:	d801      	bhi.n	8724 <SDHC_CardInit()+0x160>
    8720:	2b00      	cmp	r3, #0
    8722:	daf3      	bge.n	870c <SDHC_CardInit()+0x148>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    8724:	4b5b      	ldr	r3, [pc, #364]	; (8894 <SDHC_CardInit()+0x2d0>)
    8726:	429c      	cmp	r4, r3
    8728:	d803      	bhi.n	8732 <SDHC_CardInit()+0x16e>
    872a:	4b54      	ldr	r3, [pc, #336]	; (887c <SDHC_CardInit()+0x2b8>)
    872c:	691b      	ldr	r3, [r3, #16]
    872e:	005b      	lsls	r3, r3, #1
    8730:	d401      	bmi.n	8736 <SDHC_CardInit()+0x172>
      sdCardDesc.highCapacity = 0;
    8732:	2300      	movs	r3, #0
    8734:	706b      	strb	r3, [r5, #1]
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    8736:	2300      	movs	r3, #0
    8738:	4c50      	ldr	r4, [pc, #320]	; (887c <SDHC_CardInit()+0x2b8>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    873a:	4857      	ldr	r0, [pc, #348]	; (8898 <SDHC_CardInit()+0x2d4>)
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    873c:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    873e:	f7ff fda3 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8742:	4603      	mov	r3, r0
    8744:	2800      	cmp	r0, #0
    8746:	d1c7      	bne.n	86d8 <SDHC_CardInit()+0x114>
    8748:	6922      	ldr	r2, [r4, #16]
  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    874a:	4854      	ldr	r0, [pc, #336]	; (889c <SDHC_CardInit()+0x2d8>)
static int SDHC_CMD3_GetAddress(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    874c:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    874e:	f7ff fd9b 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8752:	2800      	cmp	r0, #0
    8754:	d1c0      	bne.n	86d8 <SDHC_CardInit()+0x114>
    8756:	6923      	ldr	r3, [r4, #16]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    8758:	4f51      	ldr	r7, [pc, #324]	; (88a0 <SDHC_CardInit()+0x2dc>)
    875a:	6923      	ldr	r3, [r4, #16]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    875c:	4851      	ldr	r0, [pc, #324]	; (88a4 <SDHC_CardInit()+0x2e0>)
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    875e:	401f      	ands	r7, r3
    8760:	4e49      	ldr	r6, [pc, #292]	; (8888 <SDHC_CardInit()+0x2c4>)
static int SDHC_CMD9_GetParameters(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    8762:	60a7      	str	r7, [r4, #8]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    8764:	606f      	str	r7, [r5, #4]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    8766:	f7ff fd8f 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {
    876a:	2800      	cmp	r0, #0
    876c:	d1b4      	bne.n	86d8 <SDHC_CardInit()+0x114>
    //(void)SDHC_CMDRSP0;
    sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;
    876e:	69a3      	ldr	r3, [r4, #24]
    8770:	0e1b      	lsrs	r3, r3, #24
    8772:	70f3      	strb	r3, [r6, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (SDHC_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    8774:	69e3      	ldr	r3, [r4, #28]
    8776:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
    877a:	d174      	bne.n	8866 <SDHC_CardInit()+0x2a2>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    877c:	69a1      	ldr	r1, [r4, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    877e:	69a3      	ldr	r3, [r4, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    8780:	6960      	ldr	r0, [r4, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    8782:	f3c1 2103 	ubfx	r1, r1, #8, #4
    8786:	029a      	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    8788:	6963      	ldr	r3, [r4, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    878a:	3909      	subs	r1, #9
    878c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    8790:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    8794:	ea42 5290 	orr.w	r2, r2, r0, lsr #22
    8798:	3302      	adds	r3, #2
    879a:	3201      	adds	r2, #1
    879c:	fa02 f303 	lsl.w	r3, r2, r3
    87a0:	408b      	lsls	r3, r1
    87a2:	60b3      	str	r3, [r6, #8]
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    87a4:	4e35      	ldr	r6, [pc, #212]	; (887c <SDHC_CardInit()+0x2b8>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    87a6:	4840      	ldr	r0, [pc, #256]	; (88a8 <SDHC_CardInit()+0x2e4>)
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    87a8:	60b7      	str	r7, [r6, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    87aa:	f7ff fd6d 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    87ae:	2800      	cmp	r0, #0
    87b0:	d192      	bne.n	86d8 <SDHC_CardInit()+0x114>
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    87b2:	f44f 7300 	mov.w	r3, #512	; 0x200
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    87b6:	6932      	ldr	r2, [r6, #16]
  SDHC_CMDARG = block_size;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    87b8:	483c      	ldr	r0, [pc, #240]	; (88ac <SDHC_CardInit()+0x2e8>)
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    87ba:	60b3      	str	r3, [r6, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    87bc:	f7ff fd64 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    87c0:	2800      	cmp	r0, #0
    87c2:	d189      	bne.n	86d8 <SDHC_CardInit()+0x114>
    87c4:	6933      	ldr	r3, [r6, #16]
  SDHC_CMDARG = address;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    87c6:	483a      	ldr	r0, [pc, #232]	; (88b0 <SDHC_CardInit()+0x2ec>)
static int SDHC_ACMD6_SetBusWidth(uint32_t address, uint32_t width)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    87c8:	60b7      	str	r7, [r6, #8]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    87ca:	f7ff fd5d 	bl	8288 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    87ce:	2800      	cmp	r0, #0
    87d0:	d182      	bne.n	86d8 <SDHC_CardInit()+0x114>
  SDHC_CMDARG = width;
    87d2:	2302      	movs	r3, #2
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    87d4:	6932      	ldr	r2, [r6, #16]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    87d6:	4837      	ldr	r0, [pc, #220]	; (88b4 <SDHC_CardInit()+0x2f0>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
  SDHC_CMDARG = width;
    87d8:	60b3      	str	r3, [r6, #8]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    87da:	f7ff fd55 	bl	8288 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {  (void)SDHC_CMDRSP0; }
    87de:	4607      	mov	r7, r0
    87e0:	2800      	cmp	r0, #0
    87e2:	f47f af79 	bne.w	86d8 <SDHC_CardInit()+0x114>
    87e6:	6933      	ldr	r3, [r6, #16]
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    87e8:	2305      	movs	r3, #5

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    87ea:	6ab2      	ldr	r2, [r6, #40]	; 0x28

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    87ec:	f246 10a8 	movw	r0, #25000	; 0x61a8
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    87f0:	4c21      	ldr	r4, [pc, #132]	; (8878 <SDHC_CardInit()+0x2b4>)

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    87f2:	f022 0206 	bic.w	r2, r2, #6
    87f6:	62b2      	str	r2, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    87f8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    87fa:	f042 0202 	orr.w	r2, r2, #2
    87fe:	62b2      	str	r2, [r6, #40]	; 0x28
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    8800:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    8804:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    8808:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    880c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    8810:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    8814:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    8818:	f7ff fcdc 	bl	81d4 <sdhc_setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    881c:	f247 0388 	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    8820:	f241 0288 	movw	r2, #4232	; 0x1088

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    8824:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    8828:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    882c:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    8830:	f8c4 71c0 	str.w	r7, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    8834:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    8838:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    883c:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    8840:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    8844:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    8848:	f8c4 23b0 	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    884c:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    8850:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  SDHC_InitGPIO();

  return sdCardDesc.status;
    8854:	7828      	ldrb	r0, [r5, #0]
    8856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
    885a:	2301      	movs	r3, #1
    885c:	706b      	strb	r3, [r5, #1]
    885e:	e741      	b.n	86e4 <SDHC_CardInit()+0x120>
    8860:	2001      	movs	r0, #1
    8862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    8866:	2301      	movs	r3, #1
    8868:	70b3      	strb	r3, [r6, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    886a:	6963      	ldr	r3, [r4, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    886c:	f3c3 2315 	ubfx	r3, r3, #8, #22
    8870:	3301      	adds	r3, #1
    8872:	029b      	lsls	r3, r3, #10
    8874:	60b3      	str	r3, [r6, #8]
    8876:	e795      	b.n	87a4 <SDHC_CardInit()+0x1e0>
    8878:	401f8000 	.word	0x401f8000
    887c:	402c0000 	.word	0x402c0000
    8880:	01008000 	.word	0x01008000
    8884:	117f00bb 	.word	0x117f00bb
    8888:	20002b24 	.word	0x20002b24
    888c:	081a0000 	.word	0x081a0000
    8890:	40300000 	.word	0x40300000
    8894:	0001869f 	.word	0x0001869f
    8898:	02090000 	.word	0x02090000
    889c:	031a0000 	.word	0x031a0000
    88a0:	ffff0000 	.word	0xffff0000
    88a4:	09090000 	.word	0x09090000
    88a8:	071b0000 	.word	0x071b0000
    88ac:	101a0000 	.word	0x101a0000
    88b0:	371a0000 	.word	0x371a0000
    88b4:	061a0000 	.word	0x061a0000

000088b8 <spiInit(unsigned char)>:

#elif defined(__IMXRT1052__)  || defined(__IMXRT1062__)
 #define USE_TEENSY4_SPI
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    88b8:	2805      	cmp	r0, #5
    88ba:	d834      	bhi.n	8926 <spiInit(unsigned char)+0x6e>
    88bc:	e8df f000 	tbb	[pc, r0]
    88c0:	231b130b 	.word	0x231b130b
    88c4:	032b      	.short	0x032b
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    88c6:	4b1c      	ldr	r3, [pc, #112]	; (8938 <spiInit(unsigned char)+0x80>)
    88c8:	2207      	movs	r2, #7
    88ca:	491c      	ldr	r1, [pc, #112]	; (893c <spiInit(unsigned char)+0x84>)
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88cc:	481c      	ldr	r0, [pc, #112]	; (8940 <spiInit(unsigned char)+0x88>)
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    88ce:	e883 0006 	stmia.w	r3, {r1, r2}
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88d2:	f001 bc47 	b.w	a164 <SPIClass::begin()>
 #define USE_TEENSY4_SPI
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    88d6:	4b18      	ldr	r3, [pc, #96]	; (8938 <spiInit(unsigned char)+0x80>)
    88d8:	2207      	movs	r2, #7
    88da:	491a      	ldr	r1, [pc, #104]	; (8944 <spiInit(unsigned char)+0x8c>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88dc:	4818      	ldr	r0, [pc, #96]	; (8940 <spiInit(unsigned char)+0x88>)
 #define USE_TEENSY4_SPI
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    88de:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88e2:	f001 bc3f 	b.w	a164 <SPIClass::begin()>
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    88e6:	4b14      	ldr	r3, [pc, #80]	; (8938 <spiInit(unsigned char)+0x80>)
    88e8:	2207      	movs	r2, #7
    88ea:	4917      	ldr	r1, [pc, #92]	; (8948 <spiInit(unsigned char)+0x90>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88ec:	4814      	ldr	r0, [pc, #80]	; (8940 <spiInit(unsigned char)+0x88>)
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    88ee:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88f2:	f001 bc37 	b.w	a164 <SPIClass::begin()>
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    88f6:	4b10      	ldr	r3, [pc, #64]	; (8938 <spiInit(unsigned char)+0x80>)
    88f8:	2207      	movs	r2, #7
    88fa:	4914      	ldr	r1, [pc, #80]	; (894c <spiInit(unsigned char)+0x94>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    88fc:	4810      	ldr	r0, [pc, #64]	; (8940 <spiInit(unsigned char)+0x88>)
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    88fe:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8902:	f001 bc2f 	b.w	a164 <SPIClass::begin()>
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    8906:	4b0c      	ldr	r3, [pc, #48]	; (8938 <spiInit(unsigned char)+0x80>)
    8908:	2207      	movs	r2, #7
    890a:	4911      	ldr	r1, [pc, #68]	; (8950 <spiInit(unsigned char)+0x98>)
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    890c:	480c      	ldr	r0, [pc, #48]	; (8940 <spiInit(unsigned char)+0x88>)
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    890e:	e883 0006 	stmia.w	r3, {r1, r2}
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8912:	f001 bc27 	b.w	a164 <SPIClass::begin()>
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    8916:	4b08      	ldr	r3, [pc, #32]	; (8938 <spiInit(unsigned char)+0x80>)
    8918:	2207      	movs	r2, #7
    891a:	490e      	ldr	r1, [pc, #56]	; (8954 <spiInit(unsigned char)+0x9c>)
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    891c:	4808      	ldr	r0, [pc, #32]	; (8940 <spiInit(unsigned char)+0x88>)
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    891e:	e883 0006 	stmia.w	r3, {r1, r2}
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8922:	f001 bc1f 	b.w	a164 <SPIClass::begin()>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    8926:	4b04      	ldr	r3, [pc, #16]	; (8938 <spiInit(unsigned char)+0x80>)
    8928:	2207      	movs	r2, #7
    892a:	490b      	ldr	r1, [pc, #44]	; (8958 <spiInit(unsigned char)+0xa0>)
  }
  SPI.begin();
    892c:	4804      	ldr	r0, [pc, #16]	; (8940 <spiInit(unsigned char)+0x88>)
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    892e:	e883 0006 	stmia.w	r3, {r1, r2}
  }
  SPI.begin();
    8932:	f001 bc17 	b.w	a164 <SPIClass::begin()>
    8936:	bf00      	nop
    8938:	20002b34 	.word	0x20002b34
    893c:	001e8480 	.word	0x001e8480
    8940:	20001f54 	.word	0x20001f54
    8944:	01808580 	.word	0x01808580
    8948:	016e3600 	.word	0x016e3600
    894c:	007a1200 	.word	0x007a1200
    8950:	003d0900 	.word	0x003d0900
    8954:	002dc6c0 	.word	0x002dc6c0
    8958:	00061a80 	.word	0x00061a80

0000895c <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    895c:	b5f0      	push	{r4, r5, r6, r7, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    895e:	4e27      	ldr	r6, [pc, #156]	; (89fc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8960:	27ff      	movs	r7, #255	; 0xff
    8962:	4d27      	ldr	r5, [pc, #156]	; (8a00 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    8964:	f8d6 e000 	ldr.w	lr, [r6]
    8968:	682b      	ldr	r3, [r5, #0]
    896a:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    896c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    896e:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    8972:	d0fb      	beq.n	896c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    8974:	6f5c      	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    8976:	b2e4      	uxtb	r4, r4
    8978:	2cff      	cmp	r4, #255	; 0xff
    897a:	d005      	beq.n	8988 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    897c:	6834      	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    897e:	ebce 0404 	rsb	r4, lr, r4
    8982:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    8986:	d3f0      	bcc.n	896a <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8988:	f041 0440 	orr.w	r4, r1, #64	; 0x40
    898c:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    898e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8990:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    8994:	d0fb      	beq.n	898e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    8996:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    8998:	2618      	movs	r6, #24
    899a:	fa22 f406 	lsr.w	r4, r2, r6
    899e:	b2e4      	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    89a0:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    89a2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    89a4:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    89a8:	d0fb      	beq.n	89a2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    89aa:	3e08      	subs	r6, #8
    89ac:	6f5c      	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    89ae:	f116 0f08 	cmn.w	r6, #8
    89b2:	d1f2      	bne.n	899a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    89b4:	b1f9      	cbz	r1, 89f6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    89b6:	2908      	cmp	r1, #8
    89b8:	bf0c      	ite	eq
    89ba:	2287      	moveq	r2, #135	; 0x87
    89bc:	22ff      	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    89be:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    89c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    89c2:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    89c6:	d0fb      	beq.n	89c0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    89c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    89ca:	2100      	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    89cc:	24ff      	movs	r4, #255	; 0xff
    89ce:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    89d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    89d2:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    89d6:	d0fb      	beq.n	89d0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    89d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    89da:	b2cb      	uxtb	r3, r1
    89dc:	3101      	adds	r1, #1
    89de:	3bff      	subs	r3, #255	; 0xff
    89e0:	b2d2      	uxtb	r2, r2
    89e2:	bf18      	it	ne
    89e4:	2301      	movne	r3, #1
    89e6:	7042      	strb	r2, [r0, #1]
    89e8:	ea13 13d2 	ands.w	r3, r3, r2, lsr #7
    89ec:	d001      	beq.n	89f2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    89ee:	682b      	ldr	r3, [r5, #0]
    89f0:	e7ed      	b.n	89ce <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    89f2:	4610      	mov	r0, r2
    89f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89f6:	2295      	movs	r2, #149	; 0x95
    89f8:	e7e1      	b.n	89be <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    89fa:	bf00      	nop
    89fc:	20002d58 	.word	0x20002d58
    8a00:	20001f54 	.word	0x20001f54

00008a04 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    8a04:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    8a06:	2101      	movs	r1, #1
    8a08:	7800      	ldrb	r0, [r0, #0]
    8a0a:	f001 ffbb 	bl	a984 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    8a0e:	4913      	ldr	r1, [pc, #76]	; (8a5c <Sd2Card::chipSelectHigh()+0x58>)
    8a10:	780b      	ldrb	r3, [r1, #0]
    8a12:	b1eb      	cbz	r3, 8a50 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8a14:	4a12      	ldr	r2, [pc, #72]	; (8a60 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    8a16:	2000      	movs	r0, #0
    8a18:	7cd3      	ldrb	r3, [r2, #19]
    8a1a:	7008      	strb	r0, [r1, #0]
    8a1c:	4619      	mov	r1, r3
    8a1e:	b1bb      	cbz	r3, 8a50 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8a20:	07d8      	lsls	r0, r3, #31
    8a22:	d502      	bpl.n	8a2a <Sd2Card::chipSelectHigh()+0x26>
    8a24:	6a94      	ldr	r4, [r2, #40]	; 0x28
    8a26:	480f      	ldr	r0, [pc, #60]	; (8a64 <Sd2Card::chipSelectHigh()+0x60>)
    8a28:	6004      	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    8a2a:	079b      	lsls	r3, r3, #30
    8a2c:	d503      	bpl.n	8a36 <Sd2Card::chipSelectHigh()+0x32>
    8a2e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    8a30:	4b0d      	ldr	r3, [pc, #52]	; (8a68 <Sd2Card::chipSelectHigh()+0x64>)
    8a32:	7cd1      	ldrb	r1, [r2, #19]
    8a34:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    8a36:	074c      	lsls	r4, r1, #29
    8a38:	d503      	bpl.n	8a42 <Sd2Card::chipSelectHigh()+0x3e>
    8a3a:	6b10      	ldr	r0, [r2, #48]	; 0x30
    8a3c:	4b0b      	ldr	r3, [pc, #44]	; (8a6c <Sd2Card::chipSelectHigh()+0x68>)
    8a3e:	7cd1      	ldrb	r1, [r2, #19]
    8a40:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8a42:	0708      	lsls	r0, r1, #28
    8a44:	d405      	bmi.n	8a52 <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    8a46:	06cb      	lsls	r3, r1, #27
    8a48:	d502      	bpl.n	8a50 <Sd2Card::chipSelectHigh()+0x4c>
    8a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
    8a4c:	4b08      	ldr	r3, [pc, #32]	; (8a70 <Sd2Card::chipSelectHigh()+0x6c>)
    8a4e:	601a      	str	r2, [r3, #0]
    8a50:	bd10      	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8a52:	6b50      	ldr	r0, [r2, #52]	; 0x34
    8a54:	4b07      	ldr	r3, [pc, #28]	; (8a74 <Sd2Card::chipSelectHigh()+0x70>)
    8a56:	7cd1      	ldrb	r1, [r2, #19]
    8a58:	6018      	str	r0, [r3, #0]
    8a5a:	e7f4      	b.n	8a46 <Sd2Card::chipSelectHigh()+0x42>
    8a5c:	20002b3c 	.word	0x20002b3c
    8a60:	20001f54 	.word	0x20001f54
    8a64:	e000e100 	.word	0xe000e100
    8a68:	e000e104 	.word	0xe000e104
    8a6c:	e000e108 	.word	0xe000e108
    8a70:	e000e110 	.word	0xe000e110
    8a74:	e000e10c 	.word	0xe000e10c

00008a78 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    8a78:	4a3f      	ldr	r2, [pc, #252]	; (8b78 <Sd2Card::chipSelectLow()+0x100>)
    8a7a:	7813      	ldrb	r3, [r2, #0]
    8a7c:	b11b      	cbz	r3, 8a86 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    8a7e:	7800      	ldrb	r0, [r0, #0]
    8a80:	2100      	movs	r1, #0
    8a82:	f001 bf7f 	b.w	a984 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8a86:	4b3d      	ldr	r3, [pc, #244]	; (8b7c <Sd2Card::chipSelectLow()+0x104>)
    8a88:	493d      	ldr	r1, [pc, #244]	; (8b80 <Sd2Card::chipSelectLow()+0x108>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    8a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    8a8c:	2401      	movs	r4, #1
    8a8e:	7cde      	ldrb	r6, [r3, #19]
    8a90:	7014      	strb	r4, [r2, #0]
    8a92:	e891 0030 	ldmia.w	r1, {r4, r5}
    8a96:	2e00      	cmp	r6, #0
    8a98:	d031      	beq.n	8afe <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    8a9a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8a9c:	7cd9      	ldrb	r1, [r3, #19]
    8a9e:	07ce      	lsls	r6, r1, #31
    8aa0:	460a      	mov	r2, r1
    8aa2:	d508      	bpl.n	8ab6 <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8aa4:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8b9c <Sd2Card::chipSelectLow()+0x124>
    8aa8:	695f      	ldr	r7, [r3, #20]
    8aaa:	f8de 6000 	ldr.w	r6, [lr]
    8aae:	403e      	ands	r6, r7
    8ab0:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    8ab2:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    8ab6:	078f      	lsls	r7, r1, #30
    8ab8:	d506      	bpl.n	8ac8 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8aba:	4e32      	ldr	r6, [pc, #200]	; (8b84 <Sd2Card::chipSelectLow()+0x10c>)
    8abc:	6999      	ldr	r1, [r3, #24]
    8abe:	6837      	ldr	r7, [r6, #0]
    8ac0:	7cda      	ldrb	r2, [r3, #19]
    8ac2:	4039      	ands	r1, r7
    8ac4:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    8ac6:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    8ac8:	0756      	lsls	r6, r2, #29
    8aca:	d506      	bpl.n	8ada <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8acc:	4e2e      	ldr	r6, [pc, #184]	; (8b88 <Sd2Card::chipSelectLow()+0x110>)
    8ace:	69d9      	ldr	r1, [r3, #28]
    8ad0:	6837      	ldr	r7, [r6, #0]
    8ad2:	7cda      	ldrb	r2, [r3, #19]
    8ad4:	4039      	ands	r1, r7
    8ad6:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    8ad8:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    8ada:	0711      	lsls	r1, r2, #28
    8adc:	d506      	bpl.n	8aec <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8ade:	4e2b      	ldr	r6, [pc, #172]	; (8b8c <Sd2Card::chipSelectLow()+0x114>)
    8ae0:	6a19      	ldr	r1, [r3, #32]
    8ae2:	6837      	ldr	r7, [r6, #0]
    8ae4:	7cda      	ldrb	r2, [r3, #19]
    8ae6:	4039      	ands	r1, r7
    8ae8:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    8aea:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    8aec:	06d2      	lsls	r2, r2, #27
    8aee:	d505      	bpl.n	8afc <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    8af0:	4927      	ldr	r1, [pc, #156]	; (8b90 <Sd2Card::chipSelectLow()+0x118>)
    8af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8af4:	680e      	ldr	r6, [r1, #0]
    8af6:	4032      	ands	r2, r6
    8af8:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    8afa:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
    8afc:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    8afe:	689a      	ldr	r2, [r3, #8]
    8b00:	491e      	ldr	r1, [pc, #120]	; (8b7c <Sd2Card::chipSelectLow()+0x104>)
    8b02:	42a2      	cmp	r2, r4
    8b04:	d02c      	beq.n	8b60 <Sd2Card::chipSelectLow()+0xe8>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8b06:	4a23      	ldr	r2, [pc, #140]	; (8b94 <Sd2Card::chipSelectLow()+0x11c>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8b08:	4e23      	ldr	r6, [pc, #140]	; (8b98 <Sd2Card::chipSelectLow()+0x120>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8b0a:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    8b0c:	608c      	str	r4, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8b0e:	f3c2 1101 	ubfx	r1, r2, #4, #2
    8b12:	f3c2 6282 	ubfx	r2, r2, #26, #3
    8b16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    8b1a:	3201      	adds	r2, #1
    8b1c:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    8b20:	b1e4      	cbz	r4, 8b5c <Sd2Card::chipSelectLow()+0xe4>
    8b22:	fbb1 f2f4 	udiv	r2, r1, r4

			if (d && clkhz/d > _clock) d++;
    8b26:	b14a      	cbz	r2, 8b3c <Sd2Card::chipSelectLow()+0xc4>
    8b28:	fbb1 f1f2 	udiv	r1, r1, r2
    8b2c:	42a1      	cmp	r1, r4
    8b2e:	bf88      	it	hi
    8b30:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    8b32:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    8b36:	d315      	bcc.n	8b64 <Sd2Card::chipSelectLow()+0xec>
    8b38:	f647 72ff 	movw	r2, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    8b3c:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8b3e:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    8b40:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    8b42:	2403      	movs	r4, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    8b44:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    8b46:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    8b48:	625c      	str	r4, [r3, #36]	; 0x24
		port().CCR = _ccr;
    8b4a:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    8b4c:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    8b4e:	6119      	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    8b50:	2100      	movs	r1, #0
    8b52:	7800      	ldrb	r0, [r0, #0]
}
    8b54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    8b58:	f001 bf14 	b.w	a984 <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    8b5c:	460a      	mov	r2, r1
    8b5e:	e7e2      	b.n	8b26 <Sd2Card::chipSelectLow()+0xae>
    8b60:	68ca      	ldr	r2, [r1, #12]
    8b62:	e7ec      	b.n	8b3e <Sd2Card::chipSelectLow()+0xc6>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    8b64:	2a02      	cmp	r2, #2
    8b66:	bf98      	it	ls
    8b68:	2200      	movls	r2, #0
    8b6a:	d9e7      	bls.n	8b3c <Sd2Card::chipSelectLow()+0xc4>
    8b6c:	3a02      	subs	r2, #2
    8b6e:	0851      	lsrs	r1, r2, #1
    8b70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8b74:	e7e2      	b.n	8b3c <Sd2Card::chipSelectLow()+0xc4>
    8b76:	bf00      	nop
    8b78:	20002b3c 	.word	0x20002b3c
    8b7c:	20001f54 	.word	0x20001f54
    8b80:	20002b34 	.word	0x20002b34
    8b84:	e000e184 	.word	0xe000e184
    8b88:	e000e188 	.word	0xe000e188
    8b8c:	e000e18c 	.word	0xe000e18c
    8b90:	e000e190 	.word	0xe000e190
    8b94:	400fc000 	.word	0x400fc000
    8b98:	200015f4 	.word	0x200015f4
    8b9c:	e000e180 	.word	0xe000e180

00008ba0 <Sd2Card::SD_init(unsigned char, unsigned char)>:
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    8ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  type_ = 0;
    8ba4:	2300      	movs	r3, #0
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    8ba6:	4605      	mov	r5, r0
    8ba8:	4eaf      	ldr	r6, [pc, #700]	; (8e68 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2c8>)
    8baa:	4689      	mov	r9, r1
  type_ = 0;
  chipSelectPin_ = chipSelectPin;
    8bac:	7002      	strb	r2, [r0, #0]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    8bae:	2101      	movs	r1, #1
    8bb0:	4610      	mov	r0, r2
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
  type_ = 0;
    8bb2:	70ab      	strb	r3, [r5, #2]
    8bb4:	6837      	ldr	r7, [r6, #0]
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    8bb6:	f001 fee5 	bl	a984 <digitalWrite>
  pinMode(chipSelectPin_, OUTPUT);
    8bba:	7828      	ldrb	r0, [r5, #0]
    8bbc:	2101      	movs	r1, #1
    8bbe:	f001 feed 	bl	a99c <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    8bc2:	2101      	movs	r1, #1
    8bc4:	7828      	ldrb	r0, [r5, #0]
    8bc6:	f001 fedd 	bl	a984 <digitalWrite>
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8bca:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8e80 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e0>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    8bce:	4aa7      	ldr	r2, [pc, #668]	; (8e6c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2cc>)
    8bd0:	2307      	movs	r3, #7
    8bd2:	4ca7      	ldr	r4, [pc, #668]	; (8e70 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d0>)
  }
  SPI.begin();
    8bd4:	4640      	mov	r0, r8
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    8bd6:	e884 000c 	stmia.w	r4, {r2, r3}
  }
  SPI.begin();
    8bda:	f001 fac3 	bl	a164 <SPIClass::begin()>
#if defined(USE_TEENSY3_SPI)
  spiBegin();
  spiInit(6);
#elif defined(USE_TEENSY4_SPI)
  spiInit(6);
  pinMode(SS_PIN, OUTPUT);
    8bde:	2101      	movs	r1, #1
    8be0:	200a      	movs	r0, #10
    8be2:	f001 fedb 	bl	a99c <pinMode>
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin  
    8be6:	200a      	movs	r0, #10
    8be8:	2101      	movs	r1, #1
    8bea:	f001 fecb 	bl	a984 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8bee:	f898 0013 	ldrb.w	r0, [r8, #19]
    8bf2:	e894 4004 	ldmia.w	r4, {r2, lr}
    8bf6:	2800      	cmp	r0, #0
    8bf8:	d03a      	beq.n	8c70 <Sd2Card::SD_init(unsigned char, unsigned char)+0xd0>
			__disable_irq();
    8bfa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8bfc:	f898 0013 	ldrb.w	r0, [r8, #19]
    8c00:	07c4      	lsls	r4, r0, #31
    8c02:	4603      	mov	r3, r0
    8c04:	d50a      	bpl.n	8c1c <Sd2Card::SD_init(unsigned char, unsigned char)+0x7c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8c06:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8ea4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x304>
    8c0a:	f8d8 4014 	ldr.w	r4, [r8, #20]
    8c0e:	f8dc 1000 	ldr.w	r1, [ip]
    8c12:	4021      	ands	r1, r4
    8c14:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    8c18:	f8cc 1000 	str.w	r1, [ip]
			}
			if (interruptMasksUsed & 0x02) {
    8c1c:	0780      	lsls	r0, r0, #30
    8c1e:	d509      	bpl.n	8c34 <Sd2Card::SD_init(unsigned char, unsigned char)+0x94>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8c20:	4894      	ldr	r0, [pc, #592]	; (8e74 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d4>)
    8c22:	f8d8 1018 	ldr.w	r1, [r8, #24]
    8c26:	6804      	ldr	r4, [r0, #0]
    8c28:	f898 3013 	ldrb.w	r3, [r8, #19]
    8c2c:	4021      	ands	r1, r4
    8c2e:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    8c32:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x04) {
    8c34:	0759      	lsls	r1, r3, #29
    8c36:	d509      	bpl.n	8c4c <Sd2Card::SD_init(unsigned char, unsigned char)+0xac>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8c38:	488f      	ldr	r0, [pc, #572]	; (8e78 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d8>)
    8c3a:	f8d8 101c 	ldr.w	r1, [r8, #28]
    8c3e:	6804      	ldr	r4, [r0, #0]
    8c40:	f898 3013 	ldrb.w	r3, [r8, #19]
    8c44:	4021      	ands	r1, r4
    8c46:	f8c8 1030 	str.w	r1, [r8, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    8c4a:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x08) {
    8c4c:	071c      	lsls	r4, r3, #28
    8c4e:	d509      	bpl.n	8c64 <Sd2Card::SD_init(unsigned char, unsigned char)+0xc4>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8c50:	488a      	ldr	r0, [pc, #552]	; (8e7c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2dc>)
    8c52:	f8d8 1020 	ldr.w	r1, [r8, #32]
    8c56:	6804      	ldr	r4, [r0, #0]
    8c58:	f898 3013 	ldrb.w	r3, [r8, #19]
    8c5c:	4021      	ands	r1, r4
    8c5e:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    8c62:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x10) {
    8c64:	06d8      	lsls	r0, r3, #27
    8c66:	f100 80a9 	bmi.w	8dbc <Sd2Card::SD_init(unsigned char, unsigned char)+0x21c>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    8c6a:	b662      	cpsie	i
    8c6c:	f898 0013 	ldrb.w	r0, [r8, #19]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    8c70:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8c74:	4982      	ldr	r1, [pc, #520]	; (8e80 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e0>)
    8c76:	4293      	cmp	r3, r2
    8c78:	f000 80c1 	beq.w	8dfe <Sd2Card::SD_init(unsigned char, unsigned char)+0x25e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8c7c:	4b81      	ldr	r3, [pc, #516]	; (8e84 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e4>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8c7e:	4c82      	ldr	r4, [pc, #520]	; (8e88 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e8>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8c80:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    8c82:	608a      	str	r2, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8c84:	f3c3 1101 	ubfx	r1, r3, #4, #2
    8c88:	f3c3 6382 	ubfx	r3, r3, #26, #3
    8c8c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    8c90:	3301      	adds	r3, #1
    8c92:	fbb1 f1f3 	udiv	r1, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    8c96:	2a00      	cmp	r2, #0
    8c98:	f000 808e 	beq.w	8db8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x218>
    8c9c:	fbb1 f3f2 	udiv	r3, r1, r2

			if (d && clkhz/d > _clock) d++;
    8ca0:	b153      	cbz	r3, 8cb8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x118>
    8ca2:	fbb1 f1f3 	udiv	r1, r1, r3
    8ca6:	4291      	cmp	r1, r2
    8ca8:	bf88      	it	hi
    8caa:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    8cac:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8cb0:	f0c0 80d1 	bcc.w	8e56 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2b6>
    8cb4:	f647 73ff 	movw	r3, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    8cb8:	f8c8 300c 	str.w	r3, [r8, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8cbc:	f8d8 2000 	ldr.w	r2, [r8]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    8cc0:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    8cc2:	2103      	movs	r1, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    8cc4:	f04f 0c01 	mov.w	ip, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    8cc8:	6114      	str	r4, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    8cca:	240a      	movs	r4, #10
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    8ccc:	6251      	str	r1, [r2, #36]	; 0x24
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8cce:	21ff      	movs	r1, #255	; 0xff

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    8cd0:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    8cd2:	f8c2 e060 	str.w	lr, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    8cd6:	f8c2 c010 	str.w	ip, [r2, #16]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8cda:	6651      	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8cdc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8cde:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8ce2:	d0fb      	beq.n	8cdc <Sd2Card::SD_init(unsigned char, unsigned char)+0x13c>
    8ce4:	3c01      	subs	r4, #1
    8ce6:	6f53      	ldr	r3, [r2, #116]	; 0x74
#endif  // not USE_TEENSY3_SPI
  // must supply min of 74 clock cycles with CS high.
#ifdef SPI_HAS_TRANSACTION
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    8ce8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8cec:	d1f5      	bne.n	8cda <Sd2Card::SD_init(unsigned char, unsigned char)+0x13a>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8cee:	b328      	cbz	r0, 8d3c <Sd2Card::SD_init(unsigned char, unsigned char)+0x19c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8cf0:	07c1      	lsls	r1, r0, #31
    8cf2:	d505      	bpl.n	8d00 <Sd2Card::SD_init(unsigned char, unsigned char)+0x160>
    8cf4:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    8cf8:	4b64      	ldr	r3, [pc, #400]	; (8e8c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2ec>)
    8cfa:	f898 0013 	ldrb.w	r0, [r8, #19]
    8cfe:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    8d00:	0782      	lsls	r2, r0, #30
    8d02:	d505      	bpl.n	8d10 <Sd2Card::SD_init(unsigned char, unsigned char)+0x170>
    8d04:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    8d08:	4b61      	ldr	r3, [pc, #388]	; (8e90 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f0>)
    8d0a:	f898 0013 	ldrb.w	r0, [r8, #19]
    8d0e:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    8d10:	0743      	lsls	r3, r0, #29
    8d12:	d505      	bpl.n	8d20 <Sd2Card::SD_init(unsigned char, unsigned char)+0x180>
    8d14:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    8d18:	4b5e      	ldr	r3, [pc, #376]	; (8e94 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f4>)
    8d1a:	f898 0013 	ldrb.w	r0, [r8, #19]
    8d1e:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8d20:	0701      	lsls	r1, r0, #28
    8d22:	d505      	bpl.n	8d30 <Sd2Card::SD_init(unsigned char, unsigned char)+0x190>
    8d24:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    8d28:	4b5b      	ldr	r3, [pc, #364]	; (8e98 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f8>)
    8d2a:	f898 0013 	ldrb.w	r0, [r8, #19]
    8d2e:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    8d30:	06c2      	lsls	r2, r0, #27
    8d32:	d503      	bpl.n	8d3c <Sd2Card::SD_init(unsigned char, unsigned char)+0x19c>
    8d34:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    8d38:	4b58      	ldr	r3, [pc, #352]	; (8e9c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2fc>)
    8d3a:	601a      	str	r2, [r3, #0]
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
    8d3c:	4628      	mov	r0, r5
    8d3e:	f7ff fe9b 	bl	8a78 <Sd2Card::chipSelectLow()>
    8d42:	e004      	b.n	8d4e <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ae>
    8d44:	6833      	ldr	r3, [r6, #0]
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    8d46:	1bdb      	subs	r3, r3, r7
    8d48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    8d4c:	d851      	bhi.n	8df2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x252>
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    8d4e:	2200      	movs	r2, #0
    8d50:	4628      	mov	r0, r5
    8d52:	4611      	mov	r1, r2
    8d54:	f7ff fe02 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8d58:	2801      	cmp	r0, #1
    8d5a:	4682      	mov	sl, r0
    8d5c:	7068      	strb	r0, [r5, #1]
    8d5e:	d1f1      	bne.n	8d44 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1a4>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_CMD0
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    8d60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    8d64:	2108      	movs	r1, #8
    8d66:	4628      	mov	r0, r5
    8d68:	f7ff fdf8 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8d6c:	0743      	lsls	r3, r0, #29
    8d6e:	d52e      	bpl.n	8dce <Sd2Card::SD_init(unsigned char, unsigned char)+0x22e>
    type_ = SD_CARD_TYPE_SD1;
    8d70:	f885 a002 	strb.w	sl, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    8d74:	f04f 0a00 	mov.w	sl, #0
    8d78:	e004      	b.n	8d84 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e4>
    8d7a:	6833      	ldr	r3, [r6, #0]
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    8d7c:	1bdb      	subs	r3, r3, r7
    8d7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    8d82:	d836      	bhi.n	8df2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x252>
  // private functions
  uint8_t SD_init(uint8_t sckRateID, uint8_t chipSelectPin);
  uint8_t SD_readBlock(uint32_t block, uint8_t* dst);
  uint8_t SD_writeBlock(uint32_t blockNumber, const uint8_t* src);
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    8d84:	2200      	movs	r2, #0
    8d86:	2137      	movs	r1, #55	; 0x37
    8d88:	4628      	mov	r0, r5
    8d8a:	f7ff fde7 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8d8e:	4652      	mov	r2, sl
    8d90:	2129      	movs	r1, #41	; 0x29
    8d92:	4628      	mov	r0, r5
    8d94:	f7ff fde2 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    8d98:	7068      	strb	r0, [r5, #1]
    8d9a:	2800      	cmp	r0, #0
    8d9c:	d1ed      	bne.n	8d7a <Sd2Card::SD_init(unsigned char, unsigned char)+0x1da>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    8d9e:	78ab      	ldrb	r3, [r5, #2]
    8da0:	2b02      	cmp	r3, #2
    8da2:	d033      	beq.n	8e0c <Sd2Card::SD_init(unsigned char, unsigned char)+0x26c>
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    8da4:	4628      	mov	r0, r5
  return setSckRate(sckRateID);
    8da6:	2401      	movs	r4, #1
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    8da8:	f7ff fe2c 	bl	8a04 <Sd2Card::chipSelectHigh()>
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
#if defined(USE_TEENSY3_SPI) || defined(USE_TEENSY4_SPI)
  spiInit(sckRateID);
    8dac:	4648      	mov	r0, r9
    8dae:	f7ff fd83 	bl	88b8 <spiInit(unsigned char)>
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
  return false;
}
    8db2:	4620      	mov	r0, r4
    8db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    8db8:	460b      	mov	r3, r1
    8dba:	e771      	b.n	8ca0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x100>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    8dbc:	4938      	ldr	r1, [pc, #224]	; (8ea0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x300>)
    8dbe:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    8dc2:	6808      	ldr	r0, [r1, #0]
    8dc4:	4003      	ands	r3, r0
    8dc6:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    8dca:	600b      	str	r3, [r1, #0]
    8dcc:	e74d      	b.n	8c6a <Sd2Card::SD_init(unsigned char, unsigned char)+0xca>
    8dce:	2104      	movs	r1, #4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8dd0:	20ff      	movs	r0, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8dd2:	f8d8 2000 	ldr.w	r2, [r8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8dd6:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8dd8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8dda:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8dde:	d0fb      	beq.n	8dd8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x238>
    8de0:	6f52      	ldr	r2, [r2, #116]	; 0x74
    8de2:	1e4b      	subs	r3, r1, #1
    8de4:	b2d2      	uxtb	r2, r2
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    8de6:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
    8dea:	706a      	strb	r2, [r5, #1]
    8dec:	d1f1      	bne.n	8dd2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x232>
    if (status_ != 0XAA) {
    8dee:	2aaa      	cmp	r2, #170	; 0xaa
    8df0:	d007      	beq.n	8e02 <Sd2Card::SD_init(unsigned char, unsigned char)+0x262>
  }
  chipSelectHigh();
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
    8df2:	4628      	mov	r0, r5
    8df4:	f7ff fe06 	bl	8a04 <Sd2Card::chipSelectHigh()>
  return false;
}
    8df8:	4620      	mov	r0, r4
    8dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8dfe:	68cb      	ldr	r3, [r1, #12]
    8e00:	e75c      	b.n	8cbc <Sd2Card::SD_init(unsigned char, unsigned char)+0x11c>
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    8e02:	2302      	movs	r3, #2
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    8e04:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    8e08:	70ab      	strb	r3, [r5, #2]
    8e0a:	e7bb      	b.n	8d84 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e4>
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    8e0c:	4602      	mov	r2, r0
    8e0e:	213a      	movs	r1, #58	; 0x3a
    8e10:	4628      	mov	r0, r5
    8e12:	f7ff fda3 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8e16:	2800      	cmp	r0, #0
    8e18:	d1eb      	bne.n	8df2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x252>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8e1a:	f8d8 3000 	ldr.w	r3, [r8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8e1e:	22ff      	movs	r2, #255	; 0xff
    8e20:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8e24:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8e28:	d0fb      	beq.n	8e22 <Sd2Card::SD_init(unsigned char, unsigned char)+0x282>
    8e2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    8e2c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    8e30:	2ac0      	cmp	r2, #192	; 0xc0
    8e32:	d103      	bne.n	8e3c <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>
    8e34:	2303      	movs	r3, #3
    8e36:	70ab      	strb	r3, [r5, #2]
    8e38:	f8d8 3000 	ldr.w	r3, [r8]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    8e3c:	2103      	movs	r1, #3
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8e3e:	20ff      	movs	r0, #255	; 0xff
    8e40:	6658      	str	r0, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8e44:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8e48:	d0fb      	beq.n	8e42 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a2>
    8e4a:	3901      	subs	r1, #1
    8e4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    8e4e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8e52:	d1f5      	bne.n	8e40 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a0>
    8e54:	e7a6      	b.n	8da4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x204>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    8e56:	2b02      	cmp	r3, #2
    8e58:	d801      	bhi.n	8e5e <Sd2Card::SD_init(unsigned char, unsigned char)+0x2be>
    8e5a:	2300      	movs	r3, #0
    8e5c:	e72c      	b.n	8cb8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x118>
    8e5e:	3b02      	subs	r3, #2
    8e60:	085a      	lsrs	r2, r3, #1
    8e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8e66:	e727      	b.n	8cb8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x118>
    8e68:	20002d58 	.word	0x20002d58
    8e6c:	00061a80 	.word	0x00061a80
    8e70:	20002b34 	.word	0x20002b34
    8e74:	e000e184 	.word	0xe000e184
    8e78:	e000e188 	.word	0xe000e188
    8e7c:	e000e18c 	.word	0xe000e18c
    8e80:	20001f54 	.word	0x20001f54
    8e84:	400fc000 	.word	0x400fc000
    8e88:	200015f4 	.word	0x200015f4
    8e8c:	e000e100 	.word	0xe000e100
    8e90:	e000e104 	.word	0xe000e104
    8e94:	e000e108 	.word	0xe000e108
    8e98:	e000e10c 	.word	0xe000e10c
    8e9c:	e000e110 	.word	0xe000e110
    8ea0:	e000e190 	.word	0xe000e190
    8ea4:	e000e180 	.word	0xe000e180

00008ea8 <Sd2Card::waitStartBlock()>:
    8ea8:	490f      	ldr	r1, [pc, #60]	; (8ee8 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    8eaa:	b470      	push	{r4, r5, r6}
    8eac:	4d0f      	ldr	r5, [pc, #60]	; (8eec <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8eae:	24ff      	movs	r4, #255	; 0xff
    8eb0:	680e      	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8eb2:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8eb4:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8eb6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8eb8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8ebc:	d0fb      	beq.n	8eb6 <Sd2Card::waitStartBlock()+0xe>
    8ebe:	6f53      	ldr	r3, [r2, #116]	; 0x74
    8ec0:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    8ec2:	2bff      	cmp	r3, #255	; 0xff
    8ec4:	7043      	strb	r3, [r0, #1]
    8ec6:	d107      	bne.n	8ed8 <Sd2Card::waitStartBlock()+0x30>
    8ec8:	680b      	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    8eca:	1b9b      	subs	r3, r3, r6
    8ecc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8ed0:	d9ef      	bls.n	8eb2 <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8ed2:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8ed4:	bc70      	pop	{r4, r5, r6}
    8ed6:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8ed8:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    8edc:	fab0 f080 	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8ee0:	bc70      	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8ee2:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8ee4:	4770      	bx	lr
    8ee6:	bf00      	nop
    8ee8:	20002d58 	.word	0x20002d58
    8eec:	20001f54 	.word	0x20001f54

00008ef0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    8ef0:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    8ef2:	7883      	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    8ef4:	460d      	mov	r5, r1
    8ef6:	4604      	mov	r4, r0
    8ef8:	4616      	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    8efa:	2b03      	cmp	r3, #3
    8efc:	bf18      	it	ne
    8efe:	024d      	lslne	r5, r1, #9
  chipSelectLow();
    8f00:	f7ff fdba 	bl	8a78 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    8f04:	2111      	movs	r1, #17
    8f06:	462a      	mov	r2, r5
    8f08:	4620      	mov	r0, r4
    8f0a:	f7ff fd27 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8f0e:	b918      	cbnz	r0, 8f18 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    8f10:	4620      	mov	r0, r4
    8f12:	f7ff ffc9 	bl	8ea8 <Sd2Card::waitStartBlock()>
    8f16:	b920      	cbnz	r0, 8f22 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    8f18:	4620      	mov	r0, r4
    8f1a:	f7ff fd73 	bl	8a04 <Sd2Card::chipSelectHigh()>
  return false;
    8f1e:	2000      	movs	r0, #0
}
    8f20:	bd70      	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8f22:	4d11      	ldr	r5, [pc, #68]	; (8f68 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    8f24:	f44f 7200 	mov.w	r2, #512	; 0x200
    8f28:	21ff      	movs	r1, #255	; 0xff
    8f2a:	4630      	mov	r0, r6
    8f2c:	f004 fa20 	bl	d370 <memset>
    8f30:	f44f 7300 	mov.w	r3, #512	; 0x200
    8f34:	4632      	mov	r2, r6
    8f36:	4628      	mov	r0, r5
    8f38:	4631      	mov	r1, r6
    8f3a:	f001 fa1d 	bl	a378 <SPIClass::transfer(void const*, void*, unsigned int)>
    8f3e:	682b      	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8f40:	22ff      	movs	r2, #255	; 0xff
    8f42:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8f44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8f46:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8f4a:	d0fb      	beq.n	8f44 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8f4c:	22ff      	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    8f4e:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8f50:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8f52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8f54:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8f58:	d0fb      	beq.n	8f52 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    8f5a:	4620      	mov	r0, r4
    8f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8f5e:	f7ff fd51 	bl	8a04 <Sd2Card::chipSelectHigh()>
  return true;
    8f62:	2001      	movs	r0, #1
    8f64:	bd70      	pop	{r4, r5, r6, pc}
    8f66:	bf00      	nop
    8f68:	20001f54 	.word	0x20001f54

00008f6c <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    8f6c:	4b1b      	ldr	r3, [pc, #108]	; (8fdc <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    8f6e:	b410      	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8f70:	681c      	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8f72:	6661      	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8f74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8f76:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8f7a:	d0fb      	beq.n	8f74 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    8f7c:	1e51      	subs	r1, r2, #1
    8f7e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    8f80:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8f84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8f88:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8f8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8f8c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8f90:	d0fb      	beq.n	8f8a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    8f92:	4291      	cmp	r1, r2
    8f94:	6f63      	ldr	r3, [r4, #116]	; 0x74
    8f96:	d1f5      	bne.n	8f84 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8f98:	23ff      	movs	r3, #255	; 0xff
    8f9a:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8f9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8f9e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8fa2:	d0fb      	beq.n	8f9c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8fa4:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    8fa6:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8fa8:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8fac:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8fb0:	d0fb      	beq.n	8faa <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8fb2:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    8fb4:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8fb6:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8fb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8fba:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8fbe:	d0fb      	beq.n	8fb8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    8fc0:	6f63      	ldr	r3, [r4, #116]	; 0x74
    8fc2:	b2db      	uxtb	r3, r3
    8fc4:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    8fc8:	7043      	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    8fca:	f85d 4b04 	ldr.w	r4, [sp], #4
    8fce:	f1a2 0005 	sub.w	r0, r2, #5
    8fd2:	fab0 f080 	clz	r0, r0
    8fd6:	0940      	lsrs	r0, r0, #5
    8fd8:	4770      	bx	lr
    8fda:	bf00      	nop
    8fdc:	20001f54 	.word	0x20001f54

00008fe0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    8fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fe2:	4605      	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    8fe4:	b169      	cbz	r1, 9002 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    8fe6:	7883      	ldrb	r3, [r0, #2]
    8fe8:	460c      	mov	r4, r1
    8fea:	4616      	mov	r6, r2
    8fec:	2b03      	cmp	r3, #3
    8fee:	bf18      	it	ne
    8ff0:	024c      	lslne	r4, r1, #9
  chipSelectLow();
    8ff2:	f7ff fd41 	bl	8a78 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    8ff6:	2118      	movs	r1, #24
    8ff8:	4622      	mov	r2, r4
    8ffa:	4628      	mov	r0, r5
    8ffc:	f7ff fcae 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    9000:	b120      	cbz	r0, 900c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    9002:	4628      	mov	r0, r5
    9004:	f7ff fcfe 	bl	8a04 <Sd2Card::chipSelectHigh()>
  return false;
    9008:	2000      	movs	r0, #0
}
    900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    900c:	4632      	mov	r2, r6
    900e:	21fe      	movs	r1, #254	; 0xfe
    9010:	4628      	mov	r0, r5
    9012:	f7ff ffab 	bl	8f6c <Sd2Card::writeData(unsigned char, unsigned char const*)>
    9016:	2800      	cmp	r0, #0
    9018:	d0f3      	beq.n	9002 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    901a:	4915      	ldr	r1, [pc, #84]	; (9070 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    901c:	20ff      	movs	r0, #255	; 0xff
    901e:	4e15      	ldr	r6, [pc, #84]	; (9074 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    9020:	680f      	ldr	r7, [r1, #0]
    9022:	6832      	ldr	r2, [r6, #0]
    9024:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9026:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9028:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    902c:	d0fb      	beq.n	9026 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    902e:	6f54      	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    9030:	b2e4      	uxtb	r4, r4
    9032:	2cff      	cmp	r4, #255	; 0xff
    9034:	d005      	beq.n	9042 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    9036:	680b      	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    9038:	1bdb      	subs	r3, r3, r7
    903a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    903e:	d3f1      	bcc.n	9024 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    9040:	e7df      	b.n	9002 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    9042:	2200      	movs	r2, #0
    9044:	210d      	movs	r1, #13
    9046:	4628      	mov	r0, r5
    9048:	f7ff fc88 	bl	895c <Sd2Card::cardCommand(unsigned char, unsigned long)>
    904c:	2800      	cmp	r0, #0
    904e:	d1d8      	bne.n	9002 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9050:	6832      	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9052:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9054:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9056:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    905a:	d0fb      	beq.n	9054 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    905c:	6f53      	ldr	r3, [r2, #116]	; 0x74
    905e:	f013 0fff 	tst.w	r3, #255	; 0xff
    9062:	d1ce      	bne.n	9002 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    9064:	4628      	mov	r0, r5
    9066:	f7ff fccd 	bl	8a04 <Sd2Card::chipSelectHigh()>
  return true;
    906a:	2001      	movs	r0, #1
    906c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    906e:	bf00      	nop
    9070:	20002d58 	.word	0x20002d58
    9074:	20001f54 	.word	0x20001f54

00009078 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    9078:	4b02      	ldr	r3, [pc, #8]	; (9084 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    907a:	2207      	movs	r2, #7
    907c:	4902      	ldr	r1, [pc, #8]	; (9088 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    907e:	e883 0006 	stmia.w	r3, {r1, r2}
    9082:	4770      	bx	lr
    9084:	20002b34 	.word	0x20002b34
    9088:	003d0900 	.word	0x003d0900

0000908c <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    908c:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    908e:	f990 3005 	ldrsb.w	r3, [r0, #5]
    9092:	2b00      	cmp	r3, #0
    9094:	db03      	blt.n	909e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    9096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    909a:	f000 bc19 	b.w	98d0 <SdVolume::cacheFlush()>
    909e:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    90a0:	2101      	movs	r1, #1
    90a2:	6900      	ldr	r0, [r0, #16]
    90a4:	f000 fc54 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    90a8:	b300      	cbz	r0, 90ec <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    90aa:	7d25      	ldrb	r5, [r4, #20]
    90ac:	4b10      	ldr	r3, [pc, #64]	; (90f0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    90ae:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    90b2:	d01b      	beq.n	90ec <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    90b4:	79a3      	ldrb	r3, [r4, #6]
    90b6:	2b01      	cmp	r3, #1
    90b8:	d915      	bls.n	90e6 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    90ba:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    90bc:	490d      	ldr	r1, [pc, #52]	; (90f4 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    90be:	0c1a      	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    90c0:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    90c2:	680b      	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    90c4:	82aa      	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    90c6:	b133      	cbz	r3, 90d6 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    90c8:	f105 0116 	add.w	r1, r5, #22
    90cc:	f105 0018 	add.w	r0, r5, #24
    90d0:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    90d2:	8b2b      	ldrh	r3, [r5, #24]
    90d4:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    90d6:	7963      	ldrb	r3, [r4, #5]
    90d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    90dc:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    90de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    90e2:	f000 bbf5 	b.w	98d0 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    90e6:	69a3      	ldr	r3, [r4, #24]
    90e8:	61eb      	str	r3, [r5, #28]
    90ea:	e7e6      	b.n	90ba <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    90ec:	2000      	movs	r0, #0
    90ee:	bd38      	pop	{r3, r4, r5, pc}
    90f0:	20002b4c 	.word	0x20002b4c
    90f4:	20002b40 	.word	0x20002b40

000090f8 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    90f8:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    90fa:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    90fe:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    9100:	2101      	movs	r1, #1
    9102:	6a00      	ldr	r0, [r0, #32]
    9104:	f000 fd1a 	bl	9b3c <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    9108:	b150      	cbz	r0, 9120 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    910a:	69e3      	ldr	r3, [r4, #28]
    910c:	b93b      	cbnz	r3, 911e <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    910e:	7963      	ldrb	r3, [r4, #5]
    9110:	2001      	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    9112:	68a2      	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    9114:	f063 037f 	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    9118:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    911a:	7163      	strb	r3, [r4, #5]
    911c:	bd10      	pop	{r4, pc}
  }
  return true;
    911e:	2001      	movs	r0, #1
}
    9120:	bd10      	pop	{r4, pc}
    9122:	bf00      	nop

00009124 <SdFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    9124:	b570      	push	{r4, r5, r6, lr}
    9126:	4606      	mov	r6, r0
  if (!addCluster()) return false;
    9128:	f7ff ffe6 	bl	90f8 <SdFile::addCluster()>
    912c:	b198      	cbz	r0, 9156 <SdFile::addDirCluster()+0x32>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    912e:	6a32      	ldr	r2, [r6, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    9130:	68b5      	ldr	r5, [r6, #8]
    9132:	7c11      	ldrb	r1, [r2, #16]
    9134:	3d02      	subs	r5, #2
    9136:	6953      	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9138:	7914      	ldrb	r4, [r2, #4]
    913a:	408d      	lsls	r5, r1
    913c:	3b01      	subs	r3, #1
    913e:	b174      	cbz	r4, 915e <SdFile::addDirCluster()+0x3a>
    9140:	441d      	add	r5, r3
    9142:	e002      	b.n	914a <SdFile::addDirCluster()+0x26>
    9144:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    9148:	d007      	beq.n	915a <SdFile::addDirCluster()+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    914a:	1960      	adds	r0, r4, r5
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    914c:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    914e:	f000 fc6f 	bl	9a30 <SdVolume::cacheZeroBlock(unsigned long)>
    9152:	2800      	cmp	r0, #0
    9154:	d1f6      	bne.n	9144 <SdFile::addDirCluster()+0x20>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    9156:	2000      	movs	r0, #0
    9158:	bd70      	pop	{r4, r5, r6, pc}
    915a:	6a33      	ldr	r3, [r6, #32]
    915c:	7c19      	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    915e:	f44f 7200 	mov.w	r2, #512	; 0x200
    9162:	69b4      	ldr	r4, [r6, #24]
    9164:	2001      	movs	r0, #1
    9166:	fa02 f301 	lsl.w	r3, r2, r1
    916a:	4423      	add	r3, r4
    916c:	61b3      	str	r3, [r6, #24]
  return true;
}
    916e:	bd70      	pop	{r4, r5, r6, pc}

00009170 <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    9170:	7982      	ldrb	r2, [r0, #6]
    9172:	b90a      	cbnz	r2, 9178 <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    9174:	2000      	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    9176:	4770      	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    9178:	b510      	push	{r4, lr}
    917a:	4604      	mov	r4, r0
    917c:	f7ff ff86 	bl	908c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    9180:	b118      	cbz	r0, 918a <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    9182:	2300      	movs	r3, #0
  return true;
    9184:	2001      	movs	r0, #1
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
  type_ = FAT_FILE_TYPE_CLOSED;
    9186:	71a3      	strb	r3, [r4, #6]
  return true;
}
    9188:	bd10      	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    918a:	2000      	movs	r0, #0
    918c:	bd10      	pop	{r4, pc}
    918e:	bf00      	nop

00009190 <SdFile::make83Name(char const*, unsigned char*)>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    9190:	b4f0      	push	{r4, r5, r6, r7}
    9192:	1e4b      	subs	r3, r1, #1
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    9194:	2420      	movs	r4, #32
    9196:	f101 020a 	add.w	r2, r1, #10
    919a:	f803 4f01 	strb.w	r4, [r3, #1]!
    919e:	4293      	cmp	r3, r2
    91a0:	d1fb      	bne.n	919a <SdFile::make83Name(char const*, unsigned char*)+0xa>
    91a2:	3801      	subs	r0, #1
    91a4:	2500      	movs	r5, #0
    91a6:	2607      	movs	r6, #7
  i = 0;
  while ((c = *str++) != '\0') {
    91a8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    91ac:	b314      	cbz	r4, 91f4 <SdFile::make83Name(char const*, unsigned char*)+0x64>
    if (c == '.') {
    91ae:	2c2e      	cmp	r4, #46	; 0x2e
    91b0:	d01b      	beq.n	91ea <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    91b2:	4a13      	ldr	r2, [pc, #76]	; (9200 <SdFile::make83Name(char const*, unsigned char*)+0x70>)
    91b4:	237c      	movs	r3, #124	; 0x7c
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    91b6:	429c      	cmp	r4, r3
    91b8:	d014      	beq.n	91e4 <SdFile::make83Name(char const*, unsigned char*)+0x54>
    91ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    91be:	2b00      	cmp	r3, #0
    91c0:	d1f9      	bne.n	91b6 <SdFile::make83Name(char const*, unsigned char*)+0x26>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    91c2:	f1a4 0321 	sub.w	r3, r4, #33	; 0x21
    91c6:	2b5d      	cmp	r3, #93	; 0x5d
    91c8:	d80c      	bhi.n	91e4 <SdFile::make83Name(char const*, unsigned char*)+0x54>
    91ca:	42ae      	cmp	r6, r5
    91cc:	d30a      	bcc.n	91e4 <SdFile::make83Name(char const*, unsigned char*)+0x54>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    91ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    91d2:	1c6f      	adds	r7, r5, #1
    91d4:	194a      	adds	r2, r1, r5
    91d6:	2b19      	cmp	r3, #25
    91d8:	b2fd      	uxtb	r5, r7
    91da:	d801      	bhi.n	91e0 <SdFile::make83Name(char const*, unsigned char*)+0x50>
    91dc:	3c20      	subs	r4, #32
    91de:	b2e4      	uxtb	r4, r4
    91e0:	7014      	strb	r4, [r2, #0]
    91e2:	e7e1      	b.n	91a8 <SdFile::make83Name(char const*, unsigned char*)+0x18>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    91e4:	2000      	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    91e6:	bcf0      	pop	{r4, r5, r6, r7}
    91e8:	4770      	bx	lr
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    91ea:	2e0a      	cmp	r6, #10
    91ec:	d0fa      	beq.n	91e4 <SdFile::make83Name(char const*, unsigned char*)+0x54>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    91ee:	2508      	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    91f0:	260a      	movs	r6, #10
    91f2:	e7d9      	b.n	91a8 <SdFile::make83Name(char const*, unsigned char*)+0x18>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    91f4:	7808      	ldrb	r0, [r1, #0]
    91f6:	3820      	subs	r0, #32
    91f8:	bf18      	it	ne
    91fa:	2001      	movne	r0, #1
    91fc:	e7f3      	b.n	91e6 <SdFile::make83Name(char const*, unsigned char*)+0x56>
    91fe:	bf00      	nop
    9200:	6000175c 	.word	0x6000175c

00009204 <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    9204:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    9206:	7983      	ldrb	r3, [r0, #6]
    9208:	b93b      	cbnz	r3, 921a <SdFile::openRoot(SdVolume*)+0x16>
    920a:	f891 2020 	ldrb.w	r2, [r1, #32]
    920e:	460d      	mov	r5, r1
    9210:	4604      	mov	r4, r0

  if (vol->fatType() == 16) {
    9212:	2a10      	cmp	r2, #16
    9214:	d003      	beq.n	921e <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    9216:	2a20      	cmp	r2, #32
    9218:	d011      	beq.n	923e <SdFile::openRoot(SdVolume*)+0x3a>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    921a:	2000      	movs	r0, #0
    921c:	bd38      	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    921e:	2202      	movs	r2, #2
    firstCluster_ = 0;
    9220:	61c3      	str	r3, [r0, #28]
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    9222:	7182      	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    9224:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    9226:	015b      	lsls	r3, r3, #5
    9228:	6183      	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    922a:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    922c:	2201      	movs	r2, #1
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    922e:	6225      	str	r5, [r4, #32]
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
    9230:	4610      	mov	r0, r2
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    9232:	7162      	strb	r2, [r4, #5]

  // set to start of file
  curCluster_ = 0;
    9234:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    9236:	60e3      	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    9238:	6123      	str	r3, [r4, #16]
  dirIndex_ = 0;
    923a:	7523      	strb	r3, [r4, #20]
  return true;
}
    923c:	bd38      	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    923e:	2303      	movs	r3, #3
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    9240:	f100 0218 	add.w	r2, r0, #24
    9244:	4608      	mov	r0, r1
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    9246:	71a3      	strb	r3, [r4, #6]
    9248:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    924a:	61e1      	str	r1, [r4, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    924c:	f000 fc46 	bl	9adc <SdVolume::chainSize(unsigned long, unsigned long*) const>
    9250:	2800      	cmp	r0, #0
    9252:	d1ea      	bne.n	922a <SdFile::openRoot(SdVolume*)+0x26>
    9254:	e7e1      	b.n	921a <SdFile::openRoot(SdVolume*)+0x16>
    9256:	bf00      	nop

00009258 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    9258:	7983      	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    925a:	b913      	cbnz	r3, 9262 <SdFile::read(void*, unsigned int)+0xa>
    925c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    9260:	4770      	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    9262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9266:	468b      	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    9268:	7941      	ldrb	r1, [r0, #5]
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    926a:	b083      	sub	sp, #12
    926c:	4605      	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    926e:	07c9      	lsls	r1, r1, #31
    9270:	d55a      	bpl.n	9328 <SdFile::read(void*, unsigned int)+0xd0>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    9272:	68c1      	ldr	r1, [r0, #12]
    9274:	6984      	ldr	r4, [r0, #24]
    9276:	1a64      	subs	r4, r4, r1
    9278:	4294      	cmp	r4, r2
    927a:	bf28      	it	cs
    927c:	4614      	movcs	r4, r2
    927e:	4626      	mov	r6, r4
    9280:	9401      	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    9282:	2c00      	cmp	r4, #0
    9284:	d068      	beq.n	9358 <SdFile::read(void*, unsigned int)+0x100>
    9286:	461a      	mov	r2, r3
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    9288:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9388 <SdFile::read(void*, unsigned int)+0x130>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    928c:	4f3d      	ldr	r7, [pc, #244]	; (9384 <SdFile::read(void*, unsigned int)+0x12c>)

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    928e:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    9292:	2a02      	cmp	r2, #2
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    9294:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 938c <SdFile::read(void*, unsigned int)+0x134>
    9298:	d041      	beq.n	931e <SdFile::read(void*, unsigned int)+0xc6>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    929a:	6a28      	ldr	r0, [r5, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    929c:	7904      	ldrb	r4, [r0, #4]
    929e:	3c01      	subs	r4, #1
    92a0:	ea04 2451 	and.w	r4, r4, r1, lsr #9
    92a4:	b2e4      	uxtb	r4, r4
      if (offset == 0 && blockOfCluster == 0) {
    92a6:	f1ba 0f00 	cmp.w	sl, #0
    92aa:	d161      	bne.n	9370 <SdFile::read(void*, unsigned int)+0x118>
    92ac:	2c00      	cmp	r4, #0
    92ae:	d15f      	bne.n	9370 <SdFile::read(void*, unsigned int)+0x118>
        // start of new cluster
        if (curPosition_ == 0) {
    92b0:	2900      	cmp	r1, #0
    92b2:	d155      	bne.n	9360 <SdFile::read(void*, unsigned int)+0x108>
          // use first cluster in file
          curCluster_ = firstCluster_;
    92b4:	69e9      	ldr	r1, [r5, #28]
    92b6:	60a9      	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    92b8:	3902      	subs	r1, #2
    92ba:	7c02      	ldrb	r2, [r0, #16]
    92bc:	6940      	ldr	r0, [r0, #20]
    92be:	fa01 f202 	lsl.w	r2, r1, r2
    92c2:	1821      	adds	r1, r4, r0
    92c4:	4411      	add	r1, r2
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    92c6:	f5ca 7400 	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    92ca:	796a      	ldrb	r2, [r5, #5]
    92cc:	42b4      	cmp	r4, r6
    92ce:	bfa8      	it	ge
    92d0:	4634      	movge	r4, r6
    92d2:	0653      	lsls	r3, r2, #25
    92d4:	d42d      	bmi.n	9332 <SdFile::read(void*, unsigned int)+0xda>
    92d6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    92da:	d02a      	beq.n	9332 <SdFile::read(void*, unsigned int)+0xda>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    92dc:	4608      	mov	r0, r1
    92de:	2100      	movs	r1, #0
    92e0:	f000 fb36 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    92e4:	b300      	cbz	r0, 9328 <SdFile::read(void*, unsigned int)+0xd0>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    92e6:	eb0a 0e09 	add.w	lr, sl, r9
      uint8_t* end = src + n;
    92ea:	eb0e 0004 	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    92ee:	4586      	cmp	lr, r0
    92f0:	d00b      	beq.n	930a <SdFile::read(void*, unsigned int)+0xb2>
    92f2:	f10b 32ff 	add.w	r2, fp, #4294967295
    92f6:	4673      	mov	r3, lr
    92f8:	f813 1b01 	ldrb.w	r1, [r3], #1
    92fc:	4298      	cmp	r0, r3
    92fe:	f802 1f01 	strb.w	r1, [r2, #1]!
    9302:	d1f9      	bne.n	92f8 <SdFile::read(void*, unsigned int)+0xa0>
    9304:	ebce 0000 	rsb	r0, lr, r0
    9308:	4483      	add	fp, r0
    }
    curPosition_ += n;
    930a:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    930c:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    930e:	4421      	add	r1, r4
    9310:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    9312:	d021      	beq.n	9358 <SdFile::read(void*, unsigned int)+0x100>
    9314:	79aa      	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    9316:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    931a:	2a02      	cmp	r2, #2
    931c:	d1bd      	bne.n	929a <SdFile::read(void*, unsigned int)+0x42>
    931e:	6a2a      	ldr	r2, [r5, #32]
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    9320:	6a50      	ldr	r0, [r2, #36]	; 0x24
    9322:	eb00 2151 	add.w	r1, r0, r1, lsr #9
    9326:	e7ce      	b.n	92c6 <SdFile::read(void*, unsigned int)+0x6e>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    9328:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    932c:	b003      	add	sp, #12
    932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    9332:	683a      	ldr	r2, [r7, #0]
    9334:	4291      	cmp	r1, r2
    9336:	d0d1      	beq.n	92dc <SdFile::read(void*, unsigned int)+0x84>
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    9338:	f8d8 0000 	ldr.w	r0, [r8]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    933c:	7803      	ldrb	r3, [r0, #0]
    933e:	2bfe      	cmp	r3, #254	; 0xfe
    9340:	d018      	beq.n	9374 <SdFile::read(void*, unsigned int)+0x11c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    9342:	465a      	mov	r2, fp
    9344:	f7ff fdd4 	bl	8ef0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    9348:	2800      	cmp	r0, #0
    934a:	d0ed      	beq.n	9328 <SdFile::read(void*, unsigned int)+0xd0>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    934c:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    934e:	1b36      	subs	r6, r6, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    9350:	44a3      	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    9352:	4421      	add	r1, r4
    9354:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    9356:	d1dd      	bne.n	9314 <SdFile::read(void*, unsigned int)+0xbc>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    9358:	9801      	ldr	r0, [sp, #4]
}
    935a:	b003      	add	sp, #12
    935c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    9360:	f105 0208 	add.w	r2, r5, #8
    9364:	68a9      	ldr	r1, [r5, #8]
    9366:	f000 fb7f 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    936a:	2800      	cmp	r0, #0
    936c:	d0dc      	beq.n	9328 <SdFile::read(void*, unsigned int)+0xd0>
    936e:	6a28      	ldr	r0, [r5, #32]
    9370:	68a9      	ldr	r1, [r5, #8]
    9372:	e7a1      	b.n	92b8 <SdFile::read(void*, unsigned int)+0x60>
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    9374:	4658      	mov	r0, fp
    9376:	f7ff f81b 	bl	83b0 <SDHC_CardReadBlock(void*, unsigned long)>
    937a:	fab0 f080 	clz	r0, r0
    937e:	0940      	lsrs	r0, r0, #5
    9380:	e7e2      	b.n	9348 <SdFile::read(void*, unsigned int)+0xf0>
    9382:	bf00      	nop
    9384:	20001f50 	.word	0x20001f50
    9388:	20002b4c 	.word	0x20002b4c
    938c:	20002b48 	.word	0x20002b48

00009390 <SdFile::readDirCache()>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    9390:	7983      	ldrb	r3, [r0, #6]
    9392:	2b01      	cmp	r3, #1
    9394:	d917      	bls.n	93c6 <SdFile::readDirCache()+0x36>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    9396:	68c3      	ldr	r3, [r0, #12]
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9398:	2201      	movs	r2, #1
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    939a:	b530      	push	{r4, r5, lr}
    939c:	b083      	sub	sp, #12
    939e:	4604      	mov	r4, r0
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    93a0:	f3c3 1543 	ubfx	r5, r3, #5, #4
    93a4:	f10d 0107 	add.w	r1, sp, #7
    93a8:	f7ff ff56 	bl	9258 <SdFile::read(void*, unsigned int)>
    93ac:	2801      	cmp	r0, #1
    93ae:	d002      	beq.n	93b6 <SdFile::readDirCache()+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    93b0:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    93b2:	b003      	add	sp, #12
    93b4:	bd30      	pop	{r4, r5, pc}

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    93b6:	68e3      	ldr	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    93b8:	4804      	ldr	r0, [pc, #16]	; (93cc <SdFile::readDirCache()+0x3c>)

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    93ba:	331f      	adds	r3, #31

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    93bc:	eb00 1045 	add.w	r0, r0, r5, lsl #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    93c0:	60e3      	str	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    93c2:	b003      	add	sp, #12
    93c4:	bd30      	pop	{r4, r5, pc}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    93c6:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    93c8:	4770      	bx	lr
    93ca:	bf00      	nop
    93cc:	20002b4c 	.word	0x20002b4c

000093d0 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    93d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93d2:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    93d4:	b113      	cbz	r3, 93dc <SdFile::seekSet(unsigned long)+0xc>
    93d6:	6982      	ldr	r2, [r0, #24]
    93d8:	428a      	cmp	r2, r1
    93da:	d201      	bcs.n	93e0 <SdFile::seekSet(unsigned long)+0x10>
    93dc:	2000      	movs	r0, #0
    93de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    93e0:	2b02      	cmp	r3, #2
    93e2:	460f      	mov	r7, r1
    93e4:	4605      	mov	r5, r0
    93e6:	d01c      	beq.n	9422 <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    93e8:	b1f7      	cbz	r7, 9428 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    93ea:	6a2b      	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    93ec:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    93ee:	68e9      	ldr	r1, [r5, #12]
    93f0:	7c1b      	ldrb	r3, [r3, #16]
    93f2:	1e4a      	subs	r2, r1, #1
    93f4:	3309      	adds	r3, #9
    93f6:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    93f8:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    93fa:	42a2      	cmp	r2, r4
    93fc:	d802      	bhi.n	9404 <SdFile::seekSet(unsigned long)+0x34>
    93fe:	b109      	cbz	r1, 9404 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    9400:	1aa4      	subs	r4, r4, r2
    9402:	e001      	b.n	9408 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    9404:	69eb      	ldr	r3, [r5, #28]
    9406:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    9408:	f105 0608 	add.w	r6, r5, #8
    940c:	e006      	b.n	941c <SdFile::seekSet(unsigned long)+0x4c>
    940e:	68a9      	ldr	r1, [r5, #8]
    9410:	3c01      	subs	r4, #1
    9412:	6a28      	ldr	r0, [r5, #32]
    9414:	f000 fb28 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    9418:	2800      	cmp	r0, #0
    941a:	d0df      	beq.n	93dc <SdFile::seekSet(unsigned long)+0xc>
    941c:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    941e:	2c00      	cmp	r4, #0
    9420:	d1f5      	bne.n	940e <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    9422:	60ef      	str	r7, [r5, #12]
    return true;
    9424:	2001      	movs	r0, #1
    9426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    9428:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    942a:	2001      	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    942c:	60ef      	str	r7, [r5, #12]
    return true;
    942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009430 <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    9430:	7983      	ldrb	r3, [r0, #6]
    9432:	b10b      	cbz	r3, 9438 <SdFile::sync()+0x8>
    9434:	f7ff be2a 	b.w	908c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    9438:	4618      	mov	r0, r3
    943a:	4770      	bx	lr

0000943c <SdFile::truncate(unsigned long)>:
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    943c:	7983      	ldrb	r3, [r0, #6]
    943e:	2b01      	cmp	r3, #1
    9440:	d001      	beq.n	9446 <SdFile::truncate(unsigned long)+0xa>
    9442:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    9444:	4770      	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    9446:	b5f0      	push	{r4, r5, r6, r7, lr}
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    9448:	7945      	ldrb	r5, [r0, #5]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    944a:	b083      	sub	sp, #12
    944c:	4602      	mov	r2, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    944e:	07ac      	lsls	r4, r5, #30
    9450:	d51c      	bpl.n	948c <SdFile::truncate(unsigned long)+0x50>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    9452:	6985      	ldr	r5, [r0, #24]
    9454:	460c      	mov	r4, r1
    9456:	428d      	cmp	r5, r1
    9458:	d318      	bcc.n	948c <SdFile::truncate(unsigned long)+0x50>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    945a:	b1d5      	cbz	r5, 9492 <SdFile::truncate(unsigned long)+0x56>
    945c:	4625      	mov	r5, r4

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    945e:	68d6      	ldr	r6, [r2, #12]
    9460:	4614      	mov	r4, r2

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    9462:	f7ff ffb5 	bl	93d0 <SdFile::seekSet(unsigned long)>
    9466:	b188      	cbz	r0, 948c <SdFile::truncate(unsigned long)+0x50>

  if (length == 0) {
    9468:	b9b5      	cbnz	r5, 9498 <SdFile::truncate(unsigned long)+0x5c>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    946a:	69e1      	ldr	r1, [r4, #28]
    946c:	6a20      	ldr	r0, [r4, #32]
    946e:	f000 fbf1 	bl	9c54 <SdVolume::freeChain(unsigned long)>
    9472:	b158      	cbz	r0, 948c <SdFile::truncate(unsigned long)+0x50>
    firstCluster_ = 0;
    9474:	61e5      	str	r5, [r4, #28]
    9476:	e022      	b.n	94be <SdFile::truncate(unsigned long)+0x82>
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    9478:	f000 fbec 	bl	9c54 <SdVolume::freeChain(unsigned long)>
    947c:	b130      	cbz	r0, 948c <SdFile::truncate(unsigned long)+0x50>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    947e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9482:	68a1      	ldr	r1, [r4, #8]
    9484:	6a20      	ldr	r0, [r4, #32]
    9486:	f000 fbd3 	bl	9c30 <SdVolume::fatPut(unsigned long, unsigned long)>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    948a:	b9c0      	cbnz	r0, 94be <SdFile::truncate(unsigned long)+0x82>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    948c:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    948e:	b003      	add	sp, #12
    9490:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    9492:	4618      	mov	r0, r3

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    9494:	b003      	add	sp, #12
    9496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    9498:	aa01      	add	r2, sp, #4
    949a:	68a1      	ldr	r1, [r4, #8]
    949c:	6a20      	ldr	r0, [r4, #32]
    949e:	f000 fae3 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    94a2:	2800      	cmp	r0, #0
    94a4:	d0f2      	beq.n	948c <SdFile::truncate(unsigned long)+0x50>

    if (!vol_->isEOC(toFree)) {
    94a6:	6a20      	ldr	r0, [r4, #32]
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    94a8:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    94ac:	4b0e      	ldr	r3, [pc, #56]	; (94e8 <SdFile::truncate(unsigned long)+0xac>)
    94ae:	f890 7020 	ldrb.w	r7, [r0, #32]
    94b2:	9901      	ldr	r1, [sp, #4]
    94b4:	2f10      	cmp	r7, #16
    94b6:	bf08      	it	eq
    94b8:	4613      	moveq	r3, r2
    94ba:	4299      	cmp	r1, r3
    94bc:	d3dc      	bcc.n	9478 <SdFile::truncate(unsigned long)+0x3c>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    94be:	7963      	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    94c0:	79a2      	ldrb	r2, [r4, #6]
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    94c2:	f063 037f 	orn	r3, r3, #127	; 0x7f

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    94c6:	61a5      	str	r5, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    94c8:	7163      	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    94ca:	2a00      	cmp	r2, #0
    94cc:	d0de      	beq.n	948c <SdFile::truncate(unsigned long)+0x50>
    94ce:	4620      	mov	r0, r4
    94d0:	f7ff fddc 	bl	908c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    94d4:	2800      	cmp	r0, #0
    94d6:	d0d9      	beq.n	948c <SdFile::truncate(unsigned long)+0x50>

  // set file to correct position
  return seekSet(newPos);
    94d8:	42b5      	cmp	r5, r6
    94da:	4629      	mov	r1, r5
    94dc:	4620      	mov	r0, r4
    94de:	bf28      	it	cs
    94e0:	4631      	movcs	r1, r6
    94e2:	f7ff ff75 	bl	93d0 <SdFile::seekSet(unsigned long)>
    94e6:	e7d2      	b.n	948e <SdFile::truncate(unsigned long)+0x52>
    94e8:	0ffffff8 	.word	0x0ffffff8

000094ec <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    94ec:	b538      	push	{r3, r4, r5, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    94ee:	4b1d      	ldr	r3, [pc, #116]	; (9564 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>)
    94f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    94f4:	7add      	ldrb	r5, [r3, #11]
    94f6:	f015 0f11 	tst.w	r5, #17
    94fa:	d002      	beq.n	9502 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x16>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    94fc:	f012 0f42 	tst.w	r2, #66	; 0x42
    9500:	d11e      	bne.n	9540 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    9502:	4615      	mov	r5, r2
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    9504:	4a18      	ldr	r2, [pc, #96]	; (9568 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    9506:	7501      	strb	r1, [r0, #20]
    9508:	4604      	mov	r4, r0
  dirBlock_ = SdVolume::cacheBlockNumber_;
    950a:	6812      	ldr	r2, [r2, #0]
    950c:	6102      	str	r2, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    950e:	8a9a      	ldrh	r2, [r3, #20]
    9510:	8b59      	ldrh	r1, [r3, #26]
    9512:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    9516:	61c1      	str	r1, [r0, #28]
    9518:	7ad8      	ldrb	r0, [r3, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    951a:	f010 0018 	ands.w	r0, r0, #24
    951e:	d10d      	bne.n	953c <SdFile::openCachedEntry(unsigned char, unsigned char)+0x50>
    fileSize_ = p->fileSize;
    9520:	69da      	ldr	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    9522:	2301      	movs	r3, #1
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    9524:	61a2      	str	r2, [r4, #24]
    type_ = FAT_FILE_TYPE_NORMAL;
    9526:	71a3      	strb	r3, [r4, #6]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    9528:	f005 030f 	and.w	r3, r5, #15

  // set to start of file
  curCluster_ = 0;
    952c:	2100      	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    952e:	7163      	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    9530:	066b      	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    9532:	60a1      	str	r1, [r4, #8]
  curPosition_ = 0;
    9534:	60e1      	str	r1, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    9536:	d40f      	bmi.n	9558 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x6c>
  return true;
    9538:	2001      	movs	r0, #1
}
    953a:	bd38      	pop	{r3, r4, r5, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    953c:	2810      	cmp	r0, #16
    953e:	d001      	beq.n	9544 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x58>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    9540:	2000      	movs	r0, #0
    9542:	bd38      	pop	{r3, r4, r5, pc}
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    9544:	f104 0218 	add.w	r2, r4, #24
    9548:	6a20      	ldr	r0, [r4, #32]
    954a:	f000 fac7 	bl	9adc <SdVolume::chainSize(unsigned long, unsigned long*) const>
    954e:	2800      	cmp	r0, #0
    9550:	d0f6      	beq.n	9540 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    type_ = FAT_FILE_TYPE_SUBDIR;
    9552:	2304      	movs	r3, #4
    9554:	71a3      	strb	r3, [r4, #6]
    9556:	e7e7      	b.n	9528 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3c>
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    9558:	4620      	mov	r0, r4
  return true;
}
    955a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    955e:	f7ff bf6d 	b.w	943c <SdFile::truncate(unsigned long)>
    9562:	bf00      	nop
    9564:	20002b4c 	.word	0x20002b4c
    9568:	20001f50 	.word	0x20001f50

0000956c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9570:	b084      	sub	sp, #16
    9572:	4680      	mov	r8, r0
    9574:	460c      	mov	r4, r1
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    9576:	4610      	mov	r0, r2
    9578:	ae01      	add	r6, sp, #4
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    957a:	469a      	mov	sl, r3
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    957c:	4631      	mov	r1, r6
    957e:	f7ff fe07 	bl	9190 <SdFile::make83Name(char const*, unsigned char*)>
    9582:	b3a8      	cbz	r0, 95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    9584:	2200      	movs	r2, #0
  vol_ = dirFile->vol_;
    9586:	6a21      	ldr	r1, [r4, #32]
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    9588:	f8df 9120 	ldr.w	r9, [pc, #288]	; 96ac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x140>

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
  vol_ = dirFile->vol_;
    958c:	f8c8 1020 	str.w	r1, [r8, #32]
    9590:	4613      	mov	r3, r2
    9592:	60a2      	str	r2, [r4, #8]
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    9594:	4617      	mov	r7, r2
    9596:	60e2      	str	r2, [r4, #12]
    9598:	e007      	b.n	95aa <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3e>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    959a:	f1be 0fe5 	cmp.w	lr, #229	; 0xe5
    959e:	d016      	beq.n	95ce <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x62>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    95a0:	f003 fe50 	bl	d244 <memcmp>
    95a4:	2800      	cmp	r0, #0
    95a6:	d038      	beq.n	961a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xae>
    95a8:	68e3      	ldr	r3, [r4, #12]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    95aa:	69a2      	ldr	r2, [r4, #24]
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    95ac:	4620      	mov	r0, r4
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    95ae:	f3c3 1543 	ubfx	r5, r3, #5, #4

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    95b2:	429a      	cmp	r2, r3
    95b4:	d920      	bls.n	95f8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x8c>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    95b6:	f7ff feeb 	bl	9390 <SdFile::readDirCache()>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    95ba:	220b      	movs	r2, #11

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    95bc:	4603      	mov	r3, r0
    95be:	b1b8      	cbz	r0, 95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    95c0:	f890 e000 	ldrb.w	lr, [r0]
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    95c4:	4601      	mov	r1, r0
    95c6:	4630      	mov	r0, r6
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    95c8:	f1be 0f00 	cmp.w	lr, #0
    95cc:	d1e5      	bne.n	959a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2e>
      // remember first empty slot
      if (!emptyFound) {
    95ce:	b93f      	cbnz	r7, 95e0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x74>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    95d0:	f8d9 2000 	ldr.w	r2, [r9]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    95d4:	f888 5014 	strb.w	r5, [r8, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    95d8:	f8c8 2010 	str.w	r2, [r8, #16]
    95dc:	f893 e000 	ldrb.w	lr, [r3]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    95e0:	2701      	movs	r7, #1
    95e2:	f1be 0f00 	cmp.w	lr, #0
    95e6:	d1df      	bne.n	95a8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3c>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    95e8:	f00a 0312 	and.w	r3, sl, #18
    95ec:	2b12      	cmp	r3, #18
    95ee:	d01e      	beq.n	962e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc2>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    95f0:	2000      	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    95f2:	b004      	add	sp, #16
    95f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    95f8:	f00a 0312 	and.w	r3, sl, #18
    95fc:	2b12      	cmp	r3, #18
    95fe:	d1f7      	bne.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    9600:	b9af      	cbnz	r7, 962e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc2>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    9602:	79a3      	ldrb	r3, [r4, #6]
    9604:	2b02      	cmp	r3, #2
    9606:	d0f3      	beq.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    9608:	4620      	mov	r0, r4
    960a:	f7ff fd8b 	bl	9124 <SdFile::addDirCluster()>
    960e:	2800      	cmp	r0, #0
    9610:	d0ee      	beq.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    9612:	4c24      	ldr	r4, [pc, #144]	; (96a4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x138>)

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    9614:	f888 7014 	strb.w	r7, [r8, #20]
    9618:	e016      	b.n	9648 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xdc>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    961a:	f00a 0330 	and.w	r3, sl, #48	; 0x30
    961e:	2b30      	cmp	r3, #48	; 0x30
    9620:	d0e6      	beq.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    9622:	4652      	mov	r2, sl
    9624:	4629      	mov	r1, r5
    9626:	4640      	mov	r0, r8
    9628:	f7ff ff60 	bl	94ec <SdFile::openCachedEntry(unsigned char, unsigned char)>
    962c:	e7e1      	b.n	95f2 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x86>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    962e:	2101      	movs	r1, #1
    9630:	f8d8 0010 	ldr.w	r0, [r8, #16]
    9634:	f000 f98c 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9638:	2800      	cmp	r0, #0
    963a:	d0d9      	beq.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    963c:	f898 4014 	ldrb.w	r4, [r8, #20]
    9640:	4b18      	ldr	r3, [pc, #96]	; (96a4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x138>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    9642:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    9646:	d0d3      	beq.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    9648:	2220      	movs	r2, #32
    964a:	2100      	movs	r1, #0
    964c:	4620      	mov	r0, r4
    964e:	f003 fe8f 	bl	d370 <memset>
  memcpy(p->name, dname, 11);

  // set timestamps
  if (dateTime_) {
    9652:	4a15      	ldr	r2, [pc, #84]	; (96a8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x13c>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    9654:	4623      	mov	r3, r4

  // set timestamps
  if (dateTime_) {
    9656:	6815      	ldr	r5, [r2, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    9658:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    965c:	c303      	stmia	r3!, {r0, r1}
    965e:	0c11      	lsrs	r1, r2, #16
    9660:	f823 2b02 	strh.w	r2, [r3], #2
    9664:	7019      	strb	r1, [r3, #0]

  // set timestamps
  if (dateTime_) {
    9666:	b1a5      	cbz	r5, 9692 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x126>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    9668:	f104 010e 	add.w	r1, r4, #14
    966c:	f104 0010 	add.w	r0, r4, #16
    9670:	47a8      	blx	r5
    9672:	8a23      	ldrh	r3, [r4, #16]
    9674:	89e2      	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    9676:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    9678:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    967a:	82e2      	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    967c:	f000 f928 	bl	98d0 <SdVolume::cacheFlush()>
    9680:	2800      	cmp	r0, #0
    9682:	d0b5      	beq.n	95f0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    9684:	4652      	mov	r2, sl
    9686:	f898 1014 	ldrb.w	r1, [r8, #20]
    968a:	4640      	mov	r0, r8
    968c:	f7ff ff2e 	bl	94ec <SdFile::openCachedEntry(unsigned char, unsigned char)>
    9690:	e7af      	b.n	95f2 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x86>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    9692:	f642 0021 	movw	r0, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    9696:	f44f 6100 	mov.w	r1, #2048	; 0x800
    969a:	4603      	mov	r3, r0
    969c:	460a      	mov	r2, r1
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    969e:	8220      	strh	r0, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    96a0:	81e1      	strh	r1, [r4, #14]
    96a2:	e7e8      	b.n	9676 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x10a>
    96a4:	20002b4c 	.word	0x20002b4c
    96a8:	20002b40 	.word	0x20002b40
    96ac:	20001f50 	.word	0x20001f50

000096b0 <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    96b0:	b410      	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    96b2:	7984      	ldrb	r4, [r0, #6]
    96b4:	b11c      	cbz	r4, 96be <SdFile::open(SdFile*, char const*, unsigned char)+0xe>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    96b6:	2000      	movs	r0, #0
    96b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    96bc:	4770      	bx	lr
    96be:	f85d 4b04 	ldr.w	r4, [sp], #4
    96c2:	f7ff bf53 	b.w	956c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    96c6:	bf00      	nop

000096c8 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    96c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96cc:	b085      	sub	sp, #20
    96ce:	4607      	mov	r7, r0
    96d0:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    96d2:	7982      	ldrb	r2, [r0, #6]
    96d4:	2a01      	cmp	r2, #1
    96d6:	d005      	beq.n	96e4 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    96d8:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    96da:	2000      	movs	r0, #0
    96dc:	713b      	strb	r3, [r7, #4]
}
    96de:	b005      	add	sp, #20
    96e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    96e4:	7942      	ldrb	r2, [r0, #5]
    96e6:	0794      	lsls	r4, r2, #30
    96e8:	d5f6      	bpl.n	96d8 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    96ea:	0753      	lsls	r3, r2, #29
    96ec:	468b      	mov	fp, r1
    96ee:	d508      	bpl.n	9702 <SdFile::write(void const*, unsigned int)+0x3a>
    96f0:	69b9      	ldr	r1, [r7, #24]
    96f2:	68fb      	ldr	r3, [r7, #12]
    96f4:	428b      	cmp	r3, r1
    96f6:	f000 80c0 	beq.w	987a <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    96fa:	f7ff fe69 	bl	93d0 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    96fe:	2800      	cmp	r0, #0
    9700:	d0ea      	beq.n	96d8 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    9702:	9b01      	ldr	r3, [sp, #4]
    9704:	68f9      	ldr	r1, [r7, #12]
    9706:	2b00      	cmp	r3, #0
    9708:	f000 80c5 	beq.w	9896 <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    970c:	f8dd 8004 	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    9710:	f8df 919c 	ldr.w	r9, [pc, #412]	; 98b0 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    9714:	f8df a19c 	ldr.w	sl, [pc, #412]	; 98b4 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    9718:	6a38      	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    971a:	f3c1 0608 	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    971e:	7902      	ldrb	r2, [r0, #4]
    9720:	3a01      	subs	r2, #1
    9722:	ea02 2551 	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    9726:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    972a:	d153      	bne.n	97d4 <SdFile::write(void const*, unsigned int)+0x10c>
    972c:	2e00      	cmp	r6, #0
    972e:	d151      	bne.n	97d4 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    9730:	68b9      	ldr	r1, [r7, #8]
    9732:	2900      	cmp	r1, #0
    9734:	d179      	bne.n	982a <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    9736:	69fa      	ldr	r2, [r7, #28]
    9738:	2a00      	cmp	r2, #0
    973a:	f000 8089 	beq.w	9850 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    973e:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    9740:	f5c6 7400 	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    9744:	3a02      	subs	r2, #2
    9746:	f890 e010 	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    974a:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    974c:	6941      	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    974e:	4544      	cmp	r4, r8
    9750:	d942      	bls.n	97d8 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    9752:	fa02 f20e 	lsl.w	r2, r2, lr
    9756:	440d      	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    9758:	fa1f f488 	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    975c:	4415      	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    975e:	b91e      	cbnz	r6, 9768 <SdFile::write(void const*, unsigned int)+0xa0>
    9760:	68f8      	ldr	r0, [r7, #12]
    9762:	69ba      	ldr	r2, [r7, #24]
    9764:	4290      	cmp	r0, r2
    9766:	d253      	bcs.n	9810 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    9768:	4628      	mov	r0, r5
    976a:	2101      	movs	r1, #1
    976c:	f000 f8f0 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9770:	2800      	cmp	r0, #0
    9772:	d0b1      	beq.n	96d8 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    9774:	444e      	add	r6, r9
      uint8_t* end = dst + n;
    9776:	eb06 0e04 	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    977a:	4576      	cmp	r6, lr
    977c:	d00d      	beq.n	979a <SdFile::write(void const*, unsigned int)+0xd2>
    977e:	f10b 31ff 	add.w	r1, fp, #4294967295
    9782:	1e72      	subs	r2, r6, #1
    9784:	f10e 35ff 	add.w	r5, lr, #4294967295
    9788:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    978c:	f802 0f01 	strb.w	r0, [r2, #1]!
    9790:	4295      	cmp	r5, r2
    9792:	d1f9      	bne.n	9788 <SdFile::write(void const*, unsigned int)+0xc0>
    9794:	ebc6 060e 	rsb	r6, r6, lr
    9798:	44b3      	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    979a:	68fd      	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    979c:	ebb8 0804 	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    97a0:	eb04 0105 	add.w	r1, r4, r5
    97a4:	60f9      	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    97a6:	d1b7      	bne.n	9718 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    97a8:	69bb      	ldr	r3, [r7, #24]
    97aa:	4299      	cmp	r1, r3
    97ac:	d96a      	bls.n	9884 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    97ae:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    97b0:	61b9      	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    97b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    97b6:	717a      	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    97b8:	0712      	lsls	r2, r2, #28
    97ba:	d507      	bpl.n	97cc <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    97bc:	79bb      	ldrb	r3, [r7, #6]
    97be:	2b00      	cmp	r3, #0
    97c0:	d08a      	beq.n	96d8 <SdFile::write(void const*, unsigned int)+0x10>
    97c2:	4638      	mov	r0, r7
    97c4:	f7ff fc62 	bl	908c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    97c8:	2800      	cmp	r0, #0
    97ca:	d085      	beq.n	96d8 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    97cc:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    97ce:	b005      	add	sp, #20
    97d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97d4:	68ba      	ldr	r2, [r7, #8]
    97d6:	e7b3      	b.n	9740 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    97d8:	fa02 f20e 	lsl.w	r2, r2, lr
    97dc:	440d      	add	r5, r1
    if (n == 512) {
    97de:	f5b4 7f00 	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    97e2:	4415      	add	r5, r2
    if (n == 512) {
    97e4:	d1bb      	bne.n	975e <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    97e6:	f8da 2000 	ldr.w	r2, [sl]
    97ea:	4295      	cmp	r5, r2
    97ec:	d039      	beq.n	9862 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    97ee:	4a2c      	ldr	r2, [pc, #176]	; (98a0 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    97f0:	4629      	mov	r1, r5
    97f2:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    97f4:	7802      	ldrb	r2, [r0, #0]
    97f6:	2afe      	cmp	r2, #254	; 0xfe
    97f8:	d038      	beq.n	986c <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    97fa:	465a      	mov	r2, fp
    97fc:	f7ff fbf0 	bl	8fe0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    9800:	2800      	cmp	r0, #0
    9802:	f43f af69 	beq.w	96d8 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    9806:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    980a:	f44f 7400 	mov.w	r4, #512	; 0x200
    980e:	e7c4      	b.n	979a <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    9810:	f000 f85e 	bl	98d0 <SdVolume::cacheFlush()>
    9814:	2800      	cmp	r0, #0
    9816:	f43f af5f 	beq.w	96d8 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    981a:	4922      	ldr	r1, [pc, #136]	; (98a4 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    981c:	f8ca 5000 	str.w	r5, [sl]
    9820:	780a      	ldrb	r2, [r1, #0]
    9822:	f042 0201 	orr.w	r2, r2, #1
    9826:	700a      	strb	r2, [r1, #0]
    9828:	e7a4      	b.n	9774 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    982a:	aa03      	add	r2, sp, #12
    982c:	f000 f91c 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    9830:	2800      	cmp	r0, #0
    9832:	f43f af54 	beq.w	96de <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    9836:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9838:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    983c:	4b1a      	ldr	r3, [pc, #104]	; (98a8 <SdFile::write(void const*, unsigned int)+0x1e0>)
    983e:	f890 4020 	ldrb.w	r4, [r0, #32]
    9842:	9a03      	ldr	r2, [sp, #12]
    9844:	2c10      	cmp	r4, #16
    9846:	bf18      	it	ne
    9848:	4619      	movne	r1, r3
    984a:	428a      	cmp	r2, r1
    984c:	f4ff af77 	bcc.w	973e <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    9850:	4638      	mov	r0, r7
    9852:	f7ff fc51 	bl	90f8 <SdFile::addCluster()>
    9856:	2800      	cmp	r0, #0
    9858:	f43f af3e 	beq.w	96d8 <SdFile::write(void const*, unsigned int)+0x10>
    985c:	6a38      	ldr	r0, [r7, #32]
    985e:	68ba      	ldr	r2, [r7, #8]
    9860:	e76e      	b.n	9740 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    9862:	f04f 32ff 	mov.w	r2, #4294967295
    9866:	f8ca 2000 	str.w	r2, [sl]
    986a:	e7c0      	b.n	97ee <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    986c:	4658      	mov	r0, fp
    986e:	f7fe fe1b 	bl	84a8 <SDHC_CardWriteBlock(void const*, unsigned long)>
    9872:	fab0 f080 	clz	r0, r0
    9876:	0940      	lsrs	r0, r0, #5
    9878:	e7c2      	b.n	9800 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    987a:	9b01      	ldr	r3, [sp, #4]
    987c:	2b00      	cmp	r3, #0
    987e:	f47f af45 	bne.w	970c <SdFile::write(void const*, unsigned int)+0x44>
    9882:	e799      	b.n	97b8 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    9884:	4b09      	ldr	r3, [pc, #36]	; (98ac <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    9886:	797a      	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    9888:	681b      	ldr	r3, [r3, #0]
    988a:	2b00      	cmp	r3, #0
    988c:	d094      	beq.n	97b8 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    988e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9892:	717a      	strb	r2, [r7, #5]
    9894:	e790      	b.n	97b8 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    9896:	69bb      	ldr	r3, [r7, #24]
    9898:	428b      	cmp	r3, r1
    989a:	d388      	bcc.n	97ae <SdFile::write(void const*, unsigned int)+0xe6>
    989c:	797a      	ldrb	r2, [r7, #5]
    989e:	e78b      	b.n	97b8 <SdFile::write(void const*, unsigned int)+0xf0>
    98a0:	20002b48 	.word	0x20002b48
    98a4:	20002d4c 	.word	0x20002d4c
    98a8:	0ffffff8 	.word	0x0ffffff8
    98ac:	20002b40 	.word	0x20002b40
    98b0:	20002b4c 	.word	0x20002b4c
    98b4:	20001f50 	.word	0x20001f50

000098b8 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    98b8:	b500      	push	{lr}
    98ba:	b083      	sub	sp, #12
  return write(&b, 1);
    98bc:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    98be:	ab02      	add	r3, sp, #8
    98c0:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    98c4:	4619      	mov	r1, r3
    98c6:	f7ff feff 	bl	96c8 <SdFile::write(void const*, unsigned int)>
}
    98ca:	b003      	add	sp, #12
    98cc:	f85d fb04 	ldr.w	pc, [sp], #4

000098d0 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    98d0:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    98d2:	4c1a      	ldr	r4, [pc, #104]	; (993c <SdVolume::cacheFlush()+0x6c>)
    98d4:	7823      	ldrb	r3, [r4, #0]
    98d6:	b90b      	cbnz	r3, 98dc <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    98d8:	2001      	movs	r0, #1
}
    98da:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    98dc:	4d18      	ldr	r5, [pc, #96]	; (9940 <SdVolume::cacheFlush()+0x70>)
    98de:	4b19      	ldr	r3, [pc, #100]	; (9944 <SdVolume::cacheFlush()+0x74>)
    98e0:	6828      	ldr	r0, [r5, #0]
    98e2:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    98e4:	7803      	ldrb	r3, [r0, #0]
    98e6:	2bfe      	cmp	r3, #254	; 0xfe
    98e8:	d017      	beq.n	991a <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    98ea:	4a17      	ldr	r2, [pc, #92]	; (9948 <SdVolume::cacheFlush()+0x78>)
    98ec:	f7ff fb78 	bl	8fe0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    98f0:	b188      	cbz	r0, 9916 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    98f2:	4e16      	ldr	r6, [pc, #88]	; (994c <SdVolume::cacheFlush()+0x7c>)
    98f4:	6831      	ldr	r1, [r6, #0]
    98f6:	b919      	cbnz	r1, 9900 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    98f8:	2300      	movs	r3, #0
  }
  return true;
    98fa:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    98fc:	7023      	strb	r3, [r4, #0]
    98fe:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9900:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    9902:	7803      	ldrb	r3, [r0, #0]
    9904:	2bfe      	cmp	r3, #254	; 0xfe
    9906:	d00f      	beq.n	9928 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    9908:	4a0f      	ldr	r2, [pc, #60]	; (9948 <SdVolume::cacheFlush()+0x78>)
    990a:	f7ff fb69 	bl	8fe0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    990e:	b110      	cbz	r0, 9916 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9910:	2300      	movs	r3, #0
    9912:	6033      	str	r3, [r6, #0]
    9914:	e7f0      	b.n	98f8 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    9916:	2000      	movs	r0, #0
    9918:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    991a:	480b      	ldr	r0, [pc, #44]	; (9948 <SdVolume::cacheFlush()+0x78>)
    991c:	f7fe fdc4 	bl	84a8 <SDHC_CardWriteBlock(void const*, unsigned long)>
    9920:	fab0 f080 	clz	r0, r0
    9924:	0940      	lsrs	r0, r0, #5
    9926:	e7e3      	b.n	98f0 <SdVolume::cacheFlush()+0x20>
    9928:	4807      	ldr	r0, [pc, #28]	; (9948 <SdVolume::cacheFlush()+0x78>)
    992a:	f7fe fdbd 	bl	84a8 <SDHC_CardWriteBlock(void const*, unsigned long)>
    992e:	fab0 f080 	clz	r0, r0
    9932:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9934:	2800      	cmp	r0, #0
    9936:	d1eb      	bne.n	9910 <SdVolume::cacheFlush()+0x40>
    9938:	e7ed      	b.n	9916 <SdVolume::cacheFlush()+0x46>
    993a:	bf00      	nop
    993c:	20002d4c 	.word	0x20002d4c
    9940:	20002b48 	.word	0x20002b48
    9944:	20001f50 	.word	0x20001f50
    9948:	20002b4c 	.word	0x20002b4c
    994c:	20002b44 	.word	0x20002b44

00009950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    9950:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    9952:	4d12      	ldr	r5, [pc, #72]	; (999c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    9954:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    9956:	682b      	ldr	r3, [r5, #0]
    9958:	4283      	cmp	r3, r0
    995a:	d011      	beq.n	9980 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    995c:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    995e:	f7ff ffb7 	bl	98d0 <SdVolume::cacheFlush()>
    9962:	b908      	cbnz	r0, 9968 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    9964:	2000      	movs	r0, #0
    9966:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9968:	4b0d      	ldr	r3, [pc, #52]	; (99a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    996a:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    996c:	7803      	ldrb	r3, [r0, #0]
    996e:	2bfe      	cmp	r3, #254	; 0xfe
    9970:	d00c      	beq.n	998c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    9972:	4a0c      	ldr	r2, [pc, #48]	; (99a4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    9974:	4621      	mov	r1, r4
    9976:	f7ff fabb 	bl	8ef0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    997a:	2800      	cmp	r0, #0
    997c:	d0f2      	beq.n	9964 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    997e:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    9980:	4b09      	ldr	r3, [pc, #36]	; (99a8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    9982:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    9984:	7819      	ldrb	r1, [r3, #0]
    9986:	4331      	orrs	r1, r6
    9988:	7019      	strb	r1, [r3, #0]
  return true;
}
    998a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    998c:	4621      	mov	r1, r4
    998e:	4805      	ldr	r0, [pc, #20]	; (99a4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    9990:	f7fe fd0e 	bl	83b0 <SDHC_CardReadBlock(void*, unsigned long)>
    9994:	fab0 f080 	clz	r0, r0
    9998:	0940      	lsrs	r0, r0, #5
    999a:	e7ee      	b.n	997a <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    999c:	20001f50 	.word	0x20001f50
    99a0:	20002b48 	.word	0x20002b48
    99a4:	20002b4c 	.word	0x20002b4c
    99a8:	20002d4c 	.word	0x20002d4c

000099ac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    99ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    99ae:	f890 3020 	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    99b2:	4605      	mov	r5, r0
    99b4:	460e      	mov	r6, r1
    99b6:	4617      	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    99b8:	2b10      	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    99ba:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    99bc:	4b18      	ldr	r3, [pc, #96]	; (9a20 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    99be:	d017      	beq.n	99f0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    99c0:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    99c4:	681b      	ldr	r3, [r3, #0]
    99c6:	429c      	cmp	r4, r3
    99c8:	d117      	bne.n	99fa <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    99ca:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    99ce:	4a15      	ldr	r2, [pc, #84]	; (9a24 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    99d0:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    99d4:	4914      	ldr	r1, [pc, #80]	; (9a28 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    99d6:	7e28      	ldrb	r0, [r5, #24]
    99d8:	780a      	ldrb	r2, [r1, #0]
    99da:	2801      	cmp	r0, #1
    99dc:	f042 0201 	orr.w	r2, r2, #1
    99e0:	700a      	strb	r2, [r1, #0]
    99e2:	d919      	bls.n	9a18 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    99e4:	68a9      	ldr	r1, [r5, #8]
  return true;
    99e6:	2001      	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    99e8:	4a10      	ldr	r2, [pc, #64]	; (9a2c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    99ea:	440b      	add	r3, r1
    99ec:	6013      	str	r3, [r2, #0]
    99ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    99f0:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    99f4:	681b      	ldr	r3, [r3, #0]
    99f6:	429c      	cmp	r4, r3
    99f8:	d008      	beq.n	9a0c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    99fa:	2100      	movs	r1, #0
    99fc:	4620      	mov	r0, r4
    99fe:	f7ff ffa7 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9a02:	b150      	cbz	r0, 9a1a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    9a04:	f895 3020 	ldrb.w	r3, [r5, #32]
    9a08:	2b10      	cmp	r3, #16
    9a0a:	d107      	bne.n	9a1c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    9a0c:	b2f1      	uxtb	r1, r6
    9a0e:	4a05      	ldr	r2, [pc, #20]	; (9a24 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    9a10:	4623      	mov	r3, r4
    9a12:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
    9a16:	e7dd      	b.n	99d4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    9a18:	2001      	movs	r0, #1
}
    9a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    9a1c:	4623      	mov	r3, r4
    9a1e:	e7d4      	b.n	99ca <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    9a20:	20001f50 	.word	0x20001f50
    9a24:	20002b4c 	.word	0x20002b4c
    9a28:	20002d4c 	.word	0x20002d4c
    9a2c:	20002b44 	.word	0x20002b44

00009a30 <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    9a30:	b510      	push	{r4, lr}
    9a32:	4604      	mov	r4, r0
  if (!cacheFlush()) return false;
    9a34:	f7ff ff4c 	bl	98d0 <SdVolume::cacheFlush()>
    9a38:	b170      	cbz	r0, 9a58 <SdVolume::cacheZeroBlock(unsigned long)+0x28>
    9a3a:	4b08      	ldr	r3, [pc, #32]	; (9a5c <SdVolume::cacheZeroBlock(unsigned long)+0x2c>)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    9a3c:	2100      	movs	r1, #0
    9a3e:	f503 7200 	add.w	r2, r3, #512	; 0x200
    9a42:	f803 1f01 	strb.w	r1, [r3, #1]!
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    9a46:	4293      	cmp	r3, r2
    9a48:	d1fb      	bne.n	9a42 <SdVolume::cacheZeroBlock(unsigned long)+0x12>
    9a4a:	4a05      	ldr	r2, [pc, #20]	; (9a60 <SdVolume::cacheZeroBlock(unsigned long)+0x30>)
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
  cacheSetDirty();
  return true;
    9a4c:	2001      	movs	r0, #1

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    9a4e:	4905      	ldr	r1, [pc, #20]	; (9a64 <SdVolume::cacheZeroBlock(unsigned long)+0x34>)
    9a50:	7813      	ldrb	r3, [r2, #0]
    9a52:	600c      	str	r4, [r1, #0]
    9a54:	4303      	orrs	r3, r0
    9a56:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
}
    9a58:	bd10      	pop	{r4, pc}
    9a5a:	bf00      	nop
    9a5c:	20002b4b 	.word	0x20002b4b
    9a60:	20002d4c 	.word	0x20002d4c
    9a64:	20001f50 	.word	0x20001f50

00009a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9a68:	68c3      	ldr	r3, [r0, #12]
    9a6a:	3301      	adds	r3, #1
    9a6c:	428b      	cmp	r3, r1
    9a6e:	d318      	bcc.n	9aa2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    9a70:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9a72:	f890 3020 	ldrb.w	r3, [r0, #32]
    9a76:	4604      	mov	r4, r0
    9a78:	4616      	mov	r6, r2
    9a7a:	460d      	mov	r5, r1
    9a7c:	2b10      	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    9a7e:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    9a80:	4b14      	ldr	r3, [pc, #80]	; (9ad4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9a82:	d010      	beq.n	9aa6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    9a84:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    9a88:	681b      	ldr	r3, [r3, #0]
    9a8a:	4298      	cmp	r0, r3
    9a8c:	d110      	bne.n	9ab0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    9a8e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    9a92:	4b11      	ldr	r3, [pc, #68]	; (9ad8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    9a94:	2001      	movs	r0, #1
    9a96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9a9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    9a9e:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    9aa0:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9aa2:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    9aa4:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9aa6:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    9aaa:	681b      	ldr	r3, [r3, #0]
    9aac:	4298      	cmp	r0, r3
    9aae:	d007      	beq.n	9ac0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    9ab0:	2100      	movs	r1, #0
    9ab2:	f7ff ff4d 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9ab6:	b150      	cbz	r0, 9ace <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    9ab8:	f894 3020 	ldrb.w	r3, [r4, #32]
    9abc:	2b10      	cmp	r3, #16
    9abe:	d1e6      	bne.n	9a8e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9ac0:	b2e9      	uxtb	r1, r5
    9ac2:	4b05      	ldr	r3, [pc, #20]	; (9ad8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    9ac4:	2001      	movs	r0, #1
    9ac6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    9aca:	6033      	str	r3, [r6, #0]
    9acc:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9ace:	2000      	movs	r0, #0
    9ad0:	bd70      	pop	{r4, r5, r6, pc}
    9ad2:	bf00      	nop
    9ad4:	20001f50 	.word	0x20001f50
    9ad8:	20002b4c 	.word	0x20002b4c

00009adc <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    9adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ae0:	b082      	sub	sp, #8
    9ae2:	4604      	mov	r4, r0
    9ae4:	4691      	mov	r9, r2
    9ae6:	4608      	mov	r0, r1
    9ae8:	ad02      	add	r5, sp, #8
  uint32_t s = 0;
    9aea:	f04f 0a00 	mov.w	sl, #0
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9aee:	f44f 7800 	mov.w	r8, #512	; 0x200
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9af2:	4f11      	ldr	r7, [pc, #68]	; (9b38 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5c>)
    9af4:	f64f 76f8 	movw	r6, #65528	; 0xfff8
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    9af8:	f845 1d04 	str.w	r1, [r5, #-4]!
    9afc:	e00c      	b.n	9b18 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x3c>
    9afe:	f894 3020 	ldrb.w	r3, [r4, #32]
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9b02:	7c22      	ldrb	r2, [r4, #16]
  } while (!isEOC(cluster));
    9b04:	9801      	ldr	r0, [sp, #4]
    9b06:	2b10      	cmp	r3, #16
    9b08:	bf14      	ite	ne
    9b0a:	463b      	movne	r3, r7
    9b0c:	4633      	moveq	r3, r6
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9b0e:	fa08 f202 	lsl.w	r2, r8, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    9b12:	4298      	cmp	r0, r3
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9b14:	4492      	add	sl, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    9b16:	d209      	bcs.n	9b2c <SdVolume::chainSize(unsigned long, unsigned long*) const+0x50>
    if (!fatGet(cluster, &cluster)) return false;
    9b18:	4601      	mov	r1, r0
    9b1a:	462a      	mov	r2, r5
    9b1c:	4620      	mov	r0, r4
    9b1e:	f7ff ffa3 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    9b22:	2800      	cmp	r0, #0
    9b24:	d1eb      	bne.n	9afe <SdVolume::chainSize(unsigned long, unsigned long*) const+0x22>
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    9b26:	b002      	add	sp, #8
    9b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    9b2c:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    9b2e:	f8c9 a000 	str.w	sl, [r9]
  return true;
}
    9b32:	b002      	add	sp, #8
    9b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b38:	0ffffff8 	.word	0x0ffffff8

00009b3c <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    9b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    9b40:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    9b42:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    9b44:	b367      	cbz	r7, 9ba0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    9b46:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    9b48:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    9b4c:	68c3      	ldr	r3, [r0, #12]
    9b4e:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    9b52:	b30b      	cbz	r3, 9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9b54:	468b      	mov	fp, r1
    9b56:	4606      	mov	r6, r0
    9b58:	4691      	mov	r9, r2
    9b5a:	463c      	mov	r4, r7
    9b5c:	2500      	movs	r5, #0
    9b5e:	e005      	b.n	9b6c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    9b60:	461c      	mov	r4, r3
    9b62:	461f      	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    9b64:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    9b66:	68f3      	ldr	r3, [r6, #12]
    9b68:	42ab      	cmp	r3, r5
    9b6a:	d915      	bls.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    9b6c:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    9b6e:	aa01      	add	r2, sp, #4
    9b70:	4630      	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    9b72:	d201      	bcs.n	9b78 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    9b74:	2402      	movs	r4, #2
    9b76:	4627      	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    9b78:	4621      	mov	r1, r4
    9b7a:	f7ff ff75 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    9b7e:	1c63      	adds	r3, r4, #1
    9b80:	b150      	cbz	r0, 9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    9b82:	9a01      	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    9b84:	1bd9      	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    9b86:	2a00      	cmp	r2, #0
    9b88:	d1ea      	bne.n	9b60 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    9b8a:	458b      	cmp	fp, r1
    9b8c:	d010      	beq.n	9bb0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    9b8e:	461c      	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    9b90:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    9b92:	68f3      	ldr	r3, [r6, #12]
    9b94:	42ab      	cmp	r3, r5
    9b96:	d8e9      	bhi.n	9b6c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    9b98:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    9b9a:	b003      	add	sp, #12
    9b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    9ba0:	f1a1 0a01 	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    9ba4:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    9ba6:	faba fa8a 	clz	sl, sl
    9baa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    9bae:	e7cd      	b.n	9b4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9bb0:	2c01      	cmp	r4, #1
    9bb2:	d9f1      	bls.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9bb4:	68f3      	ldr	r3, [r6, #12]
    9bb6:	3301      	adds	r3, #1
    9bb8:	429c      	cmp	r4, r3
    9bba:	d8ed      	bhi.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9bbc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9bc0:	4621      	mov	r1, r4
    9bc2:	4630      	mov	r0, r6
    9bc4:	f7ff fef2 	bl	99ac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    9bc8:	2800      	cmp	r0, #0
    9bca:	d0e5      	beq.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    9bcc:	42a7      	cmp	r7, r4
    9bce:	d214      	bcs.n	9bfa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    9bd0:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9bd2:	2c01      	cmp	r4, #1
    9bd4:	d9e0      	bls.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9bd6:	68f3      	ldr	r3, [r6, #12]
    9bd8:	3301      	adds	r3, #1
    9bda:	429c      	cmp	r4, r3
    9bdc:	d8dc      	bhi.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9bde:	1c62      	adds	r2, r4, #1
    9be0:	4621      	mov	r1, r4
    9be2:	4630      	mov	r0, r6
    9be4:	f7ff fee2 	bl	99ac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    9be8:	2800      	cmp	r0, #0
    9bea:	d0d5      	beq.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    9bec:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    9bee:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    9bf2:	d002      	beq.n	9bfa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9bf4:	2c01      	cmp	r4, #1
    9bf6:	d1ee      	bne.n	9bd6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    9bf8:	e7ce      	b.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    9bfa:	f8d9 1000 	ldr.w	r1, [r9]
    9bfe:	b159      	cbz	r1, 9c18 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9c00:	2901      	cmp	r1, #1
    9c02:	d9c9      	bls.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9c04:	68f3      	ldr	r3, [r6, #12]
    9c06:	3301      	adds	r3, #1
    9c08:	4299      	cmp	r1, r3
    9c0a:	d8c5      	bhi.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9c0c:	463a      	mov	r2, r7
    9c0e:	4630      	mov	r0, r6
    9c10:	f7ff fecc 	bl	99ac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    9c14:	2800      	cmp	r0, #0
    9c16:	d0bf      	beq.n	9b98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    9c18:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    9c1c:	f1ba 0f00 	cmp.w	sl, #0
    9c20:	d003      	beq.n	9c2a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    9c22:	3701      	adds	r7, #1

  return true;
    9c24:	2001      	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    9c26:	6037      	str	r7, [r6, #0]
    9c28:	e7b7      	b.n	9b9a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    9c2a:	2001      	movs	r0, #1
    9c2c:	e7b5      	b.n	9b9a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    9c2e:	bf00      	nop

00009c30 <SdVolume::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9c30:	2901      	cmp	r1, #1
    9c32:	d90c      	bls.n	9c4e <SdVolume::fatPut(unsigned long, unsigned long)+0x1e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9c34:	68c3      	ldr	r3, [r0, #12]
    9c36:	3301      	adds	r3, #1
    9c38:	4299      	cmp	r1, r3
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    9c3a:	b410      	push	{r4}
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9c3c:	d803      	bhi.n	9c46 <SdVolume::fatPut(unsigned long, unsigned long)+0x16>
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    9c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c42:	f7ff beb3 	b.w	99ac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    9c46:	2000      	movs	r0, #0
    9c48:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c4c:	4770      	bx	lr
    9c4e:	2000      	movs	r0, #0
    9c50:	4770      	bx	lr
    9c52:	bf00      	nop

00009c54 <SdVolume::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;
    9c54:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    9c56:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c58:	4605      	mov	r5, r0
    9c5a:	b083      	sub	sp, #12
    9c5c:	460c      	mov	r4, r1
    9c5e:	f64f 77f8 	movw	r7, #65528	; 0xfff8
    9c62:	4e13      	ldr	r6, [pc, #76]	; (9cb0 <SdVolume::freeChain(unsigned long)+0x5c>)
  // clear free cluster location
  allocSearchStart_ = 2;
    9c64:	6003      	str	r3, [r0, #0]
    9c66:	e00b      	b.n	9c80 <SdVolume::freeChain(unsigned long)+0x2c>
    9c68:	f7ff fea0 	bl	99ac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    9c6c:	b1d0      	cbz	r0, 9ca4 <SdVolume::freeChain(unsigned long)+0x50>
    9c6e:	f895 3020 	ldrb.w	r3, [r5, #32]

    cluster = next;
    9c72:	9c01      	ldr	r4, [sp, #4]
    9c74:	2b10      	cmp	r3, #16
    9c76:	bf0c      	ite	eq
    9c78:	463b      	moveq	r3, r7
    9c7a:	4633      	movne	r3, r6
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    9c7c:	429c      	cmp	r4, r3
    9c7e:	d214      	bcs.n	9caa <SdVolume::freeChain(unsigned long)+0x56>
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    9c80:	4621      	mov	r1, r4
    9c82:	aa01      	add	r2, sp, #4
    9c84:	4628      	mov	r0, r5
    9c86:	f7ff feef 	bl	9a68 <SdVolume::fatGet(unsigned long, unsigned long*) const>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9c8a:	2c01      	cmp	r4, #1
    9c8c:	fab0 f380 	clz	r3, r0
    9c90:	4621      	mov	r1, r4
    9c92:	4628      	mov	r0, r5
    9c94:	d906      	bls.n	9ca4 <SdVolume::freeChain(unsigned long)+0x50>
    9c96:	095b      	lsrs	r3, r3, #5
    9c98:	461a      	mov	r2, r3
    9c9a:	b91b      	cbnz	r3, 9ca4 <SdVolume::freeChain(unsigned long)+0x50>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9c9c:	68eb      	ldr	r3, [r5, #12]
    9c9e:	3301      	adds	r3, #1
    9ca0:	429c      	cmp	r4, r3
    9ca2:	d9e1      	bls.n	9c68 <SdVolume::freeChain(unsigned long)+0x14>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    9ca4:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    9ca6:	b003      	add	sp, #12
    9ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    9caa:	2001      	movs	r0, #1
}
    9cac:	b003      	add	sp, #12
    9cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cb0:	0ffffff8 	.word	0x0ffffff8

00009cb4 <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    9cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    9cb6:	4b40      	ldr	r3, [pc, #256]	; (9db8 <SdVolume::init(Sd2Card*, unsigned char)+0x104>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    9cb8:	4605      	mov	r5, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9cba:	4614      	mov	r4, r2
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    9cbc:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9cbe:	b1da      	cbz	r2, 9cf8 <SdVolume::init(Sd2Card*, unsigned char)+0x44>
    if (part > 4)return false;
    9cc0:	2a04      	cmp	r2, #4
    9cc2:	d901      	bls.n	9cc8 <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    9cc4:	2000      	movs	r0, #0
    9cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    9cc8:	2100      	movs	r1, #0
    9cca:	4608      	mov	r0, r1
    9ccc:	f7ff fe40 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9cd0:	2800      	cmp	r0, #0
    9cd2:	d0f7      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    9cd4:	4b39      	ldr	r3, [pc, #228]	; (9dbc <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
    9cd6:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    9cda:	f892 21ae 	ldrb.w	r2, [r2, #430]	; 0x1ae
    9cde:	0652      	lsls	r2, r2, #25
    9ce0:	d1f0      	bne.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
    9ce2:	341b      	adds	r4, #27
    9ce4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    9ce8:	f8d4 300a 	ldr.w	r3, [r4, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    9cec:	2b63      	cmp	r3, #99	; 0x63
    9cee:	d9e9      	bls.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    9cf0:	f8d4 4006 	ldr.w	r4, [r4, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    9cf4:	2c00      	cmp	r4, #0
    9cf6:	d0e5      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    9cf8:	2100      	movs	r1, #0
    9cfa:	4620      	mov	r0, r4
    9cfc:	f7ff fe28 	bl	9950 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9d00:	2800      	cmp	r0, #0
    9d02:	d0df      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    9d04:	4a2d      	ldr	r2, [pc, #180]	; (9dbc <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
    9d06:	f8b2 300b 	ldrh.w	r3, [r2, #11]
    9d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9d0e:	d1d9      	bne.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    9d10:	7c13      	ldrb	r3, [r2, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    9d12:	2b00      	cmp	r3, #0
    9d14:	d0d6      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    9d16:	89d1      	ldrh	r1, [r2, #14]
    9d18:	2900      	cmp	r1, #0
    9d1a:	d0d3      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    9d1c:	7b56      	ldrb	r6, [r2, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    9d1e:	2e00      	cmp	r6, #0
    9d20:	d0d0      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    9d22:	2100      	movs	r1, #0
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    9d24:	762b      	strb	r3, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9d26:	2701      	movs	r7, #1
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;
    9d28:	712e      	strb	r6, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    9d2a:	460b      	mov	r3, r1
    9d2c:	7429      	strb	r1, [r5, #16]
    9d2e:	e003      	b.n	9d38 <SdVolume::init(Sd2Card*, unsigned char)+0x84>
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9d30:	2909      	cmp	r1, #9
    9d32:	460b      	mov	r3, r1
    9d34:	7429      	strb	r1, [r5, #16]
    9d36:	d0c5      	beq.n	9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9d38:	fa07 f003 	lsl.w	r0, r7, r3
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9d3c:	1c59      	adds	r1, r3, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9d3e:	42b0      	cmp	r0, r6
    9d40:	d1f6      	bne.n	9d30 <SdVolume::init(Sd2Card*, unsigned char)+0x7c>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    9d42:	8ad1      	ldrh	r1, [r2, #22]
    9d44:	481d      	ldr	r0, [pc, #116]	; (9dbc <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    9d46:	b901      	cbnz	r1, 9d4a <SdVolume::init(Sd2Card*, unsigned char)+0x96>
    9d48:	6a41      	ldr	r1, [r0, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    9d4a:	89d0      	ldrh	r0, [r2, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    9d4c:	60a9      	str	r1, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    9d4e:	4420      	add	r0, r4

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    9d50:	7c16      	ldrb	r6, [r2, #16]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    9d52:	f8df e068 	ldr.w	lr, [pc, #104]	; 9dbc <SdVolume::init(Sd2Card*, unsigned char)+0x108>
    9d56:	61e8      	str	r0, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    9d58:	f8b2 7011 	ldrh.w	r7, [r2, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    9d5c:	fb01 0106 	mla	r1, r1, r6, r0

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    9d60:	0178      	lsls	r0, r7, #5
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    9d62:	846f      	strh	r7, [r5, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    9d64:	6269      	str	r1, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    9d66:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    9d6a:	eb01 2060 	add.w	r0, r1, r0, asr #9
    9d6e:	6168      	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    9d70:	f8b2 1013 	ldrh.w	r1, [r2, #19]
                           bpb->totalSectors16 : bpb->totalSectors32;
    9d74:	b909      	cbnz	r1, 9d7a <SdVolume::init(Sd2Card*, unsigned char)+0xc6>
    9d76:	f8de 1020 	ldr.w	r1, [lr, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    9d7a:	1a24      	subs	r4, r4, r0

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    9d7c:	f640 70f4 	movw	r0, #4084	; 0xff4
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    9d80:	440c      	add	r4, r1
    9d82:	fa24 f303 	lsr.w	r3, r4, r3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    9d86:	4283      	cmp	r3, r0
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    9d88:	60eb      	str	r3, [r5, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    9d8a:	d90a      	bls.n	9da2 <SdVolume::init(Sd2Card*, unsigned char)+0xee>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    9d8c:	f64f 71f4 	movw	r1, #65524	; 0xfff4
    9d90:	428b      	cmp	r3, r1
    9d92:	d90b      	bls.n	9dac <SdVolume::init(Sd2Card*, unsigned char)+0xf8>
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    9d94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    fatType_ = 32;
    9d96:	2320      	movs	r3, #32
  }
  return true;
    9d98:	2001      	movs	r0, #1
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    9d9a:	626a      	str	r2, [r5, #36]	; 0x24
    fatType_ = 32;
    9d9c:	f885 3020 	strb.w	r3, [r5, #32]
  }
  return true;
}
    9da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    9da2:	230c      	movs	r3, #12
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    9da4:	2001      	movs	r0, #1
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    9da6:	f885 3020 	strb.w	r3, [r5, #32]
    9daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    9dac:	2310      	movs	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    9dae:	2001      	movs	r0, #1

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    9db0:	f885 3020 	strb.w	r3, [r5, #32]
    9db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9db6:	bf00      	nop
    9db8:	20002b48 	.word	0x20002b48
    9dbc:	20002b4c 	.word	0x20002b4c

00009dc0 <LiquidCrystalFast::send(unsigned char, unsigned char)>:
/****************************************/
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
    9dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;
    9dc4:	7a83      	ldrb	r3, [r0, #10]
/****************************************/
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
    9dc6:	4605      	mov	r5, r0
    9dc8:	460f      	mov	r7, r1
    9dca:	4690      	mov	r8, r2
	uint8_t en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;
    9dcc:	2bff      	cmp	r3, #255	; 0xff
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
	uint8_t en = _enable_pin;
    9dce:	7a44      	ldrb	r4, [r0, #9]
	if ((_en2 != 255) && (_chip)) en = _en2;
    9dd0:	d003      	beq.n	9dda <LiquidCrystalFast::send(unsigned char, unsigned char)+0x1a>
    9dd2:	7ac2      	ldrb	r2, [r0, #11]
    9dd4:	2a00      	cmp	r2, #0
    9dd6:	bf18      	it	ne
    9dd8:	461c      	movne	r4, r3
	if (_rw_pin == 255) {
    9dda:	7a2b      	ldrb	r3, [r5, #8]
    9ddc:	2bff      	cmp	r3, #255	; 0xff
    9dde:	d07f      	beq.n	9ee0 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x120>
		delayMicroseconds(DELAYPERCHAR);
	} else {
		pinMode(_data_pins[0], INPUT);
    9de0:	2100      	movs	r1, #0
    9de2:	7ca8      	ldrb	r0, [r5, #18]
    9de4:	f000 fdda 	bl	a99c <pinMode>
		pinMode(_data_pins[1], INPUT);
    9de8:	2100      	movs	r1, #0
    9dea:	7ce8      	ldrb	r0, [r5, #19]
    9dec:	f000 fdd6 	bl	a99c <pinMode>
		pinMode(_data_pins[2], INPUT);
    9df0:	2100      	movs	r1, #0
    9df2:	7d28      	ldrb	r0, [r5, #20]
    9df4:	f000 fdd2 	bl	a99c <pinMode>
		pinMode(_data_pins[3], INPUT);
    9df8:	2100      	movs	r1, #0
    9dfa:	7d68      	ldrb	r0, [r5, #21]
    9dfc:	f000 fdce 	bl	a99c <pinMode>
		digitalWrite(_rw_pin, HIGH);
    9e00:	2101      	movs	r1, #1
    9e02:	7a28      	ldrb	r0, [r5, #8]
    9e04:	f000 fdbe 	bl	a984 <digitalWrite>
		digitalWrite(_rs_pin, LOW);
    9e08:	2100      	movs	r1, #0
    9e0a:	79e8      	ldrb	r0, [r5, #7]
    9e0c:	f000 fdba 	bl	a984 <digitalWrite>
		uint8_t busy;
		do {
			digitalWrite(en, HIGH);
    9e10:	2101      	movs	r1, #1
    9e12:	4620      	mov	r0, r4
    9e14:	f000 fdb6 	bl	a984 <digitalWrite>
			busy = digitalRead(_data_pins[3]);
    9e18:	7d68      	ldrb	r0, [r5, #21]
    9e1a:	f000 fdb9 	bl	a990 <digitalRead>
			digitalWrite(en, LOW);
    9e1e:	2100      	movs	r1, #0
		digitalWrite(_rw_pin, HIGH);
		digitalWrite(_rs_pin, LOW);
		uint8_t busy;
		do {
			digitalWrite(en, HIGH);
			busy = digitalRead(_data_pins[3]);
    9e20:	4606      	mov	r6, r0
			digitalWrite(en, LOW);
    9e22:	4620      	mov	r0, r4
    9e24:	f000 fdae 	bl	a984 <digitalWrite>
			digitalWrite(en, HIGH);
    9e28:	2101      	movs	r1, #1
    9e2a:	4620      	mov	r0, r4
    9e2c:	f000 fdaa 	bl	a984 <digitalWrite>
			digitalWrite(en, LOW);
    9e30:	2100      	movs	r1, #0
    9e32:	4620      	mov	r0, r4
    9e34:	f000 fda6 	bl	a984 <digitalWrite>
		} while (busy == HIGH);
    9e38:	2e01      	cmp	r6, #1
    9e3a:	d0e9      	beq.n	9e10 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x50>
		pinMode(_data_pins[0], OUTPUT);
    9e3c:	2101      	movs	r1, #1
    9e3e:	7ca8      	ldrb	r0, [r5, #18]
    9e40:	f000 fdac 	bl	a99c <pinMode>
		pinMode(_data_pins[1], OUTPUT);
    9e44:	2101      	movs	r1, #1
    9e46:	7ce8      	ldrb	r0, [r5, #19]
    9e48:	f000 fda8 	bl	a99c <pinMode>
		pinMode(_data_pins[2], OUTPUT);
    9e4c:	2101      	movs	r1, #1
    9e4e:	7d28      	ldrb	r0, [r5, #20]
    9e50:	f000 fda4 	bl	a99c <pinMode>
		pinMode(_data_pins[3], OUTPUT);
    9e54:	2101      	movs	r1, #1
    9e56:	7d68      	ldrb	r0, [r5, #21]
    9e58:	f000 fda0 	bl	a99c <pinMode>
		digitalWrite(_rw_pin, LOW);
    9e5c:	2100      	movs	r1, #0
    9e5e:	7a28      	ldrb	r0, [r5, #8]
    9e60:	f000 fd90 	bl	a984 <digitalWrite>
	}
	digitalWrite(_rs_pin, mode);
    9e64:	4641      	mov	r1, r8
    9e66:	79e8      	ldrb	r0, [r5, #7]
    9e68:	f000 fd8c 	bl	a984 <digitalWrite>

	digitalWrite(_data_pins[0], value & 0x10);
    9e6c:	f007 0110 	and.w	r1, r7, #16
    9e70:	7ca8      	ldrb	r0, [r5, #18]
    9e72:	f000 fd87 	bl	a984 <digitalWrite>
	digitalWrite(_data_pins[1], value & 0x20);
    9e76:	f007 0120 	and.w	r1, r7, #32
    9e7a:	7ce8      	ldrb	r0, [r5, #19]
    9e7c:	f000 fd82 	bl	a984 <digitalWrite>
	digitalWrite(_data_pins[2], value & 0x40);
    9e80:	f007 0140 	and.w	r1, r7, #64	; 0x40
    9e84:	7d28      	ldrb	r0, [r5, #20]
    9e86:	f000 fd7d 	bl	a984 <digitalWrite>
	digitalWrite(_data_pins[3], value & 0x80);
    9e8a:	f007 0180 	and.w	r1, r7, #128	; 0x80
    9e8e:	7d68      	ldrb	r0, [r5, #21]
    9e90:	f000 fd78 	bl	a984 <digitalWrite>
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    9e94:	4620      	mov	r0, r4
    9e96:	2101      	movs	r1, #1
    9e98:	f000 fd74 	bl	a984 <digitalWrite>
	digitalWrite(en, LOW);
    9e9c:	4620      	mov	r0, r4
    9e9e:	2100      	movs	r1, #0
    9ea0:	f000 fd70 	bl	a984 <digitalWrite>

	digitalWrite(_data_pins[0], value & 0x01);
    9ea4:	f007 0101 	and.w	r1, r7, #1
    9ea8:	7ca8      	ldrb	r0, [r5, #18]
    9eaa:	f000 fd6b 	bl	a984 <digitalWrite>
	digitalWrite(_data_pins[1], value & 0x02);
    9eae:	f007 0102 	and.w	r1, r7, #2
    9eb2:	7ce8      	ldrb	r0, [r5, #19]
    9eb4:	f000 fd66 	bl	a984 <digitalWrite>
	digitalWrite(_data_pins[2], value & 0x04);
    9eb8:	f007 0104 	and.w	r1, r7, #4
    9ebc:	7d28      	ldrb	r0, [r5, #20]
    9ebe:	f000 fd61 	bl	a984 <digitalWrite>
	digitalWrite(_data_pins[3], value & 0x08);
    9ec2:	f007 0108 	and.w	r1, r7, #8
    9ec6:	7d68      	ldrb	r0, [r5, #21]
    9ec8:	f000 fd5c 	bl	a984 <digitalWrite>
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    9ecc:	4620      	mov	r0, r4
    9ece:	2101      	movs	r1, #1
    9ed0:	f000 fd58 	bl	a984 <digitalWrite>
	digitalWrite(en, LOW);
    9ed4:	4620      	mov	r0, r4
    9ed6:	2100      	movs	r1, #0
}
    9ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	digitalWrite(_data_pins[0], value & 0x01);
	digitalWrite(_data_pins[1], value & 0x02);
	digitalWrite(_data_pins[2], value & 0x04);
	digitalWrite(_data_pins[3], value & 0x08);
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
	digitalWrite(en, LOW);
    9edc:	f000 bd52 	b.w	a984 <digitalWrite>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9ee0:	4907      	ldr	r1, [pc, #28]	; (9f00 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9ee2:	4b08      	ldr	r3, [pc, #32]	; (9f04 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x144>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9ee4:	6808      	ldr	r0, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9ee6:	4a08      	ldr	r2, [pc, #32]	; (9f08 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x148>)
    9ee8:	681b      	ldr	r3, [r3, #0]
    9eea:	fba2 3203 	umull	r3, r2, r2, r3
    9eee:	0c92      	lsrs	r2, r2, #18
    9ef0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9ef4:	0192      	lsls	r2, r2, #6
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    9ef6:	680b      	ldr	r3, [r1, #0]
    9ef8:	1a1b      	subs	r3, r3, r0
    9efa:	429a      	cmp	r2, r3
    9efc:	d8fb      	bhi.n	9ef6 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x136>
    9efe:	e7b1      	b.n	9e64 <LiquidCrystalFast::send(unsigned char, unsigned char)+0xa4>
    9f00:	e0001004 	.word	0xe0001004
    9f04:	20001fa8 	.word	0x20001fa8
    9f08:	431bde83 	.word	0x431bde83

00009f0c <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>:
		_chip = chipSave;
	}
}

void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
    9f0c:	b570      	push	{r4, r5, r6, lr}
	if ( row > _numlines ) {
    9f0e:	7dc3      	ldrb	r3, [r0, #23]
		_chip = chipSave;
	}
}

void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
    9f10:	4604      	mov	r4, r0
	if ( row > _numlines ) {
    9f12:	4293      	cmp	r3, r2
    9f14:	d201      	bcs.n	9f1a <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0xe>
		row = _numlines-1;    // we count rows starting w/0
    9f16:	1e5a      	subs	r2, r3, #1
    9f18:	b2d2      	uxtb	r2, r2
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
    9f1a:	2000      	movs	r0, #0
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9f1c:	18a3      	adds	r3, r4, r2
void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
    9f1e:	73a2      	strb	r2, [r4, #14]
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
    9f20:	73e0      	strb	r0, [r4, #15]
{
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
    9f22:	7361      	strb	r1, [r4, #13]
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9f24:	7b20      	ldrb	r0, [r4, #12]
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9f26:	7e1b      	ldrb	r3, [r3, #24]
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9f28:	4408      	add	r0, r1
    9f2a:	f003 053f 	and.w	r5, r3, #63	; 0x3f
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9f32:	4428      	add	r0, r5
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9f34:	b25b      	sxtb	r3, r3
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9f36:	b2c0      	uxtb	r0, r0
    9f38:	b245      	sxtb	r5, r0
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
    9f3a:	2d27      	cmp	r5, #39	; 0x27
    9f3c:	dd1c      	ble.n	9f78 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x6c>
    9f3e:	3828      	subs	r0, #40	; 0x28
    9f40:	b245      	sxtb	r5, r0
    9f42:	f002 0202 	and.w	r2, r2, #2
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
    9f46:	7ae1      	ldrb	r1, [r4, #11]
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
	offset |= high_bit;
    9f48:	431d      	orrs	r5, r3
    9f4a:	b2d6      	uxtb	r6, r2
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
    9f4c:	42b1      	cmp	r1, r6
    9f4e:	d009      	beq.n	9f64 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x58>
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);   //both chips
}

// Turns the underline cursor on/off
void LiquidCrystalFast::noCursor() {
	_displaycontrol &= ~LCD_CURSORON;
    9f50:	7f21      	ldrb	r1, [r4, #28]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f52:	2200      	movs	r2, #0
    9f54:	4620      	mov	r0, r4
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);   //both chips
}

// Turns the underline cursor on/off
void LiquidCrystalFast::noCursor() {
	_displaycontrol &= ~LCD_CURSORON;
    9f56:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    9f5a:	7721      	strb	r1, [r4, #28]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f5c:	f041 0108 	orr.w	r1, r1, #8
    9f60:	f7ff ff2e 	bl	9dc0 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    9f64:	f065 017f 	orn	r1, r5, #127	; 0x7f
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
	_chip = row & 0b10;                     //if it is row 0 or 1 this is 0; if it is row 2 or 3 this is 2
    9f68:	72e6      	strb	r6, [r4, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f6a:	4620      	mov	r0, r4
    9f6c:	2200      	movs	r2, #0
    9f6e:	b2c9      	uxtb	r1, r1
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
	_chip = row & 0b10;                     //if it is row 0 or 1 this is 0; if it is row 2 or 3 this is 2
	command(LCD_SETDDRAMADDR | (byte) offset );
}
    9f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f74:	f7ff bf24 	b.w	9dc0 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
    9f78:	2d00      	cmp	r5, #0
    9f7a:	dae2      	bge.n	9f42 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x36>
    9f7c:	3028      	adds	r0, #40	; 0x28
    9f7e:	b245      	sxtb	r5, r0
    9f80:	e7df      	b.n	9f42 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x36>
    9f82:	bf00      	nop

00009f84 <LiquidCrystalFast::clear()>:
/******************************************/
/**  high level commands, for the user!   */
/******************************************/

void LiquidCrystalFast::clear()
{
    9f84:	b538      	push	{r3, r4, r5, lr}
	if (_en2 != 255) {
    9f86:	7a83      	ldrb	r3, [r0, #10]
/******************************************/
/**  high level commands, for the user!   */
/******************************************/

void LiquidCrystalFast::clear()
{
    9f88:	4604      	mov	r4, r0
	if (_en2 != 255) {
    9f8a:	2bff      	cmp	r3, #255	; 0xff
    9f8c:	d016      	beq.n	9fbc <LiquidCrystalFast::clear()+0x38>
		_chip=2;
    9f8e:	2302      	movs	r3, #2
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f90:	2200      	movs	r2, #0
    9f92:	2101      	movs	r1, #1
/******************************************/

void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
    9f94:	72c3      	strb	r3, [r0, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f96:	f7ff ff13 	bl	9dc0 <LiquidCrystalFast::send(unsigned char, unsigned char)>
void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
    9f9a:	2200      	movs	r2, #0
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9f9c:	2101      	movs	r1, #1
    9f9e:	4620      	mov	r0, r4
void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
    9fa0:	72e2      	strb	r2, [r4, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9fa2:	f7ff ff0d 	bl	9dc0 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	void init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
		uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3);
	void send(uint8_t, uint8_t);
	void write4bits(uint8_t);
	void begin2(uint8_t cols, uint8_t rows, uint8_t charsize, uint8_t chip);
	inline void delayPerHome(void) { if (_rw_pin == 255) delayMicroseconds(2900);}
    9fa6:	7a23      	ldrb	r3, [r4, #8]
    9fa8:	2bff      	cmp	r3, #255	; 0xff
    9faa:	d01f      	beq.n	9fec <LiquidCrystalFast::clear()+0x68>
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
		command(LCD_CLEARDISPLAY);
		delayPerHome();
		setCursor(0,0);
    9fac:	2200      	movs	r2, #0
    9fae:	4620      	mov	r0, r4
    9fb0:	4611      	mov	r1, r2
    9fb2:	f7ff ffab 	bl	9f0c <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	} else {
		command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
		delayPerHome();
	}
	_scroll_count = 0;
    9fb6:	2300      	movs	r3, #0
    9fb8:	7323      	strb	r3, [r4, #12]
    9fba:	bd38      	pop	{r3, r4, r5, pc}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9fbc:	2200      	movs	r2, #0
    9fbe:	2101      	movs	r1, #1
    9fc0:	f7ff fefe 	bl	9dc0 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    9fc4:	7a23      	ldrb	r3, [r4, #8]
    9fc6:	2bff      	cmp	r3, #255	; 0xff
    9fc8:	d1f5      	bne.n	9fb6 <LiquidCrystalFast::clear()+0x32>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9fca:	4a11      	ldr	r2, [pc, #68]	; (a010 <LiquidCrystalFast::clear()+0x8c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9fcc:	f640 3354 	movw	r3, #2900	; 0xb54
    9fd0:	4910      	ldr	r1, [pc, #64]	; (a014 <LiquidCrystalFast::clear()+0x90>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9fd2:	6810      	ldr	r0, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9fd4:	4d10      	ldr	r5, [pc, #64]	; (a018 <LiquidCrystalFast::clear()+0x94>)
    9fd6:	6809      	ldr	r1, [r1, #0]
    9fd8:	fba5 5101 	umull	r5, r1, r5, r1
    9fdc:	0c89      	lsrs	r1, r1, #18
    9fde:	fb03 f101 	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    9fe2:	6813      	ldr	r3, [r2, #0]
    9fe4:	1a1b      	subs	r3, r3, r0
    9fe6:	4299      	cmp	r1, r3
    9fe8:	d8fb      	bhi.n	9fe2 <LiquidCrystalFast::clear()+0x5e>
    9fea:	e7e4      	b.n	9fb6 <LiquidCrystalFast::clear()+0x32>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9fec:	4a08      	ldr	r2, [pc, #32]	; (a010 <LiquidCrystalFast::clear()+0x8c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9fee:	f640 3354 	movw	r3, #2900	; 0xb54
    9ff2:	4908      	ldr	r1, [pc, #32]	; (a014 <LiquidCrystalFast::clear()+0x90>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9ff4:	6810      	ldr	r0, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9ff6:	4d08      	ldr	r5, [pc, #32]	; (a018 <LiquidCrystalFast::clear()+0x94>)
    9ff8:	6809      	ldr	r1, [r1, #0]
    9ffa:	fba5 5101 	umull	r5, r1, r5, r1
    9ffe:	0c89      	lsrs	r1, r1, #18
    a000:	fb03 f101 	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    a004:	6813      	ldr	r3, [r2, #0]
    a006:	1a1b      	subs	r3, r3, r0
    a008:	4299      	cmp	r1, r3
    a00a:	d8fb      	bhi.n	a004 <LiquidCrystalFast::clear()+0x80>
    a00c:	e7ce      	b.n	9fac <LiquidCrystalFast::clear()+0x28>
    a00e:	bf00      	nop
    a010:	e0001004 	.word	0xe0001004
    a014:	20001fa8 	.word	0x20001fa8
    a018:	431bde83 	.word	0x431bde83

0000a01c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    a01c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a01e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a020:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a022:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a024:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    a026:	d003      	beq.n	a030 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    a028:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a02c:	f001 bfa0 	b.w	bf70 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a030:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    a032:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a036:	4718      	bx	r3

0000a038 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    a038:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    a03a:	f240 2501 	movw	r5, #513	; 0x201
    a03e:	6804      	ldr	r4, [r0, #0]
    a040:	6125      	str	r5, [r4, #16]

	while (count > 0) {
    a042:	b31b      	cbz	r3, a08c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    a044:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    a046:	b1f1      	cbz	r1, a086 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    a048:	780d      	ldrb	r5, [r1, #0]
    a04a:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
    a04c:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    a04e:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    a050:	6f25      	ldr	r5, [r4, #112]	; 0x70
    a052:	07ad      	lsls	r5, r5, #30
    a054:	d406      	bmi.n	a064 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    a056:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    a058:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    a05a:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    a05c:	b112      	cbz	r2, a064 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    a05e:	7015      	strb	r5, [r2, #0]
    a060:	3201      	adds	r2, #1
    a062:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    a064:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    a066:	07ed      	lsls	r5, r5, #31
    a068:	d5f2      	bpl.n	a050 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    a06a:	2b00      	cmp	r3, #0
    a06c:	d1eb      	bne.n	a046 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    a06e:	b16e      	cbz	r6, a08c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a070:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    a072:	6f0b      	ldr	r3, [r1, #112]	; 0x70
    a074:	079b      	lsls	r3, r3, #30
    a076:	d4fc      	bmi.n	a072 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    a078:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    a07a:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    a07c:	b10a      	cbz	r2, a082 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    a07e:	7013      	strb	r3, [r2, #0]
    a080:	3201      	adds	r2, #1
			count_read--;
    a082:	3e01      	subs	r6, #1
    a084:	e7f3      	b.n	a06e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    a086:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    a08a:	e7df      	b.n	a04c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    a08c:	bc70      	pop	{r4, r5, r6}
    a08e:	4770      	bx	lr

0000a090 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    a090:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    a092:	4c30      	ldr	r4, [pc, #192]	; (a154 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    a094:	4b30      	ldr	r3, [pc, #192]	; (a158 <_spi_dma_rxISR0()+0xc8>)
    a096:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    a098:	6c65      	ldr	r5, [r4, #68]	; 0x44
    a09a:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    a09c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    a09e:	77d9      	strb	r1, [r3, #31]
    a0a0:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    a0a2:	7719      	strb	r1, [r3, #28]
    a0a4:	7901      	ldrb	r1, [r0, #4]
    a0a6:	7719      	strb	r1, [r3, #28]
    a0a8:	b1fa      	cbz	r2, a0ea <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    a0aa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    a0ae:	d218      	bcs.n	a0e2 <_spi_dma_rxISR0()+0x52>
    a0b0:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    a0b2:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    a0b4:	8bd9      	ldrh	r1, [r3, #30]
    a0b6:	040e      	lsls	r6, r1, #16
    a0b8:	d43b      	bmi.n	a132 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    a0ba:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    a0bc:	8bd9      	ldrh	r1, [r3, #30]
    a0be:	b289      	uxth	r1, r1
    a0c0:	82d9      	strh	r1, [r3, #22]
    a0c2:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    a0c4:	8bd9      	ldrh	r1, [r3, #30]
    a0c6:	0409      	lsls	r1, r1, #16
    a0c8:	d42c      	bmi.n	a124 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    a0ca:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    a0cc:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    a0ce:	8bda      	ldrh	r2, [r3, #30]
    a0d0:	b292      	uxth	r2, r2
    a0d2:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    a0d4:	6421      	str	r1, [r4, #64]	; 0x40
    a0d6:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    a0d8:	4b1f      	ldr	r3, [pc, #124]	; (a158 <_spi_dma_rxISR0()+0xc8>)
    a0da:	76da      	strb	r2, [r3, #27]
    a0dc:	792a      	ldrb	r2, [r5, #4]
    a0de:	76da      	strb	r2, [r3, #27]
    a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    a0e2:	4b1e      	ldr	r3, [pc, #120]	; (a15c <_spi_dma_rxISR0()+0xcc>)
    a0e4:	4413      	add	r3, r2
    a0e6:	6423      	str	r3, [r4, #64]	; 0x40
    a0e8:	e7f5      	b.n	a0d6 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    a0ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    a0ec:	250f      	movs	r5, #15
    a0ee:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    a0f0:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    a0f4:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    a0f6:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    a0fa:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    a0fc:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
    a0fe:	680d      	ldr	r5, [r1, #0]
    a100:	4917      	ldr	r1, [pc, #92]	; (a160 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    a102:	61da      	str	r2, [r3, #28]
    a104:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    a106:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    a10a:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    a10c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    a110:	d117      	bne.n	a142 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a112:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a114:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a116:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a118:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    a11a:	d017      	beq.n	a14c <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    a11c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a120:	f001 bf26 	b.w	bf70 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    a124:	8bd9      	ldrh	r1, [r3, #30]
    a126:	f3c2 0208 	ubfx	r2, r2, #0, #9
    a12a:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    a12e:	430a      	orrs	r2, r1
    a130:	e7cb      	b.n	a0ca <_spi_dma_rxISR0()+0x3a>
    a132:	8bd9      	ldrh	r1, [r3, #30]
    a134:	f3c2 0608 	ubfx	r6, r2, #0, #9
    a138:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    a13c:	4331      	orrs	r1, r6
    a13e:	83d9      	strh	r1, [r3, #30]
    a140:	e7bc      	b.n	a0bc <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    a142:	462b      	mov	r3, r5
    a144:	4611      	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    a146:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    a14a:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a14c:	6883      	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    a14e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a152:	4718      	bx	r3
    a154:	20001f54 	.word	0x20001f54
    a158:	400e8000 	.word	0x400e8000
    a15c:	ffff8001 	.word	0xffff8001
    a160:	0000a01d 	.word	0x0000a01d

0000a164 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    a164:	6843      	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    a166:	b5f0      	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    a168:	e893 0082 	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    a16c:	f8df e1e4 	ldr.w	lr, [pc, #484]	; a354 <SPIClass::begin()+0x1f0>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    a170:	26b8      	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    a172:	680a      	ldr	r2, [r1, #0]
	hardware().sdo_select_input_register = hardware().sdo_select_val;

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    a174:	2502      	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    a176:	4c6f      	ldr	r4, [pc, #444]	; (a334 <SPIClass::begin()+0x1d0>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    a178:	ea22 0207 	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    a17c:	4f6e      	ldr	r7, [pc, #440]	; (a338 <SPIClass::begin()+0x1d4>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    a17e:	600a      	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    a180:	f8de 2018 	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    a184:	4014      	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    a186:	4a6d      	ldr	r2, [pc, #436]	; (a33c <SPIClass::begin()+0x1d8>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    a188:	4327      	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    a18a:	240f      	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    a18c:	f8ce 7018 	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    a190:	7c07      	ldrb	r7, [r0, #16]
    a192:	441f      	add	r7, r3
    a194:	7c3f      	ldrb	r7, [r7, #16]
    a196:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    a19a:	68bf      	ldr	r7, [r7, #8]
    a19c:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    a19e:	7c47      	ldrb	r7, [r0, #17]
    a1a0:	441f      	add	r7, r3
    a1a2:	7e3f      	ldrb	r7, [r7, #24]
    a1a4:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    a1a8:	68bf      	ldr	r7, [r7, #8]
    a1aa:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    a1ac:	7c87      	ldrb	r7, [r0, #18]
    a1ae:	441f      	add	r7, r3
    a1b0:	f897 7020 	ldrb.w	r7, [r7, #32]
    a1b4:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    a1b8:	68bf      	ldr	r7, [r7, #8]
    a1ba:	603e      	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    a1bc:	680f      	ldr	r7, [r1, #0]
    a1be:	685e      	ldr	r6, [r3, #4]
    a1c0:	433e      	orrs	r6, r7
    a1c2:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    a1c4:	7c01      	ldrb	r1, [r0, #16]
    a1c6:	185e      	adds	r6, r3, r1
    a1c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a1cc:	7c36      	ldrb	r6, [r6, #16]
    a1ce:	694f      	ldr	r7, [r1, #20]
    a1d0:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    a1d4:	6849      	ldr	r1, [r1, #4]
    a1d6:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    a1d8:	7c41      	ldrb	r1, [r0, #17]
    a1da:	185e      	adds	r6, r3, r1
    a1dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a1e0:	7e36      	ldrb	r6, [r6, #24]
    a1e2:	69cf      	ldr	r7, [r1, #28]
    a1e4:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    a1e8:	6849      	ldr	r1, [r1, #4]
    a1ea:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    a1ec:	7c81      	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    a1ee:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    a1f0:	185e      	adds	r6, r3, r1
    a1f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a1f6:	f896 6020 	ldrb.w	r6, [r6, #32]
    a1fa:	6a49      	ldr	r1, [r1, #36]	; 0x24
    a1fc:	eb02 1206 	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
	hardware().sdi_select_input_register = hardware().sdi_select_val;
    a200:	6b5e      	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    a202:	6852      	ldr	r2, [r2, #4]
    a204:	6011      	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    a206:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	hardware().sdi_select_input_register = hardware().sdi_select_val;
	hardware().sdo_select_input_register = hardware().sdo_select_val;
    a20a:	6b99      	ldr	r1, [r3, #56]	; 0x38
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    a20c:	603a      	str	r2, [r7, #0]
	hardware().sdi_select_input_register = hardware().sdi_select_val;
    a20e:	f893 7041 	ldrb.w	r7, [r3, #65]	; 0x41
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a212:	6802      	ldr	r2, [r0, #0]
    a214:	6037      	str	r7, [r6, #0]
	hardware().sdo_select_input_register = hardware().sdo_select_val;
    a216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    a21a:	600b      	str	r3, [r1, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    a21c:	6115      	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    a21e:	6594      	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    a220:	7cc3      	ldrb	r3, [r0, #19]
    a222:	2b00      	cmp	r3, #0
    a224:	d029      	beq.n	a27a <SPIClass::begin()+0x116>
			__disable_irq();
    a226:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a228:	7cc3      	ldrb	r3, [r0, #19]
    a22a:	07dc      	lsls	r4, r3, #31
    a22c:	d506      	bpl.n	a23c <SPIClass::begin()+0xd8>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a22e:	4a44      	ldr	r2, [pc, #272]	; (a340 <SPIClass::begin()+0x1dc>)
    a230:	6943      	ldr	r3, [r0, #20]
    a232:	6811      	ldr	r1, [r2, #0]
    a234:	400b      	ands	r3, r1
    a236:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a238:	6013      	str	r3, [r2, #0]
    a23a:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    a23c:	0799      	lsls	r1, r3, #30
    a23e:	d506      	bpl.n	a24e <SPIClass::begin()+0xea>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a240:	4a40      	ldr	r2, [pc, #256]	; (a344 <SPIClass::begin()+0x1e0>)
    a242:	6983      	ldr	r3, [r0, #24]
    a244:	6811      	ldr	r1, [r2, #0]
    a246:	400b      	ands	r3, r1
    a248:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a24a:	6013      	str	r3, [r2, #0]
    a24c:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    a24e:	075a      	lsls	r2, r3, #29
    a250:	d506      	bpl.n	a260 <SPIClass::begin()+0xfc>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a252:	4a3d      	ldr	r2, [pc, #244]	; (a348 <SPIClass::begin()+0x1e4>)
    a254:	69c3      	ldr	r3, [r0, #28]
    a256:	6811      	ldr	r1, [r2, #0]
    a258:	400b      	ands	r3, r1
    a25a:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a25c:	6013      	str	r3, [r2, #0]
    a25e:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    a260:	071f      	lsls	r7, r3, #28
    a262:	d506      	bpl.n	a272 <SPIClass::begin()+0x10e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a264:	4a39      	ldr	r2, [pc, #228]	; (a34c <SPIClass::begin()+0x1e8>)
    a266:	6a03      	ldr	r3, [r0, #32]
    a268:	6811      	ldr	r1, [r2, #0]
    a26a:	400b      	ands	r3, r1
    a26c:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a26e:	6013      	str	r3, [r2, #0]
    a270:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    a272:	06de      	lsls	r6, r3, #27
    a274:	d44c      	bmi.n	a310 <SPIClass::begin()+0x1ac>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    a276:	b662      	cpsie	i
    a278:	6802      	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    a27a:	4d35      	ldr	r5, [pc, #212]	; (a350 <SPIClass::begin()+0x1ec>)
    a27c:	6883      	ldr	r3, [r0, #8]
    a27e:	42ab      	cmp	r3, r5
    a280:	d04d      	beq.n	a31e <SPIClass::begin()+0x1ba>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    a282:	4b34      	ldr	r3, [pc, #208]	; (a354 <SPIClass::begin()+0x1f0>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    a284:	6085      	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    a286:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a288:	4c33      	ldr	r4, [pc, #204]	; (a358 <SPIClass::begin()+0x1f4>)
    a28a:	f3c3 1601 	ubfx	r6, r3, #4, #2
    a28e:	f3c3 6182 	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    a292:	4b32      	ldr	r3, [pc, #200]	; (a35c <SPIClass::begin()+0x1f8>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a294:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    a298:	3101      	adds	r1, #1
    a29a:	fbb4 f1f1 	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    a29e:	fba3 4301 	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    a2a2:	0d1b      	lsrs	r3, r3, #20
    a2a4:	d129      	bne.n	a2fa <SPIClass::begin()+0x196>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    a2a6:	60c3      	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    a2a8:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a2aa:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    a2ac:	2407      	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    a2ae:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    a2b0:	6116      	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a2b2:	6255      	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    a2b4:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    a2b6:	6614      	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a2b8:	6111      	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    a2ba:	7cc3      	ldrb	r3, [r0, #19]
    a2bc:	b1e3      	cbz	r3, a2f8 <SPIClass::begin()+0x194>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a2be:	07dd      	lsls	r5, r3, #31
    a2c0:	d503      	bpl.n	a2ca <SPIClass::begin()+0x166>
    a2c2:	4b27      	ldr	r3, [pc, #156]	; (a360 <SPIClass::begin()+0x1fc>)
    a2c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a2c6:	601a      	str	r2, [r3, #0]
    a2c8:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a2ca:	079c      	lsls	r4, r3, #30
    a2cc:	d503      	bpl.n	a2d6 <SPIClass::begin()+0x172>
    a2ce:	4b25      	ldr	r3, [pc, #148]	; (a364 <SPIClass::begin()+0x200>)
    a2d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    a2d2:	601a      	str	r2, [r3, #0]
    a2d4:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a2d6:	0759      	lsls	r1, r3, #29
    a2d8:	d503      	bpl.n	a2e2 <SPIClass::begin()+0x17e>
    a2da:	4b23      	ldr	r3, [pc, #140]	; (a368 <SPIClass::begin()+0x204>)
    a2dc:	6b02      	ldr	r2, [r0, #48]	; 0x30
    a2de:	601a      	str	r2, [r3, #0]
    a2e0:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a2e2:	071a      	lsls	r2, r3, #28
    a2e4:	d503      	bpl.n	a2ee <SPIClass::begin()+0x18a>
    a2e6:	4b21      	ldr	r3, [pc, #132]	; (a36c <SPIClass::begin()+0x208>)
    a2e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    a2ea:	601a      	str	r2, [r3, #0]
    a2ec:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a2ee:	06db      	lsls	r3, r3, #27
    a2f0:	d502      	bpl.n	a2f8 <SPIClass::begin()+0x194>
    a2f2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    a2f4:	4b1e      	ldr	r3, [pc, #120]	; (a370 <SPIClass::begin()+0x20c>)
    a2f6:	601a      	str	r2, [r3, #0]
    a2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    a2fa:	fbb1 f1f3 	udiv	r1, r1, r3
    a2fe:	42a9      	cmp	r1, r5
    a300:	bf88      	it	hi
    a302:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    a304:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    a308:	d30b      	bcc.n	a322 <SPIClass::begin()+0x1be>
    a30a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    a30e:	e7ca      	b.n	a2a6 <SPIClass::begin()+0x142>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a310:	4a18      	ldr	r2, [pc, #96]	; (a374 <SPIClass::begin()+0x210>)
    a312:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a314:	6811      	ldr	r1, [r2, #0]
    a316:	400b      	ands	r3, r1
    a318:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a31a:	6013      	str	r3, [r2, #0]
    a31c:	e7ab      	b.n	a276 <SPIClass::begin()+0x112>
    a31e:	68c3      	ldr	r3, [r0, #12]
    a320:	e7c2      	b.n	a2a8 <SPIClass::begin()+0x144>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    a322:	2b02      	cmp	r3, #2
    a324:	bf98      	it	ls
    a326:	2300      	movls	r3, #0
    a328:	d9bd      	bls.n	a2a6 <SPIClass::begin()+0x142>
    a32a:	3b02      	subs	r3, #2
    a32c:	0859      	lsrs	r1, r3, #1
    a32e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    a332:	e7b8      	b.n	a2a6 <SPIClass::begin()+0x142>
    a334:	e3ffffcf 	.word	0xe3ffffcf
    a338:	08000010 	.word	0x08000010
    a33c:	20001988 	.word	0x20001988
    a340:	e000e180 	.word	0xe000e180
    a344:	e000e184 	.word	0xe000e184
    a348:	e000e188 	.word	0xe000e188
    a34c:	e000e18c 	.word	0xe000e18c
    a350:	003d0900 	.word	0x003d0900
    a354:	400fc000 	.word	0x400fc000
    a358:	200015f4 	.word	0x200015f4
    a35c:	431bde83 	.word	0x431bde83
    a360:	e000e100 	.word	0xe000e100
    a364:	e000e104 	.word	0xe000e104
    a368:	e000e108 	.word	0xe000e108
    a36c:	e000e10c 	.word	0xe000e10c
    a370:	e000e110 	.word	0xe000e110
    a374:	e000e190 	.word	0xe000e190

0000a378 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    a378:	b10b      	cbz	r3, a37e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    a37a:	f7ff be5d 	b.w	a038 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    a37e:	4770      	bx	lr

0000a380 <Bounce::Bounce(unsigned char, unsigned long)>:

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    a380:	b538      	push	{r3, r4, r5, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    a382:	4b07      	ldr	r3, [pc, #28]	; (a3a0 <Bounce::Bounce(unsigned char, unsigned long)+0x20>)
    a384:	4604      	mov	r4, r0
    a386:	460d      	mov	r5, r1


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    a388:	2100      	movs	r1, #0
    a38a:	681b      	ldr	r3, [r3, #0]
       }


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
    a38c:	6042      	str	r2, [r0, #4]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    a38e:	4628      	mov	r0, r5


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    a390:	60a1      	str	r1, [r4, #8]


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
    a392:	6023      	str	r3, [r4, #0]
	state = digitalRead(pin);
    a394:	f000 fafc 	bl	a990 <digitalRead>
    this->pin = pin;
    a398:	7365      	strb	r5, [r4, #13]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    a39a:	7320      	strb	r0, [r4, #12]
    this->pin = pin;
}
    a39c:	4620      	mov	r0, r4
    a39e:	bd38      	pop	{r3, r4, r5, pc}
    a3a0:	20002d58 	.word	0x20002d58

0000a3a4 <Bounce::read()>:


int Bounce::read()
{
	return (int)state;
}
    a3a4:	7b00      	ldrb	r0, [r0, #12]
    a3a6:	4770      	bx	lr

0000a3a8 <Bounce::debounce()>:


// Protected: debounces the pin
int Bounce::debounce() {
    a3a8:	b538      	push	{r3, r4, r5, lr}
    a3aa:	4604      	mov	r4, r0
	
	uint8_t newState = digitalRead(pin);
    a3ac:	7b40      	ldrb	r0, [r0, #13]
    a3ae:	f000 faef 	bl	a990 <digitalRead>
	if (state != newState ) {
    a3b2:	7b23      	ldrb	r3, [r4, #12]
    a3b4:	4283      	cmp	r3, r0
    a3b6:	d00c      	beq.n	a3d2 <Bounce::debounce()+0x2a>
    a3b8:	4907      	ldr	r1, [pc, #28]	; (a3d8 <Bounce::debounce()+0x30>)
    a3ba:	4602      	mov	r2, r0
  		if (millis() - previous_millis >= interval_millis) {
    a3bc:	6825      	ldr	r5, [r4, #0]
    a3be:	680b      	ldr	r3, [r1, #0]
    a3c0:	6860      	ldr	r0, [r4, #4]
    a3c2:	1b5b      	subs	r3, r3, r5
    a3c4:	4283      	cmp	r3, r0
    a3c6:	d304      	bcc.n	a3d2 <Bounce::debounce()+0x2a>
    a3c8:	680b      	ldr	r3, [r1, #0]
  			previous_millis = millis();
  			state = newState;
  			return 1;
    a3ca:	2001      	movs	r0, #1
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
  			state = newState;
    a3cc:	7322      	strb	r2, [r4, #12]
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
    a3ce:	6023      	str	r3, [r4, #0]
  			state = newState;
  			return 1;
    a3d0:	bd38      	pop	{r3, r4, r5, pc}
	}
  }
  
  return 0;
    a3d2:	2000      	movs	r0, #0
	
}
    a3d4:	bd38      	pop	{r3, r4, r5, pc}
    a3d6:	bf00      	nop
    a3d8:	20002d58 	.word	0x20002d58

0000a3dc <Bounce::update()>:
}



int Bounce::update()
{
    a3dc:	b538      	push	{r3, r4, r5, lr}
    a3de:	4604      	mov	r4, r0
	if ( debounce() ) {
    a3e0:	f7ff ffe2 	bl	a3a8 <Bounce::debounce()>
    a3e4:	b988      	cbnz	r0, a40a <Bounce::update()+0x2e>
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    a3e6:	68a3      	ldr	r3, [r4, #8]
    a3e8:	b163      	cbz	r3, a404 <Bounce::update()+0x28>
    a3ea:	490b      	ldr	r1, [pc, #44]	; (a418 <Bounce::update()+0x3c>)
    a3ec:	6825      	ldr	r5, [r4, #0]
    a3ee:	680a      	ldr	r2, [r1, #0]
    a3f0:	1b52      	subs	r2, r2, r5
    a3f2:	4293      	cmp	r3, r2
    a3f4:	d806      	bhi.n	a404 <Bounce::update()+0x28>
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
    a3f6:	2301      	movs	r3, #1
    a3f8:	680a      	ldr	r2, [r1, #0]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    a3fa:	60a0      	str	r0, [r4, #8]
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
    a3fc:	6022      	str	r2, [r4, #0]
		 rebounce(0);
		 return stateChanged = 1;
    a3fe:	4618      	mov	r0, r3
    a400:	73a3      	strb	r3, [r4, #14]
    a402:	bd38      	pop	{r3, r4, r5, pc}
	}

	return stateChanged = 0;
    a404:	2300      	movs	r3, #0
    a406:	73a3      	strb	r3, [r4, #14]
}
    a408:	bd38      	pop	{r3, r4, r5, pc}

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    a40a:	2301      	movs	r3, #1
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    a40c:	2200      	movs	r2, #0

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    a40e:	4618      	mov	r0, r3
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    a410:	60a2      	str	r2, [r4, #8]

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    a412:	73a3      	strb	r3, [r4, #14]
    a414:	bd38      	pop	{r3, r4, r5, pc}
    a416:	bf00      	nop
    a418:	20002d58 	.word	0x20002d58

0000a41c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a41c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a41e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a422:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a426:	d16d      	bne.n	a504 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a428:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a42a:	d341      	bcc.n	a4b0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a42c:	f851 3b04 	ldr.w	r3, [r1], #4
    a430:	f840 3b04 	str.w	r3, [r0], #4
    a434:	f851 3b04 	ldr.w	r3, [r1], #4
    a438:	f840 3b04 	str.w	r3, [r0], #4
    a43c:	f851 3b04 	ldr.w	r3, [r1], #4
    a440:	f840 3b04 	str.w	r3, [r0], #4
    a444:	f851 3b04 	ldr.w	r3, [r1], #4
    a448:	f840 3b04 	str.w	r3, [r0], #4
    a44c:	f851 3b04 	ldr.w	r3, [r1], #4
    a450:	f840 3b04 	str.w	r3, [r0], #4
    a454:	f851 3b04 	ldr.w	r3, [r1], #4
    a458:	f840 3b04 	str.w	r3, [r0], #4
    a45c:	f851 3b04 	ldr.w	r3, [r1], #4
    a460:	f840 3b04 	str.w	r3, [r0], #4
    a464:	f851 3b04 	ldr.w	r3, [r1], #4
    a468:	f840 3b04 	str.w	r3, [r0], #4
    a46c:	f851 3b04 	ldr.w	r3, [r1], #4
    a470:	f840 3b04 	str.w	r3, [r0], #4
    a474:	f851 3b04 	ldr.w	r3, [r1], #4
    a478:	f840 3b04 	str.w	r3, [r0], #4
    a47c:	f851 3b04 	ldr.w	r3, [r1], #4
    a480:	f840 3b04 	str.w	r3, [r0], #4
    a484:	f851 3b04 	ldr.w	r3, [r1], #4
    a488:	f840 3b04 	str.w	r3, [r0], #4
    a48c:	f851 3b04 	ldr.w	r3, [r1], #4
    a490:	f840 3b04 	str.w	r3, [r0], #4
    a494:	f851 3b04 	ldr.w	r3, [r1], #4
    a498:	f840 3b04 	str.w	r3, [r0], #4
    a49c:	f851 3b04 	ldr.w	r3, [r1], #4
    a4a0:	f840 3b04 	str.w	r3, [r0], #4
    a4a4:	f851 3b04 	ldr.w	r3, [r1], #4
    a4a8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a4ac:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a4ae:	d2bd      	bcs.n	a42c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a4b0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a4b2:	d311      	bcc.n	a4d8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a4b4:	f851 3b04 	ldr.w	r3, [r1], #4
    a4b8:	f840 3b04 	str.w	r3, [r0], #4
    a4bc:	f851 3b04 	ldr.w	r3, [r1], #4
    a4c0:	f840 3b04 	str.w	r3, [r0], #4
    a4c4:	f851 3b04 	ldr.w	r3, [r1], #4
    a4c8:	f840 3b04 	str.w	r3, [r0], #4
    a4cc:	f851 3b04 	ldr.w	r3, [r1], #4
    a4d0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a4d4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    a4d6:	d2ed      	bcs.n	a4b4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a4d8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    a4da:	d305      	bcc.n	a4e8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a4dc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a4e0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    a4e4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a4e6:	d2f9      	bcs.n	a4dc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a4e8:	3204      	adds	r2, #4
	beq	.Ldone
    a4ea:	d008      	beq.n	a4fe <memcpy+0xe2>

	lsls	r2, r2, #31
    a4ec:	07d2      	lsls	r2, r2, #31
	itt ne
    a4ee:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a4f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a4f4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a4f8:	d301      	bcc.n	a4fe <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a4fa:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a4fc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a4fe:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a500:	4770      	bx	lr
    a502:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a504:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    a506:	d313      	bcc.n	a530 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a508:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a50a:	d08d      	beq.n	a428 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a50c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a510:	d08a      	beq.n	a428 <memcpy+0xc>

	rsb	r3, #4
    a512:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    a516:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    a518:	07db      	lsls	r3, r3, #31
	itt ne
    a51a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a51c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a520:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a524:	d380      	bcc.n	a428 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a526:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a52a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a52e:	e77b      	b.n	a428 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a530:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    a532:	d3d9      	bcc.n	a4e8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a534:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    a536:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a53a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a53e:	d2f9      	bcs.n	a534 <memcpy+0x118>

	ldrb	r3, [r1]
    a540:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a542:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a544:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a546:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a548:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a54a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a54c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a54e:	4770      	bx	lr

0000a550 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a550:	4a96      	ldr	r2, [pc, #600]	; (a7ac <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a552:	4b97      	ldr	r3, [pc, #604]	; (a7b0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a554:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a556:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a55a:	4c96      	ldr	r4, [pc, #600]	; (a7b4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a55c:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a560:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a562:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a564:	d91c      	bls.n	a5a0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a566:	4b94      	ldr	r3, [pc, #592]	; (a7b8 <set_arm_clock+0x268>)
    a568:	4298      	cmp	r0, r3
    a56a:	f240 8115 	bls.w	a798 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a56e:	4b93      	ldr	r3, [pc, #588]	; (a7bc <set_arm_clock+0x26c>)
    a570:	f240 6527 	movw	r5, #1575	; 0x627
    a574:	4f92      	ldr	r7, [pc, #584]	; (a7c0 <set_arm_clock+0x270>)
    a576:	4403      	add	r3, r0
    a578:	4c92      	ldr	r4, [pc, #584]	; (a7c4 <set_arm_clock+0x274>)
    a57a:	0a1a      	lsrs	r2, r3, #8
    a57c:	fba7 3202 	umull	r3, r2, r7, r2
    a580:	09d3      	lsrs	r3, r2, #7
    a582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a586:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a58a:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    a58e:	42ab      	cmp	r3, r5
    a590:	bf28      	it	cs
    a592:	462b      	movcs	r3, r5
    a594:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    a598:	fba4 3503 	umull	r3, r5, r4, r3
    a59c:	08ed      	lsrs	r5, r5, #3
    a59e:	e004      	b.n	a5aa <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    a5a0:	4d89      	ldr	r5, [pc, #548]	; (a7c8 <set_arm_clock+0x278>)
    a5a2:	42a8      	cmp	r0, r5
    a5a4:	bf94      	ite	ls
    a5a6:	2506      	movls	r5, #6
    a5a8:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5aa:	4a81      	ldr	r2, [pc, #516]	; (a7b0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5ac:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5b4:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a5ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5be:	d20a      	bcs.n	a5d6 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a5c0:	4b7c      	ldr	r3, [pc, #496]	; (a7b4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a5c2:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a5c6:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a5c8:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a5ca:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a5cc:	6813      	ldr	r3, [r2, #0]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	dafc      	bge.n	a5cc <set_arm_clock+0x7c>
    a5d2:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a5d6:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    a5da:	d131      	bne.n	a640 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a5dc:	4c7b      	ldr	r4, [pc, #492]	; (a7cc <set_arm_clock+0x27c>)
    a5de:	4a7c      	ldr	r2, [pc, #496]	; (a7d0 <set_arm_clock+0x280>)
    a5e0:	f8d4 c010 	ldr.w	ip, [r4, #16]
    a5e4:	4614      	mov	r4, r2
    a5e6:	ea0c 0202 	and.w	r2, ip, r2
    a5ea:	42a2      	cmp	r2, r4
    a5ec:	bf0a      	itet	eq
    a5ee:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    a5f2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    a5f6:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a5f8:	ea8e 0403 	eor.w	r4, lr, r3
    a5fc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a600:	d008      	beq.n	a614 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a602:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a606:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a60a:	4c69      	ldr	r4, [pc, #420]	; (a7b0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a60c:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    a610:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a614:	ea81 0302 	eor.w	r3, r1, r2
    a618:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    a61c:	d008      	beq.n	a630 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a61e:	4b64      	ldr	r3, [pc, #400]	; (a7b0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a620:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a624:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a626:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a628:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a62a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a62c:	071c      	lsls	r4, r3, #28
    a62e:	d4fc      	bmi.n	a62a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a630:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a634:	4a5e      	ldr	r2, [pc, #376]	; (a7b0 <set_arm_clock+0x260>)
    a636:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a63a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a63c:	0699      	lsls	r1, r3, #26
    a63e:	d4fc      	bmi.n	a63a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a640:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a642:	4c64      	ldr	r4, [pc, #400]	; (a7d4 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a644:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a646:	fb01 f302 	mul.w	r3, r1, r2
    a64a:	fb00 f303 	mul.w	r3, r0, r3
    a64e:	42a3      	cmp	r3, r4
    a650:	d809      	bhi.n	a666 <set_arm_clock+0x116>
		if (div_arm < 8) {
    a652:	2a07      	cmp	r2, #7
    a654:	f200 8095 	bhi.w	a782 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    a658:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a65a:	fb01 f302 	mul.w	r3, r1, r2
    a65e:	fb00 f303 	mul.w	r3, r0, r3
    a662:	42a3      	cmp	r3, r4
    a664:	d9f5      	bls.n	a652 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a666:	485c      	ldr	r0, [pc, #368]	; (a7d8 <set_arm_clock+0x288>)
    a668:	4c5c      	ldr	r4, [pc, #368]	; (a7dc <set_arm_clock+0x28c>)
    a66a:	4418      	add	r0, r3
    a66c:	fba4 0300 	umull	r0, r3, r4, r0
    a670:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    a672:	2b6c      	cmp	r3, #108	; 0x6c
    a674:	f200 808b 	bhi.w	a78e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    a678:	2b35      	cmp	r3, #53	; 0x35
    a67a:	f200 808f 	bhi.w	a79c <set_arm_clock+0x24c>
    a67e:	f8df 8188 	ldr.w	r8, [pc, #392]	; a808 <set_arm_clock+0x2b8>
    a682:	2336      	movs	r3, #54	; 0x36
    a684:	4856      	ldr	r0, [pc, #344]	; (a7e0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a686:	f8df c144 	ldr.w	ip, [pc, #324]	; a7cc <set_arm_clock+0x27c>
    a68a:	4c56      	ldr	r4, [pc, #344]	; (a7e4 <set_arm_clock+0x294>)
    a68c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a690:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a694:	ea09 0404 	and.w	r4, r9, r4
    a698:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a69a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a69e:	d00b      	beq.n	a6b8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a6a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a6a4:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a6a8:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a6aa:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a6ae:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a6b2:	6823      	ldr	r3, [r4, #0]
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	dafc      	bge.n	a6b2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a6b8:	f8df c0f4 	ldr.w	ip, [pc, #244]	; a7b0 <set_arm_clock+0x260>
    a6bc:	3a01      	subs	r2, #1
    a6be:	f8dc 3010 	ldr.w	r3, [ip, #16]
    a6c2:	f003 0307 	and.w	r3, r3, #7
    a6c6:	4293      	cmp	r3, r2
    a6c8:	d007      	beq.n	a6da <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a6ca:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a6ce:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a6d0:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a6d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a6d6:	03db      	lsls	r3, r3, #15
    a6d8:	d4fc      	bmi.n	a6d4 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a6da:	3901      	subs	r1, #1
    a6dc:	0289      	lsls	r1, r1, #10
    a6de:	ea8e 0301 	eor.w	r3, lr, r1
    a6e2:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    a6e6:	d00c      	beq.n	a702 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a6e8:	4b31      	ldr	r3, [pc, #196]	; (a7b0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a6ea:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a6ee:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a6f2:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a6f4:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    a6f8:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a6fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a6fe:	0799      	lsls	r1, r3, #30
    a700:	d4fc      	bmi.n	a6fc <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a702:	4b39      	ldr	r3, [pc, #228]	; (a7e8 <set_arm_clock+0x298>)
    a704:	4939      	ldr	r1, [pc, #228]	; (a7ec <set_arm_clock+0x29c>)
    a706:	4403      	add	r3, r0
    a708:	09db      	lsrs	r3, r3, #7
    a70a:	fba1 3103 	umull	r3, r1, r1, r3
    a70e:	0b09      	lsrs	r1, r1, #12
    a710:	2904      	cmp	r1, #4
    a712:	bf28      	it	cs
    a714:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a716:	1e4b      	subs	r3, r1, #1
    a718:	021b      	lsls	r3, r3, #8
    a71a:	ea8e 0203 	eor.w	r2, lr, r3
    a71e:	f412 7f40 	tst.w	r2, #768	; 0x300
    a722:	d007      	beq.n	a734 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a724:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a728:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a72c:	4a20      	ldr	r2, [pc, #128]	; (a7b0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a72e:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a732:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a734:	4b1e      	ldr	r3, [pc, #120]	; (a7b0 <set_arm_clock+0x260>)
    a736:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a738:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a73a:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    a73e:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a740:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a742:	069b      	lsls	r3, r3, #26
    a744:	d4fc      	bmi.n	a740 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a746:	4b2a      	ldr	r3, [pc, #168]	; (a7f0 <set_arm_clock+0x2a0>)
    a748:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a74c:	4c29      	ldr	r4, [pc, #164]	; (a7f4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a74e:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a750:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a754:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a756:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a75a:	4c27      	ldr	r4, [pc, #156]	; (a7f8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a75c:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a760:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a764:	4a25      	ldr	r2, [pc, #148]	; (a7fc <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a766:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a768:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a76a:	d208      	bcs.n	a77e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a76c:	4b11      	ldr	r3, [pc, #68]	; (a7b4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a76e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a772:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a774:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a776:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a778:	6813      	ldr	r3, [r2, #0]
    a77a:	2b00      	cmp	r3, #0
    a77c:	dafc      	bge.n	a778 <set_arm_clock+0x228>
	}

	return frequency;
}
    a77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a782:	2904      	cmp	r1, #4
    a784:	f63f af6f 	bhi.w	a666 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    a788:	3101      	adds	r1, #1
				div_arm = 1;
    a78a:	2201      	movs	r2, #1
    a78c:	e75b      	b.n	a646 <set_arm_clock+0xf6>
    a78e:	f8df 807c 	ldr.w	r8, [pc, #124]	; a80c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a792:	236c      	movs	r3, #108	; 0x6c
    a794:	481a      	ldr	r0, [pc, #104]	; (a800 <set_arm_clock+0x2b0>)
    a796:	e776      	b.n	a686 <set_arm_clock+0x136>
    a798:	2512      	movs	r5, #18
    a79a:	e706      	b.n	a5aa <set_arm_clock+0x5a>
    a79c:	4819      	ldr	r0, [pc, #100]	; (a804 <set_arm_clock+0x2b4>)
    a79e:	f8df 8070 	ldr.w	r8, [pc, #112]	; a810 <set_arm_clock+0x2c0>
    a7a2:	fb00 f003 	mul.w	r0, r0, r3
    a7a6:	ea43 0808 	orr.w	r8, r3, r8
    a7aa:	e76c      	b.n	a686 <set_arm_clock+0x136>
    a7ac:	1f78a400 	.word	0x1f78a400
    a7b0:	400fc000 	.word	0x400fc000
    a7b4:	40080000 	.word	0x40080000
    a7b8:	23c34600 	.word	0x23c34600
    a7bc:	dc3cba00 	.word	0xdc3cba00
    a7c0:	004cb223 	.word	0x004cb223
    a7c4:	51eb851f 	.word	0x51eb851f
    a7c8:	016e3600 	.word	0x016e3600
    a7cc:	400d8000 	.word	0x400d8000
    a7d0:	80003040 	.word	0x80003040
    a7d4:	269fb1ff 	.word	0x269fb1ff
    a7d8:	005b8d80 	.word	0x005b8d80
    a7dc:	165e9f81 	.word	0x165e9f81
    a7e0:	269fb200 	.word	0x269fb200
    a7e4:	8001307f 	.word	0x8001307f
    a7e8:	08f0d17f 	.word	0x08f0d17f
    a7ec:	00e5109f 	.word	0x00e5109f
    a7f0:	431bde83 	.word	0x431bde83
    a7f4:	20001fa8 	.word	0x20001fa8
    a7f8:	20001fa4 	.word	0x20001fa4
    a7fc:	20002d54 	.word	0x20002d54
    a800:	4d3f6400 	.word	0x4d3f6400
    a804:	00b71b00 	.word	0x00b71b00
    a808:	80002036 	.word	0x80002036
    a80c:	8000206c 	.word	0x8000206c
    a810:	80002000 	.word	0x80002000

0000a814 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    a814:	2800      	cmp	r0, #0
    a816:	d057      	beq.n	a8c8 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a818:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    a81a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a81e:	b085      	sub	sp, #20
    a820:	4683      	mov	fp, r0
    a822:	4c2a      	ldr	r4, [pc, #168]	; (a8cc <delay+0xb8>)
    a824:	4d2a      	ldr	r5, [pc, #168]	; (a8d0 <delay+0xbc>)
    a826:	4e2b      	ldr	r6, [pc, #172]	; (a8d4 <delay+0xc0>)
    a828:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a82c:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a830:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    a832:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a834:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    a838:	2900      	cmp	r1, #0
    a83a:	d1f7      	bne.n	a82c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a83c:	4f26      	ldr	r7, [pc, #152]	; (a8d8 <delay+0xc4>)
    a83e:	e9cd 8902 	strd	r8, r9, [sp, #8]
    a842:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    a844:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a846:	4a25      	ldr	r2, [pc, #148]	; (a8dc <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    a848:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a84c:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a84e:	6812      	ldr	r2, [r2, #0]
    a850:	2701      	movs	r7, #1
    a852:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    a856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a85a:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    a85c:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a85e:	428b      	cmp	r3, r1
    a860:	bf08      	it	eq
    a862:	4542      	cmpeq	r2, r8
    a864:	bf2c      	ite	cs
    a866:	46c2      	movcs	sl, r8
    a868:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    a86a:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a86e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a872:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    a874:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a876:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    a87a:	2b00      	cmp	r3, #0
    a87c:	d1f7      	bne.n	a86e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a87e:	9801      	ldr	r0, [sp, #4]
    a880:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    a882:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a884:	4815      	ldr	r0, [pc, #84]	; (a8dc <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a886:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a88a:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a88c:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a890:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    a894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a898:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a89c:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    a89e:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a8a0:	4299      	cmp	r1, r3
    a8a2:	bf08      	it	eq
    a8a4:	4540      	cmpeq	r0, r8
    a8a6:	bf2c      	ite	cs
    a8a8:	4643      	movcs	r3, r8
    a8aa:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a8ac:	441a      	add	r2, r3
    a8ae:	4572      	cmp	r2, lr
    a8b0:	d307      	bcc.n	a8c2 <delay+0xae>
			if (--msec == 0) return;
    a8b2:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    a8b6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    a8ba:	d1d8      	bne.n	a86e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    a8bc:	b005      	add	sp, #20
    a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    a8c2:	f001 ff75 	bl	c7b0 <yield>
	}
    a8c6:	e7d2      	b.n	a86e <delay+0x5a>
    a8c8:	4770      	bx	lr
    a8ca:	bf00      	nop
    a8cc:	20003014 	.word	0x20003014
    a8d0:	20002d58 	.word	0x20002d58
    a8d4:	20002d50 	.word	0x20002d50
    a8d8:	e0001004 	.word	0xe0001004
    a8dc:	20002d54 	.word	0x20002d54

0000a8e0 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    a8e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    a8e4:	4a12      	ldr	r2, [pc, #72]	; (a930 <micros+0x50>)
    a8e6:	2601      	movs	r6, #1
    a8e8:	4d12      	ldr	r5, [pc, #72]	; (a934 <micros+0x54>)
    a8ea:	4c13      	ldr	r4, [pc, #76]	; (a938 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a8ec:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a8f0:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    a8f2:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a8f4:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d1f7      	bne.n	a8ec <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a8fc:	4a0f      	ldr	r2, [pc, #60]	; (a93c <micros+0x5c>)
    a8fe:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a900:	4f0f      	ldr	r7, [pc, #60]	; (a940 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    a902:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    a904:	f04f 0900 	mov.w	r9, #0
    a908:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a90c:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    a90e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a912:	4599      	cmp	r9, r3
    a914:	fba2 6706 	umull	r6, r7, r2, r6
    a918:	bf08      	it	eq
    a91a:	45b8      	cmpeq	r8, r7
    a91c:	463c      	mov	r4, r7
    a91e:	bf2c      	ite	cs
    a920:	463c      	movcs	r4, r7
    a922:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    a924:	fb00 4001 	mla	r0, r0, r1, r4
    a928:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    a92c:	4770      	bx	lr
    a92e:	bf00      	nop
    a930:	20003014 	.word	0x20003014
    a934:	20002d58 	.word	0x20002d58
    a938:	20002d50 	.word	0x20002d50
    a93c:	e0001004 	.word	0xe0001004
    a940:	20002d54 	.word	0x20002d54

0000a944 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    a944:	0100      	lsls	r0, r0, #4
    a946:	4b07      	ldr	r3, [pc, #28]	; (a964 <digitalWrite.part.0+0x20>)
    a948:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    a94a:	581b      	ldr	r3, [r3, r0]
	mask = p->mask;
    a94c:	68d2      	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    a94e:	6858      	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    a950:	4210      	tst	r0, r2
    a952:	d002      	beq.n	a95a <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    a954:	b911      	cbnz	r1, a95c <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    a956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    a95a:	4770      	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    a95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    a960:	4770      	bx	lr
    a962:	bf00      	nop
    a964:	20001988 	.word	0x20001988

0000a968 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    a968:	0100      	lsls	r0, r0, #4
    a96a:	4b05      	ldr	r3, [pc, #20]	; (a980 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    a96c:	581a      	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    a96e:	1819      	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    a970:	6892      	ldr	r2, [r2, #8]
    a972:	68cb      	ldr	r3, [r1, #12]
    a974:	421a      	tst	r2, r3
}
    a976:	bf14      	ite	ne
    a978:	2001      	movne	r0, #1
    a97a:	2000      	moveq	r0, #0
    a97c:	4770      	bx	lr
    a97e:	bf00      	nop
    a980:	20001988 	.word	0x20001988

0000a984 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    a984:	2827      	cmp	r0, #39	; 0x27
    a986:	d801      	bhi.n	a98c <digitalWrite+0x8>
    a988:	f7ff bfdc 	b.w	a944 <digitalWrite.part.0>
    a98c:	4770      	bx	lr
    a98e:	bf00      	nop

0000a990 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    a990:	2827      	cmp	r0, #39	; 0x27
    a992:	d801      	bhi.n	a998 <digitalRead+0x8>
    a994:	f7ff bfe8 	b.w	a968 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    a998:	2000      	movs	r0, #0
    a99a:	4770      	bx	lr

0000a99c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    a99c:	2827      	cmp	r0, #39	; 0x27
    a99e:	d81c      	bhi.n	a9da <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    a9a0:	0100      	lsls	r0, r0, #4
    a9a2:	4a1a      	ldr	r2, [pc, #104]	; (aa0c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a9a4:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    a9a6:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a9aa:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    a9ac:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a9ae:	d015      	beq.n	a9dc <pinMode+0x40>
    a9b0:	2904      	cmp	r1, #4
    a9b2:	d013      	beq.n	a9dc <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a9b4:	68dc      	ldr	r4, [r3, #12]
    a9b6:	6842      	ldr	r2, [r0, #4]
    a9b8:	ea22 0204 	bic.w	r2, r2, r4
    a9bc:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a9be:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    a9c0:	b1e9      	cbz	r1, a9fe <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    a9c2:	2902      	cmp	r1, #2
    a9c4:	d01e      	beq.n	aa04 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    a9c6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a9c8:	685b      	ldr	r3, [r3, #4]
}
    a9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    a9ce:	bf0c      	ite	eq
    a9d0:	490f      	ldreq	r1, [pc, #60]	; (aa10 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    a9d2:	4910      	ldrne	r1, [pc, #64]	; (aa14 <pinMode+0x78>)
    a9d4:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    a9d6:	2215      	movs	r2, #21
    a9d8:	601a      	str	r2, [r3, #0]
}
    a9da:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a9dc:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    a9de:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a9e0:	6844      	ldr	r4, [r0, #4]
    a9e2:	ea42 0204 	orr.w	r2, r2, r4
    a9e6:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a9e8:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    a9ea:	d008      	beq.n	a9fe <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    a9ec:	f640 0138 	movw	r1, #2104	; 0x838
    a9f0:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a9f2:	685b      	ldr	r3, [r3, #4]
    a9f4:	2215      	movs	r2, #21
}
    a9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a9fa:	601a      	str	r2, [r3, #0]
}
    a9fc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a9fe:	2138      	movs	r1, #56	; 0x38
    aa00:	6011      	str	r1, [r2, #0]
    aa02:	e7f6      	b.n	a9f2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    aa04:	4904      	ldr	r1, [pc, #16]	; (aa18 <pinMode+0x7c>)
    aa06:	6011      	str	r1, [r2, #0]
    aa08:	e7f3      	b.n	a9f2 <pinMode+0x56>
    aa0a:	bf00      	nop
    aa0c:	20001988 	.word	0x20001988
    aa10:	00013038 	.word	0x00013038
    aa14:	00010038 	.word	0x00010038
    aa18:	0001f038 	.word	0x0001f038

0000aa1c <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    aa1c:	4b15      	ldr	r3, [pc, #84]	; (aa74 <flash_wait+0x58>)
	FLEXSPI_LUT61 = 0;
    aa1e:	2000      	movs	r0, #0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    aa20:	2101      	movs	r1, #1
    aa22:	461a      	mov	r2, r3
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    aa24:	b4f0      	push	{r4, r5, r6, r7}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    aa26:	4f14      	ldr	r7, [pc, #80]	; (aa78 <flash_wait+0x5c>)
	FLEXSPI_LUT61 = 0;
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
    aa28:	4606      	mov	r6, r0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    aa2a:	4d14      	ldr	r5, [pc, #80]	; (aa7c <flash_wait+0x60>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    aa2c:	4c14      	ldr	r4, [pc, #80]	; (aa80 <flash_wait+0x64>)
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    aa2e:	f8c3 72f0 	str.w	r7, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    aa32:	f8c3 02f4 	str.w	r0, [r3, #756]	; 0x2f4
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    aa36:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    aa3a:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    aa3e:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    aa42:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    aa46:	6953      	ldr	r3, [r2, #20]
    aa48:	07d8      	lsls	r0, r3, #31
    aa4a:	d403      	bmi.n	aa54 <flash_wait+0x38>
			asm("nop");
    aa4c:	bf00      	nop
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    aa4e:	6953      	ldr	r3, [r2, #20]
    aa50:	07db      	lsls	r3, r3, #31
    aa52:	d5fb      	bpl.n	aa4c <flash_wait+0x30>
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    aa54:	7823      	ldrb	r3, [r4, #0]
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    aa56:	4807      	ldr	r0, [pc, #28]	; (aa74 <flash_wait+0x58>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    aa58:	07df      	lsls	r7, r3, #31
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    aa5a:	6151      	str	r1, [r2, #20]
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    aa5c:	d4eb      	bmi.n	aa36 <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    aa5e:	6803      	ldr	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    aa60:	4602      	mov	r2, r0
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    aa62:	f043 0301 	orr.w	r3, r3, #1
    aa66:	6003      	str	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    aa68:	6813      	ldr	r3, [r2, #0]
    aa6a:	07db      	lsls	r3, r3, #31
    aa6c:	d4fc      	bmi.n	aa68 <flash_wait+0x4c>
	__enable_irq();
    aa6e:	b662      	cpsie	i
}
    aa70:	bcf0      	pop	{r4, r5, r6, r7}
    aa72:	4770      	bx	lr
    aa74:	402a8000 	.word	0x402a8000
    aa78:	24010405 	.word	0x24010405
    aa7c:	000f0001 	.word	0x000f0001
    aa80:	402a8100 	.word	0x402a8100

0000aa84 <flash_write.constprop.0>:

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
    aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa86:	460d      	mov	r5, r1
{
	__disable_irq();
    aa88:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    aa8a:	4a2c      	ldr	r2, [pc, #176]	; (ab3c <flash_write.constprop.0+0xb8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
    aa8c:	2400      	movs	r4, #0

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    aa8e:	4e2c      	ldr	r6, [pc, #176]	; (ab40 <flash_write.constprop.0+0xbc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    aa90:	2302      	movs	r3, #2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    aa92:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    aa96:	f44f 2770 	mov.w	r7, #983040	; 0xf0000

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    aa9a:	6196      	str	r6, [r2, #24]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    aa9c:	2601      	movs	r6, #1
// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    aa9e:	61d3      	str	r3, [r2, #28]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    aaa0:	f020 031f 	bic.w	r3, r0, #31
	FLEXSPI_IPCR0 = 0;
    aaa4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    aaa8:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    aaac:	1c81      	adds	r1, r0, #2
	FLEXSPI_LUT61 = 0;
    aaae:	f8c2 42f4 	str.w	r4, [r2, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    aab2:	f8c2 42f8 	str.w	r4, [r2, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    aab6:	f8c2 42fc 	str.w	r4, [r2, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    aaba:	f8c2 70a4 	str.w	r7, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    aabe:	f8c2 60b0 	str.w	r6, [r2, #176]	; 0xb0
	asm("dsb");
    aac2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    aac6:	4a1f      	ldr	r2, [pc, #124]	; (ab44 <flash_write.constprop.0+0xc0>)
    aac8:	6013      	str	r3, [r2, #0]
		location += 32;
    aaca:	3320      	adds	r3, #32
	} while (location < end_addr);
    aacc:	4299      	cmp	r1, r3
    aace:	d8fb      	bhi.n	aac8 <flash_write.constprop.0+0x44>
	asm("dsb");
    aad0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    aad4:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    aad8:	4a18      	ldr	r2, [pc, #96]	; (ab3c <flash_write.constprop.0+0xb8>)
    aada:	6953      	ldr	r3, [r2, #20]
    aadc:	4917      	ldr	r1, [pc, #92]	; (ab3c <flash_write.constprop.0+0xb8>)
    aade:	07df      	lsls	r7, r3, #31
    aae0:	d5fb      	bpl.n	aada <flash_write.constprop.0+0x56>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    aae2:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    aae4:	4a18      	ldr	r2, [pc, #96]	; (ab48 <flash_write.constprop.0+0xc4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
    aae6:	f3c0 0016 	ubfx	r0, r0, #0, #23
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    aaea:	f242 2701 	movw	r7, #8705	; 0x2201
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    aaee:	4e17      	ldr	r6, [pc, #92]	; (ab4c <flash_write.constprop.0+0xc8>)
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    aaf0:	460c      	mov	r4, r1
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    aaf2:	614b      	str	r3, [r1, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    aaf4:	f8c1 22f0 	str.w	r2, [r1, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    aaf8:	2202      	movs	r2, #2
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    aafa:	f8c1 72f4 	str.w	r7, [r1, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    aafe:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
    ab02:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    ab06:	f8c1 60a4 	str.w	r6, [r1, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ab0a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
    ab0e:	e001      	b.n	ab14 <flash_write.constprop.0+0x90>
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
    ab10:	065e      	lsls	r6, r3, #25
    ab12:	d409      	bmi.n	ab28 <flash_write.constprop.0+0xa4>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    ab14:	6963      	ldr	r3, [r4, #20]
    ab16:	4909      	ldr	r1, [pc, #36]	; (ab3c <flash_write.constprop.0+0xb8>)
    ab18:	07d8      	lsls	r0, r3, #31
    ab1a:	d5f9      	bpl.n	ab10 <flash_write.constprop.0+0x8c>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    ab1c:	2341      	movs	r3, #65	; 0x41
    ab1e:	614b      	str	r3, [r1, #20]
	flash_wait();
}
    ab20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
	flash_wait();
    ab24:	f7ff bf7a 	b.w	aa1c <flash_wait>
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
    ab28:	b122      	cbz	r2, ab34 <flash_write.constprop.0+0xb0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    ab2a:	4629      	mov	r1, r5
    ab2c:	4808      	ldr	r0, [pc, #32]	; (ab50 <flash_write.constprop.0+0xcc>)
				src += wrlen;
    ab2e:	4415      	add	r5, r2
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    ab30:	f7ff fc74 	bl	a41c <memcpy>
				src += wrlen;
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    ab34:	2340      	movs	r3, #64	; 0x40
    ab36:	2200      	movs	r2, #0
    ab38:	6163      	str	r3, [r4, #20]
    ab3a:	e7eb      	b.n	ab14 <flash_write.constprop.0+0x90>
    ab3c:	402a8000 	.word	0x402a8000
    ab40:	5af05af0 	.word	0x5af05af0
    ab44:	e000ef5c 	.word	0xe000ef5c
    ab48:	08180432 	.word	0x08180432
    ab4c:	000f0002 	.word	0x000f0002
    ab50:	402a8180 	.word	0x402a8180

0000ab54 <eeprom_initialize>:

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    ab54:	b4f0      	push	{r4, r5, r6, r7}
    ab56:	4e0e      	ldr	r6, [pc, #56]	; (ab90 <eeprom_initialize+0x3c>)
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    ab58:	f64f 75ff 	movw	r5, #65535	; 0xffff

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    ab5c:	4c0d      	ldr	r4, [pc, #52]	; (ab94 <eeprom_initialize+0x40>)
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    ab5e:	4f0e      	ldr	r7, [pc, #56]	; (ab98 <eeprom_initialize+0x44>)
    ab60:	f5a4 5380 	sub.w	r3, r4, #4096	; 0x1000
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
    ab64:	2200      	movs	r2, #0
    ab66:	e002      	b.n	ab6e <eeprom_initialize+0x1a>
		do {
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
    ab68:	429c      	cmp	r4, r3
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
			index++;
    ab6a:	b282      	uxth	r2, r0
		} while (p < end);
    ab6c:	d904      	bls.n	ab78 <eeprom_initialize+0x24>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    ab6e:	f833 1b02 	ldrh.w	r1, [r3], #2
			index++;
    ab72:	1c50      	adds	r0, r2, #1
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    ab74:	42a9      	cmp	r1, r5
    ab76:	d1f7      	bne.n	ab68 <eeprom_initialize+0x14>
    ab78:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			index++;
		} while (p < end);
		sector_index[sector] = index;
    ab7c:	f826 2f02 	strh.w	r2, [r6, #2]!

void eeprom_initialize(void)
{
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    ab80:	42bc      	cmp	r4, r7
    ab82:	d1ed      	bne.n	ab60 <eeprom_initialize+0xc>
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
		sector_index[sector] = index;
	}
	initialized = 1;
    ab84:	4b05      	ldr	r3, [pc, #20]	; (ab9c <eeprom_initialize+0x48>)
    ab86:	2201      	movs	r2, #1
    ab88:	701a      	strb	r2, [r3, #0]
}
    ab8a:	bcf0      	pop	{r4, r5, r6, r7}
    ab8c:	4770      	bx	lr
    ab8e:	bf00      	nop
    ab90:	20002d5a 	.word	0x20002d5a
    ab94:	601f1000 	.word	0x601f1000
    ab98:	60200000 	.word	0x60200000
    ab9c:	20002d7a 	.word	0x20002d7a

0000aba0 <eeprom_read_byte>:
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
    aba0:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    aba4:	d301      	bcc.n	abaa <eeprom_read_byte+0xa>
    aba6:	20ff      	movs	r0, #255	; 0xff
	while (p < end) {
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    aba8:	4770      	bx	lr
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    abaa:	4b15      	ldr	r3, [pc, #84]	; (ac00 <eeprom_read_byte+0x60>)
	}
	initialized = 1;
}

uint8_t eeprom_read_byte(const uint8_t *addr_ptr)
{
    abac:	b570      	push	{r4, r5, r6, lr}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    abae:	781b      	ldrb	r3, [r3, #0]
    abb0:	4604      	mov	r4, r0
    abb2:	b303      	cbz	r3, abf6 <eeprom_read_byte+0x56>
	sector = (addr >> 2) % FLASH_SECTORS;
    abb4:	08a5      	lsrs	r5, r4, #2
    abb6:	4913      	ldr	r1, [pc, #76]	; (ac04 <eeprom_read_byte+0x64>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    abb8:	4b13      	ldr	r3, [pc, #76]	; (ac08 <eeprom_read_byte+0x68>)
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    abba:	f004 0003 	and.w	r0, r4, #3
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    abbe:	fba1 2105 	umull	r2, r1, r1, r5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    abc2:	4c12      	ldr	r4, [pc, #72]	; (ac0c <eeprom_read_byte+0x6c>)
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    abc4:	08c9      	lsrs	r1, r1, #3
    abc6:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
    abca:	460a      	mov	r2, r1
    abcc:	1ba9      	subs	r1, r5, r6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    abce:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    abd2:	20ff      	movs	r0, #255	; 0xff
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    abd4:	440b      	add	r3, r1
	end = p + sector_index[sector];
    abd6:	f834 5011 	ldrh.w	r5, [r4, r1, lsl #1]
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    abda:	031b      	lsls	r3, r3, #12
	end = p + sector_index[sector];
    abdc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
	while (p < end) {
    abe0:	42ab      	cmp	r3, r5
    abe2:	d20b      	bcs.n	abfc <eeprom_read_byte+0x5c>
		uint32_t val = *p++;
    abe4:	f833 1b02 	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    abe8:	b2cc      	uxtb	r4, r1
    abea:	42a2      	cmp	r2, r4
    abec:	bf08      	it	eq
    abee:	0a08      	lsreq	r0, r1, #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    abf0:	429d      	cmp	r5, r3
    abf2:	d8f7      	bhi.n	abe4 <eeprom_read_byte+0x44>
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    abf4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    abf6:	f7ff ffad 	bl	ab54 <eeprom_initialize>
    abfa:	e7db      	b.n	abb4 <eeprom_read_byte+0x14>
    abfc:	bd70      	pop	{r4, r5, r6, pc}
    abfe:	bf00      	nop
    ac00:	20002d7a 	.word	0x20002d7a
    ac04:	88888889 	.word	0x88888889
    ac08:	000601f0 	.word	0x000601f0
    ac0c:	20002d5c 	.word	0x20002d5c

0000ac10 <eeprom_write_byte>:
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
    ac10:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    ac14:	f080 80ac 	bcs.w	ad70 <eeprom_write_byte+0x160>
	if (!initialized) eeprom_initialize();
    ac18:	4b5f      	ldr	r3, [pc, #380]	; (ad98 <eeprom_write_byte+0x188>)
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    ac1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    ac1e:	781b      	ldrb	r3, [r3, #0]
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    ac20:	b0c3      	sub	sp, #268	; 0x10c
    ac22:	4689      	mov	r9, r1
    ac24:	4680      	mov	r8, r0
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    ac26:	2b00      	cmp	r3, #0
    ac28:	f000 80b0 	beq.w	ad8c <eeprom_write_byte+0x17c>

	sector = (addr >> 2) % FLASH_SECTORS; 
    ac2c:	ea4f 0398 	mov.w	r3, r8, lsr #2
    ac30:	4d5a      	ldr	r5, [pc, #360]	; (ad9c <eeprom_write_byte+0x18c>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ac32:	f008 0003 	and.w	r0, r8, #3
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ac36:	4f5a      	ldr	r7, [pc, #360]	; (ada0 <eeprom_write_byte+0x190>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    ac38:	fba5 2503 	umull	r2, r5, r5, r3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    ac3c:	4e59      	ldr	r6, [pc, #356]	; (ada4 <eeprom_write_byte+0x194>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    ac3e:	08ed      	lsrs	r5, r5, #3
    ac40:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
    ac44:	46a8      	mov	r8, r5
    ac46:	1a9d      	subs	r5, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ac48:	ea40 0888 	orr.w	r8, r0, r8, lsl #2
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ac4c:	442f      	add	r7, r5
	end = p + sector_index[sector];
    ac4e:	f836 4015 	ldrh.w	r4, [r6, r5, lsl #1]

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ac52:	033f      	lsls	r7, r7, #12
	end = p + sector_index[sector];
    ac54:	eb07 0044 	add.w	r0, r7, r4, lsl #1
	while (p < end) {
    ac58:	4287      	cmp	r7, r0
    ac5a:	f080 809a 	bcs.w	ad92 <eeprom_write_byte+0x182>
    ac5e:	463b      	mov	r3, r7
    ac60:	f04f 0eff 	mov.w	lr, #255	; 0xff
		uint16_t val = *p++;
    ac64:	f833 2b02 	ldrh.w	r2, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    ac68:	b2d1      	uxtb	r1, r2
    ac6a:	4588      	cmp	r8, r1
    ac6c:	bf08      	it	eq
    ac6e:	ea4f 2e12 	moveq.w	lr, r2, lsr #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    ac72:	4298      	cmp	r0, r3
    ac74:	d8f6      	bhi.n	ac64 <eeprom_write_byte+0x54>
		uint16_t val = *p++;
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
    ac76:	45f1      	cmp	r9, lr
    ac78:	d077      	beq.n	ad6a <eeprom_write_byte+0x15a>
	if (sector_index[sector] < 2048) {
    ac7a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    ac7e:	d378      	bcc.n	ad72 <eeprom_write_byte+0x162>
		uint16_t newdata = offset | (data << 8);
		flash_write(end, &newdata, 2);
		sector_index[sector] = sector_index[sector] + 1;
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
    ac80:	ac02      	add	r4, sp, #8
    ac82:	f44f 7280 	mov.w	r2, #256	; 0x100
    ac86:	21ff      	movs	r1, #255	; 0xff
    ac88:	4620      	mov	r0, r4
    ac8a:	f002 fb71 	bl	d370 <memset>
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
    ac8e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ac92:	463a      	mov	r2, r7
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
			uint16_t val = *p++;
    ac94:	f832 3b02 	ldrh.w	r3, [r2], #2
			buf[val & 255] = val >> 8;
    ac98:	b2d8      	uxtb	r0, r3
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    ac9a:	4291      	cmp	r1, r2
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
    ac9c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    aca0:	5423      	strb	r3, [r4, r0]
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    aca2:	d8f7      	bhi.n	ac94 <eeprom_write_byte+0x84>
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
    aca4:	f804 9008 	strb.w	r9, [r4, r8]
}

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
    aca8:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    acaa:	4b3f      	ldr	r3, [pc, #252]	; (ada8 <eeprom_write_byte+0x198>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    acac:	2200      	movs	r2, #0

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    acae:	483f      	ldr	r0, [pc, #252]	; (adac <eeprom_write_byte+0x19c>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    acb0:	f04f 0c02 	mov.w	ip, #2
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    acb4:	f240 4e06 	movw	lr, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    acb8:	f44f 2470 	mov.w	r4, #983040	; 0xf0000

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    acbc:	6198      	str	r0, [r3, #24]
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    acbe:	2001      	movs	r0, #1
// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    acc0:	f8c3 c01c 	str.w	ip, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    acc4:	f8c3 e2f0 	str.w	lr, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    acc8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    accc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    acd0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    acd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    acd8:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    acdc:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    ace0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    ace4:	4a32      	ldr	r2, [pc, #200]	; (adb0 <eeprom_write_byte+0x1a0>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ace6:	463b      	mov	r3, r7
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    ace8:	6013      	str	r3, [r2, #0]
		location += 32;
    acea:	3320      	adds	r3, #32
	} while (location < end_addr);
    acec:	4299      	cmp	r1, r3
    acee:	d8fb      	bhi.n	ace8 <eeprom_write_byte+0xd8>
	asm("dsb");
    acf0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    acf4:	f3bf 8f6f 	isb	sy
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    acf8:	492b      	ldr	r1, [pc, #172]	; (ada8 <eeprom_write_byte+0x198>)
    acfa:	694b      	ldr	r3, [r1, #20]
    acfc:	4a2a      	ldr	r2, [pc, #168]	; (ada8 <eeprom_write_byte+0x198>)
    acfe:	07d8      	lsls	r0, r3, #31
    ad00:	d5fb      	bpl.n	acfa <eeprom_write_byte+0xea>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
    ad02:	4b2c      	ldr	r3, [pc, #176]	; (adb4 <eeprom_write_byte+0x1a4>)
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ad04:	2001      	movs	r0, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    ad06:	f8df e0b0 	ldr.w	lr, [pc, #176]	; adb8 <eeprom_write_byte+0x1a8>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ad0a:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
    ad0e:	403b      	ands	r3, r7
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ad10:	4611      	mov	r1, r2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ad12:	6150      	str	r0, [r2, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    ad14:	f8c2 e2f0 	str.w	lr, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
    ad18:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ad1c:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ad20:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ad24:	694b      	ldr	r3, [r1, #20]
    ad26:	4a20      	ldr	r2, [pc, #128]	; (ada8 <eeprom_write_byte+0x198>)
    ad28:	07db      	lsls	r3, r3, #31
    ad2a:	d5fb      	bpl.n	ad24 <eeprom_write_byte+0x114>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ad2c:	2301      	movs	r3, #1
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    ad2e:	2400      	movs	r4, #0
    ad30:	f10d 0907 	add.w	r9, sp, #7
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ad34:	6153      	str	r3, [r2, #20]
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
    ad36:	46a0      	mov	r8, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
    ad38:	f7ff fe70 	bl	aa1c <flash_wait>
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    ad3c:	f819 3f01 	ldrb.w	r3, [r9, #1]!
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
    ad40:	eb07 0048 	add.w	r0, r7, r8, lsl #1
    ad44:	f10d 0106 	add.w	r1, sp, #6
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    ad48:	2bff      	cmp	r3, #255	; 0xff
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    ad4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    ad4e:	f104 0401 	add.w	r4, r4, #1
			if (buf[i] != 0xFF) {
    ad52:	d005      	beq.n	ad60 <eeprom_write_byte+0x150>
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
    ad54:	f108 0801 	add.w	r8, r8, #1
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    ad58:	f8ad 3006 	strh.w	r3, [sp, #6]
				flash_write(p + index, &newval, 2);
    ad5c:	f7ff fe92 	bl	aa84 <flash_write.constprop.0>
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    ad60:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    ad64:	d1ea      	bne.n	ad3c <eeprom_write_byte+0x12c>
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
			}
		}
		sector_index[sector] = index;
    ad66:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
	}
}
    ad6a:	b043      	add	sp, #268	; 0x10c
    ad6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad70:	4770      	bx	lr
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    ad72:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		flash_write(end, &newdata, 2);
    ad76:	a902      	add	r1, sp, #8
		sector_index[sector] = sector_index[sector] + 1;
    ad78:	3401      	adds	r4, #1
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    ad7a:	f8ad 8008 	strh.w	r8, [sp, #8]
		flash_write(end, &newdata, 2);
    ad7e:	f7ff fe81 	bl	aa84 <flash_write.constprop.0>
		sector_index[sector] = sector_index[sector] + 1;
    ad82:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
				index = index + 1;
			}
		}
		sector_index[sector] = index;
	}
}
    ad86:	b043      	add	sp, #268	; 0x10c
    ad88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    ad8c:	f7ff fee2 	bl	ab54 <eeprom_initialize>
    ad90:	e74c      	b.n	ac2c <eeprom_write_byte+0x1c>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
    ad92:	f04f 0eff 	mov.w	lr, #255	; 0xff
    ad96:	e76e      	b.n	ac76 <eeprom_write_byte+0x66>
    ad98:	20002d7a 	.word	0x20002d7a
    ad9c:	88888889 	.word	0x88888889
    ada0:	000601f0 	.word	0x000601f0
    ada4:	20002d5c 	.word	0x20002d5c
    ada8:	402a8000 	.word	0x402a8000
    adac:	5af05af0 	.word	0x5af05af0
    adb0:	e000ef5c 	.word	0xe000ef5c
    adb4:	007ff000 	.word	0x007ff000
    adb8:	08180420 	.word	0x08180420

0000adbc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    adbc:	2004      	movs	r0, #4
    adbe:	4671      	mov	r1, lr
    adc0:	4208      	tst	r0, r1
    adc2:	d003      	beq.n	adcc <_MSP>
    adc4:	f3ef 8009 	mrs	r0, PSP
    adc8:	f000 b808 	b.w	addc <HardFault_HandlerC>

0000adcc <_MSP>:
    adcc:	f3ef 8008 	mrs	r0, MSP
    add0:	f000 b804 	b.w	addc <HardFault_HandlerC>

0000add4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    add4:	4770      	bx	lr
    add6:	bf00      	nop

0000add8 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    add8:	4770      	bx	lr
    adda:	bf00      	nop

0000addc <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    addc:	4b1b      	ldr	r3, [pc, #108]	; (ae4c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    adde:	2105      	movs	r1, #5
    ade0:	4a1b      	ldr	r2, [pc, #108]	; (ae50 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    ade2:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    ade4:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    ade6:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    adea:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    adec:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    adf0:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    adf2:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    adf4:	4c17      	ldr	r4, [pc, #92]	; (ae54 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    adf6:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    adf8:	4817      	ldr	r0, [pc, #92]	; (ae58 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    adfa:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    adfc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    ae00:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    ae04:	6823      	ldr	r3, [r4, #0]
    ae06:	4283      	cmp	r3, r0
    ae08:	d902      	bls.n	ae10 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    ae0a:	4814      	ldr	r0, [pc, #80]	; (ae5c <HardFault_HandlerC+0x80>)
    ae0c:	f7ff fba0 	bl	a550 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    ae10:	4d0e      	ldr	r5, [pc, #56]	; (ae4c <HardFault_HandlerC+0x70>)
    ae12:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    ae14:	2000      	movs	r0, #0
    ae16:	4a12      	ldr	r2, [pc, #72]	; (ae60 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    ae18:	4912      	ldr	r1, [pc, #72]	; (ae64 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    ae1a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    ae1e:	9001      	str	r0, [sp, #4]
    ae20:	9b01      	ldr	r3, [sp, #4]
    ae22:	4293      	cmp	r3, r2
    ae24:	d805      	bhi.n	ae32 <HardFault_HandlerC+0x56>
    ae26:	9b01      	ldr	r3, [sp, #4]
    ae28:	3301      	adds	r3, #1
    ae2a:	9301      	str	r3, [sp, #4]
    ae2c:	9b01      	ldr	r3, [sp, #4]
    ae2e:	4293      	cmp	r3, r2
    ae30:	d9f9      	bls.n	ae26 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    ae32:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    ae36:	9001      	str	r0, [sp, #4]
    ae38:	9b01      	ldr	r3, [sp, #4]
    ae3a:	428b      	cmp	r3, r1
    ae3c:	d8ed      	bhi.n	ae1a <HardFault_HandlerC+0x3e>
    ae3e:	9b01      	ldr	r3, [sp, #4]
    ae40:	3301      	adds	r3, #1
    ae42:	9301      	str	r3, [sp, #4]
    ae44:	9b01      	ldr	r3, [sp, #4]
    ae46:	428b      	cmp	r3, r1
    ae48:	d9f9      	bls.n	ae3e <HardFault_HandlerC+0x62>
    ae4a:	e7e6      	b.n	ae1a <HardFault_HandlerC+0x3e>
    ae4c:	401bc000 	.word	0x401bc000
    ae50:	401f8000 	.word	0x401f8000
    ae54:	20001fa8 	.word	0x20001fa8
    ae58:	23c345ff 	.word	0x23c345ff
    ae5c:	11e1a300 	.word	0x11e1a300
    ae60:	000f423f 	.word	0x000f423f
    ae64:	0089543f 	.word	0x0089543f

0000ae68 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    ae68:	4a09      	ldr	r2, [pc, #36]	; (ae90 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    ae6a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    ae6c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    ae6e:	b120      	cbz	r0, ae7a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    ae70:	4418      	add	r0, r3
    ae72:	4908      	ldr	r1, [pc, #32]	; (ae94 <_sbrk+0x2c>)
    ae74:	4288      	cmp	r0, r1
    ae76:	d802      	bhi.n	ae7e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    ae78:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    ae7a:	4618      	mov	r0, r3
    ae7c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    ae7e:	f001 fea1 	bl	cbc4 <__errno>
    ae82:	220c      	movs	r2, #12
                        return (void *)-1;
    ae84:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    ae88:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ae8a:	4618      	mov	r0, r3
    ae8c:	bd08      	pop	{r3, pc}
    ae8e:	bf00      	nop
    ae90:	20001fac 	.word	0x20001fac
    ae94:	20280000 	.word	0x20280000

0000ae98 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    ae98:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    ae9a:	4a06      	ldr	r2, [pc, #24]	; (aeb4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    ae9c:	2107      	movs	r1, #7
    ae9e:	4b06      	ldr	r3, [pc, #24]	; (aeb8 <Panic_Temp_isr+0x20>)
    aea0:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    aea2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    aea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aea8:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    aeaa:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    aeae:	bf30      	wfi
    aeb0:	e7fd      	b.n	aeae <Panic_Temp_isr+0x16>
    aeb2:	bf00      	nop
    aeb4:	400d4000 	.word	0x400d4000
    aeb8:	400ac000 	.word	0x400ac000

0000aebc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    aebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    aebe:	b430      	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    aec0:	b11b      	cbz	r3, aeca <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    aec2:	6853      	ldr	r3, [r2, #4]
    aec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    aec8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    aeca:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    aecc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    aece:	b19c      	cbz	r4, aef8 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    aed0:	4b10      	ldr	r3, [pc, #64]	; (af14 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    aed2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    aed4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    aed8:	420c      	tst	r4, r1
    aeda:	d117      	bne.n	af0c <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    aedc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    aee0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    aee4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    aee8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    aeec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    aef0:	0464      	lsls	r4, r4, #17
    aef2:	d5f3      	bpl.n	aedc <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    aef4:	4229      	tst	r1, r5
    aef6:	d109      	bne.n	af0c <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    aef8:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    aefa:	4c06      	ldr	r4, [pc, #24]	; (af14 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    aefc:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    aefe:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    af00:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    af04:	4319      	orrs	r1, r3
    af06:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    af0a:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    af0c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    af0e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    af10:	bc30      	pop	{r4, r5}
    af12:	4770      	bx	lr
    af14:	402e0000 	.word	0x402e0000

0000af18 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    af18:	b570      	push	{r4, r5, r6, lr}
    af1a:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    af1c:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    af1e:	b190      	cbz	r0, af46 <run_callbacks+0x2e>
    af20:	4602      	mov	r2, r0
    af22:	2400      	movs	r4, #0
    af24:	e003      	b.n	af2e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    af26:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    af28:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    af2a:	2a01      	cmp	r2, #1
    af2c:	d00c      	beq.n	af48 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    af2e:	6853      	ldr	r3, [r2, #4]
    af30:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    af34:	d0f7      	beq.n	af26 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    af36:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    af38:	b12c      	cbz	r4, af46 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    af3a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    af3c:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    af3e:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    af40:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    af42:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    af44:	d1f9      	bne.n	af3a <run_callbacks+0x22>
    af46:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    af48:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    af4a:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    af4c:	e7f4      	b.n	af38 <run_callbacks+0x20>
    af4e:	bf00      	nop

0000af50 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    af50:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    af52:	b9f1      	cbnz	r1, af92 <endpoint0_transmit.constprop.1+0x42>
    af54:	4c22      	ldr	r4, [pc, #136]	; (afe0 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    af56:	4923      	ldr	r1, [pc, #140]	; (afe4 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    af58:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af5a:	4b23      	ldr	r3, [pc, #140]	; (afe8 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    af5c:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af5e:	2580      	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    af60:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    af62:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    af64:	461a      	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af66:	604d      	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    af68:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af6a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    af6e:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af70:	f044 1401 	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    af74:	4d1d      	ldr	r5, [pc, #116]	; (afec <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af76:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    af7a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    af7e:	f041 0101 	orr.w	r1, r1, #1
    af82:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    af86:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    af88:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    af8c:	2b00      	cmp	r3, #0
    af8e:	d1fb      	bne.n	af88 <endpoint0_transmit.constprop.1+0x38>
}
    af90:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    af92:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    af94:	4b16      	ldr	r3, [pc, #88]	; (aff0 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    af96:	4d14      	ldr	r5, [pc, #80]	; (afe8 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    af98:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    af9a:	4c11      	ldr	r4, [pc, #68]	; (afe0 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    af9c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    afa0:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    afa2:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    afa4:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    afa6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    afaa:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    afac:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    afb0:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    afb2:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    afb6:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    afba:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    afbe:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    afc0:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    afc2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    afc6:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    afca:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    afce:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    afd0:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    afd2:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    afd6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    afda:	2b00      	cmp	r3, #0
    afdc:	d1fb      	bne.n	afd6 <endpoint0_transmit.constprop.1+0x86>
    afde:	e7ba      	b.n	af56 <endpoint0_transmit.constprop.1+0x6>
    afe0:	20005000 	.word	0x20005000
    afe4:	20004020 	.word	0x20004020
    afe8:	402e0000 	.word	0x402e0000
    afec:	20002da0 	.word	0x20002da0
    aff0:	20004000 	.word	0x20004000

0000aff4 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    aff8:	4cbc      	ldr	r4, [pc, #752]	; (b2ec <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    affa:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    affc:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    b000:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    b004:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    b008:	d05e      	beq.n	b0c8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b00a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b00e:	2b00      	cmp	r3, #0
    b010:	d055      	beq.n	b0be <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b012:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    b016:	f8df 92fc 	ldr.w	r9, [pc, #764]	; b314 <isr+0x320>
    b01a:	4eb5      	ldr	r6, [pc, #724]	; (b2f0 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b01c:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b01e:	46da      	mov	sl, fp
    b020:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    b022:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    b024:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b028:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b02c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b030:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b034:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b038:	049f      	lsls	r7, r3, #18
    b03a:	d5f5      	bpl.n	b028 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b03c:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    b040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b044:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b048:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b04c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    b050:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    b054:	d1fa      	bne.n	b04c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b056:	b281      	uxth	r1, r0
    b058:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    b05c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b060:	42b9      	cmp	r1, r7
    b062:	f200 80a5 	bhi.w	b1b0 <isr+0x1bc>
    b066:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    b06a:	f080 81eb 	bcs.w	b444 <isr+0x450>
    b06e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    b072:	f000 816a 	beq.w	b34a <isr+0x356>
    b076:	f200 80e4 	bhi.w	b242 <isr+0x24e>
    b07a:	2980      	cmp	r1, #128	; 0x80
    b07c:	f000 8158 	beq.w	b330 <isr+0x33c>
    b080:	2982      	cmp	r1, #130	; 0x82
    b082:	f040 80d6 	bne.w	b232 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b086:	b292      	uxth	r2, r2
    b088:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b08c:	2907      	cmp	r1, #7
    b08e:	f200 80d0 	bhi.w	b232 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b092:	0089      	lsls	r1, r1, #2
    b094:	4897      	ldr	r0, [pc, #604]	; (b2f4 <isr+0x300>)
		reply_buffer[0] = 0;
    b096:	4f98      	ldr	r7, [pc, #608]	; (b2f8 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b098:	4408      	add	r0, r1
    b09a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b09c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    b09e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    b0a0:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b0a2:	f140 820e 	bpl.w	b4c2 <isr+0x4ce>
    b0a6:	03ca      	lsls	r2, r1, #15
    b0a8:	d501      	bpl.n	b0ae <isr+0xba>
			reply_buffer[0] = 1;
    b0aa:	2301      	movs	r3, #1
    b0ac:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    b0ae:	2102      	movs	r1, #2
    b0b0:	4891      	ldr	r0, [pc, #580]	; (b2f8 <isr+0x304>)
    b0b2:	f7ff ff4d 	bl	af50 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b0b6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d1b0      	bne.n	b020 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b0be:	4a8b      	ldr	r2, [pc, #556]	; (b2ec <isr+0x2f8>)
    b0c0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	d150      	bne.n	b16a <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    b0c8:	f018 0f40 	tst.w	r8, #64	; 0x40
    b0cc:	d018      	beq.n	b100 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b0ce:	4b87      	ldr	r3, [pc, #540]	; (b2ec <isr+0x2f8>)
    b0d0:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b0d4:	461a      	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b0d6:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b0da:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    b0de:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b0e2:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    b0e6:	4b81      	ldr	r3, [pc, #516]	; (b2ec <isr+0x2f8>)
    b0e8:	2c00      	cmp	r4, #0
    b0ea:	d1fa      	bne.n	b0e2 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b0ec:	f04f 32ff 	mov.w	r2, #4294967295
    b0f0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b0f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    b0f8:	f000 fd34 	bl	bb64 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    b0fc:	4b7f      	ldr	r3, [pc, #508]	; (b2fc <isr+0x308>)
    b0fe:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    b100:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    b104:	d003      	beq.n	b10e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b106:	4b7e      	ldr	r3, [pc, #504]	; (b300 <isr+0x30c>)
    b108:	681b      	ldr	r3, [r3, #0]
    b10a:	b103      	cbz	r3, b10e <isr+0x11a>
    b10c:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    b10e:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    b112:	d003      	beq.n	b11c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b114:	4b7b      	ldr	r3, [pc, #492]	; (b304 <isr+0x310>)
    b116:	681b      	ldr	r3, [r3, #0]
    b118:	b103      	cbz	r3, b11c <isr+0x128>
    b11a:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    b11c:	f018 0f04 	tst.w	r8, #4
    b120:	d008      	beq.n	b134 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b122:	4b72      	ldr	r3, [pc, #456]	; (b2ec <isr+0x2f8>)
    b124:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    b128:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    b12c:	d03d      	beq.n	b1aa <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    b12e:	4b76      	ldr	r3, [pc, #472]	; (b308 <isr+0x314>)
    b130:	2201      	movs	r2, #1
    b132:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b134:	4b6d      	ldr	r3, [pc, #436]	; (b2ec <isr+0x2f8>)
    b136:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b13a:	0612      	lsls	r2, r2, #24
    b13c:	d512      	bpl.n	b164 <isr+0x170>
    b13e:	f018 0f80 	tst.w	r8, #128	; 0x80
    b142:	d00f      	beq.n	b164 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    b144:	4971      	ldr	r1, [pc, #452]	; (b30c <isr+0x318>)
    b146:	780a      	ldrb	r2, [r1, #0]
    b148:	b162      	cbz	r2, b164 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    b14a:	3a01      	subs	r2, #1
    b14c:	b2d2      	uxtb	r2, r2
    b14e:	700a      	strb	r2, [r1, #0]
    b150:	b942      	cbnz	r2, b164 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    b152:	496f      	ldr	r1, [pc, #444]	; (b310 <isr+0x31c>)
    b154:	780a      	ldrb	r2, [r1, #0]
    b156:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    b15a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    b15c:	2a00      	cmp	r2, #0
    b15e:	f000 8232 	beq.w	b5c6 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    b162:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    b164:	b003      	add	sp, #12
    b166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    b16a:	496a      	ldr	r1, [pc, #424]	; (b314 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    b16c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    b170:	6808      	ldr	r0, [r1, #0]
    b172:	4203      	tst	r3, r0
    b174:	f040 81eb 	bne.w	b54e <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    b178:	4a60      	ldr	r2, [pc, #384]	; (b2fc <isr+0x308>)
    b17a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    b17c:	401c      	ands	r4, r3
    b17e:	d0a3      	beq.n	b0c8 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b180:	0763      	lsls	r3, r4, #29
    b182:	f100 822f 	bmi.w	b5e4 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b186:	0367      	lsls	r7, r4, #13
    b188:	f100 8228 	bmi.w	b5dc <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b18c:	0726      	lsls	r6, r4, #28
    b18e:	f100 8231 	bmi.w	b5f4 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b192:	0325      	lsls	r5, r4, #12
    b194:	f100 822a 	bmi.w	b5ec <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b198:	06e0      	lsls	r0, r4, #27
    b19a:	f100 821b 	bmi.w	b5d4 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b19e:	02e1      	lsls	r1, r4, #11
    b1a0:	d592      	bpl.n	b0c8 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b1a2:	485d      	ldr	r0, [pc, #372]	; (b318 <isr+0x324>)
    b1a4:	f7ff feb8 	bl	af18 <run_callbacks>
    b1a8:	e78e      	b.n	b0c8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    b1aa:	4a57      	ldr	r2, [pc, #348]	; (b308 <isr+0x314>)
    b1ac:	7013      	strb	r3, [r2, #0]
    b1ae:	e7c1      	b.n	b134 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b1b0:	f242 0721 	movw	r7, #8225	; 0x2021
    b1b4:	42b9      	cmp	r1, r7
    b1b6:	d038      	beq.n	b22a <isr+0x236>
    b1b8:	d86f      	bhi.n	b29a <isr+0x2a6>
    b1ba:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    b1be:	f000 8133 	beq.w	b428 <isr+0x434>
    b1c2:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    b1c6:	d134      	bne.n	b232 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    b1c8:	f3c0 4007 	ubfx	r0, r0, #16, #8
    b1cc:	4a53      	ldr	r2, [pc, #332]	; (b31c <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b1ce:	4954      	ldr	r1, [pc, #336]	; (b320 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    b1d0:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b1d2:	4f54      	ldr	r7, [pc, #336]	; (b324 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b1d4:	4a54      	ldr	r2, [pc, #336]	; (b328 <isr+0x334>)
    b1d6:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b1d8:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b1dc:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b1e0:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    b1e4:	f000 fcc0 	bl	bb68 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b1e8:	4a50      	ldr	r2, [pc, #320]	; (b32c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b1ea:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1ec:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b1ee:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b1f0:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b1f2:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1f4:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b1f6:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b1fa:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b1fc:	f041 1101 	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b200:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b202:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b206:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
    b20a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b20e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b212:	4a40      	ldr	r2, [pc, #256]	; (b314 <isr+0x320>)
    b214:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    b216:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b21a:	2b00      	cmp	r3, #0
    b21c:	d1fb      	bne.n	b216 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b21e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b222:	2b00      	cmp	r3, #0
    b224:	f47f aefc 	bne.w	b020 <isr+0x2c>
    b228:	e749      	b.n	b0be <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    b22a:	0c11      	lsrs	r1, r2, #16
    b22c:	2907      	cmp	r1, #7
    b22e:	f000 814c 	beq.w	b4ca <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b232:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b236:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b23a:	2b00      	cmp	r3, #0
    b23c:	f47f aef0 	bne.w	b020 <isr+0x2c>
    b240:	e73d      	b.n	b0be <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b242:	f240 3702 	movw	r7, #770	; 0x302
    b246:	42b9      	cmp	r1, r7
    b248:	f000 80bb 	beq.w	b3c2 <isr+0x3ce>
    b24c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    b250:	d1ef      	bne.n	b232 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b252:	4a36      	ldr	r2, [pc, #216]	; (b32c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b254:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b256:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b258:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b25a:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b25c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b25e:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b262:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b264:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b268:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b26a:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b26e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    b272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b276:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b27a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b27e:	2b00      	cmp	r3, #0
    b280:	d1fb      	bne.n	b27a <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b282:	0c03      	lsrs	r3, r0, #16
    b284:	065b      	lsls	r3, r3, #25
    b286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    b28a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b28e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b292:	2b00      	cmp	r3, #0
    b294:	f47f aec4 	bne.w	b020 <isr+0x2c>
    b298:	e711      	b.n	b0be <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b29a:	f242 2321 	movw	r3, #8737	; 0x2221
    b29e:	4299      	cmp	r1, r3
    b2a0:	f000 8086 	beq.w	b3b0 <isr+0x3bc>
    b2a4:	f242 3321 	movw	r3, #8993	; 0x2321
    b2a8:	4299      	cmp	r1, r3
    b2aa:	d1c2      	bne.n	b232 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b2ac:	4b1f      	ldr	r3, [pc, #124]	; (b32c <isr+0x338>)
    b2ae:	2101      	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b2b0:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b2b2:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b2b4:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b2b6:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b2b8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b2bc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b2be:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b2c2:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b2c4:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b2c6:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b2ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b2ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b2d2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b2d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d1fb      	bne.n	b2d6 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b2de:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	f47f ae9c 	bne.w	b020 <isr+0x2c>
    b2e8:	e6e9      	b.n	b0be <isr+0xca>
    b2ea:	bf00      	nop
    b2ec:	402e0000 	.word	0x402e0000
    b2f0:	20005000 	.word	0x20005000
    b2f4:	402e01c0 	.word	0x402e01c0
    b2f8:	20002db0 	.word	0x20002db0
    b2fc:	20002d90 	.word	0x20002d90
    b300:	20002d8c 	.word	0x20002d8c
    b304:	20002d98 	.word	0x20002d98
    b308:	20002d9c 	.word	0x20002d9c
    b30c:	20002da4 	.word	0x20002da4
    b310:	20002d94 	.word	0x20002d94
    b314:	20002da0 	.word	0x20002da0
    b318:	20005240 	.word	0x20005240
    b31c:	20002dc0 	.word	0x20002dc0
    b320:	000200c8 	.word	0x000200c8
    b324:	00cc0002 	.word	0x00cc0002
    b328:	00c80002 	.word	0x00c80002
    b32c:	20004020 	.word	0x20004020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    b330:	4aba      	ldr	r2, [pc, #744]	; (b61c <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    b332:	2102      	movs	r1, #2
    b334:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    b336:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b338:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b33a:	f7ff fe09 	bl	af50 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b33e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b342:	2b00      	cmp	r3, #0
    b344:	f47f ae6c 	bne.w	b020 <isr+0x2c>
    b348:	e6b9      	b.n	b0be <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b34a:	b292      	uxth	r2, r2
    b34c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b350:	2b07      	cmp	r3, #7
    b352:	f63f af6e 	bhi.w	b232 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b356:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b35a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b35e:	4ab0      	ldr	r2, [pc, #704]	; (b620 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b360:	f04f 0101 	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b364:	441a      	add	r2, r3
    b366:	6813      	ldr	r3, [r2, #0]
    b368:	bf14      	ite	ne
    b36a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b36e:	f023 0301 	biceq.w	r3, r3, #1
    b372:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b374:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b376:	4bab      	ldr	r3, [pc, #684]	; (b624 <isr+0x630>)
    b378:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b37a:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b37c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b37e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b382:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b384:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b388:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b38a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b38c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b390:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b398:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b39c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d1fb      	bne.n	b39c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b3a4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b3a8:	2b00      	cmp	r3, #0
    b3aa:	f47f ae39 	bne.w	b020 <isr+0x2c>
    b3ae:	e686      	b.n	b0be <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b3b0:	4b9d      	ldr	r3, [pc, #628]	; (b628 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    b3b2:	f3c0 4007 	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b3b6:	4a9d      	ldr	r2, [pc, #628]	; (b62c <isr+0x638>)
    b3b8:	6819      	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b3ba:	4b9d      	ldr	r3, [pc, #628]	; (b630 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b3bc:	6011      	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b3be:	7018      	strb	r0, [r3, #0]
    b3c0:	e774      	b.n	b2ac <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b3c2:	b292      	uxth	r2, r2
    b3c4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b3c8:	2b07      	cmp	r3, #7
    b3ca:	f63f af32 	bhi.w	b232 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b3ce:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b3d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b3d6:	4a92      	ldr	r2, [pc, #584]	; (b620 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b3d8:	f04f 0101 	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b3dc:	441a      	add	r2, r3
    b3de:	6813      	ldr	r3, [r2, #0]
    b3e0:	bf14      	ite	ne
    b3e2:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b3e6:	f043 0301 	orreq.w	r3, r3, #1
    b3ea:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b3ec:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b3ee:	4b8d      	ldr	r3, [pc, #564]	; (b624 <isr+0x630>)
    b3f0:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b3f2:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b3f4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b3f6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b3fa:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b3fc:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b400:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b402:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b404:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b408:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b40c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b410:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b414:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b418:	2b00      	cmp	r3, #0
    b41a:	d1fb      	bne.n	b414 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b41c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b420:	2b00      	cmp	r3, #0
    b422:	f47f adfd 	bne.w	b020 <isr+0x2c>
    b426:	e64a      	b.n	b0be <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b428:	4a82      	ldr	r2, [pc, #520]	; (b634 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b42a:	2101      	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b42c:	4b7b      	ldr	r3, [pc, #492]	; (b61c <isr+0x628>)
    b42e:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b430:	4618      	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b432:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b434:	f7ff fd8c 	bl	af50 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b438:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b43c:	2b00      	cmp	r3, #0
    b43e:	f47f adef 	bne.w	b020 <isr+0x2c>
    b442:	e63c      	b.n	b0be <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b444:	4b7c      	ldr	r3, [pc, #496]	; (b638 <isr+0x644>)
    b446:	6859      	ldr	r1, [r3, #4]
    b448:	2900      	cmp	r1, #0
    b44a:	f43f aef2 	beq.w	b232 <isr+0x23e>
    b44e:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b450:	fa1f fe82 	uxth.w	lr, r2
    b454:	e004      	b.n	b460 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b456:	330c      	adds	r3, #12
    b458:	6859      	ldr	r1, [r3, #4]
    b45a:	2900      	cmp	r1, #0
    b45c:	f43f aee9 	beq.w	b232 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b460:	881f      	ldrh	r7, [r3, #0]
    b462:	4287      	cmp	r7, r0
    b464:	d1f7      	bne.n	b456 <isr+0x462>
    b466:	885f      	ldrh	r7, [r3, #2]
    b468:	4577      	cmp	r7, lr
    b46a:	d1f4      	bne.n	b456 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    b46c:	0a07      	lsrs	r7, r0, #8
    b46e:	2f03      	cmp	r7, #3
    b470:	f000 8106 	beq.w	b680 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    b474:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    b476:	0c12      	lsrs	r2, r2, #16
    b478:	4293      	cmp	r3, r2
    b47a:	bf28      	it	cs
    b47c:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    b47e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    b482:	f000 80bb 	beq.w	b5fc <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    b486:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    b48a:	f000 8089 	beq.w	b5a0 <isr+0x5ac>
    b48e:	4f6b      	ldr	r7, [pc, #428]	; (b63c <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b490:	461a      	mov	r2, r3
    b492:	9301      	str	r3, [sp, #4]
    b494:	4638      	mov	r0, r7
    b496:	f7fe ffc1 	bl	a41c <memcpy>
    b49a:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b49c:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b4a0:	441f      	add	r7, r3
	asm("dsb");
    b4a2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b4a6:	4966      	ldr	r1, [pc, #408]	; (b640 <isr+0x64c>)
    b4a8:	600a      	str	r2, [r1, #0]
		location += 32;
    b4aa:	3220      	adds	r2, #32
	} while (location < end_addr);
    b4ac:	4297      	cmp	r7, r2
    b4ae:	d8fa      	bhi.n	b4a6 <isr+0x4b2>
	asm("dsb");
    b4b0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b4b4:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b4b8:	4860      	ldr	r0, [pc, #384]	; (b63c <isr+0x648>)
    b4ba:	4619      	mov	r1, r3
    b4bc:	f7ff fd48 	bl	af50 <endpoint0_transmit.constprop.1>
    b4c0:	e5f9      	b.n	b0b6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b4c2:	07cb      	lsls	r3, r1, #31
    b4c4:	f57f adf3 	bpl.w	b0ae <isr+0xba>
    b4c8:	e5ef      	b.n	b0aa <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b4ca:	4f5e      	ldr	r7, [pc, #376]	; (b644 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b4cc:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    b4d0:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b4d2:	495d      	ldr	r1, [pc, #372]	; (b648 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b4d4:	4b5d      	ldr	r3, [pc, #372]	; (b64c <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b4d6:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b4d8:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b4dc:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b4de:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    b4e2:	495b      	ldr	r1, [pc, #364]	; (b650 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b4e4:	607a      	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b4e6:	ea40 020e 	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b4ea:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b4ee:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    b4f2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b4f4:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b4f8:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b4fc:	f501 4280 	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b500:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b502:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b504:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b508:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b50a:	619a      	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    b50c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b510:	2b00      	cmp	r3, #0
    b512:	d1fb      	bne.n	b50c <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    b514:	4a43      	ldr	r2, [pc, #268]	; (b624 <isr+0x630>)
    b516:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b518:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b51c:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b51e:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b520:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b524:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b526:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b52a:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b52c:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b530:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b532:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b536:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    b53a:	4303      	orrs	r3, r0
    b53c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b540:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    b544:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b548:	2b00      	cmp	r3, #0
    b54a:	d1fb      	bne.n	b544 <isr+0x550>
    b54c:	e5b3      	b.n	b0b6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    b54e:	4c3d      	ldr	r4, [pc, #244]	; (b644 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b550:	f242 0021 	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    b554:	2500      	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b556:	8824      	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    b558:	600d      	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b55a:	4284      	cmp	r4, r0
    b55c:	f47f ae0c 	bne.w	b178 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b560:	493b      	ldr	r1, [pc, #236]	; (b650 <isr+0x65c>)
    b562:	4c3c      	ldr	r4, [pc, #240]	; (b654 <isr+0x660>)
    b564:	c903      	ldmia	r1, {r0, r1}
    b566:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    b568:	2886      	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b56a:	6020      	str	r0, [r4, #0]
    b56c:	80a1      	strh	r1, [r4, #4]
    b56e:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    b570:	f47f ae02 	bne.w	b178 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    b574:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    b576:	4838      	ldr	r0, [pc, #224]	; (b658 <isr+0x664>)
    b578:	7801      	ldrb	r1, [r0, #0]
    b57a:	f041 0104 	orr.w	r1, r1, #4
    b57e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b580:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b584:	0608      	lsls	r0, r1, #24
    b586:	d406      	bmi.n	b596 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b588:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b58c:	2080      	movs	r0, #128	; 0x80
    b58e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b592:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    b596:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b598:	4a30      	ldr	r2, [pc, #192]	; (b65c <isr+0x668>)
    b59a:	2150      	movs	r1, #80	; 0x50
    b59c:	7011      	strb	r1, [r2, #0]
    b59e:	e5eb      	b.n	b178 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    b5a0:	482f      	ldr	r0, [pc, #188]	; (b660 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b5a2:	461a      	mov	r2, r3
    b5a4:	4f25      	ldr	r7, [pc, #148]	; (b63c <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    b5a6:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    b5aa:	492e      	ldr	r1, [pc, #184]	; (b664 <isr+0x670>)
    b5ac:	482e      	ldr	r0, [pc, #184]	; (b668 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    b5ae:	9301      	str	r3, [sp, #4]
    b5b0:	f1be 0f00 	cmp.w	lr, #0
    b5b4:	bf08      	it	eq
    b5b6:	4601      	moveq	r1, r0
    b5b8:	4638      	mov	r0, r7
    b5ba:	f7fe ff2f 	bl	a41c <memcpy>
					usb_descriptor_buffer[1] = 7;
    b5be:	2207      	movs	r2, #7
    b5c0:	9b01      	ldr	r3, [sp, #4]
    b5c2:	707a      	strb	r2, [r7, #1]
    b5c4:	e76a      	b.n	b49c <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    b5c6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b5ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b5ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    b5d2:	e5c6      	b.n	b162 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b5d4:	4825      	ldr	r0, [pc, #148]	; (b66c <isr+0x678>)
    b5d6:	f7ff fc9f 	bl	af18 <run_callbacks>
    b5da:	e5e0      	b.n	b19e <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b5dc:	4824      	ldr	r0, [pc, #144]	; (b670 <isr+0x67c>)
    b5de:	f7ff fc9b 	bl	af18 <run_callbacks>
    b5e2:	e5d3      	b.n	b18c <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b5e4:	4823      	ldr	r0, [pc, #140]	; (b674 <isr+0x680>)
    b5e6:	f7ff fc97 	bl	af18 <run_callbacks>
    b5ea:	e5cc      	b.n	b186 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b5ec:	4822      	ldr	r0, [pc, #136]	; (b678 <isr+0x684>)
    b5ee:	f7ff fc93 	bl	af18 <run_callbacks>
    b5f2:	e5d1      	b.n	b198 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b5f4:	4821      	ldr	r0, [pc, #132]	; (b67c <isr+0x688>)
    b5f6:	f7ff fc8f 	bl	af18 <run_callbacks>
    b5fa:	e5ca      	b.n	b192 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    b5fc:	4818      	ldr	r0, [pc, #96]	; (b660 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b5fe:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    b600:	4919      	ldr	r1, [pc, #100]	; (b668 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b602:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    b604:	4817      	ldr	r0, [pc, #92]	; (b664 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    b606:	9301      	str	r3, [sp, #4]
    b608:	2f00      	cmp	r7, #0
    b60a:	bf08      	it	eq
    b60c:	4601      	moveq	r1, r0
    b60e:	480b      	ldr	r0, [pc, #44]	; (b63c <isr+0x648>)
    b610:	f7fe ff04 	bl	a41c <memcpy>
    b614:	4f09      	ldr	r7, [pc, #36]	; (b63c <isr+0x648>)
    b616:	9b01      	ldr	r3, [sp, #4]
    b618:	e740      	b.n	b49c <isr+0x4a8>
    b61a:	bf00      	nop
    b61c:	20002db0 	.word	0x20002db0
    b620:	402e01c0 	.word	0x402e01c0
    b624:	20004020 	.word	0x20004020
    b628:	20002d58 	.word	0x20002d58
    b62c:	20005288 	.word	0x20005288
    b630:	20002f08 	.word	0x20002f08
    b634:	20002dc0 	.word	0x20002dc0
    b638:	20001c08 	.word	0x20001c08
    b63c:	20200000 	.word	0x20200000
    b640:	e000ef70 	.word	0xe000ef70
    b644:	20002da8 	.word	0x20002da8
    b648:	00070080 	.word	0x00070080
    b64c:	20004000 	.word	0x20004000
    b650:	20002db8 	.word	0x20002db8
    b654:	20005280 	.word	0x20005280
    b658:	20002d94 	.word	0x20002d94
    b65c:	20002da4 	.word	0x20002da4
    b660:	20002d9c 	.word	0x20002d9c
    b664:	600017a0 	.word	0x600017a0
    b668:	600017e4 	.word	0x600017e4
    b66c:	20005200 	.word	0x20005200
    b670:	20005140 	.word	0x20005140
    b674:	20005100 	.word	0x20005100
    b678:	200051c0 	.word	0x200051c0
    b67c:	20005180 	.word	0x20005180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    b680:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    b682:	780b      	ldrb	r3, [r1, #0]
    b684:	4293      	cmp	r3, r2
    b686:	bf28      	it	cs
    b688:	4613      	movcs	r3, r2
    b68a:	e6fc      	b.n	b486 <isr+0x492>

0000b68c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b68c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b68e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    b692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b696:	bf14      	ite	ne
    b698:	2700      	movne	r7, #0
    b69a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b69e:	2a02      	cmp	r2, #2
    b6a0:	d901      	bls.n	b6a6 <usb_config_rx+0x1a>
    b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6a6:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    b6aa:	f8df 9040 	ldr.w	r9, [pc, #64]	; b6ec <usb_config_rx+0x60>
    b6ae:	460d      	mov	r5, r1
    b6b0:	4604      	mov	r4, r0
    b6b2:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b6b6:	2100      	movs	r1, #0
    b6b8:	2240      	movs	r2, #64	; 0x40
    b6ba:	4698      	mov	r8, r3
    b6bc:	4630      	mov	r0, r6
    b6be:	f001 fe57 	bl	d370 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b6c2:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    b6c4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    b6c8:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    b6cc:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b6d0:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    b6d2:	f1b8 0f00 	cmp.w	r8, #0
    b6d6:	d0e4      	beq.n	b6a2 <usb_config_rx+0x16>
    b6d8:	4b03      	ldr	r3, [pc, #12]	; (b6e8 <usb_config_rx+0x5c>)
    b6da:	40a0      	lsls	r0, r4
    b6dc:	681c      	ldr	r4, [r3, #0]
    b6de:	4320      	orrs	r0, r4
    b6e0:	6018      	str	r0, [r3, #0]
    b6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6e6:	bf00      	nop
    b6e8:	20002d90 	.word	0x20002d90
    b6ec:	20005000 	.word	0x20005000

0000b6f0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b6f0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6f2:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    b6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b6fa:	bf14      	ite	ne
    b6fc:	2700      	movne	r7, #0
    b6fe:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b702:	2a02      	cmp	r2, #2
    b704:	d901      	bls.n	b70a <usb_config_tx+0x1a>
    b706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b70a:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b70c:	01c5      	lsls	r5, r0, #7
    b70e:	f8df 9044 	ldr.w	r9, [pc, #68]	; b754 <usb_config_tx+0x64>
    b712:	4688      	mov	r8, r1
    b714:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b716:	2100      	movs	r1, #0
    b718:	4604      	mov	r4, r0
    b71a:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b71c:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b720:	4650      	mov	r0, sl
    b722:	f001 fe25 	bl	d370 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b726:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    b728:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    b72c:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    b730:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b734:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b738:	2e00      	cmp	r6, #0
    b73a:	d0e4      	beq.n	b706 <usb_config_tx+0x16>
    b73c:	f104 0010 	add.w	r0, r4, #16
    b740:	4b03      	ldr	r3, [pc, #12]	; (b750 <usb_config_tx+0x60>)
    b742:	4082      	lsls	r2, r0
    b744:	6818      	ldr	r0, [r3, #0]
    b746:	4302      	orrs	r2, r0
    b748:	601a      	str	r2, [r3, #0]
    b74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b74e:	bf00      	nop
    b750:	20002d90 	.word	0x20002d90
    b754:	20005000 	.word	0x20005000

0000b758 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b758:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    b75a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    b75c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b75e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    b762:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b764:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    b766:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    b768:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    b76c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    b770:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b774:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    b778:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    b77a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b77c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    b77e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    b780:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    b782:	bcf0      	pop	{r4, r5, r6, r7}
    b784:	4770      	bx	lr
    b786:	bf00      	nop

0000b788 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b788:	1e83      	subs	r3, r0, #2
    b78a:	2b02      	cmp	r3, #2
    b78c:	d900      	bls.n	b790 <usb_transmit+0x8>
    b78e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    b790:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    b792:	4b06      	ldr	r3, [pc, #24]	; (b7ac <usb_transmit+0x24>)
    b794:	f100 0410 	add.w	r4, r0, #16
    b798:	2501      	movs	r5, #1
    b79a:	460a      	mov	r2, r1
    b79c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    b7a0:	fa05 f104 	lsl.w	r1, r5, r4
}
    b7a4:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    b7a6:	f7ff bb89 	b.w	aebc <schedule_transfer>
    b7aa:	bf00      	nop
    b7ac:	20005040 	.word	0x20005040

0000b7b0 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b7b0:	1e83      	subs	r3, r0, #2
    b7b2:	2b02      	cmp	r3, #2
    b7b4:	d900      	bls.n	b7b8 <usb_receive+0x8>
    b7b6:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    b7b8:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b7ba:	4b05      	ldr	r3, [pc, #20]	; (b7d0 <usb_receive+0x20>)
    b7bc:	2401      	movs	r4, #1
    b7be:	460a      	mov	r2, r1
    b7c0:	fa04 f100 	lsl.w	r1, r4, r0
    b7c4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    b7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b7cc:	f7ff bb76 	b.w	aebc <schedule_transfer>
    b7d0:	20005000 	.word	0x20005000

0000b7d4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b7d4:	6840      	ldr	r0, [r0, #4]
#endif
}
    b7d6:	4770      	bx	lr

0000b7d8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b7d8:	4a12      	ldr	r2, [pc, #72]	; (b824 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b7da:	4b13      	ldr	r3, [pc, #76]	; (b828 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b7dc:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    b7e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b7e4:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b7e6:	b510      	push	{r4, lr}
    b7e8:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b7ea:	d802      	bhi.n	b7f2 <usb_init_serialnumber+0x1a>
    b7ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b7f0:	0040      	lsls	r0, r0, #1
    b7f2:	4c0e      	ldr	r4, [pc, #56]	; (b82c <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b7f4:	a901      	add	r1, sp, #4
    b7f6:	220a      	movs	r2, #10
    b7f8:	f001 f82a 	bl	c850 <ultoa>
    b7fc:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b7fe:	2300      	movs	r3, #0
    b800:	4620      	mov	r0, r4
		char c = buf[i];
    b802:	f811 2b01 	ldrb.w	r2, [r1], #1
    b806:	3301      	adds	r3, #1
		if (!c) break;
    b808:	b13a      	cbz	r2, b81a <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b80a:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b80c:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b810:	d1f7      	bne.n	b802 <usb_init_serialnumber+0x2a>
    b812:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b814:	7023      	strb	r3, [r4, #0]
}
    b816:	b004      	add	sp, #16
    b818:	bd10      	pop	{r4, pc}
    b81a:	005b      	lsls	r3, r3, #1
    b81c:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b81e:	7023      	strb	r3, [r4, #0]
}
    b820:	b004      	add	sp, #16
    b822:	bd10      	pop	{r4, pc}
    b824:	401f4400 	.word	0x401f4400
    b828:	0098967f 	.word	0x0098967f
    b82c:	20001fc4 	.word	0x20001fc4

0000b830 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b832:	4914      	ldr	r1, [pc, #80]	; (b884 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b834:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b838:	4d13      	ldr	r5, [pc, #76]	; (b888 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    b83a:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b83c:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b840:	4e12      	ldr	r6, [pc, #72]	; (b88c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b842:	4a13      	ldr	r2, [pc, #76]	; (b890 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b844:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    b848:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b84a:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b84c:	4628      	mov	r0, r5
    b84e:	8832      	ldrh	r2, [r6, #0]
    b850:	f7ff ff82 	bl	b758 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    b854:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b856:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b85a:	4421      	add	r1, r4
	asm("dsb");
    b85c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    b860:	4a0c      	ldr	r2, [pc, #48]	; (b894 <rx_queue_transfer+0x64>)
    b862:	6013      	str	r3, [r2, #0]
		location += 32;
    b864:	3320      	adds	r3, #32
	} while (location < end_addr);
    b866:	4299      	cmp	r1, r3
    b868:	d8fb      	bhi.n	b862 <rx_queue_transfer+0x32>
	asm("dsb");
    b86a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b86e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b872:	2003      	movs	r0, #3
    b874:	4629      	mov	r1, r5
    b876:	f7ff ff9b 	bl	b7b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b87a:	4b07      	ldr	r3, [pc, #28]	; (b898 <rx_queue_transfer+0x68>)
    b87c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b880:	601a      	str	r2, [r3, #0]
    b882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b884:	20200060 	.word	0x20200060
    b888:	20002de0 	.word	0x20002de0
    b88c:	20002eee 	.word	0x20002eee
    b890:	e000e18c 	.word	0xe000e18c
    b894:	e000ef5c 	.word	0xe000ef5c
    b898:	e000e10c 	.word	0xe000e10c

0000b89c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b89c:	4a24      	ldr	r2, [pc, #144]	; (b930 <rx_event+0x94>)
    b89e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    b8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b8a4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    b8a8:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    b8aa:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b8ac:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    b8ae:	2c00      	cmp	r4, #0
    b8b0:	dd38      	ble.n	b924 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    b8b2:	4920      	ldr	r1, [pc, #128]	; (b934 <rx_event+0x98>)
		if (head != rx_tail) {
    b8b4:	4a20      	ldr	r2, [pc, #128]	; (b938 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    b8b6:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    b8b8:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    b8ba:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    b8bc:	481f      	ldr	r0, [pc, #124]	; (b93c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    b8be:	4e20      	ldr	r6, [pc, #128]	; (b940 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    b8c0:	4293      	cmp	r3, r2
    b8c2:	d007      	beq.n	b8d4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    b8c4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    b8c8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    b8cc:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    b8d0:	4294      	cmp	r4, r2
    b8d2:	d912      	bls.n	b8fa <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    b8d4:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    b8d6:	2200      	movs	r2, #0
    b8d8:	4f1a      	ldr	r7, [pc, #104]	; (b944 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    b8da:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    b8dc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    b8e0:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    b8e4:	4e18      	ldr	r6, [pc, #96]	; (b948 <rx_event+0xac>)
    b8e6:	bf94      	ite	ls
    b8e8:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    b8ea:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    b8ec:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    b8ee:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    b8f0:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    b8f2:	4414      	add	r4, r2
    b8f4:	6034      	str	r4, [r6, #0]
    b8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b8fa:	4b14      	ldr	r3, [pc, #80]	; (b94c <rx_event+0xb0>)
    b8fc:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    b900:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    b902:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b904:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    b908:	4418      	add	r0, r3
    b90a:	f7fe fd87 	bl	a41c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    b90e:	4a0e      	ldr	r2, [pc, #56]	; (b948 <rx_event+0xac>)
				rx_queue_transfer(i);
    b910:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    b912:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    b916:	6813      	ldr	r3, [r2, #0]
    b918:	441c      	add	r4, r3
    b91a:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    b91c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    b920:	f7ff bf86 	b.w	b830 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    b924:	4628      	mov	r0, r5
	}
}
    b926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    b92a:	f7ff bf81 	b.w	b830 <rx_queue_transfer>
    b92e:	bf00      	nop
    b930:	20002eee 	.word	0x20002eee
    b934:	20002f04 	.word	0x20002f04
    b938:	20002ee0 	.word	0x20002ee0
    b93c:	20002ee4 	.word	0x20002ee4
    b940:	20002ef0 	.word	0x20002ef0
    b944:	20002dc4 	.word	0x20002dc4
    b948:	20002f00 	.word	0x20002f00
    b94c:	20200060 	.word	0x20200060

0000b950 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    b950:	4b1e      	ldr	r3, [pc, #120]	; (b9cc <usb_serial_flush_callback+0x7c>)
    b952:	781a      	ldrb	r2, [r3, #0]
    b954:	b95a      	cbnz	r2, b96e <usb_serial_flush_callback+0x1e>
    b956:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    b95a:	4a1d      	ldr	r2, [pc, #116]	; (b9d0 <usb_serial_flush_callback+0x80>)
    b95c:	7812      	ldrb	r2, [r2, #0]
    b95e:	b132      	cbz	r2, b96e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    b964:	4d1b      	ldr	r5, [pc, #108]	; (b9d4 <usb_serial_flush_callback+0x84>)
    b966:	882a      	ldrh	r2, [r5, #0]
    b968:	b912      	cbnz	r2, b970 <usb_serial_flush_callback+0x20>
    b96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b96e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b970:	4e19      	ldr	r6, [pc, #100]	; (b9d8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    b972:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b976:	4f19      	ldr	r7, [pc, #100]	; (b9dc <usb_serial_flush_callback+0x8c>)
    b978:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b97a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b97c:	4c18      	ldr	r4, [pc, #96]	; (b9e0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b97e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b982:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b986:	4638      	mov	r0, r7
    b988:	4621      	mov	r1, r4
    b98a:	f7ff fee5 	bl	b758 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    b98e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b992:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    b996:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b99a:	4b12      	ldr	r3, [pc, #72]	; (b9e4 <usb_serial_flush_callback+0x94>)
    b99c:	6019      	str	r1, [r3, #0]
		location += 32;
    b99e:	3120      	adds	r1, #32
	} while (location < end_addr);
    b9a0:	428a      	cmp	r2, r1
    b9a2:	d8fb      	bhi.n	b99c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    b9a4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b9a8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b9ac:	2004      	movs	r0, #4
    b9ae:	4639      	mov	r1, r7
    b9b0:	f7ff feea 	bl	b788 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b9b4:	7833      	ldrb	r3, [r6, #0]
    b9b6:	4a08      	ldr	r2, [pc, #32]	; (b9d8 <usb_serial_flush_callback+0x88>)
    b9b8:	3301      	adds	r3, #1
    b9ba:	b2db      	uxtb	r3, r3
    b9bc:	2b03      	cmp	r3, #3
    b9be:	bf88      	it	hi
    b9c0:	2300      	movhi	r3, #0
    b9c2:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    b9c4:	2300      	movs	r3, #0
    b9c6:	802b      	strh	r3, [r5, #0]
    b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9cc:	20002dd6 	.word	0x20002dd6
    b9d0:	20002dc0 	.word	0x20002dc0
    b9d4:	20002f06 	.word	0x20002f06
    b9d8:	20002dd7 	.word	0x20002dd7
    b9dc:	20002f20 	.word	0x20002f20
    b9e0:	20201060 	.word	0x20201060
    b9e4:	e000ef70 	.word	0xe000ef70

0000b9e8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9ec:	b085      	sub	sp, #20
    b9ee:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    b9f0:	9101      	str	r1, [sp, #4]
    b9f2:	2900      	cmp	r1, #0
    b9f4:	f000 80a2 	beq.w	bb3c <usb_serial_write.part.1+0x154>
    b9f8:	2300      	movs	r3, #0
    b9fa:	f8df 815c 	ldr.w	r8, [pc, #348]	; bb58 <usb_serial_write.part.1+0x170>
    b9fe:	f8df 914c 	ldr.w	r9, [pc, #332]	; bb4c <usb_serial_write.part.1+0x164>
    ba02:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    ba04:	4e4e      	ldr	r6, [pc, #312]	; (bb40 <usb_serial_write.part.1+0x158>)
    ba06:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    ba0a:	f8df a150 	ldr.w	sl, [pc, #336]	; bb5c <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    ba0e:	f8df b150 	ldr.w	fp, [pc, #336]	; bb60 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    ba12:	4a4c      	ldr	r2, [pc, #304]	; (bb44 <usb_serial_write.part.1+0x15c>)
    ba14:	7814      	ldrb	r4, [r2, #0]
    ba16:	4a4c      	ldr	r2, [pc, #304]	; (bb48 <usb_serial_write.part.1+0x160>)
    ba18:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	d16e      	bne.n	bafe <usb_serial_write.part.1+0x116>
    ba20:	461d      	mov	r5, r3
    ba22:	461c      	mov	r4, r3
    ba24:	e014      	b.n	ba50 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    ba26:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    ba2a:	b904      	cbnz	r4, ba2e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    ba2c:	6835      	ldr	r5, [r6, #0]
    ba2e:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    ba30:	2b00      	cmp	r3, #0
    ba32:	d15e      	bne.n	baf2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    ba34:	6833      	ldr	r3, [r6, #0]
    ba36:	1b5b      	subs	r3, r3, r5
    ba38:	2b78      	cmp	r3, #120	; 0x78
    ba3a:	d879      	bhi.n	bb30 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    ba3c:	f89a 3000 	ldrb.w	r3, [sl]
    ba40:	2b00      	cmp	r3, #0
    ba42:	d056      	beq.n	baf2 <usb_serial_write.part.1+0x10a>
			yield();
    ba44:	f000 feb4 	bl	c7b0 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    ba48:	f8b8 3000 	ldrh.w	r3, [r8]
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	d154      	bne.n	bafa <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    ba50:	4638      	mov	r0, r7
    ba52:	f7ff febf 	bl	b7d4 <usb_transfer_status>
			if (!(status & 0x80)) {
    ba56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    ba5a:	4a3c      	ldr	r2, [pc, #240]	; (bb4c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    ba5c:	d1e3      	bne.n	ba26 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    ba5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    ba62:	4a38      	ldr	r2, [pc, #224]	; (bb44 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    ba64:	f889 0000 	strb.w	r0, [r9]
    ba68:	7814      	ldrb	r4, [r2, #0]
    ba6a:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    ba6c:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ba70:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    ba72:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ba74:	4936      	ldr	r1, [pc, #216]	; (bb50 <usb_serial_write.part.1+0x168>)
    ba76:	4420      	add	r0, r4
		if (size >= tx_available) {
    ba78:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ba7a:	4408      	add	r0, r1
		if (size >= tx_available) {
    ba7c:	d343      	bcc.n	bb06 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ba7e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    ba80:	9902      	ldr	r1, [sp, #8]
    ba82:	f7fe fccb 	bl	a41c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ba86:	2300      	movs	r3, #0
    ba88:	4621      	mov	r1, r4
    ba8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ba8e:	4638      	mov	r0, r7
    ba90:	f7ff fe62 	bl	b758 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ba94:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    ba98:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    ba9c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    baa0:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    baa4:	3320      	adds	r3, #32
	} while (location < end_addr);
    baa6:	429c      	cmp	r4, r3
    baa8:	d8fa      	bhi.n	baa0 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    baaa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    baae:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    bab2:	2004      	movs	r0, #4
    bab4:	4639      	mov	r1, r7
    bab6:	f7ff fe67 	bl	b788 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    baba:	4b22      	ldr	r3, [pc, #136]	; (bb44 <usb_serial_write.part.1+0x15c>)
    babc:	4a21      	ldr	r2, [pc, #132]	; (bb44 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    babe:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    bac0:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    bac2:	4824      	ldr	r0, [pc, #144]	; (bb54 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    bac4:	3301      	adds	r3, #1
    bac6:	b2db      	uxtb	r3, r3
    bac8:	2b03      	cmp	r3, #3
    baca:	bf88      	it	hi
    bacc:	2300      	movhi	r3, #0
    bace:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    bad0:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    bad4:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    bad6:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    bada:	4413      	add	r3, r2
    badc:	9300      	str	r3, [sp, #0]
			data += tx_available;
    bade:	9b02      	ldr	r3, [sp, #8]
    bae0:	4413      	add	r3, r2
    bae2:	9302      	str	r3, [sp, #8]
    bae4:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    bae6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    baea:	9901      	ldr	r1, [sp, #4]
    baec:	1a8a      	subs	r2, r1, r2
    baee:	9201      	str	r2, [sp, #4]
    baf0:	d18f      	bne.n	ba12 <usb_serial_write.part.1+0x2a>
    baf2:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    baf4:	b005      	add	sp, #20
    baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bafa:	4a12      	ldr	r2, [pc, #72]	; (bb44 <usb_serial_write.part.1+0x15c>)
    bafc:	7814      	ldrb	r4, [r2, #0]
    bafe:	461a      	mov	r2, r3
    bb00:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    bb04:	e7b4      	b.n	ba70 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    bb06:	9c01      	ldr	r4, [sp, #4]
    bb08:	9902      	ldr	r1, [sp, #8]
    bb0a:	4622      	mov	r2, r4
    bb0c:	9303      	str	r3, [sp, #12]
    bb0e:	f7fe fc85 	bl	a41c <memcpy>
			tx_available -= size;
    bb12:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    bb14:	4a0f      	ldr	r2, [pc, #60]	; (bb54 <usb_serial_write.part.1+0x16c>)
    bb16:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    bb1a:	1b1b      	subs	r3, r3, r4
    bb1c:	f8a8 3000 	strh.w	r3, [r8]
    bb20:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    bb22:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    bb26:	4618      	mov	r0, r3
    bb28:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bb2a:	b005      	add	sp, #20
    bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    bb30:	2301      	movs	r3, #1
				return sent;
    bb32:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    bb34:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bb36:	b005      	add	sp, #20
    bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bb3c:	9801      	ldr	r0, [sp, #4]
    bb3e:	e7d9      	b.n	baf4 <usb_serial_write.part.1+0x10c>
    bb40:	20002d58 	.word	0x20002d58
    bb44:	20002dd7 	.word	0x20002dd7
    bb48:	20002f20 	.word	0x20002f20
    bb4c:	20002f05 	.word	0x20002f05
    bb50:	20201060 	.word	0x20201060
    bb54:	402e0000 	.word	0x402e0000
    bb58:	20002f06 	.word	0x20002f06
    bb5c:	20002dc0 	.word	0x20002dc0
    bb60:	e000ef70 	.word	0xe000ef70

0000bb64 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    bb64:	4770      	bx	lr
    bb66:	bf00      	nop

0000bb68 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    bb68:	4b31      	ldr	r3, [pc, #196]	; (bc30 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    bb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    bb6e:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    bb70:	4f30      	ldr	r7, [pc, #192]	; (bc34 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    bb72:	2b00      	cmp	r3, #0
    bb74:	d054      	beq.n	bc20 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    bb76:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    bb7a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; bc68 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    bb7e:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    bb80:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bb84:	2100      	movs	r1, #0
    bb86:	2280      	movs	r2, #128	; 0x80
    bb88:	482b      	ldr	r0, [pc, #172]	; (bc38 <usb_serial_configure+0xd0>)
	tx_head = 0;
    bb8a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bb8c:	4e2b      	ldr	r6, [pc, #172]	; (bc3c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bb8e:	f001 fbef 	bl	d370 <memset>
	tx_head = 0;
    bb92:	4c2b      	ldr	r4, [pc, #172]	; (bc40 <usb_serial_configure+0xd8>)
	tx_available = 0;
    bb94:	4b2b      	ldr	r3, [pc, #172]	; (bc44 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bb96:	4629      	mov	r1, r5
    bb98:	f44f 7280 	mov.w	r2, #256	; 0x100
    bb9c:	482a      	ldr	r0, [pc, #168]	; (bc48 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    bb9e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bba0:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    bba2:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bba4:	f001 fbe4 	bl	d370 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    bba8:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    bbaa:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bbac:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    bbae:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bbb0:	60b5      	str	r5, [r6, #8]
    bbb2:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    bbb4:	4925      	ldr	r1, [pc, #148]	; (bc4c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    bbb6:	4e26      	ldr	r6, [pc, #152]	; (bc50 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    bbb8:	4826      	ldr	r0, [pc, #152]	; (bc54 <usb_serial_configure+0xec>)
	rx_available = 0;
    bbba:	f8df e0b0 	ldr.w	lr, [pc, #176]	; bc6c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    bbbe:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    bbc0:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    bbc2:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    bbc4:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    bbc6:	6035      	str	r5, [r6, #0]
    bbc8:	6075      	str	r5, [r6, #4]
    bbca:	60b5      	str	r5, [r6, #8]
    bbcc:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    bbce:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    bbd2:	f7ff fd8d 	bl	b6f0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bbd6:	f8b8 1000 	ldrh.w	r1, [r8]
    bbda:	462a      	mov	r2, r5
    bbdc:	4b1e      	ldr	r3, [pc, #120]	; (bc58 <usb_serial_configure+0xf0>)
    bbde:	2003      	movs	r0, #3
    bbe0:	f7ff fd54 	bl	b68c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    bbe4:	462b      	mov	r3, r5
    bbe6:	8839      	ldrh	r1, [r7, #0]
    bbe8:	2201      	movs	r2, #1
    bbea:	2004      	movs	r0, #4
    bbec:	f7ff fd80 	bl	b6f0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bbf0:	4620      	mov	r0, r4
    bbf2:	3401      	adds	r4, #1
    bbf4:	f7ff fe1c 	bl	b830 <rx_queue_transfer>
    bbf8:	2c08      	cmp	r4, #8
    bbfa:	d1f9      	bne.n	bbf0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    bbfc:	4b17      	ldr	r3, [pc, #92]	; (bc5c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    bbfe:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    bc00:	4817      	ldr	r0, [pc, #92]	; (bc60 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    bc02:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    bc04:	4c17      	ldr	r4, [pc, #92]	; (bc64 <usb_serial_configure+0xfc>)
    bc06:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    bc08:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    bc0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    bc10:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    bc14:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    bc18:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    bc20:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    bc22:	f8df 8044 	ldr.w	r8, [pc, #68]	; bc68 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    bc26:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    bc28:	f8a8 3000 	strh.w	r3, [r8]
    bc2c:	e7aa      	b.n	bb84 <usb_serial_configure+0x1c>
    bc2e:	bf00      	nop
    bc30:	20002d9c 	.word	0x20002d9c
    bc34:	20002dd4 	.word	0x20002dd4
    bc38:	20002f20 	.word	0x20002f20
    bc3c:	20002ef0 	.word	0x20002ef0
    bc40:	20002dd7 	.word	0x20002dd7
    bc44:	20002f06 	.word	0x20002f06
    bc48:	20002de0 	.word	0x20002de0
    bc4c:	20002f04 	.word	0x20002f04
    bc50:	20002dc4 	.word	0x20002dc4
    bc54:	20002ee0 	.word	0x20002ee0
    bc58:	0000b89d 	.word	0x0000b89d
    bc5c:	402e0000 	.word	0x402e0000
    bc60:	20002d8c 	.word	0x20002d8c
    bc64:	0000b951 	.word	0x0000b951
    bc68:	20002eee 	.word	0x20002eee
    bc6c:	20002f00 	.word	0x20002f00

0000bc70 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    bc70:	4b31      	ldr	r3, [pc, #196]	; (bd38 <usb_serial_read+0xc8>)
    bc72:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    bc76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    bc7a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    bc7c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    bc7e:	4b2f      	ldr	r3, [pc, #188]	; (bd3c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    bc80:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    bc82:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    bc84:	2900      	cmp	r1, #0
    bc86:	d053      	beq.n	bd30 <usb_serial_read+0xc0>
    bc88:	4b2d      	ldr	r3, [pc, #180]	; (bd40 <usb_serial_read+0xd0>)
    bc8a:	b2e4      	uxtb	r4, r4
    bc8c:	781b      	ldrb	r3, [r3, #0]
    bc8e:	429c      	cmp	r4, r3
    bc90:	d050      	beq.n	bd34 <usb_serial_read+0xc4>
    bc92:	4682      	mov	sl, r0
    bc94:	2700      	movs	r7, #0
    bc96:	f8df b0c0 	ldr.w	fp, [pc, #192]	; bd58 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    bc9a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    bc9c:	4b29      	ldr	r3, [pc, #164]	; (bd44 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    bc9e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    bca2:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    bca4:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    bca6:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    bca8:	4b27      	ldr	r3, [pc, #156]	; (bd48 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    bcaa:	bf28      	it	cs
    bcac:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    bcae:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    bcb0:	4b24      	ldr	r3, [pc, #144]	; (bd44 <usb_serial_read+0xd4>)
    bcb2:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    bcb6:	4b25      	ldr	r3, [pc, #148]	; (bd4c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    bcb8:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    bcbc:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    bcc0:	4b23      	ldr	r3, [pc, #140]	; (bd50 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    bcc2:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    bcc6:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    bcc8:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    bcca:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    bccc:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    bcce:	d219      	bcs.n	bd04 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    bcd0:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    bcd4:	4642      	mov	r2, r8
    bcd6:	4419      	add	r1, r3
    bcd8:	f7fe fba0 	bl	a41c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    bcdc:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    bcde:	f8db 1000 	ldr.w	r1, [fp]
    bce2:	4648      	mov	r0, r9
			rx_index[i] += len;
    bce4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    bce8:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    bcec:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    bcee:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    bcf2:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bcf6:	4b17      	ldr	r3, [pc, #92]	; (bd54 <usb_serial_read+0xe4>)
    bcf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bcfc:	601a      	str	r2, [r3, #0]
	return count;
}
    bcfe:	b003      	add	sp, #12
    bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    bd04:	f7fe fb8a 	bl	a41c <memcpy>
			p += avail;
			rx_available -= avail;
    bd08:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    bd0c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    bd0e:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    bd10:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    bd12:	44b2      	add	sl, r6
			rx_available -= avail;
    bd14:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    bd18:	4a08      	ldr	r2, [pc, #32]	; (bd3c <usb_serial_read+0xcc>)
    bd1a:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    bd1c:	f7ff fd88 	bl	b830 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    bd20:	45b9      	cmp	r9, r7
    bd22:	d903      	bls.n	bd2c <usb_serial_read+0xbc>
    bd24:	4b06      	ldr	r3, [pc, #24]	; (bd40 <usb_serial_read+0xd0>)
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	429c      	cmp	r4, r3
    bd2a:	d1b6      	bne.n	bc9a <usb_serial_read+0x2a>
    bd2c:	4638      	mov	r0, r7
    bd2e:	e7e2      	b.n	bcf6 <usb_serial_read+0x86>
    bd30:	4608      	mov	r0, r1
    bd32:	e7e0      	b.n	bcf6 <usb_serial_read+0x86>
    bd34:	2000      	movs	r0, #0
    bd36:	e7de      	b.n	bcf6 <usb_serial_read+0x86>
    bd38:	e000e18c 	.word	0xe000e18c
    bd3c:	20002ee0 	.word	0x20002ee0
    bd40:	20002f04 	.word	0x20002f04
    bd44:	20002dc4 	.word	0x20002dc4
    bd48:	20002ee4 	.word	0x20002ee4
    bd4c:	20002ef0 	.word	0x20002ef0
    bd50:	20200060 	.word	0x20200060
    bd54:	e000e10c 	.word	0xe000e10c
    bd58:	20002f00 	.word	0x20002f00

0000bd5c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    bd5c:	4b0b      	ldr	r3, [pc, #44]	; (bd8c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    bd5e:	4a0c      	ldr	r2, [pc, #48]	; (bd90 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    bd60:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    bd62:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    bd64:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    bd66:	4293      	cmp	r3, r2
    bd68:	d00d      	beq.n	bd86 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    bd6a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    bd6c:	4809      	ldr	r0, [pc, #36]	; (bd94 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    bd6e:	4a0a      	ldr	r2, [pc, #40]	; (bd98 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    bd70:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    bd72:	490a      	ldr	r1, [pc, #40]	; (bd9c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    bd74:	bf28      	it	cs
    bd76:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    bd78:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    bd7a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    bd7e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    bd82:	5c58      	ldrb	r0, [r3, r1]
    bd84:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    bd86:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    bd8a:	4770      	bx	lr
    bd8c:	20002ee0 	.word	0x20002ee0
    bd90:	20002f04 	.word	0x20002f04
    bd94:	20002ee4 	.word	0x20002ee4
    bd98:	20200060 	.word	0x20200060
    bd9c:	20002dc4 	.word	0x20002dc4

0000bda0 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    bda0:	4b01      	ldr	r3, [pc, #4]	; (bda8 <usb_serial_available+0x8>)
    bda2:	6818      	ldr	r0, [r3, #0]
}
    bda4:	4770      	bx	lr
    bda6:	bf00      	nop
    bda8:	20002f00 	.word	0x20002f00

0000bdac <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    bdac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    bdb0:	4e15      	ldr	r6, [pc, #84]	; (be08 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    bdb2:	4d16      	ldr	r5, [pc, #88]	; (be0c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    bdb4:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    bdb6:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    bdb8:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    bdba:	429c      	cmp	r4, r3
    bdbc:	d021      	beq.n	be02 <usb_serial_flush_input+0x56>
    bdbe:	f8df 9054 	ldr.w	r9, [pc, #84]	; be14 <usb_serial_flush_input+0x68>
    bdc2:	f8df b054 	ldr.w	fp, [pc, #84]	; be18 <usb_serial_flush_input+0x6c>
    bdc6:	f8df 8054 	ldr.w	r8, [pc, #84]	; be1c <usb_serial_flush_input+0x70>
    bdca:	4f11      	ldr	r7, [pc, #68]	; (be10 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    bdcc:	3401      	adds	r4, #1
    bdce:	2c08      	cmp	r4, #8
    bdd0:	fa5f fa84 	uxtb.w	sl, r4
    bdd4:	d901      	bls.n	bdda <usb_serial_flush_input+0x2e>
    bdd6:	2400      	movs	r4, #0
    bdd8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    bdda:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    bdde:	f8db 2000 	ldr.w	r2, [fp]
    bde2:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    bde6:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    bde8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    bdec:	1a5b      	subs	r3, r3, r1
    bdee:	1ad3      	subs	r3, r2, r3
    bdf0:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    bdf4:	f7ff fd1c 	bl	b830 <rx_queue_transfer>
		rx_tail = tail;
    bdf8:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    bdfc:	782b      	ldrb	r3, [r5, #0]
    bdfe:	429c      	cmp	r4, r3
    be00:	d1e4      	bne.n	bdcc <usb_serial_flush_input+0x20>
    be02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be06:	bf00      	nop
    be08:	20002ee0 	.word	0x20002ee0
    be0c:	20002f04 	.word	0x20002f04
    be10:	20002dc4 	.word	0x20002dc4
    be14:	20002ee4 	.word	0x20002ee4
    be18:	20002f00 	.word	0x20002f00
    be1c:	20002ef0 	.word	0x20002ef0

0000be20 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    be20:	b500      	push	{lr}
    be22:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    be24:	2101      	movs	r1, #1
    be26:	f10d 0007 	add.w	r0, sp, #7
    be2a:	f7ff ff21 	bl	bc70 <usb_serial_read>
    be2e:	b120      	cbz	r0, be3a <usb_serial_getchar+0x1a>
    be30:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    be34:	b003      	add	sp, #12
    be36:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    be3a:	f04f 30ff 	mov.w	r0, #4294967295
    be3e:	e7f9      	b.n	be34 <usb_serial_getchar+0x14>

0000be40 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    be40:	4b09      	ldr	r3, [pc, #36]	; (be68 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    be42:	b500      	push	{lr}
    be44:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    be46:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    be48:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    be4c:	b923      	cbnz	r3, be58 <usb_serial_putchar+0x18>
    be4e:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    be52:	b003      	add	sp, #12
    be54:	f85d fb04 	ldr.w	pc, [sp], #4
    be58:	2101      	movs	r1, #1
    be5a:	f10d 0007 	add.w	r0, sp, #7
    be5e:	f7ff fdc3 	bl	b9e8 <usb_serial_write.part.1>
    be62:	b003      	add	sp, #12
    be64:	f85d fb04 	ldr.w	pc, [sp], #4
    be68:	20002dc0 	.word	0x20002dc0

0000be6c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    be6c:	4b04      	ldr	r3, [pc, #16]	; (be80 <usb_serial_write+0x14>)
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    be74:	b10b      	cbz	r3, be7a <usb_serial_write+0xe>
    be76:	f7ff bdb7 	b.w	b9e8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    be7a:	4610      	mov	r0, r2
    be7c:	4770      	bx	lr
    be7e:	bf00      	nop
    be80:	20002dc0 	.word	0x20002dc0

0000be84 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    be88:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    be8a:	f8df 8040 	ldr.w	r8, [pc, #64]	; becc <usb_serial_write_buffer_free+0x48>
    be8e:	2301      	movs	r3, #1
    be90:	4d0c      	ldr	r5, [pc, #48]	; (bec4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    be92:	4627      	mov	r7, r4
    be94:	4e0c      	ldr	r6, [pc, #48]	; (bec8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    be96:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    be9a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    be9c:	4628      	mov	r0, r5
    be9e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    bea0:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    bea2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    bea6:	d005      	beq.n	beb4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    bea8:	f7ff fc94 	bl	b7d4 <usb_transfer_status>
    beac:	0603      	lsls	r3, r0, #24
    beae:	bf58      	it	pl
    beb0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    beb4:	2c04      	cmp	r4, #4
    beb6:	d1f0      	bne.n	be9a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    beb8:	2300      	movs	r3, #0
	return sum;
}
    beba:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    bebc:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bec4:	20002f20 	.word	0x20002f20
    bec8:	20002dd7 	.word	0x20002dd7
    becc:	20002dd6 	.word	0x20002dd6

0000bed0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    bed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    bed4:	4b1f      	ldr	r3, [pc, #124]	; (bf54 <usb_serial_flush_output+0x84>)
    bed6:	781b      	ldrb	r3, [r3, #0]
    bed8:	b113      	cbz	r3, bee0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    beda:	4d1f      	ldr	r5, [pc, #124]	; (bf58 <usb_serial_flush_output+0x88>)
    bedc:	882a      	ldrh	r2, [r5, #0]
    bede:	b90a      	cbnz	r2, bee4 <usb_serial_flush_output+0x14>
    bee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    bee4:	f8df 8084 	ldr.w	r8, [pc, #132]	; bf6c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    bee8:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    beec:	4e1b      	ldr	r6, [pc, #108]	; (bf5c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    beee:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    bef2:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bef6:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    bef8:	4c19      	ldr	r4, [pc, #100]	; (bf60 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    befa:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    befc:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    bf00:	4f18      	ldr	r7, [pc, #96]	; (bf64 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    bf02:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bf06:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    bf08:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bf0c:	4621      	mov	r1, r4
    bf0e:	f7ff fc23 	bl	b758 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    bf12:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bf16:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    bf1a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    bf1e:	4b12      	ldr	r3, [pc, #72]	; (bf68 <usb_serial_flush_output+0x98>)
    bf20:	6019      	str	r1, [r3, #0]
		location += 32;
    bf22:	3120      	adds	r1, #32
	} while (location < end_addr);
    bf24:	428a      	cmp	r2, r1
    bf26:	d8fb      	bhi.n	bf20 <usb_serial_flush_output+0x50>
	asm("dsb");
    bf28:	f3bf 8f4f 	dsb	sy
	asm("isb");
    bf2c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    bf30:	2004      	movs	r0, #4
    bf32:	4631      	mov	r1, r6
    bf34:	f7ff fc28 	bl	b788 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    bf38:	f898 3000 	ldrb.w	r3, [r8]
    bf3c:	4a0b      	ldr	r2, [pc, #44]	; (bf6c <usb_serial_flush_output+0x9c>)
    bf3e:	3301      	adds	r3, #1
    bf40:	b2db      	uxtb	r3, r3
    bf42:	2b03      	cmp	r3, #3
    bf44:	bf88      	it	hi
    bf46:	2300      	movhi	r3, #0
    bf48:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    bf4a:	2300      	movs	r3, #0
    bf4c:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    bf4e:	703b      	strb	r3, [r7, #0]
    bf50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bf54:	20002dc0 	.word	0x20002dc0
    bf58:	20002f06 	.word	0x20002f06
    bf5c:	20002f20 	.word	0x20002f20
    bf60:	20201060 	.word	0x20201060
    bf64:	20002dd6 	.word	0x20002dd6
    bf68:	e000ef70 	.word	0xe000ef70
    bf6c:	20002dd7 	.word	0x20002dd7

0000bf70 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    bf70:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bf72:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bf76:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    bf78:	7f43      	ldrb	r3, [r0, #29]
    bf7a:	b933      	cbnz	r3, bf8a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    bf7c:	7f01      	ldrb	r1, [r0, #28]
    bf7e:	2901      	cmp	r1, #1
    bf80:	d008      	beq.n	bf94 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    bf82:	2903      	cmp	r1, #3
    bf84:	d010      	beq.n	bfa8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    bf86:	2301      	movs	r3, #1
    bf88:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bf8a:	b902      	cbnz	r2, bf8e <EventResponder::triggerEventNotImmediate()+0x1e>
    bf8c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    bf8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf92:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    bf94:	4c11      	ldr	r4, [pc, #68]	; (bfdc <EventResponder::triggerEventNotImmediate()+0x6c>)
    bf96:	6821      	ldr	r1, [r4, #0]
    bf98:	b1a1      	cbz	r1, bfc4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    bf9a:	4911      	ldr	r1, [pc, #68]	; (bfe0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    bf9c:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    bf9e:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    bfa0:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    bfa2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    bfa4:	6158      	str	r0, [r3, #20]
    bfa6:	e7ee      	b.n	bf86 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    bfa8:	4c0e      	ldr	r4, [pc, #56]	; (bfe4 <EventResponder::triggerEventNotImmediate()+0x74>)
    bfaa:	6821      	ldr	r1, [r4, #0]
    bfac:	b181      	cbz	r1, bfd0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    bfae:	490e      	ldr	r1, [pc, #56]	; (bfe8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    bfb0:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    bfb2:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    bfb4:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    bfb6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    bfb8:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    bfba:	4b0c      	ldr	r3, [pc, #48]	; (bfec <EventResponder::triggerEventNotImmediate()+0x7c>)
    bfbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    bfc0:	6019      	str	r1, [r3, #0]
    bfc2:	e7e0      	b.n	bf86 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    bfc4:	4b06      	ldr	r3, [pc, #24]	; (bfe0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    bfc6:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    bfc8:	6181      	str	r1, [r0, #24]
				firstYield = this;
    bfca:	6020      	str	r0, [r4, #0]
				lastYield = this;
    bfcc:	6018      	str	r0, [r3, #0]
    bfce:	e7da      	b.n	bf86 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    bfd0:	4b05      	ldr	r3, [pc, #20]	; (bfe8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    bfd2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    bfd4:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    bfd6:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    bfd8:	6018      	str	r0, [r3, #0]
    bfda:	e7ee      	b.n	bfba <EventResponder::triggerEventNotImmediate()+0x4a>
    bfdc:	20002fb0 	.word	0x20002fb0
    bfe0:	20002fac 	.word	0x20002fac
    bfe4:	20002fa0 	.word	0x20002fa0
    bfe8:	20002fa4 	.word	0x20002fa4
    bfec:	e000ed04 	.word	0xe000ed04

0000bff0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    bff0:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bff2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    bff6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bff8:	4c0c      	ldr	r4, [pc, #48]	; (c02c <EventResponder::runFromInterrupt()+0x3c>)
    bffa:	6823      	ldr	r3, [r4, #0]
		if (first) {
    bffc:	b18b      	cbz	r3, c022 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bffe:	4e0c      	ldr	r6, [pc, #48]	; (c030 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c000:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    c002:	695a      	ldr	r2, [r3, #20]
    c004:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    c006:	b17a      	cbz	r2, c028 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    c008:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c00a:	b901      	cbnz	r1, c00e <EventResponder::runFromInterrupt()+0x1e>
    c00c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    c00e:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    c010:	4618      	mov	r0, r3
    c012:	689b      	ldr	r3, [r3, #8]
    c014:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c016:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    c01a:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c01c:	6823      	ldr	r3, [r4, #0]
		if (first) {
    c01e:	2b00      	cmp	r3, #0
    c020:	d1ef      	bne.n	c002 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c022:	b901      	cbnz	r1, c026 <EventResponder::runFromInterrupt()+0x36>
    c024:	b662      	cpsie	i
    c026:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c028:	6032      	str	r2, [r6, #0]
    c02a:	e7ee      	b.n	c00a <EventResponder::runFromInterrupt()+0x1a>
    c02c:	20002fa0 	.word	0x20002fa0
    c030:	20002fa4 	.word	0x20002fa4

0000c034 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    c034:	f7ff bfdc 	b.w	bff0 <EventResponder::runFromInterrupt()>

0000c038 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    c038:	4a18      	ldr	r2, [pc, #96]	; (c09c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    c03a:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    c03c:	6814      	ldr	r4, [r2, #0]
    c03e:	2c00      	cmp	r4, #0
    c040:	d028      	beq.n	c094 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    c042:	6803      	ldr	r3, [r0, #0]
    c044:	6821      	ldr	r1, [r4, #0]
    c046:	428b      	cmp	r3, r1
    c048:	d20f      	bcs.n	c06a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    c04a:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    c04c:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    c04e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    c050:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    c052:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    c054:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    c056:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    c058:	2302      	movs	r3, #2
}
    c05a:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    c05c:	7503      	strb	r3, [r0, #20]
}
    c05e:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    c060:	6003      	str	r3, [r0, #0]
    c062:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    c064:	6811      	ldr	r1, [r2, #0]
    c066:	428b      	cmp	r3, r1
    c068:	d308      	bcc.n	c07c <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    c06a:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    c06c:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    c06e:	2a00      	cmp	r2, #0
    c070:	d1f6      	bne.n	c060 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    c072:	6082      	str	r2, [r0, #8]
		_prev = timer;
    c074:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    c076:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    c078:	60a0      	str	r0, [r4, #8]
    c07a:	e7ed      	b.n	c058 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    c07c:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    c07e:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    c080:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    c082:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    c084:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    c086:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    c088:	68c1      	ldr	r1, [r0, #12]
    c08a:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    c08c:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    c08e:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    c090:	bc30      	pop	{r4, r5}
    c092:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    c094:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    c096:	60c4      	str	r4, [r0, #12]
		listActive = this;
    c098:	6010      	str	r0, [r2, #0]
    c09a:	e7dd      	b.n	c058 <MillisTimer::addToActiveList()+0x20>
    c09c:	20002fa8 	.word	0x20002fa8

0000c0a0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    c0a2:	4e22      	ldr	r6, [pc, #136]	; (c12c <MillisTimer::runFromTimer()+0x8c>)
    c0a4:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    c0a6:	b32c      	cbz	r4, c0f4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    c0a8:	6823      	ldr	r3, [r4, #0]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d13a      	bne.n	c124 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    c0ae:	461d      	mov	r5, r3
    c0b0:	4f1f      	ldr	r7, [pc, #124]	; (c130 <MillisTimer::runFromTimer()+0x90>)
    c0b2:	e004      	b.n	c0be <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    c0b4:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    c0b6:	b1ec      	cbz	r4, c0f4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    c0b8:	6823      	ldr	r3, [r4, #0]
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	d132      	bne.n	c124 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    c0be:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    c0c0:	b103      	cbz	r3, c0c4 <MillisTimer::runFromTimer()+0x24>
    c0c2:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    c0c4:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    c0c6:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    c0c8:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    c0ca:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    c0cc:	681b      	ldr	r3, [r3, #0]
    c0ce:	42bb      	cmp	r3, r7
    c0d0:	d121      	bne.n	c116 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    c0d2:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    c0d4:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    c0d6:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    c0d8:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    c0da:	d020      	beq.n	c11e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    c0dc:	f7ff ff48 	bl	bf70 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    c0e0:	6863      	ldr	r3, [r4, #4]
    c0e2:	2b00      	cmp	r3, #0
    c0e4:	d0e6      	beq.n	c0b4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    c0e6:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    c0e8:	4620      	mov	r0, r4
    c0ea:	f7ff ffa5 	bl	c038 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    c0ee:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    c0f0:	2c00      	cmp	r4, #0
    c0f2:	d1e1      	bne.n	c0b8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0f4:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    c0f8:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    c0fa:	4a0e      	ldr	r2, [pc, #56]	; (c134 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    c0fc:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    c0fe:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    c100:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    c102:	b903      	cbnz	r3, c106 <MillisTimer::runFromTimer()+0x66>
    c104:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    c106:	b128      	cbz	r0, c114 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    c108:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    c10a:	f7ff ff95 	bl	c038 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    c10e:	4620      	mov	r0, r4
    c110:	2800      	cmp	r0, #0
    c112:	d1f9      	bne.n	c108 <MillisTimer::runFromTimer()+0x68>
    c114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    c116:	4622      	mov	r2, r4
    c118:	2100      	movs	r1, #0
    c11a:	4798      	blx	r3
    c11c:	e7e0      	b.n	c0e0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    c11e:	6883      	ldr	r3, [r0, #8]
    c120:	4798      	blx	r3
    c122:	e7dd      	b.n	c0e0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    c124:	3b01      	subs	r3, #1
    c126:	6023      	str	r3, [r4, #0]
			break;
    c128:	e7e4      	b.n	c0f4 <MillisTimer::runFromTimer()+0x54>
    c12a:	bf00      	nop
    c12c:	20002fa8 	.word	0x20002fa8
    c130:	0000a01d 	.word	0x0000a01d
    c134:	20002fb8 	.word	0x20002fb8

0000c138 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c138:	4a04      	ldr	r2, [pc, #16]	; (c14c <systick_isr+0x14>)
    c13a:	4b05      	ldr	r3, [pc, #20]	; (c150 <systick_isr+0x18>)
    c13c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    c13e:	4a05      	ldr	r2, [pc, #20]	; (c154 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c140:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    c142:	6813      	ldr	r3, [r2, #0]
    c144:	3301      	adds	r3, #1
    c146:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    c148:	f7ff bfaa 	b.w	c0a0 <MillisTimer::runFromTimer()>
    c14c:	e0001004 	.word	0xe0001004
    c150:	20002d50 	.word	0x20002d50
    c154:	20002d58 	.word	0x20002d58

0000c158 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c158:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c15a:	f7f3 ff8f 	bl	7c <setup>
	while (1) {
		loop();
    c15e:	f7f4 f913 	bl	388 <loop>
		yield();
    c162:	f000 fb25 	bl	c7b0 <yield>
    c166:	e7fa      	b.n	c15e <main+0x6>

0000c168 <operator new(unsigned int)>:
    c168:	f000 bd8e 	b.w	cc88 <malloc>

0000c16c <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    c16c:	f000 bd8c 	b.w	cc88 <malloc>

0000c170 <operator delete[](void*)>:
	free(ptr);
}

void operator delete[](void * ptr)
{
	free(ptr);
    c170:	f000 bd92 	b.w	cc98 <free>

0000c174 <operator delete(void*, unsigned int)>:
    c174:	f000 bd90 	b.w	cc98 <free>

0000c178 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c17a:	460e      	mov	r6, r1
    c17c:	b171      	cbz	r1, c19c <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c17e:	b17a      	cbz	r2, c1a0 <Print::write(unsigned char const*, unsigned int)+0x28>
    c180:	4607      	mov	r7, r0
    c182:	4614      	mov	r4, r2
    c184:	2500      	movs	r5, #0
    c186:	683b      	ldr	r3, [r7, #0]
    c188:	4638      	mov	r0, r7
    c18a:	f816 1b01 	ldrb.w	r1, [r6], #1
    c18e:	681b      	ldr	r3, [r3, #0]
    c190:	4798      	blx	r3
    c192:	3c01      	subs	r4, #1
    c194:	4405      	add	r5, r0
    c196:	d1f6      	bne.n	c186 <Print::write(unsigned char const*, unsigned int)+0xe>
    c198:	4628      	mov	r0, r5
    c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    c19c:	4608      	mov	r0, r1
    c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1a0:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    c1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c1a4 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    c1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c1a8:	688c      	ldr	r4, [r1, #8]
    c1aa:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c1ac:	b1ec      	cbz	r4, c1ea <Print::print(String const&)+0x46>
    c1ae:	2500      	movs	r5, #0
    c1b0:	4606      	mov	r6, r0
    c1b2:	4689      	mov	r9, r1
    c1b4:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    c1b6:	462b      	mov	r3, r5
    c1b8:	2221      	movs	r2, #33	; 0x21
    c1ba:	a901      	add	r1, sp, #4
    c1bc:	4648      	mov	r0, r9
    c1be:	f000 fa9b 	bl	c6f8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    c1c2:	2c20      	cmp	r4, #32
    c1c4:	4623      	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    c1c6:	6830      	ldr	r0, [r6, #0]
    c1c8:	bf28      	it	cs
    c1ca:	2320      	movcs	r3, #32
    c1cc:	a901      	add	r1, sp, #4
    c1ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
    c1d2:	4630      	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    c1d4:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    c1d6:	461a      	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    c1d8:	441d      	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    c1da:	47c0      	blx	r8
    c1dc:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c1de:	2c00      	cmp	r4, #0
    c1e0:	d1e9      	bne.n	c1b6 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    c1e2:	4638      	mov	r0, r7
    c1e4:	b00b      	add	sp, #44	; 0x2c
    c1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    c1ea:	4627      	mov	r7, r4
    c1ec:	e7f9      	b.n	c1e2 <Print::print(String const&)+0x3e>
    c1ee:	bf00      	nop

0000c1f0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    c1f0:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    c1f2:	4c06      	ldr	r4, [pc, #24]	; (c20c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    c1f4:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    c1f6:	6803      	ldr	r3, [r0, #0]
    c1f8:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    c1fa:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    c1fc:	a901      	add	r1, sp, #4
    c1fe:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    c200:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    c204:	4798      	blx	r3
}
    c206:	b002      	add	sp, #8
    c208:	bd10      	pop	{r4, pc}
    c20a:	bf00      	nop
    c20c:	20001c74 	.word	0x20001c74

0000c210 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    c210:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c212:	b510      	push	{r4, lr}
    c214:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    c216:	685b      	ldr	r3, [r3, #4]
    c218:	4798      	blx	r3
	return len;
}
    c21a:	4620      	mov	r0, r4
    c21c:	bd10      	pop	{r4, pc}
    c21e:	bf00      	nop

0000c220 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    c220:	b40e      	push	{r1, r2, r3}
    c222:	b500      	push	{lr}
    c224:	b082      	sub	sp, #8
    c226:	ab03      	add	r3, sp, #12
    c228:	f853 1b04 	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    c22c:	461a      	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    c22e:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    c230:	f001 ff18 	bl	e064 <vdprintf>
#endif
}
    c234:	b002      	add	sp, #8
    c236:	f85d eb04 	ldr.w	lr, [sp], #4
    c23a:	b003      	add	sp, #12
    c23c:	4770      	bx	lr
    c23e:	bf00      	nop

0000c240 <Print::printf(__FlashStringHelper const*, ...)>:

int Print::printf(const __FlashStringHelper *format, ...)
{
    c240:	b40e      	push	{r1, r2, r3}
    c242:	b500      	push	{lr}
    c244:	b082      	sub	sp, #8
    c246:	ab03      	add	r3, sp, #12
    c248:	f853 1b04 	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;
#else
	return vdprintf((int)this, (const char *)format, ap);
    c24c:	461a      	mov	r2, r3
}

int Print::printf(const __FlashStringHelper *format, ...)
{
	va_list ap;
	va_start(ap, format);
    c24e:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;
#else
	return vdprintf((int)this, (const char *)format, ap);
    c250:	f001 ff08 	bl	e064 <vdprintf>
#endif
}
    c254:	b002      	add	sp, #8
    c256:	f85d eb04 	ldr.w	lr, [sp], #4
    c25a:	b003      	add	sp, #12
    c25c:	4770      	bx	lr
    c25e:	bf00      	nop

0000c260 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c260:	b5f0      	push	{r4, r5, r6, r7, lr}
    c262:	4606      	mov	r6, r0
    c264:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c266:	2a00      	cmp	r2, #0
    c268:	d033      	beq.n	c2d2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c26a:	2a01      	cmp	r2, #1
    c26c:	bf08      	it	eq
    c26e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    c270:	b351      	cbz	r1, c2c8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    c272:	2521      	movs	r5, #33	; 0x21
    c274:	e000      	b.n	c278 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c276:	b2fd      	uxtb	r5, r7
    c278:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    c27a:	fbb1 f4f2 	udiv	r4, r1, r2
    c27e:	fb02 1114 	mls	r1, r2, r4, r1
    c282:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c284:	2909      	cmp	r1, #9
    c286:	f100 0137 	add.w	r1, r0, #55	; 0x37
    c28a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c28e:	bf88      	it	hi
    c290:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    c292:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c294:	ac0a      	add	r4, sp, #40	; 0x28
    c296:	bf98      	it	ls
    c298:	b2c0      	uxtbls	r0, r0
    c29a:	442c      	add	r4, r5
    c29c:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    c2a0:	2900      	cmp	r1, #0
    c2a2:	d1e8      	bne.n	c276 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    c2a4:	b133      	cbz	r3, c2b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    c2a6:	3d01      	subs	r5, #1
		buf[i] = '-';
    c2a8:	ab0a      	add	r3, sp, #40	; 0x28
    c2aa:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    c2ac:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    c2ae:	442b      	add	r3, r5
    c2b0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c2b4:	6833      	ldr	r3, [r6, #0]
    c2b6:	a901      	add	r1, sp, #4
    c2b8:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    c2bc:	4630      	mov	r0, r6
    c2be:	4429      	add	r1, r5
    c2c0:	685b      	ldr	r3, [r3, #4]
    c2c2:	4798      	blx	r3
}
    c2c4:	b00b      	add	sp, #44	; 0x2c
    c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    c2c8:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c2ca:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    c2cc:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    c2d0:	e7e8      	b.n	c2a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    c2d2:	6803      	ldr	r3, [r0, #0]
    c2d4:	b2c9      	uxtb	r1, r1
    c2d6:	681b      	ldr	r3, [r3, #0]
    c2d8:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c2da:	b00b      	add	sp, #44	; 0x2c
    c2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2de:	bf00      	nop

0000c2e0 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c2e0:	b570      	push	{r4, r5, r6, lr}
    c2e2:	4d0a      	ldr	r5, [pc, #40]	; (c30c <Stream::timedRead()+0x2c>)
    c2e4:	4604      	mov	r4, r0
    c2e6:	682e      	ldr	r6, [r5, #0]
    c2e8:	e006      	b.n	c2f8 <Stream::timedRead()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    c2ea:	f000 fa61 	bl	c7b0 <yield>
    c2ee:	682b      	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    c2f0:	68a2      	ldr	r2, [r4, #8]
    c2f2:	1b9b      	subs	r3, r3, r6
    c2f4:	4293      	cmp	r3, r2
    c2f6:	d206      	bcs.n	c306 <Stream::timedRead()+0x26>
    c = read();
    c2f8:	6823      	ldr	r3, [r4, #0]
    c2fa:	4620      	mov	r0, r4
    c2fc:	695b      	ldr	r3, [r3, #20]
    c2fe:	4798      	blx	r3
    if (c >= 0) return c;
    c300:	2800      	cmp	r0, #0
    c302:	dbf2      	blt.n	c2ea <Stream::timedRead()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    c304:	bd70      	pop	{r4, r5, r6, pc}
  do {
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    c306:	f04f 30ff 	mov.w	r0, #4294967295
}
    c30a:	bd70      	pop	{r4, r5, r6, pc}
    c30c:	20002d58 	.word	0x20002d58

0000c310 <Stream::readString(unsigned int)>:
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}

String Stream::readString(size_t max)
{
    c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c312:	4616      	mov	r6, r2
    c314:	460f      	mov	r7, r1
	String str;
    c316:	2100      	movs	r1, #0
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}

String Stream::readString(size_t max)
{
    c318:	4605      	mov	r5, r0
	String str;
    c31a:	f000 f86f 	bl	c3fc <String::String(char const*)>
	size_t length = 0;
	while (length < max) {
    c31e:	b186      	cbz	r6, c342 <Stream::readString(unsigned int)+0x32>
    c320:	2400      	movs	r4, #0
    c322:	e004      	b.n	c32e <Stream::readString(unsigned int)+0x1e>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0) break;
    c324:	d00d      	beq.n	c342 <Stream::readString(unsigned int)+0x32>
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    c326:	f000 f979 	bl	c61c <String::append(char)>

String Stream::readString(size_t max)
{
	String str;
	size_t length = 0;
	while (length < max) {
    c32a:	42a6      	cmp	r6, r4
    c32c:	d009      	beq.n	c342 <Stream::readString(unsigned int)+0x32>
		int c = timedRead();
    c32e:	4638      	mov	r0, r7
			setReadError();
			break;	// timeout
		}
		if (c == 0) break;
		str += (char)c;
		length++;
    c330:	3401      	adds	r4, #1
String Stream::readString(size_t max)
{
	String str;
	size_t length = 0;
	while (length < max) {
		int c = timedRead();
    c332:	f7ff ffd5 	bl	c2e0 <Stream::timedRead()>
		if (c < 0) {
    c336:	1e01      	subs	r1, r0, #0
    c338:	4628      	mov	r0, r5
    c33a:	b2c9      	uxtb	r1, r1
    c33c:	daf2      	bge.n	c324 <Stream::readString(unsigned int)+0x14>
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c33e:	2301      	movs	r3, #1
    c340:	733b      	strb	r3, [r7, #12]
		if (c == 0) break;
		str += (char)c;
		length++;
	}
	return str;
}
    c342:	4628      	mov	r0, r5
    c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c346:	bf00      	nop

0000c348 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    c348:	f7ff bd30 	b.w	bdac <usb_serial_flush_input>

0000c34c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    c34c:	f7ff bd06 	b.w	bd5c <usb_serial_peekchar>

0000c350 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    c350:	f7ff bd66 	b.w	be20 <usb_serial_getchar>

0000c354 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    c354:	f7ff bd24 	b.w	bda0 <usb_serial_available>

0000c358 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c358:	f7ff bdba 	b.w	bed0 <usb_serial_flush_output>

0000c35c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c35c:	f7ff bd92 	b.w	be84 <usb_serial_write_buffer_free>

0000c360 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c360:	4608      	mov	r0, r1
    c362:	4611      	mov	r1, r2
    c364:	f7ff bd82 	b.w	be6c <usb_serial_write>

0000c368 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c368:	4608      	mov	r0, r1
    c36a:	f7ff bd69 	b.w	be40 <usb_serial_putchar>
    c36e:	bf00      	nop

0000c370 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    c370:	4b01      	ldr	r3, [pc, #4]	; (c378 <serialEvent()+0x8>)
    c372:	2200      	movs	r2, #0
    c374:	701a      	strb	r2, [r3, #0]
    c376:	4770      	bx	lr
    c378:	20001fda 	.word	0x20001fda

0000c37c <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    c37c:	b510      	push	{r4, lr}
    c37e:	4604      	mov	r4, r0
{
	free(buffer);
    c380:	6800      	ldr	r0, [r0, #0]
    c382:	f000 fc89 	bl	cc98 <free>
}
    c386:	4620      	mov	r0, r4
    c388:	bd10      	pop	{r4, pc}
    c38a:	bf00      	nop

0000c38c <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    c38c:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    c38e:	6843      	ldr	r3, [r0, #4]
    c390:	428b      	cmp	r3, r1
    c392:	d301      	bcc.n	c398 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c394:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    c396:	bd38      	pop	{r3, r4, r5, pc}
    c398:	460d      	mov	r5, r1
    c39a:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    c39c:	3101      	adds	r1, #1
    c39e:	6800      	ldr	r0, [r0, #0]
    c3a0:	f001 f838 	bl	d414 <realloc>
	if (newbuffer) {
    c3a4:	2800      	cmp	r0, #0
    c3a6:	d0f6      	beq.n	c396 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c3a8:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    c3aa:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	d1f0      	bne.n	c394 <String::reserve(unsigned int)+0x8>
    c3b2:	7003      	strb	r3, [r0, #0]
    c3b4:	e7ee      	b.n	c394 <String::reserve(unsigned int)+0x8>
    c3b6:	bf00      	nop

0000c3b8 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3ba:	4604      	mov	r4, r0
	if (length == 0) {
    c3bc:	4615      	mov	r5, r2
    c3be:	b932      	cbnz	r2, c3ce <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    c3c0:	6803      	ldr	r3, [r0, #0]
    c3c2:	b103      	cbz	r3, c3c6 <String::copy(char const*, unsigned int)+0xe>
    c3c4:	701a      	strb	r2, [r3, #0]
		len = 0;
    c3c6:	2300      	movs	r3, #0
    c3c8:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c3ca:	4620      	mov	r0, r4
    c3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3ce:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    c3d0:	4611      	mov	r1, r2
    c3d2:	f7ff ffdb 	bl	c38c <String::reserve(unsigned int)>
    c3d6:	4607      	mov	r7, r0
    c3d8:	b948      	cbnz	r0, c3ee <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    c3da:	6820      	ldr	r0, [r4, #0]
    c3dc:	b110      	cbz	r0, c3e4 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    c3de:	f000 fc5b 	bl	cc98 <free>
			buffer = NULL;
    c3e2:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    c3e4:	2300      	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c3e6:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    c3e8:	6063      	str	r3, [r4, #4]
    c3ea:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    c3ee:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    c3f0:	4631      	mov	r1, r6
    c3f2:	6820      	ldr	r0, [r4, #0]
    c3f4:	f001 fbf2 	bl	dbdc <strcpy>
	return *this;
    c3f8:	e7e7      	b.n	c3ca <String::copy(char const*, unsigned int)+0x12>
    c3fa:	bf00      	nop

0000c3fc <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    c3fc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c3fe:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    c400:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c402:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c404:	6043      	str	r3, [r0, #4]
	len = 0;
    c406:	6083      	str	r3, [r0, #8]
	flags = 0;
    c408:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    c40a:	b141      	cbz	r1, c41e <String::String(char const*)+0x22>
    c40c:	460d      	mov	r5, r1
    c40e:	4608      	mov	r0, r1
    c410:	f001 fc56 	bl	dcc0 <strlen>
    c414:	4602      	mov	r2, r0
    c416:	4629      	mov	r1, r5
    c418:	4620      	mov	r0, r4
    c41a:	f7ff ffcd 	bl	c3b8 <String::copy(char const*, unsigned int)>
}
    c41e:	4620      	mov	r0, r4
    c420:	bd38      	pop	{r3, r4, r5, pc}
    c422:	bf00      	nop

0000c424 <String::String(__FlashStringHelper const*)>:

String::String(const __FlashStringHelper *pgmstr)
    c424:	b538      	push	{r3, r4, r5, lr}
    c426:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c428:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    c42a:	460d      	mov	r5, r1
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    c42c:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c42e:	6023      	str	r3, [r4, #0]
	capacity = 0;
    c430:	6063      	str	r3, [r4, #4]
	len = 0;
    c432:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c434:	7323      	strb	r3, [r4, #12]
    c436:	f001 fc43 	bl	dcc0 <strlen>
    c43a:	4629      	mov	r1, r5
    c43c:	4602      	mov	r2, r0
    c43e:	4620      	mov	r0, r4
    c440:	f7ff ffba 	bl	c3b8 <String::copy(char const*, unsigned int)>

String::String(const __FlashStringHelper *pgmstr)
{
	init();
	*this = pgmstr;
}
    c444:	4620      	mov	r0, r4
    c446:	bd38      	pop	{r3, r4, r5, pc}

0000c448 <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c448:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c44a:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    c44c:	b510      	push	{r4, lr}
    c44e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c450:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c452:	6043      	str	r3, [r0, #4]
	len = 0;
    c454:	6083      	str	r3, [r0, #8]
	flags = 0;
    c456:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c458:	d003      	beq.n	c462 <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    c45a:	688a      	ldr	r2, [r1, #8]
    c45c:	6809      	ldr	r1, [r1, #0]
    c45e:	f7ff ffab 	bl	c3b8 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    c462:	4620      	mov	r0, r4
    c464:	bd10      	pop	{r4, pc}
    c466:	bf00      	nop

0000c468 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    c468:	b538      	push	{r3, r4, r5, lr}
    c46a:	460c      	mov	r4, r1
    c46c:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    c46e:	4608      	mov	r0, r1
    c470:	f001 fc26 	bl	dcc0 <strlen>
    c474:	4621      	mov	r1, r4
    c476:	4602      	mov	r2, r0
    c478:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    c47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    c47e:	f7ff bf9b 	b.w	c3b8 <String::copy(char const*, unsigned int)>
    c482:	bf00      	nop

0000c484 <String::String(unsigned char)>:
{
	init();
	*this = c;
}

String::String(unsigned char c)
    c484:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c486:	2300      	movs	r3, #0
{
	init();
	*this = c;
}

String::String(unsigned char c)
    c488:	4604      	mov	r4, r0
    c48a:	b082      	sub	sp, #8
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c48c:	220a      	movs	r2, #10
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c48e:	6023      	str	r3, [r4, #0]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c490:	4608      	mov	r0, r1
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c492:	6063      	str	r3, [r4, #4]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c494:	a901      	add	r1, sp, #4

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
    c496:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c498:	7323      	strb	r3, [r4, #12]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c49a:	f001 fdbb 	bl	e014 <utoa>
    c49e:	a901      	add	r1, sp, #4
    c4a0:	4620      	mov	r0, r4
    c4a2:	f7ff ffe1 	bl	c468 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    c4a6:	4620      	mov	r0, r4
    c4a8:	b002      	add	sp, #8
    c4aa:	bd10      	pop	{r4, pc}

0000c4ac <String::String(int, unsigned char)>:

String::String(const int value, unsigned char base)
    c4ac:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c4ae:	2300      	movs	r3, #0
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    c4b0:	4604      	mov	r4, r0
    c4b2:	b086      	sub	sp, #24
{
	init();
	char buf[18];
	itoa(value, buf, base);
    c4b4:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c4b6:	6023      	str	r3, [r4, #0]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    c4b8:	a901      	add	r1, sp, #4
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c4ba:	6063      	str	r3, [r4, #4]
	len = 0;
    c4bc:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c4be:	7323      	strb	r3, [r4, #12]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    c4c0:	f000 fbc6 	bl	cc50 <itoa>
    c4c4:	a901      	add	r1, sp, #4
    c4c6:	4620      	mov	r0, r4
    c4c8:	f7ff ffce 	bl	c468 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    c4cc:	4620      	mov	r0, r4
    c4ce:	b006      	add	sp, #24
    c4d0:	bd10      	pop	{r4, pc}
    c4d2:	bf00      	nop

0000c4d4 <String::String(unsigned long, unsigned char)>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    c4d4:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c4d6:	2300      	movs	r3, #0
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    c4d8:	4604      	mov	r4, r0
    c4da:	b08a      	sub	sp, #40	; 0x28
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    c4dc:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c4de:	6023      	str	r3, [r4, #0]

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    c4e0:	a901      	add	r1, sp, #4
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c4e2:	6063      	str	r3, [r4, #4]
	len = 0;
    c4e4:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c4e6:	7323      	strb	r3, [r4, #12]

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    c4e8:	f000 f9b2 	bl	c850 <ultoa>
    c4ec:	a901      	add	r1, sp, #4
    c4ee:	4620      	mov	r0, r4
    c4f0:	f7ff ffba 	bl	c468 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    c4f4:	4620      	mov	r0, r4
    c4f6:	b00a      	add	sp, #40	; 0x28
    c4f8:	bd10      	pop	{r4, pc}
    c4fa:	bf00      	nop

0000c4fc <String::move(String&)>:
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    c4fc:	b538      	push	{r3, r4, r5, lr}
    c4fe:	4605      	mov	r5, r0
	if (buffer) {
    c500:	6800      	ldr	r0, [r0, #0]
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    c502:	460c      	mov	r4, r1
	if (buffer) {
    c504:	b128      	cbz	r0, c512 <String::move(String&)+0x16>
		if (capacity >= rhs.len) {
    c506:	686a      	ldr	r2, [r5, #4]
    c508:	688b      	ldr	r3, [r1, #8]
    c50a:	429a      	cmp	r2, r3
    c50c:	d20b      	bcs.n	c526 <String::move(String&)+0x2a>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    c50e:	f000 fbc3 	bl	cc98 <free>
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
    c512:	2300      	movs	r3, #0
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    c514:	6820      	ldr	r0, [r4, #0]
	capacity = rhs.capacity;
    c516:	6861      	ldr	r1, [r4, #4]
	len = rhs.len;
    c518:	68a2      	ldr	r2, [r4, #8]
    c51a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	rhs.buffer = NULL;
    c51e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    c520:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    c522:	60a3      	str	r3, [r4, #8]
    c524:	bd38      	pop	{r3, r4, r5, pc}

void String::move(String &rhs)
{
	if (buffer) {
		if (capacity >= rhs.len) {
			strcpy(buffer, rhs.buffer);
    c526:	6809      	ldr	r1, [r1, #0]
    c528:	f001 fb58 	bl	dbdc <strcpy>
			len = rhs.len;
    c52c:	68a2      	ldr	r2, [r4, #8]
			rhs.len = 0;
    c52e:	2300      	movs	r3, #0
void String::move(String &rhs)
{
	if (buffer) {
		if (capacity >= rhs.len) {
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
    c530:	60aa      	str	r2, [r5, #8]
			rhs.len = 0;
    c532:	60a3      	str	r3, [r4, #8]
			return;
    c534:	bd38      	pop	{r3, r4, r5, pc}
    c536:	bf00      	nop

0000c538 <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c538:	4281      	cmp	r1, r0
    c53a:	d003      	beq.n	c544 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    c53c:	688a      	ldr	r2, [r1, #8]
    c53e:	6809      	ldr	r1, [r1, #0]
    c540:	f7ff bf3a 	b.w	c3b8 <String::copy(char const*, unsigned int)>
}
    c544:	4770      	bx	lr
    c546:	bf00      	nop

0000c548 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
    c548:	4288      	cmp	r0, r1
	return copy(rhs.buffer, rhs.len);
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    c54a:	b510      	push	{r4, lr}
    c54c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    c54e:	d001      	beq.n	c554 <String::operator=(String&&)+0xc>
    c550:	f7ff ffd4 	bl	c4fc <String::move(String&)>
	return *this;
}
    c554:	4620      	mov	r0, r4
    c556:	bd10      	pop	{r4, pc}

0000c558 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    c558:	b510      	push	{r4, lr}
    c55a:	4604      	mov	r4, r0
	if (cstr) {
    c55c:	b119      	cbz	r1, c566 <String::operator=(char const*)+0xe>
    c55e:	f7ff ff83 	bl	c468 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    c562:	4620      	mov	r0, r4
    c564:	bd10      	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    c566:	60a1      	str	r1, [r4, #8]
	}
	return *this;
}
    c568:	4620      	mov	r0, r4
    c56a:	bd10      	pop	{r4, pc}

0000c56c <String::operator=(__FlashStringHelper const*)>:

String & String::operator = (const __FlashStringHelper *pgmstr)
{
    c56c:	b538      	push	{r3, r4, r5, lr}
    c56e:	4604      	mov	r4, r0
    c570:	460d      	mov	r5, r1
    c572:	4608      	mov	r0, r1
    c574:	f001 fba4 	bl	dcc0 <strlen>
    c578:	4629      	mov	r1, r5
    c57a:	4602      	mov	r2, r0
    c57c:	4620      	mov	r0, r4
    c57e:	f7ff ff1b 	bl	c3b8 <String::copy(char const*, unsigned int)>
	copy(pgmstr);
	return *this;
}
    c582:	4620      	mov	r0, r4
    c584:	bd38      	pop	{r3, r4, r5, pc}
    c586:	bf00      	nop

0000c588 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c58c:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c58e:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c590:	4604      	mov	r4, r0
    c592:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c594:	42bb      	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    c596:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c598:	d80a      	bhi.n	c5b0 <String::append(char const*, unsigned int)+0x28>
    c59a:	185a      	adds	r2, r3, r1
    c59c:	4297      	cmp	r7, r2
    c59e:	d207      	bcs.n	c5b0 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    c5a0:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    c5a4:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c5a8:	b935      	cbnz	r5, c5b8 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    c5aa:	4620      	mov	r0, r4
    c5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    c5b0:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c5b4:	2d00      	cmp	r5, #0
    c5b6:	d0f8      	beq.n	c5aa <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    c5b8:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c5ba:	4620      	mov	r0, r4
    c5bc:	4631      	mov	r1, r6
    c5be:	f7ff fee5 	bl	c38c <String::reserve(unsigned int)>
    c5c2:	2800      	cmp	r0, #0
    c5c4:	d0f1      	beq.n	c5aa <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    c5c6:	f1b8 0f00 	cmp.w	r8, #0
    c5ca:	d00e      	beq.n	c5ea <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    c5cc:	6823      	ldr	r3, [r4, #0]
    c5ce:	462a      	mov	r2, r5
    c5d0:	68a0      	ldr	r0, [r4, #8]
    c5d2:	eb03 0109 	add.w	r1, r3, r9
    c5d6:	4418      	add	r0, r3
    c5d8:	f7fd ff20 	bl	a41c <memcpy>
		buffer[newlen] = 0;
    c5dc:	6823      	ldr	r3, [r4, #0]
    c5de:	2200      	movs	r2, #0
    c5e0:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    c5e2:	60a6      	str	r6, [r4, #8]
	return *this;
}
    c5e4:	4620      	mov	r0, r4
    c5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    c5ea:	6820      	ldr	r0, [r4, #0]
    c5ec:	4639      	mov	r1, r7
    c5ee:	68a3      	ldr	r3, [r4, #8]
    c5f0:	4418      	add	r0, r3
    c5f2:	f001 faf3 	bl	dbdc <strcpy>
    c5f6:	e7f4      	b.n	c5e2 <String::append(char const*, unsigned int)+0x5a>

0000c5f8 <String::append(String const&)>:
/*  Append                                   */
/*********************************************/

String & String::append(const String &s)
{
	return append(s.buffer, s.len);
    c5f8:	688a      	ldr	r2, [r1, #8]
    c5fa:	6809      	ldr	r1, [r1, #0]
    c5fc:	f7ff bfc4 	b.w	c588 <String::append(char const*, unsigned int)>

0000c600 <String::append(char const*)>:
	len = newlen;
	return *this;
}

String & String::append(const char *cstr)
{
    c600:	b538      	push	{r3, r4, r5, lr}
    c602:	4605      	mov	r5, r0
	if (cstr) append(cstr, strlen(cstr));
    c604:	b141      	cbz	r1, c618 <String::append(char const*)+0x18>
    c606:	460c      	mov	r4, r1
    c608:	4608      	mov	r0, r1
    c60a:	f001 fb59 	bl	dcc0 <strlen>
    c60e:	4602      	mov	r2, r0
    c610:	4621      	mov	r1, r4
    c612:	4628      	mov	r0, r5
    c614:	f7ff ffb8 	bl	c588 <String::append(char const*, unsigned int)>
	return *this;
}
    c618:	4628      	mov	r0, r5
    c61a:	bd38      	pop	{r3, r4, r5, pc}

0000c61c <String::append(char)>:

String & String::append(char c)
{
    c61c:	b510      	push	{r4, lr}
    c61e:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    c620:	2300      	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    c622:	4604      	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    c624:	2201      	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    c626:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    c62a:	a901      	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    c62c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    c630:	f7ff ffaa 	bl	c588 <String::append(char const*, unsigned int)>
	return *this;
}
    c634:	4620      	mov	r0, r4
    c636:	b002      	add	sp, #8
    c638:	bd10      	pop	{r4, pc}
    c63a:	bf00      	nop

0000c63c <String::append(int)>:

String & String::append(int num)
{
    c63c:	b510      	push	{r4, lr}
    c63e:	b084      	sub	sp, #16
    c640:	4604      	mov	r4, r0
	char buf[12];
	ltoa((long)num, buf, 10);
    c642:	220a      	movs	r2, #10
    c644:	4608      	mov	r0, r1
    c646:	a901      	add	r1, sp, #4
    c648:	f000 f92a 	bl	c8a0 <ltoa>
	append(buf, strlen(buf));
    c64c:	a801      	add	r0, sp, #4
    c64e:	f001 fb37 	bl	dcc0 <strlen>
    c652:	a901      	add	r1, sp, #4
    c654:	4602      	mov	r2, r0
    c656:	4620      	mov	r0, r4
    c658:	f7ff ff96 	bl	c588 <String::append(char const*, unsigned int)>
	return *this;
}
    c65c:	4620      	mov	r0, r4
    c65e:	b004      	add	sp, #16
    c660:	bd10      	pop	{r4, pc}
    c662:	bf00      	nop

0000c664 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    c664:	b510      	push	{r4, lr}
    c666:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    c668:	688a      	ldr	r2, [r1, #8]
    c66a:	6809      	ldr	r1, [r1, #0]
    c66c:	f7ff ff8c 	bl	c588 <String::append(char const*, unsigned int)>
	return a;
}
    c670:	4620      	mov	r0, r4
    c672:	bd10      	pop	{r4, pc}

0000c674 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    c674:	b538      	push	{r3, r4, r5, lr}
    c676:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    c678:	b141      	cbz	r1, c68c <operator+(StringSumHelper const&, char const*)+0x18>
    c67a:	460c      	mov	r4, r1
    c67c:	4608      	mov	r0, r1
    c67e:	f001 fb1f 	bl	dcc0 <strlen>
    c682:	4602      	mov	r2, r0
    c684:	4621      	mov	r1, r4
    c686:	4628      	mov	r0, r5
    c688:	f7ff ff7e 	bl	c588 <String::append(char const*, unsigned int)>
	return a;
}
    c68c:	4628      	mov	r0, r5
    c68e:	bd38      	pop	{r3, r4, r5, pc}

0000c690 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c690:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    c692:	b508      	push	{r3, lr}
    c694:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c696:	b92a      	cbnz	r2, c6a4 <String::equals(char const*) const+0x14>
    c698:	b171      	cbz	r1, c6b8 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    c69a:	7818      	ldrb	r0, [r3, #0]
    c69c:	fab0 f080 	clz	r0, r0
    c6a0:	0940      	lsrs	r0, r0, #5
    c6a2:	bd08      	pop	{r3, pc}
    c6a4:	b131      	cbz	r1, c6b4 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    c6a6:	6800      	ldr	r0, [r0, #0]
    c6a8:	f001 f92e 	bl	d908 <strcmp>
    c6ac:	fab0 f080 	clz	r0, r0
    c6b0:	0940      	lsrs	r0, r0, #5
}
    c6b2:	bd08      	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    c6b4:	6803      	ldr	r3, [r0, #0]
    c6b6:	e7f0      	b.n	c69a <String::equals(char const*) const+0xa>
    c6b8:	2001      	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c6ba:	bd08      	pop	{r3, pc}

0000c6bc <String::charAt(unsigned int) const>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    c6bc:	6883      	ldr	r3, [r0, #8]
    c6be:	4299      	cmp	r1, r3
    c6c0:	d203      	bcs.n	c6ca <String::charAt(unsigned int) const+0xe>
    c6c2:	6800      	ldr	r0, [r0, #0]
    c6c4:	b110      	cbz	r0, c6cc <String::charAt(unsigned int) const+0x10>
	return buffer[index];
    c6c6:	5c40      	ldrb	r0, [r0, r1]
    c6c8:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    c6ca:	2000      	movs	r0, #0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
    c6cc:	4770      	bx	lr
    c6ce:	bf00      	nop

0000c6d0 <String::setCharAt(unsigned int, char)>:

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
    c6d0:	6883      	ldr	r3, [r0, #8]
    c6d2:	428b      	cmp	r3, r1
    c6d4:	d901      	bls.n	c6da <String::setCharAt(unsigned int, char)+0xa>
    c6d6:	6803      	ldr	r3, [r0, #0]
    c6d8:	545a      	strb	r2, [r3, r1]
    c6da:	4770      	bx	lr

0000c6dc <String::operator[](unsigned int)>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    c6dc:	6883      	ldr	r3, [r0, #8]
    c6de:	428b      	cmp	r3, r1
    c6e0:	d903      	bls.n	c6ea <String::operator[](unsigned int)+0xe>
    c6e2:	6800      	ldr	r0, [r0, #0]
    c6e4:	b108      	cbz	r0, c6ea <String::operator[](unsigned int)+0xe>
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    c6e6:	4408      	add	r0, r1
}
    c6e8:	4770      	bx	lr

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    c6ea:	4b02      	ldr	r3, [pc, #8]	; (c6f4 <String::operator[](unsigned int)+0x18>)
    c6ec:	2200      	movs	r2, #0
		return dummy_writable_char;
    c6ee:	4618      	mov	r0, r3

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    c6f0:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    c6f2:	4770      	bx	lr
    c6f4:	20002fbc 	.word	0x20002fbc

0000c6f8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    c6f8:	b1ba      	cbz	r2, c72a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    c6fa:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    c6fc:	fab1 f481 	clz	r4, r1
    c700:	0964      	lsrs	r4, r4, #5
    c702:	b97c      	cbnz	r4, c724 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    c704:	6886      	ldr	r6, [r0, #8]
    c706:	429e      	cmp	r6, r3
    c708:	d90d      	bls.n	c726 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    c70a:	1af6      	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    c70c:	3a01      	subs	r2, #1
    c70e:	460d      	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    c710:	6801      	ldr	r1, [r0, #0]
    c712:	4296      	cmp	r6, r2
    c714:	4628      	mov	r0, r5
    c716:	4419      	add	r1, r3
    c718:	bf28      	it	cs
    c71a:	4616      	movcs	r6, r2
    c71c:	4632      	mov	r2, r6
    c71e:	f001 fb3d 	bl	dd9c <strncpy>
	buf[n] = 0;
    c722:	55ac      	strb	r4, [r5, r6]
    c724:	bd70      	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    c726:	700c      	strb	r4, [r1, #0]
		return;
    c728:	bd70      	pop	{r4, r5, r6, pc}
    c72a:	4770      	bx	lr

0000c72c <String::substring(unsigned int, unsigned int) const>:
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    c72c:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    c72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c730:	4604      	mov	r4, r0
    c732:	460e      	mov	r6, r1
	if (left > right) {
    c734:	d902      	bls.n	c73c <String::substring(unsigned int, unsigned int) const+0x10>
    c736:	4611      	mov	r1, r2
    c738:	461a      	mov	r2, r3
    c73a:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c73c:	2100      	movs	r1, #0
	capacity = 0;
	len = 0;
    c73e:	60a1      	str	r1, [r4, #8]
	flags = 0;
    c740:	7321      	strb	r1, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    c742:	68b0      	ldr	r0, [r6, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c744:	6021      	str	r1, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    c746:	4282      	cmp	r2, r0
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c748:	6061      	str	r1, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    c74a:	d80e      	bhi.n	c76a <String::substring(unsigned int, unsigned int) const+0x3e>
    c74c:	4283      	cmp	r3, r0
    c74e:	bf28      	it	cs
    c750:	4603      	movcs	r3, r0
    c752:	461d      	mov	r5, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    c754:	6833      	ldr	r3, [r6, #0]
    c756:	5d5f      	ldrb	r7, [r3, r5]
	buffer[right] = '\0';	
    c758:	5559      	strb	r1, [r3, r5]
	out = buffer + left;  // pointer arithmetic
    c75a:	6833      	ldr	r3, [r6, #0]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    c75c:	1899      	adds	r1, r3, r2
    c75e:	d006      	beq.n	c76e <String::substring(unsigned int, unsigned int) const+0x42>
    c760:	4620      	mov	r0, r4
    c762:	f7ff fe81 	bl	c468 <String::operator=(char const*) [clone .part.3]>
    c766:	6833      	ldr	r3, [r6, #0]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    c768:	555f      	strb	r7, [r3, r5]
	return out;
}
    c76a:	4620      	mov	r0, r4
    c76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    c76e:	60a1      	str	r1, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    c770:	555f      	strb	r7, [r3, r5]
    c772:	e7fa      	b.n	c76a <String::substring(unsigned int, unsigned int) const+0x3e>

0000c774 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    c774:	b510      	push	{r4, lr}
    c776:	4604      	mov	r4, r0
	return substring(left, len);
    c778:	688b      	ldr	r3, [r1, #8]
    c77a:	f7ff ffd7 	bl	c72c <String::substring(unsigned int, unsigned int) const>
}
    c77e:	4620      	mov	r0, r4
    c780:	bd10      	pop	{r4, pc}
    c782:	bf00      	nop

0000c784 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    c784:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    c786:	6804      	ldr	r4, [r0, #0]
	}
	return *this;
}

String & String::toLowerCase(void)
{
    c788:	4605      	mov	r5, r0
	if (!buffer) return *this;
    c78a:	b144      	cbz	r4, c79e <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    c78c:	7820      	ldrb	r0, [r4, #0]
    c78e:	b130      	cbz	r0, c79e <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    c790:	f001 fbf2 	bl	df78 <tolower>
    c794:	7020      	strb	r0, [r4, #0]
}

String & String::toLowerCase(void)
{
	if (!buffer) return *this;
	for (char *p = buffer; *p; p++) {
    c796:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    c79a:	2800      	cmp	r0, #0
    c79c:	d1f8      	bne.n	c790 <String::toLowerCase()+0xc>
		*p = tolower(*p);
	}
	return *this;
}
    c79e:	4628      	mov	r0, r5
    c7a0:	bd38      	pop	{r3, r4, r5, pc}
    c7a2:	bf00      	nop

0000c7a4 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    c7a4:	6800      	ldr	r0, [r0, #0]
    c7a6:	b108      	cbz	r0, c7ac <String::toInt() const+0x8>
    c7a8:	f000 ba02 	b.w	cbb0 <atol>
	return 0;
}
    c7ac:	4770      	bx	lr
    c7ae:	bf00      	nop

0000c7b0 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c7b0:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    c7b2:	4c21      	ldr	r4, [pc, #132]	; (c838 <yield+0x88>)
    c7b4:	7823      	ldrb	r3, [r4, #0]
    c7b6:	b983      	cbnz	r3, c7da <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c7b8:	4b20      	ldr	r3, [pc, #128]	; (c83c <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    c7ba:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c7bc:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    c7be:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c7c0:	bb1b      	cbnz	r3, c80a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    c7c2:	4b1f      	ldr	r3, [pc, #124]	; (c840 <yield+0x90>)
    c7c4:	781b      	ldrb	r3, [r3, #0]
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d129      	bne.n	c81e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    c7ca:	4b1e      	ldr	r3, [pc, #120]	; (c844 <yield+0x94>)

	running = 0;
    c7cc:	2100      	movs	r1, #0
    c7ce:	681a      	ldr	r2, [r3, #0]
    c7d0:	7021      	strb	r1, [r4, #0]
    c7d2:	b112      	cbz	r2, c7da <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c7d4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c7d8:	b102      	cbz	r2, c7dc <yield+0x2c>
    c7da:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c7dc:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    c7e0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    c7e2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    c7e4:	b1f2      	cbz	r2, c824 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    c7e6:	4c18      	ldr	r4, [pc, #96]	; (c848 <yield+0x98>)
    c7e8:	7821      	ldrb	r1, [r4, #0]
    c7ea:	b9d9      	cbnz	r1, c824 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    c7ec:	2601      	movs	r6, #1
		firstYield = first->_next;
    c7ee:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    c7f0:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    c7f2:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    c7f4:	b1d5      	cbz	r5, c82c <yield+0x7c>
			firstYield->_prev = nullptr;
    c7f6:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c7f8:	b900      	cbnz	r0, c7fc <yield+0x4c>
    c7fa:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    c7fc:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c7fe:	6893      	ldr	r3, [r2, #8]
    c800:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    c802:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    c804:	4798      	blx	r3
		runningFromYield = false;
    c806:	7025      	strb	r5, [r4, #0]
    c808:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    c80a:	f7ff fac9 	bl	bda0 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c80e:	2800      	cmp	r0, #0
    c810:	d0d7      	beq.n	c7c2 <yield+0x12>
    c812:	f7ff fdad 	bl	c370 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    c816:	4b0a      	ldr	r3, [pc, #40]	; (c840 <yield+0x90>)
    c818:	781b      	ldrb	r3, [r3, #0]
    c81a:	2b00      	cmp	r3, #0
    c81c:	d0d5      	beq.n	c7ca <yield+0x1a>
    c81e:	f000 f9ad 	bl	cb7c <HardwareSerial::processSerialEvents()>
    c822:	e7d2      	b.n	c7ca <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c824:	2800      	cmp	r0, #0
    c826:	d1d8      	bne.n	c7da <yield+0x2a>
    c828:	b662      	cpsie	i
    c82a:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    c82c:	4b07      	ldr	r3, [pc, #28]	; (c84c <yield+0x9c>)
    c82e:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c830:	2800      	cmp	r0, #0
    c832:	d1e3      	bne.n	c7fc <yield+0x4c>
    c834:	e7e1      	b.n	c7fa <yield+0x4a>
    c836:	bf00      	nop
    c838:	20002fbd 	.word	0x20002fbd
    c83c:	20001fda 	.word	0x20001fda
    c840:	20002fdc 	.word	0x20002fdc
    c844:	20002fb0 	.word	0x20002fb0
    c848:	20002fb4 	.word	0x20002fb4
    c84c:	20002fac 	.word	0x20002fac

0000c850 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c850:	b4f0      	push	{r4, r5, r6, r7}
    c852:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    c854:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c856:	4637      	mov	r7, r6
    c858:	e000      	b.n	c85c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    c85a:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    c85c:	fbb0 f3f2 	udiv	r3, r0, r2
    c860:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c864:	f100 0437 	add.w	r4, r0, #55	; 0x37
    c868:	2809      	cmp	r0, #9
    c86a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c86e:	b2e4      	uxtb	r4, r4
    c870:	bf98      	it	ls
    c872:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    c874:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c876:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    c87a:	2b00      	cmp	r3, #0
    c87c:	d1ed      	bne.n	c85a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    c87e:	194a      	adds	r2, r1, r5
    c880:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    c882:	b14d      	cbz	r5, c898 <ultoa+0x48>
    c884:	3301      	adds	r3, #1
		t = buf[j];
    c886:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    c88a:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c88c:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    c88e:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c890:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    c892:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c896:	dbf5      	blt.n	c884 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    c898:	4608      	mov	r0, r1
    c89a:	bcf0      	pop	{r4, r5, r6, r7}
    c89c:	4770      	bx	lr
    c89e:	bf00      	nop

0000c8a0 <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
    c8a0:	b510      	push	{r4, lr}
	if (val >= 0) {
    c8a2:	1e04      	subs	r4, r0, #0
    c8a4:	db03      	blt.n	c8ae <ltoa+0xe>
	} else {
		buf[0] = '-';
		ultoa(-val, buf + 1, radix);
		return buf;
	}
}
    c8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
    c8aa:	f7ff bfd1 	b.w	c850 <ultoa>
	} else {
		buf[0] = '-';
    c8ae:	232d      	movs	r3, #45	; 0x2d
    c8b0:	4620      	mov	r0, r4
    c8b2:	460c      	mov	r4, r1
		ultoa(-val, buf + 1, radix);
    c8b4:	4240      	negs	r0, r0
char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
	} else {
		buf[0] = '-';
    c8b6:	f801 3b01 	strb.w	r3, [r1], #1
		ultoa(-val, buf + 1, radix);
    c8ba:	f7ff ffc9 	bl	c850 <ultoa>
		return buf;
	}
}
    c8be:	4620      	mov	r0, r4
    c8c0:	bd10      	pop	{r4, pc}
    c8c2:	bf00      	nop

0000c8c4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c8c4:	48a4      	ldr	r0, [pc, #656]	; (cb58 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c8c6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c8ca:	4ba4      	ldr	r3, [pc, #656]	; (cb5c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c8cc:	6f82      	ldr	r2, [r0, #120]	; 0x78
    c8ce:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    c8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c8d4:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c8d6:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c8d8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c8dc:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c8e0:	4c9f      	ldr	r4, [pc, #636]	; (cb60 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c8e2:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c8e6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c8e8:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c8ec:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c8ee:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c8f0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c8f4:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c8f8:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c8fc:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c900:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c904:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    c908:	b280      	uxth	r0, r0
    c90a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    c90e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    c912:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c916:	4b91      	ldr	r3, [pc, #580]	; (cb5c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    c918:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c91a:	2500      	movs	r5, #0
    c91c:	0140      	lsls	r0, r0, #5
    c91e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c920:	2904      	cmp	r1, #4
    c922:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c924:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c928:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    c92a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c92c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c92e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c930:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c932:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c934:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c936:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c938:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c93a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c93c:	d1e9      	bne.n	c912 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c93e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c942:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c946:	4b87      	ldr	r3, [pc, #540]	; (cb64 <pwm_init+0x2a0>)
    c948:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c94c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c94e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c950:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c954:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c956:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c95a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c95e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c962:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    c966:	b280      	uxth	r0, r0
    c968:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    c96c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c970:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c974:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c978:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c97c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c980:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    c984:	b280      	uxth	r0, r0
    c986:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    c98a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    c98e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c992:	4b74      	ldr	r3, [pc, #464]	; (cb64 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    c994:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c996:	2500      	movs	r5, #0
    c998:	0140      	lsls	r0, r0, #5
    c99a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c99c:	2904      	cmp	r1, #4
    c99e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c9a0:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c9a2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c9a6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c9a8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c9aa:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c9ac:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c9ae:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c9b0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c9b2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c9b4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c9b6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c9b8:	d1e9      	bne.n	c98e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c9ba:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c9be:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c9c2:	4b69      	ldr	r3, [pc, #420]	; (cb68 <pwm_init+0x2a4>)
    c9c4:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c9c8:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c9ca:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c9cc:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c9d0:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c9d2:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c9d6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c9da:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c9de:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    c9e2:	b280      	uxth	r0, r0
    c9e4:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    c9e8:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c9ec:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c9f0:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c9f4:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c9f8:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c9fc:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    ca00:	b280      	uxth	r0, r0
    ca02:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    ca06:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    ca0a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    ca0e:	4b56      	ldr	r3, [pc, #344]	; (cb68 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    ca10:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ca12:	2500      	movs	r5, #0
    ca14:	0140      	lsls	r0, r0, #5
    ca16:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ca18:	2904      	cmp	r1, #4
    ca1a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ca1c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ca1e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ca22:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ca24:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ca26:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ca28:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ca2a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    ca2c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ca2e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ca30:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ca32:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ca34:	d1e9      	bne.n	ca0a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ca36:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ca3a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ca3e:	4b4b      	ldr	r3, [pc, #300]	; (cb6c <pwm_init+0x2a8>)
    ca40:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ca44:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ca46:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ca48:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ca4c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ca4e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ca52:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ca56:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ca5a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    ca5e:	b280      	uxth	r0, r0
    ca60:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    ca64:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ca68:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ca6c:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ca70:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ca74:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ca78:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    ca7c:	b280      	uxth	r0, r0
    ca7e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    ca82:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    ca86:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    ca8a:	4b38      	ldr	r3, [pc, #224]	; (cb6c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    ca8c:	3101      	adds	r1, #1
    ca8e:	0140      	lsls	r0, r0, #5
    ca90:	461c      	mov	r4, r3
    ca92:	2904      	cmp	r1, #4
    ca94:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ca96:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ca98:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ca9c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ca9e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    caa0:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    caa2:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    caa4:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    caa6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    caa8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    caaa:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    caac:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    caae:	d1ea      	bne.n	ca86 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    cab0:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    cab4:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cab6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    cab8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    cabc:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    cabe:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    cac2:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    cac4:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    cac8:	433b      	orrs	r3, r7
    caca:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    cace:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    cad2:	b29b      	uxth	r3, r3
    cad4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    cad8:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    cadc:	0150      	lsls	r0, r2, #5
    cade:	4b24      	ldr	r3, [pc, #144]	; (cb70 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cae0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    cae2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cae4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    cae6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    cae8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    caea:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    caec:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    caee:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    caf2:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    caf4:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    caf6:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    caf8:	d1f0      	bne.n	cadc <pwm_init+0x218>
    cafa:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    cafc:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    cafe:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    cb02:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    cb06:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    cb08:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    cb0c:	0150      	lsls	r0, r2, #5
    cb0e:	4b19      	ldr	r3, [pc, #100]	; (cb74 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cb10:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    cb12:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cb14:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    cb16:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    cb18:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    cb1a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    cb1c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    cb1e:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    cb20:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    cb22:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    cb24:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cb26:	d1f1      	bne.n	cb0c <pwm_init+0x248>
    cb28:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    cb2a:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    cb2c:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    cb30:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    cb34:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    cb36:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    cb3a:	0150      	lsls	r0, r2, #5
    cb3c:	4b0e      	ldr	r3, [pc, #56]	; (cb78 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cb3e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    cb40:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cb42:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    cb44:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    cb46:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    cb48:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    cb4a:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    cb4c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    cb4e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    cb50:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    cb52:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    cb54:	d1f1      	bne.n	cb3a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb58:	400fc000 	.word	0x400fc000
    cb5c:	403dc000 	.word	0x403dc000
    cb60:	fc030000 	.word	0xfc030000
    cb64:	403e0000 	.word	0x403e0000
    cb68:	403e4000 	.word	0x403e4000
    cb6c:	403e8000 	.word	0x403e8000
    cb70:	401dc000 	.word	0x401dc000
    cb74:	401e0000 	.word	0x401e0000
    cb78:	401e4000 	.word	0x401e4000

0000cb7c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    cb7c:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    cb7e:	4b07      	ldr	r3, [pc, #28]	; (cb9c <HardwareSerial::processSerialEvents()+0x20>)
    cb80:	781c      	ldrb	r4, [r3, #0]
    cb82:	b14c      	cbz	r4, cb98 <HardwareSerial::processSerialEvents()+0x1c>
    cb84:	4d06      	ldr	r5, [pc, #24]	; (cba0 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    cb86:	f855 3f04 	ldr.w	r3, [r5, #4]!
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d0fb      	beq.n	cb86 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    cb8e:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    cb90:	1e63      	subs	r3, r4, #1
    cb92:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    cb96:	d1f6      	bne.n	cb86 <HardwareSerial::processSerialEvents()+0xa>
    cb98:	bd38      	pop	{r3, r4, r5, pc}
    cb9a:	bf00      	nop
    cb9c:	20002fdc 	.word	0x20002fdc
    cba0:	20002fbc 	.word	0x20002fbc

0000cba4 <__aeabi_atexit>:
    cba4:	460b      	mov	r3, r1
    cba6:	4601      	mov	r1, r0
    cba8:	4618      	mov	r0, r3
    cbaa:	f000 b805 	b.w	cbb8 <__cxa_atexit>
    cbae:	bf00      	nop

0000cbb0 <atol>:
    cbb0:	220a      	movs	r2, #10
    cbb2:	2100      	movs	r1, #0
    cbb4:	f001 b9c2 	b.w	df3c <strtol>

0000cbb8 <__cxa_atexit>:
    cbb8:	4613      	mov	r3, r2
    cbba:	460a      	mov	r2, r1
    cbbc:	4601      	mov	r1, r0
    cbbe:	2002      	movs	r0, #2
    cbc0:	f001 ba80 	b.w	e0c4 <__register_exitproc>

0000cbc4 <__errno>:
    cbc4:	4b01      	ldr	r3, [pc, #4]	; (cbcc <__errno+0x8>)
    cbc6:	6818      	ldr	r0, [r3, #0]
    cbc8:	4770      	bx	lr
    cbca:	bf00      	nop
    cbcc:	20002418 	.word	0x20002418

0000cbd0 <__libc_init_array>:
    cbd0:	b570      	push	{r4, r5, r6, lr}
    cbd2:	4e0f      	ldr	r6, [pc, #60]	; (cc10 <__libc_init_array+0x40>)
    cbd4:	4d0f      	ldr	r5, [pc, #60]	; (cc14 <__libc_init_array+0x44>)
    cbd6:	1b76      	subs	r6, r6, r5
    cbd8:	10b6      	asrs	r6, r6, #2
    cbda:	bf18      	it	ne
    cbdc:	2400      	movne	r4, #0
    cbde:	d005      	beq.n	cbec <__libc_init_array+0x1c>
    cbe0:	3401      	adds	r4, #1
    cbe2:	f855 3b04 	ldr.w	r3, [r5], #4
    cbe6:	4798      	blx	r3
    cbe8:	42a6      	cmp	r6, r4
    cbea:	d1f9      	bne.n	cbe0 <__libc_init_array+0x10>
    cbec:	4e0a      	ldr	r6, [pc, #40]	; (cc18 <__libc_init_array+0x48>)
    cbee:	4d0b      	ldr	r5, [pc, #44]	; (cc1c <__libc_init_array+0x4c>)
    cbf0:	1b76      	subs	r6, r6, r5
    cbf2:	f004 fb5d 	bl	112b0 <___init_veneer>
    cbf6:	10b6      	asrs	r6, r6, #2
    cbf8:	bf18      	it	ne
    cbfa:	2400      	movne	r4, #0
    cbfc:	d006      	beq.n	cc0c <__libc_init_array+0x3c>
    cbfe:	3401      	adds	r4, #1
    cc00:	f855 3b04 	ldr.w	r3, [r5], #4
    cc04:	4798      	blx	r3
    cc06:	42a6      	cmp	r6, r4
    cc08:	d1f9      	bne.n	cbfe <__libc_init_array+0x2e>
    cc0a:	bd70      	pop	{r4, r5, r6, pc}
    cc0c:	bd70      	pop	{r4, r5, r6, pc}
    cc0e:	bf00      	nop
    cc10:	60001888 	.word	0x60001888
    cc14:	60001888 	.word	0x60001888
    cc18:	600018a0 	.word	0x600018a0
    cc1c:	60001888 	.word	0x60001888

0000cc20 <__itoa>:
    cc20:	1e93      	subs	r3, r2, #2
    cc22:	2b22      	cmp	r3, #34	; 0x22
    cc24:	d810      	bhi.n	cc48 <__itoa+0x28>
    cc26:	2a0a      	cmp	r2, #10
    cc28:	b510      	push	{r4, lr}
    cc2a:	d006      	beq.n	cc3a <__itoa+0x1a>
    cc2c:	2300      	movs	r3, #0
    cc2e:	460c      	mov	r4, r1
    cc30:	4419      	add	r1, r3
    cc32:	f001 f9af 	bl	df94 <__utoa>
    cc36:	4620      	mov	r0, r4
    cc38:	bd10      	pop	{r4, pc}
    cc3a:	2800      	cmp	r0, #0
    cc3c:	daf6      	bge.n	cc2c <__itoa+0xc>
    cc3e:	232d      	movs	r3, #45	; 0x2d
    cc40:	700b      	strb	r3, [r1, #0]
    cc42:	4240      	negs	r0, r0
    cc44:	2301      	movs	r3, #1
    cc46:	e7f2      	b.n	cc2e <__itoa+0xe>
    cc48:	2000      	movs	r0, #0
    cc4a:	7008      	strb	r0, [r1, #0]
    cc4c:	4770      	bx	lr
    cc4e:	bf00      	nop

0000cc50 <itoa>:
    cc50:	f7ff bfe6 	b.w	cc20 <__itoa>

0000cc54 <__get_current_locale>:
    cc54:	4a03      	ldr	r2, [pc, #12]	; (cc64 <__get_current_locale+0x10>)
    cc56:	4b04      	ldr	r3, [pc, #16]	; (cc68 <__get_current_locale+0x14>)
    cc58:	6812      	ldr	r2, [r2, #0]
    cc5a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    cc5c:	2800      	cmp	r0, #0
    cc5e:	bf08      	it	eq
    cc60:	4618      	moveq	r0, r3
    cc62:	4770      	bx	lr
    cc64:	20002418 	.word	0x20002418
    cc68:	2000241c 	.word	0x2000241c

0000cc6c <__locale_ctype_ptr_l>:
    cc6c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    cc70:	4770      	bx	lr
    cc72:	bf00      	nop

0000cc74 <__locale_ctype_ptr>:
    cc74:	b508      	push	{r3, lr}
    cc76:	4b03      	ldr	r3, [pc, #12]	; (cc84 <__locale_ctype_ptr+0x10>)
    cc78:	6818      	ldr	r0, [r3, #0]
    cc7a:	f7ff ffeb 	bl	cc54 <__get_current_locale>
    cc7e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    cc82:	bd08      	pop	{r3, pc}
    cc84:	20002418 	.word	0x20002418

0000cc88 <malloc>:
    cc88:	4b02      	ldr	r3, [pc, #8]	; (cc94 <malloc+0xc>)
    cc8a:	4601      	mov	r1, r0
    cc8c:	6818      	ldr	r0, [r3, #0]
    cc8e:	f000 b80b 	b.w	cca8 <_malloc_r>
    cc92:	bf00      	nop
    cc94:	20002418 	.word	0x20002418

0000cc98 <free>:
    cc98:	4b02      	ldr	r3, [pc, #8]	; (cca4 <free+0xc>)
    cc9a:	4601      	mov	r1, r0
    cc9c:	6818      	ldr	r0, [r3, #0]
    cc9e:	f001 bab1 	b.w	e204 <_free_r>
    cca2:	bf00      	nop
    cca4:	20002418 	.word	0x20002418

0000cca8 <_malloc_r>:
    cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccac:	f101 050b 	add.w	r5, r1, #11
    ccb0:	2d16      	cmp	r5, #22
    ccb2:	b083      	sub	sp, #12
    ccb4:	4606      	mov	r6, r0
    ccb6:	f240 809f 	bls.w	cdf8 <_malloc_r+0x150>
    ccba:	f035 0507 	bics.w	r5, r5, #7
    ccbe:	f100 80bf 	bmi.w	ce40 <_malloc_r+0x198>
    ccc2:	42a9      	cmp	r1, r5
    ccc4:	f200 80bc 	bhi.w	ce40 <_malloc_r+0x198>
    ccc8:	f000 fba0 	bl	d40c <__malloc_lock>
    cccc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    ccd0:	f0c0 829c 	bcc.w	d20c <_malloc_r+0x564>
    ccd4:	0a6b      	lsrs	r3, r5, #9
    ccd6:	f000 80ba 	beq.w	ce4e <_malloc_r+0x1a6>
    ccda:	2b04      	cmp	r3, #4
    ccdc:	f200 8183 	bhi.w	cfe6 <_malloc_r+0x33e>
    cce0:	09a8      	lsrs	r0, r5, #6
    cce2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    cce6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    ccea:	3038      	adds	r0, #56	; 0x38
    ccec:	4fc4      	ldr	r7, [pc, #784]	; (d000 <_malloc_r+0x358>)
    ccee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    ccf2:	f1a3 0108 	sub.w	r1, r3, #8
    ccf6:	685c      	ldr	r4, [r3, #4]
    ccf8:	42a1      	cmp	r1, r4
    ccfa:	d107      	bne.n	cd0c <_malloc_r+0x64>
    ccfc:	e0ac      	b.n	ce58 <_malloc_r+0x1b0>
    ccfe:	2a00      	cmp	r2, #0
    cd00:	f280 80ac 	bge.w	ce5c <_malloc_r+0x1b4>
    cd04:	68e4      	ldr	r4, [r4, #12]
    cd06:	42a1      	cmp	r1, r4
    cd08:	f000 80a6 	beq.w	ce58 <_malloc_r+0x1b0>
    cd0c:	6863      	ldr	r3, [r4, #4]
    cd0e:	f023 0303 	bic.w	r3, r3, #3
    cd12:	1b5a      	subs	r2, r3, r5
    cd14:	2a0f      	cmp	r2, #15
    cd16:	ddf2      	ble.n	ccfe <_malloc_r+0x56>
    cd18:	49b9      	ldr	r1, [pc, #740]	; (d000 <_malloc_r+0x358>)
    cd1a:	693c      	ldr	r4, [r7, #16]
    cd1c:	f101 0e08 	add.w	lr, r1, #8
    cd20:	4574      	cmp	r4, lr
    cd22:	f000 81b3 	beq.w	d08c <_malloc_r+0x3e4>
    cd26:	6863      	ldr	r3, [r4, #4]
    cd28:	f023 0303 	bic.w	r3, r3, #3
    cd2c:	1b5a      	subs	r2, r3, r5
    cd2e:	2a0f      	cmp	r2, #15
    cd30:	f300 8199 	bgt.w	d066 <_malloc_r+0x3be>
    cd34:	2a00      	cmp	r2, #0
    cd36:	f8c1 e014 	str.w	lr, [r1, #20]
    cd3a:	f8c1 e010 	str.w	lr, [r1, #16]
    cd3e:	f280 809e 	bge.w	ce7e <_malloc_r+0x1d6>
    cd42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    cd46:	f080 8167 	bcs.w	d018 <_malloc_r+0x370>
    cd4a:	08db      	lsrs	r3, r3, #3
    cd4c:	f103 0c01 	add.w	ip, r3, #1
    cd50:	2201      	movs	r2, #1
    cd52:	109b      	asrs	r3, r3, #2
    cd54:	fa02 f303 	lsl.w	r3, r2, r3
    cd58:	684a      	ldr	r2, [r1, #4]
    cd5a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    cd5e:	f8c4 8008 	str.w	r8, [r4, #8]
    cd62:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    cd66:	431a      	orrs	r2, r3
    cd68:	f1a9 0308 	sub.w	r3, r9, #8
    cd6c:	60e3      	str	r3, [r4, #12]
    cd6e:	604a      	str	r2, [r1, #4]
    cd70:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    cd74:	f8c8 400c 	str.w	r4, [r8, #12]
    cd78:	1083      	asrs	r3, r0, #2
    cd7a:	2401      	movs	r4, #1
    cd7c:	409c      	lsls	r4, r3
    cd7e:	4294      	cmp	r4, r2
    cd80:	f200 808a 	bhi.w	ce98 <_malloc_r+0x1f0>
    cd84:	4214      	tst	r4, r2
    cd86:	d106      	bne.n	cd96 <_malloc_r+0xee>
    cd88:	f020 0003 	bic.w	r0, r0, #3
    cd8c:	0064      	lsls	r4, r4, #1
    cd8e:	4214      	tst	r4, r2
    cd90:	f100 0004 	add.w	r0, r0, #4
    cd94:	d0fa      	beq.n	cd8c <_malloc_r+0xe4>
    cd96:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    cd9a:	46cc      	mov	ip, r9
    cd9c:	4680      	mov	r8, r0
    cd9e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    cda2:	458c      	cmp	ip, r1
    cda4:	d107      	bne.n	cdb6 <_malloc_r+0x10e>
    cda6:	e173      	b.n	d090 <_malloc_r+0x3e8>
    cda8:	2a00      	cmp	r2, #0
    cdaa:	f280 8181 	bge.w	d0b0 <_malloc_r+0x408>
    cdae:	68c9      	ldr	r1, [r1, #12]
    cdb0:	458c      	cmp	ip, r1
    cdb2:	f000 816d 	beq.w	d090 <_malloc_r+0x3e8>
    cdb6:	684b      	ldr	r3, [r1, #4]
    cdb8:	f023 0303 	bic.w	r3, r3, #3
    cdbc:	1b5a      	subs	r2, r3, r5
    cdbe:	2a0f      	cmp	r2, #15
    cdc0:	ddf2      	ble.n	cda8 <_malloc_r+0x100>
    cdc2:	460c      	mov	r4, r1
    cdc4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    cdc8:	f854 8f08 	ldr.w	r8, [r4, #8]!
    cdcc:	194b      	adds	r3, r1, r5
    cdce:	f045 0501 	orr.w	r5, r5, #1
    cdd2:	604d      	str	r5, [r1, #4]
    cdd4:	f042 0101 	orr.w	r1, r2, #1
    cdd8:	f8c8 c00c 	str.w	ip, [r8, #12]
    cddc:	4630      	mov	r0, r6
    cdde:	f8cc 8008 	str.w	r8, [ip, #8]
    cde2:	617b      	str	r3, [r7, #20]
    cde4:	613b      	str	r3, [r7, #16]
    cde6:	f8c3 e00c 	str.w	lr, [r3, #12]
    cdea:	f8c3 e008 	str.w	lr, [r3, #8]
    cdee:	6059      	str	r1, [r3, #4]
    cdf0:	509a      	str	r2, [r3, r2]
    cdf2:	f000 fb0d 	bl	d410 <__malloc_unlock>
    cdf6:	e01f      	b.n	ce38 <_malloc_r+0x190>
    cdf8:	2910      	cmp	r1, #16
    cdfa:	d821      	bhi.n	ce40 <_malloc_r+0x198>
    cdfc:	f000 fb06 	bl	d40c <__malloc_lock>
    ce00:	2510      	movs	r5, #16
    ce02:	2306      	movs	r3, #6
    ce04:	2002      	movs	r0, #2
    ce06:	4f7e      	ldr	r7, [pc, #504]	; (d000 <_malloc_r+0x358>)
    ce08:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    ce0c:	f1a3 0208 	sub.w	r2, r3, #8
    ce10:	685c      	ldr	r4, [r3, #4]
    ce12:	4294      	cmp	r4, r2
    ce14:	f000 8145 	beq.w	d0a2 <_malloc_r+0x3fa>
    ce18:	6863      	ldr	r3, [r4, #4]
    ce1a:	68e1      	ldr	r1, [r4, #12]
    ce1c:	68a5      	ldr	r5, [r4, #8]
    ce1e:	f023 0303 	bic.w	r3, r3, #3
    ce22:	4423      	add	r3, r4
    ce24:	4630      	mov	r0, r6
    ce26:	685a      	ldr	r2, [r3, #4]
    ce28:	60e9      	str	r1, [r5, #12]
    ce2a:	f042 0201 	orr.w	r2, r2, #1
    ce2e:	608d      	str	r5, [r1, #8]
    ce30:	605a      	str	r2, [r3, #4]
    ce32:	f000 faed 	bl	d410 <__malloc_unlock>
    ce36:	3408      	adds	r4, #8
    ce38:	4620      	mov	r0, r4
    ce3a:	b003      	add	sp, #12
    ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce40:	2400      	movs	r4, #0
    ce42:	230c      	movs	r3, #12
    ce44:	4620      	mov	r0, r4
    ce46:	6033      	str	r3, [r6, #0]
    ce48:	b003      	add	sp, #12
    ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce4e:	2380      	movs	r3, #128	; 0x80
    ce50:	f04f 0e40 	mov.w	lr, #64	; 0x40
    ce54:	203f      	movs	r0, #63	; 0x3f
    ce56:	e749      	b.n	ccec <_malloc_r+0x44>
    ce58:	4670      	mov	r0, lr
    ce5a:	e75d      	b.n	cd18 <_malloc_r+0x70>
    ce5c:	4423      	add	r3, r4
    ce5e:	68e1      	ldr	r1, [r4, #12]
    ce60:	685a      	ldr	r2, [r3, #4]
    ce62:	68a5      	ldr	r5, [r4, #8]
    ce64:	f042 0201 	orr.w	r2, r2, #1
    ce68:	60e9      	str	r1, [r5, #12]
    ce6a:	4630      	mov	r0, r6
    ce6c:	608d      	str	r5, [r1, #8]
    ce6e:	605a      	str	r2, [r3, #4]
    ce70:	f000 face 	bl	d410 <__malloc_unlock>
    ce74:	3408      	adds	r4, #8
    ce76:	4620      	mov	r0, r4
    ce78:	b003      	add	sp, #12
    ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce7e:	4423      	add	r3, r4
    ce80:	4630      	mov	r0, r6
    ce82:	685a      	ldr	r2, [r3, #4]
    ce84:	f042 0201 	orr.w	r2, r2, #1
    ce88:	605a      	str	r2, [r3, #4]
    ce8a:	f000 fac1 	bl	d410 <__malloc_unlock>
    ce8e:	3408      	adds	r4, #8
    ce90:	4620      	mov	r0, r4
    ce92:	b003      	add	sp, #12
    ce94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce98:	68bc      	ldr	r4, [r7, #8]
    ce9a:	6863      	ldr	r3, [r4, #4]
    ce9c:	f023 0803 	bic.w	r8, r3, #3
    cea0:	45a8      	cmp	r8, r5
    cea2:	d304      	bcc.n	ceae <_malloc_r+0x206>
    cea4:	ebc5 0308 	rsb	r3, r5, r8
    cea8:	2b0f      	cmp	r3, #15
    ceaa:	f300 808c 	bgt.w	cfc6 <_malloc_r+0x31e>
    ceae:	4b55      	ldr	r3, [pc, #340]	; (d004 <_malloc_r+0x35c>)
    ceb0:	f8df 9160 	ldr.w	r9, [pc, #352]	; d014 <_malloc_r+0x36c>
    ceb4:	681a      	ldr	r2, [r3, #0]
    ceb6:	f8d9 3000 	ldr.w	r3, [r9]
    ceba:	3301      	adds	r3, #1
    cebc:	442a      	add	r2, r5
    cebe:	eb04 0a08 	add.w	sl, r4, r8
    cec2:	f000 8160 	beq.w	d186 <_malloc_r+0x4de>
    cec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    ceca:	320f      	adds	r2, #15
    cecc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    ced0:	f022 020f 	bic.w	r2, r2, #15
    ced4:	4611      	mov	r1, r2
    ced6:	4630      	mov	r0, r6
    ced8:	9201      	str	r2, [sp, #4]
    ceda:	f000 fc93 	bl	d804 <_sbrk_r>
    cede:	f1b0 3fff 	cmp.w	r0, #4294967295
    cee2:	4683      	mov	fp, r0
    cee4:	9a01      	ldr	r2, [sp, #4]
    cee6:	f000 8158 	beq.w	d19a <_malloc_r+0x4f2>
    ceea:	4582      	cmp	sl, r0
    ceec:	f200 80fc 	bhi.w	d0e8 <_malloc_r+0x440>
    cef0:	4b45      	ldr	r3, [pc, #276]	; (d008 <_malloc_r+0x360>)
    cef2:	6819      	ldr	r1, [r3, #0]
    cef4:	45da      	cmp	sl, fp
    cef6:	4411      	add	r1, r2
    cef8:	6019      	str	r1, [r3, #0]
    cefa:	f000 8153 	beq.w	d1a4 <_malloc_r+0x4fc>
    cefe:	f8d9 0000 	ldr.w	r0, [r9]
    cf02:	f8df e110 	ldr.w	lr, [pc, #272]	; d014 <_malloc_r+0x36c>
    cf06:	3001      	adds	r0, #1
    cf08:	bf1b      	ittet	ne
    cf0a:	ebca 0a0b 	rsbne	sl, sl, fp
    cf0e:	4451      	addne	r1, sl
    cf10:	f8ce b000 	streq.w	fp, [lr]
    cf14:	6019      	strne	r1, [r3, #0]
    cf16:	f01b 0107 	ands.w	r1, fp, #7
    cf1a:	f000 8117 	beq.w	d14c <_malloc_r+0x4a4>
    cf1e:	f1c1 0008 	rsb	r0, r1, #8
    cf22:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    cf26:	4483      	add	fp, r0
    cf28:	3108      	adds	r1, #8
    cf2a:	445a      	add	r2, fp
    cf2c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cf30:	ebc2 0901 	rsb	r9, r2, r1
    cf34:	4649      	mov	r1, r9
    cf36:	4630      	mov	r0, r6
    cf38:	9301      	str	r3, [sp, #4]
    cf3a:	f000 fc63 	bl	d804 <_sbrk_r>
    cf3e:	1c43      	adds	r3, r0, #1
    cf40:	9b01      	ldr	r3, [sp, #4]
    cf42:	f000 813f 	beq.w	d1c4 <_malloc_r+0x51c>
    cf46:	ebcb 0200 	rsb	r2, fp, r0
    cf4a:	444a      	add	r2, r9
    cf4c:	f042 0201 	orr.w	r2, r2, #1
    cf50:	6819      	ldr	r1, [r3, #0]
    cf52:	f8c7 b008 	str.w	fp, [r7, #8]
    cf56:	4449      	add	r1, r9
    cf58:	42bc      	cmp	r4, r7
    cf5a:	f8cb 2004 	str.w	r2, [fp, #4]
    cf5e:	6019      	str	r1, [r3, #0]
    cf60:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d008 <_malloc_r+0x360>
    cf64:	d016      	beq.n	cf94 <_malloc_r+0x2ec>
    cf66:	f1b8 0f0f 	cmp.w	r8, #15
    cf6a:	f240 80fd 	bls.w	d168 <_malloc_r+0x4c0>
    cf6e:	6862      	ldr	r2, [r4, #4]
    cf70:	f1a8 030c 	sub.w	r3, r8, #12
    cf74:	f023 0307 	bic.w	r3, r3, #7
    cf78:	18e0      	adds	r0, r4, r3
    cf7a:	f002 0201 	and.w	r2, r2, #1
    cf7e:	f04f 0e05 	mov.w	lr, #5
    cf82:	431a      	orrs	r2, r3
    cf84:	2b0f      	cmp	r3, #15
    cf86:	6062      	str	r2, [r4, #4]
    cf88:	f8c0 e004 	str.w	lr, [r0, #4]
    cf8c:	f8c0 e008 	str.w	lr, [r0, #8]
    cf90:	f200 811c 	bhi.w	d1cc <_malloc_r+0x524>
    cf94:	4b1d      	ldr	r3, [pc, #116]	; (d00c <_malloc_r+0x364>)
    cf96:	68bc      	ldr	r4, [r7, #8]
    cf98:	681a      	ldr	r2, [r3, #0]
    cf9a:	4291      	cmp	r1, r2
    cf9c:	bf88      	it	hi
    cf9e:	6019      	strhi	r1, [r3, #0]
    cfa0:	4b1b      	ldr	r3, [pc, #108]	; (d010 <_malloc_r+0x368>)
    cfa2:	681a      	ldr	r2, [r3, #0]
    cfa4:	4291      	cmp	r1, r2
    cfa6:	6862      	ldr	r2, [r4, #4]
    cfa8:	bf88      	it	hi
    cfaa:	6019      	strhi	r1, [r3, #0]
    cfac:	f022 0203 	bic.w	r2, r2, #3
    cfb0:	4295      	cmp	r5, r2
    cfb2:	eba2 0305 	sub.w	r3, r2, r5
    cfb6:	d801      	bhi.n	cfbc <_malloc_r+0x314>
    cfb8:	2b0f      	cmp	r3, #15
    cfba:	dc04      	bgt.n	cfc6 <_malloc_r+0x31e>
    cfbc:	4630      	mov	r0, r6
    cfbe:	f000 fa27 	bl	d410 <__malloc_unlock>
    cfc2:	2400      	movs	r4, #0
    cfc4:	e738      	b.n	ce38 <_malloc_r+0x190>
    cfc6:	1962      	adds	r2, r4, r5
    cfc8:	f043 0301 	orr.w	r3, r3, #1
    cfcc:	f045 0501 	orr.w	r5, r5, #1
    cfd0:	6065      	str	r5, [r4, #4]
    cfd2:	4630      	mov	r0, r6
    cfd4:	60ba      	str	r2, [r7, #8]
    cfd6:	6053      	str	r3, [r2, #4]
    cfd8:	f000 fa1a 	bl	d410 <__malloc_unlock>
    cfdc:	3408      	adds	r4, #8
    cfde:	4620      	mov	r0, r4
    cfe0:	b003      	add	sp, #12
    cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe6:	2b14      	cmp	r3, #20
    cfe8:	d971      	bls.n	d0ce <_malloc_r+0x426>
    cfea:	2b54      	cmp	r3, #84	; 0x54
    cfec:	f200 80a4 	bhi.w	d138 <_malloc_r+0x490>
    cff0:	0b28      	lsrs	r0, r5, #12
    cff2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    cff6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    cffa:	306e      	adds	r0, #110	; 0x6e
    cffc:	e676      	b.n	ccec <_malloc_r+0x44>
    cffe:	bf00      	nop
    d000:	20002588 	.word	0x20002588
    d004:	20002fe8 	.word	0x20002fe8
    d008:	20002fec 	.word	0x20002fec
    d00c:	20002fe4 	.word	0x20002fe4
    d010:	20002fe0 	.word	0x20002fe0
    d014:	20002994 	.word	0x20002994
    d018:	0a5a      	lsrs	r2, r3, #9
    d01a:	2a04      	cmp	r2, #4
    d01c:	d95e      	bls.n	d0dc <_malloc_r+0x434>
    d01e:	2a14      	cmp	r2, #20
    d020:	f200 80b3 	bhi.w	d18a <_malloc_r+0x4e2>
    d024:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    d028:	0049      	lsls	r1, r1, #1
    d02a:	325b      	adds	r2, #91	; 0x5b
    d02c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    d030:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    d034:	f8df 81dc 	ldr.w	r8, [pc, #476]	; d214 <_malloc_r+0x56c>
    d038:	f1ac 0c08 	sub.w	ip, ip, #8
    d03c:	458c      	cmp	ip, r1
    d03e:	f000 8088 	beq.w	d152 <_malloc_r+0x4aa>
    d042:	684a      	ldr	r2, [r1, #4]
    d044:	f022 0203 	bic.w	r2, r2, #3
    d048:	4293      	cmp	r3, r2
    d04a:	d202      	bcs.n	d052 <_malloc_r+0x3aa>
    d04c:	6889      	ldr	r1, [r1, #8]
    d04e:	458c      	cmp	ip, r1
    d050:	d1f7      	bne.n	d042 <_malloc_r+0x39a>
    d052:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    d056:	687a      	ldr	r2, [r7, #4]
    d058:	f8c4 c00c 	str.w	ip, [r4, #12]
    d05c:	60a1      	str	r1, [r4, #8]
    d05e:	f8cc 4008 	str.w	r4, [ip, #8]
    d062:	60cc      	str	r4, [r1, #12]
    d064:	e688      	b.n	cd78 <_malloc_r+0xd0>
    d066:	1963      	adds	r3, r4, r5
    d068:	f042 0701 	orr.w	r7, r2, #1
    d06c:	f045 0501 	orr.w	r5, r5, #1
    d070:	6065      	str	r5, [r4, #4]
    d072:	4630      	mov	r0, r6
    d074:	614b      	str	r3, [r1, #20]
    d076:	610b      	str	r3, [r1, #16]
    d078:	f8c3 e00c 	str.w	lr, [r3, #12]
    d07c:	f8c3 e008 	str.w	lr, [r3, #8]
    d080:	605f      	str	r7, [r3, #4]
    d082:	509a      	str	r2, [r3, r2]
    d084:	3408      	adds	r4, #8
    d086:	f000 f9c3 	bl	d410 <__malloc_unlock>
    d08a:	e6d5      	b.n	ce38 <_malloc_r+0x190>
    d08c:	684a      	ldr	r2, [r1, #4]
    d08e:	e673      	b.n	cd78 <_malloc_r+0xd0>
    d090:	f108 0801 	add.w	r8, r8, #1
    d094:	f018 0f03 	tst.w	r8, #3
    d098:	f10c 0c08 	add.w	ip, ip, #8
    d09c:	f47f ae7f 	bne.w	cd9e <_malloc_r+0xf6>
    d0a0:	e030      	b.n	d104 <_malloc_r+0x45c>
    d0a2:	68dc      	ldr	r4, [r3, #12]
    d0a4:	42a3      	cmp	r3, r4
    d0a6:	bf08      	it	eq
    d0a8:	3002      	addeq	r0, #2
    d0aa:	f43f ae35 	beq.w	cd18 <_malloc_r+0x70>
    d0ae:	e6b3      	b.n	ce18 <_malloc_r+0x170>
    d0b0:	440b      	add	r3, r1
    d0b2:	460c      	mov	r4, r1
    d0b4:	685a      	ldr	r2, [r3, #4]
    d0b6:	68c9      	ldr	r1, [r1, #12]
    d0b8:	f854 5f08 	ldr.w	r5, [r4, #8]!
    d0bc:	f042 0201 	orr.w	r2, r2, #1
    d0c0:	605a      	str	r2, [r3, #4]
    d0c2:	4630      	mov	r0, r6
    d0c4:	60e9      	str	r1, [r5, #12]
    d0c6:	608d      	str	r5, [r1, #8]
    d0c8:	f000 f9a2 	bl	d410 <__malloc_unlock>
    d0cc:	e6b4      	b.n	ce38 <_malloc_r+0x190>
    d0ce:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    d0d2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    d0d6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    d0da:	e607      	b.n	ccec <_malloc_r+0x44>
    d0dc:	099a      	lsrs	r2, r3, #6
    d0de:	f102 0139 	add.w	r1, r2, #57	; 0x39
    d0e2:	0049      	lsls	r1, r1, #1
    d0e4:	3238      	adds	r2, #56	; 0x38
    d0e6:	e7a1      	b.n	d02c <_malloc_r+0x384>
    d0e8:	42bc      	cmp	r4, r7
    d0ea:	4b4a      	ldr	r3, [pc, #296]	; (d214 <_malloc_r+0x56c>)
    d0ec:	f43f af00 	beq.w	cef0 <_malloc_r+0x248>
    d0f0:	689c      	ldr	r4, [r3, #8]
    d0f2:	6862      	ldr	r2, [r4, #4]
    d0f4:	f022 0203 	bic.w	r2, r2, #3
    d0f8:	e75a      	b.n	cfb0 <_malloc_r+0x308>
    d0fa:	f859 3908 	ldr.w	r3, [r9], #-8
    d0fe:	4599      	cmp	r9, r3
    d100:	f040 8082 	bne.w	d208 <_malloc_r+0x560>
    d104:	f010 0f03 	tst.w	r0, #3
    d108:	f100 30ff 	add.w	r0, r0, #4294967295
    d10c:	d1f5      	bne.n	d0fa <_malloc_r+0x452>
    d10e:	687b      	ldr	r3, [r7, #4]
    d110:	ea23 0304 	bic.w	r3, r3, r4
    d114:	607b      	str	r3, [r7, #4]
    d116:	0064      	lsls	r4, r4, #1
    d118:	429c      	cmp	r4, r3
    d11a:	f63f aebd 	bhi.w	ce98 <_malloc_r+0x1f0>
    d11e:	2c00      	cmp	r4, #0
    d120:	f43f aeba 	beq.w	ce98 <_malloc_r+0x1f0>
    d124:	421c      	tst	r4, r3
    d126:	4640      	mov	r0, r8
    d128:	f47f ae35 	bne.w	cd96 <_malloc_r+0xee>
    d12c:	0064      	lsls	r4, r4, #1
    d12e:	421c      	tst	r4, r3
    d130:	f100 0004 	add.w	r0, r0, #4
    d134:	d0fa      	beq.n	d12c <_malloc_r+0x484>
    d136:	e62e      	b.n	cd96 <_malloc_r+0xee>
    d138:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d13c:	d818      	bhi.n	d170 <_malloc_r+0x4c8>
    d13e:	0be8      	lsrs	r0, r5, #15
    d140:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    d144:	ea4f 034e 	mov.w	r3, lr, lsl #1
    d148:	3077      	adds	r0, #119	; 0x77
    d14a:	e5cf      	b.n	ccec <_malloc_r+0x44>
    d14c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d150:	e6eb      	b.n	cf2a <_malloc_r+0x282>
    d152:	2101      	movs	r1, #1
    d154:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d158:	1092      	asrs	r2, r2, #2
    d15a:	fa01 f202 	lsl.w	r2, r1, r2
    d15e:	431a      	orrs	r2, r3
    d160:	f8c8 2004 	str.w	r2, [r8, #4]
    d164:	4661      	mov	r1, ip
    d166:	e777      	b.n	d058 <_malloc_r+0x3b0>
    d168:	2301      	movs	r3, #1
    d16a:	f8cb 3004 	str.w	r3, [fp, #4]
    d16e:	e725      	b.n	cfbc <_malloc_r+0x314>
    d170:	f240 5254 	movw	r2, #1364	; 0x554
    d174:	4293      	cmp	r3, r2
    d176:	d820      	bhi.n	d1ba <_malloc_r+0x512>
    d178:	0ca8      	lsrs	r0, r5, #18
    d17a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    d17e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    d182:	307c      	adds	r0, #124	; 0x7c
    d184:	e5b2      	b.n	ccec <_malloc_r+0x44>
    d186:	3210      	adds	r2, #16
    d188:	e6a4      	b.n	ced4 <_malloc_r+0x22c>
    d18a:	2a54      	cmp	r2, #84	; 0x54
    d18c:	d826      	bhi.n	d1dc <_malloc_r+0x534>
    d18e:	0b1a      	lsrs	r2, r3, #12
    d190:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    d194:	0049      	lsls	r1, r1, #1
    d196:	326e      	adds	r2, #110	; 0x6e
    d198:	e748      	b.n	d02c <_malloc_r+0x384>
    d19a:	68bc      	ldr	r4, [r7, #8]
    d19c:	6862      	ldr	r2, [r4, #4]
    d19e:	f022 0203 	bic.w	r2, r2, #3
    d1a2:	e705      	b.n	cfb0 <_malloc_r+0x308>
    d1a4:	f3ca 000b 	ubfx	r0, sl, #0, #12
    d1a8:	2800      	cmp	r0, #0
    d1aa:	f47f aea8 	bne.w	cefe <_malloc_r+0x256>
    d1ae:	4442      	add	r2, r8
    d1b0:	68bb      	ldr	r3, [r7, #8]
    d1b2:	f042 0201 	orr.w	r2, r2, #1
    d1b6:	605a      	str	r2, [r3, #4]
    d1b8:	e6ec      	b.n	cf94 <_malloc_r+0x2ec>
    d1ba:	23fe      	movs	r3, #254	; 0xfe
    d1bc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    d1c0:	207e      	movs	r0, #126	; 0x7e
    d1c2:	e593      	b.n	ccec <_malloc_r+0x44>
    d1c4:	2201      	movs	r2, #1
    d1c6:	f04f 0900 	mov.w	r9, #0
    d1ca:	e6c1      	b.n	cf50 <_malloc_r+0x2a8>
    d1cc:	f104 0108 	add.w	r1, r4, #8
    d1d0:	4630      	mov	r0, r6
    d1d2:	f001 f817 	bl	e204 <_free_r>
    d1d6:	f8d9 1000 	ldr.w	r1, [r9]
    d1da:	e6db      	b.n	cf94 <_malloc_r+0x2ec>
    d1dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    d1e0:	d805      	bhi.n	d1ee <_malloc_r+0x546>
    d1e2:	0bda      	lsrs	r2, r3, #15
    d1e4:	f102 0178 	add.w	r1, r2, #120	; 0x78
    d1e8:	0049      	lsls	r1, r1, #1
    d1ea:	3277      	adds	r2, #119	; 0x77
    d1ec:	e71e      	b.n	d02c <_malloc_r+0x384>
    d1ee:	f240 5154 	movw	r1, #1364	; 0x554
    d1f2:	428a      	cmp	r2, r1
    d1f4:	d805      	bhi.n	d202 <_malloc_r+0x55a>
    d1f6:	0c9a      	lsrs	r2, r3, #18
    d1f8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    d1fc:	0049      	lsls	r1, r1, #1
    d1fe:	327c      	adds	r2, #124	; 0x7c
    d200:	e714      	b.n	d02c <_malloc_r+0x384>
    d202:	21fe      	movs	r1, #254	; 0xfe
    d204:	227e      	movs	r2, #126	; 0x7e
    d206:	e711      	b.n	d02c <_malloc_r+0x384>
    d208:	687b      	ldr	r3, [r7, #4]
    d20a:	e784      	b.n	d116 <_malloc_r+0x46e>
    d20c:	08e8      	lsrs	r0, r5, #3
    d20e:	1c43      	adds	r3, r0, #1
    d210:	005b      	lsls	r3, r3, #1
    d212:	e5f8      	b.n	ce06 <_malloc_r+0x15e>
    d214:	20002588 	.word	0x20002588

0000d218 <__ascii_mbtowc>:
    d218:	b082      	sub	sp, #8
    d21a:	b149      	cbz	r1, d230 <__ascii_mbtowc+0x18>
    d21c:	b15a      	cbz	r2, d236 <__ascii_mbtowc+0x1e>
    d21e:	b16b      	cbz	r3, d23c <__ascii_mbtowc+0x24>
    d220:	7813      	ldrb	r3, [r2, #0]
    d222:	600b      	str	r3, [r1, #0]
    d224:	7812      	ldrb	r2, [r2, #0]
    d226:	1c10      	adds	r0, r2, #0
    d228:	bf18      	it	ne
    d22a:	2001      	movne	r0, #1
    d22c:	b002      	add	sp, #8
    d22e:	4770      	bx	lr
    d230:	a901      	add	r1, sp, #4
    d232:	2a00      	cmp	r2, #0
    d234:	d1f3      	bne.n	d21e <__ascii_mbtowc+0x6>
    d236:	4610      	mov	r0, r2
    d238:	b002      	add	sp, #8
    d23a:	4770      	bx	lr
    d23c:	f06f 0001 	mvn.w	r0, #1
    d240:	e7f4      	b.n	d22c <__ascii_mbtowc+0x14>
    d242:	bf00      	nop

0000d244 <memcmp>:
    d244:	2a03      	cmp	r2, #3
    d246:	b470      	push	{r4, r5, r6}
    d248:	d926      	bls.n	d298 <memcmp+0x54>
    d24a:	ea40 0301 	orr.w	r3, r0, r1
    d24e:	079b      	lsls	r3, r3, #30
    d250:	d011      	beq.n	d276 <memcmp+0x32>
    d252:	7804      	ldrb	r4, [r0, #0]
    d254:	780d      	ldrb	r5, [r1, #0]
    d256:	42ac      	cmp	r4, r5
    d258:	d122      	bne.n	d2a0 <memcmp+0x5c>
    d25a:	4402      	add	r2, r0
    d25c:	1c43      	adds	r3, r0, #1
    d25e:	e005      	b.n	d26c <memcmp+0x28>
    d260:	f813 4b01 	ldrb.w	r4, [r3], #1
    d264:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    d268:	42ac      	cmp	r4, r5
    d26a:	d119      	bne.n	d2a0 <memcmp+0x5c>
    d26c:	4293      	cmp	r3, r2
    d26e:	d1f7      	bne.n	d260 <memcmp+0x1c>
    d270:	2000      	movs	r0, #0
    d272:	bc70      	pop	{r4, r5, r6}
    d274:	4770      	bx	lr
    d276:	460c      	mov	r4, r1
    d278:	4603      	mov	r3, r0
    d27a:	681e      	ldr	r6, [r3, #0]
    d27c:	6825      	ldr	r5, [r4, #0]
    d27e:	42ae      	cmp	r6, r5
    d280:	4618      	mov	r0, r3
    d282:	4621      	mov	r1, r4
    d284:	f103 0304 	add.w	r3, r3, #4
    d288:	f104 0404 	add.w	r4, r4, #4
    d28c:	d1e1      	bne.n	d252 <memcmp+0xe>
    d28e:	3a04      	subs	r2, #4
    d290:	2a03      	cmp	r2, #3
    d292:	4618      	mov	r0, r3
    d294:	4621      	mov	r1, r4
    d296:	d8f0      	bhi.n	d27a <memcmp+0x36>
    d298:	2a00      	cmp	r2, #0
    d29a:	d1da      	bne.n	d252 <memcmp+0xe>
    d29c:	4610      	mov	r0, r2
    d29e:	e7e8      	b.n	d272 <memcmp+0x2e>
    d2a0:	1b60      	subs	r0, r4, r5
    d2a2:	bc70      	pop	{r4, r5, r6}
    d2a4:	4770      	bx	lr
    d2a6:	bf00      	nop

0000d2a8 <memmove>:
    d2a8:	4288      	cmp	r0, r1
    d2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ac:	d90d      	bls.n	d2ca <memmove+0x22>
    d2ae:	188b      	adds	r3, r1, r2
    d2b0:	4298      	cmp	r0, r3
    d2b2:	d20a      	bcs.n	d2ca <memmove+0x22>
    d2b4:	1881      	adds	r1, r0, r2
    d2b6:	2a00      	cmp	r2, #0
    d2b8:	d051      	beq.n	d35e <memmove+0xb6>
    d2ba:	1a9a      	subs	r2, r3, r2
    d2bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    d2c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
    d2c4:	4293      	cmp	r3, r2
    d2c6:	d1f9      	bne.n	d2bc <memmove+0x14>
    d2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2ca:	2a0f      	cmp	r2, #15
    d2cc:	d948      	bls.n	d360 <memmove+0xb8>
    d2ce:	ea41 0300 	orr.w	r3, r1, r0
    d2d2:	079b      	lsls	r3, r3, #30
    d2d4:	d146      	bne.n	d364 <memmove+0xbc>
    d2d6:	f100 0410 	add.w	r4, r0, #16
    d2da:	f101 0310 	add.w	r3, r1, #16
    d2de:	4615      	mov	r5, r2
    d2e0:	f853 6c10 	ldr.w	r6, [r3, #-16]
    d2e4:	f844 6c10 	str.w	r6, [r4, #-16]
    d2e8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    d2ec:	f844 6c0c 	str.w	r6, [r4, #-12]
    d2f0:	f853 6c08 	ldr.w	r6, [r3, #-8]
    d2f4:	f844 6c08 	str.w	r6, [r4, #-8]
    d2f8:	3d10      	subs	r5, #16
    d2fa:	f853 6c04 	ldr.w	r6, [r3, #-4]
    d2fe:	f844 6c04 	str.w	r6, [r4, #-4]
    d302:	2d0f      	cmp	r5, #15
    d304:	f103 0310 	add.w	r3, r3, #16
    d308:	f104 0410 	add.w	r4, r4, #16
    d30c:	d8e8      	bhi.n	d2e0 <memmove+0x38>
    d30e:	f1a2 0310 	sub.w	r3, r2, #16
    d312:	f023 030f 	bic.w	r3, r3, #15
    d316:	f002 0e0f 	and.w	lr, r2, #15
    d31a:	3310      	adds	r3, #16
    d31c:	f1be 0f03 	cmp.w	lr, #3
    d320:	4419      	add	r1, r3
    d322:	4403      	add	r3, r0
    d324:	d921      	bls.n	d36a <memmove+0xc2>
    d326:	1f1e      	subs	r6, r3, #4
    d328:	460d      	mov	r5, r1
    d32a:	4674      	mov	r4, lr
    d32c:	3c04      	subs	r4, #4
    d32e:	f855 7b04 	ldr.w	r7, [r5], #4
    d332:	f846 7f04 	str.w	r7, [r6, #4]!
    d336:	2c03      	cmp	r4, #3
    d338:	d8f8      	bhi.n	d32c <memmove+0x84>
    d33a:	f1ae 0404 	sub.w	r4, lr, #4
    d33e:	f024 0403 	bic.w	r4, r4, #3
    d342:	3404      	adds	r4, #4
    d344:	4423      	add	r3, r4
    d346:	4421      	add	r1, r4
    d348:	f002 0203 	and.w	r2, r2, #3
    d34c:	b162      	cbz	r2, d368 <memmove+0xc0>
    d34e:	3b01      	subs	r3, #1
    d350:	440a      	add	r2, r1
    d352:	f811 4b01 	ldrb.w	r4, [r1], #1
    d356:	f803 4f01 	strb.w	r4, [r3, #1]!
    d35a:	428a      	cmp	r2, r1
    d35c:	d1f9      	bne.n	d352 <memmove+0xaa>
    d35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d360:	4603      	mov	r3, r0
    d362:	e7f3      	b.n	d34c <memmove+0xa4>
    d364:	4603      	mov	r3, r0
    d366:	e7f2      	b.n	d34e <memmove+0xa6>
    d368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d36a:	4672      	mov	r2, lr
    d36c:	e7ee      	b.n	d34c <memmove+0xa4>
    d36e:	bf00      	nop

0000d370 <memset>:
    d370:	b470      	push	{r4, r5, r6}
    d372:	0784      	lsls	r4, r0, #30
    d374:	d046      	beq.n	d404 <memset+0x94>
    d376:	1e54      	subs	r4, r2, #1
    d378:	2a00      	cmp	r2, #0
    d37a:	d041      	beq.n	d400 <memset+0x90>
    d37c:	b2cd      	uxtb	r5, r1
    d37e:	4603      	mov	r3, r0
    d380:	e002      	b.n	d388 <memset+0x18>
    d382:	1e62      	subs	r2, r4, #1
    d384:	b3e4      	cbz	r4, d400 <memset+0x90>
    d386:	4614      	mov	r4, r2
    d388:	f803 5b01 	strb.w	r5, [r3], #1
    d38c:	079a      	lsls	r2, r3, #30
    d38e:	d1f8      	bne.n	d382 <memset+0x12>
    d390:	2c03      	cmp	r4, #3
    d392:	d92e      	bls.n	d3f2 <memset+0x82>
    d394:	b2cd      	uxtb	r5, r1
    d396:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d39a:	2c0f      	cmp	r4, #15
    d39c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d3a0:	d919      	bls.n	d3d6 <memset+0x66>
    d3a2:	f103 0210 	add.w	r2, r3, #16
    d3a6:	4626      	mov	r6, r4
    d3a8:	3e10      	subs	r6, #16
    d3aa:	2e0f      	cmp	r6, #15
    d3ac:	f842 5c10 	str.w	r5, [r2, #-16]
    d3b0:	f842 5c0c 	str.w	r5, [r2, #-12]
    d3b4:	f842 5c08 	str.w	r5, [r2, #-8]
    d3b8:	f842 5c04 	str.w	r5, [r2, #-4]
    d3bc:	f102 0210 	add.w	r2, r2, #16
    d3c0:	d8f2      	bhi.n	d3a8 <memset+0x38>
    d3c2:	f1a4 0210 	sub.w	r2, r4, #16
    d3c6:	f022 020f 	bic.w	r2, r2, #15
    d3ca:	f004 040f 	and.w	r4, r4, #15
    d3ce:	3210      	adds	r2, #16
    d3d0:	2c03      	cmp	r4, #3
    d3d2:	4413      	add	r3, r2
    d3d4:	d90d      	bls.n	d3f2 <memset+0x82>
    d3d6:	461e      	mov	r6, r3
    d3d8:	4622      	mov	r2, r4
    d3da:	3a04      	subs	r2, #4
    d3dc:	2a03      	cmp	r2, #3
    d3de:	f846 5b04 	str.w	r5, [r6], #4
    d3e2:	d8fa      	bhi.n	d3da <memset+0x6a>
    d3e4:	1f22      	subs	r2, r4, #4
    d3e6:	f022 0203 	bic.w	r2, r2, #3
    d3ea:	3204      	adds	r2, #4
    d3ec:	4413      	add	r3, r2
    d3ee:	f004 0403 	and.w	r4, r4, #3
    d3f2:	b12c      	cbz	r4, d400 <memset+0x90>
    d3f4:	b2c9      	uxtb	r1, r1
    d3f6:	441c      	add	r4, r3
    d3f8:	f803 1b01 	strb.w	r1, [r3], #1
    d3fc:	42a3      	cmp	r3, r4
    d3fe:	d1fb      	bne.n	d3f8 <memset+0x88>
    d400:	bc70      	pop	{r4, r5, r6}
    d402:	4770      	bx	lr
    d404:	4614      	mov	r4, r2
    d406:	4603      	mov	r3, r0
    d408:	e7c2      	b.n	d390 <memset+0x20>
    d40a:	bf00      	nop

0000d40c <__malloc_lock>:
    d40c:	4770      	bx	lr
    d40e:	bf00      	nop

0000d410 <__malloc_unlock>:
    d410:	4770      	bx	lr
    d412:	bf00      	nop

0000d414 <realloc>:
    d414:	4b02      	ldr	r3, [pc, #8]	; (d420 <realloc+0xc>)
    d416:	460a      	mov	r2, r1
    d418:	4601      	mov	r1, r0
    d41a:	6818      	ldr	r0, [r3, #0]
    d41c:	f000 b802 	b.w	d424 <_realloc_r>
    d420:	20002418 	.word	0x20002418

0000d424 <_realloc_r>:
    d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d428:	4617      	mov	r7, r2
    d42a:	b083      	sub	sp, #12
    d42c:	2900      	cmp	r1, #0
    d42e:	f000 80c1 	beq.w	d5b4 <_realloc_r+0x190>
    d432:	460e      	mov	r6, r1
    d434:	4681      	mov	r9, r0
    d436:	f107 050b 	add.w	r5, r7, #11
    d43a:	f7ff ffe7 	bl	d40c <__malloc_lock>
    d43e:	f856 ec04 	ldr.w	lr, [r6, #-4]
    d442:	2d16      	cmp	r5, #22
    d444:	f02e 0403 	bic.w	r4, lr, #3
    d448:	f1a6 0808 	sub.w	r8, r6, #8
    d44c:	d840      	bhi.n	d4d0 <_realloc_r+0xac>
    d44e:	2210      	movs	r2, #16
    d450:	4615      	mov	r5, r2
    d452:	42af      	cmp	r7, r5
    d454:	d841      	bhi.n	d4da <_realloc_r+0xb6>
    d456:	4294      	cmp	r4, r2
    d458:	da75      	bge.n	d546 <_realloc_r+0x122>
    d45a:	4bc9      	ldr	r3, [pc, #804]	; (d780 <_realloc_r+0x35c>)
    d45c:	6899      	ldr	r1, [r3, #8]
    d45e:	eb08 0004 	add.w	r0, r8, r4
    d462:	4288      	cmp	r0, r1
    d464:	6841      	ldr	r1, [r0, #4]
    d466:	f000 80d9 	beq.w	d61c <_realloc_r+0x1f8>
    d46a:	f021 0301 	bic.w	r3, r1, #1
    d46e:	4403      	add	r3, r0
    d470:	685b      	ldr	r3, [r3, #4]
    d472:	07db      	lsls	r3, r3, #31
    d474:	d57d      	bpl.n	d572 <_realloc_r+0x14e>
    d476:	f01e 0f01 	tst.w	lr, #1
    d47a:	d035      	beq.n	d4e8 <_realloc_r+0xc4>
    d47c:	4639      	mov	r1, r7
    d47e:	4648      	mov	r0, r9
    d480:	f7ff fc12 	bl	cca8 <_malloc_r>
    d484:	4607      	mov	r7, r0
    d486:	b1e0      	cbz	r0, d4c2 <_realloc_r+0x9e>
    d488:	f856 3c04 	ldr.w	r3, [r6, #-4]
    d48c:	f023 0301 	bic.w	r3, r3, #1
    d490:	4443      	add	r3, r8
    d492:	f1a0 0208 	sub.w	r2, r0, #8
    d496:	429a      	cmp	r2, r3
    d498:	f000 8144 	beq.w	d724 <_realloc_r+0x300>
    d49c:	1f22      	subs	r2, r4, #4
    d49e:	2a24      	cmp	r2, #36	; 0x24
    d4a0:	f200 8131 	bhi.w	d706 <_realloc_r+0x2e2>
    d4a4:	2a13      	cmp	r2, #19
    d4a6:	f200 8104 	bhi.w	d6b2 <_realloc_r+0x28e>
    d4aa:	4603      	mov	r3, r0
    d4ac:	4632      	mov	r2, r6
    d4ae:	6811      	ldr	r1, [r2, #0]
    d4b0:	6019      	str	r1, [r3, #0]
    d4b2:	6851      	ldr	r1, [r2, #4]
    d4b4:	6059      	str	r1, [r3, #4]
    d4b6:	6892      	ldr	r2, [r2, #8]
    d4b8:	609a      	str	r2, [r3, #8]
    d4ba:	4631      	mov	r1, r6
    d4bc:	4648      	mov	r0, r9
    d4be:	f000 fea1 	bl	e204 <_free_r>
    d4c2:	4648      	mov	r0, r9
    d4c4:	f7ff ffa4 	bl	d410 <__malloc_unlock>
    d4c8:	4638      	mov	r0, r7
    d4ca:	b003      	add	sp, #12
    d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4d0:	f025 0507 	bic.w	r5, r5, #7
    d4d4:	2d00      	cmp	r5, #0
    d4d6:	462a      	mov	r2, r5
    d4d8:	dabb      	bge.n	d452 <_realloc_r+0x2e>
    d4da:	230c      	movs	r3, #12
    d4dc:	2000      	movs	r0, #0
    d4de:	f8c9 3000 	str.w	r3, [r9]
    d4e2:	b003      	add	sp, #12
    d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4e8:	f856 3c08 	ldr.w	r3, [r6, #-8]
    d4ec:	ebc3 0a08 	rsb	sl, r3, r8
    d4f0:	f8da 3004 	ldr.w	r3, [sl, #4]
    d4f4:	f023 0c03 	bic.w	ip, r3, #3
    d4f8:	eb04 030c 	add.w	r3, r4, ip
    d4fc:	4293      	cmp	r3, r2
    d4fe:	dbbd      	blt.n	d47c <_realloc_r+0x58>
    d500:	4657      	mov	r7, sl
    d502:	f8da 100c 	ldr.w	r1, [sl, #12]
    d506:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d50a:	1f22      	subs	r2, r4, #4
    d50c:	2a24      	cmp	r2, #36	; 0x24
    d50e:	60c1      	str	r1, [r0, #12]
    d510:	6088      	str	r0, [r1, #8]
    d512:	f200 8117 	bhi.w	d744 <_realloc_r+0x320>
    d516:	2a13      	cmp	r2, #19
    d518:	f240 8112 	bls.w	d740 <_realloc_r+0x31c>
    d51c:	6831      	ldr	r1, [r6, #0]
    d51e:	f8ca 1008 	str.w	r1, [sl, #8]
    d522:	6871      	ldr	r1, [r6, #4]
    d524:	f8ca 100c 	str.w	r1, [sl, #12]
    d528:	2a1b      	cmp	r2, #27
    d52a:	f200 812b 	bhi.w	d784 <_realloc_r+0x360>
    d52e:	3608      	adds	r6, #8
    d530:	f10a 0210 	add.w	r2, sl, #16
    d534:	6831      	ldr	r1, [r6, #0]
    d536:	6011      	str	r1, [r2, #0]
    d538:	6871      	ldr	r1, [r6, #4]
    d53a:	6051      	str	r1, [r2, #4]
    d53c:	68b1      	ldr	r1, [r6, #8]
    d53e:	6091      	str	r1, [r2, #8]
    d540:	463e      	mov	r6, r7
    d542:	461c      	mov	r4, r3
    d544:	46d0      	mov	r8, sl
    d546:	1b63      	subs	r3, r4, r5
    d548:	2b0f      	cmp	r3, #15
    d54a:	d81d      	bhi.n	d588 <_realloc_r+0x164>
    d54c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d550:	f003 0301 	and.w	r3, r3, #1
    d554:	4323      	orrs	r3, r4
    d556:	4444      	add	r4, r8
    d558:	f8c8 3004 	str.w	r3, [r8, #4]
    d55c:	6863      	ldr	r3, [r4, #4]
    d55e:	f043 0301 	orr.w	r3, r3, #1
    d562:	6063      	str	r3, [r4, #4]
    d564:	4648      	mov	r0, r9
    d566:	f7ff ff53 	bl	d410 <__malloc_unlock>
    d56a:	4630      	mov	r0, r6
    d56c:	b003      	add	sp, #12
    d56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d572:	f021 0103 	bic.w	r1, r1, #3
    d576:	4421      	add	r1, r4
    d578:	4291      	cmp	r1, r2
    d57a:	db21      	blt.n	d5c0 <_realloc_r+0x19c>
    d57c:	68c3      	ldr	r3, [r0, #12]
    d57e:	6882      	ldr	r2, [r0, #8]
    d580:	460c      	mov	r4, r1
    d582:	60d3      	str	r3, [r2, #12]
    d584:	609a      	str	r2, [r3, #8]
    d586:	e7de      	b.n	d546 <_realloc_r+0x122>
    d588:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d58c:	eb08 0105 	add.w	r1, r8, r5
    d590:	f002 0201 	and.w	r2, r2, #1
    d594:	4315      	orrs	r5, r2
    d596:	f043 0201 	orr.w	r2, r3, #1
    d59a:	440b      	add	r3, r1
    d59c:	f8c8 5004 	str.w	r5, [r8, #4]
    d5a0:	604a      	str	r2, [r1, #4]
    d5a2:	685a      	ldr	r2, [r3, #4]
    d5a4:	f042 0201 	orr.w	r2, r2, #1
    d5a8:	3108      	adds	r1, #8
    d5aa:	605a      	str	r2, [r3, #4]
    d5ac:	4648      	mov	r0, r9
    d5ae:	f000 fe29 	bl	e204 <_free_r>
    d5b2:	e7d7      	b.n	d564 <_realloc_r+0x140>
    d5b4:	4611      	mov	r1, r2
    d5b6:	b003      	add	sp, #12
    d5b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5bc:	f7ff bb74 	b.w	cca8 <_malloc_r>
    d5c0:	f01e 0f01 	tst.w	lr, #1
    d5c4:	f47f af5a 	bne.w	d47c <_realloc_r+0x58>
    d5c8:	f856 3c08 	ldr.w	r3, [r6, #-8]
    d5cc:	ebc3 0a08 	rsb	sl, r3, r8
    d5d0:	f8da 3004 	ldr.w	r3, [sl, #4]
    d5d4:	f023 0c03 	bic.w	ip, r3, #3
    d5d8:	eb01 0e0c 	add.w	lr, r1, ip
    d5dc:	4596      	cmp	lr, r2
    d5de:	db8b      	blt.n	d4f8 <_realloc_r+0xd4>
    d5e0:	68c3      	ldr	r3, [r0, #12]
    d5e2:	6882      	ldr	r2, [r0, #8]
    d5e4:	4657      	mov	r7, sl
    d5e6:	60d3      	str	r3, [r2, #12]
    d5e8:	609a      	str	r2, [r3, #8]
    d5ea:	f857 1f08 	ldr.w	r1, [r7, #8]!
    d5ee:	f8da 300c 	ldr.w	r3, [sl, #12]
    d5f2:	60cb      	str	r3, [r1, #12]
    d5f4:	1f22      	subs	r2, r4, #4
    d5f6:	2a24      	cmp	r2, #36	; 0x24
    d5f8:	6099      	str	r1, [r3, #8]
    d5fa:	f200 8099 	bhi.w	d730 <_realloc_r+0x30c>
    d5fe:	2a13      	cmp	r2, #19
    d600:	d962      	bls.n	d6c8 <_realloc_r+0x2a4>
    d602:	6833      	ldr	r3, [r6, #0]
    d604:	f8ca 3008 	str.w	r3, [sl, #8]
    d608:	6873      	ldr	r3, [r6, #4]
    d60a:	f8ca 300c 	str.w	r3, [sl, #12]
    d60e:	2a1b      	cmp	r2, #27
    d610:	f200 80a0 	bhi.w	d754 <_realloc_r+0x330>
    d614:	3608      	adds	r6, #8
    d616:	f10a 0310 	add.w	r3, sl, #16
    d61a:	e056      	b.n	d6ca <_realloc_r+0x2a6>
    d61c:	f021 0b03 	bic.w	fp, r1, #3
    d620:	44a3      	add	fp, r4
    d622:	f105 0010 	add.w	r0, r5, #16
    d626:	4583      	cmp	fp, r0
    d628:	da59      	bge.n	d6de <_realloc_r+0x2ba>
    d62a:	f01e 0f01 	tst.w	lr, #1
    d62e:	f47f af25 	bne.w	d47c <_realloc_r+0x58>
    d632:	f856 1c08 	ldr.w	r1, [r6, #-8]
    d636:	ebc1 0a08 	rsb	sl, r1, r8
    d63a:	f8da 1004 	ldr.w	r1, [sl, #4]
    d63e:	f021 0c03 	bic.w	ip, r1, #3
    d642:	44e3      	add	fp, ip
    d644:	4558      	cmp	r0, fp
    d646:	f73f af57 	bgt.w	d4f8 <_realloc_r+0xd4>
    d64a:	4657      	mov	r7, sl
    d64c:	f8da 100c 	ldr.w	r1, [sl, #12]
    d650:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d654:	1f22      	subs	r2, r4, #4
    d656:	2a24      	cmp	r2, #36	; 0x24
    d658:	60c1      	str	r1, [r0, #12]
    d65a:	6088      	str	r0, [r1, #8]
    d65c:	f200 80b4 	bhi.w	d7c8 <_realloc_r+0x3a4>
    d660:	2a13      	cmp	r2, #19
    d662:	f240 80a5 	bls.w	d7b0 <_realloc_r+0x38c>
    d666:	6831      	ldr	r1, [r6, #0]
    d668:	f8ca 1008 	str.w	r1, [sl, #8]
    d66c:	6871      	ldr	r1, [r6, #4]
    d66e:	f8ca 100c 	str.w	r1, [sl, #12]
    d672:	2a1b      	cmp	r2, #27
    d674:	f200 80af 	bhi.w	d7d6 <_realloc_r+0x3b2>
    d678:	3608      	adds	r6, #8
    d67a:	f10a 0210 	add.w	r2, sl, #16
    d67e:	6831      	ldr	r1, [r6, #0]
    d680:	6011      	str	r1, [r2, #0]
    d682:	6871      	ldr	r1, [r6, #4]
    d684:	6051      	str	r1, [r2, #4]
    d686:	68b1      	ldr	r1, [r6, #8]
    d688:	6091      	str	r1, [r2, #8]
    d68a:	eb0a 0105 	add.w	r1, sl, r5
    d68e:	ebc5 020b 	rsb	r2, r5, fp
    d692:	f042 0201 	orr.w	r2, r2, #1
    d696:	6099      	str	r1, [r3, #8]
    d698:	604a      	str	r2, [r1, #4]
    d69a:	f8da 3004 	ldr.w	r3, [sl, #4]
    d69e:	f003 0301 	and.w	r3, r3, #1
    d6a2:	431d      	orrs	r5, r3
    d6a4:	4648      	mov	r0, r9
    d6a6:	f8ca 5004 	str.w	r5, [sl, #4]
    d6aa:	f7ff feb1 	bl	d410 <__malloc_unlock>
    d6ae:	4638      	mov	r0, r7
    d6b0:	e75c      	b.n	d56c <_realloc_r+0x148>
    d6b2:	6833      	ldr	r3, [r6, #0]
    d6b4:	6003      	str	r3, [r0, #0]
    d6b6:	6873      	ldr	r3, [r6, #4]
    d6b8:	6043      	str	r3, [r0, #4]
    d6ba:	2a1b      	cmp	r2, #27
    d6bc:	d827      	bhi.n	d70e <_realloc_r+0x2ea>
    d6be:	f100 0308 	add.w	r3, r0, #8
    d6c2:	f106 0208 	add.w	r2, r6, #8
    d6c6:	e6f2      	b.n	d4ae <_realloc_r+0x8a>
    d6c8:	463b      	mov	r3, r7
    d6ca:	6832      	ldr	r2, [r6, #0]
    d6cc:	601a      	str	r2, [r3, #0]
    d6ce:	6872      	ldr	r2, [r6, #4]
    d6d0:	605a      	str	r2, [r3, #4]
    d6d2:	68b2      	ldr	r2, [r6, #8]
    d6d4:	609a      	str	r2, [r3, #8]
    d6d6:	463e      	mov	r6, r7
    d6d8:	4674      	mov	r4, lr
    d6da:	46d0      	mov	r8, sl
    d6dc:	e733      	b.n	d546 <_realloc_r+0x122>
    d6de:	eb08 0105 	add.w	r1, r8, r5
    d6e2:	ebc5 0b0b 	rsb	fp, r5, fp
    d6e6:	f04b 0201 	orr.w	r2, fp, #1
    d6ea:	6099      	str	r1, [r3, #8]
    d6ec:	604a      	str	r2, [r1, #4]
    d6ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
    d6f2:	f003 0301 	and.w	r3, r3, #1
    d6f6:	431d      	orrs	r5, r3
    d6f8:	4648      	mov	r0, r9
    d6fa:	f846 5c04 	str.w	r5, [r6, #-4]
    d6fe:	f7ff fe87 	bl	d410 <__malloc_unlock>
    d702:	4630      	mov	r0, r6
    d704:	e732      	b.n	d56c <_realloc_r+0x148>
    d706:	4631      	mov	r1, r6
    d708:	f7ff fdce 	bl	d2a8 <memmove>
    d70c:	e6d5      	b.n	d4ba <_realloc_r+0x96>
    d70e:	68b3      	ldr	r3, [r6, #8]
    d710:	6083      	str	r3, [r0, #8]
    d712:	68f3      	ldr	r3, [r6, #12]
    d714:	60c3      	str	r3, [r0, #12]
    d716:	2a24      	cmp	r2, #36	; 0x24
    d718:	d028      	beq.n	d76c <_realloc_r+0x348>
    d71a:	f100 0310 	add.w	r3, r0, #16
    d71e:	f106 0210 	add.w	r2, r6, #16
    d722:	e6c4      	b.n	d4ae <_realloc_r+0x8a>
    d724:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d728:	f023 0303 	bic.w	r3, r3, #3
    d72c:	441c      	add	r4, r3
    d72e:	e70a      	b.n	d546 <_realloc_r+0x122>
    d730:	4631      	mov	r1, r6
    d732:	4638      	mov	r0, r7
    d734:	4674      	mov	r4, lr
    d736:	46d0      	mov	r8, sl
    d738:	f7ff fdb6 	bl	d2a8 <memmove>
    d73c:	463e      	mov	r6, r7
    d73e:	e702      	b.n	d546 <_realloc_r+0x122>
    d740:	463a      	mov	r2, r7
    d742:	e6f7      	b.n	d534 <_realloc_r+0x110>
    d744:	4631      	mov	r1, r6
    d746:	4638      	mov	r0, r7
    d748:	461c      	mov	r4, r3
    d74a:	46d0      	mov	r8, sl
    d74c:	f7ff fdac 	bl	d2a8 <memmove>
    d750:	463e      	mov	r6, r7
    d752:	e6f8      	b.n	d546 <_realloc_r+0x122>
    d754:	68b3      	ldr	r3, [r6, #8]
    d756:	f8ca 3010 	str.w	r3, [sl, #16]
    d75a:	68f3      	ldr	r3, [r6, #12]
    d75c:	f8ca 3014 	str.w	r3, [sl, #20]
    d760:	2a24      	cmp	r2, #36	; 0x24
    d762:	d01b      	beq.n	d79c <_realloc_r+0x378>
    d764:	3610      	adds	r6, #16
    d766:	f10a 0318 	add.w	r3, sl, #24
    d76a:	e7ae      	b.n	d6ca <_realloc_r+0x2a6>
    d76c:	6933      	ldr	r3, [r6, #16]
    d76e:	6103      	str	r3, [r0, #16]
    d770:	6973      	ldr	r3, [r6, #20]
    d772:	6143      	str	r3, [r0, #20]
    d774:	f106 0218 	add.w	r2, r6, #24
    d778:	f100 0318 	add.w	r3, r0, #24
    d77c:	e697      	b.n	d4ae <_realloc_r+0x8a>
    d77e:	bf00      	nop
    d780:	20002588 	.word	0x20002588
    d784:	68b1      	ldr	r1, [r6, #8]
    d786:	f8ca 1010 	str.w	r1, [sl, #16]
    d78a:	68f1      	ldr	r1, [r6, #12]
    d78c:	f8ca 1014 	str.w	r1, [sl, #20]
    d790:	2a24      	cmp	r2, #36	; 0x24
    d792:	d00f      	beq.n	d7b4 <_realloc_r+0x390>
    d794:	3610      	adds	r6, #16
    d796:	f10a 0218 	add.w	r2, sl, #24
    d79a:	e6cb      	b.n	d534 <_realloc_r+0x110>
    d79c:	6933      	ldr	r3, [r6, #16]
    d79e:	f8ca 3018 	str.w	r3, [sl, #24]
    d7a2:	6973      	ldr	r3, [r6, #20]
    d7a4:	f8ca 301c 	str.w	r3, [sl, #28]
    d7a8:	3618      	adds	r6, #24
    d7aa:	f10a 0320 	add.w	r3, sl, #32
    d7ae:	e78c      	b.n	d6ca <_realloc_r+0x2a6>
    d7b0:	463a      	mov	r2, r7
    d7b2:	e764      	b.n	d67e <_realloc_r+0x25a>
    d7b4:	6932      	ldr	r2, [r6, #16]
    d7b6:	f8ca 2018 	str.w	r2, [sl, #24]
    d7ba:	6972      	ldr	r2, [r6, #20]
    d7bc:	f8ca 201c 	str.w	r2, [sl, #28]
    d7c0:	3618      	adds	r6, #24
    d7c2:	f10a 0220 	add.w	r2, sl, #32
    d7c6:	e6b5      	b.n	d534 <_realloc_r+0x110>
    d7c8:	4631      	mov	r1, r6
    d7ca:	4638      	mov	r0, r7
    d7cc:	9301      	str	r3, [sp, #4]
    d7ce:	f7ff fd6b 	bl	d2a8 <memmove>
    d7d2:	9b01      	ldr	r3, [sp, #4]
    d7d4:	e759      	b.n	d68a <_realloc_r+0x266>
    d7d6:	68b1      	ldr	r1, [r6, #8]
    d7d8:	f8ca 1010 	str.w	r1, [sl, #16]
    d7dc:	68f1      	ldr	r1, [r6, #12]
    d7de:	f8ca 1014 	str.w	r1, [sl, #20]
    d7e2:	2a24      	cmp	r2, #36	; 0x24
    d7e4:	d003      	beq.n	d7ee <_realloc_r+0x3ca>
    d7e6:	3610      	adds	r6, #16
    d7e8:	f10a 0218 	add.w	r2, sl, #24
    d7ec:	e747      	b.n	d67e <_realloc_r+0x25a>
    d7ee:	6932      	ldr	r2, [r6, #16]
    d7f0:	f8ca 2018 	str.w	r2, [sl, #24]
    d7f4:	6972      	ldr	r2, [r6, #20]
    d7f6:	f8ca 201c 	str.w	r2, [sl, #28]
    d7fa:	3618      	adds	r6, #24
    d7fc:	f10a 0220 	add.w	r2, sl, #32
    d800:	e73d      	b.n	d67e <_realloc_r+0x25a>
    d802:	bf00      	nop

0000d804 <_sbrk_r>:
    d804:	b538      	push	{r3, r4, r5, lr}
    d806:	4c07      	ldr	r4, [pc, #28]	; (d824 <_sbrk_r+0x20>)
    d808:	2300      	movs	r3, #0
    d80a:	4605      	mov	r5, r0
    d80c:	4608      	mov	r0, r1
    d80e:	6023      	str	r3, [r4, #0]
    d810:	f7fd fb2a 	bl	ae68 <_sbrk>
    d814:	1c43      	adds	r3, r0, #1
    d816:	d000      	beq.n	d81a <_sbrk_r+0x16>
    d818:	bd38      	pop	{r3, r4, r5, pc}
    d81a:	6823      	ldr	r3, [r4, #0]
    d81c:	2b00      	cmp	r3, #0
    d81e:	d0fb      	beq.n	d818 <_sbrk_r+0x14>
    d820:	602b      	str	r3, [r5, #0]
    d822:	bd38      	pop	{r3, r4, r5, pc}
    d824:	2000528c 	.word	0x2000528c

0000d828 <strchr>:
    d828:	b470      	push	{r4, r5, r6}
    d82a:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    d82e:	d034      	beq.n	d89a <strchr+0x72>
    d830:	0785      	lsls	r5, r0, #30
    d832:	d00f      	beq.n	d854 <strchr+0x2c>
    d834:	7803      	ldrb	r3, [r0, #0]
    d836:	2b00      	cmp	r3, #0
    d838:	d05a      	beq.n	d8f0 <strchr+0xc8>
    d83a:	429c      	cmp	r4, r3
    d83c:	d02b      	beq.n	d896 <strchr+0x6e>
    d83e:	1c43      	adds	r3, r0, #1
    d840:	e005      	b.n	d84e <strchr+0x26>
    d842:	f813 2b01 	ldrb.w	r2, [r3], #1
    d846:	2a00      	cmp	r2, #0
    d848:	d04f      	beq.n	d8ea <strchr+0xc2>
    d84a:	4294      	cmp	r4, r2
    d84c:	d023      	beq.n	d896 <strchr+0x6e>
    d84e:	079a      	lsls	r2, r3, #30
    d850:	4618      	mov	r0, r3
    d852:	d1f6      	bne.n	d842 <strchr+0x1a>
    d854:	020e      	lsls	r6, r1, #8
    d856:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    d85a:	4326      	orrs	r6, r4
    d85c:	6803      	ldr	r3, [r0, #0]
    d85e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    d862:	e001      	b.n	d868 <strchr+0x40>
    d864:	f850 3f04 	ldr.w	r3, [r0, #4]!
    d868:	ea86 0503 	eor.w	r5, r6, r3
    d86c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
    d870:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
    d874:	ea22 0205 	bic.w	r2, r2, r5
    d878:	ea21 0303 	bic.w	r3, r1, r3
    d87c:	4313      	orrs	r3, r2
    d87e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    d882:	d0ef      	beq.n	d864 <strchr+0x3c>
    d884:	7803      	ldrb	r3, [r0, #0]
    d886:	b923      	cbnz	r3, d892 <strchr+0x6a>
    d888:	e032      	b.n	d8f0 <strchr+0xc8>
    d88a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    d88e:	2b00      	cmp	r3, #0
    d890:	d02e      	beq.n	d8f0 <strchr+0xc8>
    d892:	429c      	cmp	r4, r3
    d894:	d1f9      	bne.n	d88a <strchr+0x62>
    d896:	bc70      	pop	{r4, r5, r6}
    d898:	4770      	bx	lr
    d89a:	0784      	lsls	r4, r0, #30
    d89c:	d00b      	beq.n	d8b6 <strchr+0x8e>
    d89e:	7803      	ldrb	r3, [r0, #0]
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d0f8      	beq.n	d896 <strchr+0x6e>
    d8a4:	1c43      	adds	r3, r0, #1
    d8a6:	e003      	b.n	d8b0 <strchr+0x88>
    d8a8:	7802      	ldrb	r2, [r0, #0]
    d8aa:	3301      	adds	r3, #1
    d8ac:	2a00      	cmp	r2, #0
    d8ae:	d0f2      	beq.n	d896 <strchr+0x6e>
    d8b0:	0799      	lsls	r1, r3, #30
    d8b2:	4618      	mov	r0, r3
    d8b4:	d1f8      	bne.n	d8a8 <strchr+0x80>
    d8b6:	6802      	ldr	r2, [r0, #0]
    d8b8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    d8bc:	ea23 0302 	bic.w	r3, r3, r2
    d8c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    d8c4:	d108      	bne.n	d8d8 <strchr+0xb0>
    d8c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d8ca:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    d8ce:	ea23 0302 	bic.w	r3, r3, r2
    d8d2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    d8d6:	d0f6      	beq.n	d8c6 <strchr+0x9e>
    d8d8:	7803      	ldrb	r3, [r0, #0]
    d8da:	2b00      	cmp	r3, #0
    d8dc:	d0db      	beq.n	d896 <strchr+0x6e>
    d8de:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d1fb      	bne.n	d8de <strchr+0xb6>
    d8e6:	bc70      	pop	{r4, r5, r6}
    d8e8:	4770      	bx	lr
    d8ea:	4610      	mov	r0, r2
    d8ec:	bc70      	pop	{r4, r5, r6}
    d8ee:	4770      	bx	lr
    d8f0:	4618      	mov	r0, r3
    d8f2:	bc70      	pop	{r4, r5, r6}
    d8f4:	4770      	bx	lr
    d8f6:	bf00      	nop
	...
    d900:	eba2 0003 	sub.w	r0, r2, r3
    d904:	4770      	bx	lr
    d906:	bf00      	nop

0000d908 <strcmp>:
    d908:	7802      	ldrb	r2, [r0, #0]
    d90a:	780b      	ldrb	r3, [r1, #0]
    d90c:	2a01      	cmp	r2, #1
    d90e:	bf28      	it	cs
    d910:	429a      	cmpcs	r2, r3
    d912:	d1f5      	bne.n	d900 <strchr+0xd8>
    d914:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    d918:	ea40 0401 	orr.w	r4, r0, r1
    d91c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d920:	f06f 0c00 	mvn.w	ip, #0
    d924:	ea4f 7244 	mov.w	r2, r4, lsl #29
    d928:	b312      	cbz	r2, d970 <strcmp+0x68>
    d92a:	ea80 0401 	eor.w	r4, r0, r1
    d92e:	f014 0f07 	tst.w	r4, #7
    d932:	d16a      	bne.n	da0a <strcmp+0x102>
    d934:	f000 0407 	and.w	r4, r0, #7
    d938:	f020 0007 	bic.w	r0, r0, #7
    d93c:	f004 0503 	and.w	r5, r4, #3
    d940:	f021 0107 	bic.w	r1, r1, #7
    d944:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d948:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    d94c:	f014 0f04 	tst.w	r4, #4
    d950:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    d954:	fa0c f405 	lsl.w	r4, ip, r5
    d958:	ea62 0204 	orn	r2, r2, r4
    d95c:	ea66 0604 	orn	r6, r6, r4
    d960:	d00a      	beq.n	d978 <strcmp+0x70>
    d962:	ea63 0304 	orn	r3, r3, r4
    d966:	4662      	mov	r2, ip
    d968:	ea67 0704 	orn	r7, r7, r4
    d96c:	4666      	mov	r6, ip
    d96e:	e003      	b.n	d978 <strcmp+0x70>
    d970:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    d974:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    d978:	fa82 f54c 	uadd8	r5, r2, ip
    d97c:	ea82 0406 	eor.w	r4, r2, r6
    d980:	faa4 f48c 	sel	r4, r4, ip
    d984:	bb6c      	cbnz	r4, d9e2 <strcmp+0xda>
    d986:	fa83 f54c 	uadd8	r5, r3, ip
    d98a:	ea83 0507 	eor.w	r5, r3, r7
    d98e:	faa5 f58c 	sel	r5, r5, ip
    d992:	b995      	cbnz	r5, d9ba <strcmp+0xb2>
    d994:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    d998:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    d99c:	fa82 f54c 	uadd8	r5, r2, ip
    d9a0:	ea82 0406 	eor.w	r4, r2, r6
    d9a4:	faa4 f48c 	sel	r4, r4, ip
    d9a8:	fa83 f54c 	uadd8	r5, r3, ip
    d9ac:	ea83 0507 	eor.w	r5, r3, r7
    d9b0:	faa5 f58c 	sel	r5, r5, ip
    d9b4:	4325      	orrs	r5, r4
    d9b6:	d0db      	beq.n	d970 <strcmp+0x68>
    d9b8:	b99c      	cbnz	r4, d9e2 <strcmp+0xda>
    d9ba:	ba2d      	rev	r5, r5
    d9bc:	fab5 f485 	clz	r4, r5
    d9c0:	f024 0407 	bic.w	r4, r4, #7
    d9c4:	fa27 f104 	lsr.w	r1, r7, r4
    d9c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d9cc:	fa23 f304 	lsr.w	r3, r3, r4
    d9d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    d9d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d9d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d9dc:	eba0 0001 	sub.w	r0, r0, r1
    d9e0:	4770      	bx	lr
    d9e2:	ba24      	rev	r4, r4
    d9e4:	fab4 f484 	clz	r4, r4
    d9e8:	f024 0407 	bic.w	r4, r4, #7
    d9ec:	fa26 f104 	lsr.w	r1, r6, r4
    d9f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d9f4:	fa22 f204 	lsr.w	r2, r2, r4
    d9f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d9fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    da00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    da04:	eba0 0001 	sub.w	r0, r0, r1
    da08:	4770      	bx	lr
    da0a:	f014 0f03 	tst.w	r4, #3
    da0e:	d13c      	bne.n	da8a <strcmp+0x182>
    da10:	f010 0403 	ands.w	r4, r0, #3
    da14:	d128      	bne.n	da68 <strcmp+0x160>
    da16:	f850 2b08 	ldr.w	r2, [r0], #8
    da1a:	f851 3b08 	ldr.w	r3, [r1], #8
    da1e:	fa82 f54c 	uadd8	r5, r2, ip
    da22:	ea82 0503 	eor.w	r5, r2, r3
    da26:	faa5 f58c 	sel	r5, r5, ip
    da2a:	b95d      	cbnz	r5, da44 <strcmp+0x13c>
    da2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    da30:	f851 3c04 	ldr.w	r3, [r1, #-4]
    da34:	fa82 f54c 	uadd8	r5, r2, ip
    da38:	ea82 0503 	eor.w	r5, r2, r3
    da3c:	faa5 f58c 	sel	r5, r5, ip
    da40:	2d00      	cmp	r5, #0
    da42:	d0e8      	beq.n	da16 <strcmp+0x10e>
    da44:	ba2d      	rev	r5, r5
    da46:	fab5 f485 	clz	r4, r5
    da4a:	f024 0407 	bic.w	r4, r4, #7
    da4e:	fa23 f104 	lsr.w	r1, r3, r4
    da52:	fa22 f204 	lsr.w	r2, r2, r4
    da56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    da5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    da5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    da62:	eba0 0001 	sub.w	r0, r0, r1
    da66:	4770      	bx	lr
    da68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    da6c:	f020 0003 	bic.w	r0, r0, #3
    da70:	f850 2b08 	ldr.w	r2, [r0], #8
    da74:	f021 0103 	bic.w	r1, r1, #3
    da78:	f851 3b08 	ldr.w	r3, [r1], #8
    da7c:	fa0c f404 	lsl.w	r4, ip, r4
    da80:	ea62 0204 	orn	r2, r2, r4
    da84:	ea63 0304 	orn	r3, r3, r4
    da88:	e7c9      	b.n	da1e <strcmp+0x116>
    da8a:	f010 0403 	ands.w	r4, r0, #3
    da8e:	d01a      	beq.n	dac6 <strcmp+0x1be>
    da90:	eba1 0104 	sub.w	r1, r1, r4
    da94:	f020 0003 	bic.w	r0, r0, #3
    da98:	07e4      	lsls	r4, r4, #31
    da9a:	f850 2b04 	ldr.w	r2, [r0], #4
    da9e:	d006      	beq.n	daae <strcmp+0x1a6>
    daa0:	d20f      	bcs.n	dac2 <strcmp+0x1ba>
    daa2:	788b      	ldrb	r3, [r1, #2]
    daa4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    daa8:	1ae4      	subs	r4, r4, r3
    daaa:	d106      	bne.n	daba <strcmp+0x1b2>
    daac:	b12b      	cbz	r3, daba <strcmp+0x1b2>
    daae:	78cb      	ldrb	r3, [r1, #3]
    dab0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    dab4:	1ae4      	subs	r4, r4, r3
    dab6:	d100      	bne.n	daba <strcmp+0x1b2>
    dab8:	b91b      	cbnz	r3, dac2 <strcmp+0x1ba>
    daba:	4620      	mov	r0, r4
    dabc:	f85d 4b10 	ldr.w	r4, [sp], #16
    dac0:	4770      	bx	lr
    dac2:	f101 0104 	add.w	r1, r1, #4
    dac6:	f850 2b04 	ldr.w	r2, [r0], #4
    daca:	07cc      	lsls	r4, r1, #31
    dacc:	f021 0103 	bic.w	r1, r1, #3
    dad0:	f851 3b04 	ldr.w	r3, [r1], #4
    dad4:	d848      	bhi.n	db68 <strcmp+0x260>
    dad6:	d224      	bcs.n	db22 <strcmp+0x21a>
    dad8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    dadc:	fa82 f54c 	uadd8	r5, r2, ip
    dae0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    dae4:	faa5 f58c 	sel	r5, r5, ip
    dae8:	d10a      	bne.n	db00 <strcmp+0x1f8>
    daea:	b965      	cbnz	r5, db06 <strcmp+0x1fe>
    daec:	f851 3b04 	ldr.w	r3, [r1], #4
    daf0:	ea84 0402 	eor.w	r4, r4, r2
    daf4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    daf8:	d10e      	bne.n	db18 <strcmp+0x210>
    dafa:	f850 2b04 	ldr.w	r2, [r0], #4
    dafe:	e7eb      	b.n	dad8 <strcmp+0x1d0>
    db00:	ea4f 2313 	mov.w	r3, r3, lsr #8
    db04:	e055      	b.n	dbb2 <strcmp+0x2aa>
    db06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    db0a:	d14d      	bne.n	dba8 <strcmp+0x2a0>
    db0c:	7808      	ldrb	r0, [r1, #0]
    db0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    db12:	f1c0 0000 	rsb	r0, r0, #0
    db16:	4770      	bx	lr
    db18:	ea4f 6212 	mov.w	r2, r2, lsr #24
    db1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    db20:	e047      	b.n	dbb2 <strcmp+0x2aa>
    db22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    db26:	fa82 f54c 	uadd8	r5, r2, ip
    db2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    db2e:	faa5 f58c 	sel	r5, r5, ip
    db32:	d10a      	bne.n	db4a <strcmp+0x242>
    db34:	b965      	cbnz	r5, db50 <strcmp+0x248>
    db36:	f851 3b04 	ldr.w	r3, [r1], #4
    db3a:	ea84 0402 	eor.w	r4, r4, r2
    db3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    db42:	d10c      	bne.n	db5e <strcmp+0x256>
    db44:	f850 2b04 	ldr.w	r2, [r0], #4
    db48:	e7eb      	b.n	db22 <strcmp+0x21a>
    db4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    db4e:	e030      	b.n	dbb2 <strcmp+0x2aa>
    db50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    db54:	d128      	bne.n	dba8 <strcmp+0x2a0>
    db56:	880b      	ldrh	r3, [r1, #0]
    db58:	ea4f 4212 	mov.w	r2, r2, lsr #16
    db5c:	e029      	b.n	dbb2 <strcmp+0x2aa>
    db5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    db62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    db66:	e024      	b.n	dbb2 <strcmp+0x2aa>
    db68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    db6c:	fa82 f54c 	uadd8	r5, r2, ip
    db70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    db74:	faa5 f58c 	sel	r5, r5, ip
    db78:	d10a      	bne.n	db90 <strcmp+0x288>
    db7a:	b965      	cbnz	r5, db96 <strcmp+0x28e>
    db7c:	f851 3b04 	ldr.w	r3, [r1], #4
    db80:	ea84 0402 	eor.w	r4, r4, r2
    db84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    db88:	d109      	bne.n	db9e <strcmp+0x296>
    db8a:	f850 2b04 	ldr.w	r2, [r0], #4
    db8e:	e7eb      	b.n	db68 <strcmp+0x260>
    db90:	ea4f 6313 	mov.w	r3, r3, lsr #24
    db94:	e00d      	b.n	dbb2 <strcmp+0x2aa>
    db96:	f015 0fff 	tst.w	r5, #255	; 0xff
    db9a:	d105      	bne.n	dba8 <strcmp+0x2a0>
    db9c:	680b      	ldr	r3, [r1, #0]
    db9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    dba2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    dba6:	e004      	b.n	dbb2 <strcmp+0x2aa>
    dba8:	f04f 0000 	mov.w	r0, #0
    dbac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    dbb0:	4770      	bx	lr
    dbb2:	ba12      	rev	r2, r2
    dbb4:	ba1b      	rev	r3, r3
    dbb6:	fa82 f44c 	uadd8	r4, r2, ip
    dbba:	ea82 0403 	eor.w	r4, r2, r3
    dbbe:	faa4 f58c 	sel	r5, r4, ip
    dbc2:	fab5 f485 	clz	r4, r5
    dbc6:	fa02 f204 	lsl.w	r2, r2, r4
    dbca:	fa03 f304 	lsl.w	r3, r3, r4
    dbce:	ea4f 6012 	mov.w	r0, r2, lsr #24
    dbd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    dbd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    dbda:	4770      	bx	lr

0000dbdc <strcpy>:
    dbdc:	ea80 0201 	eor.w	r2, r0, r1
    dbe0:	4684      	mov	ip, r0
    dbe2:	f012 0f03 	tst.w	r2, #3
    dbe6:	d14f      	bne.n	dc88 <strcpy+0xac>
    dbe8:	f011 0f03 	tst.w	r1, #3
    dbec:	d132      	bne.n	dc54 <strcpy+0x78>
    dbee:	f84d 4d04 	str.w	r4, [sp, #-4]!
    dbf2:	f011 0f04 	tst.w	r1, #4
    dbf6:	f851 3b04 	ldr.w	r3, [r1], #4
    dbfa:	d00b      	beq.n	dc14 <strcpy+0x38>
    dbfc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    dc00:	439a      	bics	r2, r3
    dc02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    dc06:	bf04      	itt	eq
    dc08:	f84c 3b04 	streq.w	r3, [ip], #4
    dc0c:	f851 3b04 	ldreq.w	r3, [r1], #4
    dc10:	d116      	bne.n	dc40 <strcpy+0x64>
    dc12:	bf00      	nop
    dc14:	f851 4b04 	ldr.w	r4, [r1], #4
    dc18:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    dc1c:	439a      	bics	r2, r3
    dc1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    dc22:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    dc26:	d10b      	bne.n	dc40 <strcpy+0x64>
    dc28:	f84c 3b04 	str.w	r3, [ip], #4
    dc2c:	43a2      	bics	r2, r4
    dc2e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    dc32:	bf04      	itt	eq
    dc34:	f851 3b04 	ldreq.w	r3, [r1], #4
    dc38:	f84c 4b04 	streq.w	r4, [ip], #4
    dc3c:	d0ea      	beq.n	dc14 <strcpy+0x38>
    dc3e:	4623      	mov	r3, r4
    dc40:	f80c 3b01 	strb.w	r3, [ip], #1
    dc44:	f013 0fff 	tst.w	r3, #255	; 0xff
    dc48:	ea4f 2333 	mov.w	r3, r3, ror #8
    dc4c:	d1f8      	bne.n	dc40 <strcpy+0x64>
    dc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc52:	4770      	bx	lr
    dc54:	f011 0f01 	tst.w	r1, #1
    dc58:	d006      	beq.n	dc68 <strcpy+0x8c>
    dc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
    dc5e:	f80c 2b01 	strb.w	r2, [ip], #1
    dc62:	2a00      	cmp	r2, #0
    dc64:	bf08      	it	eq
    dc66:	4770      	bxeq	lr
    dc68:	f011 0f02 	tst.w	r1, #2
    dc6c:	d0bf      	beq.n	dbee <strcpy+0x12>
    dc6e:	f831 2b02 	ldrh.w	r2, [r1], #2
    dc72:	f012 0fff 	tst.w	r2, #255	; 0xff
    dc76:	bf16      	itet	ne
    dc78:	f82c 2b02 	strhne.w	r2, [ip], #2
    dc7c:	f88c 2000 	strbeq.w	r2, [ip]
    dc80:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    dc84:	d1b3      	bne.n	dbee <strcpy+0x12>
    dc86:	4770      	bx	lr
    dc88:	f811 2b01 	ldrb.w	r2, [r1], #1
    dc8c:	f80c 2b01 	strb.w	r2, [ip], #1
    dc90:	2a00      	cmp	r2, #0
    dc92:	d1f9      	bne.n	dc88 <strcpy+0xac>
    dc94:	4770      	bx	lr
    dc96:	bf00      	nop
	...

0000dcc0 <strlen>:
    dcc0:	f890 f000 	pld	[r0]
    dcc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    dcc8:	f020 0107 	bic.w	r1, r0, #7
    dccc:	f06f 0c00 	mvn.w	ip, #0
    dcd0:	f010 0407 	ands.w	r4, r0, #7
    dcd4:	f891 f020 	pld	[r1, #32]
    dcd8:	f040 8049 	bne.w	dd6e <strlen+0xae>
    dcdc:	f04f 0400 	mov.w	r4, #0
    dce0:	f06f 0007 	mvn.w	r0, #7
    dce4:	e9d1 2300 	ldrd	r2, r3, [r1]
    dce8:	f891 f040 	pld	[r1, #64]	; 0x40
    dcec:	f100 0008 	add.w	r0, r0, #8
    dcf0:	fa82 f24c 	uadd8	r2, r2, ip
    dcf4:	faa4 f28c 	sel	r2, r4, ip
    dcf8:	fa83 f34c 	uadd8	r3, r3, ip
    dcfc:	faa2 f38c 	sel	r3, r2, ip
    dd00:	bb4b      	cbnz	r3, dd56 <strlen+0x96>
    dd02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    dd06:	fa82 f24c 	uadd8	r2, r2, ip
    dd0a:	f100 0008 	add.w	r0, r0, #8
    dd0e:	faa4 f28c 	sel	r2, r4, ip
    dd12:	fa83 f34c 	uadd8	r3, r3, ip
    dd16:	faa2 f38c 	sel	r3, r2, ip
    dd1a:	b9e3      	cbnz	r3, dd56 <strlen+0x96>
    dd1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    dd20:	fa82 f24c 	uadd8	r2, r2, ip
    dd24:	f100 0008 	add.w	r0, r0, #8
    dd28:	faa4 f28c 	sel	r2, r4, ip
    dd2c:	fa83 f34c 	uadd8	r3, r3, ip
    dd30:	faa2 f38c 	sel	r3, r2, ip
    dd34:	b97b      	cbnz	r3, dd56 <strlen+0x96>
    dd36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    dd3a:	f101 0120 	add.w	r1, r1, #32
    dd3e:	fa82 f24c 	uadd8	r2, r2, ip
    dd42:	f100 0008 	add.w	r0, r0, #8
    dd46:	faa4 f28c 	sel	r2, r4, ip
    dd4a:	fa83 f34c 	uadd8	r3, r3, ip
    dd4e:	faa2 f38c 	sel	r3, r2, ip
    dd52:	2b00      	cmp	r3, #0
    dd54:	d0c6      	beq.n	dce4 <strlen+0x24>
    dd56:	2a00      	cmp	r2, #0
    dd58:	bf04      	itt	eq
    dd5a:	3004      	addeq	r0, #4
    dd5c:	461a      	moveq	r2, r3
    dd5e:	ba12      	rev	r2, r2
    dd60:	fab2 f282 	clz	r2, r2
    dd64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    dd68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    dd6c:	4770      	bx	lr
    dd6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    dd72:	f004 0503 	and.w	r5, r4, #3
    dd76:	f1c4 0000 	rsb	r0, r4, #0
    dd7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    dd7e:	f014 0f04 	tst.w	r4, #4
    dd82:	f891 f040 	pld	[r1, #64]	; 0x40
    dd86:	fa0c f505 	lsl.w	r5, ip, r5
    dd8a:	ea62 0205 	orn	r2, r2, r5
    dd8e:	bf1c      	itt	ne
    dd90:	ea63 0305 	ornne	r3, r3, r5
    dd94:	4662      	movne	r2, ip
    dd96:	f04f 0400 	mov.w	r4, #0
    dd9a:	e7a9      	b.n	dcf0 <strlen+0x30>

0000dd9c <strncpy>:
    dd9c:	ea40 0301 	orr.w	r3, r0, r1
    dda0:	079b      	lsls	r3, r3, #30
    dda2:	b470      	push	{r4, r5, r6}
    dda4:	d12b      	bne.n	ddfe <strncpy+0x62>
    dda6:	2a03      	cmp	r2, #3
    dda8:	d929      	bls.n	ddfe <strncpy+0x62>
    ddaa:	460c      	mov	r4, r1
    ddac:	4603      	mov	r3, r0
    ddae:	4621      	mov	r1, r4
    ddb0:	f854 6b04 	ldr.w	r6, [r4], #4
    ddb4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    ddb8:	ea25 0506 	bic.w	r5, r5, r6
    ddbc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    ddc0:	d106      	bne.n	ddd0 <strncpy+0x34>
    ddc2:	3a04      	subs	r2, #4
    ddc4:	2a03      	cmp	r2, #3
    ddc6:	f843 6b04 	str.w	r6, [r3], #4
    ddca:	4621      	mov	r1, r4
    ddcc:	d8ef      	bhi.n	ddae <strncpy+0x12>
    ddce:	b1a2      	cbz	r2, ddfa <strncpy+0x5e>
    ddd0:	780c      	ldrb	r4, [r1, #0]
    ddd2:	701c      	strb	r4, [r3, #0]
    ddd4:	3a01      	subs	r2, #1
    ddd6:	3301      	adds	r3, #1
    ddd8:	3101      	adds	r1, #1
    ddda:	b13c      	cbz	r4, ddec <strncpy+0x50>
    dddc:	b16a      	cbz	r2, ddfa <strncpy+0x5e>
    ddde:	f811 4b01 	ldrb.w	r4, [r1], #1
    dde2:	f803 4b01 	strb.w	r4, [r3], #1
    dde6:	3a01      	subs	r2, #1
    dde8:	2c00      	cmp	r4, #0
    ddea:	d1f7      	bne.n	dddc <strncpy+0x40>
    ddec:	b12a      	cbz	r2, ddfa <strncpy+0x5e>
    ddee:	441a      	add	r2, r3
    ddf0:	2100      	movs	r1, #0
    ddf2:	f803 1b01 	strb.w	r1, [r3], #1
    ddf6:	429a      	cmp	r2, r3
    ddf8:	d1fb      	bne.n	ddf2 <strncpy+0x56>
    ddfa:	bc70      	pop	{r4, r5, r6}
    ddfc:	4770      	bx	lr
    ddfe:	4603      	mov	r3, r0
    de00:	e7e5      	b.n	ddce <strncpy+0x32>
    de02:	bf00      	nop

0000de04 <_strtol_l.isra.0>:
    de04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de08:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    de0c:	460f      	mov	r7, r1
    de0e:	4680      	mov	r8, r0
    de10:	4616      	mov	r6, r2
    de12:	461d      	mov	r5, r3
    de14:	468b      	mov	fp, r1
    de16:	e000      	b.n	de1a <_strtol_l.isra.0+0x16>
    de18:	46a3      	mov	fp, r4
    de1a:	465c      	mov	r4, fp
    de1c:	4648      	mov	r0, r9
    de1e:	f814 ab01 	ldrb.w	sl, [r4], #1
    de22:	f7fe ff23 	bl	cc6c <__locale_ctype_ptr_l>
    de26:	4450      	add	r0, sl
    de28:	7841      	ldrb	r1, [r0, #1]
    de2a:	f001 0108 	and.w	r1, r1, #8
    de2e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    de32:	2900      	cmp	r1, #0
    de34:	d1f0      	bne.n	de18 <_strtol_l.isra.0+0x14>
    de36:	4652      	mov	r2, sl
    de38:	2a2d      	cmp	r2, #45	; 0x2d
    de3a:	d061      	beq.n	df00 <_strtol_l.isra.0+0xfc>
    de3c:	2a2b      	cmp	r2, #43	; 0x2b
    de3e:	bf04      	itt	eq
    de40:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    de44:	f10b 0402 	addeq.w	r4, fp, #2
    de48:	2d00      	cmp	r5, #0
    de4a:	d043      	beq.n	ded4 <_strtol_l.isra.0+0xd0>
    de4c:	2d10      	cmp	r5, #16
    de4e:	d065      	beq.n	df1c <_strtol_l.isra.0+0x118>
    de50:	46a9      	mov	r9, r5
    de52:	f1bc 0f00 	cmp.w	ip, #0
    de56:	bf0c      	ite	eq
    de58:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    de5c:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    de60:	2100      	movs	r1, #0
    de62:	fbba fef9 	udiv	lr, sl, r9
    de66:	4608      	mov	r0, r1
    de68:	fb09 aa1e 	mls	sl, r9, lr, sl
    de6c:	e005      	b.n	de7a <_strtol_l.isra.0+0x76>
    de6e:	d029      	beq.n	dec4 <_strtol_l.isra.0+0xc0>
    de70:	fb09 3000 	mla	r0, r9, r0, r3
    de74:	2101      	movs	r1, #1
    de76:	f814 2b01 	ldrb.w	r2, [r4], #1
    de7a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    de7e:	2b09      	cmp	r3, #9
    de80:	d905      	bls.n	de8e <_strtol_l.isra.0+0x8a>
    de82:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    de86:	2b19      	cmp	r3, #25
    de88:	d80a      	bhi.n	dea0 <_strtol_l.isra.0+0x9c>
    de8a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    de8e:	429d      	cmp	r5, r3
    de90:	dd0e      	ble.n	deb0 <_strtol_l.isra.0+0xac>
    de92:	1c4a      	adds	r2, r1, #1
    de94:	d0ef      	beq.n	de76 <_strtol_l.isra.0+0x72>
    de96:	4586      	cmp	lr, r0
    de98:	d2e9      	bcs.n	de6e <_strtol_l.isra.0+0x6a>
    de9a:	f04f 31ff 	mov.w	r1, #4294967295
    de9e:	e7ea      	b.n	de76 <_strtol_l.isra.0+0x72>
    dea0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    dea4:	2b19      	cmp	r3, #25
    dea6:	d803      	bhi.n	deb0 <_strtol_l.isra.0+0xac>
    dea8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    deac:	429d      	cmp	r5, r3
    deae:	dcf0      	bgt.n	de92 <_strtol_l.isra.0+0x8e>
    deb0:	1c4b      	adds	r3, r1, #1
    deb2:	d015      	beq.n	dee0 <_strtol_l.isra.0+0xdc>
    deb4:	f1bc 0f00 	cmp.w	ip, #0
    deb8:	d110      	bne.n	dedc <_strtol_l.isra.0+0xd8>
    deba:	b14e      	cbz	r6, ded0 <_strtol_l.isra.0+0xcc>
    debc:	b9e1      	cbnz	r1, def8 <_strtol_l.isra.0+0xf4>
    debe:	6037      	str	r7, [r6, #0]
    dec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec4:	459a      	cmp	sl, r3
    dec6:	dad3      	bge.n	de70 <_strtol_l.isra.0+0x6c>
    dec8:	4670      	mov	r0, lr
    deca:	f04f 31ff 	mov.w	r1, #4294967295
    dece:	e7d2      	b.n	de76 <_strtol_l.isra.0+0x72>
    ded0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ded4:	2a30      	cmp	r2, #48	; 0x30
    ded6:	d01a      	beq.n	df0e <_strtol_l.isra.0+0x10a>
    ded8:	250a      	movs	r5, #10
    deda:	e7b9      	b.n	de50 <_strtol_l.isra.0+0x4c>
    dedc:	4240      	negs	r0, r0
    dede:	e7ec      	b.n	deba <_strtol_l.isra.0+0xb6>
    dee0:	f1bc 0f00 	cmp.w	ip, #0
    dee4:	f04f 0322 	mov.w	r3, #34	; 0x22
    dee8:	bf0c      	ite	eq
    deea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    deee:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    def2:	f8c8 3000 	str.w	r3, [r8]
    def6:	b1f6      	cbz	r6, df36 <_strtol_l.isra.0+0x132>
    def8:	1e67      	subs	r7, r4, #1
    defa:	6037      	str	r7, [r6, #0]
    defc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df00:	f10b 0402 	add.w	r4, fp, #2
    df04:	f89b 2001 	ldrb.w	r2, [fp, #1]
    df08:	f04f 0c01 	mov.w	ip, #1
    df0c:	e79c      	b.n	de48 <_strtol_l.isra.0+0x44>
    df0e:	7823      	ldrb	r3, [r4, #0]
    df10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    df14:	2b58      	cmp	r3, #88	; 0x58
    df16:	d008      	beq.n	df2a <_strtol_l.isra.0+0x126>
    df18:	2508      	movs	r5, #8
    df1a:	e799      	b.n	de50 <_strtol_l.isra.0+0x4c>
    df1c:	2a30      	cmp	r2, #48	; 0x30
    df1e:	d197      	bne.n	de50 <_strtol_l.isra.0+0x4c>
    df20:	7823      	ldrb	r3, [r4, #0]
    df22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    df26:	2b58      	cmp	r3, #88	; 0x58
    df28:	d192      	bne.n	de50 <_strtol_l.isra.0+0x4c>
    df2a:	f04f 0910 	mov.w	r9, #16
    df2e:	7862      	ldrb	r2, [r4, #1]
    df30:	464d      	mov	r5, r9
    df32:	3402      	adds	r4, #2
    df34:	e78d      	b.n	de52 <_strtol_l.isra.0+0x4e>
    df36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df3a:	bf00      	nop

0000df3c <strtol>:
    df3c:	b530      	push	{r4, r5, lr}
    df3e:	4c08      	ldr	r4, [pc, #32]	; (df60 <strtol+0x24>)
    df40:	4b08      	ldr	r3, [pc, #32]	; (df64 <strtol+0x28>)
    df42:	6825      	ldr	r5, [r4, #0]
    df44:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    df46:	b083      	sub	sp, #12
    df48:	2c00      	cmp	r4, #0
    df4a:	bf08      	it	eq
    df4c:	461c      	moveq	r4, r3
    df4e:	9400      	str	r4, [sp, #0]
    df50:	4613      	mov	r3, r2
    df52:	460a      	mov	r2, r1
    df54:	4601      	mov	r1, r0
    df56:	4628      	mov	r0, r5
    df58:	f7ff ff54 	bl	de04 <_strtol_l.isra.0>
    df5c:	b003      	add	sp, #12
    df5e:	bd30      	pop	{r4, r5, pc}
    df60:	20002418 	.word	0x20002418
    df64:	2000241c 	.word	0x2000241c

0000df68 <sbrk>:
    df68:	4b02      	ldr	r3, [pc, #8]	; (df74 <sbrk+0xc>)
    df6a:	4601      	mov	r1, r0
    df6c:	6818      	ldr	r0, [r3, #0]
    df6e:	f7ff bc49 	b.w	d804 <_sbrk_r>
    df72:	bf00      	nop
    df74:	20002418 	.word	0x20002418

0000df78 <tolower>:
    df78:	b510      	push	{r4, lr}
    df7a:	4604      	mov	r4, r0
    df7c:	f7fe fe7a 	bl	cc74 <__locale_ctype_ptr>
    df80:	4420      	add	r0, r4
    df82:	7843      	ldrb	r3, [r0, #1]
    df84:	f003 0303 	and.w	r3, r3, #3
    df88:	2b01      	cmp	r3, #1
    df8a:	bf0c      	ite	eq
    df8c:	f104 0020 	addeq.w	r0, r4, #32
    df90:	4620      	movne	r0, r4
    df92:	bd10      	pop	{r4, pc}

0000df94 <__utoa>:
    df94:	b5f0      	push	{r4, r5, r6, r7, lr}
    df96:	f8df e078 	ldr.w	lr, [pc, #120]	; e010 <__utoa+0x7c>
    df9a:	4616      	mov	r6, r2
    df9c:	4604      	mov	r4, r0
    df9e:	460f      	mov	r7, r1
    dfa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    dfa4:	b08b      	sub	sp, #44	; 0x2c
    dfa6:	466d      	mov	r5, sp
    dfa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dfaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    dfae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dfb0:	e89e 0003 	ldmia.w	lr, {r0, r1}
    dfb4:	1eb3      	subs	r3, r6, #2
    dfb6:	f845 0b04 	str.w	r0, [r5], #4
    dfba:	2b22      	cmp	r3, #34	; 0x22
    dfbc:	7029      	strb	r1, [r5, #0]
    dfbe:	d822      	bhi.n	e006 <__utoa+0x72>
    dfc0:	1e7d      	subs	r5, r7, #1
    dfc2:	4628      	mov	r0, r5
    dfc4:	2200      	movs	r2, #0
    dfc6:	e000      	b.n	dfca <__utoa+0x36>
    dfc8:	461a      	mov	r2, r3
    dfca:	fbb4 f1f6 	udiv	r1, r4, r6
    dfce:	ab0a      	add	r3, sp, #40	; 0x28
    dfd0:	fb06 4411 	mls	r4, r6, r1, r4
    dfd4:	4423      	add	r3, r4
    dfd6:	460c      	mov	r4, r1
    dfd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    dfdc:	f800 3f01 	strb.w	r3, [r0, #1]!
    dfe0:	1c53      	adds	r3, r2, #1
    dfe2:	2900      	cmp	r1, #0
    dfe4:	d1f0      	bne.n	dfc8 <__utoa+0x34>
    dfe6:	54f9      	strb	r1, [r7, r3]
    dfe8:	18bb      	adds	r3, r7, r2
    dfea:	b14a      	cbz	r2, e000 <__utoa+0x6c>
    dfec:	7819      	ldrb	r1, [r3, #0]
    dfee:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    dff2:	7029      	strb	r1, [r5, #0]
    dff4:	3401      	adds	r4, #1
    dff6:	1b11      	subs	r1, r2, r4
    dff8:	428c      	cmp	r4, r1
    dffa:	f803 0901 	strb.w	r0, [r3], #-1
    dffe:	dbf5      	blt.n	dfec <__utoa+0x58>
    e000:	4638      	mov	r0, r7
    e002:	b00b      	add	sp, #44	; 0x2c
    e004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e006:	2000      	movs	r0, #0
    e008:	7038      	strb	r0, [r7, #0]
    e00a:	b00b      	add	sp, #44	; 0x2c
    e00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e00e:	bf00      	nop
    e010:	20001cb0 	.word	0x20001cb0

0000e014 <utoa>:
    e014:	f7ff bfbe 	b.w	df94 <__utoa>

0000e018 <_vdprintf_r>:
    e018:	b5f0      	push	{r4, r5, r6, r7, lr}
    e01a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    e01e:	ad04      	add	r5, sp, #16
    e020:	9300      	str	r3, [sp, #0]
    e022:	460f      	mov	r7, r1
    e024:	4613      	mov	r3, r2
    e026:	f44f 7400 	mov.w	r4, #512	; 0x200
    e02a:	aa03      	add	r2, sp, #12
    e02c:	4629      	mov	r1, r5
    e02e:	9403      	str	r4, [sp, #12]
    e030:	4606      	mov	r6, r0
    e032:	f000 fd3f 	bl	eab4 <_vasnprintf_r>
    e036:	b188      	cbz	r0, e05c <_vdprintf_r+0x44>
    e038:	4604      	mov	r4, r0
    e03a:	4602      	mov	r2, r0
    e03c:	4639      	mov	r1, r7
    e03e:	9b03      	ldr	r3, [sp, #12]
    e040:	4630      	mov	r0, r6
    e042:	f000 f829 	bl	e098 <_write_r>
    e046:	42ac      	cmp	r4, r5
    e048:	9003      	str	r0, [sp, #12]
    e04a:	d004      	beq.n	e056 <_vdprintf_r+0x3e>
    e04c:	4630      	mov	r0, r6
    e04e:	4621      	mov	r1, r4
    e050:	f000 f8d8 	bl	e204 <_free_r>
    e054:	9803      	ldr	r0, [sp, #12]
    e056:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    e05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e05c:	f04f 30ff 	mov.w	r0, #4294967295
    e060:	e7f9      	b.n	e056 <_vdprintf_r+0x3e>
    e062:	bf00      	nop

0000e064 <vdprintf>:
    e064:	b410      	push	{r4}
    e066:	4c04      	ldr	r4, [pc, #16]	; (e078 <vdprintf+0x14>)
    e068:	4613      	mov	r3, r2
    e06a:	460a      	mov	r2, r1
    e06c:	4601      	mov	r1, r0
    e06e:	6820      	ldr	r0, [r4, #0]
    e070:	f85d 4b04 	ldr.w	r4, [sp], #4
    e074:	f7ff bfd0 	b.w	e018 <_vdprintf_r>
    e078:	20002418 	.word	0x20002418

0000e07c <__ascii_wctomb>:
    e07c:	b121      	cbz	r1, e088 <__ascii_wctomb+0xc>
    e07e:	2aff      	cmp	r2, #255	; 0xff
    e080:	d804      	bhi.n	e08c <__ascii_wctomb+0x10>
    e082:	700a      	strb	r2, [r1, #0]
    e084:	2001      	movs	r0, #1
    e086:	4770      	bx	lr
    e088:	4608      	mov	r0, r1
    e08a:	4770      	bx	lr
    e08c:	238a      	movs	r3, #138	; 0x8a
    e08e:	6003      	str	r3, [r0, #0]
    e090:	f04f 30ff 	mov.w	r0, #4294967295
    e094:	4770      	bx	lr
    e096:	bf00      	nop

0000e098 <_write_r>:
    e098:	b570      	push	{r4, r5, r6, lr}
    e09a:	460d      	mov	r5, r1
    e09c:	4c08      	ldr	r4, [pc, #32]	; (e0c0 <_write_r+0x28>)
    e09e:	4611      	mov	r1, r2
    e0a0:	4606      	mov	r6, r0
    e0a2:	461a      	mov	r2, r3
    e0a4:	4628      	mov	r0, r5
    e0a6:	2300      	movs	r3, #0
    e0a8:	6023      	str	r3, [r4, #0]
    e0aa:	f7fe f8b1 	bl	c210 <_write>
    e0ae:	1c43      	adds	r3, r0, #1
    e0b0:	d000      	beq.n	e0b4 <_write_r+0x1c>
    e0b2:	bd70      	pop	{r4, r5, r6, pc}
    e0b4:	6823      	ldr	r3, [r4, #0]
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d0fb      	beq.n	e0b2 <_write_r+0x1a>
    e0ba:	6033      	str	r3, [r6, #0]
    e0bc:	bd70      	pop	{r4, r5, r6, pc}
    e0be:	bf00      	nop
    e0c0:	2000528c 	.word	0x2000528c

0000e0c4 <__register_exitproc>:
    e0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0c8:	4c25      	ldr	r4, [pc, #148]	; (e160 <__register_exitproc+0x9c>)
    e0ca:	6825      	ldr	r5, [r4, #0]
    e0cc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    e0d0:	4606      	mov	r6, r0
    e0d2:	4688      	mov	r8, r1
    e0d4:	4692      	mov	sl, r2
    e0d6:	4699      	mov	r9, r3
    e0d8:	b3c4      	cbz	r4, e14c <__register_exitproc+0x88>
    e0da:	6860      	ldr	r0, [r4, #4]
    e0dc:	281f      	cmp	r0, #31
    e0de:	dc17      	bgt.n	e110 <__register_exitproc+0x4c>
    e0e0:	1c43      	adds	r3, r0, #1
    e0e2:	b176      	cbz	r6, e102 <__register_exitproc+0x3e>
    e0e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    e0e8:	2201      	movs	r2, #1
    e0ea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    e0ee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    e0f2:	4082      	lsls	r2, r0
    e0f4:	4311      	orrs	r1, r2
    e0f6:	2e02      	cmp	r6, #2
    e0f8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    e0fc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    e100:	d01e      	beq.n	e140 <__register_exitproc+0x7c>
    e102:	3002      	adds	r0, #2
    e104:	6063      	str	r3, [r4, #4]
    e106:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    e10a:	2000      	movs	r0, #0
    e10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e110:	4b14      	ldr	r3, [pc, #80]	; (e164 <__register_exitproc+0xa0>)
    e112:	b303      	cbz	r3, e156 <__register_exitproc+0x92>
    e114:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e118:	f7fe fdb6 	bl	cc88 <malloc>
    e11c:	4604      	mov	r4, r0
    e11e:	b1d0      	cbz	r0, e156 <__register_exitproc+0x92>
    e120:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    e124:	2700      	movs	r7, #0
    e126:	e880 0088 	stmia.w	r0, {r3, r7}
    e12a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    e12e:	4638      	mov	r0, r7
    e130:	2301      	movs	r3, #1
    e132:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    e136:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    e13a:	2e00      	cmp	r6, #0
    e13c:	d0e1      	beq.n	e102 <__register_exitproc+0x3e>
    e13e:	e7d1      	b.n	e0e4 <__register_exitproc+0x20>
    e140:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    e144:	430a      	orrs	r2, r1
    e146:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    e14a:	e7da      	b.n	e102 <__register_exitproc+0x3e>
    e14c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    e150:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    e154:	e7c1      	b.n	e0da <__register_exitproc+0x16>
    e156:	f04f 30ff 	mov.w	r0, #4294967295
    e15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e15e:	bf00      	nop
    e160:	20001ca0 	.word	0x20001ca0
    e164:	0000cc89 	.word	0x0000cc89

0000e168 <_malloc_trim_r>:
    e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e16a:	4f23      	ldr	r7, [pc, #140]	; (e1f8 <_malloc_trim_r+0x90>)
    e16c:	460c      	mov	r4, r1
    e16e:	4606      	mov	r6, r0
    e170:	f7ff f94c 	bl	d40c <__malloc_lock>
    e174:	68bb      	ldr	r3, [r7, #8]
    e176:	685d      	ldr	r5, [r3, #4]
    e178:	f025 0503 	bic.w	r5, r5, #3
    e17c:	1b29      	subs	r1, r5, r4
    e17e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    e182:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    e186:	f021 010f 	bic.w	r1, r1, #15
    e18a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    e18e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e192:	db07      	blt.n	e1a4 <_malloc_trim_r+0x3c>
    e194:	2100      	movs	r1, #0
    e196:	4630      	mov	r0, r6
    e198:	f7ff fb34 	bl	d804 <_sbrk_r>
    e19c:	68bb      	ldr	r3, [r7, #8]
    e19e:	442b      	add	r3, r5
    e1a0:	4298      	cmp	r0, r3
    e1a2:	d004      	beq.n	e1ae <_malloc_trim_r+0x46>
    e1a4:	4630      	mov	r0, r6
    e1a6:	f7ff f933 	bl	d410 <__malloc_unlock>
    e1aa:	2000      	movs	r0, #0
    e1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1ae:	4261      	negs	r1, r4
    e1b0:	4630      	mov	r0, r6
    e1b2:	f7ff fb27 	bl	d804 <_sbrk_r>
    e1b6:	3001      	adds	r0, #1
    e1b8:	d00d      	beq.n	e1d6 <_malloc_trim_r+0x6e>
    e1ba:	4b10      	ldr	r3, [pc, #64]	; (e1fc <_malloc_trim_r+0x94>)
    e1bc:	68ba      	ldr	r2, [r7, #8]
    e1be:	6819      	ldr	r1, [r3, #0]
    e1c0:	1b2d      	subs	r5, r5, r4
    e1c2:	f045 0501 	orr.w	r5, r5, #1
    e1c6:	4630      	mov	r0, r6
    e1c8:	1b09      	subs	r1, r1, r4
    e1ca:	6055      	str	r5, [r2, #4]
    e1cc:	6019      	str	r1, [r3, #0]
    e1ce:	f7ff f91f 	bl	d410 <__malloc_unlock>
    e1d2:	2001      	movs	r0, #1
    e1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1d6:	2100      	movs	r1, #0
    e1d8:	4630      	mov	r0, r6
    e1da:	f7ff fb13 	bl	d804 <_sbrk_r>
    e1de:	68ba      	ldr	r2, [r7, #8]
    e1e0:	1a83      	subs	r3, r0, r2
    e1e2:	2b0f      	cmp	r3, #15
    e1e4:	ddde      	ble.n	e1a4 <_malloc_trim_r+0x3c>
    e1e6:	4c06      	ldr	r4, [pc, #24]	; (e200 <_malloc_trim_r+0x98>)
    e1e8:	4904      	ldr	r1, [pc, #16]	; (e1fc <_malloc_trim_r+0x94>)
    e1ea:	6824      	ldr	r4, [r4, #0]
    e1ec:	f043 0301 	orr.w	r3, r3, #1
    e1f0:	1b00      	subs	r0, r0, r4
    e1f2:	6053      	str	r3, [r2, #4]
    e1f4:	6008      	str	r0, [r1, #0]
    e1f6:	e7d5      	b.n	e1a4 <_malloc_trim_r+0x3c>
    e1f8:	20002588 	.word	0x20002588
    e1fc:	20002fec 	.word	0x20002fec
    e200:	20002994 	.word	0x20002994

0000e204 <_free_r>:
    e204:	2900      	cmp	r1, #0
    e206:	d045      	beq.n	e294 <_free_r+0x90>
    e208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e20c:	460d      	mov	r5, r1
    e20e:	4680      	mov	r8, r0
    e210:	f7ff f8fc 	bl	d40c <__malloc_lock>
    e214:	f855 7c04 	ldr.w	r7, [r5, #-4]
    e218:	496a      	ldr	r1, [pc, #424]	; (e3c4 <_free_r+0x1c0>)
    e21a:	f027 0301 	bic.w	r3, r7, #1
    e21e:	f1a5 0408 	sub.w	r4, r5, #8
    e222:	18e2      	adds	r2, r4, r3
    e224:	688e      	ldr	r6, [r1, #8]
    e226:	6850      	ldr	r0, [r2, #4]
    e228:	42b2      	cmp	r2, r6
    e22a:	f020 0003 	bic.w	r0, r0, #3
    e22e:	d062      	beq.n	e2f6 <_free_r+0xf2>
    e230:	07fe      	lsls	r6, r7, #31
    e232:	6050      	str	r0, [r2, #4]
    e234:	d40b      	bmi.n	e24e <_free_r+0x4a>
    e236:	f855 7c08 	ldr.w	r7, [r5, #-8]
    e23a:	1be4      	subs	r4, r4, r7
    e23c:	f101 0e08 	add.w	lr, r1, #8
    e240:	68a5      	ldr	r5, [r4, #8]
    e242:	4575      	cmp	r5, lr
    e244:	443b      	add	r3, r7
    e246:	d06f      	beq.n	e328 <_free_r+0x124>
    e248:	68e7      	ldr	r7, [r4, #12]
    e24a:	60ef      	str	r7, [r5, #12]
    e24c:	60bd      	str	r5, [r7, #8]
    e24e:	1815      	adds	r5, r2, r0
    e250:	686d      	ldr	r5, [r5, #4]
    e252:	07ed      	lsls	r5, r5, #31
    e254:	d542      	bpl.n	e2dc <_free_r+0xd8>
    e256:	f043 0201 	orr.w	r2, r3, #1
    e25a:	6062      	str	r2, [r4, #4]
    e25c:	50e3      	str	r3, [r4, r3]
    e25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e262:	d218      	bcs.n	e296 <_free_r+0x92>
    e264:	08db      	lsrs	r3, r3, #3
    e266:	1c5a      	adds	r2, r3, #1
    e268:	684d      	ldr	r5, [r1, #4]
    e26a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    e26e:	60a7      	str	r7, [r4, #8]
    e270:	2001      	movs	r0, #1
    e272:	109b      	asrs	r3, r3, #2
    e274:	fa00 f303 	lsl.w	r3, r0, r3
    e278:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    e27c:	431d      	orrs	r5, r3
    e27e:	3808      	subs	r0, #8
    e280:	60e0      	str	r0, [r4, #12]
    e282:	604d      	str	r5, [r1, #4]
    e284:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    e288:	60fc      	str	r4, [r7, #12]
    e28a:	4640      	mov	r0, r8
    e28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e290:	f7ff b8be 	b.w	d410 <__malloc_unlock>
    e294:	4770      	bx	lr
    e296:	0a5a      	lsrs	r2, r3, #9
    e298:	2a04      	cmp	r2, #4
    e29a:	d853      	bhi.n	e344 <_free_r+0x140>
    e29c:	099a      	lsrs	r2, r3, #6
    e29e:	f102 0739 	add.w	r7, r2, #57	; 0x39
    e2a2:	007f      	lsls	r7, r7, #1
    e2a4:	f102 0538 	add.w	r5, r2, #56	; 0x38
    e2a8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    e2ac:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    e2b0:	4944      	ldr	r1, [pc, #272]	; (e3c4 <_free_r+0x1c0>)
    e2b2:	3808      	subs	r0, #8
    e2b4:	4290      	cmp	r0, r2
    e2b6:	d04d      	beq.n	e354 <_free_r+0x150>
    e2b8:	6851      	ldr	r1, [r2, #4]
    e2ba:	f021 0103 	bic.w	r1, r1, #3
    e2be:	428b      	cmp	r3, r1
    e2c0:	d202      	bcs.n	e2c8 <_free_r+0xc4>
    e2c2:	6892      	ldr	r2, [r2, #8]
    e2c4:	4290      	cmp	r0, r2
    e2c6:	d1f7      	bne.n	e2b8 <_free_r+0xb4>
    e2c8:	68d0      	ldr	r0, [r2, #12]
    e2ca:	60e0      	str	r0, [r4, #12]
    e2cc:	60a2      	str	r2, [r4, #8]
    e2ce:	6084      	str	r4, [r0, #8]
    e2d0:	60d4      	str	r4, [r2, #12]
    e2d2:	4640      	mov	r0, r8
    e2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e2d8:	f7ff b89a 	b.w	d410 <__malloc_unlock>
    e2dc:	6895      	ldr	r5, [r2, #8]
    e2de:	4f3a      	ldr	r7, [pc, #232]	; (e3c8 <_free_r+0x1c4>)
    e2e0:	42bd      	cmp	r5, r7
    e2e2:	4403      	add	r3, r0
    e2e4:	d03f      	beq.n	e366 <_free_r+0x162>
    e2e6:	68d0      	ldr	r0, [r2, #12]
    e2e8:	60e8      	str	r0, [r5, #12]
    e2ea:	f043 0201 	orr.w	r2, r3, #1
    e2ee:	6085      	str	r5, [r0, #8]
    e2f0:	6062      	str	r2, [r4, #4]
    e2f2:	50e3      	str	r3, [r4, r3]
    e2f4:	e7b3      	b.n	e25e <_free_r+0x5a>
    e2f6:	07ff      	lsls	r7, r7, #31
    e2f8:	4403      	add	r3, r0
    e2fa:	d407      	bmi.n	e30c <_free_r+0x108>
    e2fc:	f855 2c08 	ldr.w	r2, [r5, #-8]
    e300:	1aa4      	subs	r4, r4, r2
    e302:	4413      	add	r3, r2
    e304:	68a0      	ldr	r0, [r4, #8]
    e306:	68e2      	ldr	r2, [r4, #12]
    e308:	60c2      	str	r2, [r0, #12]
    e30a:	6090      	str	r0, [r2, #8]
    e30c:	4a2f      	ldr	r2, [pc, #188]	; (e3cc <_free_r+0x1c8>)
    e30e:	6812      	ldr	r2, [r2, #0]
    e310:	f043 0001 	orr.w	r0, r3, #1
    e314:	4293      	cmp	r3, r2
    e316:	6060      	str	r0, [r4, #4]
    e318:	608c      	str	r4, [r1, #8]
    e31a:	d3b6      	bcc.n	e28a <_free_r+0x86>
    e31c:	4b2c      	ldr	r3, [pc, #176]	; (e3d0 <_free_r+0x1cc>)
    e31e:	4640      	mov	r0, r8
    e320:	6819      	ldr	r1, [r3, #0]
    e322:	f7ff ff21 	bl	e168 <_malloc_trim_r>
    e326:	e7b0      	b.n	e28a <_free_r+0x86>
    e328:	1811      	adds	r1, r2, r0
    e32a:	6849      	ldr	r1, [r1, #4]
    e32c:	07c9      	lsls	r1, r1, #31
    e32e:	d444      	bmi.n	e3ba <_free_r+0x1b6>
    e330:	6891      	ldr	r1, [r2, #8]
    e332:	68d2      	ldr	r2, [r2, #12]
    e334:	60ca      	str	r2, [r1, #12]
    e336:	4403      	add	r3, r0
    e338:	f043 0001 	orr.w	r0, r3, #1
    e33c:	6091      	str	r1, [r2, #8]
    e33e:	6060      	str	r0, [r4, #4]
    e340:	50e3      	str	r3, [r4, r3]
    e342:	e7a2      	b.n	e28a <_free_r+0x86>
    e344:	2a14      	cmp	r2, #20
    e346:	d817      	bhi.n	e378 <_free_r+0x174>
    e348:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    e34c:	007f      	lsls	r7, r7, #1
    e34e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    e352:	e7a9      	b.n	e2a8 <_free_r+0xa4>
    e354:	10aa      	asrs	r2, r5, #2
    e356:	684b      	ldr	r3, [r1, #4]
    e358:	2501      	movs	r5, #1
    e35a:	fa05 f202 	lsl.w	r2, r5, r2
    e35e:	4313      	orrs	r3, r2
    e360:	604b      	str	r3, [r1, #4]
    e362:	4602      	mov	r2, r0
    e364:	e7b1      	b.n	e2ca <_free_r+0xc6>
    e366:	f043 0201 	orr.w	r2, r3, #1
    e36a:	614c      	str	r4, [r1, #20]
    e36c:	610c      	str	r4, [r1, #16]
    e36e:	60e5      	str	r5, [r4, #12]
    e370:	60a5      	str	r5, [r4, #8]
    e372:	6062      	str	r2, [r4, #4]
    e374:	50e3      	str	r3, [r4, r3]
    e376:	e788      	b.n	e28a <_free_r+0x86>
    e378:	2a54      	cmp	r2, #84	; 0x54
    e37a:	d806      	bhi.n	e38a <_free_r+0x186>
    e37c:	0b1a      	lsrs	r2, r3, #12
    e37e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    e382:	007f      	lsls	r7, r7, #1
    e384:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    e388:	e78e      	b.n	e2a8 <_free_r+0xa4>
    e38a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    e38e:	d806      	bhi.n	e39e <_free_r+0x19a>
    e390:	0bda      	lsrs	r2, r3, #15
    e392:	f102 0778 	add.w	r7, r2, #120	; 0x78
    e396:	007f      	lsls	r7, r7, #1
    e398:	f102 0577 	add.w	r5, r2, #119	; 0x77
    e39c:	e784      	b.n	e2a8 <_free_r+0xa4>
    e39e:	f240 5054 	movw	r0, #1364	; 0x554
    e3a2:	4282      	cmp	r2, r0
    e3a4:	d806      	bhi.n	e3b4 <_free_r+0x1b0>
    e3a6:	0c9a      	lsrs	r2, r3, #18
    e3a8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    e3ac:	007f      	lsls	r7, r7, #1
    e3ae:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    e3b2:	e779      	b.n	e2a8 <_free_r+0xa4>
    e3b4:	27fe      	movs	r7, #254	; 0xfe
    e3b6:	257e      	movs	r5, #126	; 0x7e
    e3b8:	e776      	b.n	e2a8 <_free_r+0xa4>
    e3ba:	f043 0201 	orr.w	r2, r3, #1
    e3be:	6062      	str	r2, [r4, #4]
    e3c0:	50e3      	str	r3, [r4, r3]
    e3c2:	e762      	b.n	e28a <_free_r+0x86>
    e3c4:	20002588 	.word	0x20002588
    e3c8:	20002590 	.word	0x20002590
    e3cc:	20002990 	.word	0x20002990
    e3d0:	20002fe8 	.word	0x20002fe8

0000e3d4 <_localeconv_r>:
    e3d4:	4a04      	ldr	r2, [pc, #16]	; (e3e8 <_localeconv_r+0x14>)
    e3d6:	4b05      	ldr	r3, [pc, #20]	; (e3ec <_localeconv_r+0x18>)
    e3d8:	6812      	ldr	r2, [r2, #0]
    e3da:	6b50      	ldr	r0, [r2, #52]	; 0x34
    e3dc:	2800      	cmp	r0, #0
    e3de:	bf08      	it	eq
    e3e0:	4618      	moveq	r0, r3
    e3e2:	30f0      	adds	r0, #240	; 0xf0
    e3e4:	4770      	bx	lr
    e3e6:	bf00      	nop
    e3e8:	20002418 	.word	0x20002418
    e3ec:	2000241c 	.word	0x2000241c

0000e3f0 <memchr>:
    e3f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e3f4:	2a10      	cmp	r2, #16
    e3f6:	db2b      	blt.n	e450 <memchr+0x60>
    e3f8:	f010 0f07 	tst.w	r0, #7
    e3fc:	d008      	beq.n	e410 <memchr+0x20>
    e3fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    e402:	3a01      	subs	r2, #1
    e404:	428b      	cmp	r3, r1
    e406:	d02d      	beq.n	e464 <memchr+0x74>
    e408:	f010 0f07 	tst.w	r0, #7
    e40c:	b342      	cbz	r2, e460 <memchr+0x70>
    e40e:	d1f6      	bne.n	e3fe <memchr+0xe>
    e410:	b4f0      	push	{r4, r5, r6, r7}
    e412:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e416:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e41a:	f022 0407 	bic.w	r4, r2, #7
    e41e:	f07f 0700 	mvns.w	r7, #0
    e422:	2300      	movs	r3, #0
    e424:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e428:	3c08      	subs	r4, #8
    e42a:	ea85 0501 	eor.w	r5, r5, r1
    e42e:	ea86 0601 	eor.w	r6, r6, r1
    e432:	fa85 f547 	uadd8	r5, r5, r7
    e436:	faa3 f587 	sel	r5, r3, r7
    e43a:	fa86 f647 	uadd8	r6, r6, r7
    e43e:	faa5 f687 	sel	r6, r5, r7
    e442:	b98e      	cbnz	r6, e468 <memchr+0x78>
    e444:	d1ee      	bne.n	e424 <memchr+0x34>
    e446:	bcf0      	pop	{r4, r5, r6, r7}
    e448:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e44c:	f002 0207 	and.w	r2, r2, #7
    e450:	b132      	cbz	r2, e460 <memchr+0x70>
    e452:	f810 3b01 	ldrb.w	r3, [r0], #1
    e456:	3a01      	subs	r2, #1
    e458:	ea83 0301 	eor.w	r3, r3, r1
    e45c:	b113      	cbz	r3, e464 <memchr+0x74>
    e45e:	d1f8      	bne.n	e452 <memchr+0x62>
    e460:	2000      	movs	r0, #0
    e462:	4770      	bx	lr
    e464:	3801      	subs	r0, #1
    e466:	4770      	bx	lr
    e468:	2d00      	cmp	r5, #0
    e46a:	bf06      	itte	eq
    e46c:	4635      	moveq	r5, r6
    e46e:	3803      	subeq	r0, #3
    e470:	3807      	subne	r0, #7
    e472:	f015 0f01 	tst.w	r5, #1
    e476:	d107      	bne.n	e488 <memchr+0x98>
    e478:	3001      	adds	r0, #1
    e47a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e47e:	bf02      	ittt	eq
    e480:	3001      	addeq	r0, #1
    e482:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e486:	3001      	addeq	r0, #1
    e488:	bcf0      	pop	{r4, r5, r6, r7}
    e48a:	3801      	subs	r0, #1
    e48c:	4770      	bx	lr
    e48e:	bf00      	nop

0000e490 <_Balloc>:
    e490:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e492:	b570      	push	{r4, r5, r6, lr}
    e494:	4605      	mov	r5, r0
    e496:	460c      	mov	r4, r1
    e498:	b14b      	cbz	r3, e4ae <_Balloc+0x1e>
    e49a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e49e:	b180      	cbz	r0, e4c2 <_Balloc+0x32>
    e4a0:	6802      	ldr	r2, [r0, #0]
    e4a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e4a6:	2300      	movs	r3, #0
    e4a8:	6103      	str	r3, [r0, #16]
    e4aa:	60c3      	str	r3, [r0, #12]
    e4ac:	bd70      	pop	{r4, r5, r6, pc}
    e4ae:	2221      	movs	r2, #33	; 0x21
    e4b0:	2104      	movs	r1, #4
    e4b2:	f000 fb2f 	bl	eb14 <_calloc_r>
    e4b6:	64e8      	str	r0, [r5, #76]	; 0x4c
    e4b8:	4603      	mov	r3, r0
    e4ba:	2800      	cmp	r0, #0
    e4bc:	d1ed      	bne.n	e49a <_Balloc+0xa>
    e4be:	2000      	movs	r0, #0
    e4c0:	bd70      	pop	{r4, r5, r6, pc}
    e4c2:	2101      	movs	r1, #1
    e4c4:	fa01 f604 	lsl.w	r6, r1, r4
    e4c8:	1d72      	adds	r2, r6, #5
    e4ca:	4628      	mov	r0, r5
    e4cc:	0092      	lsls	r2, r2, #2
    e4ce:	f000 fb21 	bl	eb14 <_calloc_r>
    e4d2:	2800      	cmp	r0, #0
    e4d4:	d0f3      	beq.n	e4be <_Balloc+0x2e>
    e4d6:	6044      	str	r4, [r0, #4]
    e4d8:	6086      	str	r6, [r0, #8]
    e4da:	e7e4      	b.n	e4a6 <_Balloc+0x16>

0000e4dc <_Bfree>:
    e4dc:	b131      	cbz	r1, e4ec <_Bfree+0x10>
    e4de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e4e0:	684a      	ldr	r2, [r1, #4]
    e4e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e4e6:	6008      	str	r0, [r1, #0]
    e4e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e4ec:	4770      	bx	lr
    e4ee:	bf00      	nop

0000e4f0 <__multadd>:
    e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4f2:	690c      	ldr	r4, [r1, #16]
    e4f4:	b083      	sub	sp, #12
    e4f6:	460d      	mov	r5, r1
    e4f8:	4606      	mov	r6, r0
    e4fa:	f101 0e14 	add.w	lr, r1, #20
    e4fe:	2700      	movs	r7, #0
    e500:	f8de 0000 	ldr.w	r0, [lr]
    e504:	b281      	uxth	r1, r0
    e506:	fb02 3101 	mla	r1, r2, r1, r3
    e50a:	0c0b      	lsrs	r3, r1, #16
    e50c:	0c00      	lsrs	r0, r0, #16
    e50e:	fb02 3300 	mla	r3, r2, r0, r3
    e512:	b289      	uxth	r1, r1
    e514:	3701      	adds	r7, #1
    e516:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    e51a:	42bc      	cmp	r4, r7
    e51c:	f84e 1b04 	str.w	r1, [lr], #4
    e520:	ea4f 4313 	mov.w	r3, r3, lsr #16
    e524:	dcec      	bgt.n	e500 <__multadd+0x10>
    e526:	b13b      	cbz	r3, e538 <__multadd+0x48>
    e528:	68aa      	ldr	r2, [r5, #8]
    e52a:	4294      	cmp	r4, r2
    e52c:	da07      	bge.n	e53e <__multadd+0x4e>
    e52e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    e532:	3401      	adds	r4, #1
    e534:	6153      	str	r3, [r2, #20]
    e536:	612c      	str	r4, [r5, #16]
    e538:	4628      	mov	r0, r5
    e53a:	b003      	add	sp, #12
    e53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e53e:	6869      	ldr	r1, [r5, #4]
    e540:	9301      	str	r3, [sp, #4]
    e542:	3101      	adds	r1, #1
    e544:	4630      	mov	r0, r6
    e546:	f7ff ffa3 	bl	e490 <_Balloc>
    e54a:	692a      	ldr	r2, [r5, #16]
    e54c:	3202      	adds	r2, #2
    e54e:	f105 010c 	add.w	r1, r5, #12
    e552:	4607      	mov	r7, r0
    e554:	0092      	lsls	r2, r2, #2
    e556:	300c      	adds	r0, #12
    e558:	f7fb ff60 	bl	a41c <memcpy>
    e55c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    e55e:	6869      	ldr	r1, [r5, #4]
    e560:	9b01      	ldr	r3, [sp, #4]
    e562:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    e566:	6028      	str	r0, [r5, #0]
    e568:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    e56c:	463d      	mov	r5, r7
    e56e:	e7de      	b.n	e52e <__multadd+0x3e>

0000e570 <__hi0bits>:
    e570:	0c03      	lsrs	r3, r0, #16
    e572:	041b      	lsls	r3, r3, #16
    e574:	b9b3      	cbnz	r3, e5a4 <__hi0bits+0x34>
    e576:	0400      	lsls	r0, r0, #16
    e578:	2310      	movs	r3, #16
    e57a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    e57e:	bf04      	itt	eq
    e580:	0200      	lsleq	r0, r0, #8
    e582:	3308      	addeq	r3, #8
    e584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    e588:	bf04      	itt	eq
    e58a:	0100      	lsleq	r0, r0, #4
    e58c:	3304      	addeq	r3, #4
    e58e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    e592:	bf04      	itt	eq
    e594:	0080      	lsleq	r0, r0, #2
    e596:	3302      	addeq	r3, #2
    e598:	2800      	cmp	r0, #0
    e59a:	db07      	blt.n	e5ac <__hi0bits+0x3c>
    e59c:	0042      	lsls	r2, r0, #1
    e59e:	d403      	bmi.n	e5a8 <__hi0bits+0x38>
    e5a0:	2020      	movs	r0, #32
    e5a2:	4770      	bx	lr
    e5a4:	2300      	movs	r3, #0
    e5a6:	e7e8      	b.n	e57a <__hi0bits+0xa>
    e5a8:	1c58      	adds	r0, r3, #1
    e5aa:	4770      	bx	lr
    e5ac:	4618      	mov	r0, r3
    e5ae:	4770      	bx	lr

0000e5b0 <__lo0bits>:
    e5b0:	6803      	ldr	r3, [r0, #0]
    e5b2:	f013 0207 	ands.w	r2, r3, #7
    e5b6:	d007      	beq.n	e5c8 <__lo0bits+0x18>
    e5b8:	07d9      	lsls	r1, r3, #31
    e5ba:	d420      	bmi.n	e5fe <__lo0bits+0x4e>
    e5bc:	079a      	lsls	r2, r3, #30
    e5be:	d420      	bmi.n	e602 <__lo0bits+0x52>
    e5c0:	089b      	lsrs	r3, r3, #2
    e5c2:	6003      	str	r3, [r0, #0]
    e5c4:	2002      	movs	r0, #2
    e5c6:	4770      	bx	lr
    e5c8:	b299      	uxth	r1, r3
    e5ca:	b909      	cbnz	r1, e5d0 <__lo0bits+0x20>
    e5cc:	0c1b      	lsrs	r3, r3, #16
    e5ce:	2210      	movs	r2, #16
    e5d0:	f013 0fff 	tst.w	r3, #255	; 0xff
    e5d4:	bf04      	itt	eq
    e5d6:	0a1b      	lsreq	r3, r3, #8
    e5d8:	3208      	addeq	r2, #8
    e5da:	0719      	lsls	r1, r3, #28
    e5dc:	bf04      	itt	eq
    e5de:	091b      	lsreq	r3, r3, #4
    e5e0:	3204      	addeq	r2, #4
    e5e2:	0799      	lsls	r1, r3, #30
    e5e4:	bf04      	itt	eq
    e5e6:	089b      	lsreq	r3, r3, #2
    e5e8:	3202      	addeq	r2, #2
    e5ea:	07d9      	lsls	r1, r3, #31
    e5ec:	d404      	bmi.n	e5f8 <__lo0bits+0x48>
    e5ee:	085b      	lsrs	r3, r3, #1
    e5f0:	d101      	bne.n	e5f6 <__lo0bits+0x46>
    e5f2:	2020      	movs	r0, #32
    e5f4:	4770      	bx	lr
    e5f6:	3201      	adds	r2, #1
    e5f8:	6003      	str	r3, [r0, #0]
    e5fa:	4610      	mov	r0, r2
    e5fc:	4770      	bx	lr
    e5fe:	2000      	movs	r0, #0
    e600:	4770      	bx	lr
    e602:	085b      	lsrs	r3, r3, #1
    e604:	6003      	str	r3, [r0, #0]
    e606:	2001      	movs	r0, #1
    e608:	4770      	bx	lr
    e60a:	bf00      	nop

0000e60c <__i2b>:
    e60c:	b510      	push	{r4, lr}
    e60e:	460c      	mov	r4, r1
    e610:	2101      	movs	r1, #1
    e612:	f7ff ff3d 	bl	e490 <_Balloc>
    e616:	2201      	movs	r2, #1
    e618:	6144      	str	r4, [r0, #20]
    e61a:	6102      	str	r2, [r0, #16]
    e61c:	bd10      	pop	{r4, pc}
    e61e:	bf00      	nop

0000e620 <__multiply>:
    e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e624:	690d      	ldr	r5, [r1, #16]
    e626:	6917      	ldr	r7, [r2, #16]
    e628:	42bd      	cmp	r5, r7
    e62a:	b083      	sub	sp, #12
    e62c:	460c      	mov	r4, r1
    e62e:	4616      	mov	r6, r2
    e630:	da04      	bge.n	e63c <__multiply+0x1c>
    e632:	462a      	mov	r2, r5
    e634:	4634      	mov	r4, r6
    e636:	463d      	mov	r5, r7
    e638:	460e      	mov	r6, r1
    e63a:	4617      	mov	r7, r2
    e63c:	68a3      	ldr	r3, [r4, #8]
    e63e:	6861      	ldr	r1, [r4, #4]
    e640:	eb05 0807 	add.w	r8, r5, r7
    e644:	4598      	cmp	r8, r3
    e646:	bfc8      	it	gt
    e648:	3101      	addgt	r1, #1
    e64a:	f7ff ff21 	bl	e490 <_Balloc>
    e64e:	f100 0c14 	add.w	ip, r0, #20
    e652:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    e656:	45cc      	cmp	ip, r9
    e658:	9000      	str	r0, [sp, #0]
    e65a:	d205      	bcs.n	e668 <__multiply+0x48>
    e65c:	4663      	mov	r3, ip
    e65e:	2100      	movs	r1, #0
    e660:	f843 1b04 	str.w	r1, [r3], #4
    e664:	4599      	cmp	r9, r3
    e666:	d8fb      	bhi.n	e660 <__multiply+0x40>
    e668:	f106 0214 	add.w	r2, r6, #20
    e66c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    e670:	f104 0314 	add.w	r3, r4, #20
    e674:	4552      	cmp	r2, sl
    e676:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    e67a:	d254      	bcs.n	e726 <__multiply+0x106>
    e67c:	f8cd 9004 	str.w	r9, [sp, #4]
    e680:	4699      	mov	r9, r3
    e682:	f852 3b04 	ldr.w	r3, [r2], #4
    e686:	fa1f fb83 	uxth.w	fp, r3
    e68a:	f1bb 0f00 	cmp.w	fp, #0
    e68e:	d020      	beq.n	e6d2 <__multiply+0xb2>
    e690:	2000      	movs	r0, #0
    e692:	464f      	mov	r7, r9
    e694:	4666      	mov	r6, ip
    e696:	4605      	mov	r5, r0
    e698:	e000      	b.n	e69c <__multiply+0x7c>
    e69a:	461e      	mov	r6, r3
    e69c:	f857 4b04 	ldr.w	r4, [r7], #4
    e6a0:	6830      	ldr	r0, [r6, #0]
    e6a2:	b2a1      	uxth	r1, r4
    e6a4:	b283      	uxth	r3, r0
    e6a6:	fb0b 3101 	mla	r1, fp, r1, r3
    e6aa:	0c24      	lsrs	r4, r4, #16
    e6ac:	0c00      	lsrs	r0, r0, #16
    e6ae:	194b      	adds	r3, r1, r5
    e6b0:	fb0b 0004 	mla	r0, fp, r4, r0
    e6b4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    e6b8:	b299      	uxth	r1, r3
    e6ba:	4633      	mov	r3, r6
    e6bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    e6c0:	45be      	cmp	lr, r7
    e6c2:	ea4f 4510 	mov.w	r5, r0, lsr #16
    e6c6:	f843 1b04 	str.w	r1, [r3], #4
    e6ca:	d8e6      	bhi.n	e69a <__multiply+0x7a>
    e6cc:	6075      	str	r5, [r6, #4]
    e6ce:	f852 3c04 	ldr.w	r3, [r2, #-4]
    e6d2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    e6d6:	d020      	beq.n	e71a <__multiply+0xfa>
    e6d8:	f8dc 3000 	ldr.w	r3, [ip]
    e6dc:	4667      	mov	r7, ip
    e6de:	4618      	mov	r0, r3
    e6e0:	464d      	mov	r5, r9
    e6e2:	2100      	movs	r1, #0
    e6e4:	e000      	b.n	e6e8 <__multiply+0xc8>
    e6e6:	4637      	mov	r7, r6
    e6e8:	882c      	ldrh	r4, [r5, #0]
    e6ea:	0c00      	lsrs	r0, r0, #16
    e6ec:	fb0b 0004 	mla	r0, fp, r4, r0
    e6f0:	4401      	add	r1, r0
    e6f2:	b29c      	uxth	r4, r3
    e6f4:	463e      	mov	r6, r7
    e6f6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    e6fa:	f846 3b04 	str.w	r3, [r6], #4
    e6fe:	6878      	ldr	r0, [r7, #4]
    e700:	f855 4b04 	ldr.w	r4, [r5], #4
    e704:	b283      	uxth	r3, r0
    e706:	0c24      	lsrs	r4, r4, #16
    e708:	fb0b 3404 	mla	r4, fp, r4, r3
    e70c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    e710:	45ae      	cmp	lr, r5
    e712:	ea4f 4113 	mov.w	r1, r3, lsr #16
    e716:	d8e6      	bhi.n	e6e6 <__multiply+0xc6>
    e718:	607b      	str	r3, [r7, #4]
    e71a:	4592      	cmp	sl, r2
    e71c:	f10c 0c04 	add.w	ip, ip, #4
    e720:	d8af      	bhi.n	e682 <__multiply+0x62>
    e722:	f8dd 9004 	ldr.w	r9, [sp, #4]
    e726:	f1b8 0f00 	cmp.w	r8, #0
    e72a:	dd0b      	ble.n	e744 <__multiply+0x124>
    e72c:	f859 3c04 	ldr.w	r3, [r9, #-4]
    e730:	f1a9 0904 	sub.w	r9, r9, #4
    e734:	b11b      	cbz	r3, e73e <__multiply+0x11e>
    e736:	e005      	b.n	e744 <__multiply+0x124>
    e738:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    e73c:	b913      	cbnz	r3, e744 <__multiply+0x124>
    e73e:	f1b8 0801 	subs.w	r8, r8, #1
    e742:	d1f9      	bne.n	e738 <__multiply+0x118>
    e744:	9800      	ldr	r0, [sp, #0]
    e746:	f8c0 8010 	str.w	r8, [r0, #16]
    e74a:	b003      	add	sp, #12
    e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e750 <__pow5mult>:
    e750:	f012 0303 	ands.w	r3, r2, #3
    e754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e758:	4614      	mov	r4, r2
    e75a:	4607      	mov	r7, r0
    e75c:	d12e      	bne.n	e7bc <__pow5mult+0x6c>
    e75e:	460e      	mov	r6, r1
    e760:	10a4      	asrs	r4, r4, #2
    e762:	d01c      	beq.n	e79e <__pow5mult+0x4e>
    e764:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    e766:	b395      	cbz	r5, e7ce <__pow5mult+0x7e>
    e768:	07e3      	lsls	r3, r4, #31
    e76a:	f04f 0800 	mov.w	r8, #0
    e76e:	d406      	bmi.n	e77e <__pow5mult+0x2e>
    e770:	1064      	asrs	r4, r4, #1
    e772:	d014      	beq.n	e79e <__pow5mult+0x4e>
    e774:	6828      	ldr	r0, [r5, #0]
    e776:	b1a8      	cbz	r0, e7a4 <__pow5mult+0x54>
    e778:	4605      	mov	r5, r0
    e77a:	07e3      	lsls	r3, r4, #31
    e77c:	d5f8      	bpl.n	e770 <__pow5mult+0x20>
    e77e:	462a      	mov	r2, r5
    e780:	4631      	mov	r1, r6
    e782:	4638      	mov	r0, r7
    e784:	f7ff ff4c 	bl	e620 <__multiply>
    e788:	b1b6      	cbz	r6, e7b8 <__pow5mult+0x68>
    e78a:	6872      	ldr	r2, [r6, #4]
    e78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e78e:	1064      	asrs	r4, r4, #1
    e790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e794:	6031      	str	r1, [r6, #0]
    e796:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e79a:	4606      	mov	r6, r0
    e79c:	d1ea      	bne.n	e774 <__pow5mult+0x24>
    e79e:	4630      	mov	r0, r6
    e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7a4:	462a      	mov	r2, r5
    e7a6:	4629      	mov	r1, r5
    e7a8:	4638      	mov	r0, r7
    e7aa:	f7ff ff39 	bl	e620 <__multiply>
    e7ae:	6028      	str	r0, [r5, #0]
    e7b0:	f8c0 8000 	str.w	r8, [r0]
    e7b4:	4605      	mov	r5, r0
    e7b6:	e7e0      	b.n	e77a <__pow5mult+0x2a>
    e7b8:	4606      	mov	r6, r0
    e7ba:	e7d9      	b.n	e770 <__pow5mult+0x20>
    e7bc:	1e5a      	subs	r2, r3, #1
    e7be:	4d0b      	ldr	r5, [pc, #44]	; (e7ec <__pow5mult+0x9c>)
    e7c0:	2300      	movs	r3, #0
    e7c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    e7c6:	f7ff fe93 	bl	e4f0 <__multadd>
    e7ca:	4606      	mov	r6, r0
    e7cc:	e7c8      	b.n	e760 <__pow5mult+0x10>
    e7ce:	2101      	movs	r1, #1
    e7d0:	4638      	mov	r0, r7
    e7d2:	f7ff fe5d 	bl	e490 <_Balloc>
    e7d6:	f240 2171 	movw	r1, #625	; 0x271
    e7da:	2201      	movs	r2, #1
    e7dc:	2300      	movs	r3, #0
    e7de:	6141      	str	r1, [r0, #20]
    e7e0:	6102      	str	r2, [r0, #16]
    e7e2:	4605      	mov	r5, r0
    e7e4:	64b8      	str	r0, [r7, #72]	; 0x48
    e7e6:	6003      	str	r3, [r0, #0]
    e7e8:	e7be      	b.n	e768 <__pow5mult+0x18>
    e7ea:	bf00      	nop
    e7ec:	20001ed0 	.word	0x20001ed0

0000e7f0 <__lshift>:
    e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e7f4:	4691      	mov	r9, r2
    e7f6:	690a      	ldr	r2, [r1, #16]
    e7f8:	688b      	ldr	r3, [r1, #8]
    e7fa:	ea4f 1469 	mov.w	r4, r9, asr #5
    e7fe:	eb04 0802 	add.w	r8, r4, r2
    e802:	f108 0501 	add.w	r5, r8, #1
    e806:	429d      	cmp	r5, r3
    e808:	460e      	mov	r6, r1
    e80a:	4682      	mov	sl, r0
    e80c:	6849      	ldr	r1, [r1, #4]
    e80e:	dd04      	ble.n	e81a <__lshift+0x2a>
    e810:	005b      	lsls	r3, r3, #1
    e812:	429d      	cmp	r5, r3
    e814:	f101 0101 	add.w	r1, r1, #1
    e818:	dcfa      	bgt.n	e810 <__lshift+0x20>
    e81a:	4650      	mov	r0, sl
    e81c:	f7ff fe38 	bl	e490 <_Balloc>
    e820:	2c00      	cmp	r4, #0
    e822:	f100 0214 	add.w	r2, r0, #20
    e826:	dd38      	ble.n	e89a <__lshift+0xaa>
    e828:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    e82c:	2100      	movs	r1, #0
    e82e:	f842 1b04 	str.w	r1, [r2], #4
    e832:	4293      	cmp	r3, r2
    e834:	d1fb      	bne.n	e82e <__lshift+0x3e>
    e836:	6934      	ldr	r4, [r6, #16]
    e838:	f106 0114 	add.w	r1, r6, #20
    e83c:	f019 091f 	ands.w	r9, r9, #31
    e840:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    e844:	d021      	beq.n	e88a <__lshift+0x9a>
    e846:	f1c9 0220 	rsb	r2, r9, #32
    e84a:	2400      	movs	r4, #0
    e84c:	680f      	ldr	r7, [r1, #0]
    e84e:	fa07 fc09 	lsl.w	ip, r7, r9
    e852:	ea4c 0404 	orr.w	r4, ip, r4
    e856:	469c      	mov	ip, r3
    e858:	f843 4b04 	str.w	r4, [r3], #4
    e85c:	f851 4b04 	ldr.w	r4, [r1], #4
    e860:	458e      	cmp	lr, r1
    e862:	fa24 f402 	lsr.w	r4, r4, r2
    e866:	d8f1      	bhi.n	e84c <__lshift+0x5c>
    e868:	f8cc 4004 	str.w	r4, [ip, #4]
    e86c:	b10c      	cbz	r4, e872 <__lshift+0x82>
    e86e:	f108 0502 	add.w	r5, r8, #2
    e872:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    e876:	6872      	ldr	r2, [r6, #4]
    e878:	3d01      	subs	r5, #1
    e87a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e87e:	6105      	str	r5, [r0, #16]
    e880:	6031      	str	r1, [r6, #0]
    e882:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e88a:	3b04      	subs	r3, #4
    e88c:	f851 2b04 	ldr.w	r2, [r1], #4
    e890:	f843 2f04 	str.w	r2, [r3, #4]!
    e894:	458e      	cmp	lr, r1
    e896:	d8f9      	bhi.n	e88c <__lshift+0x9c>
    e898:	e7eb      	b.n	e872 <__lshift+0x82>
    e89a:	4613      	mov	r3, r2
    e89c:	e7cb      	b.n	e836 <__lshift+0x46>
    e89e:	bf00      	nop

0000e8a0 <__mcmp>:
    e8a0:	6902      	ldr	r2, [r0, #16]
    e8a2:	690b      	ldr	r3, [r1, #16]
    e8a4:	1ad2      	subs	r2, r2, r3
    e8a6:	d113      	bne.n	e8d0 <__mcmp+0x30>
    e8a8:	009b      	lsls	r3, r3, #2
    e8aa:	3014      	adds	r0, #20
    e8ac:	3114      	adds	r1, #20
    e8ae:	4419      	add	r1, r3
    e8b0:	b410      	push	{r4}
    e8b2:	4403      	add	r3, r0
    e8b4:	e001      	b.n	e8ba <__mcmp+0x1a>
    e8b6:	4298      	cmp	r0, r3
    e8b8:	d20c      	bcs.n	e8d4 <__mcmp+0x34>
    e8ba:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    e8be:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    e8c2:	4294      	cmp	r4, r2
    e8c4:	d0f7      	beq.n	e8b6 <__mcmp+0x16>
    e8c6:	d309      	bcc.n	e8dc <__mcmp+0x3c>
    e8c8:	2001      	movs	r0, #1
    e8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    e8ce:	4770      	bx	lr
    e8d0:	4610      	mov	r0, r2
    e8d2:	4770      	bx	lr
    e8d4:	2000      	movs	r0, #0
    e8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e8da:	4770      	bx	lr
    e8dc:	f04f 30ff 	mov.w	r0, #4294967295
    e8e0:	e7f3      	b.n	e8ca <__mcmp+0x2a>
    e8e2:	bf00      	nop

0000e8e4 <__mdiff>:
    e8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e8e8:	690b      	ldr	r3, [r1, #16]
    e8ea:	460f      	mov	r7, r1
    e8ec:	6911      	ldr	r1, [r2, #16]
    e8ee:	1a5b      	subs	r3, r3, r1
    e8f0:	2b00      	cmp	r3, #0
    e8f2:	4690      	mov	r8, r2
    e8f4:	d117      	bne.n	e926 <__mdiff+0x42>
    e8f6:	0089      	lsls	r1, r1, #2
    e8f8:	f107 0214 	add.w	r2, r7, #20
    e8fc:	f108 0514 	add.w	r5, r8, #20
    e900:	1853      	adds	r3, r2, r1
    e902:	4429      	add	r1, r5
    e904:	e001      	b.n	e90a <__mdiff+0x26>
    e906:	429a      	cmp	r2, r3
    e908:	d25e      	bcs.n	e9c8 <__mdiff+0xe4>
    e90a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    e90e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    e912:	42a6      	cmp	r6, r4
    e914:	d0f7      	beq.n	e906 <__mdiff+0x22>
    e916:	d260      	bcs.n	e9da <__mdiff+0xf6>
    e918:	463b      	mov	r3, r7
    e91a:	4614      	mov	r4, r2
    e91c:	4647      	mov	r7, r8
    e91e:	f04f 0901 	mov.w	r9, #1
    e922:	4698      	mov	r8, r3
    e924:	e006      	b.n	e934 <__mdiff+0x50>
    e926:	db5d      	blt.n	e9e4 <__mdiff+0x100>
    e928:	f107 0514 	add.w	r5, r7, #20
    e92c:	f102 0414 	add.w	r4, r2, #20
    e930:	f04f 0900 	mov.w	r9, #0
    e934:	6879      	ldr	r1, [r7, #4]
    e936:	f7ff fdab 	bl	e490 <_Balloc>
    e93a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e93e:	693e      	ldr	r6, [r7, #16]
    e940:	f8c0 900c 	str.w	r9, [r0, #12]
    e944:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    e948:	46a6      	mov	lr, r4
    e94a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    e94e:	f100 0414 	add.w	r4, r0, #20
    e952:	2300      	movs	r3, #0
    e954:	f85e 1b04 	ldr.w	r1, [lr], #4
    e958:	f855 8b04 	ldr.w	r8, [r5], #4
    e95c:	b28a      	uxth	r2, r1
    e95e:	fa13 f388 	uxtah	r3, r3, r8
    e962:	0c09      	lsrs	r1, r1, #16
    e964:	1a9a      	subs	r2, r3, r2
    e966:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    e96a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    e96e:	b292      	uxth	r2, r2
    e970:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e974:	45f4      	cmp	ip, lr
    e976:	f844 2b04 	str.w	r2, [r4], #4
    e97a:	ea4f 4323 	mov.w	r3, r3, asr #16
    e97e:	d8e9      	bhi.n	e954 <__mdiff+0x70>
    e980:	42af      	cmp	r7, r5
    e982:	d917      	bls.n	e9b4 <__mdiff+0xd0>
    e984:	46a4      	mov	ip, r4
    e986:	4629      	mov	r1, r5
    e988:	f851 eb04 	ldr.w	lr, [r1], #4
    e98c:	fa13 f28e 	uxtah	r2, r3, lr
    e990:	1413      	asrs	r3, r2, #16
    e992:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    e996:	b292      	uxth	r2, r2
    e998:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e99c:	428f      	cmp	r7, r1
    e99e:	f84c 2b04 	str.w	r2, [ip], #4
    e9a2:	ea4f 4323 	mov.w	r3, r3, asr #16
    e9a6:	d8ef      	bhi.n	e988 <__mdiff+0xa4>
    e9a8:	43ed      	mvns	r5, r5
    e9aa:	443d      	add	r5, r7
    e9ac:	f025 0503 	bic.w	r5, r5, #3
    e9b0:	3504      	adds	r5, #4
    e9b2:	442c      	add	r4, r5
    e9b4:	3c04      	subs	r4, #4
    e9b6:	b922      	cbnz	r2, e9c2 <__mdiff+0xde>
    e9b8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    e9bc:	3e01      	subs	r6, #1
    e9be:	2b00      	cmp	r3, #0
    e9c0:	d0fa      	beq.n	e9b8 <__mdiff+0xd4>
    e9c2:	6106      	str	r6, [r0, #16]
    e9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e9c8:	2100      	movs	r1, #0
    e9ca:	f7ff fd61 	bl	e490 <_Balloc>
    e9ce:	2201      	movs	r2, #1
    e9d0:	2300      	movs	r3, #0
    e9d2:	6102      	str	r2, [r0, #16]
    e9d4:	6143      	str	r3, [r0, #20]
    e9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e9da:	462c      	mov	r4, r5
    e9dc:	f04f 0900 	mov.w	r9, #0
    e9e0:	4615      	mov	r5, r2
    e9e2:	e7a7      	b.n	e934 <__mdiff+0x50>
    e9e4:	463b      	mov	r3, r7
    e9e6:	f107 0414 	add.w	r4, r7, #20
    e9ea:	f108 0514 	add.w	r5, r8, #20
    e9ee:	4647      	mov	r7, r8
    e9f0:	f04f 0901 	mov.w	r9, #1
    e9f4:	4698      	mov	r8, r3
    e9f6:	e79d      	b.n	e934 <__mdiff+0x50>

0000e9f8 <__d2b>:
    e9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e9fc:	ec57 6b10 	vmov	r6, r7, d0
    ea00:	b083      	sub	sp, #12
    ea02:	4688      	mov	r8, r1
    ea04:	2101      	movs	r1, #1
    ea06:	463c      	mov	r4, r7
    ea08:	f3c7 550a 	ubfx	r5, r7, #20, #11
    ea0c:	4617      	mov	r7, r2
    ea0e:	f7ff fd3f 	bl	e490 <_Balloc>
    ea12:	f3c4 0413 	ubfx	r4, r4, #0, #20
    ea16:	4681      	mov	r9, r0
    ea18:	b10d      	cbz	r5, ea1e <__d2b+0x26>
    ea1a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    ea1e:	9401      	str	r4, [sp, #4]
    ea20:	b31e      	cbz	r6, ea6a <__d2b+0x72>
    ea22:	a802      	add	r0, sp, #8
    ea24:	f840 6d08 	str.w	r6, [r0, #-8]!
    ea28:	f7ff fdc2 	bl	e5b0 <__lo0bits>
    ea2c:	2800      	cmp	r0, #0
    ea2e:	d134      	bne.n	ea9a <__d2b+0xa2>
    ea30:	e89d 000c 	ldmia.w	sp, {r2, r3}
    ea34:	f8c9 2014 	str.w	r2, [r9, #20]
    ea38:	2b00      	cmp	r3, #0
    ea3a:	bf0c      	ite	eq
    ea3c:	2101      	moveq	r1, #1
    ea3e:	2102      	movne	r1, #2
    ea40:	f8c9 3018 	str.w	r3, [r9, #24]
    ea44:	f8c9 1010 	str.w	r1, [r9, #16]
    ea48:	b9dd      	cbnz	r5, ea82 <__d2b+0x8a>
    ea4a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    ea4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    ea52:	f8c8 0000 	str.w	r0, [r8]
    ea56:	6918      	ldr	r0, [r3, #16]
    ea58:	f7ff fd8a 	bl	e570 <__hi0bits>
    ea5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    ea60:	6038      	str	r0, [r7, #0]
    ea62:	4648      	mov	r0, r9
    ea64:	b003      	add	sp, #12
    ea66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ea6a:	a801      	add	r0, sp, #4
    ea6c:	f7ff fda0 	bl	e5b0 <__lo0bits>
    ea70:	9b01      	ldr	r3, [sp, #4]
    ea72:	f8c9 3014 	str.w	r3, [r9, #20]
    ea76:	2101      	movs	r1, #1
    ea78:	3020      	adds	r0, #32
    ea7a:	f8c9 1010 	str.w	r1, [r9, #16]
    ea7e:	2d00      	cmp	r5, #0
    ea80:	d0e3      	beq.n	ea4a <__d2b+0x52>
    ea82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    ea86:	4405      	add	r5, r0
    ea88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    ea8c:	f8c8 5000 	str.w	r5, [r8]
    ea90:	6038      	str	r0, [r7, #0]
    ea92:	4648      	mov	r0, r9
    ea94:	b003      	add	sp, #12
    ea96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ea9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    ea9e:	f1c0 0120 	rsb	r1, r0, #32
    eaa2:	fa03 f101 	lsl.w	r1, r3, r1
    eaa6:	430a      	orrs	r2, r1
    eaa8:	40c3      	lsrs	r3, r0
    eaaa:	9301      	str	r3, [sp, #4]
    eaac:	f8c9 2014 	str.w	r2, [r9, #20]
    eab0:	e7c2      	b.n	ea38 <__d2b+0x40>
    eab2:	bf00      	nop

0000eab4 <_vasnprintf_r>:
    eab4:	b570      	push	{r4, r5, r6, lr}
    eab6:	4615      	mov	r5, r2
    eab8:	b09a      	sub	sp, #104	; 0x68
    eaba:	6814      	ldr	r4, [r2, #0]
    eabc:	b109      	cbz	r1, eac2 <_vasnprintf_r+0xe>
    eabe:	2c00      	cmp	r4, #0
    eac0:	d11a      	bne.n	eaf8 <_vasnprintf_r+0x44>
    eac2:	2400      	movs	r4, #0
    eac4:	f44f 7222 	mov.w	r2, #648	; 0x288
    eac8:	f8ad 200c 	strh.w	r2, [sp, #12]
    eacc:	9400      	str	r4, [sp, #0]
    eace:	9404      	str	r4, [sp, #16]
    ead0:	461a      	mov	r2, r3
    ead2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    ead6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ead8:	9402      	str	r4, [sp, #8]
    eada:	4669      	mov	r1, sp
    eadc:	9405      	str	r4, [sp, #20]
    eade:	f8ad 600e 	strh.w	r6, [sp, #14]
    eae2:	f000 ff21 	bl	f928 <_svfprintf_r>
    eae6:	2800      	cmp	r0, #0
    eae8:	db11      	blt.n	eb0e <_vasnprintf_r+0x5a>
    eaea:	9b00      	ldr	r3, [sp, #0]
    eaec:	6028      	str	r0, [r5, #0]
    eaee:	2200      	movs	r2, #0
    eaf0:	701a      	strb	r2, [r3, #0]
    eaf2:	9804      	ldr	r0, [sp, #16]
    eaf4:	b01a      	add	sp, #104	; 0x68
    eaf6:	bd70      	pop	{r4, r5, r6, pc}
    eaf8:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    eafc:	9100      	str	r1, [sp, #0]
    eafe:	9104      	str	r1, [sp, #16]
    eb00:	f8ad 200c 	strh.w	r2, [sp, #12]
    eb04:	dae4      	bge.n	ead0 <_vasnprintf_r+0x1c>
    eb06:	238b      	movs	r3, #139	; 0x8b
    eb08:	6003      	str	r3, [r0, #0]
    eb0a:	2000      	movs	r0, #0
    eb0c:	e7f2      	b.n	eaf4 <_vasnprintf_r+0x40>
    eb0e:	2000      	movs	r0, #0
    eb10:	e7f0      	b.n	eaf4 <_vasnprintf_r+0x40>
    eb12:	bf00      	nop

0000eb14 <_calloc_r>:
    eb14:	b510      	push	{r4, lr}
    eb16:	fb02 f101 	mul.w	r1, r2, r1
    eb1a:	f7fe f8c5 	bl	cca8 <_malloc_r>
    eb1e:	4604      	mov	r4, r0
    eb20:	b1d8      	cbz	r0, eb5a <_calloc_r+0x46>
    eb22:	f850 2c04 	ldr.w	r2, [r0, #-4]
    eb26:	f022 0203 	bic.w	r2, r2, #3
    eb2a:	3a04      	subs	r2, #4
    eb2c:	2a24      	cmp	r2, #36	; 0x24
    eb2e:	d818      	bhi.n	eb62 <_calloc_r+0x4e>
    eb30:	2a13      	cmp	r2, #19
    eb32:	d914      	bls.n	eb5e <_calloc_r+0x4a>
    eb34:	2300      	movs	r3, #0
    eb36:	2a1b      	cmp	r2, #27
    eb38:	6003      	str	r3, [r0, #0]
    eb3a:	6043      	str	r3, [r0, #4]
    eb3c:	d916      	bls.n	eb6c <_calloc_r+0x58>
    eb3e:	2a24      	cmp	r2, #36	; 0x24
    eb40:	6083      	str	r3, [r0, #8]
    eb42:	60c3      	str	r3, [r0, #12]
    eb44:	bf11      	iteee	ne
    eb46:	f100 0210 	addne.w	r2, r0, #16
    eb4a:	6103      	streq	r3, [r0, #16]
    eb4c:	6143      	streq	r3, [r0, #20]
    eb4e:	f100 0218 	addeq.w	r2, r0, #24
    eb52:	2300      	movs	r3, #0
    eb54:	6013      	str	r3, [r2, #0]
    eb56:	6053      	str	r3, [r2, #4]
    eb58:	6093      	str	r3, [r2, #8]
    eb5a:	4620      	mov	r0, r4
    eb5c:	bd10      	pop	{r4, pc}
    eb5e:	4602      	mov	r2, r0
    eb60:	e7f7      	b.n	eb52 <_calloc_r+0x3e>
    eb62:	2100      	movs	r1, #0
    eb64:	f7fe fc04 	bl	d370 <memset>
    eb68:	4620      	mov	r0, r4
    eb6a:	bd10      	pop	{r4, pc}
    eb6c:	f100 0208 	add.w	r2, r0, #8
    eb70:	e7ef      	b.n	eb52 <_calloc_r+0x3e>
    eb72:	bf00      	nop

0000eb74 <quorem>:
    eb74:	6902      	ldr	r2, [r0, #16]
    eb76:	690b      	ldr	r3, [r1, #16]
    eb78:	4293      	cmp	r3, r2
    eb7a:	f300 808d 	bgt.w	ec98 <quorem+0x124>
    eb7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb82:	f103 38ff 	add.w	r8, r3, #4294967295
    eb86:	f101 0714 	add.w	r7, r1, #20
    eb8a:	f100 0b14 	add.w	fp, r0, #20
    eb8e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    eb92:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    eb96:	ea4f 0488 	mov.w	r4, r8, lsl #2
    eb9a:	b083      	sub	sp, #12
    eb9c:	3201      	adds	r2, #1
    eb9e:	fbb3 f9f2 	udiv	r9, r3, r2
    eba2:	eb0b 0304 	add.w	r3, fp, r4
    eba6:	9400      	str	r4, [sp, #0]
    eba8:	eb07 0a04 	add.w	sl, r7, r4
    ebac:	9301      	str	r3, [sp, #4]
    ebae:	f1b9 0f00 	cmp.w	r9, #0
    ebb2:	d039      	beq.n	ec28 <quorem+0xb4>
    ebb4:	2500      	movs	r5, #0
    ebb6:	46bc      	mov	ip, r7
    ebb8:	46de      	mov	lr, fp
    ebba:	462b      	mov	r3, r5
    ebbc:	f85c 6b04 	ldr.w	r6, [ip], #4
    ebc0:	f8de 2000 	ldr.w	r2, [lr]
    ebc4:	b2b4      	uxth	r4, r6
    ebc6:	fb09 5504 	mla	r5, r9, r4, r5
    ebca:	0c36      	lsrs	r6, r6, #16
    ebcc:	0c2c      	lsrs	r4, r5, #16
    ebce:	fb09 4406 	mla	r4, r9, r6, r4
    ebd2:	b2ad      	uxth	r5, r5
    ebd4:	1b5b      	subs	r3, r3, r5
    ebd6:	b2a6      	uxth	r6, r4
    ebd8:	fa13 f382 	uxtah	r3, r3, r2
    ebdc:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    ebe0:	eb06 4623 	add.w	r6, r6, r3, asr #16
    ebe4:	b29b      	uxth	r3, r3
    ebe6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    ebea:	45e2      	cmp	sl, ip
    ebec:	f84e 3b04 	str.w	r3, [lr], #4
    ebf0:	ea4f 4514 	mov.w	r5, r4, lsr #16
    ebf4:	ea4f 4326 	mov.w	r3, r6, asr #16
    ebf8:	d2e0      	bcs.n	ebbc <quorem+0x48>
    ebfa:	9b00      	ldr	r3, [sp, #0]
    ebfc:	f85b 3003 	ldr.w	r3, [fp, r3]
    ec00:	b993      	cbnz	r3, ec28 <quorem+0xb4>
    ec02:	9c01      	ldr	r4, [sp, #4]
    ec04:	1f23      	subs	r3, r4, #4
    ec06:	459b      	cmp	fp, r3
    ec08:	d20c      	bcs.n	ec24 <quorem+0xb0>
    ec0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ec0e:	b94b      	cbnz	r3, ec24 <quorem+0xb0>
    ec10:	f1a4 0308 	sub.w	r3, r4, #8
    ec14:	e002      	b.n	ec1c <quorem+0xa8>
    ec16:	681a      	ldr	r2, [r3, #0]
    ec18:	3b04      	subs	r3, #4
    ec1a:	b91a      	cbnz	r2, ec24 <quorem+0xb0>
    ec1c:	459b      	cmp	fp, r3
    ec1e:	f108 38ff 	add.w	r8, r8, #4294967295
    ec22:	d3f8      	bcc.n	ec16 <quorem+0xa2>
    ec24:	f8c0 8010 	str.w	r8, [r0, #16]
    ec28:	4604      	mov	r4, r0
    ec2a:	f7ff fe39 	bl	e8a0 <__mcmp>
    ec2e:	2800      	cmp	r0, #0
    ec30:	db2e      	blt.n	ec90 <quorem+0x11c>
    ec32:	f109 0901 	add.w	r9, r9, #1
    ec36:	465d      	mov	r5, fp
    ec38:	2300      	movs	r3, #0
    ec3a:	f857 1b04 	ldr.w	r1, [r7], #4
    ec3e:	6828      	ldr	r0, [r5, #0]
    ec40:	b28a      	uxth	r2, r1
    ec42:	1a9a      	subs	r2, r3, r2
    ec44:	0c09      	lsrs	r1, r1, #16
    ec46:	fa12 f280 	uxtah	r2, r2, r0
    ec4a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    ec4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
    ec52:	b291      	uxth	r1, r2
    ec54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ec58:	45ba      	cmp	sl, r7
    ec5a:	f845 1b04 	str.w	r1, [r5], #4
    ec5e:	ea4f 4323 	mov.w	r3, r3, asr #16
    ec62:	d2ea      	bcs.n	ec3a <quorem+0xc6>
    ec64:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    ec68:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    ec6c:	b982      	cbnz	r2, ec90 <quorem+0x11c>
    ec6e:	1f1a      	subs	r2, r3, #4
    ec70:	4593      	cmp	fp, r2
    ec72:	d20b      	bcs.n	ec8c <quorem+0x118>
    ec74:	f853 2c04 	ldr.w	r2, [r3, #-4]
    ec78:	b942      	cbnz	r2, ec8c <quorem+0x118>
    ec7a:	3b08      	subs	r3, #8
    ec7c:	e002      	b.n	ec84 <quorem+0x110>
    ec7e:	681a      	ldr	r2, [r3, #0]
    ec80:	3b04      	subs	r3, #4
    ec82:	b91a      	cbnz	r2, ec8c <quorem+0x118>
    ec84:	459b      	cmp	fp, r3
    ec86:	f108 38ff 	add.w	r8, r8, #4294967295
    ec8a:	d3f8      	bcc.n	ec7e <quorem+0x10a>
    ec8c:	f8c4 8010 	str.w	r8, [r4, #16]
    ec90:	4648      	mov	r0, r9
    ec92:	b003      	add	sp, #12
    ec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec98:	2000      	movs	r0, #0
    ec9a:	4770      	bx	lr
    ec9c:	0000      	movs	r0, r0
	...

0000eca0 <_dtoa_r>:
    eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eca4:	ec57 6b10 	vmov	r6, r7, d0
    eca8:	b093      	sub	sp, #76	; 0x4c
    ecaa:	6c05      	ldr	r5, [r0, #64]	; 0x40
    ecac:	9101      	str	r1, [sp, #4]
    ecae:	4604      	mov	r4, r0
    ecb0:	4690      	mov	r8, r2
    ecb2:	9304      	str	r3, [sp, #16]
    ecb4:	ee10 aa10 	vmov	sl, s0
    ecb8:	46bb      	mov	fp, r7
    ecba:	b14d      	cbz	r5, ecd0 <_dtoa_r+0x30>
    ecbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ecbe:	606a      	str	r2, [r5, #4]
    ecc0:	2301      	movs	r3, #1
    ecc2:	4093      	lsls	r3, r2
    ecc4:	60ab      	str	r3, [r5, #8]
    ecc6:	4629      	mov	r1, r5
    ecc8:	f7ff fc08 	bl	e4dc <_Bfree>
    eccc:	2300      	movs	r3, #0
    ecce:	6423      	str	r3, [r4, #64]	; 0x40
    ecd0:	f1bb 0f00 	cmp.w	fp, #0
    ecd4:	465e      	mov	r6, fp
    ecd6:	db34      	blt.n	ed42 <_dtoa_r+0xa2>
    ecd8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ecda:	2300      	movs	r3, #0
    ecdc:	6013      	str	r3, [r2, #0]
    ecde:	4bc4      	ldr	r3, [pc, #784]	; (eff0 <_dtoa_r+0x350>)
    ece0:	461a      	mov	r2, r3
    ece2:	4033      	ands	r3, r6
    ece4:	4293      	cmp	r3, r2
    ece6:	d015      	beq.n	ed14 <_dtoa_r+0x74>
    ece8:	ec4b ab17 	vmov	d7, sl, fp
    ecec:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ecf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ecf4:	e9cd ab02 	strd	sl, fp, [sp, #8]
    ecf8:	d12a      	bne.n	ed50 <_dtoa_r+0xb0>
    ecfa:	9a04      	ldr	r2, [sp, #16]
    ecfc:	2301      	movs	r3, #1
    ecfe:	6013      	str	r3, [r2, #0]
    ed00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ed02:	2b00      	cmp	r3, #0
    ed04:	f000 80b7 	beq.w	ee76 <_dtoa_r+0x1d6>
    ed08:	48ba      	ldr	r0, [pc, #744]	; (eff4 <_dtoa_r+0x354>)
    ed0a:	6018      	str	r0, [r3, #0]
    ed0c:	3801      	subs	r0, #1
    ed0e:	b013      	add	sp, #76	; 0x4c
    ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed14:	9a04      	ldr	r2, [sp, #16]
    ed16:	f242 730f 	movw	r3, #9999	; 0x270f
    ed1a:	6013      	str	r3, [r2, #0]
    ed1c:	f1ba 0f00 	cmp.w	sl, #0
    ed20:	f000 8092 	beq.w	ee48 <_dtoa_r+0x1a8>
    ed24:	48b4      	ldr	r0, [pc, #720]	; (eff8 <_dtoa_r+0x358>)
    ed26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d0f0      	beq.n	ed0e <_dtoa_r+0x6e>
    ed2c:	78c3      	ldrb	r3, [r0, #3]
    ed2e:	2b00      	cmp	r3, #0
    ed30:	f000 80a3 	beq.w	ee7a <_dtoa_r+0x1da>
    ed34:	f100 0308 	add.w	r3, r0, #8
    ed38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    ed3a:	6013      	str	r3, [r2, #0]
    ed3c:	b013      	add	sp, #76	; 0x4c
    ed3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ed44:	2301      	movs	r3, #1
    ed46:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    ed4a:	6013      	str	r3, [r2, #0]
    ed4c:	46b3      	mov	fp, r6
    ed4e:	e7c6      	b.n	ecde <_dtoa_r+0x3e>
    ed50:	a911      	add	r1, sp, #68	; 0x44
    ed52:	aa10      	add	r2, sp, #64	; 0x40
    ed54:	ed9d 0b02 	vldr	d0, [sp, #8]
    ed58:	4620      	mov	r0, r4
    ed5a:	f7ff fe4d 	bl	e9f8 <__d2b>
    ed5e:	0d31      	lsrs	r1, r6, #20
    ed60:	9007      	str	r0, [sp, #28]
    ed62:	d17a      	bne.n	ee5a <_dtoa_r+0x1ba>
    ed64:	9810      	ldr	r0, [sp, #64]	; 0x40
    ed66:	9911      	ldr	r1, [sp, #68]	; 0x44
    ed68:	4401      	add	r1, r0
    ed6a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    ed6e:	2b20      	cmp	r3, #32
    ed70:	f340 8241 	ble.w	f1f6 <_dtoa_r+0x556>
    ed74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    ed78:	f201 4212 	addw	r2, r1, #1042	; 0x412
    ed7c:	409e      	lsls	r6, r3
    ed7e:	fa2a f302 	lsr.w	r3, sl, r2
    ed82:	4333      	orrs	r3, r6
    ed84:	ee07 3a90 	vmov	s15, r3
    ed88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    ed8c:	2501      	movs	r5, #1
    ed8e:	ec53 2b17 	vmov	r2, r3, d7
    ed92:	3901      	subs	r1, #1
    ed94:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    ed98:	950a      	str	r5, [sp, #40]	; 0x28
    ed9a:	ec43 2b17 	vmov	d7, r2, r3
    ed9e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    eda2:	ed9f 4b8d 	vldr	d4, [pc, #564]	; efd8 <_dtoa_r+0x338>
    eda6:	ee37 6b46 	vsub.f64	d6, d7, d6
    edaa:	ed9f 7b8d 	vldr	d7, [pc, #564]	; efe0 <_dtoa_r+0x340>
    edae:	ed9f 5b8e 	vldr	d5, [pc, #568]	; efe8 <_dtoa_r+0x348>
    edb2:	eea6 7b04 	vfma.f64	d7, d6, d4
    edb6:	ee06 1a90 	vmov	s13, r1
    edba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    edbe:	eea6 7b05 	vfma.f64	d7, d6, d5
    edc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    edc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    edca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edce:	edcd 6a02 	vstr	s13, [sp, #8]
    edd2:	f100 811c 	bmi.w	f00e <_dtoa_r+0x36e>
    edd6:	9d02      	ldr	r5, [sp, #8]
    edd8:	2d16      	cmp	r5, #22
    edda:	f200 8115 	bhi.w	f008 <_dtoa_r+0x368>
    edde:	4b87      	ldr	r3, [pc, #540]	; (effc <_dtoa_r+0x35c>)
    ede0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    ede4:	ed93 7b00 	vldr	d7, [r3]
    ede8:	ec4b ab16 	vmov	d6, sl, fp
    edec:	eeb4 7bc6 	vcmpe.f64	d7, d6
    edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edf4:	f340 8206 	ble.w	f204 <_dtoa_r+0x564>
    edf8:	1e6b      	subs	r3, r5, #1
    edfa:	9302      	str	r3, [sp, #8]
    edfc:	2300      	movs	r3, #0
    edfe:	930c      	str	r3, [sp, #48]	; 0x30
    ee00:	1a41      	subs	r1, r0, r1
    ee02:	f1b1 0901 	subs.w	r9, r1, #1
    ee06:	f100 8117 	bmi.w	f038 <_dtoa_r+0x398>
    ee0a:	2300      	movs	r3, #0
    ee0c:	9306      	str	r3, [sp, #24]
    ee0e:	9b02      	ldr	r3, [sp, #8]
    ee10:	2b00      	cmp	r3, #0
    ee12:	f2c0 8108 	blt.w	f026 <_dtoa_r+0x386>
    ee16:	4499      	add	r9, r3
    ee18:	930b      	str	r3, [sp, #44]	; 0x2c
    ee1a:	2300      	movs	r3, #0
    ee1c:	9305      	str	r3, [sp, #20]
    ee1e:	9b01      	ldr	r3, [sp, #4]
    ee20:	2b09      	cmp	r3, #9
    ee22:	d82c      	bhi.n	ee7e <_dtoa_r+0x1de>
    ee24:	2b05      	cmp	r3, #5
    ee26:	f340 855f 	ble.w	f8e8 <_dtoa_r+0xc48>
    ee2a:	3b04      	subs	r3, #4
    ee2c:	9301      	str	r3, [sp, #4]
    ee2e:	2300      	movs	r3, #0
    ee30:	930e      	str	r3, [sp, #56]	; 0x38
    ee32:	9b01      	ldr	r3, [sp, #4]
    ee34:	3b02      	subs	r3, #2
    ee36:	2b03      	cmp	r3, #3
    ee38:	f200 855f 	bhi.w	f8fa <_dtoa_r+0xc5a>
    ee3c:	e8df f013 	tbh	[pc, r3, lsl #1]
    ee40:	01e502a9 	.word	0x01e502a9
    ee44:	03c802b5 	.word	0x03c802b5
    ee48:	4b6b      	ldr	r3, [pc, #428]	; (eff8 <_dtoa_r+0x358>)
    ee4a:	4a6d      	ldr	r2, [pc, #436]	; (f000 <_dtoa_r+0x360>)
    ee4c:	f3c6 0013 	ubfx	r0, r6, #0, #20
    ee50:	2800      	cmp	r0, #0
    ee52:	bf14      	ite	ne
    ee54:	4618      	movne	r0, r3
    ee56:	4610      	moveq	r0, r2
    ee58:	e765      	b.n	ed26 <_dtoa_r+0x86>
    ee5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ee5e:	f3c3 0013 	ubfx	r0, r3, #0, #20
    ee62:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    ee66:	2500      	movs	r5, #0
    ee68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    ee6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ee70:	9810      	ldr	r0, [sp, #64]	; 0x40
    ee72:	950a      	str	r5, [sp, #40]	; 0x28
    ee74:	e791      	b.n	ed9a <_dtoa_r+0xfa>
    ee76:	4863      	ldr	r0, [pc, #396]	; (f004 <_dtoa_r+0x364>)
    ee78:	e749      	b.n	ed0e <_dtoa_r+0x6e>
    ee7a:	1cc3      	adds	r3, r0, #3
    ee7c:	e75c      	b.n	ed38 <_dtoa_r+0x98>
    ee7e:	2100      	movs	r1, #0
    ee80:	6461      	str	r1, [r4, #68]	; 0x44
    ee82:	4620      	mov	r0, r4
    ee84:	4688      	mov	r8, r1
    ee86:	9101      	str	r1, [sp, #4]
    ee88:	f7ff fb02 	bl	e490 <_Balloc>
    ee8c:	f04f 37ff 	mov.w	r7, #4294967295
    ee90:	2301      	movs	r3, #1
    ee92:	9008      	str	r0, [sp, #32]
    ee94:	6420      	str	r0, [r4, #64]	; 0x40
    ee96:	970d      	str	r7, [sp, #52]	; 0x34
    ee98:	9309      	str	r3, [sp, #36]	; 0x24
    ee9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	db7a      	blt.n	ef96 <_dtoa_r+0x2f6>
    eea0:	9a02      	ldr	r2, [sp, #8]
    eea2:	2a0e      	cmp	r2, #14
    eea4:	dc77      	bgt.n	ef96 <_dtoa_r+0x2f6>
    eea6:	4b55      	ldr	r3, [pc, #340]	; (effc <_dtoa_r+0x35c>)
    eea8:	f1b8 0f00 	cmp.w	r8, #0
    eeac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    eeb0:	ed93 4b00 	vldr	d4, [r3]
    eeb4:	f2c0 8284 	blt.w	f3c0 <_dtoa_r+0x720>
    eeb8:	eeb1 2b44 	vneg.f64	d2, d4
    eebc:	ec4b ab17 	vmov	d7, sl, fp
    eec0:	ee87 6b04 	vdiv.f64	d6, d7, d4
    eec4:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    eec8:	9a08      	ldr	r2, [sp, #32]
    eeca:	ee16 3a10 	vmov	r3, s12
    eece:	2f01      	cmp	r7, #1
    eed0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    eed4:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    eed8:	f102 0b01 	add.w	fp, r2, #1
    eedc:	7013      	strb	r3, [r2, #0]
    eede:	eea2 7b05 	vfma.f64	d7, d2, d5
    eee2:	d022      	beq.n	ef2a <_dtoa_r+0x28a>
    eee4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    eee8:	ee27 7b03 	vmul.f64	d7, d7, d3
    eeec:	eeb5 7b40 	vcmp.f64	d7, #0.0
    eef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eef4:	d03a      	beq.n	ef6c <_dtoa_r+0x2cc>
    eef6:	9a08      	ldr	r2, [sp, #32]
    eef8:	e006      	b.n	ef08 <_dtoa_r+0x268>
    eefa:	ee27 7b03 	vmul.f64	d7, d7, d3
    eefe:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ef02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef06:	d031      	beq.n	ef6c <_dtoa_r+0x2cc>
    ef08:	ee87 6b04 	vdiv.f64	d6, d7, d4
    ef0c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    ef10:	ee16 3a10 	vmov	r3, s12
    ef14:	3330      	adds	r3, #48	; 0x30
    ef16:	f80b 3b01 	strb.w	r3, [fp], #1
    ef1a:	ebc2 030b 	rsb	r3, r2, fp
    ef1e:	42bb      	cmp	r3, r7
    ef20:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    ef24:	eea2 7b05 	vfma.f64	d7, d2, d5
    ef28:	d1e7      	bne.n	eefa <_dtoa_r+0x25a>
    ef2a:	ee37 7b07 	vadd.f64	d7, d7, d7
    ef2e:	eeb4 4bc7 	vcmpe.f64	d4, d7
    ef32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef36:	d408      	bmi.n	ef4a <_dtoa_r+0x2aa>
    ef38:	eeb4 4b47 	vcmp.f64	d4, d7
    ef3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef40:	d114      	bne.n	ef6c <_dtoa_r+0x2cc>
    ef42:	ee16 3a10 	vmov	r3, s12
    ef46:	07db      	lsls	r3, r3, #31
    ef48:	d510      	bpl.n	ef6c <_dtoa_r+0x2cc>
    ef4a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    ef4e:	9a08      	ldr	r2, [sp, #32]
    ef50:	f10b 33ff 	add.w	r3, fp, #4294967295
    ef54:	e004      	b.n	ef60 <_dtoa_r+0x2c0>
    ef56:	429a      	cmp	r2, r3
    ef58:	f000 83e5 	beq.w	f726 <_dtoa_r+0xa86>
    ef5c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    ef60:	2839      	cmp	r0, #57	; 0x39
    ef62:	f103 0b01 	add.w	fp, r3, #1
    ef66:	d0f6      	beq.n	ef56 <_dtoa_r+0x2b6>
    ef68:	3001      	adds	r0, #1
    ef6a:	7018      	strb	r0, [r3, #0]
    ef6c:	9907      	ldr	r1, [sp, #28]
    ef6e:	4620      	mov	r0, r4
    ef70:	f7ff fab4 	bl	e4dc <_Bfree>
    ef74:	2200      	movs	r2, #0
    ef76:	9b02      	ldr	r3, [sp, #8]
    ef78:	f88b 2000 	strb.w	r2, [fp]
    ef7c:	9a04      	ldr	r2, [sp, #16]
    ef7e:	3301      	adds	r3, #1
    ef80:	6013      	str	r3, [r2, #0]
    ef82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ef84:	2b00      	cmp	r3, #0
    ef86:	f000 8366 	beq.w	f656 <_dtoa_r+0x9b6>
    ef8a:	9808      	ldr	r0, [sp, #32]
    ef8c:	f8c3 b000 	str.w	fp, [r3]
    ef90:	b013      	add	sp, #76	; 0x4c
    ef92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef96:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef98:	2a00      	cmp	r2, #0
    ef9a:	d053      	beq.n	f044 <_dtoa_r+0x3a4>
    ef9c:	9a01      	ldr	r2, [sp, #4]
    ef9e:	2a01      	cmp	r2, #1
    efa0:	f340 822e 	ble.w	f400 <_dtoa_r+0x760>
    efa4:	9905      	ldr	r1, [sp, #20]
    efa6:	1e7a      	subs	r2, r7, #1
    efa8:	4291      	cmp	r1, r2
    efaa:	f2c0 8357 	blt.w	f65c <_dtoa_r+0x9bc>
    efae:	1a8b      	subs	r3, r1, r2
    efb0:	930e      	str	r3, [sp, #56]	; 0x38
    efb2:	2f00      	cmp	r7, #0
    efb4:	9b06      	ldr	r3, [sp, #24]
    efb6:	f2c0 8424 	blt.w	f802 <_dtoa_r+0xb62>
    efba:	930a      	str	r3, [sp, #40]	; 0x28
    efbc:	463b      	mov	r3, r7
    efbe:	9a06      	ldr	r2, [sp, #24]
    efc0:	2101      	movs	r1, #1
    efc2:	441a      	add	r2, r3
    efc4:	4620      	mov	r0, r4
    efc6:	9206      	str	r2, [sp, #24]
    efc8:	4499      	add	r9, r3
    efca:	f7ff fb1f 	bl	e60c <__i2b>
    efce:	4606      	mov	r6, r0
    efd0:	e03d      	b.n	f04e <_dtoa_r+0x3ae>
    efd2:	bf00      	nop
    efd4:	f3af 8000 	nop.w
    efd8:	636f4361 	.word	0x636f4361
    efdc:	3fd287a7 	.word	0x3fd287a7
    efe0:	8b60c8b3 	.word	0x8b60c8b3
    efe4:	3fc68a28 	.word	0x3fc68a28
    efe8:	509f79fb 	.word	0x509f79fb
    efec:	3fd34413 	.word	0x3fd34413
    eff0:	7ff00000 	.word	0x7ff00000
    eff4:	20001879 	.word	0x20001879
    eff8:	20001ee8 	.word	0x20001ee8
    effc:	20001de0 	.word	0x20001de0
    f000:	20001edc 	.word	0x20001edc
    f004:	20001878 	.word	0x20001878
    f008:	2301      	movs	r3, #1
    f00a:	930c      	str	r3, [sp, #48]	; 0x30
    f00c:	e6f8      	b.n	ee00 <_dtoa_r+0x160>
    f00e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f012:	eeb4 7b46 	vcmp.f64	d7, d6
    f016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f01a:	f43f aedc 	beq.w	edd6 <_dtoa_r+0x136>
    f01e:	9b02      	ldr	r3, [sp, #8]
    f020:	3b01      	subs	r3, #1
    f022:	9302      	str	r3, [sp, #8]
    f024:	e6d7      	b.n	edd6 <_dtoa_r+0x136>
    f026:	9a06      	ldr	r2, [sp, #24]
    f028:	9b02      	ldr	r3, [sp, #8]
    f02a:	1ad2      	subs	r2, r2, r3
    f02c:	425b      	negs	r3, r3
    f02e:	9305      	str	r3, [sp, #20]
    f030:	2300      	movs	r3, #0
    f032:	9206      	str	r2, [sp, #24]
    f034:	930b      	str	r3, [sp, #44]	; 0x2c
    f036:	e6f2      	b.n	ee1e <_dtoa_r+0x17e>
    f038:	f1c9 0300 	rsb	r3, r9, #0
    f03c:	9306      	str	r3, [sp, #24]
    f03e:	f04f 0900 	mov.w	r9, #0
    f042:	e6e4      	b.n	ee0e <_dtoa_r+0x16e>
    f044:	9b05      	ldr	r3, [sp, #20]
    f046:	930e      	str	r3, [sp, #56]	; 0x38
    f048:	9e09      	ldr	r6, [sp, #36]	; 0x24
    f04a:	9b06      	ldr	r3, [sp, #24]
    f04c:	930a      	str	r3, [sp, #40]	; 0x28
    f04e:	990a      	ldr	r1, [sp, #40]	; 0x28
    f050:	460b      	mov	r3, r1
    f052:	b161      	cbz	r1, f06e <_dtoa_r+0x3ce>
    f054:	f1b9 0f00 	cmp.w	r9, #0
    f058:	dd09      	ble.n	f06e <_dtoa_r+0x3ce>
    f05a:	4549      	cmp	r1, r9
    f05c:	9a06      	ldr	r2, [sp, #24]
    f05e:	bfa8      	it	ge
    f060:	464b      	movge	r3, r9
    f062:	1ad2      	subs	r2, r2, r3
    f064:	9206      	str	r2, [sp, #24]
    f066:	1aca      	subs	r2, r1, r3
    f068:	920a      	str	r2, [sp, #40]	; 0x28
    f06a:	ebc3 0909 	rsb	r9, r3, r9
    f06e:	9b05      	ldr	r3, [sp, #20]
    f070:	2b00      	cmp	r3, #0
    f072:	f340 8280 	ble.w	f576 <_dtoa_r+0x8d6>
    f076:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f078:	2a00      	cmp	r2, #0
    f07a:	f000 819a 	beq.w	f3b2 <_dtoa_r+0x712>
    f07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f080:	2a00      	cmp	r2, #0
    f082:	f000 8196 	beq.w	f3b2 <_dtoa_r+0x712>
    f086:	4631      	mov	r1, r6
    f088:	4620      	mov	r0, r4
    f08a:	f7ff fb61 	bl	e750 <__pow5mult>
    f08e:	9a07      	ldr	r2, [sp, #28]
    f090:	4601      	mov	r1, r0
    f092:	4606      	mov	r6, r0
    f094:	4620      	mov	r0, r4
    f096:	f7ff fac3 	bl	e620 <__multiply>
    f09a:	9907      	ldr	r1, [sp, #28]
    f09c:	4605      	mov	r5, r0
    f09e:	4620      	mov	r0, r4
    f0a0:	f7ff fa1c 	bl	e4dc <_Bfree>
    f0a4:	9b05      	ldr	r3, [sp, #20]
    f0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f0a8:	1a9b      	subs	r3, r3, r2
    f0aa:	9305      	str	r3, [sp, #20]
    f0ac:	f040 8180 	bne.w	f3b0 <_dtoa_r+0x710>
    f0b0:	2101      	movs	r1, #1
    f0b2:	4620      	mov	r0, r4
    f0b4:	f7ff faaa 	bl	e60c <__i2b>
    f0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0ba:	9005      	str	r0, [sp, #20]
    f0bc:	2b00      	cmp	r3, #0
    f0be:	f000 81ac 	beq.w	f41a <_dtoa_r+0x77a>
    f0c2:	4601      	mov	r1, r0
    f0c4:	461a      	mov	r2, r3
    f0c6:	4620      	mov	r0, r4
    f0c8:	f7ff fb42 	bl	e750 <__pow5mult>
    f0cc:	9b01      	ldr	r3, [sp, #4]
    f0ce:	9005      	str	r0, [sp, #20]
    f0d0:	2b01      	cmp	r3, #1
    f0d2:	f340 8280 	ble.w	f5d6 <_dtoa_r+0x936>
    f0d6:	2300      	movs	r3, #0
    f0d8:	9307      	str	r3, [sp, #28]
    f0da:	9a05      	ldr	r2, [sp, #20]
    f0dc:	6913      	ldr	r3, [r2, #16]
    f0de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f0e2:	6918      	ldr	r0, [r3, #16]
    f0e4:	f7ff fa44 	bl	e570 <__hi0bits>
    f0e8:	f1c0 0020 	rsb	r0, r0, #32
    f0ec:	4448      	add	r0, r9
    f0ee:	f010 001f 	ands.w	r0, r0, #31
    f0f2:	f000 8190 	beq.w	f416 <_dtoa_r+0x776>
    f0f6:	f1c0 0320 	rsb	r3, r0, #32
    f0fa:	2b04      	cmp	r3, #4
    f0fc:	f340 83f8 	ble.w	f8f0 <_dtoa_r+0xc50>
    f100:	f1c0 001c 	rsb	r0, r0, #28
    f104:	9b06      	ldr	r3, [sp, #24]
    f106:	4403      	add	r3, r0
    f108:	9306      	str	r3, [sp, #24]
    f10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f10c:	4403      	add	r3, r0
    f10e:	930a      	str	r3, [sp, #40]	; 0x28
    f110:	4481      	add	r9, r0
    f112:	9b06      	ldr	r3, [sp, #24]
    f114:	2b00      	cmp	r3, #0
    f116:	dd05      	ble.n	f124 <_dtoa_r+0x484>
    f118:	4629      	mov	r1, r5
    f11a:	461a      	mov	r2, r3
    f11c:	4620      	mov	r0, r4
    f11e:	f7ff fb67 	bl	e7f0 <__lshift>
    f122:	4605      	mov	r5, r0
    f124:	f1b9 0f00 	cmp.w	r9, #0
    f128:	dd05      	ble.n	f136 <_dtoa_r+0x496>
    f12a:	464a      	mov	r2, r9
    f12c:	9905      	ldr	r1, [sp, #20]
    f12e:	4620      	mov	r0, r4
    f130:	f7ff fb5e 	bl	e7f0 <__lshift>
    f134:	9005      	str	r0, [sp, #20]
    f136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f138:	2b00      	cmp	r3, #0
    f13a:	f040 8201 	bne.w	f540 <_dtoa_r+0x8a0>
    f13e:	2f00      	cmp	r7, #0
    f140:	f340 8220 	ble.w	f584 <_dtoa_r+0x8e4>
    f144:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f146:	2b00      	cmp	r3, #0
    f148:	f040 817b 	bne.w	f442 <_dtoa_r+0x7a2>
    f14c:	f8dd b020 	ldr.w	fp, [sp, #32]
    f150:	f8dd a014 	ldr.w	sl, [sp, #20]
    f154:	46d8      	mov	r8, fp
    f156:	e002      	b.n	f15e <_dtoa_r+0x4be>
    f158:	f7ff f9ca 	bl	e4f0 <__multadd>
    f15c:	4605      	mov	r5, r0
    f15e:	4651      	mov	r1, sl
    f160:	4628      	mov	r0, r5
    f162:	f7ff fd07 	bl	eb74 <quorem>
    f166:	f100 0930 	add.w	r9, r0, #48	; 0x30
    f16a:	f808 9b01 	strb.w	r9, [r8], #1
    f16e:	ebcb 0308 	rsb	r3, fp, r8
    f172:	42bb      	cmp	r3, r7
    f174:	f04f 020a 	mov.w	r2, #10
    f178:	f04f 0300 	mov.w	r3, #0
    f17c:	4629      	mov	r1, r5
    f17e:	4620      	mov	r0, r4
    f180:	dbea      	blt.n	f158 <_dtoa_r+0x4b8>
    f182:	9b08      	ldr	r3, [sp, #32]
    f184:	2f01      	cmp	r7, #1
    f186:	bfac      	ite	ge
    f188:	19db      	addge	r3, r3, r7
    f18a:	3301      	addlt	r3, #1
    f18c:	469b      	mov	fp, r3
    f18e:	f04f 0a00 	mov.w	sl, #0
    f192:	4629      	mov	r1, r5
    f194:	2201      	movs	r2, #1
    f196:	4620      	mov	r0, r4
    f198:	f7ff fb2a 	bl	e7f0 <__lshift>
    f19c:	9905      	ldr	r1, [sp, #20]
    f19e:	9007      	str	r0, [sp, #28]
    f1a0:	f7ff fb7e 	bl	e8a0 <__mcmp>
    f1a4:	2800      	cmp	r0, #0
    f1a6:	f340 828c 	ble.w	f6c2 <_dtoa_r+0xa22>
    f1aa:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    f1ae:	9908      	ldr	r1, [sp, #32]
    f1b0:	f10b 33ff 	add.w	r3, fp, #4294967295
    f1b4:	e004      	b.n	f1c0 <_dtoa_r+0x520>
    f1b6:	428b      	cmp	r3, r1
    f1b8:	f000 8203 	beq.w	f5c2 <_dtoa_r+0x922>
    f1bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    f1c0:	2a39      	cmp	r2, #57	; 0x39
    f1c2:	f103 0b01 	add.w	fp, r3, #1
    f1c6:	d0f6      	beq.n	f1b6 <_dtoa_r+0x516>
    f1c8:	3201      	adds	r2, #1
    f1ca:	701a      	strb	r2, [r3, #0]
    f1cc:	9905      	ldr	r1, [sp, #20]
    f1ce:	4620      	mov	r0, r4
    f1d0:	f7ff f984 	bl	e4dc <_Bfree>
    f1d4:	2e00      	cmp	r6, #0
    f1d6:	f43f aec9 	beq.w	ef6c <_dtoa_r+0x2cc>
    f1da:	f1ba 0f00 	cmp.w	sl, #0
    f1de:	d005      	beq.n	f1ec <_dtoa_r+0x54c>
    f1e0:	45b2      	cmp	sl, r6
    f1e2:	d003      	beq.n	f1ec <_dtoa_r+0x54c>
    f1e4:	4651      	mov	r1, sl
    f1e6:	4620      	mov	r0, r4
    f1e8:	f7ff f978 	bl	e4dc <_Bfree>
    f1ec:	4631      	mov	r1, r6
    f1ee:	4620      	mov	r0, r4
    f1f0:	f7ff f974 	bl	e4dc <_Bfree>
    f1f4:	e6ba      	b.n	ef6c <_dtoa_r+0x2cc>
    f1f6:	f1c3 0320 	rsb	r3, r3, #32
    f1fa:	fa0a f303 	lsl.w	r3, sl, r3
    f1fe:	ee07 3a90 	vmov	s15, r3
    f202:	e5c1      	b.n	ed88 <_dtoa_r+0xe8>
    f204:	2300      	movs	r3, #0
    f206:	930c      	str	r3, [sp, #48]	; 0x30
    f208:	e5fa      	b.n	ee00 <_dtoa_r+0x160>
    f20a:	2300      	movs	r3, #0
    f20c:	9309      	str	r3, [sp, #36]	; 0x24
    f20e:	9b02      	ldr	r3, [sp, #8]
    f210:	4443      	add	r3, r8
    f212:	1c5f      	adds	r7, r3, #1
    f214:	2f00      	cmp	r7, #0
    f216:	930d      	str	r3, [sp, #52]	; 0x34
    f218:	f340 822d 	ble.w	f676 <_dtoa_r+0x9d6>
    f21c:	463e      	mov	r6, r7
    f21e:	463d      	mov	r5, r7
    f220:	2100      	movs	r1, #0
    f222:	2e17      	cmp	r6, #23
    f224:	6461      	str	r1, [r4, #68]	; 0x44
    f226:	d90a      	bls.n	f23e <_dtoa_r+0x59e>
    f228:	2201      	movs	r2, #1
    f22a:	2304      	movs	r3, #4
    f22c:	005b      	lsls	r3, r3, #1
    f22e:	f103 0014 	add.w	r0, r3, #20
    f232:	42b0      	cmp	r0, r6
    f234:	4611      	mov	r1, r2
    f236:	f102 0201 	add.w	r2, r2, #1
    f23a:	d9f7      	bls.n	f22c <_dtoa_r+0x58c>
    f23c:	6461      	str	r1, [r4, #68]	; 0x44
    f23e:	4620      	mov	r0, r4
    f240:	f7ff f926 	bl	e490 <_Balloc>
    f244:	2d0e      	cmp	r5, #14
    f246:	9008      	str	r0, [sp, #32]
    f248:	6420      	str	r0, [r4, #64]	; 0x40
    f24a:	f63f ae26 	bhi.w	ee9a <_dtoa_r+0x1fa>
    f24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f250:	2b00      	cmp	r3, #0
    f252:	f43f ae22 	beq.w	ee9a <_dtoa_r+0x1fa>
    f256:	9902      	ldr	r1, [sp, #8]
    f258:	2900      	cmp	r1, #0
    f25a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    f25e:	f340 8241 	ble.w	f6e4 <_dtoa_r+0xa44>
    f262:	4bc6      	ldr	r3, [pc, #792]	; (f57c <_dtoa_r+0x8dc>)
    f264:	f001 020f 	and.w	r2, r1, #15
    f268:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f26c:	110b      	asrs	r3, r1, #4
    f26e:	06de      	lsls	r6, r3, #27
    f270:	ed92 6b00 	vldr	d6, [r2]
    f274:	f140 81fb 	bpl.w	f66e <_dtoa_r+0x9ce>
    f278:	4ac1      	ldr	r2, [pc, #772]	; (f580 <_dtoa_r+0x8e0>)
    f27a:	ed92 7b08 	vldr	d7, [r2, #32]
    f27e:	ec4b ab14 	vmov	d4, sl, fp
    f282:	f003 030f 	and.w	r3, r3, #15
    f286:	2103      	movs	r1, #3
    f288:	ee84 5b07 	vdiv.f64	d5, d4, d7
    f28c:	b15b      	cbz	r3, f2a6 <_dtoa_r+0x606>
    f28e:	4abc      	ldr	r2, [pc, #752]	; (f580 <_dtoa_r+0x8e0>)
    f290:	07dd      	lsls	r5, r3, #31
    f292:	d504      	bpl.n	f29e <_dtoa_r+0x5fe>
    f294:	ed92 7b00 	vldr	d7, [r2]
    f298:	3101      	adds	r1, #1
    f29a:	ee26 6b07 	vmul.f64	d6, d6, d7
    f29e:	105b      	asrs	r3, r3, #1
    f2a0:	f102 0208 	add.w	r2, r2, #8
    f2a4:	d1f4      	bne.n	f290 <_dtoa_r+0x5f0>
    f2a6:	ee85 4b06 	vdiv.f64	d4, d5, d6
    f2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2ac:	b13b      	cbz	r3, f2be <_dtoa_r+0x61e>
    f2ae:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    f2b2:	eeb4 4bc7 	vcmpe.f64	d4, d7
    f2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2ba:	f100 82b7 	bmi.w	f82c <_dtoa_r+0xb8c>
    f2be:	ee07 1a90 	vmov	s15, r1
    f2c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    f2c6:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f2ca:	eea6 7b04 	vfma.f64	d7, d6, d4
    f2ce:	ec53 2b17 	vmov	r2, r3, d7
    f2d2:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    f2d6:	2f00      	cmp	r7, #0
    f2d8:	f000 81a6 	beq.w	f628 <_dtoa_r+0x988>
    f2dc:	9e02      	ldr	r6, [sp, #8]
    f2de:	4639      	mov	r1, r7
    f2e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f2e2:	2800      	cmp	r0, #0
    f2e4:	f000 824d 	beq.w	f782 <_dtoa_r+0xae2>
    f2e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f2ec:	48a3      	ldr	r0, [pc, #652]	; (f57c <_dtoa_r+0x8dc>)
    f2ee:	9d08      	ldr	r5, [sp, #32]
    f2f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    f2f4:	ed10 6b02 	vldr	d6, [r0, #-8]
    f2f8:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    f2fc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    f300:	ee17 0a10 	vmov	r0, s14
    f304:	ec43 2b16 	vmov	d6, r2, r3
    f308:	3030      	adds	r0, #48	; 0x30
    f30a:	b2c0      	uxtb	r0, r0
    f30c:	ee35 5b46 	vsub.f64	d5, d5, d6
    f310:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    f314:	ee34 7b47 	vsub.f64	d7, d4, d7
    f318:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f320:	7028      	strb	r0, [r5, #0]
    f322:	f105 0b01 	add.w	fp, r5, #1
    f326:	dc32      	bgt.n	f38e <_dtoa_r+0x6ee>
    f328:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f32c:	ee33 6b47 	vsub.f64	d6, d3, d7
    f330:	eeb4 5bc6 	vcmpe.f64	d5, d6
    f334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f338:	f300 82ae 	bgt.w	f898 <_dtoa_r+0xbf8>
    f33c:	2901      	cmp	r1, #1
    f33e:	f340 81cd 	ble.w	f6dc <_dtoa_r+0xa3c>
    f342:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f346:	9b08      	ldr	r3, [sp, #32]
    f348:	4419      	add	r1, r3
    f34a:	e00a      	b.n	f362 <_dtoa_r+0x6c2>
    f34c:	ee33 6b47 	vsub.f64	d6, d3, d7
    f350:	eeb4 6bc5 	vcmpe.f64	d6, d5
    f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f358:	f100 829e 	bmi.w	f898 <_dtoa_r+0xbf8>
    f35c:	458b      	cmp	fp, r1
    f35e:	f000 81bd 	beq.w	f6dc <_dtoa_r+0xa3c>
    f362:	ee27 7b04 	vmul.f64	d7, d7, d4
    f366:	ee25 5b04 	vmul.f64	d5, d5, d4
    f36a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    f36e:	ee16 3a10 	vmov	r3, s12
    f372:	f103 0030 	add.w	r0, r3, #48	; 0x30
    f376:	b2c0      	uxtb	r0, r0
    f378:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    f37c:	ee37 7b46 	vsub.f64	d7, d7, d6
    f380:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f388:	f80b 0b01 	strb.w	r0, [fp], #1
    f38c:	d5de      	bpl.n	f34c <_dtoa_r+0x6ac>
    f38e:	9602      	str	r6, [sp, #8]
    f390:	e5ec      	b.n	ef6c <_dtoa_r+0x2cc>
    f392:	2300      	movs	r3, #0
    f394:	9309      	str	r3, [sp, #36]	; 0x24
    f396:	f1b8 0f00 	cmp.w	r8, #0
    f39a:	f340 8170 	ble.w	f67e <_dtoa_r+0x9de>
    f39e:	4646      	mov	r6, r8
    f3a0:	4645      	mov	r5, r8
    f3a2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    f3a6:	4647      	mov	r7, r8
    f3a8:	e73a      	b.n	f220 <_dtoa_r+0x580>
    f3aa:	2301      	movs	r3, #1
    f3ac:	9309      	str	r3, [sp, #36]	; 0x24
    f3ae:	e7f2      	b.n	f396 <_dtoa_r+0x6f6>
    f3b0:	9507      	str	r5, [sp, #28]
    f3b2:	9a05      	ldr	r2, [sp, #20]
    f3b4:	9907      	ldr	r1, [sp, #28]
    f3b6:	4620      	mov	r0, r4
    f3b8:	f7ff f9ca 	bl	e750 <__pow5mult>
    f3bc:	4605      	mov	r5, r0
    f3be:	e677      	b.n	f0b0 <_dtoa_r+0x410>
    f3c0:	2f00      	cmp	r7, #0
    f3c2:	f73f ad79 	bgt.w	eeb8 <_dtoa_r+0x218>
    f3c6:	f040 8142 	bne.w	f64e <_dtoa_r+0x9ae>
    f3ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f3ce:	ee24 4b07 	vmul.f64	d4, d4, d7
    f3d2:	ec4b ab17 	vmov	d7, sl, fp
    f3d6:	eeb4 4bc7 	vcmpe.f64	d4, d7
    f3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3de:	463e      	mov	r6, r7
    f3e0:	9705      	str	r7, [sp, #20]
    f3e2:	f2c0 80e5 	blt.w	f5b0 <_dtoa_r+0x910>
    f3e6:	ea6f 0308 	mvn.w	r3, r8
    f3ea:	f8dd b020 	ldr.w	fp, [sp, #32]
    f3ee:	9302      	str	r3, [sp, #8]
    f3f0:	9905      	ldr	r1, [sp, #20]
    f3f2:	4620      	mov	r0, r4
    f3f4:	f7ff f872 	bl	e4dc <_Bfree>
    f3f8:	2e00      	cmp	r6, #0
    f3fa:	f43f adb7 	beq.w	ef6c <_dtoa_r+0x2cc>
    f3fe:	e6f5      	b.n	f1ec <_dtoa_r+0x54c>
    f400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f402:	2a00      	cmp	r2, #0
    f404:	f000 8202 	beq.w	f80c <_dtoa_r+0xb6c>
    f408:	9a05      	ldr	r2, [sp, #20]
    f40a:	920e      	str	r2, [sp, #56]	; 0x38
    f40c:	9a06      	ldr	r2, [sp, #24]
    f40e:	920a      	str	r2, [sp, #40]	; 0x28
    f410:	f203 4333 	addw	r3, r3, #1075	; 0x433
    f414:	e5d3      	b.n	efbe <_dtoa_r+0x31e>
    f416:	201c      	movs	r0, #28
    f418:	e674      	b.n	f104 <_dtoa_r+0x464>
    f41a:	9b01      	ldr	r3, [sp, #4]
    f41c:	2b01      	cmp	r3, #1
    f41e:	f340 8240 	ble.w	f8a2 <_dtoa_r+0xc02>
    f422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f424:	9307      	str	r3, [sp, #28]
    f426:	2001      	movs	r0, #1
    f428:	e660      	b.n	f0ec <_dtoa_r+0x44c>
    f42a:	4631      	mov	r1, r6
    f42c:	2300      	movs	r3, #0
    f42e:	220a      	movs	r2, #10
    f430:	4620      	mov	r0, r4
    f432:	f7ff f85d 	bl	e4f0 <__multadd>
    f436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f438:	2b00      	cmp	r3, #0
    f43a:	4606      	mov	r6, r0
    f43c:	f340 824d 	ble.w	f8da <_dtoa_r+0xc3a>
    f440:	461f      	mov	r7, r3
    f442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f444:	2b00      	cmp	r3, #0
    f446:	dd05      	ble.n	f454 <_dtoa_r+0x7b4>
    f448:	4631      	mov	r1, r6
    f44a:	461a      	mov	r2, r3
    f44c:	4620      	mov	r0, r4
    f44e:	f7ff f9cf 	bl	e7f0 <__lshift>
    f452:	4606      	mov	r6, r0
    f454:	9b07      	ldr	r3, [sp, #28]
    f456:	2b00      	cmp	r3, #0
    f458:	f040 816e 	bne.w	f738 <_dtoa_r+0xa98>
    f45c:	46b0      	mov	r8, r6
    f45e:	9b08      	ldr	r3, [sp, #32]
    f460:	3f01      	subs	r7, #1
    f462:	19da      	adds	r2, r3, r7
    f464:	9209      	str	r2, [sp, #36]	; 0x24
    f466:	f00a 0201 	and.w	r2, sl, #1
    f46a:	920a      	str	r2, [sp, #40]	; 0x28
    f46c:	461f      	mov	r7, r3
    f46e:	f8dd b014 	ldr.w	fp, [sp, #20]
    f472:	4628      	mov	r0, r5
    f474:	4659      	mov	r1, fp
    f476:	f7ff fb7d 	bl	eb74 <quorem>
    f47a:	4631      	mov	r1, r6
    f47c:	4682      	mov	sl, r0
    f47e:	4628      	mov	r0, r5
    f480:	f7ff fa0e 	bl	e8a0 <__mcmp>
    f484:	4642      	mov	r2, r8
    f486:	4659      	mov	r1, fp
    f488:	4681      	mov	r9, r0
    f48a:	4620      	mov	r0, r4
    f48c:	f7ff fa2a 	bl	e8e4 <__mdiff>
    f490:	68c3      	ldr	r3, [r0, #12]
    f492:	4683      	mov	fp, r0
    f494:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    f498:	2b00      	cmp	r3, #0
    f49a:	d149      	bne.n	f530 <_dtoa_r+0x890>
    f49c:	4601      	mov	r1, r0
    f49e:	4628      	mov	r0, r5
    f4a0:	9207      	str	r2, [sp, #28]
    f4a2:	f7ff f9fd 	bl	e8a0 <__mcmp>
    f4a6:	4659      	mov	r1, fp
    f4a8:	9006      	str	r0, [sp, #24]
    f4aa:	4620      	mov	r0, r4
    f4ac:	f7ff f816 	bl	e4dc <_Bfree>
    f4b0:	9b06      	ldr	r3, [sp, #24]
    f4b2:	9a07      	ldr	r2, [sp, #28]
    f4b4:	b92b      	cbnz	r3, f4c2 <_dtoa_r+0x822>
    f4b6:	9901      	ldr	r1, [sp, #4]
    f4b8:	b919      	cbnz	r1, f4c2 <_dtoa_r+0x822>
    f4ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    f4bc:	2900      	cmp	r1, #0
    f4be:	f000 81f5 	beq.w	f8ac <_dtoa_r+0xc0c>
    f4c2:	f1b9 0f00 	cmp.w	r9, #0
    f4c6:	f2c0 80df 	blt.w	f688 <_dtoa_r+0x9e8>
    f4ca:	d105      	bne.n	f4d8 <_dtoa_r+0x838>
    f4cc:	9901      	ldr	r1, [sp, #4]
    f4ce:	b919      	cbnz	r1, f4d8 <_dtoa_r+0x838>
    f4d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f4d2:	2900      	cmp	r1, #0
    f4d4:	f000 80d8 	beq.w	f688 <_dtoa_r+0x9e8>
    f4d8:	2b00      	cmp	r3, #0
    f4da:	f300 8141 	bgt.w	f760 <_dtoa_r+0xac0>
    f4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4e0:	703a      	strb	r2, [r7, #0]
    f4e2:	f107 0901 	add.w	r9, r7, #1
    f4e6:	429f      	cmp	r7, r3
    f4e8:	46cb      	mov	fp, r9
    f4ea:	f000 8146 	beq.w	f77a <_dtoa_r+0xada>
    f4ee:	4629      	mov	r1, r5
    f4f0:	2300      	movs	r3, #0
    f4f2:	220a      	movs	r2, #10
    f4f4:	4620      	mov	r0, r4
    f4f6:	f7fe fffb 	bl	e4f0 <__multadd>
    f4fa:	4546      	cmp	r6, r8
    f4fc:	4605      	mov	r5, r0
    f4fe:	4631      	mov	r1, r6
    f500:	f04f 0300 	mov.w	r3, #0
    f504:	f04f 020a 	mov.w	r2, #10
    f508:	4620      	mov	r0, r4
    f50a:	d00b      	beq.n	f524 <_dtoa_r+0x884>
    f50c:	f7fe fff0 	bl	e4f0 <__multadd>
    f510:	4641      	mov	r1, r8
    f512:	4606      	mov	r6, r0
    f514:	2300      	movs	r3, #0
    f516:	220a      	movs	r2, #10
    f518:	4620      	mov	r0, r4
    f51a:	f7fe ffe9 	bl	e4f0 <__multadd>
    f51e:	464f      	mov	r7, r9
    f520:	4680      	mov	r8, r0
    f522:	e7a4      	b.n	f46e <_dtoa_r+0x7ce>
    f524:	f7fe ffe4 	bl	e4f0 <__multadd>
    f528:	464f      	mov	r7, r9
    f52a:	4606      	mov	r6, r0
    f52c:	4680      	mov	r8, r0
    f52e:	e79e      	b.n	f46e <_dtoa_r+0x7ce>
    f530:	4601      	mov	r1, r0
    f532:	4620      	mov	r0, r4
    f534:	9206      	str	r2, [sp, #24]
    f536:	f7fe ffd1 	bl	e4dc <_Bfree>
    f53a:	2301      	movs	r3, #1
    f53c:	9a06      	ldr	r2, [sp, #24]
    f53e:	e7c0      	b.n	f4c2 <_dtoa_r+0x822>
    f540:	9905      	ldr	r1, [sp, #20]
    f542:	4628      	mov	r0, r5
    f544:	f7ff f9ac 	bl	e8a0 <__mcmp>
    f548:	2800      	cmp	r0, #0
    f54a:	f6bf adf8 	bge.w	f13e <_dtoa_r+0x49e>
    f54e:	4629      	mov	r1, r5
    f550:	9d02      	ldr	r5, [sp, #8]
    f552:	2300      	movs	r3, #0
    f554:	3d01      	subs	r5, #1
    f556:	220a      	movs	r2, #10
    f558:	4620      	mov	r0, r4
    f55a:	9502      	str	r5, [sp, #8]
    f55c:	f7fe ffc8 	bl	e4f0 <__multadd>
    f560:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f562:	4605      	mov	r5, r0
    f564:	2b00      	cmp	r3, #0
    f566:	f47f af60 	bne.w	f42a <_dtoa_r+0x78a>
    f56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f56c:	2b00      	cmp	r3, #0
    f56e:	f340 81ad 	ble.w	f8cc <_dtoa_r+0xc2c>
    f572:	461f      	mov	r7, r3
    f574:	e5ea      	b.n	f14c <_dtoa_r+0x4ac>
    f576:	9d07      	ldr	r5, [sp, #28]
    f578:	e59a      	b.n	f0b0 <_dtoa_r+0x410>
    f57a:	bf00      	nop
    f57c:	20001de0 	.word	0x20001de0
    f580:	20001ea8 	.word	0x20001ea8
    f584:	9b01      	ldr	r3, [sp, #4]
    f586:	2b02      	cmp	r3, #2
    f588:	f77f addc 	ble.w	f144 <_dtoa_r+0x4a4>
    f58c:	2f00      	cmp	r7, #0
    f58e:	f040 8169 	bne.w	f864 <_dtoa_r+0xbc4>
    f592:	463b      	mov	r3, r7
    f594:	9905      	ldr	r1, [sp, #20]
    f596:	2205      	movs	r2, #5
    f598:	4620      	mov	r0, r4
    f59a:	f7fe ffa9 	bl	e4f0 <__multadd>
    f59e:	4601      	mov	r1, r0
    f5a0:	9005      	str	r0, [sp, #20]
    f5a2:	4628      	mov	r0, r5
    f5a4:	f7ff f97c 	bl	e8a0 <__mcmp>
    f5a8:	2800      	cmp	r0, #0
    f5aa:	9507      	str	r5, [sp, #28]
    f5ac:	f77f af1b 	ble.w	f3e6 <_dtoa_r+0x746>
    f5b0:	9a02      	ldr	r2, [sp, #8]
    f5b2:	9908      	ldr	r1, [sp, #32]
    f5b4:	2331      	movs	r3, #49	; 0x31
    f5b6:	3201      	adds	r2, #1
    f5b8:	9202      	str	r2, [sp, #8]
    f5ba:	700b      	strb	r3, [r1, #0]
    f5bc:	f101 0b01 	add.w	fp, r1, #1
    f5c0:	e716      	b.n	f3f0 <_dtoa_r+0x750>
    f5c2:	9a02      	ldr	r2, [sp, #8]
    f5c4:	3201      	adds	r2, #1
    f5c6:	9202      	str	r2, [sp, #8]
    f5c8:	9a08      	ldr	r2, [sp, #32]
    f5ca:	2331      	movs	r3, #49	; 0x31
    f5cc:	7013      	strb	r3, [r2, #0]
    f5ce:	e5fd      	b.n	f1cc <_dtoa_r+0x52c>
    f5d0:	2301      	movs	r3, #1
    f5d2:	9309      	str	r3, [sp, #36]	; 0x24
    f5d4:	e61b      	b.n	f20e <_dtoa_r+0x56e>
    f5d6:	f1ba 0f00 	cmp.w	sl, #0
    f5da:	f47f ad7c 	bne.w	f0d6 <_dtoa_r+0x436>
    f5de:	f3cb 0313 	ubfx	r3, fp, #0, #20
    f5e2:	2b00      	cmp	r3, #0
    f5e4:	f040 811b 	bne.w	f81e <_dtoa_r+0xb7e>
    f5e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    f5ec:	0d1b      	lsrs	r3, r3, #20
    f5ee:	051b      	lsls	r3, r3, #20
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	f000 8154 	beq.w	f89e <_dtoa_r+0xbfe>
    f5f6:	9b06      	ldr	r3, [sp, #24]
    f5f8:	3301      	adds	r3, #1
    f5fa:	9306      	str	r3, [sp, #24]
    f5fc:	2301      	movs	r3, #1
    f5fe:	f109 0901 	add.w	r9, r9, #1
    f602:	9307      	str	r3, [sp, #28]
    f604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f606:	2001      	movs	r0, #1
    f608:	2b00      	cmp	r3, #0
    f60a:	f43f ad6f 	beq.w	f0ec <_dtoa_r+0x44c>
    f60e:	e564      	b.n	f0da <_dtoa_r+0x43a>
    f610:	ee07 1a90 	vmov	s15, r1
    f614:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    f618:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f61c:	eea4 7b06 	vfma.f64	d7, d4, d6
    f620:	ec53 2b17 	vmov	r2, r3, d7
    f624:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    f628:	ec43 2b16 	vmov	d6, r2, r3
    f62c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f630:	ee34 7b47 	vsub.f64	d7, d4, d7
    f634:	eeb4 7bc6 	vcmpe.f64	d7, d6
    f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f63c:	f300 80dd 	bgt.w	f7fa <_dtoa_r+0xb5a>
    f640:	eeb1 6b46 	vneg.f64	d6, d6
    f644:	eeb4 7bc6 	vcmpe.f64	d7, d6
    f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f64c:	d546      	bpl.n	f6dc <_dtoa_r+0xa3c>
    f64e:	2300      	movs	r3, #0
    f650:	9305      	str	r3, [sp, #20]
    f652:	461e      	mov	r6, r3
    f654:	e6c7      	b.n	f3e6 <_dtoa_r+0x746>
    f656:	9808      	ldr	r0, [sp, #32]
    f658:	f7ff bb59 	b.w	ed0e <_dtoa_r+0x6e>
    f65c:	9b05      	ldr	r3, [sp, #20]
    f65e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f660:	9205      	str	r2, [sp, #20]
    f662:	1ad3      	subs	r3, r2, r3
    f664:	4419      	add	r1, r3
    f666:	2300      	movs	r3, #0
    f668:	910b      	str	r1, [sp, #44]	; 0x2c
    f66a:	930e      	str	r3, [sp, #56]	; 0x38
    f66c:	e4a1      	b.n	efb2 <_dtoa_r+0x312>
    f66e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    f672:	2102      	movs	r1, #2
    f674:	e60a      	b.n	f28c <_dtoa_r+0x5ec>
    f676:	463d      	mov	r5, r7
    f678:	2100      	movs	r1, #0
    f67a:	6461      	str	r1, [r4, #68]	; 0x44
    f67c:	e5df      	b.n	f23e <_dtoa_r+0x59e>
    f67e:	2501      	movs	r5, #1
    f680:	950d      	str	r5, [sp, #52]	; 0x34
    f682:	462f      	mov	r7, r5
    f684:	46a8      	mov	r8, r5
    f686:	e7f7      	b.n	f678 <_dtoa_r+0x9d8>
    f688:	2b00      	cmp	r3, #0
    f68a:	4691      	mov	r9, r2
    f68c:	dd11      	ble.n	f6b2 <_dtoa_r+0xa12>
    f68e:	4629      	mov	r1, r5
    f690:	2201      	movs	r2, #1
    f692:	4620      	mov	r0, r4
    f694:	f7ff f8ac 	bl	e7f0 <__lshift>
    f698:	9905      	ldr	r1, [sp, #20]
    f69a:	4605      	mov	r5, r0
    f69c:	f7ff f900 	bl	e8a0 <__mcmp>
    f6a0:	2800      	cmp	r0, #0
    f6a2:	f340 810c 	ble.w	f8be <_dtoa_r+0xc1e>
    f6a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    f6aa:	f000 80dd 	beq.w	f868 <_dtoa_r+0xbc8>
    f6ae:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    f6b2:	46b2      	mov	sl, r6
    f6b4:	f887 9000 	strb.w	r9, [r7]
    f6b8:	f107 0b01 	add.w	fp, r7, #1
    f6bc:	4646      	mov	r6, r8
    f6be:	9507      	str	r5, [sp, #28]
    f6c0:	e584      	b.n	f1cc <_dtoa_r+0x52c>
    f6c2:	d104      	bne.n	f6ce <_dtoa_r+0xa2e>
    f6c4:	f019 0f01 	tst.w	r9, #1
    f6c8:	d001      	beq.n	f6ce <_dtoa_r+0xa2e>
    f6ca:	e56e      	b.n	f1aa <_dtoa_r+0x50a>
    f6cc:	4693      	mov	fp, r2
    f6ce:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f6d2:	2b30      	cmp	r3, #48	; 0x30
    f6d4:	f10b 32ff 	add.w	r2, fp, #4294967295
    f6d8:	d0f8      	beq.n	f6cc <_dtoa_r+0xa2c>
    f6da:	e577      	b.n	f1cc <_dtoa_r+0x52c>
    f6dc:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    f6e0:	f7ff bbdb 	b.w	ee9a <_dtoa_r+0x1fa>
    f6e4:	9b02      	ldr	r3, [sp, #8]
    f6e6:	425b      	negs	r3, r3
    f6e8:	2b00      	cmp	r3, #0
    f6ea:	f000 809b 	beq.w	f824 <_dtoa_r+0xb84>
    f6ee:	4a8b      	ldr	r2, [pc, #556]	; (f91c <_dtoa_r+0xc7c>)
    f6f0:	f003 010f 	and.w	r1, r3, #15
    f6f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f6f8:	ed92 7b00 	vldr	d7, [r2]
    f6fc:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    f700:	111b      	asrs	r3, r3, #4
    f702:	ee26 4b07 	vmul.f64	d4, d6, d7
    f706:	f000 80e6 	beq.w	f8d6 <_dtoa_r+0xc36>
    f70a:	4a85      	ldr	r2, [pc, #532]	; (f920 <_dtoa_r+0xc80>)
    f70c:	2102      	movs	r1, #2
    f70e:	07d8      	lsls	r0, r3, #31
    f710:	d504      	bpl.n	f71c <_dtoa_r+0xa7c>
    f712:	ed92 7b00 	vldr	d7, [r2]
    f716:	3101      	adds	r1, #1
    f718:	ee24 4b07 	vmul.f64	d4, d4, d7
    f71c:	105b      	asrs	r3, r3, #1
    f71e:	f102 0208 	add.w	r2, r2, #8
    f722:	d1f4      	bne.n	f70e <_dtoa_r+0xa6e>
    f724:	e5c1      	b.n	f2aa <_dtoa_r+0x60a>
    f726:	9908      	ldr	r1, [sp, #32]
    f728:	2230      	movs	r2, #48	; 0x30
    f72a:	700a      	strb	r2, [r1, #0]
    f72c:	9a02      	ldr	r2, [sp, #8]
    f72e:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    f732:	3201      	adds	r2, #1
    f734:	9202      	str	r2, [sp, #8]
    f736:	e417      	b.n	ef68 <_dtoa_r+0x2c8>
    f738:	6871      	ldr	r1, [r6, #4]
    f73a:	4620      	mov	r0, r4
    f73c:	f7fe fea8 	bl	e490 <_Balloc>
    f740:	6933      	ldr	r3, [r6, #16]
    f742:	1c9a      	adds	r2, r3, #2
    f744:	4680      	mov	r8, r0
    f746:	0092      	lsls	r2, r2, #2
    f748:	f106 010c 	add.w	r1, r6, #12
    f74c:	300c      	adds	r0, #12
    f74e:	f7fa fe65 	bl	a41c <memcpy>
    f752:	4641      	mov	r1, r8
    f754:	2201      	movs	r2, #1
    f756:	4620      	mov	r0, r4
    f758:	f7ff f84a 	bl	e7f0 <__lshift>
    f75c:	4680      	mov	r8, r0
    f75e:	e67e      	b.n	f45e <_dtoa_r+0x7be>
    f760:	2a39      	cmp	r2, #57	; 0x39
    f762:	f000 8081 	beq.w	f868 <_dtoa_r+0xbc8>
    f766:	f102 0901 	add.w	r9, r2, #1
    f76a:	46b2      	mov	sl, r6
    f76c:	f887 9000 	strb.w	r9, [r7]
    f770:	f107 0b01 	add.w	fp, r7, #1
    f774:	4646      	mov	r6, r8
    f776:	9507      	str	r5, [sp, #28]
    f778:	e528      	b.n	f1cc <_dtoa_r+0x52c>
    f77a:	46b2      	mov	sl, r6
    f77c:	4691      	mov	r9, r2
    f77e:	4646      	mov	r6, r8
    f780:	e507      	b.n	f192 <_dtoa_r+0x4f2>
    f782:	4866      	ldr	r0, [pc, #408]	; (f91c <_dtoa_r+0xc7c>)
    f784:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    f788:	1e4d      	subs	r5, r1, #1
    f78a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    f78e:	ec43 2b17 	vmov	d7, r2, r3
    f792:	ed90 3b00 	vldr	d3, [r0]
    f796:	ee16 3a10 	vmov	r3, s12
    f79a:	ee23 3b07 	vmul.f64	d3, d3, d7
    f79e:	9808      	ldr	r0, [sp, #32]
    f7a0:	3330      	adds	r3, #48	; 0x30
    f7a2:	2901      	cmp	r1, #1
    f7a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    f7a8:	7003      	strb	r3, [r0, #0]
    f7aa:	f100 0b01 	add.w	fp, r0, #1
    f7ae:	ee34 7b46 	vsub.f64	d7, d4, d6
    f7b2:	d014      	beq.n	f7de <_dtoa_r+0xb3e>
    f7b4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    f7b8:	9b08      	ldr	r3, [sp, #32]
    f7ba:	4419      	add	r1, r3
    f7bc:	465b      	mov	r3, fp
    f7be:	ee27 7b05 	vmul.f64	d7, d7, d5
    f7c2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    f7c6:	ee16 2a10 	vmov	r2, s12
    f7ca:	3230      	adds	r2, #48	; 0x30
    f7cc:	f803 2b01 	strb.w	r2, [r3], #1
    f7d0:	4299      	cmp	r1, r3
    f7d2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    f7d6:	ee37 7b46 	vsub.f64	d7, d7, d6
    f7da:	d1f0      	bne.n	f7be <_dtoa_r+0xb1e>
    f7dc:	44ab      	add	fp, r5
    f7de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f7e2:	ee33 5b06 	vadd.f64	d5, d3, d6
    f7e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7ee:	d543      	bpl.n	f878 <_dtoa_r+0xbd8>
    f7f0:	9602      	str	r6, [sp, #8]
    f7f2:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    f7f6:	f7ff bbaa 	b.w	ef4e <_dtoa_r+0x2ae>
    f7fa:	2300      	movs	r3, #0
    f7fc:	9305      	str	r3, [sp, #20]
    f7fe:	461e      	mov	r6, r3
    f800:	e6d6      	b.n	f5b0 <_dtoa_r+0x910>
    f802:	1bdb      	subs	r3, r3, r7
    f804:	930a      	str	r3, [sp, #40]	; 0x28
    f806:	2300      	movs	r3, #0
    f808:	f7ff bbd9 	b.w	efbe <_dtoa_r+0x31e>
    f80c:	9a05      	ldr	r2, [sp, #20]
    f80e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f810:	920e      	str	r2, [sp, #56]	; 0x38
    f812:	9a06      	ldr	r2, [sp, #24]
    f814:	920a      	str	r2, [sp, #40]	; 0x28
    f816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    f81a:	f7ff bbd0 	b.w	efbe <_dtoa_r+0x31e>
    f81e:	2300      	movs	r3, #0
    f820:	9307      	str	r3, [sp, #28]
    f822:	e6ef      	b.n	f604 <_dtoa_r+0x964>
    f824:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    f828:	2102      	movs	r1, #2
    f82a:	e53e      	b.n	f2aa <_dtoa_r+0x60a>
    f82c:	2f00      	cmp	r7, #0
    f82e:	f43f aeef 	beq.w	f610 <_dtoa_r+0x970>
    f832:	980d      	ldr	r0, [sp, #52]	; 0x34
    f834:	2800      	cmp	r0, #0
    f836:	f77f af51 	ble.w	f6dc <_dtoa_r+0xa3c>
    f83a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    f83e:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f842:	3101      	adds	r1, #1
    f844:	ee06 1a90 	vmov	s13, r1
    f848:	ee24 4b05 	vmul.f64	d4, d4, d5
    f84c:	9b02      	ldr	r3, [sp, #8]
    f84e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f852:	1e5e      	subs	r6, r3, #1
    f854:	eea4 7b06 	vfma.f64	d7, d4, d6
    f858:	ec53 2b17 	vmov	r2, r3, d7
    f85c:	4601      	mov	r1, r0
    f85e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    f862:	e53d      	b.n	f2e0 <_dtoa_r+0x640>
    f864:	9507      	str	r5, [sp, #28]
    f866:	e5be      	b.n	f3e6 <_dtoa_r+0x746>
    f868:	2239      	movs	r2, #57	; 0x39
    f86a:	46b2      	mov	sl, r6
    f86c:	9507      	str	r5, [sp, #28]
    f86e:	4646      	mov	r6, r8
    f870:	703a      	strb	r2, [r7, #0]
    f872:	f107 0b01 	add.w	fp, r7, #1
    f876:	e49a      	b.n	f1ae <_dtoa_r+0x50e>
    f878:	ee36 6b43 	vsub.f64	d6, d6, d3
    f87c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f884:	dc01      	bgt.n	f88a <_dtoa_r+0xbea>
    f886:	e729      	b.n	f6dc <_dtoa_r+0xa3c>
    f888:	4693      	mov	fp, r2
    f88a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f88e:	2b30      	cmp	r3, #48	; 0x30
    f890:	f10b 32ff 	add.w	r2, fp, #4294967295
    f894:	d0f8      	beq.n	f888 <_dtoa_r+0xbe8>
    f896:	e57a      	b.n	f38e <_dtoa_r+0x6ee>
    f898:	9602      	str	r6, [sp, #8]
    f89a:	f7ff bb58 	b.w	ef4e <_dtoa_r+0x2ae>
    f89e:	9307      	str	r3, [sp, #28]
    f8a0:	e6b0      	b.n	f604 <_dtoa_r+0x964>
    f8a2:	f1ba 0f00 	cmp.w	sl, #0
    f8a6:	f47f adbc 	bne.w	f422 <_dtoa_r+0x782>
    f8aa:	e698      	b.n	f5de <_dtoa_r+0x93e>
    f8ac:	2a39      	cmp	r2, #57	; 0x39
    f8ae:	46cb      	mov	fp, r9
    f8b0:	4691      	mov	r9, r2
    f8b2:	d0d9      	beq.n	f868 <_dtoa_r+0xbc8>
    f8b4:	f1bb 0f00 	cmp.w	fp, #0
    f8b8:	f73f aef9 	bgt.w	f6ae <_dtoa_r+0xa0e>
    f8bc:	e6f9      	b.n	f6b2 <_dtoa_r+0xa12>
    f8be:	f47f aef8 	bne.w	f6b2 <_dtoa_r+0xa12>
    f8c2:	f019 0f01 	tst.w	r9, #1
    f8c6:	f43f aef4 	beq.w	f6b2 <_dtoa_r+0xa12>
    f8ca:	e6ec      	b.n	f6a6 <_dtoa_r+0xa06>
    f8cc:	9b01      	ldr	r3, [sp, #4]
    f8ce:	2b02      	cmp	r3, #2
    f8d0:	dc08      	bgt.n	f8e4 <_dtoa_r+0xc44>
    f8d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f8d4:	e43a      	b.n	f14c <_dtoa_r+0x4ac>
    f8d6:	2102      	movs	r1, #2
    f8d8:	e4e7      	b.n	f2aa <_dtoa_r+0x60a>
    f8da:	9b01      	ldr	r3, [sp, #4]
    f8dc:	2b02      	cmp	r3, #2
    f8de:	dc01      	bgt.n	f8e4 <_dtoa_r+0xc44>
    f8e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f8e2:	e5ae      	b.n	f442 <_dtoa_r+0x7a2>
    f8e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f8e6:	e651      	b.n	f58c <_dtoa_r+0x8ec>
    f8e8:	2301      	movs	r3, #1
    f8ea:	930e      	str	r3, [sp, #56]	; 0x38
    f8ec:	f7ff baa1 	b.w	ee32 <_dtoa_r+0x192>
    f8f0:	f43f ac0f 	beq.w	f112 <_dtoa_r+0x472>
    f8f4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f8f8:	e404      	b.n	f104 <_dtoa_r+0x464>
    f8fa:	2500      	movs	r5, #0
    f8fc:	6465      	str	r5, [r4, #68]	; 0x44
    f8fe:	4629      	mov	r1, r5
    f900:	4620      	mov	r0, r4
    f902:	f7fe fdc5 	bl	e490 <_Balloc>
    f906:	f04f 37ff 	mov.w	r7, #4294967295
    f90a:	2301      	movs	r3, #1
    f90c:	9008      	str	r0, [sp, #32]
    f90e:	46a8      	mov	r8, r5
    f910:	6420      	str	r0, [r4, #64]	; 0x40
    f912:	970d      	str	r7, [sp, #52]	; 0x34
    f914:	9309      	str	r3, [sp, #36]	; 0x24
    f916:	f7ff bac0 	b.w	ee9a <_dtoa_r+0x1fa>
    f91a:	bf00      	nop
    f91c:	20001de0 	.word	0x20001de0
    f920:	20001ea8 	.word	0x20001ea8
    f924:	00000000 	.word	0x00000000

0000f928 <_svfprintf_r>:
    f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f92c:	ed2d 8b06 	vpush	{d8-d10}
    f930:	b0b9      	sub	sp, #228	; 0xe4
    f932:	460c      	mov	r4, r1
    f934:	9103      	str	r1, [sp, #12]
    f936:	4692      	mov	sl, r2
    f938:	9309      	str	r3, [sp, #36]	; 0x24
    f93a:	9005      	str	r0, [sp, #20]
    f93c:	f7fe fd4a 	bl	e3d4 <_localeconv_r>
    f940:	6803      	ldr	r3, [r0, #0]
    f942:	9310      	str	r3, [sp, #64]	; 0x40
    f944:	4618      	mov	r0, r3
    f946:	f7fe f9bb 	bl	dcc0 <strlen>
    f94a:	89a3      	ldrh	r3, [r4, #12]
    f94c:	900f      	str	r0, [sp, #60]	; 0x3c
    f94e:	0619      	lsls	r1, r3, #24
    f950:	d503      	bpl.n	f95a <_svfprintf_r+0x32>
    f952:	6923      	ldr	r3, [r4, #16]
    f954:	2b00      	cmp	r3, #0
    f956:	f001 807d 	beq.w	10a54 <_svfprintf_r+0x112c>
    f95a:	2300      	movs	r3, #0
    f95c:	ed9f 8ba4 	vldr	d8, [pc, #656]	; fbf0 <_svfprintf_r+0x2c8>
    f960:	ed9f 9ba5 	vldr	d9, [pc, #660]	; fbf8 <_svfprintf_r+0x2d0>
    f964:	930d      	str	r3, [sp, #52]	; 0x34
    f966:	931d      	str	r3, [sp, #116]	; 0x74
    f968:	931c      	str	r3, [sp, #112]	; 0x70
    f96a:	9311      	str	r3, [sp, #68]	; 0x44
    f96c:	9306      	str	r3, [sp, #24]
    f96e:	ab28      	add	r3, sp, #160	; 0xa0
    f970:	931b      	str	r3, [sp, #108]	; 0x6c
    f972:	4699      	mov	r9, r3
    f974:	f89a 3000 	ldrb.w	r3, [sl]
    f978:	4654      	mov	r4, sl
    f97a:	b1eb      	cbz	r3, f9b8 <_svfprintf_r+0x90>
    f97c:	2b25      	cmp	r3, #37	; 0x25
    f97e:	d102      	bne.n	f986 <_svfprintf_r+0x5e>
    f980:	e01a      	b.n	f9b8 <_svfprintf_r+0x90>
    f982:	2b25      	cmp	r3, #37	; 0x25
    f984:	d003      	beq.n	f98e <_svfprintf_r+0x66>
    f986:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    f98a:	2b00      	cmp	r3, #0
    f98c:	d1f9      	bne.n	f982 <_svfprintf_r+0x5a>
    f98e:	ebca 0504 	rsb	r5, sl, r4
    f992:	b18d      	cbz	r5, f9b8 <_svfprintf_r+0x90>
    f994:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f996:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    f998:	f8c9 a000 	str.w	sl, [r9]
    f99c:	3301      	adds	r3, #1
    f99e:	442a      	add	r2, r5
    f9a0:	2b07      	cmp	r3, #7
    f9a2:	f8c9 5004 	str.w	r5, [r9, #4]
    f9a6:	921d      	str	r2, [sp, #116]	; 0x74
    f9a8:	931c      	str	r3, [sp, #112]	; 0x70
    f9aa:	f300 80a3 	bgt.w	faf4 <_svfprintf_r+0x1cc>
    f9ae:	f109 0908 	add.w	r9, r9, #8
    f9b2:	9b06      	ldr	r3, [sp, #24]
    f9b4:	442b      	add	r3, r5
    f9b6:	9306      	str	r3, [sp, #24]
    f9b8:	7823      	ldrb	r3, [r4, #0]
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	f000 80a3 	beq.w	fb06 <_svfprintf_r+0x1de>
    f9c0:	2300      	movs	r3, #0
    f9c2:	461a      	mov	r2, r3
    f9c4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    f9c8:	4619      	mov	r1, r3
    f9ca:	9307      	str	r3, [sp, #28]
    f9cc:	469b      	mov	fp, r3
    f9ce:	f04f 38ff 	mov.w	r8, #4294967295
    f9d2:	7863      	ldrb	r3, [r4, #1]
    f9d4:	f104 0a01 	add.w	sl, r4, #1
    f9d8:	4645      	mov	r5, r8
    f9da:	f10a 0a01 	add.w	sl, sl, #1
    f9de:	f1a3 0020 	sub.w	r0, r3, #32
    f9e2:	2858      	cmp	r0, #88	; 0x58
    f9e4:	f200 83f8 	bhi.w	101d8 <_svfprintf_r+0x8b0>
    f9e8:	e8df f010 	tbh	[pc, r0, lsl #1]
    f9ec:	03f60363 	.word	0x03f60363
    f9f0:	036b03f6 	.word	0x036b03f6
    f9f4:	03f603f6 	.word	0x03f603f6
    f9f8:	03f603f6 	.word	0x03f603f6
    f9fc:	03f603f6 	.word	0x03f603f6
    fa00:	037e0370 	.word	0x037e0370
    fa04:	005d03f6 	.word	0x005d03f6
    fa08:	03f600df 	.word	0x03f600df
    fa0c:	010c00fb 	.word	0x010c00fb
    fa10:	010c010c 	.word	0x010c010c
    fa14:	010c010c 	.word	0x010c010c
    fa18:	010c010c 	.word	0x010c010c
    fa1c:	010c010c 	.word	0x010c010c
    fa20:	03f603f6 	.word	0x03f603f6
    fa24:	03f603f6 	.word	0x03f603f6
    fa28:	03f603f6 	.word	0x03f603f6
    fa2c:	03f603f6 	.word	0x03f603f6
    fa30:	03f603f6 	.word	0x03f603f6
    fa34:	015e011c 	.word	0x015e011c
    fa38:	015e03f6 	.word	0x015e03f6
    fa3c:	03f603f6 	.word	0x03f603f6
    fa40:	03f603f6 	.word	0x03f603f6
    fa44:	03f602a1 	.word	0x03f602a1
    fa48:	02a603f6 	.word	0x02a603f6
    fa4c:	03f603f6 	.word	0x03f603f6
    fa50:	03f603f6 	.word	0x03f603f6
    fa54:	02d803f6 	.word	0x02d803f6
    fa58:	03f603f6 	.word	0x03f603f6
    fa5c:	03f60305 	.word	0x03f60305
    fa60:	03f603f6 	.word	0x03f603f6
    fa64:	03f603f6 	.word	0x03f603f6
    fa68:	03f603f6 	.word	0x03f603f6
    fa6c:	03f603f6 	.word	0x03f603f6
    fa70:	034303f6 	.word	0x034303f6
    fa74:	015e0356 	.word	0x015e0356
    fa78:	015e015e 	.word	0x015e015e
    fa7c:	0356035e 	.word	0x0356035e
    fa80:	03f603f6 	.word	0x03f603f6
    fa84:	03f603a4 	.word	0x03f603a4
    fa88:	00a203b1 	.word	0x00a203b1
    fa8c:	03c30062 	.word	0x03c30062
    fa90:	03c803f6 	.word	0x03c803f6
    fa94:	038303f6 	.word	0x038303f6
    fa98:	03f603f6 	.word	0x03f603f6
    fa9c:	038b      	.short	0x038b
    fa9e:	9807      	ldr	r0, [sp, #28]
    faa0:	9309      	str	r3, [sp, #36]	; 0x24
    faa2:	4240      	negs	r0, r0
    faa4:	9007      	str	r0, [sp, #28]
    faa6:	f04b 0b04 	orr.w	fp, fp, #4
    faaa:	f89a 3000 	ldrb.w	r3, [sl]
    faae:	e794      	b.n	f9da <_svfprintf_r+0xb2>
    fab0:	46a8      	mov	r8, r5
    fab2:	9809      	ldr	r0, [sp, #36]	; 0x24
    fab4:	2100      	movs	r1, #0
    fab6:	2330      	movs	r3, #48	; 0x30
    fab8:	2278      	movs	r2, #120	; 0x78
    faba:	4588      	cmp	r8, r1
    fabc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    fac0:	6804      	ldr	r4, [r0, #0]
    fac2:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    fac6:	f100 0704 	add.w	r7, r0, #4
    faca:	f04f 0500 	mov.w	r5, #0
    face:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    fad2:	f04b 0302 	orr.w	r3, fp, #2
    fad6:	f2c0 839c 	blt.w	10212 <_svfprintf_r+0x8ea>
    fada:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    fade:	f043 0b02 	orr.w	fp, r3, #2
    fae2:	ea54 0305 	orrs.w	r3, r4, r5
    fae6:	9709      	str	r7, [sp, #36]	; 0x24
    fae8:	f000 8369 	beq.w	101be <_svfprintf_r+0x896>
    faec:	460f      	mov	r7, r1
    faee:	920c      	str	r2, [sp, #48]	; 0x30
    faf0:	4843      	ldr	r0, [pc, #268]	; (fc00 <_svfprintf_r+0x2d8>)
    faf2:	e2ae      	b.n	10052 <_svfprintf_r+0x72a>
    faf4:	aa1b      	add	r2, sp, #108	; 0x6c
    faf6:	9903      	ldr	r1, [sp, #12]
    faf8:	9805      	ldr	r0, [sp, #20]
    fafa:	f001 f9cd 	bl	10e98 <__ssprint_r>
    fafe:	b948      	cbnz	r0, fb14 <_svfprintf_r+0x1ec>
    fb00:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    fb04:	e755      	b.n	f9b2 <_svfprintf_r+0x8a>
    fb06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fb08:	b123      	cbz	r3, fb14 <_svfprintf_r+0x1ec>
    fb0a:	9805      	ldr	r0, [sp, #20]
    fb0c:	9903      	ldr	r1, [sp, #12]
    fb0e:	aa1b      	add	r2, sp, #108	; 0x6c
    fb10:	f001 f9c2 	bl	10e98 <__ssprint_r>
    fb14:	9b03      	ldr	r3, [sp, #12]
    fb16:	899b      	ldrh	r3, [r3, #12]
    fb18:	f013 0f40 	tst.w	r3, #64	; 0x40
    fb1c:	9b06      	ldr	r3, [sp, #24]
    fb1e:	bf18      	it	ne
    fb20:	f04f 33ff 	movne.w	r3, #4294967295
    fb24:	4618      	mov	r0, r3
    fb26:	b039      	add	sp, #228	; 0xe4
    fb28:	ecbd 8b06 	vpop	{d8-d10}
    fb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb30:	930c      	str	r3, [sp, #48]	; 0x30
    fb32:	46a8      	mov	r8, r5
    fb34:	2a00      	cmp	r2, #0
    fb36:	f041 819a 	bne.w	10e6e <_svfprintf_r+0x1546>
    fb3a:	f01b 0320 	ands.w	r3, fp, #32
    fb3e:	f000 8206 	beq.w	ff4e <_svfprintf_r+0x626>
    fb42:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fb44:	3707      	adds	r7, #7
    fb46:	f027 0307 	bic.w	r3, r7, #7
    fb4a:	2700      	movs	r7, #0
    fb4c:	f103 0208 	add.w	r2, r3, #8
    fb50:	45b8      	cmp	r8, r7
    fb52:	9209      	str	r2, [sp, #36]	; 0x24
    fb54:	e9d3 4500 	ldrd	r4, r5, [r3]
    fb58:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    fb5c:	f2c0 865e 	blt.w	1081c <_svfprintf_r+0xef4>
    fb60:	ea54 0305 	orrs.w	r3, r4, r5
    fb64:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    fb68:	f000 834b 	beq.w	10202 <_svfprintf_r+0x8da>
    fb6c:	ae28      	add	r6, sp, #160	; 0xa0
    fb6e:	08e2      	lsrs	r2, r4, #3
    fb70:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    fb74:	08e9      	lsrs	r1, r5, #3
    fb76:	f004 0307 	and.w	r3, r4, #7
    fb7a:	460d      	mov	r5, r1
    fb7c:	4614      	mov	r4, r2
    fb7e:	3330      	adds	r3, #48	; 0x30
    fb80:	ea54 0205 	orrs.w	r2, r4, r5
    fb84:	f806 3d01 	strb.w	r3, [r6, #-1]!
    fb88:	d1f1      	bne.n	fb6e <_svfprintf_r+0x246>
    fb8a:	f01b 0f01 	tst.w	fp, #1
    fb8e:	f000 8227 	beq.w	ffe0 <_svfprintf_r+0x6b8>
    fb92:	2b30      	cmp	r3, #48	; 0x30
    fb94:	f000 8224 	beq.w	ffe0 <_svfprintf_r+0x6b8>
    fb98:	2230      	movs	r2, #48	; 0x30
    fb9a:	1e73      	subs	r3, r6, #1
    fb9c:	f806 2c01 	strb.w	r2, [r6, #-1]
    fba0:	aa28      	add	r2, sp, #160	; 0xa0
    fba2:	1ad2      	subs	r2, r2, r3
    fba4:	9208      	str	r2, [sp, #32]
    fba6:	461e      	mov	r6, r3
    fba8:	e21d      	b.n	ffe6 <_svfprintf_r+0x6be>
    fbaa:	f89a 3000 	ldrb.w	r3, [sl]
    fbae:	2b2a      	cmp	r3, #42	; 0x2a
    fbb0:	f10a 0401 	add.w	r4, sl, #1
    fbb4:	f001 812f 	beq.w	10e16 <_svfprintf_r+0x14ee>
    fbb8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fbbc:	2809      	cmp	r0, #9
    fbbe:	bf98      	it	ls
    fbc0:	2500      	movls	r5, #0
    fbc2:	f201 80d5 	bhi.w	10d70 <_svfprintf_r+0x1448>
    fbc6:	f814 3b01 	ldrb.w	r3, [r4], #1
    fbca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    fbce:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    fbd2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fbd6:	2809      	cmp	r0, #9
    fbd8:	d9f5      	bls.n	fbc6 <_svfprintf_r+0x29e>
    fbda:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    fbde:	46a2      	mov	sl, r4
    fbe0:	e6fd      	b.n	f9de <_svfprintf_r+0xb6>
    fbe2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    fbe6:	f89a 3000 	ldrb.w	r3, [sl]
    fbea:	e6f6      	b.n	f9da <_svfprintf_r+0xb2>
    fbec:	f3af 8000 	nop.w
	...
    fbf8:	ffffffff 	.word	0xffffffff
    fbfc:	7fefffff 	.word	0x7fefffff
    fc00:	20001f20 	.word	0x20001f20
    fc04:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fc08:	2300      	movs	r3, #0
    fc0a:	461c      	mov	r4, r3
    fc0c:	f81a 3b01 	ldrb.w	r3, [sl], #1
    fc10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fc14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    fc18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fc1c:	2809      	cmp	r0, #9
    fc1e:	d9f5      	bls.n	fc0c <_svfprintf_r+0x2e4>
    fc20:	9407      	str	r4, [sp, #28]
    fc22:	e6dc      	b.n	f9de <_svfprintf_r+0xb6>
    fc24:	930c      	str	r3, [sp, #48]	; 0x30
    fc26:	46a8      	mov	r8, r5
    fc28:	2a00      	cmp	r2, #0
    fc2a:	f041 812c 	bne.w	10e86 <_svfprintf_r+0x155e>
    fc2e:	f04b 0b10 	orr.w	fp, fp, #16
    fc32:	f01b 0f20 	tst.w	fp, #32
    fc36:	f000 8503 	beq.w	10640 <_svfprintf_r+0xd18>
    fc3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fc3c:	3707      	adds	r7, #7
    fc3e:	f027 0707 	bic.w	r7, r7, #7
    fc42:	e9d7 2300 	ldrd	r2, r3, [r7]
    fc46:	f107 0108 	add.w	r1, r7, #8
    fc4a:	9109      	str	r1, [sp, #36]	; 0x24
    fc4c:	4614      	mov	r4, r2
    fc4e:	461d      	mov	r5, r3
    fc50:	2a00      	cmp	r2, #0
    fc52:	f173 0300 	sbcs.w	r3, r3, #0
    fc56:	f2c0 8537 	blt.w	106c8 <_svfprintf_r+0xda0>
    fc5a:	f1b8 0f00 	cmp.w	r8, #0
    fc5e:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    fc62:	f2c0 81b5 	blt.w	ffd0 <_svfprintf_r+0x6a8>
    fc66:	ea54 0305 	orrs.w	r3, r4, r5
    fc6a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    fc6e:	f000 83f6 	beq.w	1045e <_svfprintf_r+0xb36>
    fc72:	2d00      	cmp	r5, #0
    fc74:	bf08      	it	eq
    fc76:	2c0a      	cmpeq	r4, #10
    fc78:	f0c0 81ae 	bcc.w	ffd8 <_svfprintf_r+0x6b0>
    fc7c:	ae28      	add	r6, sp, #160	; 0xa0
    fc7e:	4620      	mov	r0, r4
    fc80:	4629      	mov	r1, r5
    fc82:	220a      	movs	r2, #10
    fc84:	2300      	movs	r3, #0
    fc86:	f001 f987 	bl	10f98 <__aeabi_uldivmod>
    fc8a:	3230      	adds	r2, #48	; 0x30
    fc8c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    fc90:	4620      	mov	r0, r4
    fc92:	4629      	mov	r1, r5
    fc94:	2300      	movs	r3, #0
    fc96:	220a      	movs	r2, #10
    fc98:	f001 f97e 	bl	10f98 <__aeabi_uldivmod>
    fc9c:	4604      	mov	r4, r0
    fc9e:	460d      	mov	r5, r1
    fca0:	ea54 0305 	orrs.w	r3, r4, r5
    fca4:	d1eb      	bne.n	fc7e <_svfprintf_r+0x356>
    fca6:	e19b      	b.n	ffe0 <_svfprintf_r+0x6b8>
    fca8:	930c      	str	r3, [sp, #48]	; 0x30
    fcaa:	46a8      	mov	r8, r5
    fcac:	2a00      	cmp	r2, #0
    fcae:	f041 80e6 	bne.w	10e7e <_svfprintf_r+0x1556>
    fcb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fcb4:	f01b 0f08 	tst.w	fp, #8
    fcb8:	f107 0707 	add.w	r7, r7, #7
    fcbc:	f000 8640 	beq.w	10940 <_svfprintf_r+0x1018>
    fcc0:	f027 0307 	bic.w	r3, r7, #7
    fcc4:	ed93 8b00 	vldr	d8, [r3]
    fcc8:	f103 0208 	add.w	r2, r3, #8
    fccc:	9209      	str	r2, [sp, #36]	; 0x24
    fcce:	eeb0 7bc8 	vabs.f64	d7, d8
    fcd2:	eeb4 7b49 	vcmp.f64	d7, d9
    fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fcda:	f340 85bc 	ble.w	10856 <_svfprintf_r+0xf2e>
    fcde:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fce6:	f100 87ca 	bmi.w	10c7e <_svfprintf_r+0x1356>
    fcea:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    fcee:	4ea7      	ldr	r6, [pc, #668]	; (ff8c <_svfprintf_r+0x664>)
    fcf0:	4ba7      	ldr	r3, [pc, #668]	; (ff90 <_svfprintf_r+0x668>)
    fcf2:	990c      	ldr	r1, [sp, #48]	; 0x30
    fcf4:	2203      	movs	r2, #3
    fcf6:	f04f 0800 	mov.w	r8, #0
    fcfa:	9204      	str	r2, [sp, #16]
    fcfc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    fd00:	2947      	cmp	r1, #71	; 0x47
    fd02:	bfd8      	it	le
    fd04:	461e      	movle	r6, r3
    fd06:	9208      	str	r2, [sp, #32]
    fd08:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    fd0c:	b117      	cbz	r7, fd14 <_svfprintf_r+0x3ec>
    fd0e:	9b04      	ldr	r3, [sp, #16]
    fd10:	3301      	adds	r3, #1
    fd12:	9304      	str	r3, [sp, #16]
    fd14:	f01b 0302 	ands.w	r3, fp, #2
    fd18:	930a      	str	r3, [sp, #40]	; 0x28
    fd1a:	d002      	beq.n	fd22 <_svfprintf_r+0x3fa>
    fd1c:	9b04      	ldr	r3, [sp, #16]
    fd1e:	3302      	adds	r3, #2
    fd20:	9304      	str	r3, [sp, #16]
    fd22:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    fd26:	930b      	str	r3, [sp, #44]	; 0x2c
    fd28:	f040 8280 	bne.w	1022c <_svfprintf_r+0x904>
    fd2c:	9b07      	ldr	r3, [sp, #28]
    fd2e:	9a04      	ldr	r2, [sp, #16]
    fd30:	1a9c      	subs	r4, r3, r2
    fd32:	2c00      	cmp	r4, #0
    fd34:	f340 827a 	ble.w	1022c <_svfprintf_r+0x904>
    fd38:	2c10      	cmp	r4, #16
    fd3a:	991d      	ldr	r1, [sp, #116]	; 0x74
    fd3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fd3e:	4f95      	ldr	r7, [pc, #596]	; (ff94 <_svfprintf_r+0x66c>)
    fd40:	dd23      	ble.n	fd8a <_svfprintf_r+0x462>
    fd42:	4648      	mov	r0, r9
    fd44:	2510      	movs	r5, #16
    fd46:	46c1      	mov	r9, r8
    fd48:	46b0      	mov	r8, r6
    fd4a:	9e05      	ldr	r6, [sp, #20]
    fd4c:	e004      	b.n	fd58 <_svfprintf_r+0x430>
    fd4e:	3c10      	subs	r4, #16
    fd50:	2c10      	cmp	r4, #16
    fd52:	f100 0008 	add.w	r0, r0, #8
    fd56:	dd15      	ble.n	fd84 <_svfprintf_r+0x45c>
    fd58:	3201      	adds	r2, #1
    fd5a:	3110      	adds	r1, #16
    fd5c:	2a07      	cmp	r2, #7
    fd5e:	911d      	str	r1, [sp, #116]	; 0x74
    fd60:	921c      	str	r2, [sp, #112]	; 0x70
    fd62:	6007      	str	r7, [r0, #0]
    fd64:	6045      	str	r5, [r0, #4]
    fd66:	ddf2      	ble.n	fd4e <_svfprintf_r+0x426>
    fd68:	aa1b      	add	r2, sp, #108	; 0x6c
    fd6a:	9903      	ldr	r1, [sp, #12]
    fd6c:	4630      	mov	r0, r6
    fd6e:	f001 f893 	bl	10e98 <__ssprint_r>
    fd72:	2800      	cmp	r0, #0
    fd74:	f47f aece 	bne.w	fb14 <_svfprintf_r+0x1ec>
    fd78:	3c10      	subs	r4, #16
    fd7a:	2c10      	cmp	r4, #16
    fd7c:	991d      	ldr	r1, [sp, #116]	; 0x74
    fd7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fd80:	a828      	add	r0, sp, #160	; 0xa0
    fd82:	dce9      	bgt.n	fd58 <_svfprintf_r+0x430>
    fd84:	4646      	mov	r6, r8
    fd86:	46c8      	mov	r8, r9
    fd88:	4681      	mov	r9, r0
    fd8a:	3201      	adds	r2, #1
    fd8c:	1863      	adds	r3, r4, r1
    fd8e:	2a07      	cmp	r2, #7
    fd90:	931d      	str	r3, [sp, #116]	; 0x74
    fd92:	921c      	str	r2, [sp, #112]	; 0x70
    fd94:	f8c9 7000 	str.w	r7, [r9]
    fd98:	f8c9 4004 	str.w	r4, [r9, #4]
    fd9c:	f300 83e2 	bgt.w	10564 <_svfprintf_r+0xc3c>
    fda0:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    fda4:	f109 0908 	add.w	r9, r9, #8
    fda8:	b177      	cbz	r7, fdc8 <_svfprintf_r+0x4a0>
    fdaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fdac:	3201      	adds	r2, #1
    fdae:	3301      	adds	r3, #1
    fdb0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    fdb4:	2101      	movs	r1, #1
    fdb6:	2a07      	cmp	r2, #7
    fdb8:	931d      	str	r3, [sp, #116]	; 0x74
    fdba:	921c      	str	r2, [sp, #112]	; 0x70
    fdbc:	e889 0003 	stmia.w	r9, {r0, r1}
    fdc0:	f300 835f 	bgt.w	10482 <_svfprintf_r+0xb5a>
    fdc4:	f109 0908 	add.w	r9, r9, #8
    fdc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdca:	b16a      	cbz	r2, fde8 <_svfprintf_r+0x4c0>
    fdcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fdce:	3201      	adds	r2, #1
    fdd0:	3302      	adds	r3, #2
    fdd2:	a814      	add	r0, sp, #80	; 0x50
    fdd4:	2102      	movs	r1, #2
    fdd6:	2a07      	cmp	r2, #7
    fdd8:	931d      	str	r3, [sp, #116]	; 0x74
    fdda:	921c      	str	r2, [sp, #112]	; 0x70
    fddc:	e889 0003 	stmia.w	r9, {r0, r1}
    fde0:	f300 835b 	bgt.w	1049a <_svfprintf_r+0xb72>
    fde4:	f109 0908 	add.w	r9, r9, #8
    fde8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fdea:	2a80      	cmp	r2, #128	; 0x80
    fdec:	f000 827e 	beq.w	102ec <_svfprintf_r+0x9c4>
    fdf0:	9a08      	ldr	r2, [sp, #32]
    fdf2:	ebc2 0408 	rsb	r4, r2, r8
    fdf6:	2c00      	cmp	r4, #0
    fdf8:	dd34      	ble.n	fe64 <_svfprintf_r+0x53c>
    fdfa:	2c10      	cmp	r4, #16
    fdfc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fdfe:	4f66      	ldr	r7, [pc, #408]	; (ff98 <_svfprintf_r+0x670>)
    fe00:	dd23      	ble.n	fe4a <_svfprintf_r+0x522>
    fe02:	4649      	mov	r1, r9
    fe04:	f04f 0810 	mov.w	r8, #16
    fe08:	46b1      	mov	r9, r6
    fe0a:	9d05      	ldr	r5, [sp, #20]
    fe0c:	9e03      	ldr	r6, [sp, #12]
    fe0e:	e004      	b.n	fe1a <_svfprintf_r+0x4f2>
    fe10:	3c10      	subs	r4, #16
    fe12:	2c10      	cmp	r4, #16
    fe14:	f101 0108 	add.w	r1, r1, #8
    fe18:	dd15      	ble.n	fe46 <_svfprintf_r+0x51e>
    fe1a:	3201      	adds	r2, #1
    fe1c:	3310      	adds	r3, #16
    fe1e:	2a07      	cmp	r2, #7
    fe20:	931d      	str	r3, [sp, #116]	; 0x74
    fe22:	921c      	str	r2, [sp, #112]	; 0x70
    fe24:	e881 0180 	stmia.w	r1, {r7, r8}
    fe28:	ddf2      	ble.n	fe10 <_svfprintf_r+0x4e8>
    fe2a:	aa1b      	add	r2, sp, #108	; 0x6c
    fe2c:	4631      	mov	r1, r6
    fe2e:	4628      	mov	r0, r5
    fe30:	f001 f832 	bl	10e98 <__ssprint_r>
    fe34:	2800      	cmp	r0, #0
    fe36:	f47f ae6d 	bne.w	fb14 <_svfprintf_r+0x1ec>
    fe3a:	3c10      	subs	r4, #16
    fe3c:	2c10      	cmp	r4, #16
    fe3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fe40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fe42:	a928      	add	r1, sp, #160	; 0xa0
    fe44:	dce9      	bgt.n	fe1a <_svfprintf_r+0x4f2>
    fe46:	464e      	mov	r6, r9
    fe48:	4689      	mov	r9, r1
    fe4a:	3201      	adds	r2, #1
    fe4c:	4423      	add	r3, r4
    fe4e:	2a07      	cmp	r2, #7
    fe50:	931d      	str	r3, [sp, #116]	; 0x74
    fe52:	921c      	str	r2, [sp, #112]	; 0x70
    fe54:	f8c9 7000 	str.w	r7, [r9]
    fe58:	f8c9 4004 	str.w	r4, [r9, #4]
    fe5c:	f300 8305 	bgt.w	1046a <_svfprintf_r+0xb42>
    fe60:	f109 0908 	add.w	r9, r9, #8
    fe64:	f41b 7f80 	tst.w	fp, #256	; 0x100
    fe68:	f040 81e2 	bne.w	10230 <_svfprintf_r+0x908>
    fe6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fe6e:	9808      	ldr	r0, [sp, #32]
    fe70:	f8c9 6000 	str.w	r6, [r9]
    fe74:	3201      	adds	r2, #1
    fe76:	4403      	add	r3, r0
    fe78:	2a07      	cmp	r2, #7
    fe7a:	931d      	str	r3, [sp, #116]	; 0x74
    fe7c:	f8c9 0004 	str.w	r0, [r9, #4]
    fe80:	921c      	str	r2, [sp, #112]	; 0x70
    fe82:	f300 82c2 	bgt.w	1040a <_svfprintf_r+0xae2>
    fe86:	f109 0908 	add.w	r9, r9, #8
    fe8a:	f01b 0f04 	tst.w	fp, #4
    fe8e:	d03e      	beq.n	ff0e <_svfprintf_r+0x5e6>
    fe90:	9a07      	ldr	r2, [sp, #28]
    fe92:	9904      	ldr	r1, [sp, #16]
    fe94:	1a54      	subs	r4, r2, r1
    fe96:	2c00      	cmp	r4, #0
    fe98:	dd39      	ble.n	ff0e <_svfprintf_r+0x5e6>
    fe9a:	2c10      	cmp	r4, #16
    fe9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fe9e:	4f3d      	ldr	r7, [pc, #244]	; (ff94 <_svfprintf_r+0x66c>)
    fea0:	dd22      	ble.n	fee8 <_svfprintf_r+0x5c0>
    fea2:	2510      	movs	r5, #16
    fea4:	9e05      	ldr	r6, [sp, #20]
    fea6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    feaa:	e004      	b.n	feb6 <_svfprintf_r+0x58e>
    feac:	3c10      	subs	r4, #16
    feae:	2c10      	cmp	r4, #16
    feb0:	f109 0908 	add.w	r9, r9, #8
    feb4:	dd18      	ble.n	fee8 <_svfprintf_r+0x5c0>
    feb6:	3201      	adds	r2, #1
    feb8:	3310      	adds	r3, #16
    feba:	2a07      	cmp	r2, #7
    febc:	931d      	str	r3, [sp, #116]	; 0x74
    febe:	921c      	str	r2, [sp, #112]	; 0x70
    fec0:	f8c9 7000 	str.w	r7, [r9]
    fec4:	f8c9 5004 	str.w	r5, [r9, #4]
    fec8:	ddf0      	ble.n	feac <_svfprintf_r+0x584>
    feca:	aa1b      	add	r2, sp, #108	; 0x6c
    fecc:	4641      	mov	r1, r8
    fece:	4630      	mov	r0, r6
    fed0:	f000 ffe2 	bl	10e98 <__ssprint_r>
    fed4:	2800      	cmp	r0, #0
    fed6:	f47f ae1d 	bne.w	fb14 <_svfprintf_r+0x1ec>
    feda:	3c10      	subs	r4, #16
    fedc:	2c10      	cmp	r4, #16
    fede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fee0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fee2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    fee6:	dce6      	bgt.n	feb6 <_svfprintf_r+0x58e>
    fee8:	3201      	adds	r2, #1
    feea:	4423      	add	r3, r4
    feec:	2a07      	cmp	r2, #7
    feee:	931d      	str	r3, [sp, #116]	; 0x74
    fef0:	921c      	str	r2, [sp, #112]	; 0x70
    fef2:	f8c9 7000 	str.w	r7, [r9]
    fef6:	f8c9 4004 	str.w	r4, [r9, #4]
    fefa:	dd08      	ble.n	ff0e <_svfprintf_r+0x5e6>
    fefc:	aa1b      	add	r2, sp, #108	; 0x6c
    fefe:	9903      	ldr	r1, [sp, #12]
    ff00:	9805      	ldr	r0, [sp, #20]
    ff02:	f000 ffc9 	bl	10e98 <__ssprint_r>
    ff06:	2800      	cmp	r0, #0
    ff08:	f47f ae04 	bne.w	fb14 <_svfprintf_r+0x1ec>
    ff0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ff0e:	9a06      	ldr	r2, [sp, #24]
    ff10:	9907      	ldr	r1, [sp, #28]
    ff12:	9804      	ldr	r0, [sp, #16]
    ff14:	4281      	cmp	r1, r0
    ff16:	bfac      	ite	ge
    ff18:	1852      	addge	r2, r2, r1
    ff1a:	1812      	addlt	r2, r2, r0
    ff1c:	9206      	str	r2, [sp, #24]
    ff1e:	2b00      	cmp	r3, #0
    ff20:	f040 827f 	bne.w	10422 <_svfprintf_r+0xafa>
    ff24:	2300      	movs	r3, #0
    ff26:	931c      	str	r3, [sp, #112]	; 0x70
    ff28:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ff2c:	e522      	b.n	f974 <_svfprintf_r+0x4c>
    ff2e:	f04b 0b08 	orr.w	fp, fp, #8
    ff32:	f89a 3000 	ldrb.w	r3, [sl]
    ff36:	e550      	b.n	f9da <_svfprintf_r+0xb2>
    ff38:	930c      	str	r3, [sp, #48]	; 0x30
    ff3a:	46a8      	mov	r8, r5
    ff3c:	2a00      	cmp	r2, #0
    ff3e:	f040 879a 	bne.w	10e76 <_svfprintf_r+0x154e>
    ff42:	f04b 0b10 	orr.w	fp, fp, #16
    ff46:	f01b 0320 	ands.w	r3, fp, #32
    ff4a:	f47f adfa 	bne.w	fb42 <_svfprintf_r+0x21a>
    ff4e:	f01b 0210 	ands.w	r2, fp, #16
    ff52:	f040 8391 	bne.w	10678 <_svfprintf_r+0xd50>
    ff56:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    ff5a:	f000 838d 	beq.w	10678 <_svfprintf_r+0xd50>
    ff5e:	9909      	ldr	r1, [sp, #36]	; 0x24
    ff60:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    ff64:	460b      	mov	r3, r1
    ff66:	f1b8 0f00 	cmp.w	r8, #0
    ff6a:	f103 0304 	add.w	r3, r3, #4
    ff6e:	880c      	ldrh	r4, [r1, #0]
    ff70:	f04f 0500 	mov.w	r5, #0
    ff74:	f2c0 85ab 	blt.w	10ace <_svfprintf_r+0x11a6>
    ff78:	ea54 0105 	orrs.w	r1, r4, r5
    ff7c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    ff80:	9309      	str	r3, [sp, #36]	; 0x24
    ff82:	f000 813e 	beq.w	10202 <_svfprintf_r+0x8da>
    ff86:	4617      	mov	r7, r2
    ff88:	e5f0      	b.n	fb6c <_svfprintf_r+0x244>
    ff8a:	bf00      	nop
    ff8c:	20001f00 	.word	0x20001f00
    ff90:	20001efc 	.word	0x20001efc
    ff94:	20001f3c 	.word	0x20001f3c
    ff98:	20001eec 	.word	0x20001eec
    ff9c:	930c      	str	r3, [sp, #48]	; 0x30
    ff9e:	46a8      	mov	r8, r5
    ffa0:	2a00      	cmp	r2, #0
    ffa2:	f040 8759 	bne.w	10e58 <_svfprintf_r+0x1530>
    ffa6:	f04b 0b10 	orr.w	fp, fp, #16
    ffaa:	f01b 0320 	ands.w	r3, fp, #32
    ffae:	f000 82e7 	beq.w	10580 <_svfprintf_r+0xc58>
    ffb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ffb4:	3707      	adds	r7, #7
    ffb6:	f027 0307 	bic.w	r3, r7, #7
    ffba:	2700      	movs	r7, #0
    ffbc:	f103 0208 	add.w	r2, r3, #8
    ffc0:	45b8      	cmp	r8, r7
    ffc2:	9209      	str	r2, [sp, #36]	; 0x24
    ffc4:	e9d3 4500 	ldrd	r4, r5, [r3]
    ffc8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    ffcc:	f6bf ae4b 	bge.w	fc66 <_svfprintf_r+0x33e>
    ffd0:	ea54 0305 	orrs.w	r3, r4, r5
    ffd4:	f47f ae4d 	bne.w	fc72 <_svfprintf_r+0x34a>
    ffd8:	ae38      	add	r6, sp, #224	; 0xe0
    ffda:	3430      	adds	r4, #48	; 0x30
    ffdc:	f806 4d41 	strb.w	r4, [r6, #-65]!
    ffe0:	ab28      	add	r3, sp, #160	; 0xa0
    ffe2:	1b9b      	subs	r3, r3, r6
    ffe4:	9308      	str	r3, [sp, #32]
    ffe6:	9b08      	ldr	r3, [sp, #32]
    ffe8:	4543      	cmp	r3, r8
    ffea:	bfb8      	it	lt
    ffec:	4643      	movlt	r3, r8
    ffee:	9304      	str	r3, [sp, #16]
    fff0:	2300      	movs	r3, #0
    fff2:	930e      	str	r3, [sp, #56]	; 0x38
    fff4:	e68a      	b.n	fd0c <_svfprintf_r+0x3e4>
    fff6:	930c      	str	r3, [sp, #48]	; 0x30
    fff8:	46a8      	mov	r8, r5
    fffa:	2a00      	cmp	r2, #0
    fffc:	f040 8728 	bne.w	10e50 <_svfprintf_r+0x1528>
   10000:	f01b 0f20 	tst.w	fp, #32
   10004:	48c2      	ldr	r0, [pc, #776]	; (10310 <_svfprintf_r+0x9e8>)
   10006:	f000 8086 	beq.w	10116 <_svfprintf_r+0x7ee>
   1000a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1000c:	3707      	adds	r7, #7
   1000e:	f027 0307 	bic.w	r3, r7, #7
   10012:	e9d3 4500 	ldrd	r4, r5, [r3]
   10016:	f103 0208 	add.w	r2, r3, #8
   1001a:	9209      	str	r2, [sp, #36]	; 0x24
   1001c:	f01b 0701 	ands.w	r7, fp, #1
   10020:	f000 8247 	beq.w	104b2 <_svfprintf_r+0xb8a>
   10024:	ea54 0305 	orrs.w	r3, r4, r5
   10028:	f000 84a3 	beq.w	10972 <_svfprintf_r+0x104a>
   1002c:	2700      	movs	r7, #0
   1002e:	2330      	movs	r3, #48	; 0x30
   10030:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10034:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   10038:	45b8      	cmp	r8, r7
   1003a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
   1003e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   10042:	f04b 0302 	orr.w	r3, fp, #2
   10046:	f2c0 8617 	blt.w	10c78 <_svfprintf_r+0x1350>
   1004a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
   1004e:	f043 0b02 	orr.w	fp, r3, #2
   10052:	ae28      	add	r6, sp, #160	; 0xa0
   10054:	0923      	lsrs	r3, r4, #4
   10056:	f004 010f 	and.w	r1, r4, #15
   1005a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1005e:	092a      	lsrs	r2, r5, #4
   10060:	461c      	mov	r4, r3
   10062:	4615      	mov	r5, r2
   10064:	5c43      	ldrb	r3, [r0, r1]
   10066:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1006a:	ea54 0305 	orrs.w	r3, r4, r5
   1006e:	d1f1      	bne.n	10054 <_svfprintf_r+0x72c>
   10070:	e7b6      	b.n	ffe0 <_svfprintf_r+0x6b8>
   10072:	9909      	ldr	r1, [sp, #36]	; 0x24
   10074:	930c      	str	r3, [sp, #48]	; 0x30
   10076:	680a      	ldr	r2, [r1, #0]
   10078:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   1007c:	2300      	movs	r3, #0
   1007e:	460a      	mov	r2, r1
   10080:	461f      	mov	r7, r3
   10082:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   10086:	3204      	adds	r2, #4
   10088:	2301      	movs	r3, #1
   1008a:	9304      	str	r3, [sp, #16]
   1008c:	46b8      	mov	r8, r7
   1008e:	970e      	str	r7, [sp, #56]	; 0x38
   10090:	9209      	str	r2, [sp, #36]	; 0x24
   10092:	9308      	str	r3, [sp, #32]
   10094:	ae1e      	add	r6, sp, #120	; 0x78
   10096:	e63d      	b.n	fd14 <_svfprintf_r+0x3ec>
   10098:	930c      	str	r3, [sp, #48]	; 0x30
   1009a:	46a8      	mov	r8, r5
   1009c:	2a00      	cmp	r2, #0
   1009e:	f43f adc8 	beq.w	fc32 <_svfprintf_r+0x30a>
   100a2:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   100a6:	e5c4      	b.n	fc32 <_svfprintf_r+0x30a>
   100a8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   100ac:	f89a 3000 	ldrb.w	r3, [sl]
   100b0:	e493      	b.n	f9da <_svfprintf_r+0xb2>
   100b2:	f89a 3000 	ldrb.w	r3, [sl]
   100b6:	2900      	cmp	r1, #0
   100b8:	f47f ac8f 	bne.w	f9da <_svfprintf_r+0xb2>
   100bc:	2201      	movs	r2, #1
   100be:	2120      	movs	r1, #32
   100c0:	e48b      	b.n	f9da <_svfprintf_r+0xb2>
   100c2:	f04b 0b01 	orr.w	fp, fp, #1
   100c6:	f89a 3000 	ldrb.w	r3, [sl]
   100ca:	e486      	b.n	f9da <_svfprintf_r+0xb2>
   100cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   100ce:	6823      	ldr	r3, [r4, #0]
   100d0:	9307      	str	r3, [sp, #28]
   100d2:	4618      	mov	r0, r3
   100d4:	2800      	cmp	r0, #0
   100d6:	4623      	mov	r3, r4
   100d8:	f103 0304 	add.w	r3, r3, #4
   100dc:	f6ff acdf 	blt.w	fa9e <_svfprintf_r+0x176>
   100e0:	9309      	str	r3, [sp, #36]	; 0x24
   100e2:	f89a 3000 	ldrb.w	r3, [sl]
   100e6:	e478      	b.n	f9da <_svfprintf_r+0xb2>
   100e8:	f89a 3000 	ldrb.w	r3, [sl]
   100ec:	2201      	movs	r2, #1
   100ee:	212b      	movs	r1, #43	; 0x2b
   100f0:	e473      	b.n	f9da <_svfprintf_r+0xb2>
   100f2:	930c      	str	r3, [sp, #48]	; 0x30
   100f4:	46a8      	mov	r8, r5
   100f6:	2a00      	cmp	r2, #0
   100f8:	f43f af57 	beq.w	ffaa <_svfprintf_r+0x682>
   100fc:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10100:	e753      	b.n	ffaa <_svfprintf_r+0x682>
   10102:	930c      	str	r3, [sp, #48]	; 0x30
   10104:	46a8      	mov	r8, r5
   10106:	2a00      	cmp	r2, #0
   10108:	f040 86aa 	bne.w	10e60 <_svfprintf_r+0x1538>
   1010c:	f01b 0f20 	tst.w	fp, #32
   10110:	4880      	ldr	r0, [pc, #512]	; (10314 <_svfprintf_r+0x9ec>)
   10112:	f47f af7a 	bne.w	1000a <_svfprintf_r+0x6e2>
   10116:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10118:	f01b 0f10 	tst.w	fp, #16
   1011c:	4613      	mov	r3, r2
   1011e:	f040 82c1 	bne.w	106a4 <_svfprintf_r+0xd7c>
   10122:	f01b 0f40 	tst.w	fp, #64	; 0x40
   10126:	f000 82bd 	beq.w	106a4 <_svfprintf_r+0xd7c>
   1012a:	3304      	adds	r3, #4
   1012c:	8814      	ldrh	r4, [r2, #0]
   1012e:	9309      	str	r3, [sp, #36]	; 0x24
   10130:	2500      	movs	r5, #0
   10132:	e773      	b.n	1001c <_svfprintf_r+0x6f4>
   10134:	f89a 3000 	ldrb.w	r3, [sl]
   10138:	2b6c      	cmp	r3, #108	; 0x6c
   1013a:	bf03      	ittte	eq
   1013c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   10140:	f04b 0b20 	orreq.w	fp, fp, #32
   10144:	f10a 0a01 	addeq.w	sl, sl, #1
   10148:	f04b 0b10 	orrne.w	fp, fp, #16
   1014c:	e445      	b.n	f9da <_svfprintf_r+0xb2>
   1014e:	2a00      	cmp	r2, #0
   10150:	f040 866f 	bne.w	10e32 <_svfprintf_r+0x150a>
   10154:	f01b 0f20 	tst.w	fp, #32
   10158:	f000 8366 	beq.w	10828 <_svfprintf_r+0xf00>
   1015c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1015e:	9906      	ldr	r1, [sp, #24]
   10160:	6813      	ldr	r3, [r2, #0]
   10162:	17cd      	asrs	r5, r1, #31
   10164:	4608      	mov	r0, r1
   10166:	3204      	adds	r2, #4
   10168:	4629      	mov	r1, r5
   1016a:	9209      	str	r2, [sp, #36]	; 0x24
   1016c:	e9c3 0100 	strd	r0, r1, [r3]
   10170:	e400      	b.n	f974 <_svfprintf_r+0x4c>
   10172:	f04b 0b20 	orr.w	fp, fp, #32
   10176:	f89a 3000 	ldrb.w	r3, [sl]
   1017a:	e42e      	b.n	f9da <_svfprintf_r+0xb2>
   1017c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1017e:	930c      	str	r3, [sp, #48]	; 0x30
   10180:	6816      	ldr	r6, [r2, #0]
   10182:	2400      	movs	r4, #0
   10184:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
   10188:	1d17      	adds	r7, r2, #4
   1018a:	2e00      	cmp	r6, #0
   1018c:	f000 8565 	beq.w	10c5a <_svfprintf_r+0x1332>
   10190:	2d00      	cmp	r5, #0
   10192:	f2c0 84a2 	blt.w	10ada <_svfprintf_r+0x11b2>
   10196:	462a      	mov	r2, r5
   10198:	4621      	mov	r1, r4
   1019a:	4630      	mov	r0, r6
   1019c:	f7fe f928 	bl	e3f0 <memchr>
   101a0:	2800      	cmp	r0, #0
   101a2:	f000 85cc 	beq.w	10d3e <_svfprintf_r+0x1416>
   101a6:	1b83      	subs	r3, r0, r6
   101a8:	9308      	str	r3, [sp, #32]
   101aa:	46a0      	mov	r8, r4
   101ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   101b0:	9709      	str	r7, [sp, #36]	; 0x24
   101b2:	9304      	str	r3, [sp, #16]
   101b4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   101b8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   101bc:	e5a6      	b.n	fd0c <_svfprintf_r+0x3e4>
   101be:	4855      	ldr	r0, [pc, #340]	; (10314 <_svfprintf_r+0x9ec>)
   101c0:	920c      	str	r2, [sp, #48]	; 0x30
   101c2:	f1b8 0f00 	cmp.w	r8, #0
   101c6:	f040 8184 	bne.w	104d2 <_svfprintf_r+0xbaa>
   101ca:	4647      	mov	r7, r8
   101cc:	f04f 0800 	mov.w	r8, #0
   101d0:	f8cd 8020 	str.w	r8, [sp, #32]
   101d4:	ae28      	add	r6, sp, #160	; 0xa0
   101d6:	e706      	b.n	ffe6 <_svfprintf_r+0x6be>
   101d8:	930c      	str	r3, [sp, #48]	; 0x30
   101da:	2a00      	cmp	r2, #0
   101dc:	f040 862d 	bne.w	10e3a <_svfprintf_r+0x1512>
   101e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101e2:	2a00      	cmp	r2, #0
   101e4:	f43f ac8f 	beq.w	fb06 <_svfprintf_r+0x1de>
   101e8:	2300      	movs	r3, #0
   101ea:	2101      	movs	r1, #1
   101ec:	461f      	mov	r7, r3
   101ee:	9104      	str	r1, [sp, #16]
   101f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   101f4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   101f8:	4698      	mov	r8, r3
   101fa:	930e      	str	r3, [sp, #56]	; 0x38
   101fc:	9108      	str	r1, [sp, #32]
   101fe:	ae1e      	add	r6, sp, #120	; 0x78
   10200:	e588      	b.n	fd14 <_svfprintf_r+0x3ec>
   10202:	f1b8 0f00 	cmp.w	r8, #0
   10206:	f000 858b 	beq.w	10d20 <_svfprintf_r+0x13f8>
   1020a:	2700      	movs	r7, #0
   1020c:	2400      	movs	r4, #0
   1020e:	2500      	movs	r5, #0
   10210:	e4ac      	b.n	fb6c <_svfprintf_r+0x244>
   10212:	4840      	ldr	r0, [pc, #256]	; (10314 <_svfprintf_r+0x9ec>)
   10214:	920c      	str	r2, [sp, #48]	; 0x30
   10216:	469b      	mov	fp, r3
   10218:	ea54 0305 	orrs.w	r3, r4, r5
   1021c:	9709      	str	r7, [sp, #36]	; 0x24
   1021e:	f04f 0700 	mov.w	r7, #0
   10222:	f47f af16 	bne.w	10052 <_svfprintf_r+0x72a>
   10226:	2400      	movs	r4, #0
   10228:	2500      	movs	r5, #0
   1022a:	e712      	b.n	10052 <_svfprintf_r+0x72a>
   1022c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1022e:	e5bb      	b.n	fda8 <_svfprintf_r+0x480>
   10230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10232:	2a65      	cmp	r2, #101	; 0x65
   10234:	f340 80a1 	ble.w	1037a <_svfprintf_r+0xa52>
   10238:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10240:	f040 8149 	bne.w	104d6 <_svfprintf_r+0xbae>
   10244:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10246:	4934      	ldr	r1, [pc, #208]	; (10318 <_svfprintf_r+0x9f0>)
   10248:	f8c9 1000 	str.w	r1, [r9]
   1024c:	3201      	adds	r2, #1
   1024e:	3301      	adds	r3, #1
   10250:	2101      	movs	r1, #1
   10252:	2a07      	cmp	r2, #7
   10254:	931d      	str	r3, [sp, #116]	; 0x74
   10256:	921c      	str	r2, [sp, #112]	; 0x70
   10258:	f8c9 1004 	str.w	r1, [r9, #4]
   1025c:	f300 8392 	bgt.w	10984 <_svfprintf_r+0x105c>
   10260:	f109 0908 	add.w	r9, r9, #8
   10264:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10266:	990d      	ldr	r1, [sp, #52]	; 0x34
   10268:	428a      	cmp	r2, r1
   1026a:	db03      	blt.n	10274 <_svfprintf_r+0x94c>
   1026c:	f01b 0f01 	tst.w	fp, #1
   10270:	f43f ae0b 	beq.w	fe8a <_svfprintf_r+0x562>
   10274:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10276:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10278:	9910      	ldr	r1, [sp, #64]	; 0x40
   1027a:	f8c9 1000 	str.w	r1, [r9]
   1027e:	3201      	adds	r2, #1
   10280:	4403      	add	r3, r0
   10282:	2a07      	cmp	r2, #7
   10284:	931d      	str	r3, [sp, #116]	; 0x74
   10286:	f8c9 0004 	str.w	r0, [r9, #4]
   1028a:	921c      	str	r2, [sp, #112]	; 0x70
   1028c:	f300 83d6 	bgt.w	10a3c <_svfprintf_r+0x1114>
   10290:	f109 0908 	add.w	r9, r9, #8
   10294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10296:	1e54      	subs	r4, r2, #1
   10298:	2c00      	cmp	r4, #0
   1029a:	f77f adf6 	ble.w	fe8a <_svfprintf_r+0x562>
   1029e:	2c10      	cmp	r4, #16
   102a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   102a2:	4f1e      	ldr	r7, [pc, #120]	; (1031c <_svfprintf_r+0x9f4>)
   102a4:	f340 81dc 	ble.w	10660 <_svfprintf_r+0xd38>
   102a8:	2510      	movs	r5, #16
   102aa:	9e05      	ldr	r6, [sp, #20]
   102ac:	f8dd 800c 	ldr.w	r8, [sp, #12]
   102b0:	e005      	b.n	102be <_svfprintf_r+0x996>
   102b2:	f109 0908 	add.w	r9, r9, #8
   102b6:	3c10      	subs	r4, #16
   102b8:	2c10      	cmp	r4, #16
   102ba:	f340 81d1 	ble.w	10660 <_svfprintf_r+0xd38>
   102be:	3201      	adds	r2, #1
   102c0:	3310      	adds	r3, #16
   102c2:	2a07      	cmp	r2, #7
   102c4:	931d      	str	r3, [sp, #116]	; 0x74
   102c6:	921c      	str	r2, [sp, #112]	; 0x70
   102c8:	f8c9 7000 	str.w	r7, [r9]
   102cc:	f8c9 5004 	str.w	r5, [r9, #4]
   102d0:	ddef      	ble.n	102b2 <_svfprintf_r+0x98a>
   102d2:	aa1b      	add	r2, sp, #108	; 0x6c
   102d4:	4641      	mov	r1, r8
   102d6:	4630      	mov	r0, r6
   102d8:	f000 fdde 	bl	10e98 <__ssprint_r>
   102dc:	2800      	cmp	r0, #0
   102de:	f47f ac19 	bne.w	fb14 <_svfprintf_r+0x1ec>
   102e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   102e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   102e6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   102ea:	e7e4      	b.n	102b6 <_svfprintf_r+0x98e>
   102ec:	9a07      	ldr	r2, [sp, #28]
   102ee:	9904      	ldr	r1, [sp, #16]
   102f0:	1a54      	subs	r4, r2, r1
   102f2:	2c00      	cmp	r4, #0
   102f4:	f77f ad7c 	ble.w	fdf0 <_svfprintf_r+0x4c8>
   102f8:	2c10      	cmp	r4, #16
   102fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   102fc:	4f07      	ldr	r7, [pc, #28]	; (1031c <_svfprintf_r+0x9f4>)
   102fe:	dd2e      	ble.n	1035e <_svfprintf_r+0xa36>
   10300:	4649      	mov	r1, r9
   10302:	2510      	movs	r5, #16
   10304:	46c1      	mov	r9, r8
   10306:	4618      	mov	r0, r3
   10308:	46b0      	mov	r8, r6
   1030a:	9e05      	ldr	r6, [sp, #20]
   1030c:	e00d      	b.n	1032a <_svfprintf_r+0xa02>
   1030e:	bf00      	nop
   10310:	20001f0c 	.word	0x20001f0c
   10314:	20001f20 	.word	0x20001f20
   10318:	20001878 	.word	0x20001878
   1031c:	20001eec 	.word	0x20001eec
   10320:	3c10      	subs	r4, #16
   10322:	2c10      	cmp	r4, #16
   10324:	f101 0108 	add.w	r1, r1, #8
   10328:	dd15      	ble.n	10356 <_svfprintf_r+0xa2e>
   1032a:	3201      	adds	r2, #1
   1032c:	3010      	adds	r0, #16
   1032e:	2a07      	cmp	r2, #7
   10330:	901d      	str	r0, [sp, #116]	; 0x74
   10332:	921c      	str	r2, [sp, #112]	; 0x70
   10334:	600f      	str	r7, [r1, #0]
   10336:	604d      	str	r5, [r1, #4]
   10338:	ddf2      	ble.n	10320 <_svfprintf_r+0x9f8>
   1033a:	aa1b      	add	r2, sp, #108	; 0x6c
   1033c:	9903      	ldr	r1, [sp, #12]
   1033e:	4630      	mov	r0, r6
   10340:	f000 fdaa 	bl	10e98 <__ssprint_r>
   10344:	2800      	cmp	r0, #0
   10346:	f47f abe5 	bne.w	fb14 <_svfprintf_r+0x1ec>
   1034a:	3c10      	subs	r4, #16
   1034c:	2c10      	cmp	r4, #16
   1034e:	981d      	ldr	r0, [sp, #116]	; 0x74
   10350:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10352:	a928      	add	r1, sp, #160	; 0xa0
   10354:	dce9      	bgt.n	1032a <_svfprintf_r+0xa02>
   10356:	4646      	mov	r6, r8
   10358:	4603      	mov	r3, r0
   1035a:	46c8      	mov	r8, r9
   1035c:	4689      	mov	r9, r1
   1035e:	3201      	adds	r2, #1
   10360:	4423      	add	r3, r4
   10362:	2a07      	cmp	r2, #7
   10364:	931d      	str	r3, [sp, #116]	; 0x74
   10366:	921c      	str	r2, [sp, #112]	; 0x70
   10368:	f8c9 7000 	str.w	r7, [r9]
   1036c:	f8c9 4004 	str.w	r4, [r9, #4]
   10370:	f300 8246 	bgt.w	10800 <_svfprintf_r+0xed8>
   10374:	f109 0908 	add.w	r9, r9, #8
   10378:	e53a      	b.n	fdf0 <_svfprintf_r+0x4c8>
   1037a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1037c:	f8c9 6000 	str.w	r6, [r9]
   10380:	2a01      	cmp	r2, #1
   10382:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10384:	f103 0301 	add.w	r3, r3, #1
   10388:	f102 0201 	add.w	r2, r2, #1
   1038c:	f04f 0101 	mov.w	r1, #1
   10390:	931d      	str	r3, [sp, #116]	; 0x74
   10392:	921c      	str	r2, [sp, #112]	; 0x70
   10394:	f8c9 1004 	str.w	r1, [r9, #4]
   10398:	f340 8210 	ble.w	107bc <_svfprintf_r+0xe94>
   1039c:	2a07      	cmp	r2, #7
   1039e:	f300 8215 	bgt.w	107cc <_svfprintf_r+0xea4>
   103a2:	f109 0908 	add.w	r9, r9, #8
   103a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   103a8:	9910      	ldr	r1, [sp, #64]	; 0x40
   103aa:	f8c9 1000 	str.w	r1, [r9]
   103ae:	3201      	adds	r2, #1
   103b0:	4403      	add	r3, r0
   103b2:	2a07      	cmp	r2, #7
   103b4:	931d      	str	r3, [sp, #116]	; 0x74
   103b6:	921c      	str	r2, [sp, #112]	; 0x70
   103b8:	f8c9 0004 	str.w	r0, [r9, #4]
   103bc:	f300 8213 	bgt.w	107e6 <_svfprintf_r+0xebe>
   103c0:	f109 0908 	add.w	r9, r9, #8
   103c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   103c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   103cc:	990d      	ldr	r1, [sp, #52]	; 0x34
   103ce:	f000 80f5 	beq.w	105bc <_svfprintf_r+0xc94>
   103d2:	3901      	subs	r1, #1
   103d4:	3201      	adds	r2, #1
   103d6:	3601      	adds	r6, #1
   103d8:	440b      	add	r3, r1
   103da:	2a07      	cmp	r2, #7
   103dc:	f8c9 6000 	str.w	r6, [r9]
   103e0:	921c      	str	r2, [sp, #112]	; 0x70
   103e2:	931d      	str	r3, [sp, #116]	; 0x74
   103e4:	f8c9 1004 	str.w	r1, [r9, #4]
   103e8:	f300 811d 	bgt.w	10626 <_svfprintf_r+0xcfe>
   103ec:	f109 0908 	add.w	r9, r9, #8
   103f0:	9811      	ldr	r0, [sp, #68]	; 0x44
   103f2:	f8c9 0004 	str.w	r0, [r9, #4]
   103f6:	3201      	adds	r2, #1
   103f8:	4403      	add	r3, r0
   103fa:	a917      	add	r1, sp, #92	; 0x5c
   103fc:	2a07      	cmp	r2, #7
   103fe:	931d      	str	r3, [sp, #116]	; 0x74
   10400:	921c      	str	r2, [sp, #112]	; 0x70
   10402:	f8c9 1000 	str.w	r1, [r9]
   10406:	f77f ad3e 	ble.w	fe86 <_svfprintf_r+0x55e>
   1040a:	aa1b      	add	r2, sp, #108	; 0x6c
   1040c:	9903      	ldr	r1, [sp, #12]
   1040e:	9805      	ldr	r0, [sp, #20]
   10410:	f000 fd42 	bl	10e98 <__ssprint_r>
   10414:	2800      	cmp	r0, #0
   10416:	f47f ab7d 	bne.w	fb14 <_svfprintf_r+0x1ec>
   1041a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1041c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10420:	e533      	b.n	fe8a <_svfprintf_r+0x562>
   10422:	aa1b      	add	r2, sp, #108	; 0x6c
   10424:	9903      	ldr	r1, [sp, #12]
   10426:	9805      	ldr	r0, [sp, #20]
   10428:	f000 fd36 	bl	10e98 <__ssprint_r>
   1042c:	2800      	cmp	r0, #0
   1042e:	f43f ad79 	beq.w	ff24 <_svfprintf_r+0x5fc>
   10432:	f7ff bb6f 	b.w	fb14 <_svfprintf_r+0x1ec>
   10436:	9909      	ldr	r1, [sp, #36]	; 0x24
   10438:	f1b8 0f00 	cmp.w	r8, #0
   1043c:	680c      	ldr	r4, [r1, #0]
   1043e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   10442:	f101 0704 	add.w	r7, r1, #4
   10446:	f04f 0500 	mov.w	r5, #0
   1044a:	f2c0 8371 	blt.w	10b30 <_svfprintf_r+0x1208>
   1044e:	ea54 0205 	orrs.w	r2, r4, r5
   10452:	9709      	str	r7, [sp, #36]	; 0x24
   10454:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10458:	461f      	mov	r7, r3
   1045a:	f47f ac0a 	bne.w	fc72 <_svfprintf_r+0x34a>
   1045e:	f1b8 0f00 	cmp.w	r8, #0
   10462:	f43f aeb3 	beq.w	101cc <_svfprintf_r+0x8a4>
   10466:	2400      	movs	r4, #0
   10468:	e5b6      	b.n	ffd8 <_svfprintf_r+0x6b0>
   1046a:	aa1b      	add	r2, sp, #108	; 0x6c
   1046c:	9903      	ldr	r1, [sp, #12]
   1046e:	9805      	ldr	r0, [sp, #20]
   10470:	f000 fd12 	bl	10e98 <__ssprint_r>
   10474:	2800      	cmp	r0, #0
   10476:	f47f ab4d 	bne.w	fb14 <_svfprintf_r+0x1ec>
   1047a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1047c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10480:	e4f0      	b.n	fe64 <_svfprintf_r+0x53c>
   10482:	aa1b      	add	r2, sp, #108	; 0x6c
   10484:	9903      	ldr	r1, [sp, #12]
   10486:	9805      	ldr	r0, [sp, #20]
   10488:	f000 fd06 	bl	10e98 <__ssprint_r>
   1048c:	2800      	cmp	r0, #0
   1048e:	f47f ab41 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10492:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10494:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10498:	e496      	b.n	fdc8 <_svfprintf_r+0x4a0>
   1049a:	aa1b      	add	r2, sp, #108	; 0x6c
   1049c:	9903      	ldr	r1, [sp, #12]
   1049e:	9805      	ldr	r0, [sp, #20]
   104a0:	f000 fcfa 	bl	10e98 <__ssprint_r>
   104a4:	2800      	cmp	r0, #0
   104a6:	f47f ab35 	bne.w	fb14 <_svfprintf_r+0x1ec>
   104aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   104ac:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   104b0:	e49a      	b.n	fde8 <_svfprintf_r+0x4c0>
   104b2:	f1b8 0f00 	cmp.w	r8, #0
   104b6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   104ba:	f2c0 826f 	blt.w	1099c <_svfprintf_r+0x1074>
   104be:	ea54 0305 	orrs.w	r3, r4, r5
   104c2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   104c6:	f47f adc4 	bne.w	10052 <_svfprintf_r+0x72a>
   104ca:	f1b8 0f00 	cmp.w	r8, #0
   104ce:	f43f ae7c 	beq.w	101ca <_svfprintf_r+0x8a2>
   104d2:	2700      	movs	r7, #0
   104d4:	e6a7      	b.n	10226 <_svfprintf_r+0x8fe>
   104d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
   104d8:	2c00      	cmp	r4, #0
   104da:	f340 8261 	ble.w	109a0 <_svfprintf_r+0x1078>
   104de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   104e0:	990d      	ldr	r1, [sp, #52]	; 0x34
   104e2:	428a      	cmp	r2, r1
   104e4:	bfa8      	it	ge
   104e6:	460a      	movge	r2, r1
   104e8:	2a00      	cmp	r2, #0
   104ea:	4614      	mov	r4, r2
   104ec:	dd0d      	ble.n	1050a <_svfprintf_r+0xbe2>
   104ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   104f0:	f8c9 6000 	str.w	r6, [r9]
   104f4:	3201      	adds	r2, #1
   104f6:	4423      	add	r3, r4
   104f8:	2a07      	cmp	r2, #7
   104fa:	931d      	str	r3, [sp, #116]	; 0x74
   104fc:	f8c9 4004 	str.w	r4, [r9, #4]
   10500:	921c      	str	r2, [sp, #112]	; 0x70
   10502:	f300 8372 	bgt.w	10bea <_svfprintf_r+0x12c2>
   10506:	f109 0908 	add.w	r9, r9, #8
   1050a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1050c:	2c00      	cmp	r4, #0
   1050e:	bfa8      	it	ge
   10510:	1b12      	subge	r2, r2, r4
   10512:	2a00      	cmp	r2, #0
   10514:	4614      	mov	r4, r2
   10516:	f340 80f1 	ble.w	106fc <_svfprintf_r+0xdd4>
   1051a:	2c10      	cmp	r4, #16
   1051c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1051e:	4fc1      	ldr	r7, [pc, #772]	; (10824 <_svfprintf_r+0xefc>)
   10520:	f340 8219 	ble.w	10956 <_svfprintf_r+0x102e>
   10524:	4649      	mov	r1, r9
   10526:	2510      	movs	r5, #16
   10528:	46b1      	mov	r9, r6
   1052a:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1052e:	9e03      	ldr	r6, [sp, #12]
   10530:	e004      	b.n	1053c <_svfprintf_r+0xc14>
   10532:	3108      	adds	r1, #8
   10534:	3c10      	subs	r4, #16
   10536:	2c10      	cmp	r4, #16
   10538:	f340 820b 	ble.w	10952 <_svfprintf_r+0x102a>
   1053c:	3201      	adds	r2, #1
   1053e:	3310      	adds	r3, #16
   10540:	2a07      	cmp	r2, #7
   10542:	931d      	str	r3, [sp, #116]	; 0x74
   10544:	921c      	str	r2, [sp, #112]	; 0x70
   10546:	600f      	str	r7, [r1, #0]
   10548:	604d      	str	r5, [r1, #4]
   1054a:	ddf2      	ble.n	10532 <_svfprintf_r+0xc0a>
   1054c:	aa1b      	add	r2, sp, #108	; 0x6c
   1054e:	4631      	mov	r1, r6
   10550:	4640      	mov	r0, r8
   10552:	f000 fca1 	bl	10e98 <__ssprint_r>
   10556:	2800      	cmp	r0, #0
   10558:	f47f aadc 	bne.w	fb14 <_svfprintf_r+0x1ec>
   1055c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1055e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10560:	a928      	add	r1, sp, #160	; 0xa0
   10562:	e7e7      	b.n	10534 <_svfprintf_r+0xc0c>
   10564:	aa1b      	add	r2, sp, #108	; 0x6c
   10566:	9903      	ldr	r1, [sp, #12]
   10568:	9805      	ldr	r0, [sp, #20]
   1056a:	f000 fc95 	bl	10e98 <__ssprint_r>
   1056e:	2800      	cmp	r0, #0
   10570:	f47f aad0 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10574:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   10578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1057a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1057e:	e413      	b.n	fda8 <_svfprintf_r+0x480>
   10580:	f01b 0210 	ands.w	r2, fp, #16
   10584:	f47f af57 	bne.w	10436 <_svfprintf_r+0xb0e>
   10588:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1058c:	f43f af53 	beq.w	10436 <_svfprintf_r+0xb0e>
   10590:	9909      	ldr	r1, [sp, #36]	; 0x24
   10592:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
   10596:	460b      	mov	r3, r1
   10598:	f1b8 0f00 	cmp.w	r8, #0
   1059c:	f103 0304 	add.w	r3, r3, #4
   105a0:	880c      	ldrh	r4, [r1, #0]
   105a2:	f04f 0500 	mov.w	r5, #0
   105a6:	f2c0 8294 	blt.w	10ad2 <_svfprintf_r+0x11aa>
   105aa:	ea54 0105 	orrs.w	r1, r4, r5
   105ae:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   105b2:	9309      	str	r3, [sp, #36]	; 0x24
   105b4:	4617      	mov	r7, r2
   105b6:	f47f ab5c 	bne.w	fc72 <_svfprintf_r+0x34a>
   105ba:	e750      	b.n	1045e <_svfprintf_r+0xb36>
   105bc:	1e4c      	subs	r4, r1, #1
   105be:	2c00      	cmp	r4, #0
   105c0:	f77f af16 	ble.w	103f0 <_svfprintf_r+0xac8>
   105c4:	2c10      	cmp	r4, #16
   105c6:	4f97      	ldr	r7, [pc, #604]	; (10824 <_svfprintf_r+0xefc>)
   105c8:	dd22      	ble.n	10610 <_svfprintf_r+0xce8>
   105ca:	2510      	movs	r5, #16
   105cc:	9e05      	ldr	r6, [sp, #20]
   105ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
   105d2:	e004      	b.n	105de <_svfprintf_r+0xcb6>
   105d4:	3c10      	subs	r4, #16
   105d6:	2c10      	cmp	r4, #16
   105d8:	f109 0908 	add.w	r9, r9, #8
   105dc:	dd18      	ble.n	10610 <_svfprintf_r+0xce8>
   105de:	3201      	adds	r2, #1
   105e0:	3310      	adds	r3, #16
   105e2:	2a07      	cmp	r2, #7
   105e4:	931d      	str	r3, [sp, #116]	; 0x74
   105e6:	921c      	str	r2, [sp, #112]	; 0x70
   105e8:	f8c9 7000 	str.w	r7, [r9]
   105ec:	f8c9 5004 	str.w	r5, [r9, #4]
   105f0:	ddf0      	ble.n	105d4 <_svfprintf_r+0xcac>
   105f2:	aa1b      	add	r2, sp, #108	; 0x6c
   105f4:	4641      	mov	r1, r8
   105f6:	4630      	mov	r0, r6
   105f8:	f000 fc4e 	bl	10e98 <__ssprint_r>
   105fc:	2800      	cmp	r0, #0
   105fe:	f47f aa89 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10602:	3c10      	subs	r4, #16
   10604:	2c10      	cmp	r4, #16
   10606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10608:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1060a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1060e:	dce6      	bgt.n	105de <_svfprintf_r+0xcb6>
   10610:	3201      	adds	r2, #1
   10612:	4423      	add	r3, r4
   10614:	2a07      	cmp	r2, #7
   10616:	931d      	str	r3, [sp, #116]	; 0x74
   10618:	921c      	str	r2, [sp, #112]	; 0x70
   1061a:	f8c9 7000 	str.w	r7, [r9]
   1061e:	f8c9 4004 	str.w	r4, [r9, #4]
   10622:	f77f aee3 	ble.w	103ec <_svfprintf_r+0xac4>
   10626:	aa1b      	add	r2, sp, #108	; 0x6c
   10628:	9903      	ldr	r1, [sp, #12]
   1062a:	9805      	ldr	r0, [sp, #20]
   1062c:	f000 fc34 	bl	10e98 <__ssprint_r>
   10630:	2800      	cmp	r0, #0
   10632:	f47f aa6f 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10636:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10638:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1063a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1063e:	e6d7      	b.n	103f0 <_svfprintf_r+0xac8>
   10640:	f01b 0f10 	tst.w	fp, #16
   10644:	d133      	bne.n	106ae <_svfprintf_r+0xd86>
   10646:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1064a:	d030      	beq.n	106ae <_svfprintf_r+0xd86>
   1064c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1064e:	f9b1 4000 	ldrsh.w	r4, [r1]
   10652:	3104      	adds	r1, #4
   10654:	17e5      	asrs	r5, r4, #31
   10656:	4622      	mov	r2, r4
   10658:	462b      	mov	r3, r5
   1065a:	9109      	str	r1, [sp, #36]	; 0x24
   1065c:	f7ff baf8 	b.w	fc50 <_svfprintf_r+0x328>
   10660:	3201      	adds	r2, #1
   10662:	4423      	add	r3, r4
   10664:	2a07      	cmp	r2, #7
   10666:	931d      	str	r3, [sp, #116]	; 0x74
   10668:	921c      	str	r2, [sp, #112]	; 0x70
   1066a:	f8c9 7000 	str.w	r7, [r9]
   1066e:	f8c9 4004 	str.w	r4, [r9, #4]
   10672:	f77f ac08 	ble.w	fe86 <_svfprintf_r+0x55e>
   10676:	e6c8      	b.n	1040a <_svfprintf_r+0xae2>
   10678:	9909      	ldr	r1, [sp, #36]	; 0x24
   1067a:	f1b8 0f00 	cmp.w	r8, #0
   1067e:	680c      	ldr	r4, [r1, #0]
   10680:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   10684:	f101 0704 	add.w	r7, r1, #4
   10688:	f04f 0500 	mov.w	r5, #0
   1068c:	f2c0 80c5 	blt.w	1081a <_svfprintf_r+0xef2>
   10690:	ea54 0205 	orrs.w	r2, r4, r5
   10694:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10698:	9709      	str	r7, [sp, #36]	; 0x24
   1069a:	f43f adb2 	beq.w	10202 <_svfprintf_r+0x8da>
   1069e:	461f      	mov	r7, r3
   106a0:	f7ff ba64 	b.w	fb6c <_svfprintf_r+0x244>
   106a4:	681c      	ldr	r4, [r3, #0]
   106a6:	3304      	adds	r3, #4
   106a8:	9309      	str	r3, [sp, #36]	; 0x24
   106aa:	2500      	movs	r5, #0
   106ac:	e4b6      	b.n	1001c <_svfprintf_r+0x6f4>
   106ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   106b0:	6814      	ldr	r4, [r2, #0]
   106b2:	4613      	mov	r3, r2
   106b4:	3304      	adds	r3, #4
   106b6:	17e5      	asrs	r5, r4, #31
   106b8:	4622      	mov	r2, r4
   106ba:	9309      	str	r3, [sp, #36]	; 0x24
   106bc:	2a00      	cmp	r2, #0
   106be:	462b      	mov	r3, r5
   106c0:	f173 0300 	sbcs.w	r3, r3, #0
   106c4:	f6bf aac9 	bge.w	fc5a <_svfprintf_r+0x332>
   106c8:	4264      	negs	r4, r4
   106ca:	f04f 072d 	mov.w	r7, #45	; 0x2d
   106ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   106d2:	f1b8 0f00 	cmp.w	r8, #0
   106d6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   106da:	f6ff aaca 	blt.w	fc72 <_svfprintf_r+0x34a>
   106de:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   106e2:	f7ff bac6 	b.w	fc72 <_svfprintf_r+0x34a>
   106e6:	aa1b      	add	r2, sp, #108	; 0x6c
   106e8:	9903      	ldr	r1, [sp, #12]
   106ea:	9805      	ldr	r0, [sp, #20]
   106ec:	f000 fbd4 	bl	10e98 <__ssprint_r>
   106f0:	2800      	cmp	r0, #0
   106f2:	f47f aa0f 	bne.w	fb14 <_svfprintf_r+0x1ec>
   106f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   106f8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   106fc:	990e      	ldr	r1, [sp, #56]	; 0x38
   106fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10700:	4431      	add	r1, r6
   10702:	460d      	mov	r5, r1
   10704:	990d      	ldr	r1, [sp, #52]	; 0x34
   10706:	428a      	cmp	r2, r1
   10708:	db47      	blt.n	1079a <_svfprintf_r+0xe72>
   1070a:	f01b 0f01 	tst.w	fp, #1
   1070e:	d144      	bne.n	1079a <_svfprintf_r+0xe72>
   10710:	980d      	ldr	r0, [sp, #52]	; 0x34
   10712:	4406      	add	r6, r0
   10714:	1b74      	subs	r4, r6, r5
   10716:	1a82      	subs	r2, r0, r2
   10718:	4294      	cmp	r4, r2
   1071a:	bfa8      	it	ge
   1071c:	4614      	movge	r4, r2
   1071e:	2c00      	cmp	r4, #0
   10720:	4626      	mov	r6, r4
   10722:	dd0d      	ble.n	10740 <_svfprintf_r+0xe18>
   10724:	991c      	ldr	r1, [sp, #112]	; 0x70
   10726:	f8c9 5000 	str.w	r5, [r9]
   1072a:	3101      	adds	r1, #1
   1072c:	4423      	add	r3, r4
   1072e:	2907      	cmp	r1, #7
   10730:	931d      	str	r3, [sp, #116]	; 0x74
   10732:	f8c9 4004 	str.w	r4, [r9, #4]
   10736:	911c      	str	r1, [sp, #112]	; 0x70
   10738:	f300 8280 	bgt.w	10c3c <_svfprintf_r+0x1314>
   1073c:	f109 0908 	add.w	r9, r9, #8
   10740:	2e00      	cmp	r6, #0
   10742:	bfac      	ite	ge
   10744:	1b94      	subge	r4, r2, r6
   10746:	4614      	movlt	r4, r2
   10748:	2c00      	cmp	r4, #0
   1074a:	f77f ab9e 	ble.w	fe8a <_svfprintf_r+0x562>
   1074e:	2c10      	cmp	r4, #16
   10750:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10752:	4f34      	ldr	r7, [pc, #208]	; (10824 <_svfprintf_r+0xefc>)
   10754:	dd84      	ble.n	10660 <_svfprintf_r+0xd38>
   10756:	2510      	movs	r5, #16
   10758:	9e05      	ldr	r6, [sp, #20]
   1075a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1075e:	e005      	b.n	1076c <_svfprintf_r+0xe44>
   10760:	f109 0908 	add.w	r9, r9, #8
   10764:	3c10      	subs	r4, #16
   10766:	2c10      	cmp	r4, #16
   10768:	f77f af7a 	ble.w	10660 <_svfprintf_r+0xd38>
   1076c:	3201      	adds	r2, #1
   1076e:	3310      	adds	r3, #16
   10770:	2a07      	cmp	r2, #7
   10772:	931d      	str	r3, [sp, #116]	; 0x74
   10774:	921c      	str	r2, [sp, #112]	; 0x70
   10776:	f8c9 7000 	str.w	r7, [r9]
   1077a:	f8c9 5004 	str.w	r5, [r9, #4]
   1077e:	ddef      	ble.n	10760 <_svfprintf_r+0xe38>
   10780:	aa1b      	add	r2, sp, #108	; 0x6c
   10782:	4641      	mov	r1, r8
   10784:	4630      	mov	r0, r6
   10786:	f000 fb87 	bl	10e98 <__ssprint_r>
   1078a:	2800      	cmp	r0, #0
   1078c:	f47f a9c2 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10790:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10792:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10794:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10798:	e7e4      	b.n	10764 <_svfprintf_r+0xe3c>
   1079a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1079c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1079e:	9810      	ldr	r0, [sp, #64]	; 0x40
   107a0:	f8c9 0000 	str.w	r0, [r9]
   107a4:	3101      	adds	r1, #1
   107a6:	4423      	add	r3, r4
   107a8:	2907      	cmp	r1, #7
   107aa:	931d      	str	r3, [sp, #116]	; 0x74
   107ac:	f8c9 4004 	str.w	r4, [r9, #4]
   107b0:	911c      	str	r1, [sp, #112]	; 0x70
   107b2:	f300 8226 	bgt.w	10c02 <_svfprintf_r+0x12da>
   107b6:	f109 0908 	add.w	r9, r9, #8
   107ba:	e7a9      	b.n	10710 <_svfprintf_r+0xde8>
   107bc:	f01b 0f01 	tst.w	fp, #1
   107c0:	f47f adec 	bne.w	1039c <_svfprintf_r+0xa74>
   107c4:	2a07      	cmp	r2, #7
   107c6:	f77f ae11 	ble.w	103ec <_svfprintf_r+0xac4>
   107ca:	e72c      	b.n	10626 <_svfprintf_r+0xcfe>
   107cc:	aa1b      	add	r2, sp, #108	; 0x6c
   107ce:	9903      	ldr	r1, [sp, #12]
   107d0:	9805      	ldr	r0, [sp, #20]
   107d2:	f000 fb61 	bl	10e98 <__ssprint_r>
   107d6:	2800      	cmp	r0, #0
   107d8:	f47f a99c 	bne.w	fb14 <_svfprintf_r+0x1ec>
   107dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   107de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   107e0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   107e4:	e5df      	b.n	103a6 <_svfprintf_r+0xa7e>
   107e6:	aa1b      	add	r2, sp, #108	; 0x6c
   107e8:	9903      	ldr	r1, [sp, #12]
   107ea:	9805      	ldr	r0, [sp, #20]
   107ec:	f000 fb54 	bl	10e98 <__ssprint_r>
   107f0:	2800      	cmp	r0, #0
   107f2:	f47f a98f 	bne.w	fb14 <_svfprintf_r+0x1ec>
   107f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   107f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   107fa:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   107fe:	e5e1      	b.n	103c4 <_svfprintf_r+0xa9c>
   10800:	aa1b      	add	r2, sp, #108	; 0x6c
   10802:	9903      	ldr	r1, [sp, #12]
   10804:	9805      	ldr	r0, [sp, #20]
   10806:	f000 fb47 	bl	10e98 <__ssprint_r>
   1080a:	2800      	cmp	r0, #0
   1080c:	f47f a982 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10810:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10812:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10816:	f7ff baeb 	b.w	fdf0 <_svfprintf_r+0x4c8>
   1081a:	9709      	str	r7, [sp, #36]	; 0x24
   1081c:	2700      	movs	r7, #0
   1081e:	f7ff b9a5 	b.w	fb6c <_svfprintf_r+0x244>
   10822:	bf00      	nop
   10824:	20001eec 	.word	0x20001eec
   10828:	f01b 0f10 	tst.w	fp, #16
   1082c:	d10b      	bne.n	10846 <_svfprintf_r+0xf1e>
   1082e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   10832:	d008      	beq.n	10846 <_svfprintf_r+0xf1e>
   10834:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10836:	6813      	ldr	r3, [r2, #0]
   10838:	3204      	adds	r2, #4
   1083a:	9209      	str	r2, [sp, #36]	; 0x24
   1083c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   10840:	801a      	strh	r2, [r3, #0]
   10842:	f7ff b897 	b.w	f974 <_svfprintf_r+0x4c>
   10846:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10848:	6813      	ldr	r3, [r2, #0]
   1084a:	3204      	adds	r2, #4
   1084c:	9209      	str	r2, [sp, #36]	; 0x24
   1084e:	9a06      	ldr	r2, [sp, #24]
   10850:	601a      	str	r2, [r3, #0]
   10852:	f7ff b88f 	b.w	f974 <_svfprintf_r+0x4c>
   10856:	eeb4 8b48 	vcmp.f64	d8, d8
   1085a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1085e:	f180 829e 	bvs.w	10d9e <_svfprintf_r+0x1476>
   10862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10864:	f1b8 3fff 	cmp.w	r8, #4294967295
   10868:	f023 0520 	bic.w	r5, r3, #32
   1086c:	f000 8225 	beq.w	10cba <_svfprintf_r+0x1392>
   10870:	2d47      	cmp	r5, #71	; 0x47
   10872:	f000 8126 	beq.w	10ac2 <_svfprintf_r+0x119a>
   10876:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   1087a:	930a      	str	r3, [sp, #40]	; 0x28
   1087c:	ee18 3a90 	vmov	r3, s17
   10880:	2b00      	cmp	r3, #0
   10882:	f2c0 821d 	blt.w	10cc0 <_svfprintf_r+0x1398>
   10886:	eeb0 ab48 	vmov.f64	d10, d8
   1088a:	2700      	movs	r7, #0
   1088c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1088e:	2b66      	cmp	r3, #102	; 0x66
   10890:	f000 8202 	beq.w	10c98 <_svfprintf_r+0x1370>
   10894:	2b46      	cmp	r3, #70	; 0x46
   10896:	f000 80ec 	beq.w	10a72 <_svfprintf_r+0x114a>
   1089a:	eeb0 0b4a 	vmov.f64	d0, d10
   1089e:	2d45      	cmp	r5, #69	; 0x45
   108a0:	bf0c      	ite	eq
   108a2:	f108 0401 	addeq.w	r4, r8, #1
   108a6:	4644      	movne	r4, r8
   108a8:	aa19      	add	r2, sp, #100	; 0x64
   108aa:	ab16      	add	r3, sp, #88	; 0x58
   108ac:	9201      	str	r2, [sp, #4]
   108ae:	9300      	str	r3, [sp, #0]
   108b0:	4622      	mov	r2, r4
   108b2:	ab15      	add	r3, sp, #84	; 0x54
   108b4:	2102      	movs	r1, #2
   108b6:	9805      	ldr	r0, [sp, #20]
   108b8:	f7fe f9f2 	bl	eca0 <_dtoa_r>
   108bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   108be:	2b67      	cmp	r3, #103	; 0x67
   108c0:	4606      	mov	r6, r0
   108c2:	f040 820e 	bne.w	10ce2 <_svfprintf_r+0x13ba>
   108c6:	f01b 0f01 	tst.w	fp, #1
   108ca:	f000 8266 	beq.w	10d9a <_svfprintf_r+0x1472>
   108ce:	1931      	adds	r1, r6, r4
   108d0:	eeb5 ab40 	vcmp.f64	d10, #0.0
   108d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108d8:	f000 8185 	beq.w	10be6 <_svfprintf_r+0x12be>
   108dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   108de:	4299      	cmp	r1, r3
   108e0:	d906      	bls.n	108f0 <_svfprintf_r+0xfc8>
   108e2:	2030      	movs	r0, #48	; 0x30
   108e4:	1c5a      	adds	r2, r3, #1
   108e6:	9219      	str	r2, [sp, #100]	; 0x64
   108e8:	7018      	strb	r0, [r3, #0]
   108ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
   108ec:	4299      	cmp	r1, r3
   108ee:	d8f9      	bhi.n	108e4 <_svfprintf_r+0xfbc>
   108f0:	1b9b      	subs	r3, r3, r6
   108f2:	2d47      	cmp	r5, #71	; 0x47
   108f4:	930d      	str	r3, [sp, #52]	; 0x34
   108f6:	f000 811f 	beq.w	10b38 <_svfprintf_r+0x1210>
   108fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   108fc:	2b65      	cmp	r3, #101	; 0x65
   108fe:	f340 81ff 	ble.w	10d00 <_svfprintf_r+0x13d8>
   10902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10904:	2b66      	cmp	r3, #102	; 0x66
   10906:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10908:	f000 81fc 	beq.w	10d04 <_svfprintf_r+0x13dc>
   1090c:	930e      	str	r3, [sp, #56]	; 0x38
   1090e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10910:	990d      	ldr	r1, [sp, #52]	; 0x34
   10912:	428a      	cmp	r2, r1
   10914:	f2c0 81d8 	blt.w	10cc8 <_svfprintf_r+0x13a0>
   10918:	f01b 0f01 	tst.w	fp, #1
   1091c:	f040 8234 	bne.w	10d88 <_svfprintf_r+0x1460>
   10920:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10924:	9208      	str	r2, [sp, #32]
   10926:	2267      	movs	r2, #103	; 0x67
   10928:	920c      	str	r2, [sp, #48]	; 0x30
   1092a:	2f00      	cmp	r7, #0
   1092c:	f040 80f6 	bne.w	10b1c <_svfprintf_r+0x11f4>
   10930:	46b8      	mov	r8, r7
   10932:	9304      	str	r3, [sp, #16]
   10934:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10938:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   1093c:	f7ff b9e6 	b.w	fd0c <_svfprintf_r+0x3e4>
   10940:	f027 0707 	bic.w	r7, r7, #7
   10944:	f107 0308 	add.w	r3, r7, #8
   10948:	ed97 8b00 	vldr	d8, [r7]
   1094c:	9309      	str	r3, [sp, #36]	; 0x24
   1094e:	f7ff b9be 	b.w	fcce <_svfprintf_r+0x3a6>
   10952:	464e      	mov	r6, r9
   10954:	4689      	mov	r9, r1
   10956:	3201      	adds	r2, #1
   10958:	4423      	add	r3, r4
   1095a:	2a07      	cmp	r2, #7
   1095c:	931d      	str	r3, [sp, #116]	; 0x74
   1095e:	921c      	str	r2, [sp, #112]	; 0x70
   10960:	f8c9 7000 	str.w	r7, [r9]
   10964:	f8c9 4004 	str.w	r4, [r9, #4]
   10968:	f73f aebd 	bgt.w	106e6 <_svfprintf_r+0xdbe>
   1096c:	f109 0908 	add.w	r9, r9, #8
   10970:	e6c4      	b.n	106fc <_svfprintf_r+0xdd4>
   10972:	2700      	movs	r7, #0
   10974:	45b8      	cmp	r8, r7
   10976:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   1097a:	f6ff ac54 	blt.w	10226 <_svfprintf_r+0x8fe>
   1097e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10982:	e41e      	b.n	101c2 <_svfprintf_r+0x89a>
   10984:	aa1b      	add	r2, sp, #108	; 0x6c
   10986:	9903      	ldr	r1, [sp, #12]
   10988:	9805      	ldr	r0, [sp, #20]
   1098a:	f000 fa85 	bl	10e98 <__ssprint_r>
   1098e:	2800      	cmp	r0, #0
   10990:	f47f a8c0 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10996:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1099a:	e463      	b.n	10264 <_svfprintf_r+0x93c>
   1099c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1099e:	e43b      	b.n	10218 <_svfprintf_r+0x8f0>
   109a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   109a2:	49b9      	ldr	r1, [pc, #740]	; (10c88 <_svfprintf_r+0x1360>)
   109a4:	f8c9 1000 	str.w	r1, [r9]
   109a8:	3201      	adds	r2, #1
   109aa:	3301      	adds	r3, #1
   109ac:	2101      	movs	r1, #1
   109ae:	2a07      	cmp	r2, #7
   109b0:	931d      	str	r3, [sp, #116]	; 0x74
   109b2:	921c      	str	r2, [sp, #112]	; 0x70
   109b4:	f8c9 1004 	str.w	r1, [r9, #4]
   109b8:	dc76      	bgt.n	10aa8 <_svfprintf_r+0x1180>
   109ba:	f109 0908 	add.w	r9, r9, #8
   109be:	b92c      	cbnz	r4, 109cc <_svfprintf_r+0x10a4>
   109c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   109c2:	b91a      	cbnz	r2, 109cc <_svfprintf_r+0x10a4>
   109c4:	f01b 0f01 	tst.w	fp, #1
   109c8:	f43f aa5f 	beq.w	fe8a <_svfprintf_r+0x562>
   109cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   109ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   109d0:	9910      	ldr	r1, [sp, #64]	; 0x40
   109d2:	f8c9 1000 	str.w	r1, [r9]
   109d6:	3201      	adds	r2, #1
   109d8:	4403      	add	r3, r0
   109da:	2a07      	cmp	r2, #7
   109dc:	931d      	str	r3, [sp, #116]	; 0x74
   109de:	f8c9 0004 	str.w	r0, [r9, #4]
   109e2:	921c      	str	r2, [sp, #112]	; 0x70
   109e4:	f300 81b6 	bgt.w	10d54 <_svfprintf_r+0x142c>
   109e8:	f109 0908 	add.w	r9, r9, #8
   109ec:	4264      	negs	r4, r4
   109ee:	2c00      	cmp	r4, #0
   109f0:	f340 8087 	ble.w	10b02 <_svfprintf_r+0x11da>
   109f4:	2c10      	cmp	r4, #16
   109f6:	4fa5      	ldr	r7, [pc, #660]	; (10c8c <_svfprintf_r+0x1364>)
   109f8:	f340 8112 	ble.w	10c20 <_svfprintf_r+0x12f8>
   109fc:	4649      	mov	r1, r9
   109fe:	2510      	movs	r5, #16
   10a00:	46b1      	mov	r9, r6
   10a02:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10a06:	9e03      	ldr	r6, [sp, #12]
   10a08:	e004      	b.n	10a14 <_svfprintf_r+0x10ec>
   10a0a:	3108      	adds	r1, #8
   10a0c:	3c10      	subs	r4, #16
   10a0e:	2c10      	cmp	r4, #16
   10a10:	f340 8104 	ble.w	10c1c <_svfprintf_r+0x12f4>
   10a14:	3201      	adds	r2, #1
   10a16:	3310      	adds	r3, #16
   10a18:	2a07      	cmp	r2, #7
   10a1a:	931d      	str	r3, [sp, #116]	; 0x74
   10a1c:	921c      	str	r2, [sp, #112]	; 0x70
   10a1e:	600f      	str	r7, [r1, #0]
   10a20:	604d      	str	r5, [r1, #4]
   10a22:	ddf2      	ble.n	10a0a <_svfprintf_r+0x10e2>
   10a24:	aa1b      	add	r2, sp, #108	; 0x6c
   10a26:	4631      	mov	r1, r6
   10a28:	4640      	mov	r0, r8
   10a2a:	f000 fa35 	bl	10e98 <__ssprint_r>
   10a2e:	2800      	cmp	r0, #0
   10a30:	f47f a870 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10a36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10a38:	a928      	add	r1, sp, #160	; 0xa0
   10a3a:	e7e7      	b.n	10a0c <_svfprintf_r+0x10e4>
   10a3c:	aa1b      	add	r2, sp, #108	; 0x6c
   10a3e:	9903      	ldr	r1, [sp, #12]
   10a40:	9805      	ldr	r0, [sp, #20]
   10a42:	f000 fa29 	bl	10e98 <__ssprint_r>
   10a46:	2800      	cmp	r0, #0
   10a48:	f47f a864 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10a4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10a4e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10a52:	e41f      	b.n	10294 <_svfprintf_r+0x96c>
   10a54:	2140      	movs	r1, #64	; 0x40
   10a56:	9805      	ldr	r0, [sp, #20]
   10a58:	f7fc f926 	bl	cca8 <_malloc_r>
   10a5c:	9a03      	ldr	r2, [sp, #12]
   10a5e:	6010      	str	r0, [r2, #0]
   10a60:	6110      	str	r0, [r2, #16]
   10a62:	2800      	cmp	r0, #0
   10a64:	f000 81ed 	beq.w	10e42 <_svfprintf_r+0x151a>
   10a68:	9a03      	ldr	r2, [sp, #12]
   10a6a:	2340      	movs	r3, #64	; 0x40
   10a6c:	6153      	str	r3, [r2, #20]
   10a6e:	f7fe bf74 	b.w	f95a <_svfprintf_r+0x32>
   10a72:	aa19      	add	r2, sp, #100	; 0x64
   10a74:	ab16      	add	r3, sp, #88	; 0x58
   10a76:	9201      	str	r2, [sp, #4]
   10a78:	9300      	str	r3, [sp, #0]
   10a7a:	4642      	mov	r2, r8
   10a7c:	ab15      	add	r3, sp, #84	; 0x54
   10a7e:	2103      	movs	r1, #3
   10a80:	eeb0 0b4a 	vmov.f64	d0, d10
   10a84:	9805      	ldr	r0, [sp, #20]
   10a86:	f7fe f90b 	bl	eca0 <_dtoa_r>
   10a8a:	4644      	mov	r4, r8
   10a8c:	4606      	mov	r6, r0
   10a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a90:	2b46      	cmp	r3, #70	; 0x46
   10a92:	eb06 0104 	add.w	r1, r6, r4
   10a96:	f47f af1b 	bne.w	108d0 <_svfprintf_r+0xfa8>
   10a9a:	7833      	ldrb	r3, [r6, #0]
   10a9c:	2b30      	cmp	r3, #48	; 0x30
   10a9e:	f000 818d 	beq.w	10dbc <_svfprintf_r+0x1494>
   10aa2:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10aa4:	4421      	add	r1, r4
   10aa6:	e713      	b.n	108d0 <_svfprintf_r+0xfa8>
   10aa8:	aa1b      	add	r2, sp, #108	; 0x6c
   10aaa:	9903      	ldr	r1, [sp, #12]
   10aac:	9805      	ldr	r0, [sp, #20]
   10aae:	f000 f9f3 	bl	10e98 <__ssprint_r>
   10ab2:	2800      	cmp	r0, #0
   10ab4:	f47f a82e 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10ab8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10aba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10abc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10ac0:	e77d      	b.n	109be <_svfprintf_r+0x1096>
   10ac2:	f1b8 0f00 	cmp.w	r8, #0
   10ac6:	bf08      	it	eq
   10ac8:	f04f 0801 	moveq.w	r8, #1
   10acc:	e6d3      	b.n	10876 <_svfprintf_r+0xf4e>
   10ace:	9309      	str	r3, [sp, #36]	; 0x24
   10ad0:	e6a4      	b.n	1081c <_svfprintf_r+0xef4>
   10ad2:	9309      	str	r3, [sp, #36]	; 0x24
   10ad4:	4617      	mov	r7, r2
   10ad6:	f7ff ba7b 	b.w	ffd0 <_svfprintf_r+0x6a8>
   10ada:	4630      	mov	r0, r6
   10adc:	f7fd f8f0 	bl	dcc0 <strlen>
   10ae0:	46a0      	mov	r8, r4
   10ae2:	4603      	mov	r3, r0
   10ae4:	9008      	str	r0, [sp, #32]
   10ae6:	f7ff bb61 	b.w	101ac <_svfprintf_r+0x884>
   10aea:	aa1b      	add	r2, sp, #108	; 0x6c
   10aec:	9903      	ldr	r1, [sp, #12]
   10aee:	9805      	ldr	r0, [sp, #20]
   10af0:	f000 f9d2 	bl	10e98 <__ssprint_r>
   10af4:	2800      	cmp	r0, #0
   10af6:	f47f a80d 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10afa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10afc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10afe:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10b02:	980d      	ldr	r0, [sp, #52]	; 0x34
   10b04:	f8c9 6000 	str.w	r6, [r9]
   10b08:	3201      	adds	r2, #1
   10b0a:	4403      	add	r3, r0
   10b0c:	2a07      	cmp	r2, #7
   10b0e:	931d      	str	r3, [sp, #116]	; 0x74
   10b10:	921c      	str	r2, [sp, #112]	; 0x70
   10b12:	f8c9 0004 	str.w	r0, [r9, #4]
   10b16:	f77f a9b6 	ble.w	fe86 <_svfprintf_r+0x55e>
   10b1a:	e476      	b.n	1040a <_svfprintf_r+0xae2>
   10b1c:	272d      	movs	r7, #45	; 0x2d
   10b1e:	9304      	str	r3, [sp, #16]
   10b20:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10b24:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   10b28:	f04f 0800 	mov.w	r8, #0
   10b2c:	f7ff b8ef 	b.w	fd0e <_svfprintf_r+0x3e6>
   10b30:	9709      	str	r7, [sp, #36]	; 0x24
   10b32:	461f      	mov	r7, r3
   10b34:	f7ff ba4c 	b.w	ffd0 <_svfprintf_r+0x6a8>
   10b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10b3a:	1cda      	adds	r2, r3, #3
   10b3c:	db02      	blt.n	10b44 <_svfprintf_r+0x121c>
   10b3e:	4598      	cmp	r8, r3
   10b40:	f6bf aee4 	bge.w	1090c <_svfprintf_r+0xfe4>
   10b44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b46:	3a02      	subs	r2, #2
   10b48:	920c      	str	r2, [sp, #48]	; 0x30
   10b4a:	3b01      	subs	r3, #1
   10b4c:	2b00      	cmp	r3, #0
   10b4e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10b52:	9315      	str	r3, [sp, #84]	; 0x54
   10b54:	bfb8      	it	lt
   10b56:	425b      	neglt	r3, r3
   10b58:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
   10b5c:	bfb4      	ite	lt
   10b5e:	222d      	movlt	r2, #45	; 0x2d
   10b60:	222b      	movge	r2, #43	; 0x2b
   10b62:	2b09      	cmp	r3, #9
   10b64:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   10b68:	f340 8106 	ble.w	10d78 <_svfprintf_r+0x1450>
   10b6c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
   10b70:	4604      	mov	r4, r0
   10b72:	4a47      	ldr	r2, [pc, #284]	; (10c90 <_svfprintf_r+0x1368>)
   10b74:	fb82 2103 	smull	r2, r1, r2, r3
   10b78:	17da      	asrs	r2, r3, #31
   10b7a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   10b7e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   10b82:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   10b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
   10b8a:	2a09      	cmp	r2, #9
   10b8c:	4613      	mov	r3, r2
   10b8e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   10b92:	dcee      	bgt.n	10b72 <_svfprintf_r+0x124a>
   10b94:	4621      	mov	r1, r4
   10b96:	3330      	adds	r3, #48	; 0x30
   10b98:	b2da      	uxtb	r2, r3
   10b9a:	f801 2d01 	strb.w	r2, [r1, #-1]!
   10b9e:	4288      	cmp	r0, r1
   10ba0:	f240 8162 	bls.w	10e68 <_svfprintf_r+0x1540>
   10ba4:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
   10ba8:	4623      	mov	r3, r4
   10baa:	e001      	b.n	10bb0 <_svfprintf_r+0x1288>
   10bac:	f813 2b01 	ldrb.w	r2, [r3], #1
   10bb0:	f801 2b01 	strb.w	r2, [r1], #1
   10bb4:	4298      	cmp	r0, r3
   10bb6:	d1f9      	bne.n	10bac <_svfprintf_r+0x1284>
   10bb8:	1c43      	adds	r3, r0, #1
   10bba:	1b1b      	subs	r3, r3, r4
   10bbc:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
   10bc0:	4413      	add	r3, r2
   10bc2:	aa17      	add	r2, sp, #92	; 0x5c
   10bc4:	1a9b      	subs	r3, r3, r2
   10bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10bc8:	9311      	str	r3, [sp, #68]	; 0x44
   10bca:	2a01      	cmp	r2, #1
   10bcc:	4413      	add	r3, r2
   10bce:	9308      	str	r3, [sp, #32]
   10bd0:	f340 80ff 	ble.w	10dd2 <_svfprintf_r+0x14aa>
   10bd4:	9b08      	ldr	r3, [sp, #32]
   10bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10bd8:	4413      	add	r3, r2
   10bda:	2200      	movs	r2, #0
   10bdc:	9308      	str	r3, [sp, #32]
   10bde:	920e      	str	r2, [sp, #56]	; 0x38
   10be0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10be4:	e6a1      	b.n	1092a <_svfprintf_r+0x1002>
   10be6:	460b      	mov	r3, r1
   10be8:	e682      	b.n	108f0 <_svfprintf_r+0xfc8>
   10bea:	aa1b      	add	r2, sp, #108	; 0x6c
   10bec:	9903      	ldr	r1, [sp, #12]
   10bee:	9805      	ldr	r0, [sp, #20]
   10bf0:	f000 f952 	bl	10e98 <__ssprint_r>
   10bf4:	2800      	cmp	r0, #0
   10bf6:	f47e af8d 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10bfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10bfc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10c00:	e483      	b.n	1050a <_svfprintf_r+0xbe2>
   10c02:	aa1b      	add	r2, sp, #108	; 0x6c
   10c04:	9903      	ldr	r1, [sp, #12]
   10c06:	9805      	ldr	r0, [sp, #20]
   10c08:	f000 f946 	bl	10e98 <__ssprint_r>
   10c0c:	2800      	cmp	r0, #0
   10c0e:	f47e af81 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10c12:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10c16:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10c1a:	e579      	b.n	10710 <_svfprintf_r+0xde8>
   10c1c:	464e      	mov	r6, r9
   10c1e:	4689      	mov	r9, r1
   10c20:	3201      	adds	r2, #1
   10c22:	4423      	add	r3, r4
   10c24:	2a07      	cmp	r2, #7
   10c26:	931d      	str	r3, [sp, #116]	; 0x74
   10c28:	921c      	str	r2, [sp, #112]	; 0x70
   10c2a:	f8c9 7000 	str.w	r7, [r9]
   10c2e:	f8c9 4004 	str.w	r4, [r9, #4]
   10c32:	f73f af5a 	bgt.w	10aea <_svfprintf_r+0x11c2>
   10c36:	f109 0908 	add.w	r9, r9, #8
   10c3a:	e762      	b.n	10b02 <_svfprintf_r+0x11da>
   10c3c:	aa1b      	add	r2, sp, #108	; 0x6c
   10c3e:	9903      	ldr	r1, [sp, #12]
   10c40:	9805      	ldr	r0, [sp, #20]
   10c42:	f000 f929 	bl	10e98 <__ssprint_r>
   10c46:	2800      	cmp	r0, #0
   10c48:	f47e af64 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10c4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10c4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10c52:	1a8a      	subs	r2, r1, r2
   10c54:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10c58:	e572      	b.n	10740 <_svfprintf_r+0xe18>
   10c5a:	2d06      	cmp	r5, #6
   10c5c:	462b      	mov	r3, r5
   10c5e:	bf28      	it	cs
   10c60:	2306      	movcs	r3, #6
   10c62:	9308      	str	r3, [sp, #32]
   10c64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10c68:	46b0      	mov	r8, r6
   10c6a:	9709      	str	r7, [sp, #36]	; 0x24
   10c6c:	960e      	str	r6, [sp, #56]	; 0x38
   10c6e:	4637      	mov	r7, r6
   10c70:	9304      	str	r3, [sp, #16]
   10c72:	4e08      	ldr	r6, [pc, #32]	; (10c94 <_svfprintf_r+0x136c>)
   10c74:	f7ff b84a 	b.w	fd0c <_svfprintf_r+0x3e4>
   10c78:	469b      	mov	fp, r3
   10c7a:	f7ff b9ea 	b.w	10052 <_svfprintf_r+0x72a>
   10c7e:	272d      	movs	r7, #45	; 0x2d
   10c80:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   10c84:	f7ff b833 	b.w	fcee <_svfprintf_r+0x3c6>
   10c88:	20001878 	.word	0x20001878
   10c8c:	20001eec 	.word	0x20001eec
   10c90:	66666667 	.word	0x66666667
   10c94:	20001f34 	.word	0x20001f34
   10c98:	aa19      	add	r2, sp, #100	; 0x64
   10c9a:	ab16      	add	r3, sp, #88	; 0x58
   10c9c:	9201      	str	r2, [sp, #4]
   10c9e:	9300      	str	r3, [sp, #0]
   10ca0:	2103      	movs	r1, #3
   10ca2:	ab15      	add	r3, sp, #84	; 0x54
   10ca4:	4642      	mov	r2, r8
   10ca6:	eeb0 0b4a 	vmov.f64	d0, d10
   10caa:	9805      	ldr	r0, [sp, #20]
   10cac:	f7fd fff8 	bl	eca0 <_dtoa_r>
   10cb0:	4644      	mov	r4, r8
   10cb2:	4606      	mov	r6, r0
   10cb4:	eb00 0108 	add.w	r1, r0, r8
   10cb8:	e6ef      	b.n	10a9a <_svfprintf_r+0x1172>
   10cba:	f04f 0806 	mov.w	r8, #6
   10cbe:	e5da      	b.n	10876 <_svfprintf_r+0xf4e>
   10cc0:	eeb1 ab48 	vneg.f64	d10, d8
   10cc4:	272d      	movs	r7, #45	; 0x2d
   10cc6:	e5e1      	b.n	1088c <_svfprintf_r+0xf64>
   10cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10ccc:	4413      	add	r3, r2
   10cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10cd0:	9308      	str	r3, [sp, #32]
   10cd2:	2a00      	cmp	r2, #0
   10cd4:	f340 8086 	ble.w	10de4 <_svfprintf_r+0x14bc>
   10cd8:	2267      	movs	r2, #103	; 0x67
   10cda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10cde:	920c      	str	r2, [sp, #48]	; 0x30
   10ce0:	e623      	b.n	1092a <_svfprintf_r+0x1002>
   10ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ce4:	2b47      	cmp	r3, #71	; 0x47
   10ce6:	f47f adf2 	bne.w	108ce <_svfprintf_r+0xfa6>
   10cea:	f01b 0f01 	tst.w	fp, #1
   10cee:	f47f aece 	bne.w	10a8e <_svfprintf_r+0x1166>
   10cf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10cf4:	2d47      	cmp	r5, #71	; 0x47
   10cf6:	eba3 0306 	sub.w	r3, r3, r6
   10cfa:	930d      	str	r3, [sp, #52]	; 0x34
   10cfc:	f43f af1c 	beq.w	10b38 <_svfprintf_r+0x1210>
   10d00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10d02:	e722      	b.n	10b4a <_svfprintf_r+0x1222>
   10d04:	2b00      	cmp	r3, #0
   10d06:	461a      	mov	r2, r3
   10d08:	930e      	str	r3, [sp, #56]	; 0x38
   10d0a:	dd73      	ble.n	10df4 <_svfprintf_r+0x14cc>
   10d0c:	f1b8 0f00 	cmp.w	r8, #0
   10d10:	d14b      	bne.n	10daa <_svfprintf_r+0x1482>
   10d12:	f01b 0f01 	tst.w	fp, #1
   10d16:	d148      	bne.n	10daa <_svfprintf_r+0x1482>
   10d18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10d1c:	9208      	str	r2, [sp, #32]
   10d1e:	e604      	b.n	1092a <_svfprintf_r+0x1002>
   10d20:	f01b 0f01 	tst.w	fp, #1
   10d24:	4647      	mov	r7, r8
   10d26:	d005      	beq.n	10d34 <_svfprintf_r+0x140c>
   10d28:	ae38      	add	r6, sp, #224	; 0xe0
   10d2a:	2330      	movs	r3, #48	; 0x30
   10d2c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   10d30:	f7ff b956 	b.w	ffe0 <_svfprintf_r+0x6b8>
   10d34:	f8cd 8020 	str.w	r8, [sp, #32]
   10d38:	ae28      	add	r6, sp, #160	; 0xa0
   10d3a:	f7ff b954 	b.w	ffe6 <_svfprintf_r+0x6be>
   10d3e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   10d42:	9709      	str	r7, [sp, #36]	; 0x24
   10d44:	9304      	str	r3, [sp, #16]
   10d46:	9508      	str	r5, [sp, #32]
   10d48:	4680      	mov	r8, r0
   10d4a:	900e      	str	r0, [sp, #56]	; 0x38
   10d4c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   10d50:	f7fe bfdc 	b.w	fd0c <_svfprintf_r+0x3e4>
   10d54:	aa1b      	add	r2, sp, #108	; 0x6c
   10d56:	9903      	ldr	r1, [sp, #12]
   10d58:	9805      	ldr	r0, [sp, #20]
   10d5a:	f000 f89d 	bl	10e98 <__ssprint_r>
   10d5e:	2800      	cmp	r0, #0
   10d60:	f47e aed8 	bne.w	fb14 <_svfprintf_r+0x1ec>
   10d64:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10d66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10d68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10d6a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10d6e:	e63d      	b.n	109ec <_svfprintf_r+0x10c4>
   10d70:	46a2      	mov	sl, r4
   10d72:	2500      	movs	r5, #0
   10d74:	f7fe be33 	b.w	f9de <_svfprintf_r+0xb6>
   10d78:	3330      	adds	r3, #48	; 0x30
   10d7a:	2230      	movs	r2, #48	; 0x30
   10d7c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
   10d80:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
   10d84:	ab18      	add	r3, sp, #96	; 0x60
   10d86:	e71c      	b.n	10bc2 <_svfprintf_r+0x129a>
   10d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d8c:	4413      	add	r3, r2
   10d8e:	2267      	movs	r2, #103	; 0x67
   10d90:	9308      	str	r3, [sp, #32]
   10d92:	920c      	str	r2, [sp, #48]	; 0x30
   10d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10d98:	e5c7      	b.n	1092a <_svfprintf_r+0x1002>
   10d9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10d9c:	e5a8      	b.n	108f0 <_svfprintf_r+0xfc8>
   10d9e:	4e3c      	ldr	r6, [pc, #240]	; (10e90 <_svfprintf_r+0x1568>)
   10da0:	4b3c      	ldr	r3, [pc, #240]	; (10e94 <_svfprintf_r+0x156c>)
   10da2:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   10da6:	f7fe bfa4 	b.w	fcf2 <_svfprintf_r+0x3ca>
   10daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10dae:	189d      	adds	r5, r3, r2
   10db0:	eb05 0308 	add.w	r3, r5, r8
   10db4:	9308      	str	r3, [sp, #32]
   10db6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10dba:	e5b6      	b.n	1092a <_svfprintf_r+0x1002>
   10dbc:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10dc4:	f43f ae6d 	beq.w	10aa2 <_svfprintf_r+0x117a>
   10dc8:	f1c4 0401 	rsb	r4, r4, #1
   10dcc:	9415      	str	r4, [sp, #84]	; 0x54
   10dce:	4421      	add	r1, r4
   10dd0:	e57e      	b.n	108d0 <_svfprintf_r+0xfa8>
   10dd2:	f01b 0301 	ands.w	r3, fp, #1
   10dd6:	f47f aefd 	bne.w	10bd4 <_svfprintf_r+0x12ac>
   10dda:	930e      	str	r3, [sp, #56]	; 0x38
   10ddc:	9b08      	ldr	r3, [sp, #32]
   10dde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10de2:	e5a2      	b.n	1092a <_svfprintf_r+0x1002>
   10de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10de6:	9a08      	ldr	r2, [sp, #32]
   10de8:	f1c3 0301 	rsb	r3, r3, #1
   10dec:	441a      	add	r2, r3
   10dee:	4613      	mov	r3, r2
   10df0:	9208      	str	r2, [sp, #32]
   10df2:	e771      	b.n	10cd8 <_svfprintf_r+0x13b0>
   10df4:	f1b8 0f00 	cmp.w	r8, #0
   10df8:	d102      	bne.n	10e00 <_svfprintf_r+0x14d8>
   10dfa:	f01b 0f01 	tst.w	fp, #1
   10dfe:	d007      	beq.n	10e10 <_svfprintf_r+0x14e8>
   10e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10e02:	1c5d      	adds	r5, r3, #1
   10e04:	eb05 0308 	add.w	r3, r5, r8
   10e08:	9308      	str	r3, [sp, #32]
   10e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10e0e:	e58c      	b.n	1092a <_svfprintf_r+0x1002>
   10e10:	2301      	movs	r3, #1
   10e12:	9308      	str	r3, [sp, #32]
   10e14:	e589      	b.n	1092a <_svfprintf_r+0x1002>
   10e16:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e18:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10e1c:	6805      	ldr	r5, [r0, #0]
   10e1e:	3004      	adds	r0, #4
   10e20:	2d00      	cmp	r5, #0
   10e22:	9009      	str	r0, [sp, #36]	; 0x24
   10e24:	46a2      	mov	sl, r4
   10e26:	f6be add8 	bge.w	f9da <_svfprintf_r+0xb2>
   10e2a:	f04f 35ff 	mov.w	r5, #4294967295
   10e2e:	f7fe bdd4 	b.w	f9da <_svfprintf_r+0xb2>
   10e32:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e36:	f7ff b98d 	b.w	10154 <_svfprintf_r+0x82c>
   10e3a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e3e:	f7ff b9cf 	b.w	101e0 <_svfprintf_r+0x8b8>
   10e42:	9a05      	ldr	r2, [sp, #20]
   10e44:	230c      	movs	r3, #12
   10e46:	6013      	str	r3, [r2, #0]
   10e48:	f04f 30ff 	mov.w	r0, #4294967295
   10e4c:	f7fe be6b 	b.w	fb26 <_svfprintf_r+0x1fe>
   10e50:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e54:	f7ff b8d4 	b.w	10000 <_svfprintf_r+0x6d8>
   10e58:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e5c:	f7ff b8a3 	b.w	ffa6 <_svfprintf_r+0x67e>
   10e60:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e64:	f7ff b952 	b.w	1010c <_svfprintf_r+0x7e4>
   10e68:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
   10e6c:	e6a9      	b.n	10bc2 <_svfprintf_r+0x129a>
   10e6e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e72:	f7fe be62 	b.w	fb3a <_svfprintf_r+0x212>
   10e76:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e7a:	f7ff b862 	b.w	ff42 <_svfprintf_r+0x61a>
   10e7e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e82:	f7fe bf16 	b.w	fcb2 <_svfprintf_r+0x38a>
   10e86:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10e8a:	f7fe bed0 	b.w	fc2e <_svfprintf_r+0x306>
   10e8e:	bf00      	nop
   10e90:	20001f08 	.word	0x20001f08
   10e94:	20001f04 	.word	0x20001f04

00010e98 <__ssprint_r>:
   10e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	6893      	ldr	r3, [r2, #8]
   10e9e:	b083      	sub	sp, #12
   10ea0:	4690      	mov	r8, r2
   10ea2:	2b00      	cmp	r3, #0
   10ea4:	d072      	beq.n	10f8c <__ssprint_r+0xf4>
   10ea6:	4683      	mov	fp, r0
   10ea8:	f04f 0900 	mov.w	r9, #0
   10eac:	6816      	ldr	r6, [r2, #0]
   10eae:	6808      	ldr	r0, [r1, #0]
   10eb0:	688b      	ldr	r3, [r1, #8]
   10eb2: