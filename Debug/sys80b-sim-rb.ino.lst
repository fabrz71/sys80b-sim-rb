
C:\Users\Fabrizio\AppData\Local\Temp\VMBuilds\sys80b-sim-rb\teensy40\Debug/sys80b-sim-rb.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 40 50 01 00 00 00 00 00                 ...`@P......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b74      	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a74      	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4874      	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a74      	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a73      	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	4974      	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	428a      	cmp	r2, r1
6000104e:	d00f      	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	4b73      	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	429a      	cmp	r2, r3
60001054:	d20c      	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	43d4      	mvns	r4, r2
60001058:	4608      	mov	r0, r1
6000105a:	4423      	add	r3, r4
6000105c:	f023 0303 	bic.w	r3, r3, #3
60001060:	3304      	adds	r3, #4
60001062:	440b      	add	r3, r1
		*dest++ = *src++;
60001064:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000106a:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	d1f9      	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	4a6c      	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	496d      	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	428a      	cmp	r2, r1
60001076:	d00f      	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	4b6c      	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	429a      	cmp	r2, r3
6000107c:	d20c      	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	43d4      	mvns	r4, r2
60001080:	4608      	mov	r0, r1
60001082:	4423      	add	r3, r4
60001084:	f023 0303 	bic.w	r3, r3, #3
60001088:	3304      	adds	r3, #4
6000108a:	440b      	add	r3, r1
		*dest++ = *src++;
6000108c:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001092:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	d1f9      	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	4a65      	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	4b66      	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	429a      	cmp	r2, r3
6000109e:	d20b      	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	43d0      	mvns	r0, r2
600010a2:	4611      	mov	r1, r2
		*dest++ = 0;
600010a4:	2400      	movs	r4, #0
600010a6:	4403      	add	r3, r0
600010a8:	f023 0303 	bic.w	r3, r3, #3
600010ac:	3304      	adds	r3, #4
600010ae:	4413      	add	r3, r2
600010b0:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	428b      	cmp	r3, r1
600010b6:	d1fb      	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	4a5f      	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010be:	4b5f      	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	6011      	str	r1, [r2, #0]
600010c2:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010c6:	4a5e      	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	f843 2f04 	str.w	r2, [r3, #4]!
600010cc:	4299      	cmp	r1, r3
600010ce:	d1fb      	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	4b5c      	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	2180      	movs	r1, #128	; 0x80
600010d4:	4a5c      	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	f803 1b01 	strb.w	r1, [r3], #1
600010da:	4293      	cmp	r3, r2
600010dc:	d1fb      	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	4c5b      	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	4e5a      	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	4b56      	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	4943      	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	69f3      	ldr	r3, [r6, #28]
60001112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6000111a:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	6a73      	ldr	r3, [r6, #36]	; 0x24
6000111e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001126:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	f000 f8b4 	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	4a48      	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	4b48      	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	4949      	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	4946      	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	4a46      	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	4847      	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	4844      	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	4944      	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	f043 0301 	orr.w	r3, r3, #1
6000116c:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	6803      	ldr	r3, [r0, #0]
60001170:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	f000 f8f3 	bl	6000135c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	4840      	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	f000 fb72 	bl	60001870 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	bf00      	nop
6000118e:	bf00      	nop
60001190:	bf00      	nop
60001192:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	4a3a      	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	4b39      	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011b4:	07d2      	lsls	r2, r2, #31
600011b6:	d408      	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	4932      	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011c4:	f042 0201 	orr.w	r2, r2, #1
600011c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	4a2e      	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	4c2f      	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	6893      	ldr	r3, [r2, #8]
600011d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011d4:	6093      	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	f000 fb43 	bl	60001860 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	2b13      	cmp	r3, #19
600011de:	d9fc      	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	f000 f97c 	bl	600014dc <usb_init>
	analog_init();
600011e4:	f000 f9f0 	bl	600015c8 <analog_init>
	pwm_init();
600011e8:	f000 fb4a 	bl	60001880 <__pwm_init_veneer>
	tempmon_init();
600011ec:	f000 f8e8 	bl	600013c0 <tempmon_init>

	startup_late_hook();
600011f0:	f000 fb2e 	bl	60001850 <__startup_late_hook_veneer>
600011f4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600011fa:	d3fb      	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	f000 fb24 	bl	60001848 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	f000 fb32 	bl	60001868 <__main_veneer>
60001204:	e7fe      	b.n	60001204 <ResetHandler+0x1d0>
60001206:	bf00      	nop
60001208:	400ac000 	.word	0x400ac000
6000120c:	aaaaaabf 	.word	0xaaaaaabf
60001210:	00200007 	.word	0x00200007
60001214:	20068000 	.word	0x20068000
60001218:	00000000 	.word	0x00000000
6000121c:	600018a0 	.word	0x600018a0
60001220:	00010f40 	.word	0x00010f40
60001224:	20000000 	.word	0x20000000
60001228:	600127ec 	.word	0x600127ec
6000122c:	20002860 	.word	0x20002860
60001230:	20002860 	.word	0x20002860
60001234:	200052c0 	.word	0x200052c0
60001238:	e000ed88 	.word	0xe000ed88
6000123c:	20002ffc 	.word	0x20002ffc
60001240:	0000aa45 	.word	0x0000aa45
60001244:	e000e400 	.word	0xe000e400
60001248:	e000e4a0 	.word	0xe000e4a0
6000124c:	400d8000 	.word	0x400d8000
60001250:	400fc000 	.word	0x400fc000
60001254:	e000ed08 	.word	0xe000ed08
60001258:	e000e014 	.word	0xe000e014
6000125c:	e000e018 	.word	0xe000e018
60001260:	0000bcbd 	.word	0x0000bcbd
60001264:	e000edfc 	.word	0xe000edfc
60001268:	20200000 	.word	0x20200000
6000126c:	0000bdc1 	.word	0x0000bdc1
60001270:	e0001000 	.word	0xe0001000
60001274:	e0001004 	.word	0xe0001004
60001278:	20002c0c 	.word	0x20002c0c
6000127c:	23c34600 	.word	0x23c34600
60001280:	40084000 	.word	0x40084000
60001284:	400d4000 	.word	0x400d4000
60001288:	56c00000 	.word	0x56c00000
6000128c:	20002c14 	.word	0x20002c14
60001290:	20003000 	.word	0x20003000
60001294:	2018101b 	.word	0x2018101b
60001298:	13110d0c 	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	b5f0      	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	4a1d      	ldr	r2, [pc, #116]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	2100      	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	4b1d      	ldr	r3, [pc, #116]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	f04f 0e10 	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	481c      	ldr	r0, [pc, #112]	; (6000131c <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	2401      	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	4f1c      	ldr	r7, [pc, #112]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	4e1d      	ldr	r6, [pc, #116]	; (60001324 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b0:	4d1d      	ldr	r5, [pc, #116]	; (60001328 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b2:	6001      	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	4f1b      	ldr	r7, [pc, #108]	; (6000132c <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012be:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c0:	4e1b      	ldr	r6, [pc, #108]	; (60001330 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	4d1c      	ldr	r5, [pc, #112]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	4f1b      	ldr	r7, [pc, #108]	; (60001338 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	4e1b      	ldr	r6, [pc, #108]	; (6000133c <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012ce:	4d1c      	ldr	r5, [pc, #112]	; (60001340 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d0:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	4f1b      	ldr	r7, [pc, #108]	; (60001344 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d6:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d8:	4e1b      	ldr	r6, [pc, #108]	; (60001348 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	4d1c      	ldr	r5, [pc, #112]	; (6000134c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012de:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e0:	4f1b      	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e2:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012e4:	4e1b      	ldr	r6, [pc, #108]	; (60001354 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012e6:	4d1c      	ldr	r5, [pc, #112]	; (60001358 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e8:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012ea:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012ec:	601d      	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ee:	6004      	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	f3bf 8f4f 	dsb	sy
	asm("isb");
600012f4:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012fc:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001300:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001304:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001308:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
6000130c:	f842 3c88 	str.w	r3, [r2, #-136]
60001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001312:	bf00      	nop
60001314:	e000ed9c 	.word	0xe000ed9c
60001318:	e000eda0 	.word	0xe000eda0
6000131c:	e000ed94 	.word	0xe000ed94
60001320:	03080025 	.word	0x03080025
60001324:	00200011 	.word	0x00200011
60001328:	07020021 	.word	0x07020021
6000132c:	20000012 	.word	0x20000012
60001330:	13080025 	.word	0x13080025
60001334:	20200013 	.word	0x20200013
60001338:	130b0027 	.word	0x130b0027
6000133c:	40000014 	.word	0x40000014
60001340:	13100033 	.word	0x13100033
60001344:	60000015 	.word	0x60000015
60001348:	070b002f 	.word	0x070b002f
6000134c:	70000016 	.word	0x70000016
60001350:	070b0035 	.word	0x070b0035
60001354:	70000017 	.word	0x70000017
60001358:	030b002f 	.word	0x030b002f

6000135c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000135c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135e:	4a17      	ldr	r2, [pc, #92]	; (600013bc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001360:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001362:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001366:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000136a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000136e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001372:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001376:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001378:	f013 0f02 	tst.w	r3, #2
6000137c:	d006      	beq.n	6000138c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000137e:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001380:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001382:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001384:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001386:	f013 0f02 	tst.w	r3, #2
6000138a:	d1f8      	bne.n	6000137e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000138c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001390:	d101      	bne.n	60001396 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	6155      	str	r5, [r2, #20]
			continue;
60001394:	e7ef      	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001396:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000139a:	d101      	bne.n	600013a0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139c:	6156      	str	r6, [r2, #20]
			continue;
6000139e:	e7ea      	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013a0:	2b00      	cmp	r3, #0
600013a2:	dae8      	bge.n	60001376 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013a8:	d001      	beq.n	600013ae <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013aa:	6191      	str	r1, [r2, #24]
			continue;
600013ac:	e7e3      	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ae:	065b      	lsls	r3, r3, #25
600013b0:	d401      	bmi.n	600013b6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b2:	6157      	str	r7, [r2, #20]
			continue;
600013b4:	e7df      	b.n	60001376 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013b6:	bcf0      	pop	{r4, r5, r6, r7}
600013b8:	4770      	bx	lr
600013ba:	bf00      	nop
600013bc:	400d8000 	.word	0x400d8000

600013c0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013c0:	4a3b      	ldr	r2, [pc, #236]	; (600014b0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013c2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600013c6:	493b      	ldr	r1, [pc, #236]	; (600014b4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600013c8:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013ca:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013ce:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600013d2:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013d4:	f8df e100 	ldr.w	lr, [pc, #256]	; 600014d8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013d8:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600013da:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600013de:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600013e2:	4f35      	ldr	r7, [pc, #212]	; (600014b8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013e4:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600013e6:	f3c3 240b 	ubfx	r4, r3, #8, #12
600013ea:	4e34      	ldr	r6, [pc, #208]	; (600014bc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600013ec:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013f0:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600013f4:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013f8:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001400:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001404:	ee07 4a90 	vmov	s15, r4
60001408:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000140c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000140e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001412:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001416:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000141a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000141c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001424:	4d26      	ldr	r5, [pc, #152]	; (600014c0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001426:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000142a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000142c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001430:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001434:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001436:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000143a:	4e22      	ldr	r6, [pc, #136]	; (600014c4 <tempmon_init+0x104>)
6000143c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000143e:	4922      	ldr	r1, [pc, #136]	; (600014c8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001440:	4c22      	ldr	r4, [pc, #136]	; (600014cc <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001442:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001446:	ee07 3a90 	vmov	s15, r3
6000144a:	4b21      	ldr	r3, [pc, #132]	; (600014d0 <tempmon_init+0x110>)
6000144c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001450:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001454:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001458:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000145c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001464:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001468:	ee15 3a90 	vmov	r3, s11
6000146c:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001474:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001478:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147a:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000147e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001486:	430b      	orrs	r3, r1
60001488:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000148c:	ee17 3a90 	vmov	r3, s15
60001490:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001498:	430b      	orrs	r3, r1
6000149a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000149e:	6813      	ldr	r3, [r2, #0]
600014a0:	f043 0302 	orr.w	r3, r3, #2
600014a4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014a6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014a8:	4b0a      	ldr	r3, [pc, #40]	; (600014d4 <tempmon_init+0x114>)
600014aa:	2201      	movs	r2, #1
600014ac:	601a      	str	r2, [r3, #0]
600014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014b0:	400d8180 	.word	0x400d8180
600014b4:	401f4400 	.word	0x401f4400
600014b8:	20002c40 	.word	0x20002c40
600014bc:	20002c44 	.word	0x20002c44
600014c0:	20002c3c 	.word	0x20002c3c
600014c4:	20003000 	.word	0x20003000
600014c8:	0fff0000 	.word	0x0fff0000
600014cc:	e000e440 	.word	0xe000e440
600014d0:	0000ab21 	.word	0x0000ab21
600014d4:	e000e108 	.word	0xe000e108
600014d8:	20002c38 	.word	0x20002c38

600014dc <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600014dc:	4b30      	ldr	r3, [pc, #192]	; (600015a0 <usb_init+0xc4>)
600014de:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600014e2:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600014e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600014e8:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600014ec:	f000 f9a8 	bl	60001840 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014f0:	492c      	ldr	r1, [pc, #176]	; (600015a4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600014f2:	482d      	ldr	r0, [pc, #180]	; (600015a8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014f4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014f8:	4c2c      	ldr	r4, [pc, #176]	; (600015ac <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014fa:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014fe:	4b2c      	ldr	r3, [pc, #176]	; (600015b0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001500:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001504:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001508:	6822      	ldr	r2, [r4, #0]
6000150a:	4013      	ands	r3, r2
6000150c:	b91b      	cbnz	r3, 60001516 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000150e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001512:	079a      	lsls	r2, r3, #30
60001514:	d01a      	beq.n	6000154c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001516:	4b24      	ldr	r3, [pc, #144]	; (600015a8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001518:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000151c:	4a23      	ldr	r2, [pc, #140]	; (600015ac <usb_init+0xd0>)
6000151e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001520:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001522:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001526:	f041 0102 	orr.w	r1, r1, #2
6000152a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000152e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001532:	079b      	lsls	r3, r3, #30
60001534:	d4fb      	bmi.n	6000152e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001536:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000153a:	491e      	ldr	r1, [pc, #120]	; (600015b4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000153c:	4b1b      	ldr	r3, [pc, #108]	; (600015ac <usb_init+0xd0>)
6000153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001542:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001544:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001546:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001548:	f000 f986 	bl	60001858 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000154c:	4d1a      	ldr	r5, [pc, #104]	; (600015b8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000154e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001550:	4b16      	ldr	r3, [pc, #88]	; (600015ac <usb_init+0xd0>)
60001552:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001556:	4c14      	ldr	r4, [pc, #80]	; (600015a8 <usb_init+0xcc>)
60001558:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000155a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000155c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000155e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001560:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001562:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001566:	f44f 7220 	mov.w	r2, #640	; 0x280
6000156a:	f000 f985 	bl	60001878 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000156e:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001572:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001576:	f240 1343 	movw	r3, #323	; 0x143
6000157a:	4a10      	ldr	r2, [pc, #64]	; (600015bc <usb_init+0xe0>)
6000157c:	4910      	ldr	r1, [pc, #64]	; (600015c0 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000157e:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001580:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001582:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001586:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000158a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000158e:	4a0d      	ldr	r2, [pc, #52]	; (600015c4 <usb_init+0xe8>)
60001590:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001594:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001596:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001598:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
6000159c:	bd70      	pop	{r4, r5, r6, pc}
6000159e:	bf00      	nop
600015a0:	400d8000 	.word	0x400d8000
600015a4:	400fc000 	.word	0x400fc000
600015a8:	402e0000 	.word	0x402e0000
600015ac:	400d9000 	.word	0x400d9000
600015b0:	001e1c00 	.word	0x001e1c00
600015b4:	e000e28c 	.word	0xe000e28c
600015b8:	20005000 	.word	0x20005000
600015bc:	20003000 	.word	0x20003000
600015c0:	0000ac7d 	.word	0x0000ac7d
600015c4:	e000e10c 	.word	0xe000e10c

600015c8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015c8:	4b11      	ldr	r3, [pc, #68]	; (60001610 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015ca:	4912      	ldr	r1, [pc, #72]	; (60001614 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015ce:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015d0:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600015d4:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015d6:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015d8:	f240 65b7 	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600015dc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600015de:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600015e0:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600015e4:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015e6:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600015e8:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
600015ec:	061b      	lsls	r3, r3, #24
600015ee:	d4fc      	bmi.n	600015ea <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015f0:	4b09      	ldr	r3, [pc, #36]	; (60001618 <analog_init+0x50>)
600015f2:	f240 60b7 	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600015f6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600015f8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015fa:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600015fc:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600015fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001600:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001604:	d1fb      	bne.n	600015fe <analog_init+0x36>
	calibrating = 0;
60001606:	4a05      	ldr	r2, [pc, #20]	; (6000161c <analog_init+0x54>)
60001608:	7013      	strb	r3, [r2, #0]
}
6000160a:	bc30      	pop	{r4, r5}
6000160c:	4770      	bx	lr
6000160e:	bf00      	nop
60001610:	400fc000 	.word	0x400fc000
60001614:	400c4000 	.word	0x400c4000
60001618:	400c8000 	.word	0x400c8000
6000161c:	20002e7e 	.word	0x20002e7e

60001620 <credits_ratio>:
60001620:	04030201 08070605 02010a09 06050403     ................
60001630:	0a090807 03010201 00000001              ............

6000163c <coins_ratio>:
6000163c:	01010101 01010101 02020101 02020202     ................
6000164c:	02020202 04040303 00000005              ............

60001658 <max_credits>:
60001658:	140f0a08                                ....

6000165c <revByte>:
6000165c:	c0408000 e060a020 d0509010 f070b030     ..@. .`...P.0.p.
6000166c:	c8488808 e868a828 d8589818 f878b838     ..H.(.h...X.8.x.
6000167c:	c4448404 e464a424 d4549414 f474b434     ..D.$.d...T.4.t.
6000168c:	cc4c8c0c ec6cac2c dc5c9c1c fc7cbc3c     ..L.,.l...\.<.|.
6000169c:	c2428202 e262a222 d2529212 f272b232     ..B.".b...R.2.r.
600016ac:	ca4a8a0a ea6aaa2a da5a9a1a fa7aba3a     ..J.*.j...Z.:.z.
600016bc:	c6468606 e666a626 d6569616 f676b636     ..F.&.f...V.6.v.
600016cc:	ce4e8e0e ee6eae2e de5e9e1e fe7ebe3e     ..N...n...^.>.~.
600016dc:	c1418101 e161a121 d1519111 f171b131     ..A.!.a...Q.1.q.
600016ec:	c9498909 e969a929 d9599919 f979b939     ..I.).i...Y.9.y.
600016fc:	c5458505 e565a525 d5559515 f575b535     ..E.%.e...U.5.u.
6000170c:	cd4d8d0d ed6dad2d dd5d9d1d fd7dbd3d     ..M.-.m...].=.}.
6000171c:	c3438303 e363a323 d3539313 f373b333     ..C.#.c...S.3.s.
6000172c:	cb4b8b0b eb6bab2b db5b9b1b fb7bbb3b     ..K.+.k...[.;.{.
6000173c:	c7478707 e767a727 d7579717 f777b737     ..G.'.g...W.7.w.
6000174c:	cf4f8f0f ef6faf2f df5f9f1f ff7fbf3f     ..O./.o..._.?...

6000175c <SdFile::make83Name(char const*, unsigned char*)::data>:
6000175c:	5e3e3c7c 2f3f3d2b 2c3b5d5b 005c222a     |<>^+=?/[];,*"\.

6000176c <usb_string_product_name_default>:
6000176c:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
6000177c:	00610069 0000006c                       i.a.l...

60001784 <usb_string_manufacturer_name_default>:
60001784:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001794:	00690075 006f006e                       u.i.n.o.

6000179c <string0>:
6000179c:	04090304                                ....

600017a0 <usb_config_descriptor_12>:
600017a0:	00430209 c0000102 00040932 02020100     ..C.....2.......
600017b0:	24050001 05011000 01010124 06022404     ...$....$....$..
600017c0:	00062405 82050701 10001003 00010409     .$..............
600017d0:	00000a02 03050700 00004002 02840507     .........@......
600017e0:	00000040                                @...

600017e4 <usb_config_descriptor_480>:
600017e4:	00430209 c0000102 00040932 02020100     ..C.....2.......
600017f4:	24050001 05011000 01010124 06022404     ...$....$....$..
60001804:	00062405 82050701 10001003 00010409     .$..............
60001814:	00000a02 03050700 00020002 02840507     ................
60001824:	00000200                                ....

60001828 <qualifier_descriptor>:
60001828:	0200060a 40000002 ffff0001              .......@....

60001834 <_init>:
60001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001836:	bf00      	nop
60001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000183a:	bc08      	pop	{r3}
6000183c:	469e      	mov	lr, r3
6000183e:	4770      	bx	lr

60001840 <__usb_init_serialnumber_veneer>:
60001840:	f85f f000 	ldr.w	pc, [pc]	; 60001844 <__usb_init_serialnumber_veneer+0x4>
60001844:	0000b461 	.word	0x0000b461

60001848 <____libc_init_array_veneer>:
60001848:	f85f f000 	ldr.w	pc, [pc]	; 6000184c <____libc_init_array_veneer+0x4>
6000184c:	0000c851 	.word	0x0000c851

60001850 <__startup_late_hook_veneer>:
60001850:	f85f f000 	ldr.w	pc, [pc]	; 60001854 <__startup_late_hook_veneer+0x4>
60001854:	0000aa61 	.word	0x0000aa61

60001858 <__delay_veneer>:
60001858:	f85f f000 	ldr.w	pc, [pc]	; 6000185c <__delay_veneer+0x4>
6000185c:	0000a49d 	.word	0x0000a49d

60001860 <__startup_early_hook_veneer>:
60001860:	f85f f000 	ldr.w	pc, [pc]	; 60001864 <__startup_early_hook_veneer+0x4>
60001864:	0000aa5d 	.word	0x0000aa5d

60001868 <__main_veneer>:
60001868:	f85f f000 	ldr.w	pc, [pc]	; 6000186c <__main_veneer+0x4>
6000186c:	0000bde1 	.word	0x0000bde1

60001870 <__set_arm_clock_veneer>:
60001870:	f85f f000 	ldr.w	pc, [pc]	; 60001874 <__set_arm_clock_veneer+0x4>
60001874:	0000a1d9 	.word	0x0000a1d9

60001878 <__memset_veneer>:
60001878:	f85f f000 	ldr.w	pc, [pc]	; 6000187c <__memset_veneer+0x4>
6000187c:	0000cff1 	.word	0x0000cff1

60001880 <__pwm_init_veneer>:
60001880:	f85f f000 	ldr.w	pc, [pc]	; 60001884 <__pwm_init_veneer+0x4>
60001884:	0000c545 	.word	0x0000c545

60001888 <__init_array_start>:
60001888:	00000045 	.word	0x00000045
6000188c:	00000485 	.word	0x00000485
60001890:	00006cb5 	.word	0x00006cb5
60001894:	00007a35 	.word	0x00007a35
60001898:	00007e29 	.word	0x00007e29
6000189c:	00008cf1 	.word	0x00008cf1

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	4c05b510 	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	7823      	ldrb	r3, [r4, #0]
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>
	}
	__enable_irq();
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xe>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	.short	0xbd10
      38:	2860      	cmp	r0, #96	; 0x60
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	0f44      	lsrs	r4, r0, #29
      42:	0001      	.short	0x0001

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	2b00      	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	4718      	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	bf00      	nop
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	2864      	cmp	r0, #100	; 0x64
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	0f44      	lsrs	r4, r0, #29
  ADC2_CFG = mode1;
      72:	0001      	movs	r1, r0
  
  if(num >= 4){
      74:	2860      	cmp	r0, #96	; 0x60
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <checkBoardButtons(unsigned long&) [clone .part.4]>:
    //msg.out(" II");
    checkBoardButtons(ms);
    //msg.out(" III ");
    game->millisRoutine(ms);
}

      7c:	b538      	push	{r3, r4, r5, lr}
      7e:	4605      	mov	r5, r0
void checkBoardButtons(uint32_t& ms) {
    // PRB buttons check
    if ((ms & 0x1f) == 0) { // Debounced on-board buttons update
        //if (board.readButtonsChange()) {
      80:	f0054811 	.word	0xf0054811
      84:	fe05 2802 	cdp2	8, 0, cr2, cr5, cr2, {0}
            ButtonID b = board.readButtons();
            UserKey k;
      88:	2803d018 	.word	0x2803d018
      8c:	4604      	mov	r4, r0
      8e:	d00f      	.short	0xd00f
      90:	2801      	cmp	r0, #1
      92:	d007      	.short	0xd007
                break;
            case ENTER_BUTT:
                msg.outln("ENTER button pressed");
                k = REPLAY_KEY;
                break;
            default:
      94:	2100      	movs	r1, #0
                k = NO_KEY;
            }
      96:	4b0d      	.short	0x4b0d
      98:	462a      	mov	r2, r5
      9a:	6818      	ldr	r0, [r3, #0]
            game->updUserKeyState(k, ms);
        //}
    }
      9c:	4038e8bd 	.word	0x4038e8bd
                msg.outln("ENTER button pressed");
                k = REPLAY_KEY;
                break;
            default:
                k = NO_KEY;
            }
      a0:	f005 b8a0 	b.w	51e4 <Sys80b::updUserKeyState(UserKey, unsigned long&)>
            switch (b) {
            case NEXT_BUTT:
                msg.outln("NEXT button pressed");
                k = RIGHTADV_KEY;
                break;
            case BACK_BUTT:
      a4:	490a      	ldr	r1, [pc, #40]	; (d0 <checkBoardButtons(unsigned long&) [clone .part.4]+0x54>)
      a6:	480b      	ldr	r0, [pc, #44]	; (d4 <checkBoardButtons(unsigned long&) [clone .part.4]+0x58>)
      a8:	fa02f006 	.word	0xfa02f006
                msg.outln("BACK button pressed");
      ac:	2102      	movs	r1, #2
      ae:	e7f2      	b.n	96 <checkBoardButtons(unsigned long&) [clone .part.4]+0x1a>
    if ((ms & 0x1f) == 0) { // Debounced on-board buttons update
        //if (board.readButtonsChange()) {
            ButtonID b = board.readButtons();
            UserKey k;
            switch (b) {
            case NEXT_BUTT:
      b0:	48084909 	.word	0x48084909
      b4:	f006 f9fc 	bl	64b0 <Msg::outln(char const*)>
                msg.outln("NEXT button pressed");
      b8:	e7ec4621 	.word	0xe7ec4621
                break;
            case BACK_BUTT:
                msg.outln("BACK button pressed");
                k = LEFTADV_KEY;
                break;
            case ENTER_BUTT:
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <checkBoardButtons(unsigned long&) [clone .part.4]+0x60>)
      be:	4805      	ldr	r0, [pc, #20]	; (d4 <checkBoardButtons(unsigned long&) [clone .part.4]+0x58>)
      c0:	f006 f9f6 	bl	64b0 <Msg::outln(char const*)>
                msg.outln("ENTER button pressed");
      c4:	2101      	movs	r1, #1
      c6:	e7e6      	b.n	96 <checkBoardButtons(unsigned long&) [clone .part.4]+0x1a>
      c8:	2880      	cmp	r0, #128	; 0x80
      ca:	2000      	movs	r0, #0
      cc:	20002984 	.word	0x20002984
      d0:	0014      	movs	r4, r2
      d2:	2000      	movs	r0, #0
      d4:	20002920 	.word	0x20002920
      d8:	0000      	movs	r0, r0
      da:	2000      	.short	0x2000
      dc:	0028      	movs	r0, r5
      de:	2000      	movs	r0, #0

000000e0 <setup>:

void millisRoutine(uint32_t& ms);
void checkBoardButtons(uint32_t& ms);
void updateLedGrid(lg_mode mode);
bool processSerialInput();

      e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void setup() { 
    loopCounter = 0;
      e4:	4e36      	ldr	r6, [pc, #216]	; (1c0 <setup+0xe0>)
void millisRoutine(uint32_t& ms);
void checkBoardButtons(uint32_t& ms);
void updateLedGrid(lg_mode mode);
bool processSerialInput();

void setup() { 
      e6:	2400      	movs	r4, #0
      e8:	4b36      	ldr	r3, [pc, #216]	; (1c4 <setup+0xe4>)
    loopCounter = 0;
      ea:	4630      	mov	r0, r6
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
    msg.prFreeMem();
#ifndef TEST_PROC
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
      ec:	812cf8df 	.word	0x812cf8df
void millisRoutine(uint32_t& ms);
void checkBoardButtons(uint32_t& ms);
void updateLedGrid(lg_mode mode);
bool processSerialInput();

void setup() { 
      f0:	801c      	strh	r4, [r3, #0]
    loopCounter = 0;
      f2:	f005      	.short	0xf005
      f4:	fe61 2301 	cdp2	3, 6, cr2, cr1, cr1, {0}
    board.begin();
    msg.disableLCDOutput();
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
      f8:	00a0f106 	.word	0x00a0f106
		lcd = &lcdispl; lcdOutputEnabled = true; 
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
      fc:	f886 40be 	strb.w	r4, [r6, #190]	; 0xbe

void setup() { 
    loopCounter = 0;
    board.begin();
    msg.disableLCDOutput();
    msg.setPostDelay(0);
     100:	309cf886 	.word	0x309cf886
	inline void enableSerialOutput() { serialOutputEnabled = true; }
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
	inline void disableLogOutput() { logFileEnabled = false; }
	inline void setPostDelay(uint16_t delay) { mdelay = delay; }
     104:	f8a6 40bc 	strh.w	r4, [r6, #188]	; 0xbc
    board.ledGridMode = LG_MODE;
     108:	fabef006 	.word	0xfabef006
    msg.prFreeMem();
#ifndef TEST_PROC
     10c:	492e      	ldr	r1, [pc, #184]	; (1c8 <setup+0xe8>)
     10e:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
     112:	f006      	.short	0xf006
     114:	f99d f44f 	pli	[sp, #1103]	; 0x44f
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
     118:	6062      	str	r2, [r4, #4]
     11a:	f00b fe69 	bl	bdf0 <operator new(unsigned int)>
     11e:	4631      	.short	0x4631
     120:	4604      	mov	r4, r0
     122:	f000      	.short	0xf000
     124:	fb61 4b29 			; <UNDEFINED> instruction: 0xfb614b29
    game = new _GAME_IMPLEM_(board);
    sys = game;
     128:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
     12c:	4928      	ldr	r1, [pc, #160]	; (1d0 <setup+0xf0>)
    board.ledGridMode = LG_MODE;
    msg.prFreeMem();
#ifndef TEST_PROC
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
    game = new _GAME_IMPLEM_(board);
     12e:	601c      	str	r4, [r3, #0]
    msg.setPostDelay(0);
    board.ledGridMode = LG_MODE;
    msg.prFreeMem();
#ifndef TEST_PROC
    msg.outln(F("Game instantiation..."));
    //game = new _GAME_IMPLEM_();
     130:	4000f8c8 	.word	0x4000f8c8
    game = new _GAME_IMPLEM_(board);
    sys = game;
     134:	f006 f98c 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
    msg.outln(F("Connecting hardware..."));
    //delay(100);
    //sys->connectHardware(board);
     138:	f00b2088 	.word	0xf00b2088
     13c:	fe59 4a25 	vselvs.f32	s9, s18, s11
	int _partsCount;
	//byte firstArgIdx; // first argument index (0 if none)

public:
	CmdExecutor() { _hw = nullptr; _sys = nullptr; };
	CmdExecutor(Board_Sys80b* board, PinGame* sys) { _hw = board; _sys = sys; };
     140:	4b25      	ldr	r3, [pc, #148]	; (1d8 <setup+0xf8>)
     142:	4604      	mov	r4, r0
     144:	f1004925 	.word	0xf1004925
     148:	0540      	lsls	r0, r0, #21
     14a:	6002      	str	r2, [r0, #0]
     14c:	f100 0780 	add.w	r7, r0, #128	; 0x80
     150:	4a23      	ldr	r2, [pc, #140]	; (1e0 <setup+0x100>)
     152:	6043      	str	r3, [r0, #4]
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <setup+0x104>)
     156:	6081      	.short	0x6081
     158:	60c2      	str	r2, [r0, #12]
     15a:	4923      	ldr	r1, [pc, #140]	; (1e8 <setup+0x108>)
     15c:	4a23      	ldr	r2, [pc, #140]	; (1ec <setup+0x10c>)
     15e:	6103      	str	r3, [r0, #16]
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <setup+0x110>)
     162:	6141      	str	r1, [r0, #20]
     164:	6182      	str	r2, [r0, #24]
     166:	4923      	ldr	r1, [pc, #140]	; (1f4 <setup+0x114>)
     168:	4a23      	ldr	r2, [pc, #140]	; (1f8 <setup+0x118>)
     16a:	61c3      	str	r3, [r0, #28]
     16c:	4b23      	ldr	r3, [pc, #140]	; (1fc <setup+0x11c>)
     16e:	6201      	str	r1, [r0, #32]
     170:	6242      	str	r2, [r0, #36]	; 0x24
     172:	4923      	ldr	r1, [pc, #140]	; (200 <setup+0x120>)
     174:	4a23      	ldr	r2, [pc, #140]	; (204 <setup+0x124>)
     176:	6283      	str	r3, [r0, #40]	; 0x28
     178:	f8d8 9000 	ldr.w	r9, [r8]
     17c:	4b22      	ldr	r3, [pc, #136]	; (208 <setup+0x128>)
     17e:	62c1      	str	r1, [r0, #44]	; 0x2c
     180:	6302      	str	r2, [r0, #48]	; 0x30
     182:	6343      	str	r3, [r0, #52]	; 0x34
     184:	4628      	mov	r0, r5
     186:	3510      	adds	r5, #16
     188:	2100      	movs	r1, #0
     18a:	f00b ff77 	bl	c07c <String::String(char const*)>
     18e:	42bd      	cmp	r5, r7
     190:	4b1ed1f8 	.word	0x4b1ed1f8
    executor = new CmdExecutor(&board, game);
    //sys->reset();
     194:	491e      	ldr	r1, [pc, #120]	; (210 <setup+0x130>)
     196:	481f      	ldr	r0, [pc, #124]	; (214 <setup+0x134>)
     198:	63a6      	str	r6, [r4, #56]	; 0x38
     19a:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
    //game = new _GAME_IMPLEM_();
    game = new _GAME_IMPLEM_(board);
    sys = game;
    msg.outln(F("Connecting hardware..."));
    //delay(100);
    //sys->connectHardware(board);
     19e:	601c      	str	r4, [r3, #0]
    executor = new CmdExecutor(&board, game);
    //sys->reset();
     1a0:	f006 f956 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
    msg.outln(F("Starting..."));
    //msg.setPostDelay(50);
     1a4:	f8d8 0000 	ldr.w	r0, [r8]
     1a8:	6803      	ldr	r3, [r0, #0]
     1aa:	69db      	ldr	r3, [r3, #28]
     1ac:	4798      	blx	r3
    sys->reset();
    Serial.println(F("Starting..."));
    delay(100);
    sys->reset();
#endif

     1ae:	4b1a      	.short	0x4b1a
     1b0:	2200      	movs	r2, #0
    millisRoutineT = 0;
     1b2:	4818      	ldr	r0, [pc, #96]	; (214 <setup+0x134>)
    sys->reset();
    Serial.println(F("Starting..."));
    delay(100);
    sys->reset();
#endif

     1b4:	601a      	str	r2, [r3, #0]
    millisRoutineT = 0;
    msg.prFreeMem();
     1b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Serial.println(F("Starting..."));
    delay(100);
    sys->reset();
#endif

    millisRoutineT = 0;
     1ba:	f006 ba65 	b.w	6688 <Msg::prFreeMem()>
     1be:	bf00      	.short	0xbf00
     1c0:	2880      	cmp	r0, #128	; 0x80
     1c2:	2000      	movs	r0, #0
     1c4:	287c      	cmp	r0, #124	; 0x7c
     1c6:	2000      	movs	r0, #0
     1c8:	0040      	lsls	r0, r0, #1
     1ca:	2000      	movs	r0, #0
     1cc:	2978      	cmp	r1, #120	; 0x78
     1ce:	2000      	movs	r0, #0
     1d0:	20000058 	.word	0x20000058
     1d4:	0070      	lsls	r0, r6, #1
     1d6:	2000      	.short	0x2000
     1d8:	0078      	lsls	r0, r7, #1
     1da:	2000      	.short	0x2000
     1dc:	0084      	lsls	r4, r0, #2
     1de:	2000      	movs	r0, #0
     1e0:	20000094 	.word	0x20000094
     1e4:	009c      	lsls	r4, r3, #2
     1e6:	2000      	.short	0x2000
     1e8:	00a8      	lsls	r0, r5, #2
     1ea:	2000      	.short	0x2000
     1ec:	00b0      	lsls	r0, r6, #2
     1ee:	2000      	.short	0x2000
     1f0:	00bc      	lsls	r4, r7, #2
     1f2:	2000      	.short	0x2000
     1f4:	00c0      	lsls	r0, r0, #3
     1f6:	2000      	.short	0x2000
     1f8:	00d0      	lsls	r0, r2, #3
     1fa:	2000      	movs	r0, #0
     1fc:	200000d8 	.word	0x200000d8
     200:	00dc      	lsls	r4, r3, #3
     202:	2000      	.short	0x2000
     204:	00e0      	lsls	r0, r4, #3
     206:	2000      	.short	0x2000
     208:	00e8      	lsls	r0, r5, #3
     20a:	2000      	.short	0x2000
     20c:	297c      	cmp	r1, #124	; 0x7c
     20e:	2000      	.short	0x2000
     210:	00f0      	lsls	r0, r6, #3
     212:	2000      	movs	r0, #0
     214:	20002920 	.word	0x20002920
     218:	2974      	cmp	r1, #116	; 0x74
     21a:	2000      	.short	0x2000
     21c:	2984      	cmp	r1, #132	; 0x84
     21e:	2000      	.short	0x2000

00000220 <updateLedGrid(lg_mode)>:

void updateLedGrid(lg_mode mode) {
    byte b = 0;
    static byte r = 0;

    //r = game->switchGrid.getCurrentStrobe();
     220:	2801      	cmp	r0, #1
            }
            game->updUserKeyState(k, ms);
        //}
    }
}

     222:	b5f8      	.short	0xb5f8
void updateLedGrid(lg_mode mode) {
    byte b = 0;
    static byte r = 0;

    //r = game->switchGrid.getCurrentStrobe();
     224:	d030      	beq.n	288 <updateLedGrid(lg_mode)+0x68>
     226:	d31f      	.short	0xd31f
     228:	2802      	cmp	r0, #2
     22a:	d11c      	bne.n	266 <updateLedGrid(lg_mode)+0x46>
        if (r == 7) { // slam switch rendered as switch 77 (strobe #7, return #7)
            if (sys->readSlamSwitch()) b |= 0x01;
            else b &= 0xfe;
        }
        break;
    case LG_LAMPS:
     22c:	78314e25 	.word	0x78314e25
     230:	2905      	cmp	r1, #5
     232:	d93c      	.short	0xd93c
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
     234:	1f8d      	subs	r5, r1, #6
     236:	1f0b      	subs	r3, r1, #4
            else b &= 0xfe;
        }
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
     238:	00ed2400 	.word	0x00ed2400
            b = 0;
     23c:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     240:	4f21da15 	.word	0x4f21da15
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
                b <<= 1;
     244:	683b      	ldr	r3, [r7, #0]
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
     246:	0064      	lsls	r4, r4, #1
                b <<= 1;
     248:	3501b2a9 	.word	0x3501b2a9
     24c:	6898      	ldr	r0, [r3, #8]
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
            for (int i = (r-6)*8; i < (8 + (r-6)*4); i++) {
     24e:	b2e4      	.short	0xb2e4
                b <<= 1;
     250:	f002 fa42 	bl	26d8 <BitMappedSet::getChanges4(unsigned short)>
     254:	f044b108 	.word	0xf044b108
     258:	0401      	lsls	r1, r0, #16
        }
        break;
    case LG_LAMPS:
        if (r < 6) b = sys->lamps->getStates8(r);
        else { // r = 6, 7
            b = 0;
     25a:	7831      	ldrb	r1, [r6, #0]
     25c:	ebb51f0b 	.word	0xebb51f0b
     260:	0f83      	lsrs	r3, r0, #30
     262:	dbef      	.short	0xdbef
     264:	e003      	b.n	26e <updateLedGrid(lg_mode)+0x4e>
     266:	bdf8      	.short	0xbdf8
     268:	4e16      	ldr	r6, [pc, #88]	; (2c4 <updateLedGrid(lg_mode)+0xa4>)
            game->updUserKeyState(k, ms);
        //}
    }
}

void updateLedGrid(lg_mode mode) {
     26a:	2400      	.short	0x2400
     26c:	7831      	ldrb	r1, [r6, #0]
    case LG_OFF:
        break;
        b = 0;
    default:
        return;
    }
     26e:	4817      	ldr	r0, [pc, #92]	; (2cc <updateLedGrid(lg_mode)+0xac>)
     270:	1c4b      	adds	r3, r1, #1
     272:	4622      	mov	r2, r4
     274:	0084f8d0 	.word	0x0084f8d0
     278:	7033      	strb	r3, [r6, #0]
     27a:	f005      	.short	0xf005
     27c:	ffc5 7833 	vmvn.i16	d23, #211	; 0x00d3
    board.ledGrid->setRowByte(r++, b);
     280:	0307f003 	.word	0x0307f003
     284:	7033      	strb	r3, [r6, #0]
     286:	bdf8      	.short	0xbdf8
    byte b = 0;
    static byte r = 0;

    //r = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
     288:	4b0f      	ldr	r3, [pc, #60]	; (2c8 <updateLedGrid(lg_mode)+0xa8>)
     28a:	4e0e      	.short	0x4e0e
     28c:	6818      	ldr	r0, [r3, #0]
     28e:	7831      	.short	0x7831
     290:	3054      	adds	r0, #84	; 0x54
     292:	f004 fcd7 	bl	4c44 <SwitchGrid8x8::getRow(unsigned char)>
        b = sys->switchGrid.getRow(r);
     296:	7831      	ldrb	r1, [r6, #0]
    byte b = 0;
    static byte r = 0;

    //r = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
     298:	29074604 	.word	0x29074604
        b = sys->switchGrid.getRow(r);
     29c:	d1e7      	bne.n	26e <updateLedGrid(lg_mode)+0x4e>
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
     29e:	4b0c      	.short	0x4b0c
     2a0:	689b      	ldr	r3, [r3, #8]
     2a2:	06db      	.short	0x06db
     2a4:	d50b      	bpl.n	2be <updateLedGrid(lg_mode)+0x9e>
        if (r == 7) { // slam switch rendered as switch 77 (strobe #7, return #7)
     2a6:	f040      	.short	0xf040
     2a8:	0401      	lsls	r1, r0, #16
     2aa:	b2e4      	.short	0xb2e4
     2ac:	e7df      	b.n	26e <updateLedGrid(lg_mode)+0x4e>
            if (sys->readSlamSwitch()) b |= 0x01;
            else b &= 0xfe;
        }
        break;
    case LG_LAMPS:
     2ae:	4b06      	ldr	r3, [pc, #24]	; (2c8 <updateLedGrid(lg_mode)+0xa8>)
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	6898      	.short	0x6898
     2b4:	f002 fa08 	bl	26c8 <BitMappedSet::getStates8(unsigned short)>
     2b8:	46047831 	.word	0x46047831
     2bc:	e7d7      	b.n	26e <updateLedGrid(lg_mode)+0x4e>
    //r = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
        b = sys->switchGrid.getRow(r);
        if (r == 7) { // slam switch rendered as switch 77 (strobe #7, return #7)
            if (sys->readSlamSwitch()) b |= 0x01;
     2be:	f000      	.short	0xf000
     2c0:	04fe      	lsls	r6, r7, #19
     2c2:	e7d4      	b.n	26e <updateLedGrid(lg_mode)+0x4e>
     2c4:	20002980 	.word	0x20002980
     2c8:	2978      	cmp	r1, #120	; 0x78
     2ca:	2000      	.short	0x2000
     2cc:	2880      	cmp	r0, #128	; 0x80
     2ce:	2000      	movs	r0, #0
     2d0:	c000      	stmia	r0!, {}
     2d2:	4200      	.short	0x4200

000002d4 <millisRoutine(unsigned long&)>:
#endif
}

#ifndef TEST_PROC
void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
     2d4:	4b0a      	ldr	r3, [pc, #40]	; (300 <millisRoutine(unsigned long&)+0x2c>)
    msg.outln("us work time)\n");
    loopCounter++;
#endif
}

#ifndef TEST_PROC
     2d6:	b510      	push	{r4, lr}
     2d8:	f8934604 	.word	0xf8934604
void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
     2dc:	009c      	lsls	r4, r3, #2
     2de:	f7ff      	.short	0xf7ff
     2e0:	ff9f 6823 	vmlal.u16	q3, d15, d19
    //msg.out(" III ");
    game->millisRoutine(ms);
}

void checkBoardButtons(uint32_t& ms) {
    // PRB buttons check
     2e4:	d10206db 	.word	0xd10206db
     2e8:	4620      	mov	r0, r4
     2ea:	f7ff fec7 	bl	7c <checkBoardButtons(unsigned long&) [clone .part.4]>
void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
    updateLedGrid(board.ledGridMode); // LED grid update
    //msg.out(" II");
    checkBoardButtons(ms);
    //msg.out(" III ");
     2ee:	4b05      	ldr	r3, [pc, #20]	; (304 <millisRoutine(unsigned long&)+0x30>)
     2f0:	68184621 	.word	0x68184621
     2f4:	6803      	ldr	r3, [r0, #0]
    game->millisRoutine(ms);
     2f6:	e8bd      	.short	0xe8bd
     2f8:	4010      	ands	r0, r2
void millisRoutine(uint32_t& ms) {
    //msg.out(" I");
    updateLedGrid(board.ledGridMode); // LED grid update
    //msg.out(" II");
    checkBoardButtons(ms);
    //msg.out(" III ");
     2fa:	6a1b      	.short	0x6a1b
     2fc:	4718      	bx	r3
     2fe:	bf00      	.short	0xbf00
     300:	2880      	cmp	r0, #128	; 0x80
     302:	2000      	.short	0x2000
     304:	2984      	cmp	r1, #132	; 0x84
     306:	2000      	.short	0x2000

00000308 <processSerialInput()>:
    }
    board.ledGrid->setRowByte(r++, b);
    r &= 0x7;
}
#endif

     308:	b510      	push	{r4, lr}
     30a:	b088      	sub	sp, #32
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     30c:	fb8cf00b 	.word	0xfb8cf00b
bool processSerialInput() {
    bool ret = false;
     310:	2800      	cmp	r0, #0
     312:	dd18      	ble.n	346 <processSerialInput()+0x3e>
	if (Serial.available() > 0) {
     314:	46682278 	.word	0x46682278
     318:	490d      	ldr	r1, [pc, #52]	; (350 <processSerialInput()+0x48>)
     31a:	f00b      	.short	0xf00b
     31c:	fe39 4b0d 	vselgt.f64	d4, d9, d13
		String st = Serial.readString();
     320:	a8044669 	.word	0xa8044669
     324:	681c      	ldr	r4, [r3, #0]
     326:	f00b fecf 	bl	c0c8 <String::String(String const&)>
     32a:	a904      	add	r1, sp, #16
     32c:	f0024620 	.word	0xf0024620
     330:	fa55 4604 			; <UNDEFINED> instruction: 0xfa554604
     334:	f00ba804 	.word	0xf00ba804
     338:	fe61 4668 	cdp2	6, 6, cr4, cr1, cr8, {3}
}
#endif

bool processSerialInput() {
    bool ret = false;
	if (Serial.available() > 0) {
     33c:	f00b fe5e 	bl	bffc <String::~String()>
		String st = Serial.readString();
		ret = executor->execCmd(st);
	}
	return ret;
     340:	b0084620 	.word	0xb0084620
     344:	bd10      	pop	{r4, pc}
    board.ledGrid->setRowByte(r++, b);
    r &= 0x7;
}
#endif

bool processSerialInput() {
     346:	2400      	movs	r4, #0
    bool ret = false;
	if (Serial.available() > 0) {
		String st = Serial.readString();
		ret = executor->execCmd(st);
	}
	return ret;
     348:	4620      	mov	r0, r4
     34a:	b008      	add	sp, #32
     34c:	bf00bd10 	.word	0xbf00bd10
     350:	1ea4      	subs	r4, r4, #2
     352:	2000      	.short	0x2000
     354:	297c      	cmp	r1, #124	; 0x7c
     356:	2000      	.short	0x2000

00000358 <loop>:

    millisRoutineT = 0;
    msg.prFreeMem();
}

// top-most Teensy loop
     358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
void loop() {
    //msg.setPostDelay(0);
     35c:	b085493c 	.word	0xb085493c
     360:	483c      	ldr	r0, [pc, #240]	; (454 <loop+0xfc>)
#else
  uint32_t t, loopStartT; // [ms]
  uint32_t cumWorkTime, batchPeriod, t1, dt; // [us]
  byte busy_perc; // [%]
  uint32_t loops;

     362:	2500      	.short	0x2500
    msg.prFreeMem();
}

// top-most Teensy loop
void loop() {
    //msg.setPostDelay(0);
     364:	f006 fa08 	bl	6778 <Msg::out(char const*)>
    msg.out("Loop #");
     368:	220a4b3b 	.word	0x220a4b3b
     36c:	4839      	ldr	r0, [pc, #228]	; (454 <loop+0xfc>)
     36e:	8819      	.short	0x8819
  uint32_t t, loopStartT; // [ms]
  uint32_t cumWorkTime, batchPeriod, t1, dt; // [us]
  byte busy_perc; // [%]
  uint32_t loops;

    loops = 0;
     370:	462e      	mov	r6, r5
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     372:	4f3a      	.short	0x4f3a
}

// top-most Teensy loop
void loop() {
    //msg.setPostDelay(0);
    msg.out("Loop #");
     374:	f006 fa02 	bl	677c <Msg::out(unsigned long, int)>
    msg.out(loopCounter);
     378:	48364939 	.word	0x48364939
     37c:	f006 f898 	bl	64b0 <Msg::outln(char const*)>
     380:	80fcf8df 	.word	0x80fcf8df
    msg.outln("...");
    //msg.setPostDelay(50);
    //prFreeMem();
     384:	f7ff ffc0 	bl	308 <processSerialInput()>
     388:	90dcf8df 	.word	0x90dcf8df
     38c:	f8d7 b000 	ldr.w	fp, [r7]
  uint32_t loops;

    loops = 0;
    cumWorkTime = 0;
    batchPeriod = BATCH_DELAY * 1000u;
    loopStartT = millis();
     390:	4c3446ae 	.word	0x4c3446ae

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     394:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 46c <loop+0x114>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     398:	f5ce6820 	.word	0xf5ce6820
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     39c:	717a      	strb	r2, [r7, #5]
     39e:	f8d8      	.short	0xf8d8
     3a0:	3000      	adds	r0, #0
     3a2:	fbaa      	.short	0xfbaa
     3a4:	2303      	movs	r3, #3
     3a6:	0c9b      	.short	0x0c9b
     3a8:	fb03 f101 	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     3ac:	1a1b6823 	.word	0x1a1b6823
     3b0:	4299      	cmp	r1, r3
     3b2:	d8fb      	.short	0xd8fb
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     3b4:	6838      	ldr	r0, [r7, #0]
    dt = 0;

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt);
      t = millis();

     3b6:	f8d9      	.short	0xf8d9
     3b8:	1000      	asrs	r0, r0, #32
     3ba:	4b2b      	.short	0x4b2b
     3bc:	4288      	cmp	r0, r1
    batchPeriod = BATCH_DELAY * 1000u;
    loopStartT = millis();
    dt = 0;

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt);
     3be:	9003      	.short	0x9003
      t = millis();

     3c0:	9300      	str	r3, [sp, #0]
     3c2:	d010      	.short	0xd010
      if (t != millisRoutineT) {
     3c4:	f00a f8d0 	bl	a568 <micros>
     3c8:	a8049001 	.word	0xa8049001
        t1 = micros();
     3cc:	9b00      	ldr	r3, [sp, #0]
     3ce:	f850      	.short	0xf850
     3d0:	2d04      	cmp	r5, #4
     3d2:	601a      	str	r2, [r3, #0]
        millisRoutineT = t;
     3d4:	f7ff ff7e 	bl	2d4 <millisRoutine(unsigned long&)>
		millisRoutine(t);
     3d8:	f00a f8c6 	bl	a568 <micros>
     3dc:	9901      	ldr	r1, [sp, #4]
     3de:	ebc1 0e00 	rsb	lr, r1, r0
     3e2:	9903      	ldr	r1, [sp, #12]
        dt = micros() - t1;
     3e4:	4476      	add	r6, lr
        cumWorkTime += dt;
      }

      loops++;
     3e6:	ebcb      	.short	0xebcb
     3e8:	0101      	lsls	r1, r0, #4
        millisRoutineT = t;
		millisRoutine(t);
        dt = micros() - t1;
        cumWorkTime += dt;
      }

     3ea:	3501      	.short	0x3501
      loops++;
     3ec:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
     3f0:	d3d2      	bcc.n	398 <loop+0x40>
    //ls = "Running.. (";
    //ls += busy_perc;
    //ls += "%)";
    //board.lcdprn(1, ls);
    //processSerialInput();

     3f2:	2364      	movs	r3, #100	; 0x64
     3f4:	491d      	ldr	r1, [pc, #116]	; (46c <loop+0x114>)
     3f6:	220a      	movs	r2, #10
     3f8:	4816      	ldr	r0, [pc, #88]	; (454 <loop+0xfc>)
     3fa:	fb03 f306 	mul.w	r3, r3, r6
     3fe:	fba1 3103 	umull	r3, r1, r1, r3
     402:	f3c1 4187 	ubfx	r1, r1, #18, #8
     406:	f006 f9b9 	bl	677c <Msg::out(unsigned long, int)>
    msg.out(busy_perc);
     40a:	4919      	.short	0x4919
     40c:	4811      	ldr	r0, [pc, #68]	; (454 <loop+0xfc>)
     40e:	f006      	.short	0xf006
     410:	f9b3 220a 	ldrsh.w	r2, [r3, #522]	; 0x20a
    msg.out("% - ");
     414:	4629      	mov	r1, r5
     416:	480f      	.short	0x480f
     418:	f006 f9b0 	bl	677c <Msg::out(unsigned long, int)>
    msg.out(loops);
     41c:	480d4915 	.word	0x480d4915
     420:	f006 f846 	bl	64b0 <Msg::outln(char const*)>
    msg.outln(" loops/s");
     424:	480b4914 	.word	0x480b4914
     428:	f006 f9a6 	bl	6778 <Msg::out(char const*)>
    msg.out("(");
     42c:	4631      	mov	r1, r6
     42e:	220a      	.short	0x220a
     430:	4808      	ldr	r0, [pc, #32]	; (454 <loop+0xfc>)
     432:	f006      	.short	0xf006
     434:	f9a3 4911 	vld2.32	{d4[0],d5[0]}, [r3 :64], r1
    msg.out(cumWorkTime);
     438:	f0064806 	.word	0xf0064806
     43c:	f839 4b06 	ldrh.w	r4, [r9], #6
    msg.outln("us work time)\n");
     440:	881b4a05 	.word	0x881b4a05
     444:	3301      	adds	r3, #1
     446:	8013      	strh	r3, [r2, #0]
    loopCounter++;
#endif
     448:	e8bdb005 	.word	0xe8bdb005
     44c:	8ff0      	ldrh	r0, [r6, #62]	; 0x3e
     44e:	bf00      	.short	0xbf00
     450:	00fc      	lsls	r4, r7, #3
     452:	2000      	.short	0x2000
     454:	2920      	cmp	r1, #32
     456:	2000      	.short	0x2000
     458:	287c      	cmp	r0, #124	; 0x7c
     45a:	2000      	.short	0x2000
     45c:	2c14      	cmp	r4, #20
     45e:	2000      	.short	0x2000
     460:	00f8      	lsls	r0, r7, #3
     462:	2000      	.short	0x2000
     464:	1004      	asrs	r4, r0, #32
     466:	e000      	.short	0xe000
     468:	2974      	cmp	r1, #116	; 0x74
     46a:	2000      	.short	0x2000
     46c:	de83      	udf	#131	; 0x83
     46e:	431b      	orrs	r3, r3
     470:	0104      	lsls	r4, r0, #4
     472:	2000      	.short	0x2000
     474:	010c      	lsls	r4, r1, #4
     476:	2000      	.short	0x2000
     478:	0118      	lsls	r0, r3, #4
     47a:	2000      	movs	r0, #0
     47c:	011c      	lsls	r4, r3, #4
     47e:	2000      	movs	r0, #0
     480:	1e70      	subs	r0, r6, #1
     482:	2000      	movs	r0, #0

00000484 <_GLOBAL__sub_I_millisRoutineT>:
    bool ret = false;
	if (Serial.available() > 0) {
		String st = Serial.readString();
		ret = executor->execCmd(st);
	}
	return ret;
     484:	4c05b510 	.word	0x4c05b510
#define LG_MODE LG_SWITCHES

//#define TEST_PROC

uint32_t millisRoutineT; // system time of last routine call [ms]
Board_Sys80b board;
     488:	4620      	mov	r0, r4
     48a:	f005      	.short	0xf005
     48c:	faed 4620 			; <UNDEFINED> instruction: 0xfaed4620
     490:	4a03      	ldr	r2, [pc, #12]	; (4a0 <_GLOBAL__sub_I_millisRoutineT+0x1c>)
     492:	4904      	.short	0x4904
    bool ret = false;
	if (Serial.available() > 0) {
		String st = Serial.readString();
		ret = executor->execCmd(st);
	}
	return ret;
     494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define LG_MODE LG_SWITCHES

//#define TEST_PROC

uint32_t millisRoutineT; // system time of last routine call [ms]
Board_Sys80b board;
     498:	b9c4f00c 	.word	0xb9c4f00c
     49c:	2880      	cmp	r0, #128	; 0x80
     49e:	2000      	.short	0x2000
     4a0:	1e14      	subs	r4, r2, #0
     4a2:	2000      	.short	0x2000
     4a4:	5b65      	ldrh	r5, [r4, r5]
	...

000004a8 <PinGame::onSlamSwitchEvent(bool)>:
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
	}
	inline void switchOffAllLights() { LightGroup::activeLightSet->switchOffAllLights(); }
	inline void tilt() { /* TODO.. */ }
	inline void onSlamSwitchEvent(bool active) { if (active) tilt();	}
     4a8:	bf004770 	.word	0xbf004770

000004ac <BigHouse::onButtonPressed(UserKey)>:
		// TODO...
		break;
	}
}

void BigHouse::onButtonPressed(UserKey butt) {
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop

000004b0 <BigHouse::~BigHouse()>:
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     4b0:	4bbe      	ldr	r3, [pc, #760]	; (7ac <BigHouse::~BigHouse()+0x2fc>)
     4b2:	b570      	push	{r4, r5, r6, lr}
     4b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
	delete extraball_ls;
     4b8:	f8d0 556c 	ldr.w	r5, [r0, #1388]	; 0x56c
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     4bc:	60034604 	.word	0x60034604
     4c0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
	delete extraball_ls;
     4c4:	4628b135 	.word	0x4628b135
// The group has its own dimension and name.
// LightGroup offers functions for common effects on all
// the lights of the group, as: setAll(), rotate...(), shift...().
// It operates on the lights of the active LightSet referred
// by public static pointer <activeLightSet>.
class LightGroup {
     4c8:	f00b fd98 	bl	bffc <String::~String()>
     4cc:	4628      	mov	r0, r5
     4ce:	211c      	movs	r1, #28
     4d0:	fc94f00b 	.word	0xfc94f00b
	delete lastchance_ls;
     4d4:	f8d4 5570 	ldr.w	r5, [r4, #1392]	; 0x570
     4d8:	4628b135 	.word	0x4628b135
     4dc:	f00b fd8e 	bl	bffc <String::~String()>
     4e0:	211c4628 	.word	0x211c4628
     4e4:	f00b fc8a 	bl	bdfc <operator delete(void*, unsigned int)>
	delete special_ls;
     4e8:	f8d4 5574 	ldr.w	r5, [r4, #1396]	; 0x574
     4ec:	b135      	cbz	r5, 4fc <BigHouse::~BigHouse()+0x4c>
     4ee:	4628      	mov	r0, r5
     4f0:	f00b fd84 	bl	bffc <String::~String()>
     4f4:	4628      	mov	r0, r5
     4f6:	211c      	movs	r1, #28
     4f8:	f00b fc80 	bl	bdfc <operator delete(void*, unsigned int)>
	delete wall_ls;
     4fc:	5578f8d4 	.word	0x5578f8d4
     500:	b135      	cbz	r5, 510 <BigHouse::~BigHouse()+0x60>
     502:	4628      	mov	r0, r5
     504:	f00b fd7a 	bl	bffc <String::~String()>
     508:	211c4628 	.word	0x211c4628
     50c:	f00b fc76 	bl	bdfc <operator delete(void*, unsigned int)>
	delete break_ls;
     510:	f8d4 557c 	ldr.w	r5, [r4, #1404]	; 0x57c
     514:	b135      	cbz	r5, 524 <BigHouse::~BigHouse()+0x74>
     516:	4628      	mov	r0, r5
     518:	fd70f00b 	.word	0xfd70f00b
     51c:	4628      	mov	r0, r5
     51e:	211c      	movs	r1, #28
     520:	f00b fc6c 	bl	bdfc <operator delete(void*, unsigned int)>
	delete jail_ls;
     524:	5580f8d4 	.word	0x5580f8d4
     528:	b135      	cbz	r5, 538 <BigHouse::~BigHouse()+0x88>
     52a:	4628      	mov	r0, r5
     52c:	f00b fd66 	bl	bffc <String::~String()>
     530:	4628      	mov	r0, r5
     532:	211c      	movs	r1, #28
     534:	f00b fc62 	bl	bdfc <operator delete(void*, unsigned int)>
	delete multi_ls;
     538:	f8d4 5584 	ldr.w	r5, [r4, #1412]	; 0x584
     53c:	b135      	cbz	r5, 54c <BigHouse::~BigHouse()+0x9c>
     53e:	4628      	.short	0x4628
     540:	f00b fd5c 	bl	bffc <String::~String()>
     544:	4628      	mov	r0, r5
     546:	211c      	movs	r1, #28
     548:	f00b fc58 	bl	bdfc <operator delete(void*, unsigned int)>
	delete cellblock_ls;
     54c:	f8d4 5588 	ldr.w	r5, [r4, #1416]	; 0x588
     550:	b135      	cbz	r5, 560 <BigHouse::~BigHouse()+0xb0>
     552:	4628      	.short	0x4628
     554:	f00b fd52 	bl	bffc <String::~String()>
     558:	4628      	mov	r0, r5
     55a:	211c      	movs	r1, #28
     55c:	f00b fc4e 	bl	bdfc <operator delete(void*, unsigned int)>
	delete lightshow_ls;
     560:	558cf8d4 	.word	0x558cf8d4
     564:	b135      	cbz	r5, 574 <BigHouse::~BigHouse()+0xc4>
     566:	4628      	.short	0x4628
     568:	f00b fd48 	bl	bffc <String::~String()>
     56c:	211c4628 	.word	0x211c4628
     570:	f00b fc44 	bl	bdfc <operator delete(void*, unsigned int)>
	delete droptarget_ls;
     574:	f8d4 5590 	ldr.w	r5, [r4, #1424]	; 0x590
     578:	b135      	cbz	r5, 588 <BigHouse::~BigHouse()+0xd8>
     57a:	4628      	mov	r0, r5
     57c:	fd3ef00b 	.word	0xfd3ef00b
     580:	4628      	mov	r0, r5
     582:	211c      	movs	r1, #28
     584:	f00b fc3a 	bl	bdfc <operator delete(void*, unsigned int)>
	delete show1_ls;
     588:	f8d4 5594 	ldr.w	r5, [r4, #1428]	; 0x594
     58c:	b135      	cbz	r5, 59c <BigHouse::~BigHouse()+0xec>
     58e:	4628      	mov	r0, r5
     590:	f00b fd34 	bl	bffc <String::~String()>
     594:	211c4628 	.word	0x211c4628
     598:	f00b fc30 	bl	bdfc <operator delete(void*, unsigned int)>
	delete show2_ls;
     59c:	5598f8d4 	.word	0x5598f8d4
     5a0:	b135      	cbz	r5, 5b0 <BigHouse::~BigHouse()+0x100>
     5a2:	4628      	.short	0x4628
     5a4:	f00b fd2a 	bl	bffc <String::~String()>
     5a8:	4628      	mov	r0, r5
     5aa:	211c      	movs	r1, #28
     5ac:	fc26f00b 	.word	0xfc26f00b
	delete show3_ls;
     5b0:	f8d4 559c 	ldr.w	r5, [r4, #1436]	; 0x59c
     5b4:	b135      	cbz	r5, 5c4 <BigHouse::~BigHouse()+0x114>
     5b6:	4628      	mov	r0, r5
     5b8:	fd20f00b 	.word	0xfd20f00b
     5bc:	4628      	mov	r0, r5
     5be:	211c      	movs	r1, #28
     5c0:	f00b fc1c 	bl	bdfc <operator delete(void*, unsigned int)>
	delete show4_ls;
     5c4:	f8d4 55a0 	ldr.w	r5, [r4, #1440]	; 0x5a0
     5c8:	b135      	cbz	r5, 5d8 <BigHouse::~BigHouse()+0x128>
     5ca:	4628      	mov	r0, r5
     5cc:	f00b fd16 	bl	bffc <String::~String()>
     5d0:	4628      	mov	r0, r5
     5d2:	211c      	movs	r1, #28
     5d4:	f00b fc12 	bl	bdfc <operator delete(void*, unsigned int)>
	delete show5_ls;
     5d8:	f8d4 55a4 	ldr.w	r5, [r4, #1444]	; 0x5a4
     5dc:	b135      	cbz	r5, 5ec <BigHouse::~BigHouse()+0x13c>
     5de:	4628      	mov	r0, r5
     5e0:	fd0cf00b 	.word	0xfd0cf00b
     5e4:	4628      	mov	r0, r5
     5e6:	211c      	.short	0x211c
     5e8:	f00b fc08 	bl	bdfc <operator delete(void*, unsigned int)>
	delete show6_ls;
     5ec:	f8d4 55a8 	ldr.w	r5, [r4, #1448]	; 0x5a8
     5f0:	b135      	cbz	r5, 600 <BigHouse::~BigHouse()+0x150>
     5f2:	4628      	mov	r0, r5
     5f4:	f00b fd02 	bl	bffc <String::~String()>
     5f8:	4628      	mov	r0, r5
     5fa:	211c      	.short	0x211c
     5fc:	f00b fbfe 	bl	bdfc <operator delete(void*, unsigned int)>
	delete[] lShow_set;
     600:	50acf204 	.word	0x50acf204
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     604:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
	delete show2_ls;
	delete show3_ls;
	delete show4_ls;
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
     608:	fbf6f00b 	.word	0xfbf6f00b
//#include "Sys80bIO.h"
#include "Sys80b.h"

//using namespace Sys80bIO;

class Sys80b_Actuator {
     60c:	f504 605d 	add.w	r0, r4, #3536	; 0xdd0
     610:	f00b fcf4 	bl	bffc <String::~String()>
     614:	f604 50b8 	addw	r0, r4, #3512	; 0xdb8
     618:	f00b fcf0 	bl	bffc <String::~String()>
     61c:	605af504 	.word	0x605af504
     620:	f00b fcec 	bl	bffc <String::~String()>
     624:	5088f604 	.word	0x5088f604
     628:	f00b fce8 	bl	bffc <String::~String()>
     62c:	6057f504 	.word	0x6057f504
     630:	f00b fce4 	bl	bffc <String::~String()>
     634:	5058f604 	.word	0x5058f604
     638:	f00b fce0 	bl	bffc <String::~String()>
     63c:	6054f504 	.word	0x6054f504
     640:	f00b fcdc 	bl	bffc <String::~String()>
     644:	f604 5028 	addw	r0, r4, #3368	; 0xd28
     648:	f00b fcd8 	bl	bffc <String::~String()>
     64c:	f504 6051 	add.w	r0, r4, #3344	; 0xd10
     650:	fcd4f00b 	.word	0xfcd4f00b
     654:	f604 40f8 	addw	r0, r4, #3320	; 0xcf8
     658:	f00b fcd0 	bl	bffc <String::~String()>

#include "Arduino.h"
#include "Sys80b.h"
//class Sys80b;

class Sys80b_Sensor {
     65c:	f604 40dc 	addw	r0, r4, #3292	; 0xcdc
     660:	f00b fccc 	bl	bffc <String::~String()>
     664:	f604 40c4 	addw	r0, r4, #3268	; 0xcc4
     668:	f00b fcc8 	bl	bffc <String::~String()>
     66c:	f604 40ac 	addw	r0, r4, #3244	; 0xcac
     670:	f00b fcc4 	bl	bffc <String::~String()>
     674:	4094f604 	.word	0x4094f604
     678:	f00b fcc0 	bl	bffc <String::~String()>
     67c:	f604 407c 	addw	r0, r4, #3196	; 0xc7c
     680:	f00b fcbc 	bl	bffc <String::~String()>
     684:	4064f604 	.word	0x4064f604
     688:	f00b fcb8 	bl	bffc <String::~String()>
     68c:	404cf604 	.word	0x404cf604
     690:	f00b fcb4 	bl	bffc <String::~String()>
     694:	f604 4034 	addw	r0, r4, #3124	; 0xc34
     698:	fcb0f00b 	.word	0xfcb0f00b
     69c:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
     6a0:	fcacf00b 	.word	0xfcacf00b
     6a4:	f604 4004 	addw	r0, r4, #3076	; 0xc04
     6a8:	fca8f00b 	.word	0xfca8f00b
     6ac:	f604 30ec 	addw	r0, r4, #3052	; 0xbec
     6b0:	fca4f00b 	.word	0xfca4f00b
     6b4:	f604 30d4 	addw	r0, r4, #3028	; 0xbd4
     6b8:	fca0f00b 	.word	0xfca0f00b
     6bc:	f604 30bc 	addw	r0, r4, #3004	; 0xbbc
     6c0:	fc9cf00b 	.word	0xfc9cf00b
     6c4:	f604 30a4 	addw	r0, r4, #2980	; 0xba4
     6c8:	fc98f00b 	.word	0xfc98f00b
     6cc:	f604 308c 	addw	r0, r4, #2956	; 0xb8c
     6d0:	f00b fc94 	bl	bffc <String::~String()>
     6d4:	f604 3074 	addw	r0, r4, #2932	; 0xb74
     6d8:	fc90f00b 	.word	0xfc90f00b
     6dc:	f604 305c 	addw	r0, r4, #2908	; 0xb5c
     6e0:	fc8cf00b 	.word	0xfc8cf00b
     6e4:	f604 3044 	addw	r0, r4, #2884	; 0xb44
     6e8:	fc88f00b 	.word	0xfc88f00b
     6ec:	f604 302c 	addw	r0, r4, #2860	; 0xb2c
     6f0:	f00b fc84 	bl	bffc <String::~String()>
     6f4:	f604 3014 	addw	r0, r4, #2836	; 0xb14
     6f8:	fc80f00b 	.word	0xfc80f00b
     6fc:	f604 20fc 	addw	r0, r4, #2812	; 0xafc
     700:	f00b fc7c 	bl	bffc <String::~String()>
     704:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
     708:	fc78f00b 	.word	0xfc78f00b
     70c:	f604 20cc 	addw	r0, r4, #2764	; 0xacc
     710:	f00b fc74 	bl	bffc <String::~String()>
     714:	f604 20b4 	addw	r0, r4, #2740	; 0xab4
     718:	f00b fc70 	bl	bffc <String::~String()>
     71c:	f604 209c 	addw	r0, r4, #2716	; 0xa9c
     720:	fc6cf00b 	.word	0xfc6cf00b
     724:	f604 2084 	addw	r0, r4, #2692	; 0xa84
     728:	fc68f00b 	.word	0xfc68f00b
     72c:	f604 206c 	addw	r0, r4, #2668	; 0xa6c
     730:	f00b fc64 	bl	bffc <String::~String()>
     734:	2054f604 	.word	0x2054f604
     738:	f00b fc60 	bl	bffc <String::~String()>
     73c:	f604 203c 	addw	r0, r4, #2620	; 0xa3c
     740:	fc5cf00b 	.word	0xfc5cf00b
     744:	f604 2024 	addw	r0, r4, #2596	; 0xa24
     748:	fc58f00b 	.word	0xfc58f00b
     74c:	f604 200c 	addw	r0, r4, #2572	; 0xa0c
     750:	fc54f00b 	.word	0xfc54f00b
     754:	f604 10f4 	addw	r0, r4, #2548	; 0x9f4
     758:	fc50f00b 	.word	0xfc50f00b
     75c:	f604 10dc 	addw	r0, r4, #2524	; 0x9dc
     760:	f00b fc4c 	bl	bffc <String::~String()>
     764:	f604 10c4 	addw	r0, r4, #2500	; 0x9c4
     768:	f00b fc48 	bl	bffc <String::~String()>
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     76c:	f604 166c 	addw	r6, r4, #2412	; 0x96c
     770:	f604 10ac 	addw	r0, r4, #2476	; 0x9ac
     774:	f00b fc42 	bl	bffc <String::~String()>
     778:	f604 1094 	addw	r0, r4, #2452	; 0x994
     77c:	f00b fc3e 	bl	bffc <String::~String()>
     780:	42b5      	cmp	r5, r6
     782:	d005      	beq.n	790 <BigHouse::~BigHouse()+0x2e0>
     784:	3e10      	subs	r6, #16
     786:	4630      	mov	r0, r6
     788:	fc38f00b 	.word	0xfc38f00b
     78c:	42b5      	cmp	r5, r6
     78e:	d1f9      	.short	0xd1f9
     790:	f204 56cc 	addw	r6, r4, #1484	; 0x5cc
     794:	46283d10 	.word	0x46283d10
     798:	f00b fc30 	bl	bffc <String::~String()>
     79c:	d1f942ae 	.word	0xd1f942ae
     7a0:	4620      	mov	r0, r4
     7a2:	f003      	.short	0xf003
     7a4:	fba9 4620 			; <UNDEFINED> instruction: 0xfba94620
	delete show3_ls;
	delete show4_ls;
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
}
     7a8:	bf00bd70 	.word	0xbf00bd70
     7ac:	0a58      	lsrs	r0, r3, #9
     7ae:	2000      	.short	0x2000

000007b0 <non-virtual thunk to BigHouse::~BigHouse()>:
#define DISPATCH3(f,a,b,c) case a: case b: case c: f; break
#define DISPATCH4(f,a,b,c,d) case a: case b: case c: case d: f; break
#define DISPATCH5(f,a,b,c,d,e) case a: case b: case c: case d: case e: f; break

	BigHouse(Board_Sys80b& board);
	~BigHouse();
     7b0:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
     7b4:	be7cf7ff 	.word	0xbe7cf7ff

000007b8 <BigHouse::~BigHouse()>:
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     7b8:	b510      	push	{r4, lr}
     7ba:	4604      	.short	0x4604
	delete show3_ls;
	delete show4_ls;
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
}
     7bc:	f7ff fe78 	bl	4b0 <BigHouse::~BigHouse()>
     7c0:	6162f44f 	.word	0x6162f44f
     7c4:	4620      	mov	r0, r4
     7c6:	f00b      	.short	0xf00b
     7c8:	fb19 4620 	smlatb	r6, r9, r0, r4
     7cc:	bf00bd10 	.word	0xbf00bd10

000007d0 <non-virtual thunk to BigHouse::~BigHouse()>:
     7d0:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
     7d4:	bff0f7ff 	.word	0xbff0f7ff

000007d8 <PinGame::onTestButtonPressed()>:
	inline void onTestButtonPressed() { if (_gameOver) setPinballMode(TEST_MODE); }
     7d8:	351bf890 	.word	0x351bf890
     7dc:	b903      	cbnz	r3, 7e0 <PinGame::onTestButtonPressed()+0x8>
     7de:	4770      	.short	0x4770
     7e0:	2102      	movs	r1, #2
     7e2:	f003      	.short	0xf003
     7e4:	bdb7      	pop	{r0, r1, r2, r4, r5, r7, pc}
     7e6:	bf00      	.short	0xbf00

000007e8 <BigHouse::BigHouse(Board_Sys80b&)>:
#include "BigHouse.h"
#include "LightGroup.h"

//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
     7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ec:	b0894fd8 	.word	0xb0894fd8
     7f0:	4604      	mov	r4, r0
     7f2:	f003      	.short	0xf003
     7f4:	fc2f 463d 	stc2	6, cr4, [pc], #-244	; 704 <BigHouse::~BigHouse()+0x254>
     7f8:	4ad74bd6 	.word	0x4ad74bd6
     7fc:	f240 21c9 	movw	r1, #713	; 0x2c9
     800:	0e30f103 	.word	0x0e30f103
     804:	f855 0b24 	ldr.w	r0, [r5], #36
     808:	f6044ed4 	.word	0xf6044ed4
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     80c:	1994      	adds	r4, r2, r6
     80e:	6023      	.short	0x6023
     810:	f604 1ac4 	addw	sl, r4, #2500	; 0x9c4
     814:	e294f8c4 	.word	0xe294f8c4
     818:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
     81c:	053cf8c4 	.word	0x053cf8c4
     820:	f204 50cc 	addw	r0, r4, #1484	; 0x5cc
     824:	6520f8c4 	.word	0x6520f8c4
     828:	f604 166c 	addw	r6, r4, #2412	; 0x96c
     82c:	1524f8c4 	.word	0x1524f8c4
     830:	49cb      	ldr	r1, [pc, #812]	; (b60 <BigHouse::BigHouse(Board_Sys80b&)+0x378>)
     832:	f00b fc37 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     836:	49cb      	ldr	r1, [pc, #812]	; (b64 <BigHouse::BigHouse(Board_Sys80b&)+0x37c>)
     838:	50dcf204 	.word	0x50dcf204
     83c:	f8df 840c 	ldr.w	r8, [pc, #1036]	; c4c <BigHouse::BigHouse(Board_Sys80b&)+0x464>
     840:	fc30f00b 	.word	0xfc30f00b
     844:	49c8      	ldr	r1, [pc, #800]	; (b68 <BigHouse::BigHouse(Board_Sys80b&)+0x380>)
     846:	f204      	.short	0xf204
     848:	50ec      	str	r4, [r5, r3]
     84a:	f00b      	.short	0xf00b
     84c:	fc2b 49c7 	stc2	9, cr4, [fp], #-796	; 0xfffffce4
     850:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
     854:	f00b fc26 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     858:	49c5      	ldr	r1, [pc, #788]	; (b70 <BigHouse::BigHouse(Board_Sys80b&)+0x388>)
     85a:	f204 600c 	addw	r0, r4, #1548	; 0x60c
     85e:	f00b fc21 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     862:	49c4      	ldr	r1, [pc, #784]	; (b74 <BigHouse::BigHouse(Board_Sys80b&)+0x38c>)
     864:	f204 601c 	addw	r0, r4, #1564	; 0x61c
     868:	f00b fc1c 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     86c:	49c2      	ldr	r1, [pc, #776]	; (b78 <BigHouse::BigHouse(Board_Sys80b&)+0x390>)
     86e:	f204 602c 	addw	r0, r4, #1580	; 0x62c
     872:	f00b fc17 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     876:	49c1      	ldr	r1, [pc, #772]	; (b7c <BigHouse::BigHouse(Board_Sys80b&)+0x394>)
     878:	f204 603c 	addw	r0, r4, #1596	; 0x63c
     87c:	f00b fc12 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     880:	49bf      	ldr	r1, [pc, #764]	; (b80 <BigHouse::BigHouse(Board_Sys80b&)+0x398>)
     882:	f204 604c 	addw	r0, r4, #1612	; 0x64c
     886:	f00b fc0d 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     88a:	49be      	ldr	r1, [pc, #760]	; (b84 <BigHouse::BigHouse(Board_Sys80b&)+0x39c>)
     88c:	f204 605c 	addw	r0, r4, #1628	; 0x65c
     890:	f00b fc08 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     894:	49bc      	ldr	r1, [pc, #752]	; (b88 <BigHouse::BigHouse(Board_Sys80b&)+0x3a0>)
     896:	f204 606c 	addw	r0, r4, #1644	; 0x66c
     89a:	f00b fc03 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     89e:	49bb      	ldr	r1, [pc, #748]	; (b8c <BigHouse::BigHouse(Board_Sys80b&)+0x3a4>)
     8a0:	f204 607c 	addw	r0, r4, #1660	; 0x67c
     8a4:	f00b fbfe 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8a8:	49b9      	ldr	r1, [pc, #740]	; (b90 <BigHouse::BigHouse(Board_Sys80b&)+0x3a8>)
     8aa:	f204 608c 	addw	r0, r4, #1676	; 0x68c
     8ae:	f00b fbf9 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8b2:	49b8      	ldr	r1, [pc, #736]	; (b94 <BigHouse::BigHouse(Board_Sys80b&)+0x3ac>)
     8b4:	f204 609c 	addw	r0, r4, #1692	; 0x69c
     8b8:	f00b fbf4 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8bc:	49b6      	ldr	r1, [pc, #728]	; (b98 <BigHouse::BigHouse(Board_Sys80b&)+0x3b0>)
     8be:	f204 60ac 	addw	r0, r4, #1708	; 0x6ac
     8c2:	f00b fbef 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8c6:	49b5      	ldr	r1, [pc, #724]	; (b9c <BigHouse::BigHouse(Board_Sys80b&)+0x3b4>)
     8c8:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
     8cc:	f00b fbea 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8d0:	49b3      	ldr	r1, [pc, #716]	; (ba0 <BigHouse::BigHouse(Board_Sys80b&)+0x3b8>)
     8d2:	f204 60cc 	addw	r0, r4, #1740	; 0x6cc
     8d6:	f00b fbe5 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8da:	49b2      	ldr	r1, [pc, #712]	; (ba4 <BigHouse::BigHouse(Board_Sys80b&)+0x3bc>)
     8dc:	f204 60dc 	addw	r0, r4, #1756	; 0x6dc
     8e0:	f00b fbe0 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8e4:	49b0      	ldr	r1, [pc, #704]	; (ba8 <BigHouse::BigHouse(Board_Sys80b&)+0x3c0>)
     8e6:	f204 60ec 	addw	r0, r4, #1772	; 0x6ec
     8ea:	f00b fbdb 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8ee:	49af      	ldr	r1, [pc, #700]	; (bac <BigHouse::BigHouse(Board_Sys80b&)+0x3c4>)
     8f0:	f204 60fc 	addw	r0, r4, #1788	; 0x6fc
     8f4:	f00b fbd6 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     8f8:	49ad      	ldr	r1, [pc, #692]	; (bb0 <BigHouse::BigHouse(Board_Sys80b&)+0x3c8>)
     8fa:	f204 700c 	addw	r0, r4, #1804	; 0x70c
     8fe:	f00b fbd1 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     902:	49ac      	ldr	r1, [pc, #688]	; (bb4 <BigHouse::BigHouse(Board_Sys80b&)+0x3cc>)
     904:	f204 701c 	addw	r0, r4, #1820	; 0x71c
     908:	f00b fbcc 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     90c:	49aa      	ldr	r1, [pc, #680]	; (bb8 <BigHouse::BigHouse(Board_Sys80b&)+0x3d0>)
     90e:	f204 702c 	addw	r0, r4, #1836	; 0x72c
     912:	f00b fbc7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     916:	49a9      	ldr	r1, [pc, #676]	; (bbc <BigHouse::BigHouse(Board_Sys80b&)+0x3d4>)
     918:	f204 703c 	addw	r0, r4, #1852	; 0x73c
     91c:	f00b fbc2 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     920:	49a7      	ldr	r1, [pc, #668]	; (bc0 <BigHouse::BigHouse(Board_Sys80b&)+0x3d8>)
     922:	f204 704c 	addw	r0, r4, #1868	; 0x74c
     926:	f00b fbbd 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     92a:	49a6      	ldr	r1, [pc, #664]	; (bc4 <BigHouse::BigHouse(Board_Sys80b&)+0x3dc>)
     92c:	f204 705c 	addw	r0, r4, #1884	; 0x75c
     930:	f00b fbb8 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     934:	49a4      	ldr	r1, [pc, #656]	; (bc8 <BigHouse::BigHouse(Board_Sys80b&)+0x3e0>)
     936:	f204 706c 	addw	r0, r4, #1900	; 0x76c
     93a:	f00b fbb3 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     93e:	499a      	ldr	r1, [pc, #616]	; (ba8 <BigHouse::BigHouse(Board_Sys80b&)+0x3c0>)
     940:	f204 707c 	addw	r0, r4, #1916	; 0x77c
     944:	f00b fbae 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     948:	49a0      	ldr	r1, [pc, #640]	; (bcc <BigHouse::BigHouse(Board_Sys80b&)+0x3e4>)
     94a:	f204 708c 	addw	r0, r4, #1932	; 0x78c
     94e:	f00b fba9 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     952:	499f      	ldr	r1, [pc, #636]	; (bd0 <BigHouse::BigHouse(Board_Sys80b&)+0x3e8>)
     954:	f204 709c 	addw	r0, r4, #1948	; 0x79c
     958:	f00b fba4 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     95c:	499d      	ldr	r1, [pc, #628]	; (bd4 <BigHouse::BigHouse(Board_Sys80b&)+0x3ec>)
     95e:	f204 70ac 	addw	r0, r4, #1964	; 0x7ac
     962:	f00b fb9f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     966:	499c      	ldr	r1, [pc, #624]	; (bd8 <BigHouse::BigHouse(Board_Sys80b&)+0x3f0>)
     968:	f204 70bc 	addw	r0, r4, #1980	; 0x7bc
     96c:	f00b fb9a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     970:	499a      	ldr	r1, [pc, #616]	; (bdc <BigHouse::BigHouse(Board_Sys80b&)+0x3f4>)
     972:	f204 70cc 	addw	r0, r4, #1996	; 0x7cc
     976:	f00b fb95 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     97a:	4999      	ldr	r1, [pc, #612]	; (be0 <BigHouse::BigHouse(Board_Sys80b&)+0x3f8>)
     97c:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
     980:	f00b fb90 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     984:	4997      	ldr	r1, [pc, #604]	; (be4 <BigHouse::BigHouse(Board_Sys80b&)+0x3fc>)
     986:	f204 70ec 	addw	r0, r4, #2028	; 0x7ec
     98a:	f00b fb8b 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     98e:	4996      	ldr	r1, [pc, #600]	; (be8 <BigHouse::BigHouse(Board_Sys80b&)+0x400>)
     990:	f204 70fc 	addw	r0, r4, #2044	; 0x7fc
     994:	f00b fb86 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     998:	4994      	ldr	r1, [pc, #592]	; (bec <BigHouse::BigHouse(Board_Sys80b&)+0x404>)
     99a:	f604 000c 	addw	r0, r4, #2060	; 0x80c
     99e:	f00b fb81 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9a2:	4993      	ldr	r1, [pc, #588]	; (bf0 <BigHouse::BigHouse(Board_Sys80b&)+0x408>)
     9a4:	f604 001c 	addw	r0, r4, #2076	; 0x81c
     9a8:	f00b fb7c 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9ac:	4991      	ldr	r1, [pc, #580]	; (bf4 <BigHouse::BigHouse(Board_Sys80b&)+0x40c>)
     9ae:	f604 002c 	addw	r0, r4, #2092	; 0x82c
     9b2:	f00b fb77 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9b6:	4990      	ldr	r1, [pc, #576]	; (bf8 <BigHouse::BigHouse(Board_Sys80b&)+0x410>)
     9b8:	f604 003c 	addw	r0, r4, #2108	; 0x83c
     9bc:	f00b fb72 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9c0:	498e      	ldr	r1, [pc, #568]	; (bfc <BigHouse::BigHouse(Board_Sys80b&)+0x414>)
     9c2:	f604 004c 	addw	r0, r4, #2124	; 0x84c
     9c6:	f00b fb6d 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9ca:	498d      	ldr	r1, [pc, #564]	; (c00 <BigHouse::BigHouse(Board_Sys80b&)+0x418>)
     9cc:	f604 005c 	addw	r0, r4, #2140	; 0x85c
     9d0:	f00b fb68 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9d4:	498b      	ldr	r1, [pc, #556]	; (c04 <BigHouse::BigHouse(Board_Sys80b&)+0x41c>)
     9d6:	f604 006c 	addw	r0, r4, #2156	; 0x86c
     9da:	f00b fb63 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9de:	498a      	ldr	r1, [pc, #552]	; (c08 <BigHouse::BigHouse(Board_Sys80b&)+0x420>)
     9e0:	f604 007c 	addw	r0, r4, #2172	; 0x87c
     9e4:	f00b fb5e 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9e8:	4988      	ldr	r1, [pc, #544]	; (c0c <BigHouse::BigHouse(Board_Sys80b&)+0x424>)
     9ea:	f604 008c 	addw	r0, r4, #2188	; 0x88c
     9ee:	f00b fb59 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9f2:	4987      	ldr	r1, [pc, #540]	; (c10 <BigHouse::BigHouse(Board_Sys80b&)+0x428>)
     9f4:	f604 009c 	addw	r0, r4, #2204	; 0x89c
     9f8:	f00b fb54 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     9fc:	4985      	ldr	r1, [pc, #532]	; (c14 <BigHouse::BigHouse(Board_Sys80b&)+0x42c>)
     9fe:	f604 00ac 	addw	r0, r4, #2220	; 0x8ac
     a02:	f00b fb4f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a06:	4984      	ldr	r1, [pc, #528]	; (c18 <BigHouse::BigHouse(Board_Sys80b&)+0x430>)
     a08:	f604 00bc 	addw	r0, r4, #2236	; 0x8bc
     a0c:	f00b fb4a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a10:	4982      	ldr	r1, [pc, #520]	; (c1c <BigHouse::BigHouse(Board_Sys80b&)+0x434>)
     a12:	f604 00cc 	addw	r0, r4, #2252	; 0x8cc
     a16:	f00b fb45 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a1a:	4981      	ldr	r1, [pc, #516]	; (c20 <BigHouse::BigHouse(Board_Sys80b&)+0x438>)
     a1c:	f604 00dc 	addw	r0, r4, #2268	; 0x8dc
     a20:	f00b fb40 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a24:	4641      	mov	r1, r8
     a26:	f604 00ec 	addw	r0, r4, #2284	; 0x8ec
     a2a:	f00b fb3b 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a2e:	497d      	ldr	r1, [pc, #500]	; (c24 <BigHouse::BigHouse(Board_Sys80b&)+0x43c>)
     a30:	f604 00fc 	addw	r0, r4, #2300	; 0x8fc
     a34:	f00b fb36 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a38:	497b      	ldr	r1, [pc, #492]	; (c28 <BigHouse::BigHouse(Board_Sys80b&)+0x440>)
     a3a:	f604 100c 	addw	r0, r4, #2316	; 0x90c
     a3e:	f00b fb31 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a42:	497a      	ldr	r1, [pc, #488]	; (c2c <BigHouse::BigHouse(Board_Sys80b&)+0x444>)
     a44:	f604 101c 	addw	r0, r4, #2332	; 0x91c
     a48:	f00b fb2c 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a4c:	4978      	ldr	r1, [pc, #480]	; (c30 <BigHouse::BigHouse(Board_Sys80b&)+0x448>)
     a4e:	f604 102c 	addw	r0, r4, #2348	; 0x92c
     a52:	f00b fb27 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a56:	4977      	ldr	r1, [pc, #476]	; (c34 <BigHouse::BigHouse(Board_Sys80b&)+0x44c>)
     a58:	f604 103c 	addw	r0, r4, #2364	; 0x93c
     a5c:	f00b fb22 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a60:	4975      	ldr	r1, [pc, #468]	; (c38 <BigHouse::BigHouse(Board_Sys80b&)+0x450>)
     a62:	f604 104c 	addw	r0, r4, #2380	; 0x94c
     a66:	f00b fb1d 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a6a:	4974      	ldr	r1, [pc, #464]	; (c3c <BigHouse::BigHouse(Board_Sys80b&)+0x454>)
     a6c:	f604 105c 	addw	r0, r4, #2396	; 0x95c
     a70:	f00b fb18 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     a74:	46be      	mov	lr, r7
     a76:	46bc      	mov	ip, r7
     a78:	3764      	adds	r7, #100	; 0x64
     a7a:	f85e 0f04 	ldr.w	r0, [lr, #4]!
     a7e:	f85c bf18 	ldr.w	fp, [ip, #24]!
     a82:	f8de 1004 	ldr.w	r1, [lr, #4]
     a86:	f8de 2008 	ldr.w	r2, [lr, #8]
     a8a:	f8de 300c 	ldr.w	r3, [lr, #12]
     a8e:	f8be e010 	ldrh.w	lr, [lr, #16]
     a92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     a94:	f8dc 1004 	ldr.w	r1, [ip, #4]
     a98:	231a      	movs	r3, #26
     a9a:	f89c 2008 	ldrb.w	r2, [ip, #8]
     a9e:	4648      	mov	r0, r9
     aa0:	f8a6 e000 	strh.w	lr, [r6]
     aa4:	f604 16dc 	addw	r6, r4, #2524	; 0x9dc
     aa8:	f884 2986 	strb.w	r2, [r4, #2438]	; 0x986
     aac:	f884 3990 	strb.w	r3, [r4, #2448]	; 0x990
     ab0:	f8c4 b97e 	str.w	fp, [r4, #2430]	; 0x97e
     ab4:	f604 1bac 	addw	fp, r4, #2476	; 0x9ac
     ab8:	f8c4 1982 	str.w	r1, [r4, #2434]	; 0x982
     abc:	2100      	movs	r1, #0
		SENSOR(spotTarget4, 73, "cell block spot Target #4");
		SENSOR(topRollover3, 74, "top rollover #3");
		SENSOR(rightOutside, 75, "right outside rollover");
		SENSOR(hole, 76, "hole");
		// constructor
		Sw(Sys80b* sys) : _sys(sys) {};
     abe:	f8c4 4988 	str.w	r4, [r4, #2440]	; 0x988
     ac2:	f8c4 498c 	str.w	r4, [r4, #2444]	; 0x98c
     ac6:	f00b fad9 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     aca:	495d      	ldr	r1, [pc, #372]	; (c40 <BigHouse::BigHouse(Board_Sys80b&)+0x458>)
     acc:	a804      	add	r0, sp, #16
     ace:	f00b fae9 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     ad2:	a904      	add	r1, sp, #16
     ad4:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ad6:	f604 19f4 	addw	r9, r4, #2548	; 0x9f4
		descr = String(descrText);
     ada:	f00b fb75 	bl	c1c8 <String::operator=(String&&)>
     ade:	a804      	add	r0, sp, #16
     ae0:	f00b fa8c 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ae4:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     ae8:	231e      	movs	r3, #30
     aea:	4658      	mov	r0, fp
     aec:	f8c4 29a4 	str.w	r2, [r4, #2468]	; 0x9a4
     af0:	2100      	movs	r1, #0
     af2:	f884 39a8 	strb.w	r3, [r4, #2472]	; 0x9a8
     af6:	f00b fac1 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     afa:	4952      	ldr	r1, [pc, #328]	; (c44 <BigHouse::BigHouse(Board_Sys80b&)+0x45c>)
     afc:	a804      	add	r0, sp, #16
     afe:	f00b fad1 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     b02:	a904      	add	r1, sp, #16
     b04:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b06:	f604 2b0c 	addw	fp, r4, #2572	; 0xa0c
		descr = String(descrText);
     b0a:	f00b fb5d 	bl	c1c8 <String::operator=(String&&)>
     b0e:	a804      	add	r0, sp, #16
     b10:	f00b fa74 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b14:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     b18:	231f      	movs	r3, #31
     b1a:	4650      	mov	r0, sl
     b1c:	f8c4 29bc 	str.w	r2, [r4, #2492]	; 0x9bc
     b20:	2100      	movs	r1, #0
     b22:	f884 39c0 	strb.w	r3, [r4, #2496]	; 0x9c0
     b26:	f00b faa9 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     b2a:	4947      	ldr	r1, [pc, #284]	; (c48 <BigHouse::BigHouse(Board_Sys80b&)+0x460>)
     b2c:	a804      	add	r0, sp, #16
     b2e:	f00b fab9 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     b32:	a904      	add	r1, sp, #16
     b34:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b36:	f604 2a24 	addw	sl, r4, #2596	; 0xa24
		descr = String(descrText);
     b3a:	f00b fb45 	bl	c1c8 <String::operator=(String&&)>
     b3e:	a804      	add	r0, sp, #16
     b40:	f00b fa5c 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     b44:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     b48:	2320      	movs	r3, #32
     b4a:	4630      	mov	r0, r6
     b4c:	e080      	b.n	c50 <BigHouse::BigHouse(Board_Sys80b&)+0x468>
     b4e:	bf00      	nop
     b50:	2000012c 	.word	0x2000012c
     b54:	20000a58 	.word	0x20000a58
     b58:	2000019c 	.word	0x2000019c
     b5c:	20000190 	.word	0x20000190
     b60:	200001a8 	.word	0x200001a8
     b64:	200001b4 	.word	0x200001b4
     b68:	200001c0 	.word	0x200001c0
     b6c:	200001d0 	.word	0x200001d0
     b70:	200001dc 	.word	0x200001dc
     b74:	200001e8 	.word	0x200001e8
     b78:	200001f8 	.word	0x200001f8
     b7c:	20000208 	.word	0x20000208
     b80:	20000218 	.word	0x20000218
     b84:	2000022c 	.word	0x2000022c
     b88:	20000240 	.word	0x20000240
     b8c:	20000250 	.word	0x20000250
     b90:	20000260 	.word	0x20000260
     b94:	20000268 	.word	0x20000268
     b98:	2000027c 	.word	0x2000027c
     b9c:	20000294 	.word	0x20000294
     ba0:	200002a0 	.word	0x200002a0
     ba4:	200002b4 	.word	0x200002b4
     ba8:	200002d4 	.word	0x200002d4
     bac:	200002e8 	.word	0x200002e8
     bb0:	200002f0 	.word	0x200002f0
     bb4:	20000308 	.word	0x20000308
     bb8:	2000031c 	.word	0x2000031c
     bbc:	2000032c 	.word	0x2000032c
     bc0:	2000033c 	.word	0x2000033c
     bc4:	2000034c 	.word	0x2000034c
     bc8:	2000035c 	.word	0x2000035c
     bcc:	20000370 	.word	0x20000370
     bd0:	20000380 	.word	0x20000380
     bd4:	2000038c 	.word	0x2000038c
     bd8:	20000398 	.word	0x20000398
     bdc:	200003a4 	.word	0x200003a4
     be0:	200003b0 	.word	0x200003b0
     be4:	200003bc 	.word	0x200003bc
     be8:	200003c8 	.word	0x200003c8
     bec:	200003d4 	.word	0x200003d4
     bf0:	200003e0 	.word	0x200003e0
     bf4:	200003ec 	.word	0x200003ec
     bf8:	200003fc 	.word	0x200003fc
     bfc:	2000040c 	.word	0x2000040c
     c00:	2000041c 	.word	0x2000041c
     c04:	2000042c 	.word	0x2000042c
     c08:	2000043c 	.word	0x2000043c
     c0c:	2000044c 	.word	0x2000044c
     c10:	2000045c 	.word	0x2000045c
     c14:	2000046c 	.word	0x2000046c
     c18:	2000047c 	.word	0x2000047c
     c1c:	20000490 	.word	0x20000490
     c20:	20000720 	.word	0x20000720
     c24:	200004a8 	.word	0x200004a8
     c28:	200004bc 	.word	0x200004bc
     c2c:	200004d4 	.word	0x200004d4
     c30:	200004e4 	.word	0x200004e4
     c34:	200004f0 	.word	0x200004f0
     c38:	20000508 	.word	0x20000508
     c3c:	20000510 	.word	0x20000510
     c40:	20000518 	.word	0x20000518
     c44:	20000528 	.word	0x20000528
     c48:	2000053c 	.word	0x2000053c
     c4c:	20000498 	.word	0x20000498
     c50:	f8c4 29d4 	str.w	r2, [r4, #2516]	; 0x9d4
     c54:	2100      	movs	r1, #0
     c56:	f884 39d8 	strb.w	r3, [r4, #2520]	; 0x9d8
     c5a:	f00b fa0f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     c5e:	49d9      	ldr	r1, [pc, #868]	; (fc4 <BigHouse::BigHouse(Board_Sys80b&)+0x7dc>)
     c60:	a804      	add	r0, sp, #16
     c62:	f00b fa1f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     c66:	a904      	add	r1, sp, #16
     c68:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     c6a:	f604 263c 	addw	r6, r4, #2620	; 0xa3c
		descr = String(descrText);
     c6e:	f00b faab 	bl	c1c8 <String::operator=(String&&)>
     c72:	a804      	add	r0, sp, #16
     c74:	f00b f9c2 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     c78:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     c7c:	2321      	movs	r3, #33	; 0x21
     c7e:	4648      	mov	r0, r9
     c80:	f8c4 29ec 	str.w	r2, [r4, #2540]	; 0x9ec
     c84:	2100      	movs	r1, #0
     c86:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
     c8a:	f00b f9f7 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     c8e:	49ce      	ldr	r1, [pc, #824]	; (fc8 <BigHouse::BigHouse(Board_Sys80b&)+0x7e0>)
     c90:	a804      	add	r0, sp, #16
     c92:	f00b fa07 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     c96:	a904      	add	r1, sp, #16
     c98:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     c9a:	f604 2954 	addw	r9, r4, #2644	; 0xa54
		descr = String(descrText);
     c9e:	f00b fa93 	bl	c1c8 <String::operator=(String&&)>
     ca2:	a804      	add	r0, sp, #16
     ca4:	f00b f9aa 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ca8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     cac:	2322      	movs	r3, #34	; 0x22
     cae:	4658      	mov	r0, fp
     cb0:	f8c4 2a04 	str.w	r2, [r4, #2564]	; 0xa04
     cb4:	2100      	movs	r1, #0
     cb6:	f884 3a08 	strb.w	r3, [r4, #2568]	; 0xa08
     cba:	f00b f9df 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     cbe:	49c3      	ldr	r1, [pc, #780]	; (fcc <BigHouse::BigHouse(Board_Sys80b&)+0x7e4>)
     cc0:	a804      	add	r0, sp, #16
     cc2:	f00b f9ef 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     cc6:	a904      	add	r1, sp, #16
     cc8:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cca:	f604 2b6c 	addw	fp, r4, #2668	; 0xa6c
		descr = String(descrText);
     cce:	f00b fa7b 	bl	c1c8 <String::operator=(String&&)>
     cd2:	a804      	add	r0, sp, #16
     cd4:	f00b f992 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cd8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     cdc:	2323      	movs	r3, #35	; 0x23
     cde:	4650      	mov	r0, sl
     ce0:	f8c4 2a1c 	str.w	r2, [r4, #2588]	; 0xa1c
     ce4:	2100      	movs	r1, #0
     ce6:	f884 3a20 	strb.w	r3, [r4, #2592]	; 0xa20
     cea:	f00b f9c7 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     cee:	49b8      	ldr	r1, [pc, #736]	; (fd0 <BigHouse::BigHouse(Board_Sys80b&)+0x7e8>)
     cf0:	a804      	add	r0, sp, #16
     cf2:	f00b f9d7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     cf6:	a904      	add	r1, sp, #16
     cf8:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cfa:	f604 2a84 	addw	sl, r4, #2692	; 0xa84
		descr = String(descrText);
     cfe:	f00b fa63 	bl	c1c8 <String::operator=(String&&)>
     d02:	a804      	add	r0, sp, #16
     d04:	f00b f97a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d08:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d0c:	2324      	movs	r3, #36	; 0x24
     d0e:	4630      	mov	r0, r6
     d10:	f8c4 2a34 	str.w	r2, [r4, #2612]	; 0xa34
     d14:	2100      	movs	r1, #0
     d16:	f884 3a38 	strb.w	r3, [r4, #2616]	; 0xa38
     d1a:	f00b f9af 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     d1e:	49ad      	ldr	r1, [pc, #692]	; (fd4 <BigHouse::BigHouse(Board_Sys80b&)+0x7ec>)
     d20:	a804      	add	r0, sp, #16
     d22:	f00b f9bf 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     d26:	a904      	add	r1, sp, #16
     d28:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d2a:	f604 269c 	addw	r6, r4, #2716	; 0xa9c
		descr = String(descrText);
     d2e:	f00b fa4b 	bl	c1c8 <String::operator=(String&&)>
     d32:	a804      	add	r0, sp, #16
     d34:	f00b f962 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d38:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d3c:	2328      	movs	r3, #40	; 0x28
     d3e:	4648      	mov	r0, r9
     d40:	f8c4 2a4c 	str.w	r2, [r4, #2636]	; 0xa4c
     d44:	2100      	movs	r1, #0
     d46:	f884 3a50 	strb.w	r3, [r4, #2640]	; 0xa50
     d4a:	f00b f997 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     d4e:	49a2      	ldr	r1, [pc, #648]	; (fd8 <BigHouse::BigHouse(Board_Sys80b&)+0x7f0>)
     d50:	a804      	add	r0, sp, #16
     d52:	f00b f9a7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     d56:	a904      	add	r1, sp, #16
     d58:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d5a:	f604 29b4 	addw	r9, r4, #2740	; 0xab4
		descr = String(descrText);
     d5e:	f00b fa33 	bl	c1c8 <String::operator=(String&&)>
     d62:	a804      	add	r0, sp, #16
     d64:	f00b f94a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d68:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d6c:	2329      	movs	r3, #41	; 0x29
     d6e:	4658      	mov	r0, fp
     d70:	f8c4 2a64 	str.w	r2, [r4, #2660]	; 0xa64
     d74:	2100      	movs	r1, #0
     d76:	f884 3a68 	strb.w	r3, [r4, #2664]	; 0xa68
     d7a:	f00b f97f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     d7e:	4997      	ldr	r1, [pc, #604]	; (fdc <BigHouse::BigHouse(Board_Sys80b&)+0x7f4>)
     d80:	a804      	add	r0, sp, #16
     d82:	f00b f98f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     d86:	a904      	add	r1, sp, #16
     d88:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d8a:	f604 2bcc 	addw	fp, r4, #2764	; 0xacc
		descr = String(descrText);
     d8e:	f00b fa1b 	bl	c1c8 <String::operator=(String&&)>
     d92:	a804      	add	r0, sp, #16
     d94:	f00b f932 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d98:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     d9c:	232a      	movs	r3, #42	; 0x2a
     d9e:	4650      	mov	r0, sl
     da0:	f8c4 2a7c 	str.w	r2, [r4, #2684]	; 0xa7c
     da4:	2100      	movs	r1, #0
     da6:	f884 3a80 	strb.w	r3, [r4, #2688]	; 0xa80
     daa:	f00b f967 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     dae:	498c      	ldr	r1, [pc, #560]	; (fe0 <BigHouse::BigHouse(Board_Sys80b&)+0x7f8>)
     db0:	a804      	add	r0, sp, #16
     db2:	f00b f977 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     db6:	a904      	add	r1, sp, #16
     db8:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     dba:	f604 2ae4 	addw	sl, r4, #2788	; 0xae4
		descr = String(descrText);
     dbe:	f00b fa03 	bl	c1c8 <String::operator=(String&&)>
     dc2:	a804      	add	r0, sp, #16
     dc4:	f00b f91a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     dc8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     dcc:	232b      	movs	r3, #43	; 0x2b
     dce:	4630      	mov	r0, r6
     dd0:	f8c4 2a94 	str.w	r2, [r4, #2708]	; 0xa94
     dd4:	2100      	movs	r1, #0
     dd6:	f884 3a98 	strb.w	r3, [r4, #2712]	; 0xa98
     dda:	f00b f94f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     dde:	4981      	ldr	r1, [pc, #516]	; (fe4 <BigHouse::BigHouse(Board_Sys80b&)+0x7fc>)
     de0:	a804      	add	r0, sp, #16
     de2:	f00b f95f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     de6:	a904      	add	r1, sp, #16
     de8:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     dea:	f604 26fc 	addw	r6, r4, #2812	; 0xafc
		descr = String(descrText);
     dee:	f00b f9eb 	bl	c1c8 <String::operator=(String&&)>
     df2:	a804      	add	r0, sp, #16
     df4:	f00b f902 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     df8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     dfc:	232c      	movs	r3, #44	; 0x2c
     dfe:	4648      	mov	r0, r9
     e00:	f8c4 2aac 	str.w	r2, [r4, #2732]	; 0xaac
     e04:	2100      	movs	r1, #0
     e06:	f884 3ab0 	strb.w	r3, [r4, #2736]	; 0xab0
     e0a:	f00b f937 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     e0e:	4976      	ldr	r1, [pc, #472]	; (fe8 <BigHouse::BigHouse(Board_Sys80b&)+0x800>)
     e10:	a804      	add	r0, sp, #16
     e12:	f00b f947 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     e16:	a904      	add	r1, sp, #16
     e18:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e1a:	f604 3914 	addw	r9, r4, #2836	; 0xb14
		descr = String(descrText);
     e1e:	f00b f9d3 	bl	c1c8 <String::operator=(String&&)>
     e22:	a804      	add	r0, sp, #16
     e24:	f00b f8ea 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e28:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     e2c:	232d      	movs	r3, #45	; 0x2d
     e2e:	4658      	mov	r0, fp
     e30:	f8c4 2ac4 	str.w	r2, [r4, #2756]	; 0xac4
     e34:	2100      	movs	r1, #0
     e36:	f884 3ac8 	strb.w	r3, [r4, #2760]	; 0xac8
     e3a:	f00b f91f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     e3e:	496b      	ldr	r1, [pc, #428]	; (fec <BigHouse::BigHouse(Board_Sys80b&)+0x804>)
     e40:	a804      	add	r0, sp, #16
     e42:	f00b f92f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     e46:	a904      	add	r1, sp, #16
     e48:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e4a:	f604 3b2c 	addw	fp, r4, #2860	; 0xb2c
		descr = String(descrText);
     e4e:	f00b f9bb 	bl	c1c8 <String::operator=(String&&)>
     e52:	a804      	add	r0, sp, #16
     e54:	f00b f8d2 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e58:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     e5c:	232e      	movs	r3, #46	; 0x2e
     e5e:	4650      	mov	r0, sl
     e60:	f8c4 2adc 	str.w	r2, [r4, #2780]	; 0xadc
     e64:	2100      	movs	r1, #0
     e66:	f884 3ae0 	strb.w	r3, [r4, #2784]	; 0xae0
     e6a:	f00b f907 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     e6e:	4641      	mov	r1, r8
     e70:	a804      	add	r0, sp, #16
     e72:	f00b f917 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     e76:	a904      	add	r1, sp, #16
     e78:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e7a:	f604 3a44 	addw	sl, r4, #2884	; 0xb44
		descr = String(descrText);
     e7e:	f00b f9a3 	bl	c1c8 <String::operator=(String&&)>
     e82:	a804      	add	r0, sp, #16
     e84:	f00b f8ba 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e88:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     e8c:	2332      	movs	r3, #50	; 0x32
     e8e:	4630      	mov	r0, r6
     e90:	f8c4 2af4 	str.w	r2, [r4, #2804]	; 0xaf4
     e94:	2100      	movs	r1, #0
     e96:	f884 3af8 	strb.w	r3, [r4, #2808]	; 0xaf8
     e9a:	f00b f8ef 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     e9e:	4954      	ldr	r1, [pc, #336]	; (ff0 <BigHouse::BigHouse(Board_Sys80b&)+0x808>)
     ea0:	a804      	add	r0, sp, #16
     ea2:	f00b f8ff 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     ea6:	a904      	add	r1, sp, #16
     ea8:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     eaa:	f604 365c 	addw	r6, r4, #2908	; 0xb5c
		descr = String(descrText);
     eae:	f00b f98b 	bl	c1c8 <String::operator=(String&&)>
     eb2:	a804      	add	r0, sp, #16
     eb4:	f00b f8a2 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     eb8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     ebc:	2333      	movs	r3, #51	; 0x33
     ebe:	4648      	mov	r0, r9
     ec0:	f8c4 2b0c 	str.w	r2, [r4, #2828]	; 0xb0c
     ec4:	2100      	movs	r1, #0
     ec6:	f884 3b10 	strb.w	r3, [r4, #2832]	; 0xb10
     eca:	f00b f8d7 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     ece:	4949      	ldr	r1, [pc, #292]	; (ff4 <BigHouse::BigHouse(Board_Sys80b&)+0x80c>)
     ed0:	a804      	add	r0, sp, #16
     ed2:	f00b f8e7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     ed6:	a904      	add	r1, sp, #16
     ed8:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     eda:	f604 3974 	addw	r9, r4, #2932	; 0xb74
		descr = String(descrText);
     ede:	f00b f973 	bl	c1c8 <String::operator=(String&&)>
     ee2:	a804      	add	r0, sp, #16
     ee4:	f00b f88a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ee8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     eec:	2334      	movs	r3, #52	; 0x34
     eee:	4658      	mov	r0, fp
     ef0:	f8c4 2b24 	str.w	r2, [r4, #2852]	; 0xb24
     ef4:	2100      	movs	r1, #0
     ef6:	f884 3b28 	strb.w	r3, [r4, #2856]	; 0xb28
     efa:	f00b f8bf 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     efe:	493e      	ldr	r1, [pc, #248]	; (ff8 <BigHouse::BigHouse(Board_Sys80b&)+0x810>)
     f00:	a804      	add	r0, sp, #16
     f02:	f00b f8cf 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     f06:	a904      	add	r1, sp, #16
     f08:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f0a:	f604 3b8c 	addw	fp, r4, #2956	; 0xb8c
		descr = String(descrText);
     f0e:	f00b f95b 	bl	c1c8 <String::operator=(String&&)>
     f12:	a804      	add	r0, sp, #16
     f14:	f00b f872 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f18:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f1c:	2335      	movs	r3, #53	; 0x35
     f1e:	4650      	mov	r0, sl
     f20:	f8c4 2b3c 	str.w	r2, [r4, #2876]	; 0xb3c
     f24:	2100      	movs	r1, #0
     f26:	f884 3b40 	strb.w	r3, [r4, #2880]	; 0xb40
     f2a:	f00b f8a7 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     f2e:	4933      	ldr	r1, [pc, #204]	; (ffc <BigHouse::BigHouse(Board_Sys80b&)+0x814>)
     f30:	a804      	add	r0, sp, #16
     f32:	f00b f8b7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     f36:	a904      	add	r1, sp, #16
     f38:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f3a:	f604 3aa4 	addw	sl, r4, #2980	; 0xba4
		descr = String(descrText);
     f3e:	f00b f943 	bl	c1c8 <String::operator=(String&&)>
     f42:	a804      	add	r0, sp, #16
     f44:	f00b f85a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f48:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f4c:	2336      	movs	r3, #54	; 0x36
     f4e:	4630      	mov	r0, r6
     f50:	f8c4 2b54 	str.w	r2, [r4, #2900]	; 0xb54
     f54:	2100      	movs	r1, #0
     f56:	f884 3b58 	strb.w	r3, [r4, #2904]	; 0xb58
     f5a:	f00b f88f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     f5e:	4928      	ldr	r1, [pc, #160]	; (1000 <BigHouse::BigHouse(Board_Sys80b&)+0x818>)
     f60:	a804      	add	r0, sp, #16
     f62:	f00b f89f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     f66:	a904      	add	r1, sp, #16
     f68:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f6a:	f604 36bc 	addw	r6, r4, #3004	; 0xbbc
		descr = String(descrText);
     f6e:	f00b f92b 	bl	c1c8 <String::operator=(String&&)>
     f72:	a804      	add	r0, sp, #16
     f74:	f00b f842 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f78:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     f7c:	2337      	movs	r3, #55	; 0x37
     f7e:	4648      	mov	r0, r9
     f80:	f8c4 2b6c 	str.w	r2, [r4, #2924]	; 0xb6c
     f84:	2100      	movs	r1, #0
     f86:	f884 3b70 	strb.w	r3, [r4, #2928]	; 0xb70
     f8a:	f00b f877 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     f8e:	491d      	ldr	r1, [pc, #116]	; (1004 <BigHouse::BigHouse(Board_Sys80b&)+0x81c>)
     f90:	a804      	add	r0, sp, #16
     f92:	f00b f887 	bl	c0a4 <String::String(__FlashStringHelper const*)>
     f96:	a904      	add	r1, sp, #16
     f98:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f9a:	f604 39d4 	addw	r9, r4, #3028	; 0xbd4
		descr = String(descrText);
     f9e:	f00b f913 	bl	c1c8 <String::operator=(String&&)>
     fa2:	a804      	add	r0, sp, #16
     fa4:	f00b f82a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     fa8:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
     fac:	2338      	movs	r3, #56	; 0x38
     fae:	4658      	mov	r0, fp
     fb0:	f8c4 2b84 	str.w	r2, [r4, #2948]	; 0xb84
     fb4:	2100      	movs	r1, #0
     fb6:	f884 3b88 	strb.w	r3, [r4, #2952]	; 0xb88
     fba:	f00b f85f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
     fbe:	4912      	ldr	r1, [pc, #72]	; (1008 <BigHouse::BigHouse(Board_Sys80b&)+0x820>)
     fc0:	a804      	add	r0, sp, #16
     fc2:	e023      	b.n	100c <BigHouse::BigHouse(Board_Sys80b&)+0x824>
     fc4:	20000550 	.word	0x20000550
     fc8:	20000560 	.word	0x20000560
     fcc:	20000570 	.word	0x20000570
     fd0:	2000058c 	.word	0x2000058c
     fd4:	2000059c 	.word	0x2000059c
     fd8:	200005ac 	.word	0x200005ac
     fdc:	200005bc 	.word	0x200005bc
     fe0:	200005d0 	.word	0x200005d0
     fe4:	200005e4 	.word	0x200005e4
     fe8:	200005f8 	.word	0x200005f8
     fec:	20000614 	.word	0x20000614
     ff0:	2000062c 	.word	0x2000062c
     ff4:	2000063c 	.word	0x2000063c
     ff8:	20000650 	.word	0x20000650
     ffc:	20000664 	.word	0x20000664
    1000:	20000678 	.word	0x20000678
    1004:	20000688 	.word	0x20000688
    1008:	200004d4 	.word	0x200004d4
    100c:	f00b f84a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1010:	a904      	add	r1, sp, #16
    1012:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1014:	f604 3bec 	addw	fp, r4, #3052	; 0xbec
		descr = String(descrText);
    1018:	f00b f8d6 	bl	c1c8 <String::operator=(String&&)>
    101c:	a804      	add	r0, sp, #16
    101e:	f00a ffed 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1022:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1026:	233c      	movs	r3, #60	; 0x3c
    1028:	4650      	mov	r0, sl
    102a:	f8c4 2b9c 	str.w	r2, [r4, #2972]	; 0xb9c
    102e:	2100      	movs	r1, #0
    1030:	f884 3ba0 	strb.w	r3, [r4, #2976]	; 0xba0
    1034:	f00b f822 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1038:	49d2      	ldr	r1, [pc, #840]	; (1384 <BigHouse::BigHouse(Board_Sys80b&)+0xb9c>)
    103a:	a804      	add	r0, sp, #16
    103c:	f00b f832 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1040:	a904      	add	r1, sp, #16
    1042:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1044:	f604 4a04 	addw	sl, r4, #3076	; 0xc04
		descr = String(descrText);
    1048:	f00b f8be 	bl	c1c8 <String::operator=(String&&)>
    104c:	a804      	add	r0, sp, #16
    104e:	f00a ffd5 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1052:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1056:	233d      	movs	r3, #61	; 0x3d
    1058:	4630      	mov	r0, r6
    105a:	f8c4 2bb4 	str.w	r2, [r4, #2996]	; 0xbb4
    105e:	2100      	movs	r1, #0
    1060:	f884 3bb8 	strb.w	r3, [r4, #3000]	; 0xbb8
    1064:	f00b f80a 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1068:	49c7      	ldr	r1, [pc, #796]	; (1388 <BigHouse::BigHouse(Board_Sys80b&)+0xba0>)
    106a:	a804      	add	r0, sp, #16
    106c:	f00b f81a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1070:	a904      	add	r1, sp, #16
    1072:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1074:	f604 461c 	addw	r6, r4, #3100	; 0xc1c
		descr = String(descrText);
    1078:	f00b f8a6 	bl	c1c8 <String::operator=(String&&)>
    107c:	a804      	add	r0, sp, #16
    107e:	f00a ffbd 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1082:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1086:	233e      	movs	r3, #62	; 0x3e
    1088:	4648      	mov	r0, r9
    108a:	f8c4 2bcc 	str.w	r2, [r4, #3020]	; 0xbcc
    108e:	2100      	movs	r1, #0
    1090:	f884 3bd0 	strb.w	r3, [r4, #3024]	; 0xbd0
    1094:	f00a fff2 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1098:	49bc      	ldr	r1, [pc, #752]	; (138c <BigHouse::BigHouse(Board_Sys80b&)+0xba4>)
    109a:	a804      	add	r0, sp, #16
    109c:	f00b f802 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    10a0:	a904      	add	r1, sp, #16
    10a2:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10a4:	f604 4934 	addw	r9, r4, #3124	; 0xc34
		descr = String(descrText);
    10a8:	f00b f88e 	bl	c1c8 <String::operator=(String&&)>
    10ac:	a804      	add	r0, sp, #16
    10ae:	f00a ffa5 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10b2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    10b6:	233f      	movs	r3, #63	; 0x3f
    10b8:	4658      	mov	r0, fp
    10ba:	f8c4 2be4 	str.w	r2, [r4, #3044]	; 0xbe4
    10be:	2100      	movs	r1, #0
    10c0:	f884 3be8 	strb.w	r3, [r4, #3048]	; 0xbe8
    10c4:	f00a ffda 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    10c8:	49b1      	ldr	r1, [pc, #708]	; (1390 <BigHouse::BigHouse(Board_Sys80b&)+0xba8>)
    10ca:	a804      	add	r0, sp, #16
    10cc:	f00a ffea 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    10d0:	a904      	add	r1, sp, #16
    10d2:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10d4:	f604 4b4c 	addw	fp, r4, #3148	; 0xc4c
		descr = String(descrText);
    10d8:	f00b f876 	bl	c1c8 <String::operator=(String&&)>
    10dc:	a804      	add	r0, sp, #16
    10de:	f00a ff8d 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10e2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    10e6:	2340      	movs	r3, #64	; 0x40
    10e8:	4650      	mov	r0, sl
    10ea:	f8c4 2bfc 	str.w	r2, [r4, #3068]	; 0xbfc
    10ee:	2100      	movs	r1, #0
    10f0:	f884 3c00 	strb.w	r3, [r4, #3072]	; 0xc00
    10f4:	f00a ffc2 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    10f8:	49a6      	ldr	r1, [pc, #664]	; (1394 <BigHouse::BigHouse(Board_Sys80b&)+0xbac>)
    10fa:	a804      	add	r0, sp, #16
    10fc:	f00a ffd2 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1100:	a904      	add	r1, sp, #16
    1102:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1104:	f604 4a64 	addw	sl, r4, #3172	; 0xc64
		descr = String(descrText);
    1108:	f00b f85e 	bl	c1c8 <String::operator=(String&&)>
    110c:	a804      	add	r0, sp, #16
    110e:	f00a ff75 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1112:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1116:	2341      	movs	r3, #65	; 0x41
    1118:	4630      	mov	r0, r6
    111a:	f8c4 2c14 	str.w	r2, [r4, #3092]	; 0xc14
    111e:	2100      	movs	r1, #0
    1120:	f884 3c18 	strb.w	r3, [r4, #3096]	; 0xc18
    1124:	f00a ffaa 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1128:	499b      	ldr	r1, [pc, #620]	; (1398 <BigHouse::BigHouse(Board_Sys80b&)+0xbb0>)
    112a:	a804      	add	r0, sp, #16
    112c:	f00a ffba 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1130:	a904      	add	r1, sp, #16
    1132:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1134:	f604 467c 	addw	r6, r4, #3196	; 0xc7c
		descr = String(descrText);
    1138:	f00b f846 	bl	c1c8 <String::operator=(String&&)>
    113c:	a804      	add	r0, sp, #16
    113e:	f00a ff5d 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1142:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1146:	2342      	movs	r3, #66	; 0x42
    1148:	4648      	mov	r0, r9
    114a:	f8c4 2c2c 	str.w	r2, [r4, #3116]	; 0xc2c
    114e:	2100      	movs	r1, #0
    1150:	f884 3c30 	strb.w	r3, [r4, #3120]	; 0xc30
    1154:	f00a ff92 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1158:	4990      	ldr	r1, [pc, #576]	; (139c <BigHouse::BigHouse(Board_Sys80b&)+0xbb4>)
    115a:	a804      	add	r0, sp, #16
    115c:	f00a ffa2 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1160:	a904      	add	r1, sp, #16
    1162:	4648      	mov	r0, r9
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1164:	f604 4994 	addw	r9, r4, #3220	; 0xc94
		descr = String(descrText);
    1168:	f00b f82e 	bl	c1c8 <String::operator=(String&&)>
    116c:	a804      	add	r0, sp, #16
    116e:	f00a ff45 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1172:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1176:	2346      	movs	r3, #70	; 0x46
    1178:	4658      	mov	r0, fp
    117a:	f8c4 2c44 	str.w	r2, [r4, #3140]	; 0xc44
    117e:	2100      	movs	r1, #0
    1180:	f884 3c48 	strb.w	r3, [r4, #3144]	; 0xc48
    1184:	f00a ff7a 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1188:	4985      	ldr	r1, [pc, #532]	; (13a0 <BigHouse::BigHouse(Board_Sys80b&)+0xbb8>)
    118a:	a804      	add	r0, sp, #16
    118c:	f00a ff8a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1190:	a904      	add	r1, sp, #16
    1192:	4658      	mov	r0, fp
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1194:	f604 4bac 	addw	fp, r4, #3244	; 0xcac
		descr = String(descrText);
    1198:	f00b f816 	bl	c1c8 <String::operator=(String&&)>
    119c:	a804      	add	r0, sp, #16
    119e:	f00a ff2d 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11a2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    11a6:	2347      	movs	r3, #71	; 0x47
    11a8:	4650      	mov	r0, sl
    11aa:	f8c4 2c5c 	str.w	r2, [r4, #3164]	; 0xc5c
    11ae:	2100      	movs	r1, #0
    11b0:	f884 3c60 	strb.w	r3, [r4, #3168]	; 0xc60
    11b4:	f00a ff62 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    11b8:	497a      	ldr	r1, [pc, #488]	; (13a4 <BigHouse::BigHouse(Board_Sys80b&)+0xbbc>)
    11ba:	a804      	add	r0, sp, #16
    11bc:	f00a ff72 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    11c0:	a904      	add	r1, sp, #16
    11c2:	4650      	mov	r0, sl
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11c4:	f604 4ac4 	addw	sl, r4, #3268	; 0xcc4
		descr = String(descrText);
    11c8:	f00a fffe 	bl	c1c8 <String::operator=(String&&)>
    11cc:	a804      	add	r0, sp, #16
    11ce:	f00a ff15 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11d2:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    11d6:	2348      	movs	r3, #72	; 0x48
    11d8:	4630      	mov	r0, r6
    11da:	f8c4 2c74 	str.w	r2, [r4, #3188]	; 0xc74
    11de:	2100      	movs	r1, #0
    11e0:	f884 3c78 	strb.w	r3, [r4, #3192]	; 0xc78
    11e4:	f00a ff4a 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    11e8:	496f      	ldr	r1, [pc, #444]	; (13a8 <BigHouse::BigHouse(Board_Sys80b&)+0xbc0>)
    11ea:	a804      	add	r0, sp, #16
    11ec:	f00a ff5a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    11f0:	a904      	add	r1, sp, #16
    11f2:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11f4:	f604 46dc 	addw	r6, r4, #3292	; 0xcdc
		descr = String(descrText);
    11f8:	f00a ffe6 	bl	c1c8 <String::operator=(String&&)>
    11fc:	a804      	add	r0, sp, #16
    11fe:	f00a fefd 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1202:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1206:	2349      	movs	r3, #73	; 0x49
    1208:	2100      	movs	r1, #0
    120a:	f8c4 2c8c 	str.w	r2, [r4, #3212]	; 0xc8c
    120e:	4648      	mov	r0, r9
    1210:	f884 3c90 	strb.w	r3, [r4, #3216]	; 0xc90
    1214:	f00a ff32 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1218:	4964      	ldr	r1, [pc, #400]	; (13ac <BigHouse::BigHouse(Board_Sys80b&)+0xbc4>)
    121a:	a804      	add	r0, sp, #16
    121c:	f00a ff42 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1220:	a904      	add	r1, sp, #16
    1222:	4648      	mov	r0, r9
    1224:	f00a ffd0 	bl	c1c8 <String::operator=(String&&)>
    1228:	a804      	add	r0, sp, #16
    122a:	f00a fee7 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    122e:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    1232:	234a      	movs	r3, #74	; 0x4a
    1234:	2100      	movs	r1, #0
    1236:	f8c4 2ca4 	str.w	r2, [r4, #3236]	; 0xca4
    123a:	4658      	mov	r0, fp
    123c:	f884 3ca8 	strb.w	r3, [r4, #3240]	; 0xca8
    1240:	f00a ff1c 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1244:	495a      	ldr	r1, [pc, #360]	; (13b0 <BigHouse::BigHouse(Board_Sys80b&)+0xbc8>)
    1246:	a804      	add	r0, sp, #16
    1248:	f00a ff2c 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    124c:	a904      	add	r1, sp, #16
    124e:	4658      	mov	r0, fp
    1250:	f00a ffba 	bl	c1c8 <String::operator=(String&&)>
    1254:	a804      	add	r0, sp, #16
    1256:	f00a fed1 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    125a:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    125e:	234b      	movs	r3, #75	; 0x4b
    1260:	2100      	movs	r1, #0
    1262:	f8c4 2cbc 	str.w	r2, [r4, #3260]	; 0xcbc
    1266:	4650      	mov	r0, sl
    1268:	f884 3cc0 	strb.w	r3, [r4, #3264]	; 0xcc0
    126c:	f00a ff06 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    1270:	4950      	ldr	r1, [pc, #320]	; (13b4 <BigHouse::BigHouse(Board_Sys80b&)+0xbcc>)
    1272:	a804      	add	r0, sp, #16
    1274:	f00a ff16 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    1278:	a904      	add	r1, sp, #16
    127a:	4650      	mov	r0, sl
    127c:	f00a ffa4 	bl	c1c8 <String::operator=(String&&)>
    1280:	a804      	add	r0, sp, #16
    1282:	f00a febb 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1286:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
    128a:	234c      	movs	r3, #76	; 0x4c
    128c:	2100      	movs	r1, #0
    128e:	f8c4 2cd4 	str.w	r2, [r4, #3284]	; 0xcd4
    1292:	4630      	mov	r0, r6
    1294:	f884 3cd8 	strb.w	r3, [r4, #3288]	; 0xcd8
    1298:	f00a fef0 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    129c:	4946      	ldr	r1, [pc, #280]	; (13b8 <BigHouse::BigHouse(Board_Sys80b&)+0xbd0>)
    129e:	a804      	add	r0, sp, #16
    12a0:	f00a ff00 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    12a4:	a904      	add	r1, sp, #16
    12a6:	4630      	mov	r0, r6
    12a8:	f00a ff8e 	bl	c1c8 <String::operator=(String&&)>
    12ac:	a804      	add	r0, sp, #16
    12ae:	f00a fea5 	bl	bffc <String::~String()>
		ACTUATOR(ballRelease, LAMPS, 2, "ball release");
		ACTUATOR(ramp, LAMPS, 12, "ramp");
		ACTUATOR(ballGate, LAMPS, 13, "ball gate");
		ACTUATOR(auger, LAMPS, 14, "auger motor");
		// constructor
		Act(Sys80b* sys) : _sys(sys) {};
    12b2:	f8cd 8000 	str.w	r8, [sp]
    12b6:	4621      	mov	r1, r4
    12b8:	2302      	movs	r3, #2
    12ba:	2201      	movs	r2, #1
    12bc:	f8c4 4cec 	str.w	r4, [r4, #3308]	; 0xcec
    12c0:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
    12c4:	f004 f8aa 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    12c8:	4b3c      	ldr	r3, [pc, #240]	; (13bc <BigHouse::BigHouse(Board_Sys80b&)+0xbd4>)
    12ca:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    12ce:	2201      	movs	r2, #1
    12d0:	9300      	str	r3, [sp, #0]
    12d2:	f604 5008 	addw	r0, r4, #3336	; 0xd08
    12d6:	2303      	movs	r3, #3
    12d8:	f004 f8a0 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    12dc:	4b38      	ldr	r3, [pc, #224]	; (13c0 <BigHouse::BigHouse(Board_Sys80b&)+0xbd8>)
    12de:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    12e2:	2201      	movs	r2, #1
    12e4:	9300      	str	r3, [sp, #0]
    12e6:	f504 6052 	add.w	r0, r4, #3360	; 0xd20
    12ea:	2304      	movs	r3, #4
    12ec:	f004 f896 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    12f0:	4b34      	ldr	r3, [pc, #208]	; (13c4 <BigHouse::BigHouse(Board_Sys80b&)+0xbdc>)
    12f2:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    12f6:	2201      	movs	r2, #1
    12f8:	9300      	str	r3, [sp, #0]
    12fa:	f604 5038 	addw	r0, r4, #3384	; 0xd38
    12fe:	2305      	movs	r3, #5
    1300:	f004 f88c 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1304:	4b30      	ldr	r3, [pc, #192]	; (13c8 <BigHouse::BigHouse(Board_Sys80b&)+0xbe0>)
    1306:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    130a:	2201      	movs	r2, #1
    130c:	9300      	str	r3, [sp, #0]
    130e:	f504 6055 	add.w	r0, r4, #3408	; 0xd50
    1312:	2306      	movs	r3, #6
    1314:	f004 f882 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1318:	4b2c      	ldr	r3, [pc, #176]	; (13cc <BigHouse::BigHouse(Board_Sys80b&)+0xbe4>)
    131a:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    131e:	2201      	movs	r2, #1
    1320:	9300      	str	r3, [sp, #0]
    1322:	f604 5068 	addw	r0, r4, #3432	; 0xd68
    1326:	2307      	movs	r3, #7
    1328:	f004 f878 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    132c:	4a28      	ldr	r2, [pc, #160]	; (13d0 <BigHouse::BigHouse(Board_Sys80b&)+0xbe8>)
    132e:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    1332:	2302      	movs	r3, #2
    1334:	9200      	str	r2, [sp, #0]
    1336:	f504 6058 	add.w	r0, r4, #3456	; 0xd80
    133a:	2203      	movs	r2, #3
    133c:	f004 f86e 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1340:	4a24      	ldr	r2, [pc, #144]	; (13d4 <BigHouse::BigHouse(Board_Sys80b&)+0xbec>)
    1342:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    1346:	230c      	movs	r3, #12
    1348:	9200      	str	r2, [sp, #0]
    134a:	f604 5098 	addw	r0, r4, #3480	; 0xd98
    134e:	2203      	movs	r2, #3
    1350:	f004 f864 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1354:	4a20      	ldr	r2, [pc, #128]	; (13d8 <BigHouse::BigHouse(Board_Sys80b&)+0xbf0>)
    1356:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    135a:	230d      	movs	r3, #13
    135c:	9200      	str	r2, [sp, #0]
    135e:	f504 605b 	add.w	r0, r4, #3504	; 0xdb0
    1362:	2203      	movs	r2, #3
    1364:	f004 f85a 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1368:	4a1c      	ldr	r2, [pc, #112]	; (13dc <BigHouse::BigHouse(Board_Sys80b&)+0xbf4>)
    136a:	f8d4 1cec 	ldr.w	r1, [r4, #3308]	; 0xcec
    136e:	f604 50c8 	addw	r0, r4, #3528	; 0xdc8
    1372:	9200      	str	r2, [sp, #0]
    1374:	230e      	movs	r3, #14
    1376:	2203      	movs	r2, #3
    1378:	f004 f850 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    137c:	f504 6e5e 	add.w	lr, r4, #3552	; 0xde0
    1380:	e02e      	b.n	13e0 <BigHouse::BigHouse(Board_Sys80b&)+0xbf8>
    1382:	bf00      	nop
    1384:	200006a0 	.word	0x200006a0
    1388:	200006b0 	.word	0x200006b0
    138c:	200006c4 	.word	0x200006c4
    1390:	200006d8 	.word	0x200006d8
    1394:	200006f4 	.word	0x200006f4
    1398:	20000704 	.word	0x20000704
    139c:	2000071c 	.word	0x2000071c
    13a0:	20000728 	.word	0x20000728
    13a4:	20000738 	.word	0x20000738
    13a8:	2000074c 	.word	0x2000074c
    13ac:	20000760 	.word	0x20000760
    13b0:	2000077c 	.word	0x2000077c
    13b4:	2000078c 	.word	0x2000078c
    13b8:	20000720 	.word	0x20000720
    13bc:	200004a8 	.word	0x200004a8
    13c0:	200004bc 	.word	0x200004bc
    13c4:	200004d4 	.word	0x200004d4
    13c8:	200004e4 	.word	0x200004e4
    13cc:	200004f0 	.word	0x200004f0
    13d0:	200007a4 	.word	0x200007a4
    13d4:	200007b4 	.word	0x200007b4
    13d8:	200007bc 	.word	0x200007bc
    13dc:	200007c8 	.word	0x200007c8
    13e0:	6828      	ldr	r0, [r5, #0]
    13e2:	3510      	adds	r5, #16
    13e4:	f855 1c0c 	ldr.w	r1, [r5, #-12]
    13e8:	4676      	mov	r6, lr
    13ea:	f855 2c08 	ldr.w	r2, [r5, #-8]
    13ee:	f10e 0e10 	add.w	lr, lr, #16
    13f2:	f855 3c04 	ldr.w	r3, [r5, #-4]
    13f6:	42bd      	cmp	r5, r7
    13f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    13fa:	d1f1      	bne.n	13e0 <BigHouse::BigHouse(Board_Sys80b&)+0xbf8>
	msg->outln(F("BigHouse init..."));
    13fc:	49c6      	ldr	r1, [pc, #792]	; (1718 <BigHouse::BigHouse(Board_Sys80b&)+0xf30>)
	delay(100);
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
	slamSwitchNormalState = false;
    13fe:	f04f 0800 	mov.w	r8, #0
#include "LightGroup.h"

//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
    1402:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
	slamSwitchNormalState = false;
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
    1406:	f04f 35ff 	mov.w	r5, #4294967295
#include "LightGroup.h"

//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
    140a:	f005 f821 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	delay(100);
    140e:	2064      	movs	r0, #100	; 0x64
    1410:	f009 f844 	bl	a49c <delay>
	_gameName = String(GAME_NAME);
    1414:	f8d4 1528 	ldr.w	r1, [r4, #1320]	; 0x528
    1418:	a804      	add	r0, sp, #16
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
	special_ls = new LightGroup("special", 10, 11, -1);
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
    141a:	2720      	movs	r7, #32
//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
	delay(100);
	_gameName = String(GAME_NAME);
    141c:	f00a fe2e 	bl	c07c <String::String(char const*)>
    1420:	a904      	add	r1, sp, #16
    1422:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
	special_ls = new LightGroup("special", 10, 11, -1);
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
    1426:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
//using namespace msg;

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
	delay(100);
	_gameName = String(GAME_NAME);
    142a:	f00a fecd 	bl	c1c8 <String::operator=(String&&)>
    142e:	a804      	add	r0, sp, #16
    1430:	f00a fde4 	bl	bffc <String::~String()>
	_gameNum = GAME_NUMBER;
    1434:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
	slamSwitchNormalState = false;
    1438:	f884 827d 	strb.w	r8, [r4, #637]	; 0x27d
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
    143c:	201c      	movs	r0, #28

BigHouse::BigHouse(Board_Sys80b& board) : PinGame(board) {
	msg->outln(F("BigHouse init..."));
	delay(100);
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
    143e:	f8a4 3518 	strh.w	r3, [r4, #1304]	; 0x518
	slamSwitchNormalState = false;
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
    1442:	f00a fcd5 	bl	bdf0 <operator new(unsigned int)>
    1446:	2207      	movs	r2, #7
    1448:	4606      	mov	r6, r0
    144a:	9501      	str	r5, [sp, #4]
    144c:	2306      	movs	r3, #6
    144e:	9200      	str	r2, [sp, #0]
    1450:	49b2      	ldr	r1, [pc, #712]	; (171c <BigHouse::BigHouse(Board_Sys80b&)+0xf34>)
    1452:	2205      	movs	r2, #5
    1454:	f002 fa82 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    1458:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
    145c:	201c      	movs	r0, #28
    145e:	f00a fcc7 	bl	bdf0 <operator new(unsigned int)>
    1462:	4606      	mov	r6, r0
    1464:	9500      	str	r5, [sp, #0]
    1466:	2309      	movs	r3, #9
    1468:	2208      	movs	r2, #8
    146a:	49ad      	ldr	r1, [pc, #692]	; (1720 <BigHouse::BigHouse(Board_Sys80b&)+0xf38>)
    146c:	f002 fa76 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    1470:	f8c4 6570 	str.w	r6, [r4, #1392]	; 0x570
	special_ls = new LightGroup("special", 10, 11, -1);
    1474:	201c      	movs	r0, #28
    1476:	f00a fcbb 	bl	bdf0 <operator new(unsigned int)>
    147a:	9500      	str	r5, [sp, #0]
    147c:	4606      	mov	r6, r0
    147e:	230b      	movs	r3, #11
    1480:	220a      	movs	r2, #10
    1482:	49a8      	ldr	r1, [pc, #672]	; (1724 <BigHouse::BigHouse(Board_Sys80b&)+0xf3c>)
    1484:	f002 fa6a 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
    1488:	201c      	movs	r0, #28
	slamSwitchNormalState = false;
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
	special_ls = new LightGroup("special", 10, 11, -1);
    148a:	f8c4 6574 	str.w	r6, [r4, #1396]	; 0x574
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
    148e:	4606      	mov	r6, r0
	//msg->outln(F("- light groups init..."));
	//delay(100);
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1);
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1);
	special_ls = new LightGroup("special", 10, 11, -1);
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1);
    1490:	f00a fcae 	bl	bdf0 <operator new(unsigned int)>
    1494:	2219      	movs	r2, #25
    1496:	2118      	movs	r1, #24
    1498:	4681      	mov	r9, r0
    149a:	9502      	str	r5, [sp, #8]
    149c:	2317      	movs	r3, #23
    149e:	9201      	str	r2, [sp, #4]
    14a0:	9100      	str	r1, [sp, #0]
    14a2:	2216      	movs	r2, #22
    14a4:	49a0      	ldr	r1, [pc, #640]	; (1728 <BigHouse::BigHouse(Board_Sys80b&)+0xf40>)
    14a6:	f002 fa59 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    14aa:	f8c4 9578 	str.w	r9, [r4, #1400]	; 0x578
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
    14ae:	4630      	mov	r0, r6
    14b0:	f00a fc9e 	bl	bdf0 <operator new(unsigned int)>
    14b4:	2221      	movs	r2, #33	; 0x21
    14b6:	211f      	movs	r1, #31
    14b8:	4681      	mov	r9, r0
    14ba:	9503      	str	r5, [sp, #12]
    14bc:	231e      	movs	r3, #30
    14be:	9202      	str	r2, [sp, #8]
    14c0:	221d      	movs	r2, #29
    14c2:	9100      	str	r1, [sp, #0]
    14c4:	9701      	str	r7, [sp, #4]
    14c6:	4999      	ldr	r1, [pc, #612]	; (172c <BigHouse::BigHouse(Board_Sys80b&)+0xf44>)
    14c8:	f002 fa48 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    14cc:	f8c4 957c 	str.w	r9, [r4, #1404]	; 0x57c
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
    14d0:	4630      	mov	r0, r6
    14d2:	f00a fc8d 	bl	bdf0 <operator new(unsigned int)>
    14d6:	2225      	movs	r2, #37	; 0x25
    14d8:	2124      	movs	r1, #36	; 0x24
    14da:	4681      	mov	r9, r0
    14dc:	9502      	str	r5, [sp, #8]
    14de:	2323      	movs	r3, #35	; 0x23
    14e0:	9201      	str	r2, [sp, #4]
    14e2:	2222      	movs	r2, #34	; 0x22
    14e4:	9100      	str	r1, [sp, #0]
    14e6:	4992      	ldr	r1, [pc, #584]	; (1730 <BigHouse::BigHouse(Board_Sys80b&)+0xf48>)
    14e8:	f002 fa38 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    14ec:	f8c4 9580 	str.w	r9, [r4, #1408]	; 0x580
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
    14f0:	4630      	mov	r0, r6
    14f2:	f00a fc7d 	bl	bdf0 <operator new(unsigned int)>
    14f6:	2229      	movs	r2, #41	; 0x29
    14f8:	2128      	movs	r1, #40	; 0x28
    14fa:	4681      	mov	r9, r0
    14fc:	9502      	str	r5, [sp, #8]
    14fe:	2327      	movs	r3, #39	; 0x27
    1500:	9201      	str	r2, [sp, #4]
    1502:	2226      	movs	r2, #38	; 0x26
    1504:	9100      	str	r1, [sp, #0]
    1506:	498b      	ldr	r1, [pc, #556]	; (1734 <BigHouse::BigHouse(Board_Sys80b&)+0xf4c>)
    1508:	f002 fa28 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    150c:	f8c4 9584 	str.w	r9, [r4, #1412]	; 0x584
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
    1510:	4630      	mov	r0, r6
    1512:	f00a fc6d 	bl	bdf0 <operator new(unsigned int)>
    1516:	222d      	movs	r2, #45	; 0x2d
    1518:	4681      	mov	r9, r0
    151a:	9502      	str	r5, [sp, #8]
    151c:	232b      	movs	r3, #43	; 0x2b
    151e:	9201      	str	r2, [sp, #4]
    1520:	f8cd a000 	str.w	sl, [sp]
    1524:	222a      	movs	r2, #42	; 0x2a
    1526:	4984      	ldr	r1, [pc, #528]	; (1738 <BigHouse::BigHouse(Board_Sys80b&)+0xf50>)
    1528:	f002 fa18 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    152c:	f8c4 9588 	str.w	r9, [r4, #1416]	; 0x588
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
    1530:	4630      	mov	r0, r6
    1532:	f00a fc5d 	bl	bdf0 <operator new(unsigned int)>
    1536:	4681      	mov	r9, r0
    1538:	9500      	str	r5, [sp, #0]
    153a:	232e      	movs	r3, #46	; 0x2e
    153c:	2211      	movs	r2, #17
    153e:	497f      	ldr	r1, [pc, #508]	; (173c <BigHouse::BigHouse(Board_Sys80b&)+0xf54>)
    1540:	f002 fa0c 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    1544:	f8c4 958c 	str.w	r9, [r4, #1420]	; 0x58c
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
    1548:	4630      	mov	r0, r6
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
    154a:	f504 7925 	add.w	r9, r4, #660	; 0x294
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1);
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1);
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1);
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
    154e:	f00a fc4f 	bl	bdf0 <operator new(unsigned int)>
    1552:	4683      	mov	fp, r0
    1554:	9501      	str	r5, [sp, #4]
    1556:	231b      	movs	r3, #27
    1558:	9600      	str	r6, [sp, #0]
    155a:	221a      	movs	r2, #26
    155c:	4978      	ldr	r1, [pc, #480]	; (1740 <BigHouse::BigHouse(Board_Sys80b&)+0xf58>)
    155e:	f002 f9fd 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    1562:	f8c4 b590 	str.w	fp, [r4, #1424]	; 0x590
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1);
    1566:	4630      	mov	r0, r6
    1568:	f00a fc42 	bl	bdf0 <operator new(unsigned int)>
    156c:	2215      	movs	r2, #21
    156e:	4683      	mov	fp, r0
    1570:	9502      	str	r5, [sp, #8]
    1572:	9600      	str	r6, [sp, #0]
    1574:	231b      	movs	r3, #27
    1576:	9201      	str	r2, [sp, #4]
    1578:	221a      	movs	r2, #26
    157a:	4972      	ldr	r1, [pc, #456]	; (1744 <BigHouse::BigHouse(Board_Sys80b&)+0xf5c>)
    157c:	f002 f9ee 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    1580:	f8c4 b594 	str.w	fp, [r4, #1428]	; 0x594
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
    1584:	4630      	mov	r0, r6
    1586:	f00a fc33 	bl	bdf0 <operator new(unsigned int)>
    158a:	2209      	movs	r2, #9
    158c:	210b      	movs	r1, #11
    158e:	4683      	mov	fp, r0
    1590:	9502      	str	r5, [sp, #8]
    1592:	230a      	movs	r3, #10
    1594:	9201      	str	r2, [sp, #4]
    1596:	2208      	movs	r2, #8
    1598:	9100      	str	r1, [sp, #0]
    159a:	496b      	ldr	r1, [pc, #428]	; (1748 <BigHouse::BigHouse(Board_Sys80b&)+0xf60>)
    159c:	f002 f9de 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    15a0:	f8c4 b598 	str.w	fp, [r4, #1432]	; 0x598
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
    15a4:	4630      	mov	r0, r6
    15a6:	f00a fc23 	bl	bdf0 <operator new(unsigned int)>
    15aa:	232d      	movs	r3, #45	; 0x2d
    15ac:	4683      	mov	fp, r0
    15ae:	9502      	str	r5, [sp, #8]
    15b0:	9301      	str	r3, [sp, #4]
    15b2:	220f      	movs	r2, #15
    15b4:	2314      	movs	r3, #20
    15b6:	f8cd a000 	str.w	sl, [sp]
    15ba:	4964      	ldr	r1, [pc, #400]	; (174c <BigHouse::BigHouse(Board_Sys80b&)+0xf64>)
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
    15bc:	f204 4ae4 	addw	sl, r4, #1252	; 0x4e4
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1);
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1);
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1);
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1);
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
    15c0:	f002 f9cc 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    15c4:	f8c4 b59c 	str.w	fp, [r4, #1436]	; 0x59c
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
    15c8:	4630      	mov	r0, r6
    15ca:	f00a fc11 	bl	bdf0 <operator new(unsigned int)>
    15ce:	231f      	movs	r3, #31
    15d0:	4683      	mov	fp, r0
    15d2:	9502      	str	r5, [sp, #8]
    15d4:	9300      	str	r3, [sp, #0]
    15d6:	221d      	movs	r2, #29
    15d8:	231e      	movs	r3, #30
    15da:	495d      	ldr	r1, [pc, #372]	; (1750 <BigHouse::BigHouse(Board_Sys80b&)+0xf68>)
    15dc:	9701      	str	r7, [sp, #4]
    15de:	f002 f9bd 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    15e2:	f8c4 b5a0 	str.w	fp, [r4, #1440]	; 0x5a0
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
    15e6:	4630      	mov	r0, r6
    15e8:	f00a fc02 	bl	bdf0 <operator new(unsigned int)>
    15ec:	222b      	movs	r2, #43	; 0x2b
    15ee:	2307      	movs	r3, #7
    15f0:	4683      	mov	fp, r0
    15f2:	9502      	str	r5, [sp, #8]
    15f4:	9300      	str	r3, [sp, #0]
    15f6:	2306      	movs	r3, #6
    15f8:	9201      	str	r2, [sp, #4]
    15fa:	2205      	movs	r2, #5
    15fc:	4955      	ldr	r1, [pc, #340]	; (1754 <BigHouse::BigHouse(Board_Sys80b&)+0xf6c>)
    15fe:	f002 f9ad 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
    1602:	f8c4 b5a4 	str.w	fp, [r4, #1444]	; 0x5a4
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
    1606:	4630      	mov	r0, r6
    1608:	f00a fbf2 	bl	bdf0 <operator new(unsigned int)>
    160c:	222a      	movs	r2, #42	; 0x2a
    160e:	2321      	movs	r3, #33	; 0x21
    1610:	9502      	str	r5, [sp, #8]
    1612:	9200      	str	r2, [sp, #0]
    1614:	2203      	movs	r2, #3
    1616:	9301      	str	r3, [sp, #4]
    1618:	2311      	movs	r3, #17
    161a:	494f      	ldr	r1, [pc, #316]	; (1758 <BigHouse::BigHouse(Board_Sys80b&)+0xf70>)
    161c:	4606      	mov	r6, r0
    161e:	f002 f99d 	bl	395c <LightGroup::LightGroup(char const*, long, ...)>
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
    1622:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
    1626:	f8d4 1580 	ldr.w	r1, [r4, #1408]	; 0x580
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
    162a:	4638      	mov	r0, r7
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
    162c:	f8c4 35b4 	str.w	r3, [r4, #1460]	; 0x5b4
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
    1630:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
    1634:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
    1638:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
	lShow_set[5] = show4_ls;
    163c:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	; 0x5a0
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
    1640:	f8d4 5598 	ldr.w	r5, [r4, #1432]	; 0x598
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
    1644:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
	lShow_set[6] = show5_ls;
    1648:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1);
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
    164c:	f8c4 65a8 	str.w	r6, [r4, #1448]	; 0x5a8
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
	lShow_set[6] = show5_ls;
	lShow_set[7] = show6_ls;
    1650:	f8c4 65c8 	str.w	r6, [r4, #1480]	; 0x5c8
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
    1654:	2601      	movs	r6, #1
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1);
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1);
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1);
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1);
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1);
	lShow_set[0] = jail_ls;
    1656:	f8c4 15ac 	str.w	r1, [r4, #1452]	; 0x5ac
	lShow_set[1] = wall_ls;
    165a:	f8c4 25b0 	str.w	r2, [r4, #1456]	; 0x5b0
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
    165e:	f8c4 55b8 	str.w	r5, [r4, #1464]	; 0x5b8
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
	lShow_set[6] = show5_ls;
    1662:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
    1666:	f00a fbc3 	bl	bdf0 <operator new(unsigned int)>
    166a:	4605      	mov	r5, r0
    166c:	4649      	mov	r1, r9
    166e:	4b3b      	ldr	r3, [pc, #236]	; (175c <BigHouse::BigHouse(Board_Sys80b&)+0xf74>)
    1670:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    1674:	f8cd 8000 	str.w	r8, [sp]
    1678:	f004 f9a8 	bl	59cc <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
    167c:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
    1680:	4638      	mov	r0, r7
    1682:	f00a fbb5 	bl	bdf0 <operator new(unsigned int)>
    1686:	4605      	mov	r5, r0
    1688:	4649      	mov	r1, r9
    168a:	4b35      	ldr	r3, [pc, #212]	; (1760 <BigHouse::BigHouse(Board_Sys80b&)+0xf78>)
    168c:	22c8      	movs	r2, #200	; 0xc8
    168e:	9600      	str	r6, [sp, #0]
    1690:	f004 f99c 	bl	59cc <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
    1694:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
    1698:	4638      	mov	r0, r7
    169a:	f00a fba9 	bl	bdf0 <operator new(unsigned int)>
    169e:	4605      	mov	r5, r0
    16a0:	4b30      	ldr	r3, [pc, #192]	; (1764 <BigHouse::BigHouse(Board_Sys80b&)+0xf7c>)
    16a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    16a6:	4649      	mov	r1, r9
    16a8:	f8cd 8000 	str.w	r8, [sp]
    16ac:	f004 f98e 	bl	59cc <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
	brel_tmr->setPeriodic(false);
    16b0:	4641      	mov	r1, r8
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
    16b2:	f8c4 5554 	str.w	r5, [r4, #1364]	; 0x554
	brel_tmr->setPeriodic(false);
    16b6:	4628      	mov	r0, r5
    16b8:	f004 f9bc 	bl	5a34 <TimerTask::setPeriodic(bool)>
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    16bc:	4638      	mov	r0, r7
    16be:	f00a fb97 	bl	bdf0 <operator new(unsigned int)>
    16c2:	4605      	mov	r5, r0
    16c4:	4b28      	ldr	r3, [pc, #160]	; (1768 <BigHouse::BigHouse(Board_Sys80b&)+0xf80>)
    16c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16ca:	4649      	mov	r1, r9
    16cc:	f8cd 8000 	str.w	r8, [sp]
    16d0:	f004 f97c 	bl	59cc <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
	dropTargets_tt = tmr.add(dropt_tmr);
    16d4:	f8d4 154c 	ldr.w	r1, [r4, #1356]	; 0x54c
	//msg->outln(F("- timers init..."));
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    16d8:	f8c4 5558 	str.w	r5, [r4, #1368]	; 0x558
	dropTargets_tt = tmr.add(dropt_tmr);
    16dc:	4650      	mov	r0, sl
    16de:	f004 f957 	bl	5990 <TimerSet::add(TimerTask*)>
	lightShow_tt = tmr.add(lshow_tmr);
    16e2:	f8d4 1550 	ldr.w	r1, [r4, #1360]	; 0x550
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", false);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
    16e6:	f8c4 055c 	str.w	r0, [r4, #1372]	; 0x55c
	lightShow_tt = tmr.add(lshow_tmr);
    16ea:	4650      	mov	r0, sl
    16ec:	f004 f950 	bl	5990 <TimerSet::add(TimerTask*)>
	ballRelease_tt = tmr.add(brel_tmr);
    16f0:	f8d4 1554 	ldr.w	r1, [r4, #1364]	; 0x554
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
	lightShow_tt = tmr.add(lshow_tmr);
    16f4:	f8c4 0560 	str.w	r0, [r4, #1376]	; 0x560
	ballRelease_tt = tmr.add(brel_tmr);
    16f8:	4650      	mov	r0, sl
    16fa:	f004 f949 	bl	5990 <TimerSet::add(TimerTask*)>
	display_tt = tmr.add(dshow_tmr);
    16fe:	f8d4 1558 	ldr.w	r1, [r4, #1368]	; 0x558
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
    1702:	f8c4 0564 	str.w	r0, [r4, #1380]	; 0x564
	display_tt = tmr.add(dshow_tmr);
    1706:	4650      	mov	r0, sl
    1708:	f004 f942 	bl	5990 <TimerSet::add(TimerTask*)>
    170c:	f8c4 0568 	str.w	r0, [r4, #1384]	; 0x568
}
    1710:	4620      	mov	r0, r4
    1712:	b009      	add	sp, #36	; 0x24
    1714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1718:	200007d4 	.word	0x200007d4
    171c:	200007e8 	.word	0x200007e8
    1720:	200007f4 	.word	0x200007f4
    1724:	20000800 	.word	0x20000800
    1728:	20000808 	.word	0x20000808
    172c:	20000810 	.word	0x20000810
    1730:	20000818 	.word	0x20000818
    1734:	20000820 	.word	0x20000820
    1738:	20000828 	.word	0x20000828
    173c:	20000834 	.word	0x20000834
    1740:	20000840 	.word	0x20000840
    1744:	2000084c 	.word	0x2000084c
    1748:	20000854 	.word	0x20000854
    174c:	2000085c 	.word	0x2000085c
    1750:	20000864 	.word	0x20000864
    1754:	2000086c 	.word	0x2000086c
    1758:	20000874 	.word	0x20000874
    175c:	2000087c 	.word	0x2000087c
    1760:	2000088c 	.word	0x2000088c
    1764:	20000898 	.word	0x20000898
    1768:	200008a8 	.word	0x200008a8

0000176c <BigHouse::resetDropTargets()>:
	break_ls->set(0, BLINK_L);
	jailSeq = 0;
	breakSeq = 0;
}

void BigHouse::resetDropTargets() {
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	4604      	mov	r4, r0
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetHit = 0;
    1770:	2500      	movs	r5, #0
	jailSeq = 0;
	breakSeq = 0;
}

void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
    1772:	f8d0 054c 	ldr.w	r0, [r0, #1356]	; 0x54c
    1776:	f004 f969 	bl	5a4c <TimerTask::disable()>
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
    177a:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    177e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1782:	f004 f955 	bl	5a30 <TimerTask::setPeriod(unsigned long)>
	dropTargetHit = 0;
	droptarget_ls->setAll(OFF_L);
    1786:	4629      	mov	r1, r5
    1788:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
}

void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetHit = 0;
    178c:	f884 5537 	strb.w	r5, [r4, #1335]	; 0x537
	droptarget_ls->setAll(OFF_L);
    1790:	f002 f9d8 	bl	3b44 <LightGroup::setAll(lightState)>
	activateSolenoid(BRESET, 250);
    1794:	462b      	mov	r3, r5
    1796:	4620      	mov	r0, r4
    1798:	22fa      	movs	r2, #250	; 0xfa
    179a:	2106      	movs	r1, #6
}
    179c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetHit = 0;
	droptarget_ls->setAll(OFF_L);
	activateSolenoid(BRESET, 250);
    17a0:	f003 bbe6 	b.w	4f70 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>

000017a4 <BigHouse::advanceJail()>:
		wallDown = true;
	}
	return wallDown;
}

void BigHouse::advanceJail() {
    17a4:	b510      	push	{r4, lr}
    17a6:	4604      	mov	r4, r0
	jail_ls->set(jailSeq, ON_L);
    17a8:	f890 1535 	ldrb.w	r1, [r0, #1333]	; 0x535
    17ac:	2201      	movs	r2, #1
    17ae:	f8d0 0580 	ldr.w	r0, [r0, #1408]	; 0x580
    17b2:	f002 f937 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
	if (jailSeq < 4) jail_ls->set(jailSeq++, BLINK_L);
    17b6:	f894 1535 	ldrb.w	r1, [r4, #1333]	; 0x535
    17ba:	2903      	cmp	r1, #3
    17bc:	d900      	bls.n	17c0 <BigHouse::advanceJail()+0x1c>
    17be:	bd10      	pop	{r4, pc}
    17c0:	1c4b      	adds	r3, r1, #1
    17c2:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    17c6:	2202      	movs	r2, #2
    17c8:	f884 3535 	strb.w	r3, [r4, #1333]	; 0x535
}
    17cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return wallDown;
}

void BigHouse::advanceJail() {
	jail_ls->set(jailSeq, ON_L);
	if (jailSeq < 4) jail_ls->set(jailSeq++, BLINK_L);
    17d0:	f002 b928 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>

000017d4 <BigHouse::onDropTarget(unsigned char)>:
	PinGame::millisRoutine(ms);
}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) { // n = 0, 1, 2, 3
    17d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17d6:	4604      	mov	r4, r0
    17d8:	460d      	mov	r5, r1
	msg->outln("onDropTarget");
    17da:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    17de:	493d      	ldr	r1, [pc, #244]	; (18d4 <BigHouse::onDropTarget(unsigned char)+0x100>)
    17e0:	f004 fe66 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(5000); else addScore(3000);
    17e4:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    17e8:	b1b3      	cbz	r3, 1818 <BigHouse::onDropTarget(unsigned char)+0x44>
    17ea:	f241 3188 	movw	r1, #5000	; 0x1388
    17ee:	4620      	mov	r0, r4
    17f0:	f003 f836 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    17f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    17f8:	4620      	mov	r0, r4
    17fa:	f003 f89d 	bl	4938 <PinGame::addBonus(unsigned long)>

	if (dropTargetHit == 0) {
    17fe:	f894 1537 	ldrb.w	r1, [r4, #1335]	; 0x537
    1802:	b1b9      	cbz	r1, 1834 <BigHouse::onDropTarget(unsigned char)+0x60>
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
		dropt_tmr->enable();
	}
	dropTargetHit |= 1 << n;
    1804:	2601      	movs	r6, #1
    1806:	fa06 f505 	lsl.w	r5, r6, r5
    180a:	4329      	orrs	r1, r5
    180c:	b2c9      	uxtb	r1, r1
	//if (allDropTargetsDown()) {
	if (dropTargetHit == 0xf) { // all targets down
    180e:	290f      	cmp	r1, #15
	if (dropTargetHit == 0) {
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
		dropt_tmr->enable();
	}
	dropTargetHit |= 1 << n;
    1810:	f884 1537 	strb.w	r1, [r4, #1335]	; 0x537
	//if (allDropTargetsDown()) {
	if (dropTargetHit == 0xf) { // all targets down
    1814:	d020      	beq.n	1858 <BigHouse::onDropTarget(unsigned char)+0x84>
    1816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) { // n = 0, 1, 2, 3
	msg->outln("onDropTarget");
	if (_3balls) addScore(5000); else addScore(3000);
    1818:	f640 31b8 	movw	r1, #3000	; 0xbb8
    181c:	4620      	mov	r0, r4
    181e:	f003 f81f 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1822:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1826:	4620      	mov	r0, r4
    1828:	f003 f886 	bl	4938 <PinGame::addBonus(unsigned long)>

	if (dropTargetHit == 0) {
    182c:	f894 1537 	ldrb.w	r1, [r4, #1335]	; 0x537
    1830:	2900      	cmp	r1, #0
    1832:	d1e7      	bne.n	1804 <BigHouse::onDropTarget(unsigned char)+0x30>
		droptarget_ls->set(0, BLINK_L);
    1834:	2202      	movs	r2, #2
    1836:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    183a:	f002 f8f3 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
    183e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1842:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    1846:	f004 f8f3 	bl	5a30 <TimerTask::setPeriod(unsigned long)>
		dropt_tmr->enable();
    184a:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    184e:	f004 f8f5 	bl	5a3c <TimerTask::enable()>
    1852:	f894 1537 	ldrb.w	r1, [r4, #1335]	; 0x537
    1856:	e7d5      	b.n	1804 <BigHouse::onDropTarget(unsigned char)+0x30>
	}
	dropTargetHit |= 1 << n;
	//if (allDropTargetsDown()) {
	if (dropTargetHit == 0xf) { // all targets down
		if (droptarget_ls->isActive(2)) { // lights special
    1858:	2102      	movs	r1, #2
    185a:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    185e:	f002 f93d 	bl	3adc <LightGroup::isActive(unsigned char)>
    1862:	4605      	mov	r5, r0
    1864:	b188      	cbz	r0, 188a <BigHouse::onDropTarget(unsigned char)+0xb6>
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
    1866:	f64e 2260 	movw	r2, #60000	; 0xea60
    186a:	2102      	movs	r1, #2
    186c:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1870:	f002 f9d2 	bl	3c18 <LightGroup::switchTheFirst(lightState, unsigned short)>
			droptarget_ls->set(2, OFF_L);
    1874:	2200      	movs	r2, #0
    1876:	2102      	movs	r1, #2
    1878:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    187c:	f002 f8d2 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
			addScore(10000);
			droptarget_ls->set(0, OFF_L);
		}
		resetDropTargets();
    1880:	4620      	mov	r0, r4
		// .. sounds
	}
}
    1882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
			addScore(10000);
			droptarget_ls->set(0, OFF_L);
		}
		resetDropTargets();
    1886:	f7ff bf71 	b.w	176c <BigHouse::resetDropTargets()>
	if (dropTargetHit == 0xf) { // all targets down
		if (droptarget_ls->isActive(2)) { // lights special
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
			droptarget_ls->set(2, OFF_L);
		}
		else if (droptarget_ls->isActive(1)) { // 100000x
    188a:	4631      	mov	r1, r6
    188c:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1890:	f002 f924 	bl	3adc <LightGroup::isActive(unsigned char)>
    1894:	4607      	mov	r7, r0
    1896:	b990      	cbnz	r0, 18be <BigHouse::onDropTarget(unsigned char)+0xea>
			addScore(100000);
			droptarget_ls->set(1, OFF_L);
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
    1898:	4601      	mov	r1, r0
    189a:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    189e:	f002 f91d 	bl	3adc <LightGroup::isActive(unsigned char)>
    18a2:	2800      	cmp	r0, #0
    18a4:	d0ec      	beq.n	1880 <BigHouse::onDropTarget(unsigned char)+0xac>
			addScore(10000);
    18a6:	4620      	mov	r0, r4
    18a8:	f242 7110 	movw	r1, #10000	; 0x2710
    18ac:	f002 ffd8 	bl	4860 <PinGame::addScore(unsigned long)>
			droptarget_ls->set(0, OFF_L);
    18b0:	463a      	mov	r2, r7
    18b2:	4639      	mov	r1, r7
    18b4:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    18b8:	f002 f8b4 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
    18bc:	e7e0      	b.n	1880 <BigHouse::onDropTarget(unsigned char)+0xac>
		if (droptarget_ls->isActive(2)) { // lights special
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
			droptarget_ls->set(2, OFF_L);
		}
		else if (droptarget_ls->isActive(1)) { // 100000x
			addScore(100000);
    18be:	4620      	mov	r0, r4
    18c0:	4905      	ldr	r1, [pc, #20]	; (18d8 <BigHouse::onDropTarget(unsigned char)+0x104>)
    18c2:	f002 ffcd 	bl	4860 <PinGame::addScore(unsigned long)>
			droptarget_ls->set(1, OFF_L);
    18c6:	462a      	mov	r2, r5
    18c8:	4631      	mov	r1, r6
    18ca:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    18ce:	f002 f8a9 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
    18d2:	e7d5      	b.n	1880 <BigHouse::onDropTarget(unsigned char)+0xac>
    18d4:	200008b8 	.word	0x200008b8
    18d8:	000186a0 	.word	0x000186a0

000018dc <BigHouse::onJailTarget(unsigned char)>:
		resetDropTargets();
		// .. sounds
	}
}

void BigHouse::onJailTarget(byte n) {
    18dc:	b538      	push	{r3, r4, r5, lr}
    18de:	4604      	mov	r4, r0
    18e0:	460d      	mov	r5, r1
	msg->outln("onJailTarget");
    18e2:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    18e6:	491e      	ldr	r1, [pc, #120]	; (1960 <BigHouse::onJailTarget(unsigned char)+0x84>)
    18e8:	f004 fde2 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(3000); else addScore(1000);
    18ec:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    18f0:	b1f3      	cbz	r3, 1930 <BigHouse::onJailTarget(unsigned char)+0x54>
    18f2:	f640 31b8 	movw	r1, #3000	; 0xbb8
    18f6:	4620      	mov	r0, r4
    18f8:	f002 ffb2 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    18fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1900:	4620      	mov	r0, r4
    1902:	f003 f819 	bl	4938 <PinGame::addBonus(unsigned long)>
	if (jail_ls->getState(n) == BLINK_L) {
    1906:	4629      	mov	r1, r5
    1908:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    190c:	f002 f8d4 	bl	3ab8 <LightGroup::getState(unsigned char)>
    1910:	2802      	cmp	r0, #2
    1912:	d013      	beq.n	193c <BigHouse::onJailTarget(unsigned char)+0x60>
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
    1914:	4629      	mov	r1, r5
    1916:	2264      	movs	r2, #100	; 0x64
    1918:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    191c:	f002 f8ae 	bl	3a7c <LightGroup::pulse(unsigned char, unsigned short)>
	if (jailSeq == 4 && breakSeq == 5) {
    1920:	f8d4 1534 	ldr.w	r1, [r4, #1332]	; 0x534
    1924:	4b0f      	ldr	r3, [pc, #60]	; (1964 <BigHouse::onJailTarget(unsigned char)+0x88>)
    1926:	4a10      	ldr	r2, [pc, #64]	; (1968 <BigHouse::onJailTarget(unsigned char)+0x8c>)
    1928:	400b      	ands	r3, r1
    192a:	4293      	cmp	r3, r2
    192c:	d00f      	beq.n	194e <BigHouse::onJailTarget(unsigned char)+0x72>
    192e:	bd38      	pop	{r3, r4, r5, pc}
	}
}

void BigHouse::onJailTarget(byte n) {
	msg->outln("onJailTarget");
	if (_3balls) addScore(3000); else addScore(1000);
    1930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1934:	4620      	mov	r0, r4
    1936:	f002 ff93 	bl	4860 <PinGame::addScore(unsigned long)>
    193a:	e7df      	b.n	18fc <BigHouse::onJailTarget(unsigned char)+0x20>
	addBonus(1000);
	if (jail_ls->getState(n) == BLINK_L) {
		advanceJail();
    193c:	4620      	mov	r0, r4
    193e:	f7ff ff31 	bl	17a4 <BigHouse::advanceJail()>
		addScore(10000);
    1942:	f242 7110 	movw	r1, #10000	; 0x2710
    1946:	4620      	mov	r0, r4
    1948:	f002 ff8a 	bl	4860 <PinGame::addScore(unsigned long)>
    194c:	e7e8      	b.n	1920 <BigHouse::onJailTarget(unsigned char)+0x44>
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    194e:	2201      	movs	r2, #1
    1950:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1954:	4611      	mov	r1, r2
		// .. soundBuffer
	}
}
    1956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    195a:	f002 b863 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>
    195e:	bf00      	nop
    1960:	200008c8 	.word	0x200008c8
    1964:	00ffff00 	.word	0x00ffff00
    1968:	00050400 	.word	0x00050400

0000196c <BigHouse::onBreakTarget(unsigned char)>:
		// .. soundBuffer
	}
}

void BigHouse::onBreakTarget(byte n) {
    196c:	b538      	push	{r3, r4, r5, lr}
    196e:	4604      	mov	r4, r0
    1970:	460d      	mov	r5, r1
	msg->outln("onBreakTarget");
    1972:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1976:	491e      	ldr	r1, [pc, #120]	; (19f0 <BigHouse::onBreakTarget(unsigned char)+0x84>)
    1978:	f004 fd9a 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(3000); else addScore(1000);
    197c:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1980:	b1f3      	cbz	r3, 19c0 <BigHouse::onBreakTarget(unsigned char)+0x54>
    1982:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1986:	4620      	mov	r0, r4
    1988:	f002 ff6a 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    198c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1990:	4620      	mov	r0, r4
    1992:	f002 ffd1 	bl	4938 <PinGame::addBonus(unsigned long)>
	if (break_ls->getState(n) == BLINK_L) {
    1996:	4629      	mov	r1, r5
    1998:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    199c:	f002 f88c 	bl	3ab8 <LightGroup::getState(unsigned char)>
    19a0:	2802      	cmp	r0, #2
    19a2:	d013      	beq.n	19cc <BigHouse::onBreakTarget(unsigned char)+0x60>
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
    19a4:	4629      	mov	r1, r5
    19a6:	2264      	movs	r2, #100	; 0x64
    19a8:	f8d4 0580 	ldr.w	r0, [r4, #1408]	; 0x580
    19ac:	f002 f866 	bl	3a7c <LightGroup::pulse(unsigned char, unsigned short)>
	if (jailSeq == 4 && breakSeq == 5) {
    19b0:	f8d4 1534 	ldr.w	r1, [r4, #1332]	; 0x534
    19b4:	4b0f      	ldr	r3, [pc, #60]	; (19f4 <BigHouse::onBreakTarget(unsigned char)+0x88>)
    19b6:	4a10      	ldr	r2, [pc, #64]	; (19f8 <BigHouse::onBreakTarget(unsigned char)+0x8c>)
    19b8:	400b      	ands	r3, r1
    19ba:	4293      	cmp	r3, r2
    19bc:	d00f      	beq.n	19de <BigHouse::onBreakTarget(unsigned char)+0x72>
    19be:	bd38      	pop	{r3, r4, r5, pc}
	}
}

void BigHouse::onBreakTarget(byte n) {
	msg->outln("onBreakTarget");
	if (_3balls) addScore(3000); else addScore(1000);
    19c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    19c4:	4620      	mov	r0, r4
    19c6:	f002 ff4b 	bl	4860 <PinGame::addScore(unsigned long)>
    19ca:	e7df      	b.n	198c <BigHouse::onBreakTarget(unsigned char)+0x20>
	addBonus(1000);
	if (break_ls->getState(n) == BLINK_L) {
		advanceJail();
    19cc:	4620      	mov	r0, r4
    19ce:	f7ff fee9 	bl	17a4 <BigHouse::advanceJail()>
		addScore(10000);
    19d2:	f242 7110 	movw	r1, #10000	; 0x2710
    19d6:	4620      	mov	r0, r4
    19d8:	f002 ff42 	bl	4860 <PinGame::addScore(unsigned long)>
    19dc:	e7e8      	b.n	19b0 <BigHouse::onBreakTarget(unsigned char)+0x44>
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    19de:	2201      	movs	r2, #1
    19e0:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    19e4:	4611      	mov	r1, r2
		// .. soundBuffer
	}
}
    19e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
    19ea:	f002 b81b 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>
    19ee:	bf00      	nop
    19f0:	200008d8 	.word	0x200008d8
    19f4:	00ffff00 	.word	0x00ffff00
    19f8:	00050400 	.word	0x00050400

000019fc <BigHouse::onCellTarget(unsigned char)>:
		// .. soundBuffer
	}
}

void BigHouse::onCellTarget(byte n) {
    19fc:	b538      	push	{r3, r4, r5, lr}
    19fe:	4604      	mov	r4, r0
    1a00:	460d      	mov	r5, r1
	lightState ls;
	byte gln;

	msg->outln("onCellTarget");
    1a02:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1a06:	4929      	ldr	r1, [pc, #164]	; (1aac <BigHouse::onCellTarget(unsigned char)+0xb0>)
    1a08:	f004 fd52 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(5000); else addScore(3000);
    1a0c:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1a10:	b1d3      	cbz	r3, 1a48 <BigHouse::onCellTarget(unsigned char)+0x4c>
    1a12:	f241 3188 	movw	r1, #5000	; 0x1388
    1a16:	4620      	mov	r0, r4
    1a18:	f002 ff22 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1a1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1a20:	4620      	mov	r0, r4
    1a22:	f002 ff89 	bl	4938 <PinGame::addBonus(unsigned long)>
	ls = cellblock_ls->getState(n);
    1a26:	4629      	mov	r1, r5
    1a28:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a2c:	f002 f844 	bl	3ab8 <LightGroup::getState(unsigned char)>
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1a30:	2801      	cmp	r0, #1
    1a32:	d021      	beq.n	1a78 <BigHouse::onCellTarget(unsigned char)+0x7c>
	else if (ls == BLINK_L) {
    1a34:	2802      	cmp	r0, #2
    1a36:	d00d      	beq.n	1a54 <BigHouse::onCellTarget(unsigned char)+0x58>
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
    1a38:	4629      	mov	r1, r5
    1a3a:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a3e:	2201      	movs	r2, #1
}
    1a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
    1a44:	f001 bfee 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>
void BigHouse::onCellTarget(byte n) {
	lightState ls;
	byte gln;

	msg->outln("onCellTarget");
	if (_3balls) addScore(5000); else addScore(3000);
    1a48:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1a4c:	4620      	mov	r0, r4
    1a4e:	f002 ff07 	bl	4860 <PinGame::addScore(unsigned long)>
    1a52:	e7e3      	b.n	1a1c <BigHouse::onCellTarget(unsigned char)+0x20>
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
    1a54:	4629      	mov	r1, r5
    1a56:	2200      	movs	r2, #0
    1a58:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a5c:	f001 ffe2 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		cellBlockSeq |= bit(n);
    1a60:	2101      	movs	r1, #1
    1a62:	f894 3533 	ldrb.w	r3, [r4, #1331]	; 0x533
    1a66:	fa01 f505 	lsl.w	r5, r1, r5
    1a6a:	431d      	orrs	r5, r3
    1a6c:	b2ed      	uxtb	r5, r5
		if (cellBlockSeq == 0b1111) {
    1a6e:	2d0f      	cmp	r5, #15
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
    1a70:	f884 5533 	strb.w	r5, [r4, #1331]	; 0x533
		if (cellBlockSeq == 0b1111) {
    1a74:	d008      	beq.n	1a88 <BigHouse::onCellTarget(unsigned char)+0x8c>
    1a76:	bd38      	pop	{r3, r4, r5, pc}

	msg->outln("onCellTarget");
	if (_3balls) addScore(5000); else addScore(3000);
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1a78:	4629      	mov	r1, r5
    1a7a:	f8d4 0588 	ldr.w	r0, [r4, #1416]	; 0x588
    1a7e:	2202      	movs	r2, #2
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}
    1a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	msg->outln("onCellTarget");
	if (_3balls) addScore(5000); else addScore(3000);
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1a84:	f001 bfce 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
		if (cellBlockSeq == 0b1111) {
			gln = extraball_ls->switchTheFirst(ON_L);
    1a88:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1a8c:	f002 f888 	bl	3ba0 <LightGroup::switchTheFirst(lightState)>
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
    1a90:	f894 3532 	ldrb.w	r3, [r4, #1330]	; 0x532
    1a94:	b92b      	cbnz	r3, 1aa2 <BigHouse::onCellTarget(unsigned char)+0xa6>
    1a96:	28ff      	cmp	r0, #255	; 0xff
    1a98:	d003      	beq.n	1aa2 <BigHouse::onCellTarget(unsigned char)+0xa6>
																 // .. soundBuffer
			cellBlockSeq = 0;
    1a9a:	2300      	movs	r3, #0
    1a9c:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
    1aa0:	bd38      	pop	{r3, r4, r5, pc}
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
		if (cellBlockSeq == 0b1111) {
			gln = extraball_ls->switchTheFirst(ON_L);
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
    1aa2:	4903      	ldr	r1, [pc, #12]	; (1ab0 <BigHouse::onCellTarget(unsigned char)+0xb4>)
    1aa4:	4620      	mov	r0, r4
    1aa6:	f002 fedb 	bl	4860 <PinGame::addScore(unsigned long)>
    1aaa:	e7f6      	b.n	1a9a <BigHouse::onCellTarget(unsigned char)+0x9e>
    1aac:	200008e8 	.word	0x200008e8
    1ab0:	000186a0 	.word	0x000186a0

00001ab4 <BigHouse::onTopRollover(unsigned char)>:
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	4604      	mov	r4, r0
    1ab8:	460d      	mov	r5, r1
	msg->outln("onTopRollover");
    1aba:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1abe:	492f      	ldr	r1, [pc, #188]	; (1b7c <BigHouse::onTopRollover(unsigned char)+0xc8>)
    1ac0:	f004 fcf6 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(3000); else addScore(1000);
    1ac4:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1ac8:	b35b      	cbz	r3, 1b22 <BigHouse::onTopRollover(unsigned char)+0x6e>
    1aca:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1ace:	4620      	mov	r0, r4
    1ad0:	f002 fec6 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1ad8:	4620      	mov	r0, r4
    1ada:	f002 ff2d 	bl	4938 <PinGame::addBonus(unsigned long)>
	if (n == 1) { // center rollover
    1ade:	2d01      	cmp	r5, #1
    1ae0:	d02b      	beq.n	1b3a <BigHouse::onTopRollover(unsigned char)+0x86>
		if (isLightActive(18)) addScore(100000);
		if (isLightActive(19)) advanceMultiplier();
	}
	if (extraball_ls->isActive(n)) {
    1ae2:	4629      	mov	r1, r5
    1ae4:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1ae8:	f001 fff8 	bl	3adc <LightGroup::isActive(unsigned char)>
    1aec:	b1c0      	cbz	r0, 1b20 <BigHouse::onTopRollover(unsigned char)+0x6c>
		extraball_ls->set(n, OFF_L);
    1aee:	2200      	movs	r2, #0
    1af0:	4629      	mov	r1, r5
    1af2:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1af6:	f001 ff95 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		lastchance_ls->setAll(OFF_L);
    1afa:	2100      	movs	r1, #0
    1afc:	f8d4 0570 	ldr.w	r0, [r4, #1392]	; 0x570
    1b00:	f002 f820 	bl	3b44 <LightGroup::setAll(lightState)>
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
	// .. soundBuffer
}

void BigHouse::awardExtraBall() {
	player[playerOn].ballsLeft++;
    1b04:	f894 3387 	ldrb.w	r3, [r4, #903]	; 0x387
	extraBallGiven = true;
    1b08:	2101      	movs	r1, #1
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
	// .. soundBuffer
}

void BigHouse::awardExtraBall() {
	player[playerOn].ballsLeft++;
    1b0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1b12:	f893 2354 	ldrb.w	r2, [r3, #852]	; 0x354
    1b16:	440a      	add	r2, r1
    1b18:	f883 2354 	strb.w	r2, [r3, #852]	; 0x354
	extraBallGiven = true;
    1b1c:	f884 1532 	strb.w	r1, [r4, #1330]	; 0x532
    1b20:	bd70      	pop	{r4, r5, r6, pc}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
	msg->outln("onTopRollover");
	if (_3balls) addScore(3000); else addScore(1000);
    1b22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1b26:	4620      	mov	r0, r4
    1b28:	f002 fe9a 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1b30:	4620      	mov	r0, r4
    1b32:	f002 ff01 	bl	4938 <PinGame::addBonus(unsigned long)>
	if (n == 1) { // center rollover
    1b36:	2d01      	cmp	r5, #1
    1b38:	d1d3      	bne.n	1ae2 <BigHouse::onTopRollover(unsigned char)+0x2e>
	}
	inline bool isLightOn(byte n) {
		return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
	}
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
    1b3a:	4e11      	ldr	r6, [pc, #68]	; (1b80 <BigHouse::onTopRollover(unsigned char)+0xcc>)
    1b3c:	2112      	movs	r1, #18
    1b3e:	6830      	ldr	r0, [r6, #0]
    1b40:	f002 f942 	bl	3dc8 <LightSet::getLight(int)>
		if (isLightActive(18)) addScore(100000);
    1b44:	7843      	ldrb	r3, [r0, #1]
    1b46:	b99b      	cbnz	r3, 1b70 <BigHouse::onTopRollover(unsigned char)+0xbc>
    1b48:	6830      	ldr	r0, [r6, #0]
    1b4a:	2113      	movs	r1, #19
    1b4c:	f002 f93c 	bl	3dc8 <LightSet::getLight(int)>
		if (isLightActive(19)) advanceMultiplier();
    1b50:	7843      	ldrb	r3, [r0, #1]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d0c5      	beq.n	1ae2 <BigHouse::onTopRollover(unsigned char)+0x2e>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1b56:	f894 1538 	ldrb.w	r1, [r4, #1336]	; 0x538
    1b5a:	2902      	cmp	r1, #2
    1b5c:	d8c1      	bhi.n	1ae2 <BigHouse::onTopRollover(unsigned char)+0x2e>
    1b5e:	1c4b      	adds	r3, r1, #1
    1b60:	f8d4 0584 	ldr.w	r0, [r4, #1412]	; 0x584
    1b64:	2201      	movs	r2, #1
    1b66:	f884 3538 	strb.w	r3, [r4, #1336]	; 0x538
    1b6a:	f001 ff5b 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
    1b6e:	e7b8      	b.n	1ae2 <BigHouse::onTopRollover(unsigned char)+0x2e>
void BigHouse::onTopRollover(byte n) {
	msg->outln("onTopRollover");
	if (_3balls) addScore(3000); else addScore(1000);
	addBonus(1000);
	if (n == 1) { // center rollover
		if (isLightActive(18)) addScore(100000);
    1b70:	4904      	ldr	r1, [pc, #16]	; (1b84 <BigHouse::onTopRollover(unsigned char)+0xd0>)
    1b72:	4620      	mov	r0, r4
    1b74:	f002 fe74 	bl	4860 <PinGame::addScore(unsigned long)>
    1b78:	e7e6      	b.n	1b48 <BigHouse::onTopRollover(unsigned char)+0x94>
    1b7a:	bf00      	nop
    1b7c:	200008f8 	.word	0x200008f8
    1b80:	20002988 	.word	0x20002988
    1b84:	000186a0 	.word	0x000186a0

00001b88 <BigHouse::onLeftKicker()>:
		awardExtraBall();
	}
	// .. soundBuffer
}

void BigHouse::onLeftKicker() {
    1b88:	b510      	push	{r4, lr}
    1b8a:	4604      	mov	r4, r0
    1b8c:	b082      	sub	sp, #8
	msg->outln("onLeftKicker");
    1b8e:	4919      	ldr	r1, [pc, #100]	; (1bf4 <BigHouse::onLeftKicker()+0x6c>)
    1b90:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1b94:	f004 fc8c 	bl	64b0 <Msg::outln(char const*)>
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1b98:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1b9c:	b1c3      	cbz	r3, 1bd0 <BigHouse::onLeftKicker()+0x48>
    1b9e:	f241 3188 	movw	r1, #5000	; 0x1388
    1ba2:	4620      	mov	r0, r4
    1ba4:	f002 fe5c 	bl	4860 <PinGame::addScore(unsigned long)>
	if (!ballTrap[0]) { // ball already trapped
    1ba8:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    1bac:	b1cb      	cbz	r3, 1be2 <BigHouse::onLeftKicker()+0x5a>
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
	inline void setLight(byte n, lightState s) { 
		LightGroup::activeLightSet->getLight(n)->set(s);
    1bae:	4b12      	ldr	r3, [pc, #72]	; (1bf8 <BigHouse::onLeftKicker()+0x70>)
    1bb0:	210f      	movs	r1, #15
    1bb2:	6818      	ldr	r0, [r3, #0]
    1bb4:	f002 f908 	bl	3dc8 <LightSet::getLight(int)>
    1bb8:	2100      	movs	r1, #0
    1bba:	2332      	movs	r3, #50	; 0x32
    1bbc:	22c8      	movs	r2, #200	; 0xc8
    1bbe:	9100      	str	r1, [sp, #0]
    1bc0:	2102      	movs	r1, #2
    1bc2:	f001 fe4f 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
		extraball_ls->set(1, ON_L);
	}
	else {
		setLight(15, BLINK_L);
		ballTrap[0] = true;
    1bc6:	2301      	movs	r3, #1
    1bc8:	f884 352d 	strb.w	r3, [r4, #1325]	; 0x52d
		// ... soundBuffer
	}
	//startTrapSequence(0);
}
    1bcc:	b002      	add	sp, #8
    1bce:	bd10      	pop	{r4, pc}
}

void BigHouse::onLeftKicker() {
	msg->outln("onLeftKicker");
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1bd0:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1bd4:	4620      	mov	r0, r4
    1bd6:	f002 fe43 	bl	4860 <PinGame::addScore(unsigned long)>
	if (!ballTrap[0]) { // ball already trapped
    1bda:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    1bde:	2b00      	cmp	r3, #0
    1be0:	d1e5      	bne.n	1bae <BigHouse::onLeftKicker()+0x26>
		extraball_ls->set(1, ON_L);
    1be2:	2201      	movs	r2, #1
    1be4:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1be8:	4611      	mov	r1, r2
		setLight(15, BLINK_L);
		ballTrap[0] = true;
		// ... soundBuffer
	}
	//startTrapSequence(0);
}
    1bea:	b002      	add	sp, #8
    1bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void BigHouse::onLeftKicker() {
	msg->outln("onLeftKicker");
	// score
	if (_3balls) addScore(5000); else addScore(3000);
	if (!ballTrap[0]) { // ball already trapped
		extraball_ls->set(1, ON_L);
    1bf0:	f001 bf18 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>
    1bf4:	20000908 	.word	0x20000908
    1bf8:	20002988 	.word	0x20002988

00001bfc <BigHouse::onRightKicker()>:
		// ... soundBuffer
	}
	//startTrapSequence(0);
}

void BigHouse::onRightKicker() {
    1bfc:	b510      	push	{r4, lr}
    1bfe:	4604      	mov	r4, r0
	msg->outln("onRightKicker");
    1c00:	4905      	ldr	r1, [pc, #20]	; (1c18 <BigHouse::onRightKicker()+0x1c>)
    1c02:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c06:	f004 fc53 	bl	64b0 <Msg::outln(char const*)>
	addScore(25000);
    1c0a:	4620      	mov	r0, r4
    1c0c:	f246 11a8 	movw	r1, #25000	; 0x61a8
	//if (getLight(20) == BLINK_L) startMultiball(); // ???
	//startTrapSequence(2);
}
    1c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	//startTrapSequence(0);
}

void BigHouse::onRightKicker() {
	msg->outln("onRightKicker");
	addScore(25000);
    1c14:	f002 be24 	b.w	4860 <PinGame::addScore(unsigned long)>
    1c18:	20000918 	.word	0x20000918

00001c1c <BigHouse::onTopHole()>:
	//if (getLight(20) == BLINK_L) startMultiball(); // ???
	//startTrapSequence(2);
}

void BigHouse::onTopHole() { // hole
    1c1c:	b510      	push	{r4, lr}
    1c1e:	4604      	mov	r4, r0
	msg->outln("onTopHole");
    1c20:	490a      	ldr	r1, [pc, #40]	; (1c4c <BigHouse::onTopHole()+0x30>)
    1c22:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c26:	f004 fc43 	bl	64b0 <Msg::outln(char const*)>
	addScore(25000);
    1c2a:	4620      	mov	r0, r4
    1c2c:	f246 11a8 	movw	r1, #25000	; 0x61a8
    1c30:	f002 fe16 	bl	4860 <PinGame::addScore(unsigned long)>
	}
	inline bool isLightOn(byte n) {
		return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
	}
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
    1c34:	4b06      	ldr	r3, [pc, #24]	; (1c50 <BigHouse::onTopHole()+0x34>)
    1c36:	210f      	movs	r1, #15
    1c38:	6818      	ldr	r0, [r3, #0]
    1c3a:	f002 f8c5 	bl	3dc8 <LightSet::getLight(int)>
	if (isLightActive(15)) ballTrap[2] = true;
    1c3e:	7843      	ldrb	r3, [r0, #1]
    1c40:	b113      	cbz	r3, 1c48 <BigHouse::onTopHole()+0x2c>
    1c42:	2301      	movs	r3, #1
    1c44:	f884 352f 	strb.w	r3, [r4, #1327]	; 0x52f
    1c48:	bd10      	pop	{r4, pc}
    1c4a:	bf00      	nop
    1c4c:	20000928 	.word	0x20000928
    1c50:	20002988 	.word	0x20002988

00001c54 <BigHouse::onLeftRollover()>:
	//else //..
	//startTrapSequence(1);
}

void BigHouse::onLeftRollover() {
    1c54:	b510      	push	{r4, lr}
    1c56:	4604      	mov	r4, r0
	msg->outln("onLeftRollover");
    1c58:	4908      	ldr	r1, [pc, #32]	; (1c7c <BigHouse::onLeftRollover()+0x28>)
    1c5a:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c5e:	f004 fc27 	bl	64b0 <Msg::outln(char const*)>
	addScore(25000);
    1c62:	4620      	mov	r0, r4
    1c64:	f246 11a8 	movw	r1, #25000	; 0x61a8
    1c68:	f002 fdfa 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1c6c:	4620      	mov	r0, r4
    1c6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
    1c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::onLeftRollover() {
	msg->outln("onLeftRollover");
	addScore(25000);
	addBonus(1000);
    1c76:	f002 be5f 	b.w	4938 <PinGame::addBonus(unsigned long)>
    1c7a:	bf00      	nop
    1c7c:	20000934 	.word	0x20000934

00001c80 <BigHouse::onReturnRollover(unsigned char)>:
}

void BigHouse::onReturnRollover(byte n) {
    1c80:	b510      	push	{r4, lr}
    1c82:	4604      	mov	r4, r0
	msg->outln("onReturnRollover");
    1c84:	490f      	ldr	r1, [pc, #60]	; (1cc4 <BigHouse::onReturnRollover(unsigned char)+0x44>)
    1c86:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1c8a:	f004 fc11 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(5000);
    1c8e:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1c92:	b95b      	cbnz	r3, 1cac <BigHouse::onReturnRollover(unsigned char)+0x2c>
	else addScore(3000);
    1c94:	4620      	mov	r0, r4
    1c96:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1c9a:	f002 fde1 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1c9e:	4620      	mov	r0, r4
    1ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onReturnRollover(byte n) {
	msg->outln("onReturnRollover");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1ca8:	f002 be46 	b.w	4938 <PinGame::addBonus(unsigned long)>
	addBonus(1000);
}

void BigHouse::onReturnRollover(byte n) {
	msg->outln("onReturnRollover");
	if (_3balls) addScore(5000);
    1cac:	4620      	mov	r0, r4
    1cae:	f241 3188 	movw	r1, #5000	; 0x1388
    1cb2:	f002 fdd5 	bl	4860 <PinGame::addScore(unsigned long)>
	else addScore(3000);
	addBonus(1000);
    1cb6:	4620      	mov	r0, r4
    1cb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onReturnRollover(byte n) {
	msg->outln("onReturnRollover");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1cc0:	f002 be3a 	b.w	4938 <PinGame::addBonus(unsigned long)>
    1cc4:	20000944 	.word	0x20000944

00001cc8 <BigHouse::onOutRollover(unsigned char)>:
	//..
}

void BigHouse::onOutRollover(byte n) {
    1cc8:	b510      	push	{r4, lr}
    1cca:	4604      	mov	r4, r0
	msg->outln("onOutTarget");
    1ccc:	490f      	ldr	r1, [pc, #60]	; (1d0c <BigHouse::onOutRollover(unsigned char)+0x44>)
    1cce:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1cd2:	f004 fbed 	bl	64b0 <Msg::outln(char const*)>
	if (_3balls) addScore(5000);
    1cd6:	f894 351d 	ldrb.w	r3, [r4, #1309]	; 0x51d
    1cda:	b95b      	cbnz	r3, 1cf4 <BigHouse::onOutRollover(unsigned char)+0x2c>
	else addScore(3000);
    1cdc:	4620      	mov	r0, r4
    1cde:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1ce2:	f002 fdbd 	bl	4860 <PinGame::addScore(unsigned long)>
	addBonus(1000);
    1ce6:	4620      	mov	r0, r4
    1ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onOutRollover(byte n) {
	msg->outln("onOutTarget");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1cf0:	f002 be22 	b.w	4938 <PinGame::addBonus(unsigned long)>
	//..
}

void BigHouse::onOutRollover(byte n) {
	msg->outln("onOutTarget");
	if (_3balls) addScore(5000);
    1cf4:	4620      	mov	r0, r4
    1cf6:	f241 3188 	movw	r1, #5000	; 0x1388
    1cfa:	f002 fdb1 	bl	4860 <PinGame::addScore(unsigned long)>
	else addScore(3000);
	addBonus(1000);
    1cfe:	4620      	mov	r0, r4
    1d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onOutRollover(byte n) {
	msg->outln("onOutTarget");
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1d08:	f002 be16 	b.w	4938 <PinGame::addBonus(unsigned long)>
    1d0c:	20000958 	.word	0x20000958

00001d10 <BigHouse::onPopBumper()>:
	//..
}

void BigHouse::onPopBumper() {
    1d10:	b510      	push	{r4, lr}
    1d12:	4604      	mov	r4, r0
	msg->outln("onPopBumper");
    1d14:	4909      	ldr	r1, [pc, #36]	; (1d3c <BigHouse::onPopBumper()+0x2c>)
    1d16:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1d1a:	f004 fbc9 	bl	64b0 <Msg::outln(char const*)>
	addScore(1000);
    1d1e:	4620      	mov	r0, r4
    1d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1d24:	f002 fd9c 	bl	4860 <PinGame::addScore(unsigned long)>
	special_ls->rotateRight();
    1d28:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1d2c:	f001 ff84 	bl	3c38 <LightGroup::rotateRight()>
	extraball_ls->rotateRight();
    1d30:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
}
    1d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onPopBumper() {
	msg->outln("onPopBumper");
	addScore(1000);
	special_ls->rotateRight();
	extraball_ls->rotateRight();
    1d38:	f001 bf7e 	b.w	3c38 <LightGroup::rotateRight()>
    1d3c:	20000964 	.word	0x20000964

00001d40 <BigHouse::onBallOnChain()>:
void BigHouse::onRubber() {
	addScore(30);
	special_ls->rotateRight();
}

void BigHouse::onBallOnChain() {
    1d40:	b510      	push	{r4, lr}
    1d42:	4604      	mov	r4, r0
	msg->outln("onBallOnChain");
    1d44:	4905      	ldr	r1, [pc, #20]	; (1d5c <BigHouse::onBallOnChain()+0x1c>)
    1d46:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1d4a:	f004 fbb1 	bl	64b0 <Msg::outln(char const*)>
	addScore(5000);
    1d4e:	4620      	mov	r0, r4
    1d50:	f241 3188 	movw	r1, #5000	; 0x1388
	//switches += 4;
}
    1d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	special_ls->rotateRight();
}

void BigHouse::onBallOnChain() {
	msg->outln("onBallOnChain");
	addScore(5000);
    1d58:	f002 bd82 	b.w	4860 <PinGame::addScore(unsigned long)>
    1d5c:	20000970 	.word	0x20000970

00001d60 <BigHouse::onSwitchEvent(unsigned char, bool)>:
// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1d60:	10cb      	asrs	r3, r1, #3
    1d62:	f001 0107 	and.w	r1, r1, #7
    1d66:	eb03 0383 	add.w	r3, r3, r3, lsl #2

// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
    1d6a:	b570      	push	{r4, r5, r6, lr}
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1d6c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	switch (_mode) {
    1d70:	f890 551a 	ldrb.w	r5, [r0, #1306]	; 0x51a

// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
    1d74:	4606      	mov	r6, r0
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1d76:	f001 04ff 	and.w	r4, r1, #255	; 0xff
	switch (_mode) {
    1d7a:	b37d      	cbz	r5, 1ddc <BigHouse::onSwitchEvent(unsigned char, bool)+0x7c>
    1d7c:	2d01      	cmp	r5, #1
    1d7e:	d12c      	bne.n	1dda <BigHouse::onSwitchEvent(unsigned char, bool)+0x7a>
			setPinballMode(GAME_MODE);
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
    1d80:	f8b0 3398 	ldrh.w	r3, [r0, #920]	; 0x398
    1d84:	f8b0 253a 	ldrh.w	r2, [r0, #1338]	; 0x53a
    1d88:	4293      	cmp	r3, r2
    1d8a:	d306      	bcc.n	1d9a <BigHouse::onSwitchEvent(unsigned char, bool)+0x3a>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1d8c:	f890 1538 	ldrb.w	r1, [r0, #1336]	; 0x538
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
    1d90:	1a9b      	subs	r3, r3, r2
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1d92:	2902      	cmp	r1, #2
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
    1d94:	f8a0 3398 	strh.w	r3, [r0, #920]	; 0x398
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1d98:	d92f      	bls.n	1dfa <BigHouse::onSwitchEvent(unsigned char, bool)+0x9a>
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
    1d9a:	f1a4 031a 	sub.w	r3, r4, #26
    1d9e:	2b32      	cmp	r3, #50	; 0x32
    1da0:	d822      	bhi.n	1de8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    1da2:	e8df f003 	tbb	[pc, r3]
    1da6:	2133      	.short	0x2133
    1da8:	3d382121 	.word	0x3d382121
    1dac:	215a554b 	.word	0x215a554b
    1db0:	21212121 	.word	0x21212121
    1db4:	55763d68 	.word	0x55763d68
    1db8:	218d845a 	.word	0x218d845a
    1dbc:	3d682121 	.word	0x3d682121
    1dc0:	a0925576 	.word	0xa0925576
    1dc4:	212121a9 	.word	0x212121a9
    1dc8:	b3763d68 	.word	0xb3763d68
    1dcc:	2121a092 	.word	0x2121a092
    1dd0:	3d682121 	.word	0x3d682121
    1dd4:	8492b376 	.word	0x8492b376
    1dd8:	ae          	.byte	0xae
    1dd9:	00          	.byte	0x00
    1dda:	bd70      	pop	{r4, r5, r6, pc}
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_mode) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
    1ddc:	2c2f      	cmp	r4, #47	; 0x2f
    1dde:	d103      	bne.n	1de8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    1de0:	b112      	cbz	r2, 1de8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    1de2:	f890 337c 	ldrb.w	r3, [r0, #892]	; 0x37c
    1de6:	b903      	cbnz	r3, 1dea <BigHouse::onSwitchEvent(unsigned char, bool)+0x8a>
    1de8:	bd70      	pop	{r4, r5, r6, pc}
			credits--;
    1dea:	3b01      	subs	r3, #1
			setPinballMode(GAME_MODE);
    1dec:	2101      	movs	r1, #1
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_mode) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
			credits--;
    1dee:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_mode) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
			credits--;
			setPinballMode(GAME_MODE);
    1df6:	f002 baad 	b.w	4354 <PinGame::setPinballMode(pinballMode)>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1dfa:	1c4b      	adds	r3, r1, #1
    1dfc:	f8d0 0584 	ldr.w	r0, [r0, #1412]	; 0x584
    1e00:	462a      	mov	r2, r5
    1e02:	f886 3538 	strb.w	r3, [r6, #1336]	; 0x538
    1e06:	f001 fe0d 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
    1e0a:	e7c6      	b.n	1d9a <BigHouse::onSwitchEvent(unsigned char, bool)+0x3a>
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
    1e0c:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
    1e12:	f7ff bf95 	b.w	1d40 <BigHouse::onBallOnChain()>
			DISPATCH1(onLeftRollover(), 30);
    1e16:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
    1e1c:	f7ff bf1a 	b.w	1c54 <BigHouse::onLeftRollover()>
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
    1e20:	f1a4 011f 	sub.w	r1, r4, #31
    1e24:	4b3b      	ldr	r3, [pc, #236]	; (1f14 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    1e26:	4630      	mov	r0, r6
    1e28:	fb83 2301 	smull	r2, r3, r3, r1
    1e2c:	17c9      	asrs	r1, r1, #31
    1e2e:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
    1e36:	b2c9      	uxtb	r1, r1
    1e38:	f7ff bd98 	b.w	196c <BigHouse::onBreakTarget(unsigned char)>
	special_ls->rotateRight();
	extraball_ls->rotateRight();
}

void BigHouse::onRubber() {
	addScore(30);
    1e3c:	4630      	mov	r0, r6
    1e3e:	211e      	movs	r1, #30
    1e40:	f002 fd0e 	bl	4860 <PinGame::addScore(unsigned long)>
	special_ls->rotateRight();
    1e44:	f8d6 0574 	ldr.w	r0, [r6, #1396]	; 0x574
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	extraball_ls->rotateRight();
}

void BigHouse::onRubber() {
	addScore(30);
	special_ls->rotateRight();
    1e4c:	f001 bef4 	b.w	3c38 <LightGroup::rotateRight()>
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
    1e50:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
    1e56:	f7ff bf5b 	b.w	1d10 <BigHouse::onPopBumper()>
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
    1e5a:	f1a4 0122 	sub.w	r1, r4, #34	; 0x22
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
    1e5e:	4b2d      	ldr	r3, [pc, #180]	; (1f14 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    1e60:	4630      	mov	r0, r6
    1e62:	fb83 2301 	smull	r2, r3, r3, r1
    1e66:	17c9      	asrs	r1, r1, #31
    1e68:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
    1e70:	b2c9      	uxtb	r1, r1
    1e72:	f7ff bdc3 	b.w	19fc <BigHouse::onCellTarget(unsigned char)>
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
    1e76:	f1a4 0128 	sub.w	r1, r4, #40	; 0x28
    1e7a:	4b26      	ldr	r3, [pc, #152]	; (1f14 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    1e7c:	4630      	mov	r0, r6
    1e7e:	fb83 2301 	smull	r2, r3, r3, r1
    1e82:	17c9      	asrs	r1, r1, #31
    1e84:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
    1e8c:	b2c9      	uxtb	r1, r1
    1e8e:	f7ff bca1 	b.w	17d4 <BigHouse::onDropTarget(unsigned char)>
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
    1e92:	f1a4 012a 	sub.w	r1, r4, #42	; 0x2a
    1e96:	4b1f      	ldr	r3, [pc, #124]	; (1f14 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    1e98:	4630      	mov	r0, r6
    1e9a:	fb83 2301 	smull	r2, r3, r3, r1
    1e9e:	17c9      	asrs	r1, r1, #31
    1ea0:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
    1ea8:	b2c9      	uxtb	r1, r1
    1eaa:	f7ff bd17 	b.w	18dc <BigHouse::onJailTarget(unsigned char)>
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
    1eae:	f1b4 012d 	subs.w	r1, r4, #45	; 0x2d
    1eb2:	4630      	mov	r0, r6
    1eb4:	bf18      	it	ne
    1eb6:	2101      	movne	r1, #1
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
    1ebc:	f7ff bf04 	b.w	1cc8 <BigHouse::onOutRollover(unsigned char)>
			DISPATCH1(onLeftKicker(), 46);
    1ec0:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
    1ec6:	f7ff be5f 	b.w	1b88 <BigHouse::onLeftKicker()>
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
    1eca:	f1a4 0136 	sub.w	r1, r4, #54	; 0x36
    1ece:	4b11      	ldr	r3, [pc, #68]	; (1f14 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1b4>)
    1ed0:	4630      	mov	r0, r6
    1ed2:	fb83 2301 	smull	r2, r3, r3, r1
    1ed6:	17c9      	asrs	r1, r1, #31
    1ed8:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
    1ee0:	b2c9      	uxtb	r1, r1
    1ee2:	f7ff bde7 	b.w	1ab4 <BigHouse::onTopRollover(unsigned char)>
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
    1ee6:	f1b4 0137 	subs.w	r1, r4, #55	; 0x37
    1eea:	4630      	mov	r0, r6
    1eec:	bf18      	it	ne
    1eee:	2101      	movne	r1, #1
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70); // side targets 0, 1, 2, 3
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
    1ef4:	f7ff bec4 	b.w	1c80 <BigHouse::onReturnRollover(unsigned char)>
			DISPATCH1(onRightKicker(), 56);
    1ef8:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72); // 0, 1, 2, 3
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
			DISPATCH1(onRightKicker(), 56);
    1efe:	f7ff be7d 	b.w	1bfc <BigHouse::onRightKicker()>
			DISPATCH1(tilt(), 57);
			DISPATCH1(onOutHole(), 66);
			DISPATCH1(onTopHole(), 76);
    1f02:	4630      	mov	r0, r6
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    1f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74); // 0, 1, 2
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65); //0, 1
			DISPATCH1(onRightKicker(), 56);
			DISPATCH1(tilt(), 57);
			DISPATCH1(onOutHole(), 66);
			DISPATCH1(onTopHole(), 76);
    1f08:	f7ff be88 	b.w	1c1c <BigHouse::onTopHole()>
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onBreakTarget((sw - 31) / 10), 31, 41, 51, 61, 71); // 0, 1, 2, 3, 4
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44); // 0, 1
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73); // 2, 3
    1f0c:	f1a4 012b 	sub.w	r1, r4, #43	; 0x2b
    1f10:	e7a5      	b.n	1e5e <BigHouse::onSwitchEvent(unsigned char, bool)+0xfe>
    1f12:	bf00      	nop
    1f14:	66666667 	.word	0x66666667

00001f18 <BigHouse::dropTimerRoutine(unsigned long&)>:
	// ..TODO
}

// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	4604      	mov	r4, r0
	msg->outln("dropTimerRoutine()");
    1f1c:	4927      	ldr	r1, [pc, #156]	; (1fbc <BigHouse::dropTimerRoutine(unsigned long&)+0xa4>)
    1f1e:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    1f22:	f004 fac5 	bl	64b0 <Msg::outln(char const*)>
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
    1f26:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f2a:	2102      	movs	r1, #2
    1f2c:	f001 fdd6 	bl	3adc <LightGroup::isActive(unsigned char)>
    1f30:	bb58      	cbnz	r0, 1f8a <BigHouse::dropTimerRoutine(unsigned long&)+0x72>
    1f32:	4605      	mov	r5, r0
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
    1f34:	2101      	movs	r1, #1
    1f36:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f3a:	f001 fdcf 	bl	3adc <LightGroup::isActive(unsigned char)>
    1f3e:	4606      	mov	r6, r0
    1f40:	b978      	cbnz	r0, 1f62 <BigHouse::dropTimerRoutine(unsigned long&)+0x4a>
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
    1f42:	4601      	mov	r1, r0
    1f44:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f48:	f001 fdc8 	bl	3adc <LightGroup::isActive(unsigned char)>
    1f4c:	bb58      	cbnz	r0, 1fa6 <BigHouse::dropTimerRoutine(unsigned long&)+0x8e>
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
    1f4e:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
    1f52:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    1f56:	4b1a      	ldr	r3, [pc, #104]	; (1fc0 <BigHouse::dropTimerRoutine(unsigned long&)+0xa8>)
    1f58:	491a      	ldr	r1, [pc, #104]	; (1fc4 <BigHouse::dropTimerRoutine(unsigned long&)+0xac>)
	}
}
    1f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
    1f5e:	f004 bb2f 	b.w	65c0 <Msg::warn(char const*, char const*, char const*)>
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
		droptarget_ls->set(1, OFF_L);
    1f62:	462a      	mov	r2, r5
    1f64:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f68:	2101      	movs	r1, #1
    1f6a:	f001 fd5b 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(0, BLINK_L);
    1f6e:	4629      	mov	r1, r5
    1f70:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f74:	2202      	movs	r2, #2
    1f76:	f001 fd55 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
    1f7a:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
    1f7e:	f241 3188 	movw	r1, #5000	; 0x1388
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}
    1f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
    1f86:	f003 bd53 	b.w	5a30 <TimerTask::setPeriod(unsigned long)>
// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
	msg->outln("dropTimerRoutine()");
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
    1f8a:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f8e:	2200      	movs	r2, #0
    1f90:	2102      	movs	r1, #2
    1f92:	f001 fd47 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(1, BLINK_L);
    1f96:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1f9a:	2202      	movs	r2, #2
    1f9c:	2101      	movs	r1, #1
		resetDropTargets();
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}
    1f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
	msg->outln("dropTimerRoutine()");
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
    1fa2:	f001 bd3f 	b.w	3a24 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
    1fa6:	f8d4 0590 	ldr.w	r0, [r4, #1424]	; 0x590
    1faa:	4632      	mov	r2, r6
    1fac:	4631      	mov	r1, r6
    1fae:	f001 fd39 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
		resetDropTargets();
    1fb2:	4620      	mov	r0, r4
	}
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}
    1fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
    1fb8:	f7ff bbd8 	b.w	176c <BigHouse::resetDropTargets()>
    1fbc:	20000980 	.word	0x20000980
    1fc0:	20000994 	.word	0x20000994
    1fc4:	200009a8 	.word	0x200009a8

00001fc8 <BigHouse::switchToNextLightShow()>:
	}
	inline void switchOffAllLights() { LightGroup::activeLightSet->switchOffAllLights(); }
    1fc8:	4b2d      	ldr	r3, [pc, #180]	; (2080 <BigHouse::switchToNextLightShow()+0xb8>)

void BigHouse::stopLightShow() {
	lshow_tmr->disable();
}

void BigHouse::switchToNextLightShow() {
    1fca:	b570      	push	{r4, r5, r6, lr}
    1fcc:	4604      	mov	r4, r0
    1fce:	6818      	ldr	r0, [r3, #0]
    1fd0:	f001 ff12 	bl	3df8 <LightSet::switchOffAllLights()>
	switchOffAllLights();
	if (++lightShowType > 7) lightShowType = 0;
    1fd4:	f894 3549 	ldrb.w	r3, [r4, #1353]	; 0x549
    1fd8:	3301      	adds	r3, #1
    1fda:	b2db      	uxtb	r3, r3
    1fdc:	2b07      	cmp	r3, #7
    1fde:	f884 3549 	strb.w	r3, [r4, #1353]	; 0x549
    1fe2:	d91d      	bls.n	2020 <BigHouse::switchToNextLightShow()+0x58>
    1fe4:	2300      	movs	r3, #0
    1fe6:	f884 3549 	strb.w	r3, [r4, #1353]	; 0x549
    1fea:	f504 65b5 	add.w	r5, r4, #1448	; 0x5a8
    1fee:	f504 66b9 	add.w	r6, r4, #1480	; 0x5c8
	case 0: // original light show
	case 2:
	case 4:
		for (byte i = 0; i < 8; i++) {
			//lShow_set[i]->setAll(OFF_L);
			lShow_set[i]->set(0, ON_L);
    1ff2:	f855 0f04 	ldr.w	r0, [r5, #4]!
    1ff6:	2201      	movs	r2, #1
    1ff8:	2100      	movs	r1, #0
    1ffa:	f001 fd13 	bl	3a24 <LightGroup::set(unsigned char, lightState)>
	if (++lightShowType > 7) lightShowType = 0;
	switch (lightShowType) {
	case 0: // original light show
	case 2:
	case 4:
		for (byte i = 0; i < 8; i++) {
    1ffe:	42ae      	cmp	r6, r5
    2000:	d1f7      	bne.n	1ff2 <BigHouse::switchToNextLightShow()+0x2a>
			//lShow_set[i]->setAll(OFF_L);
			lShow_set[i]->set(0, ON_L);
		}
		lightShowDelay = 200; // ms
    2002:	21c8      	movs	r1, #200	; 0xc8
		lightShowOrder = false;
    2004:	2300      	movs	r3, #0
	case 4:
		for (byte i = 0; i < 8; i++) {
			//lShow_set[i]->setAll(OFF_L);
			lShow_set[i]->set(0, ON_L);
		}
		lightShowDelay = 200; // ms
    2006:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		lightShowOrder = false;
    200a:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		lightShowArg = 1;
		break;
	case 7: // light wave
		lightShowDelay = 20;
	}
	lightShowStep = 0;
    200e:	2300      	movs	r3, #0
	lshow_tmr->setPeriod(lightShowDelay);
    2010:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
		lightShowArg = 1;
		break;
	case 7: // light wave
		lightShowDelay = 20;
	}
	lightShowStep = 0;
    2014:	f8a4 354a 	strh.w	r3, [r4, #1354]	; 0x54a
	lshow_tmr->setPeriod(lightShowDelay);
}
    2018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		break;
	case 7: // light wave
		lightShowDelay = 20;
	}
	lightShowStep = 0;
	lshow_tmr->setPeriod(lightShowDelay);
    201c:	f003 bd08 	b.w	5a30 <TimerTask::setPeriod(unsigned long)>
}

void BigHouse::switchToNextLightShow() {
	switchOffAllLights();
	if (++lightShowType > 7) lightShowType = 0;
	switch (lightShowType) {
    2020:	3b01      	subs	r3, #1
    2022:	2b06      	cmp	r3, #6
    2024:	d8e1      	bhi.n	1fea <BigHouse::switchToNextLightShow()+0x22>
    2026:	a201      	add	r2, pc, #4	; (adr r2, 202c <BigHouse::switchToNextLightShow()+0x64>)
    2028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    202c:	00002049 	.word	0x00002049
    2030:	00001feb 	.word	0x00001feb
    2034:	00002051 	.word	0x00002051
    2038:	00001feb 	.word	0x00001feb
    203c:	00002059 	.word	0x00002059
    2040:	00002067 	.word	0x00002067
    2044:	00002077 	.word	0x00002077
		}
		lightShowDelay = 200; // ms
		lightShowOrder = false;
		break;
	case 1: // linear on -> linear off
		lightShowDelay = 15; // ms
    2048:	210f      	movs	r1, #15
    204a:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		break;
    204e:	e7de      	b.n	200e <BigHouse::switchToNextLightShow()+0x46>
	case 3: // groups flashing
		lightShowDelay = 100;
    2050:	2164      	movs	r1, #100	; 0x64
    2052:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		break;
    2056:	e7da      	b.n	200e <BigHouse::switchToNextLightShow()+0x46>
	case 5: // random on -> random off
		lightShowDelay = 20;
    2058:	2114      	movs	r1, #20
		lightShowOrder = true;
    205a:	2301      	movs	r3, #1
		break;
	case 3: // groups flashing
		lightShowDelay = 100;
		break;
	case 5: // random on -> random off
		lightShowDelay = 20;
    205c:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		lightShowOrder = true;
    2060:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		break;
    2064:	e7d3      	b.n	200e <BigHouse::switchToNextLightShow()+0x46>
	case 6: // PCM
		lightShowOrder = true;
    2066:	2301      	movs	r3, #1
    2068:	f8b4 1544 	ldrh.w	r1, [r4, #1348]	; 0x544
    206c:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		lightShowArg = 1;
    2070:	f8a4 3546 	strh.w	r3, [r4, #1350]	; 0x546
		break;
    2074:	e7cb      	b.n	200e <BigHouse::switchToNextLightShow()+0x46>
	case 7: // light wave
		lightShowDelay = 20;
    2076:	2314      	movs	r3, #20
    2078:	4619      	mov	r1, r3
    207a:	f8a4 3544 	strh.w	r3, [r4, #1348]	; 0x544
    207e:	e7c6      	b.n	200e <BigHouse::switchToNextLightShow()+0x46>
    2080:	20002988 	.word	0x20002988

00002084 <BigHouse::startLightShow()>:
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}

void BigHouse::startLightShow() {
    2084:	b510      	push	{r4, lr}
	msg->outln(F("startLightShow..."));
    2086:	4909      	ldr	r1, [pc, #36]	; (20ac <BigHouse::startLightShow()+0x28>)
	else {
		msg->warn("No special lit.", CLASSNAME, "dropTimerRoutine");
	}
}

void BigHouse::startLightShow() {
    2088:	4604      	mov	r4, r0
	msg->outln(F("startLightShow..."));
    208a:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    208e:	f004 f9df 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	lightShowType = 10;
    2092:	230a      	movs	r3, #10
	switchToNextLightShow();
    2094:	4620      	mov	r0, r4
	}
}

void BigHouse::startLightShow() {
	msg->outln(F("startLightShow..."));
	lightShowType = 10;
    2096:	f884 3549 	strb.w	r3, [r4, #1353]	; 0x549
	switchToNextLightShow();
    209a:	f7ff ff95 	bl	1fc8 <BigHouse::switchToNextLightShow()>
	lshow_tmr->enable();
    209e:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550

}
    20a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::startLightShow() {
	msg->outln(F("startLightShow..."));
	lightShowType = 10;
	switchToNextLightShow();
	lshow_tmr->enable();
    20a6:	f003 bcc9 	b.w	5a3c <TimerTask::enable()>
    20aa:	bf00      	nop
    20ac:	200009b8 	.word	0x200009b8

000020b0 <BigHouse::lightShowCycle(unsigned long&)>:
	}
	lightShowStep = 0;
	lshow_tmr->setPeriod(lightShowDelay);
}

void BigHouse::lightShowCycle(uint32_t &ms) {
    20b0:	b570      	push	{r4, r5, r6, lr}
	byte i;
	static uint16_t t = 1u;

	switch (lightShowType) {
    20b2:	f890 3549 	ldrb.w	r3, [r0, #1353]	; 0x549
	}
	lightShowStep = 0;
	lshow_tmr->setPeriod(lightShowDelay);
}

void BigHouse::lightShowCycle(uint32_t &ms) {
    20b6:	b082      	sub	sp, #8
    20b8:	4604      	mov	r4, r0
	byte i;
	static uint16_t t = 1u;

	switch (lightShowType) {
    20ba:	2b07      	cmp	r3, #7
    20bc:	d827      	bhi.n	210e <BigHouse::lightShowCycle(unsigned long&)+0x5e>
    20be:	e8df f003 	tbb	[pc, r3]
    20c2:	7639      	.short	0x7639
    20c4:	04398939 	.word	0x04398939
    20c8:	2da5      	.short	0x2da5
	byte getNextPlayerOn();
	String getTopPlayerString(byte playerNum);
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
    20ca:	4b7f      	ldr	r3, [pc, #508]	; (22c8 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    void copy(Light &from);
	void copy(Light *from);
    void reset();

    // define the state of the light
    inline void set(bool st) { set(st ? ON_L : OFF_L); }
    20cc:	2500      	movs	r5, #0
    20ce:	681e      	ldr	r6, [r3, #0]
		else lShow_set[7]->setAll(OFF_L);
		lShow_set[i]->setAll(ON_L);
		if (lightShowStep >= 48) switchToNextLightShow();
		break;
	case 5:
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
    20d0:	f008 fa4a 	bl	a568 <micros>
    20d4:	4b7d      	ldr	r3, [pc, #500]	; (22cc <BigHouse::lightShowCycle(unsigned long&)+0x21c>)
    20d6:	4601      	mov	r1, r0
    20d8:	4630      	mov	r0, r6
    20da:	fba3 2301 	umull	r2, r3, r3, r1
    20de:	095b      	lsrs	r3, r3, #5
    20e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20e4:	eba1 1103 	sub.w	r1, r1, r3, lsl #4
    20e8:	f001 fe6e 	bl	3dc8 <LightSet::getLight(int)>
    20ec:	f894 1548 	ldrb.w	r1, [r4, #1352]	; 0x548
    20f0:	2332      	movs	r3, #50	; 0x32
    20f2:	9500      	str	r5, [sp, #0]
    20f4:	22c8      	movs	r2, #200	; 0xc8
    20f6:	f001 fbb5 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
		if (lightShowStep == 100) lightShowOrder = false;
    20fa:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    20fe:	2964      	cmp	r1, #100	; 0x64
    2100:	f000 80de 	beq.w	22c0 <BigHouse::lightShowCycle(unsigned long&)+0x210>
		if (lightShowStep >= 200) switchToNextLightShow();
    2104:	29c7      	cmp	r1, #199	; 0xc7
    2106:	d904      	bls.n	2112 <BigHouse::lightShowCycle(unsigned long&)+0x62>
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
		if (lightShowStep == 150) switchToNextLightShow();
		break;
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
    2108:	4620      	mov	r0, r4
    210a:	f7ff ff5d 	bl	1fc8 <BigHouse::switchToNextLightShow()>
    210e:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
		break;
	}
	lightShowStep++;
    2112:	3101      	adds	r1, #1
    2114:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    2118:	b002      	add	sp, #8
    211a:	bd70      	pop	{r4, r5, r6, pc}
		}
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
		if (lightShowStep == 150) switchToNextLightShow();
		break;
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
    211c:	f8b0 154a 	ldrh.w	r1, [r0, #1354]	; 0x54a
    2120:	292f      	cmp	r1, #47	; 0x2f
    2122:	f240 80c2 	bls.w	22aa <BigHouse::lightShowCycle(unsigned long&)+0x1fa>
		if (lightShowStep == 100) switchToNextLightShow();
    2126:	2964      	cmp	r1, #100	; 0x64
    2128:	d0ee      	beq.n	2108 <BigHouse::lightShowCycle(unsigned long&)+0x58>
		break;
	}
	lightShowStep++;
    212a:	3101      	adds	r1, #1
    212c:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    2130:	b002      	add	sp, #8
    2132:	bd70      	pop	{r4, r5, r6, pc}

	switch (lightShowType) {
	case 0: // original light show
	case 2:
	case 4:
		if (lightShowOrder) for (i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
    2134:	f890 3548 	ldrb.w	r3, [r0, #1352]	; 0x548
    2138:	f500 65b5 	add.w	r5, r0, #1448	; 0x5a8
    213c:	f500 66b9 	add.w	r6, r0, #1480	; 0x5c8
    2140:	b343      	cbz	r3, 2194 <BigHouse::lightShowCycle(unsigned long&)+0xe4>
    2142:	f855 0f04 	ldr.w	r0, [r5, #4]!
    2146:	f001 fdbf 	bl	3cc8 <LightGroup::rotateLeft()>
    214a:	42b5      	cmp	r5, r6
    214c:	d1f9      	bne.n	2142 <BigHouse::lightShowCycle(unsigned long&)+0x92>
		else for (i = 0; i < 8; i++) lShow_set[i]->rotateRight();
		if (lightShowOrder) lightShowDelay += 5; else lightShowDelay -= 5;
    214e:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
    2152:	2b00      	cmp	r3, #0
    2154:	d072      	beq.n	223c <BigHouse::lightShowCycle(unsigned long&)+0x18c>
    2156:	f8b4 1544 	ldrh.w	r1, [r4, #1348]	; 0x544
    215a:	3105      	adds	r1, #5
    215c:	b289      	uxth	r1, r1
    215e:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
    2162:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    2166:	f003 fc63 	bl	5a30 <TimerTask::setPeriod(unsigned long)>
		if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
    216a:	f8b4 3544 	ldrh.w	r3, [r4, #1348]	; 0x544
    216e:	3b65      	subs	r3, #101	; 0x65
    2170:	b29b      	uxth	r3, r3
    2172:	2bc6      	cmp	r3, #198	; 0xc6
    2174:	d905      	bls.n	2182 <BigHouse::lightShowCycle(unsigned long&)+0xd2>
    2176:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
    217a:	f083 0301 	eor.w	r3, r3, #1
    217e:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
		//lights->print();
		if (lightShowStep >= 80) switchToNextLightShow();
    2182:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    2186:	294f      	cmp	r1, #79	; 0x4f
    2188:	d8be      	bhi.n	2108 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    218a:	3101      	adds	r1, #1
    218c:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    2190:	b002      	add	sp, #8
    2192:	bd70      	pop	{r4, r5, r6, pc}
	switch (lightShowType) {
	case 0: // original light show
	case 2:
	case 4:
		if (lightShowOrder) for (i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
		else for (i = 0; i < 8; i++) lShow_set[i]->rotateRight();
    2194:	f855 0f04 	ldr.w	r0, [r5, #4]!
    2198:	f001 fd4e 	bl	3c38 <LightGroup::rotateRight()>
    219c:	42ae      	cmp	r6, r5
    219e:	d0d6      	beq.n	214e <BigHouse::lightShowCycle(unsigned long&)+0x9e>
    21a0:	f855 0f04 	ldr.w	r0, [r5, #4]!
    21a4:	f001 fd48 	bl	3c38 <LightGroup::rotateRight()>
    21a8:	42ae      	cmp	r6, r5
    21aa:	d1f3      	bne.n	2194 <BigHouse::lightShowCycle(unsigned long&)+0xe4>
    21ac:	e7cf      	b.n	214e <BigHouse::lightShowCycle(unsigned long&)+0x9e>
		if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
		//lights->print();
		if (lightShowStep >= 80) switchToNextLightShow();
		break;
	case 1:
		if (lightShowStep < 48) invertLight(lightShowStep);
    21ae:	f8b0 154a 	ldrh.w	r1, [r0, #1354]	; 0x54a
    21b2:	292f      	cmp	r1, #47	; 0x2f
    21b4:	d860      	bhi.n	2278 <BigHouse::lightShowCycle(unsigned long&)+0x1c8>
	}
	inline void pulseLight(byte n, uint16_t pulsePeriod = 250) {
		LightGroup::activeLightSet->getLight(n)->pulse(pulsePeriod);
	}
	inline void invertLight(byte n) {
		LightGroup::activeLightSet->getLight(n)->invert();
    21b6:	4b44      	ldr	r3, [pc, #272]	; (22c8 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    21b8:	6818      	ldr	r0, [r3, #0]
    21ba:	f001 fe05 	bl	3dc8 <LightSet::getLight(int)>
    21be:	f001 fb75 	bl	38ac <Light::invert()>
		else invertLight(lightShowStep - 48);
		if (lightShowStep >= 96) switchToNextLightShow();
    21c2:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    21c6:	295f      	cmp	r1, #95	; 0x5f
    21c8:	d89e      	bhi.n	2108 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    21ca:	3101      	adds	r1, #1
    21cc:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    21d0:	b002      	add	sp, #8
    21d2:	bd70      	pop	{r4, r5, r6, pc}
		if (lightShowStep < 48) invertLight(lightShowStep);
		else invertLight(lightShowStep - 48);
		if (lightShowStep >= 96) switchToNextLightShow();
		break;
	case 3:
		i = lightShowStep & 0x07; // i = 0..7
    21d4:	f890 554a 	ldrb.w	r5, [r0, #1354]	; 0x54a
		if (i > 0) lShow_set[i-1]->setAll(OFF_L); 
    21d8:	f015 0507 	ands.w	r5, r5, #7
    21dc:	d055      	beq.n	228a <BigHouse::lightShowCycle(unsigned long&)+0x1da>
    21de:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    21e2:	2100      	movs	r1, #0
    21e4:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
    21e8:	f001 fcac 	bl	3b44 <LightGroup::setAll(lightState)>
		else lShow_set[7]->setAll(OFF_L);
		lShow_set[i]->setAll(ON_L);
    21ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    21f0:	2101      	movs	r1, #1
    21f2:	f8d5 05ac 	ldr.w	r0, [r5, #1452]	; 0x5ac
    21f6:	f001 fca5 	bl	3b44 <LightGroup::setAll(lightState)>
		if (lightShowStep >= 48) switchToNextLightShow();
    21fa:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    21fe:	292f      	cmp	r1, #47	; 0x2f
    2200:	d882      	bhi.n	2108 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    2202:	3101      	adds	r1, #1
    2204:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    2208:	b002      	add	sp, #8
    220a:	bd70      	pop	{r4, r5, r6, pc}
	byte getNextPlayerOn();
	String getTopPlayerString(byte playerNum);
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
    220c:	4d2e      	ldr	r5, [pc, #184]	; (22c8 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
		if (lightShowStep == 100) lightShowOrder = false;
		if (lightShowStep >= 200) switchToNextLightShow();
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
    220e:	2100      	movs	r1, #0
    2210:	6828      	ldr	r0, [r5, #0]
    2212:	f001 fdd9 	bl	3dc8 <LightSet::getLight(int)>
    2216:	7846      	ldrb	r6, [r0, #1]
			getActiveLightSet()->switchOnAllLights();
    2218:	6828      	ldr	r0, [r5, #0]
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
		if (lightShowStep == 100) lightShowOrder = false;
		if (lightShowStep >= 200) switchToNextLightShow();
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
    221a:	b9b6      	cbnz	r6, 224a <BigHouse::lightShowCycle(unsigned long&)+0x19a>
			getActiveLightSet()->switchOnAllLights();
    221c:	f001 fe08 	bl	3e30 <LightSet::switchOnAllLights()>
			if (lightShowOrder) {
    2220:	f894 3548 	ldrb.w	r3, [r4, #1352]	; 0x548
				lightShowArg += 2;
    2224:	f8b4 1546 	ldrh.w	r1, [r4, #1350]	; 0x546
		if (lightShowStep >= 200) switchToNextLightShow();
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
			getActiveLightSet()->switchOnAllLights();
			if (lightShowOrder) {
    2228:	b3ab      	cbz	r3, 2296 <BigHouse::lightShowCycle(unsigned long&)+0x1e6>
				lightShowArg += 2;
    222a:	3102      	adds	r1, #2
    222c:	b289      	uxth	r1, r1
				if (lightShowArg >= 25) lightShowOrder = false;
    222e:	2918      	cmp	r1, #24
		break;
	case 6: 
		if (!getActiveLightSet()->getLight(0)->isActive()) { // switch ON cycle
			getActiveLightSet()->switchOnAllLights();
			if (lightShowOrder) {
				lightShowArg += 2;
    2230:	f8a4 1546 	strh.w	r1, [r4, #1350]	; 0x546
				if (lightShowArg >= 25) lightShowOrder = false;
    2234:	d910      	bls.n	2258 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
    2236:	f884 6548 	strb.w	r6, [r4, #1352]	; 0x548
    223a:	e00d      	b.n	2258 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
	case 0: // original light show
	case 2:
	case 4:
		if (lightShowOrder) for (i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
		else for (i = 0; i < 8; i++) lShow_set[i]->rotateRight();
		if (lightShowOrder) lightShowDelay += 5; else lightShowDelay -= 5;
    223c:	f8b4 1544 	ldrh.w	r1, [r4, #1348]	; 0x544
    2240:	3905      	subs	r1, #5
    2242:	b289      	uxth	r1, r1
    2244:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
    2248:	e78b      	b.n	2162 <BigHouse::lightShowCycle(unsigned long&)+0xb2>
				if (lightShowArg <= 1) lightShowOrder = true;
			}
			lightShowDelay = lightShowArg;
		}
		else { // switch OFF cycle
			getActiveLightSet()->switchOffAllLights();
    224a:	f001 fdd5 	bl	3df8 <LightSet::switchOffAllLights()>
			lightShowDelay = 26 - lightShowArg;
    224e:	f8b4 1546 	ldrh.w	r1, [r4, #1350]	; 0x546
    2252:	f1c1 011a 	rsb	r1, r1, #26
    2256:	b289      	uxth	r1, r1
    2258:	f8a4 1544 	strh.w	r1, [r4, #1348]	; 0x544
		}
		lshow_tmr->setPeriod((uint32_t)lightShowDelay);
    225c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    2260:	f003 fbe6 	bl	5a30 <TimerTask::setPeriod(unsigned long)>
		if (lightShowStep == 150) switchToNextLightShow();
    2264:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    2268:	2996      	cmp	r1, #150	; 0x96
    226a:	f43f af4d 	beq.w	2108 <BigHouse::lightShowCycle(unsigned long&)+0x58>
	case 7:
		if (lightShowStep < 48) pulseLight(lightShowStep, 1000);
		if (lightShowStep == 100) switchToNextLightShow();
		break;
	}
	lightShowStep++;
    226e:	3101      	adds	r1, #1
    2270:	f8a4 154a 	strh.w	r1, [r4, #1354]	; 0x54a
}
    2274:	b002      	add	sp, #8
    2276:	bd70      	pop	{r4, r5, r6, pc}
	}
	inline void pulseLight(byte n, uint16_t pulsePeriod = 250) {
		LightGroup::activeLightSet->getLight(n)->pulse(pulsePeriod);
	}
	inline void invertLight(byte n) {
		LightGroup::activeLightSet->getLight(n)->invert();
    2278:	4b13      	ldr	r3, [pc, #76]	; (22c8 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    227a:	3930      	subs	r1, #48	; 0x30
    227c:	6818      	ldr	r0, [r3, #0]
    227e:	b2c9      	uxtb	r1, r1
    2280:	f001 fda2 	bl	3dc8 <LightSet::getLight(int)>
    2284:	f001 fb12 	bl	38ac <Light::invert()>
    2288:	e79b      	b.n	21c2 <BigHouse::lightShowCycle(unsigned long&)+0x112>
		if (lightShowStep >= 96) switchToNextLightShow();
		break;
	case 3:
		i = lightShowStep & 0x07; // i = 0..7
		if (i > 0) lShow_set[i-1]->setAll(OFF_L); 
		else lShow_set[7]->setAll(OFF_L);
    228a:	4629      	mov	r1, r5
    228c:	f8d0 05c8 	ldr.w	r0, [r0, #1480]	; 0x5c8
    2290:	f001 fc58 	bl	3b44 <LightGroup::setAll(lightState)>
    2294:	e7aa      	b.n	21ec <BigHouse::lightShowCycle(unsigned long&)+0x13c>
			if (lightShowOrder) {
				lightShowArg += 2;
				if (lightShowArg >= 25) lightShowOrder = false;
			}
			else {
				lightShowArg -= 2;
    2296:	3902      	subs	r1, #2
    2298:	b289      	uxth	r1, r1
				if (lightShowArg <= 1) lightShowOrder = true;
    229a:	2901      	cmp	r1, #1
			if (lightShowOrder) {
				lightShowArg += 2;
				if (lightShowArg >= 25) lightShowOrder = false;
			}
			else {
				lightShowArg -= 2;
    229c:	f8a4 1546 	strh.w	r1, [r4, #1350]	; 0x546
				if (lightShowArg <= 1) lightShowOrder = true;
    22a0:	d8da      	bhi.n	2258 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
    22a2:	2301      	movs	r3, #1
    22a4:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
    22a8:	e7d6      	b.n	2258 <BigHouse::lightShowCycle(unsigned long&)+0x1a8>
	inline void blinkLight(byte n, 
		uint16_t blinkPeriod = 250, byte blinkDutyC = 50, byte ticks = 0) {
			LightGroup::activeLightSet->getLight(n)->blink(blinkPeriod, blinkDutyC, ticks);
	}
	inline void pulseLight(byte n, uint16_t pulsePeriod = 250) {
		LightGroup::activeLightSet->getLight(n)->pulse(pulsePeriod);
    22aa:	4b07      	ldr	r3, [pc, #28]	; (22c8 <BigHouse::lightShowCycle(unsigned long&)+0x218>)
    22ac:	6818      	ldr	r0, [r3, #0]
    22ae:	f001 fd8b 	bl	3dc8 <LightSet::getLight(int)>
    22b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    22b6:	f001 fb0b 	bl	38d0 <Light::pulse(unsigned short)>
    22ba:	f8b4 154a 	ldrh.w	r1, [r4, #1354]	; 0x54a
    22be:	e732      	b.n	2126 <BigHouse::lightShowCycle(unsigned long&)+0x76>
		lShow_set[i]->setAll(ON_L);
		if (lightShowStep >= 48) switchToNextLightShow();
		break;
	case 5:
		getActiveLightSet()->getLight(micros() % 48)->set(lightShowOrder); // random lamp
		if (lightShowStep == 100) lightShowOrder = false;
    22c0:	f884 5548 	strb.w	r5, [r4, #1352]	; 0x548
    22c4:	e725      	b.n	2112 <BigHouse::lightShowCycle(unsigned long&)+0x62>
    22c6:	bf00      	nop
    22c8:	20002988 	.word	0x20002988
    22cc:	aaaaaaab 	.word	0xaaaaaaab

000022d0 <BigHouse::getTopScoreStr(unsigned char)>:
		break;
	}
	lightShowStep++;
}

String BigHouse::getTopScoreStr(byte n) {
    22d0:	b570      	push	{r4, r5, r6, lr}
    22d2:	b088      	sub	sp, #32
    22d4:	4614      	mov	r4, r2
    22d6:	4605      	mov	r5, r0
    22d8:	460e      	mov	r6, r1

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22da:	a804      	add	r0, sp, #16
    22dc:	491f      	ldr	r1, [pc, #124]	; (235c <BigHouse::getTopScoreStr(unsigned char)+0x8c>)
    22de:	f009 fecd 	bl	c07c <String::String(char const*)>
	String st = " <" + String(n) + "> ";
    22e2:	4621      	mov	r1, r4
    22e4:	4668      	mov	r0, sp
	st += topScore[n].playerName + "- ";
    22e6:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
	}
	lightShowStep++;
}

String BigHouse::getTopScoreStr(byte n) {
	String st = " <" + String(n) + "> ";
    22ea:	f009 ff0b 	bl	c104 <String::String(unsigned char)>
    22ee:	4669      	mov	r1, sp
    22f0:	a804      	add	r0, sp, #16
	st += topScore[n].playerName + "- ";
    22f2:	00a4      	lsls	r4, r4, #2
	}
	lightShowStep++;
}

String BigHouse::getTopScoreStr(byte n) {
	String st = " <" + String(n) + "> ";
    22f4:	f009 fff6 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    22f8:	4919      	ldr	r1, [pc, #100]	; (2360 <BigHouse::getTopScoreStr(unsigned char)+0x90>)
    22fa:	f009 fffb 	bl	c2f4 <operator+(StringSumHelper const&, char const*)>
    22fe:	4601      	mov	r1, r0
    2300:	4628      	mov	r0, r5
    2302:	f009 fee1 	bl	c0c8 <String::String(String const&)>
    2306:	4668      	mov	r0, sp
    2308:	f009 fe78 	bl	bffc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    230c:	a804      	add	r0, sp, #16
    230e:	f009 fe75 	bl	bffc <String::~String()>
	st += topScore[n].playerName + "- ";
    2312:	1931      	adds	r1, r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2314:	a804      	add	r0, sp, #16
    2316:	f501 712b 	add.w	r1, r1, #684	; 0x2ac
    231a:	f009 fed5 	bl	c0c8 <String::String(String const&)>
    231e:	a804      	add	r0, sp, #16
    2320:	4910      	ldr	r1, [pc, #64]	; (2364 <BigHouse::getTopScoreStr(unsigned char)+0x94>)
    2322:	f009 ffe7 	bl	c2f4 <operator+(StringSumHelper const&, char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    2326:	4601      	mov	r1, r0
    2328:	4628      	mov	r0, r5
    232a:	f009 ffa5 	bl	c278 <String::append(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    232e:	a804      	add	r0, sp, #16
    2330:	f009 fe64 	bl	bffc <String::~String()>
	st += topScore[n].scoreString + "  ";
    2334:	1931      	adds	r1, r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2336:	a804      	add	r0, sp, #16
    2338:	f501 7127 	add.w	r1, r1, #668	; 0x29c
    233c:	f009 fec4 	bl	c0c8 <String::String(String const&)>
    2340:	a804      	add	r0, sp, #16
    2342:	4909      	ldr	r1, [pc, #36]	; (2368 <BigHouse::getTopScoreStr(unsigned char)+0x98>)
    2344:	f009 ffd6 	bl	c2f4 <operator+(StringSumHelper const&, char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    2348:	4601      	mov	r1, r0
    234a:	4628      	mov	r0, r5
    234c:	f009 ff94 	bl	c278 <String::append(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    2350:	a804      	add	r0, sp, #16
    2352:	f009 fe53 	bl	bffc <String::~String()>
	return st;
}
    2356:	4628      	mov	r0, r5
    2358:	b008      	add	sp, #32
    235a:	bd70      	pop	{r4, r5, r6, pc}
    235c:	200009cc 	.word	0x200009cc
    2360:	200009d0 	.word	0x200009d0
    2364:	200009d4 	.word	0x200009d4
    2368:	200009d8 	.word	0x200009d8

0000236c <BigHouse::startDisplayShow()>:

void BigHouse::startDisplayShow() {
    236c:	b510      	push	{r4, lr}
	msg->outln(F("startDisplayShow..."));
    236e:	4907      	ldr	r1, [pc, #28]	; (238c <BigHouse::startDisplayShow()+0x20>)
	st += topScore[n].playerName + "- ";
	st += topScore[n].scoreString + "  ";
	return st;
}

void BigHouse::startDisplayShow() {
    2370:	4604      	mov	r4, r0
	msg->outln(F("startDisplayShow..."));
    2372:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    2376:	f004 f86b 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	displayShowStep = 0;
    237a:	2300      	movs	r3, #0
	dshow_tmr->enable();
    237c:	f8d4 0558 	ldr.w	r0, [r4, #1368]	; 0x558
	return st;
}

void BigHouse::startDisplayShow() {
	msg->outln(F("startDisplayShow..."));
	displayShowStep = 0;
    2380:	f884 3540 	strb.w	r3, [r4, #1344]	; 0x540
	dshow_tmr->enable();
}
    2384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::startDisplayShow() {
	msg->outln(F("startDisplayShow..."));
	displayShowStep = 0;
	dshow_tmr->enable();
    2388:	f003 bb58 	b.w	5a3c <TimerTask::enable()>
    238c:	200009dc 	.word	0x200009dc

00002390 <BigHouse::begin()>:
	delete show5_ls;
	delete show6_ls;
	delete[] lShow_set;
}

void BigHouse::begin() {
    2390:	b510      	push	{r4, lr}
    2392:	4604      	mov	r4, r0
	msg->outln(F("BigHouse begin..."));
    2394:	4919      	ldr	r1, [pc, #100]	; (23fc <BigHouse::begin()+0x6c>)
    2396:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    239a:	f004 f859 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	PinGame::reset();
    239e:	4620      	mov	r0, r4
    23a0:	f002 f9ba 	bl	4718 <PinGame::reset()>
	lamps->setProtection(SND16_LMP, true);
    23a4:	68a0      	ldr	r0, [r4, #8]
    23a6:	2201      	movs	r2, #1
    23a8:	2104      	movs	r1, #4
    23aa:	f000 f967 	bl	267c <BitMappedSet::setProtection(unsigned short, bool)>
	lamps->setProtection(RAMP_LMP, true);
    23ae:	68a0      	ldr	r0, [r4, #8]
    23b0:	2201      	movs	r2, #1
    23b2:	210c      	movs	r1, #12
    23b4:	f000 f962 	bl	267c <BitMappedSet::setProtection(unsigned short, bool)>
	lamps->setProtection(BALLGATE_LMP, true);
    23b8:	68a0      	ldr	r0, [r4, #8]
    23ba:	2201      	movs	r2, #1
    23bc:	210d      	movs	r1, #13
    23be:	f000 f95d 	bl	267c <BitMappedSet::setProtection(unsigned short, bool)>
	lamps->setProtection(AUGER_LMP, true);
    23c2:	68a0      	ldr	r0, [r4, #8]
    23c4:	2201      	movs	r2, #1
    23c6:	210e      	movs	r1, #14
    23c8:	f000 f958 	bl	267c <BitMappedSet::setProtection(unsigned short, bool)>
	setSound(SND_SHUT_UP);
    23cc:	4620      	mov	r0, r4
    23ce:	211f      	movs	r1, #31
    23d0:	f002 fdfc 	bl	4fcc <Sys80b::setSound(unsigned char)>
	//msg->outln(F("bank reset..."));
	act.bankReset.activate(250);
    23d4:	f504 6055 	add.w	r0, r4, #3408	; 0xd50
    23d8:	2200      	movs	r2, #0
    23da:	21fa      	movs	r1, #250	; 0xfa
    23dc:	f003 f854 	bl	5488 <Sys80b_Actuator::activate(unsigned short, unsigned short)>
	msg->outln(F("starting shows..."));
    23e0:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    23e4:	4906      	ldr	r1, [pc, #24]	; (2400 <BigHouse::begin()+0x70>)
    23e6:	f004 f833 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	startLightShow();
    23ea:	4620      	mov	r0, r4
    23ec:	f7ff fe4a 	bl	2084 <BigHouse::startLightShow()>
	startDisplayShow();
    23f0:	4620      	mov	r0, r4
}
    23f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setSound(SND_SHUT_UP);
	//msg->outln(F("bank reset..."));
	act.bankReset.activate(250);
	msg->outln(F("starting shows..."));
	startLightShow();
	startDisplayShow();
    23f6:	f7ff bfb9 	b.w	236c <BigHouse::startDisplayShow()>
    23fa:	bf00      	nop
    23fc:	200009f0 	.word	0x200009f0
    2400:	20000a04 	.word	0x20000a04

00002404 <BigHouse::displayShowCycle(unsigned long&)>:

void BigHouse::stopDisplayShow() {
	dshow_tmr->disable();
}

void BigHouse::displayShowCycle(uint32_t& ms) {
    2404:	b570      	push	{r4, r5, r6, lr}
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
    2406:	f890 2540 	ldrb.w	r2, [r0, #1344]	; 0x540

void BigHouse::stopDisplayShow() {
	dshow_tmr->disable();
}

void BigHouse::displayShowCycle(uint32_t& ms) {
    240a:	b084      	sub	sp, #16
    240c:	4605      	mov	r5, r0
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
    240e:	b13a      	cbz	r2, 2420 <BigHouse::displayShowCycle(unsigned long&)+0x1c>
		displayScoresAndCredits();
		dshow_tmr->setPeriod(1000u);
	}
	else if (displayShowStep == 3) {
    2410:	2a03      	cmp	r2, #3
    2412:	d027      	beq.n	2464 <BigHouse::displayShowCycle(unsigned long&)+0x60>
		extDisplay->clear();
		extDisplay->setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
    2414:	d80f      	bhi.n	2436 <BigHouse::displayShowCycle(unsigned long&)+0x32>
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
			return;
		}
	}
	displayShowStep++;
    2416:	3201      	adds	r2, #1
    2418:	f885 2540 	strb.w	r2, [r5, #1344]	; 0x540
}
    241c:	b004      	add	sp, #16
    241e:	bd70      	pop	{r4, r5, r6, pc}

void BigHouse::displayShowCycle(uint32_t& ms) {
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
		displayScoresAndCredits();
    2420:	f002 f85c 	bl	44dc <PinGame::displayScoresAndCredits()>
		dshow_tmr->setPeriod(1000u);
    2424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2428:	f8d5 0558 	ldr.w	r0, [r5, #1368]	; 0x558
    242c:	f003 fb00 	bl	5a30 <TimerTask::setPeriod(unsigned long)>
    2430:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
    2434:	e7ef      	b.n	2416 <BigHouse::displayShowCycle(unsigned long&)+0x12>
		extDisplay->clear();
		extDisplay->setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
    2436:	3a04      	subs	r2, #4
    2438:	4601      	mov	r1, r0
    243a:	4668      	mov	r0, sp
    243c:	b2d2      	uxtb	r2, r2
    243e:	f7ff ff47 	bl	22d0 <BigHouse::getTopScoreStr(unsigned char)>
		extDisplay->setDynamicFX(1, st , DFX_type::LEFT_INS);
    2442:	2305      	movs	r3, #5
    2444:	466a      	mov	r2, sp
    2446:	2101      	movs	r1, #1
    2448:	f8d5 03a0 	ldr.w	r0, [r5, #928]	; 0x3a0
    244c:	f001 f814 	bl	3478 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)>
		if (displayShowStep == 3 + TOP_SCORES) {
    2450:	f895 3540 	ldrb.w	r3, [r5, #1344]	; 0x540
    2454:	2b08      	cmp	r3, #8
    2456:	d024      	beq.n	24a2 <BigHouse::displayShowCycle(unsigned long&)+0x9e>
		extDisplay->clear();
		extDisplay->setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
    2458:	4668      	mov	r0, sp
    245a:	f009 fdcf 	bl	bffc <String::~String()>
    245e:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
    2462:	e7d8      	b.n	2416 <BigHouse::displayShowCycle(unsigned long&)+0x12>
	if (displayShowStep == 0) {
		displayScoresAndCredits();
		dshow_tmr->setPeriod(1000u);
	}
	else if (displayShowStep == 3) {
		extDisplay->clear();
    2464:	f8d0 63a0 	ldr.w	r6, [r0, #928]	; 0x3a0
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	}

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    2468:	7f33      	ldrb	r3, [r6, #28]
    246a:	b15b      	cbz	r3, 2484 <BigHouse::displayShowCycle(unsigned long&)+0x80>
    246c:	2400      	movs	r4, #0
    246e:	4621      	mov	r1, r4
    2470:	3401      	adds	r4, #1
    2472:	4630      	mov	r0, r6
    2474:	f001 f88c 	bl	3590 <ExtTextDisplay::clearLine(unsigned char)>
    2478:	7f33      	ldrb	r3, [r6, #28]
    247a:	b2e4      	uxtb	r4, r4
    247c:	42a3      	cmp	r3, r4
    247e:	d8f6      	bhi.n	246e <BigHouse::displayShowCycle(unsigned long&)+0x6a>
    2480:	f8d5 63a0 	ldr.w	r6, [r5, #928]	; 0x3a0
		bool blinking = false, bool clearBefore = false) {
		putText(line, (const char*)text, pos, blinking, clearBefore);
	}

	inline void setDynamicFX(byte line, const __FlashStringHelper* text, DFX_type effectId) {
		setDynamicFX(line, (const char*)text, effectId);
    2484:	4a0a      	ldr	r2, [pc, #40]	; (24b0 <BigHouse::displayShowCycle(unsigned long&)+0xac>)
    2486:	4630      	mov	r0, r6
    2488:	2305      	movs	r3, #5
    248a:	2100      	movs	r1, #0
    248c:	f000 ffe0 	bl	3450 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>
		extDisplay->setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
    2490:	f640 11c4 	movw	r1, #2500	; 0x9c4
    2494:	f8d5 0558 	ldr.w	r0, [r5, #1368]	; 0x558
    2498:	f003 faca 	bl	5a30 <TimerTask::setPeriod(unsigned long)>
    249c:	f895 2540 	ldrb.w	r2, [r5, #1344]	; 0x540
    24a0:	e7b9      	b.n	2416 <BigHouse::displayShowCycle(unsigned long&)+0x12>
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
		extDisplay->setDynamicFX(1, st , DFX_type::LEFT_INS);
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
    24a2:	2300      	movs	r3, #0
			return;
    24a4:	4668      	mov	r0, sp
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
		extDisplay->setDynamicFX(1, st , DFX_type::LEFT_INS);
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
    24a6:	f885 3540 	strb.w	r3, [r5, #1344]	; 0x540
			return;
    24aa:	f009 fda7 	bl	bffc <String::~String()>
    24ae:	e7b5      	b.n	241c <BigHouse::displayShowCycle(unsigned long&)+0x18>
    24b0:	20000a18 	.word	0x20000a18

000024b4 <BigHouse::timerRoutine(int, unsigned long&)>:
	return ballReady;
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
    24b4:	f8d0 355c 	ldr.w	r3, [r0, #1372]	; 0x55c
    24b8:	428b      	cmp	r3, r1
    24ba:	d01b      	beq.n	24f4 <BigHouse::timerRoutine(int, unsigned long&)+0x40>
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
    24bc:	f8d0 3560 	ldr.w	r3, [r0, #1376]	; 0x560
    24c0:	4299      	cmp	r1, r3
	if (ballReady) act.ballRelease.set(true);
	brel_tmr->enable();
	return ballReady;
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
    24c2:	b410      	push	{r4}
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
    24c4:	d019      	beq.n	24fa <BigHouse::timerRoutine(int, unsigned long&)+0x46>
		//msg->outln(F("* light show timer"));
		lightShowCycle(ms);
		return;
		}
	if (taskId == ballRelease_tt) {
    24c6:	f8d0 3564 	ldr.w	r3, [r0, #1380]	; 0x564
    24ca:	4299      	cmp	r1, r3
    24cc:	d01a      	beq.n	2504 <BigHouse::timerRoutine(int, unsigned long&)+0x50>
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
    24ce:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
    24d2:	4299      	cmp	r1, r3
    24d4:	d009      	beq.n	24ea <BigHouse::timerRoutine(int, unsigned long&)+0x36>
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
    24d6:	f8d0 2520 	ldr.w	r2, [r0, #1312]	; 0x520
    24da:	4b0e      	ldr	r3, [pc, #56]	; (2514 <BigHouse::timerRoutine(int, unsigned long&)+0x60>)
    24dc:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    24e0:	490d      	ldr	r1, [pc, #52]	; (2518 <BigHouse::timerRoutine(int, unsigned long&)+0x64>)
}
    24e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	}
	if (taskId == display_tt) {
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
    24e6:	f004 b87f 	b.w	65e8 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
		displayShowCycle(ms);
    24ea:	4611      	mov	r1, r2
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}
    24ec:	f85d 4b04 	ldr.w	r4, [sp], #4
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
		displayShowCycle(ms);
    24f0:	f7ff bf88 	b.w	2404 <BigHouse::displayShowCycle(unsigned long&)>
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
		dropTimerRoutine(ms);
    24f4:	4611      	mov	r1, r2
    24f6:	f7ff bd0f 	b.w	1f18 <BigHouse::dropTimerRoutine(unsigned long&)>
		return;
	};
	if (taskId == lightShow_tt) {
		//msg->outln(F("* light show timer"));
		lightShowCycle(ms);
    24fa:	4611      	mov	r1, r2
	if (taskId == display_tt) {
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}
    24fc:	f85d 4b04 	ldr.w	r4, [sp], #4
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
		//msg->outln(F("* light show timer"));
		lightShowCycle(ms);
    2500:	f7ff bdd6 	b.w	20b0 <BigHouse::lightShowCycle(unsigned long&)>
		return;
		}
	if (taskId == ballRelease_tt) {
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
    2504:	f500 6058 	add.w	r0, r0, #3456	; 0xd80
    2508:	2100      	movs	r1, #0
	if (taskId == display_tt) {
		displayShowCycle(ms);
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}
    250a:	f85d 4b04 	ldr.w	r4, [sp], #4
		lightShowCycle(ms);
		return;
		}
	if (taskId == ballRelease_tt) {
		//msg->outln(F("* ball release timer"));
		act.ballRelease.set(false);
    250e:	f002 bfa5 	b.w	545c <Sys80b_Actuator::set(bool)>
    2512:	bf00      	nop
    2514:	20000a30 	.word	0x20000a30
    2518:	20000a40 	.word	0x20000a40

0000251c <non-virtual thunk to BigHouse::timerRoutine(int, unsigned long&)>:
	String getGameName();
	int getGameNumber();
	String getTopScoreStr(byte n);
	bool releaseBall();
	void snd16Update(uint32_t& t);
	void timerRoutine(int taskIdentifer, uint32_t& ms);
    251c:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    2520:	f7ff bfc8 	b.w	24b4 <BigHouse::timerRoutine(int, unsigned long&)>

00002524 <BigHouse::snd16Update(unsigned long&)>:
	}
	displayShowStep++;
}

void BigHouse::snd16Update(uint32_t& ms) {
	if (!soundBuffer.isEmpty()) { // set S16 before S1-2-4-8
    2524:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
		}
	}
	displayShowStep++;
}

void BigHouse::snd16Update(uint32_t& ms) {
    2528:	b538      	push	{r3, r4, r5, lr}
    252a:	4604      	mov	r4, r0
	if (!soundBuffer.isEmpty()) { // set S16 before S1-2-4-8
    252c:	b192      	cbz	r2, 2554 <BigHouse::snd16Update(unsigned long&)+0x30>
		_valuesCount--;
		return value;
	}

	inline Type peek() {
		return (_valuesCount == 0) ? (Type)0 : _buff[_firstPtr];
    252e:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
	inline void setOnGameRelay(bool st) { setLamp(Q_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    2532:	2301      	movs	r3, #1
    2534:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
    2538:	2104      	movs	r1, #4
    253a:	6880      	ldr	r0, [r0, #8]
    253c:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    2540:	f3c2 1200 	ubfx	r2, r2, #4, #1
    2544:	f000 f862 	bl	260c <BitMappedSet::setState(unsigned short, bool, bool)>
	inline byte getChangedSwitchState() { return _changedSwitchState; }
	inline byte getCurrentReturns() { return _returnsInput; }
	void feedDisplay();
	bool renderNextLampsGroup();
	bool renderLampsGroup(byte lg);
	bool renderLamp(byte l) { return renderLampsGroup(l >> 2); }
    2548:	4620      	mov	r0, r4
    254a:	2101      	movs	r1, #1
	}
	else if (_soundPendingCmd) { // reset S16 before S1-2-4-8
		setLamp(SND16_LMP, false, true);
		renderLamp(SND16_LMP); // immediate update
	}
    254c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2550:	f002 be2e 	b.w	51b0 <Sys80b::renderLampsGroup(unsigned char)>
		uint16_t snd = soundBuffer.peek();
		// light #4 sound16 update
		setLamp(SND16_LMP, (snd & 0x10) > 0, true);
		renderLamp(SND16_LMP); // immediate update
	}
	else if (_soundPendingCmd) { // reset S16 before S1-2-4-8
    2554:	f890 3280 	ldrb.w	r3, [r0, #640]	; 0x280
    2558:	b903      	cbnz	r3, 255c <BigHouse::snd16Update(unsigned long&)+0x38>
    255a:	bd38      	pop	{r3, r4, r5, pc}
	inline void setOnGameRelay(bool st) { setLamp(Q_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    255c:	2301      	movs	r3, #1
    255e:	2104      	movs	r1, #4
    2560:	6880      	ldr	r0, [r0, #8]
    2562:	e7ef      	b.n	2544 <BigHouse::snd16Update(unsigned long&)+0x20>

00002564 <BigHouse::millisRoutine(unsigned long&)>:
		return;
	}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}

void BigHouse::millisRoutine(uint32_t& ms) {
    2564:	b538      	push	{r3, r4, r5, lr}
    2566:	4604      	mov	r4, r0
    2568:	460d      	mov	r5, r1
	snd16Update(ms); // "Sound16" bit preliminary update
    256a:	f7ff ffdb 	bl	2524 <BigHouse::snd16Update(unsigned long&)>
	PinGame::millisRoutine(ms);
    256e:	4629      	mov	r1, r5
    2570:	4620      	mov	r0, r4
}
    2572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	msg->warn(F("unknown taskId"), CLASSNAME, "timerRoutine");
}

void BigHouse::millisRoutine(uint32_t& ms) {
	snd16Update(ms); // "Sound16" bit preliminary update
	PinGame::millisRoutine(ms);
    2576:	f001 bd39 	b.w	3fec <PinGame::millisRoutine(unsigned long&)>
    257a:	bf00      	nop

0000257c <BitMappedSet::~BitMappedSet()>:
	_change = new byte[_arraySize];
	_protection = new byte[_arraySize];
	reset();
}

BitMappedSet::~BitMappedSet() {
    257c:	b510      	push	{r4, lr}
    257e:	4604      	mov	r4, r0
	delete[] _state;
    2580:	6800      	ldr	r0, [r0, #0]
    2582:	b108      	cbz	r0, 2588 <BitMappedSet::~BitMappedSet()+0xc>
    2584:	f009 fc38 	bl	bdf8 <operator delete[](void*)>
	delete[] _change;
    2588:	68a0      	ldr	r0, [r4, #8]
    258a:	b108      	cbz	r0, 2590 <BitMappedSet::~BitMappedSet()+0x14>
    258c:	f009 fc34 	bl	bdf8 <operator delete[](void*)>
	delete[] _protection;
    2590:	6860      	ldr	r0, [r4, #4]
    2592:	b108      	cbz	r0, 2598 <BitMappedSet::~BitMappedSet()+0x1c>
    2594:	f009 fc30 	bl	bdf8 <operator delete[](void*)>
}
    2598:	4620      	mov	r0, r4
    259a:	bd10      	pop	{r4, pc}

0000259c <BitMappedSet::reset()>:

void BitMappedSet::reset() {
    259c:	b510      	push	{r4, lr}
    259e:	4604      	mov	r4, r0
	//Serial.println("BitMappedSet reset...");
	delay(100);
    25a0:	2064      	movs	r0, #100	; 0x64
    25a2:	f007 ff7b 	bl	a49c <delay>
	for (uint16_t i = 0; i < _arraySize; i++) {
    25a6:	7ba3      	ldrb	r3, [r4, #14]
    25a8:	b163      	cbz	r3, 25c4 <BitMappedSet::reset()+0x28>
    25aa:	2300      	movs	r3, #0
		_state[i] = 0;
    25ac:	461a      	mov	r2, r3
    25ae:	6820      	ldr	r0, [r4, #0]
}

void BitMappedSet::reset() {
	//Serial.println("BitMappedSet reset...");
	delay(100);
	for (uint16_t i = 0; i < _arraySize; i++) {
    25b0:	1c59      	adds	r1, r3, #1
		_state[i] = 0;
    25b2:	54c2      	strb	r2, [r0, r3]
		_change[i] = 0;
    25b4:	68a0      	ldr	r0, [r4, #8]
    25b6:	54c2      	strb	r2, [r0, r3]
		_protection[i] = 0;
    25b8:	6860      	ldr	r0, [r4, #4]
    25ba:	54c2      	strb	r2, [r0, r3]
}

void BitMappedSet::reset() {
	//Serial.println("BitMappedSet reset...");
	delay(100);
	for (uint16_t i = 0; i < _arraySize; i++) {
    25bc:	b28b      	uxth	r3, r1
    25be:	7ba1      	ldrb	r1, [r4, #14]
    25c0:	4299      	cmp	r1, r3
    25c2:	d8f4      	bhi.n	25ae <BitMappedSet::reset()+0x12>
    25c4:	bd10      	pop	{r4, pc}
    25c6:	bf00      	nop

000025c8 <BitMappedSet::BitMappedSet(unsigned short)>:

BitMappedSet::BitMappedSet() {
	BitMappedSet(32u);
}

BitMappedSet::BitMappedSet(uint16_t size) {
    25c8:	b538      	push	{r3, r4, r5, lr}
    25ca:	460d      	mov	r5, r1
    25cc:	4604      	mov	r4, r0
	//Serial.println("BitMappedSet(n) init...");
	delay(100);
    25ce:	2064      	movs	r0, #100	; 0x64
    25d0:	f007 ff64 	bl	a49c <delay>
    25d4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    25d8:	4629      	mov	r1, r5
    25da:	bf28      	it	cs
    25dc:	f44f 6180 	movcs.w	r1, #1024	; 0x400
	if (size > MAX_SIZE) size = MAX_SIZE;
	_size = size;
	_arraySize = (byte)(((size - 1) >> 3) + 1);
    25e0:	1e48      	subs	r0, r1, #1

BitMappedSet::BitMappedSet(uint16_t size) {
	//Serial.println("BitMappedSet(n) init...");
	delay(100);
	if (size > MAX_SIZE) size = MAX_SIZE;
	_size = size;
    25e2:	81a1      	strh	r1, [r4, #12]
	_arraySize = (byte)(((size - 1) >> 3) + 1);
    25e4:	10c0      	asrs	r0, r0, #3
    25e6:	3001      	adds	r0, #1
    25e8:	b2c0      	uxtb	r0, r0
    25ea:	73a0      	strb	r0, [r4, #14]
	//Serial.print("BitMappedSet(");
	//Serial.println(size);
	//Serial.println("): array size : ");
	//Serial.println(_arraySize);
	_state = new byte[_arraySize];
    25ec:	f009 fc02 	bl	bdf4 <operator new[](unsigned int)>
    25f0:	6020      	str	r0, [r4, #0]
	_change = new byte[_arraySize];
    25f2:	7ba0      	ldrb	r0, [r4, #14]
    25f4:	f009 fbfe 	bl	bdf4 <operator new[](unsigned int)>
    25f8:	60a0      	str	r0, [r4, #8]
	_protection = new byte[_arraySize];
    25fa:	7ba0      	ldrb	r0, [r4, #14]
    25fc:	f009 fbfa 	bl	bdf4 <operator new[](unsigned int)>
    2600:	6060      	str	r0, [r4, #4]
	reset();
    2602:	4620      	mov	r0, r4
    2604:	f7ff ffca 	bl	259c <BitMappedSet::reset()>
}
    2608:	4620      	mov	r0, r4
    260a:	bd38      	pop	{r3, r4, r5, pc}

0000260c <BitMappedSet::setState(unsigned short, bool, bool)>:
		_protection[i] = 0;
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
    260c:	b470      	push	{r4, r5, r6}
	if (n >= _size) return false;
    260e:	8984      	ldrh	r4, [r0, #12]
    2610:	428c      	cmp	r4, r1
    2612:	d90c      	bls.n	262e <BitMappedSet::setState(unsigned short, bool, bool)+0x22>
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
    2614:	f001 0507 	and.w	r5, r1, #7
    2618:	2401      	movs	r4, #1
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
    261a:	10c9      	asrs	r1, r1, #3
	byte bitVal = (byte)1 << (n & 7);
    261c:	40ac      	lsls	r4, r5
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    261e:	b289      	uxth	r1, r1

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
    2620:	b2e5      	uxtb	r5, r4
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    2622:	b143      	cbz	r3, 2636 <BitMappedSet::setState(unsigned short, bool, bool)+0x2a>
	if (state) {
    2624:	b16a      	cbz	r2, 2642 <BitMappedSet::setState(unsigned short, bool, bool)+0x36>
		if ((_state[byteNum] & bitVal) == 0) {
    2626:	6804      	ldr	r4, [r0, #0]
    2628:	5c63      	ldrb	r3, [r4, r1]
    262a:	421d      	tst	r5, r3
    262c:	d018      	beq.n	2660 <BitMappedSet::setState(unsigned short, bool, bool)+0x54>
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
    262e:	2300      	movs	r3, #0
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	return false;
}
    2630:	4618      	mov	r0, r3
    2632:	bc70      	pop	{r4, r5, r6}
    2634:	4770      	bx	lr
// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    2636:	6846      	ldr	r6, [r0, #4]
    2638:	5c76      	ldrb	r6, [r6, r1]
    263a:	4235      	tst	r5, r6
    263c:	d1f8      	bne.n	2630 <BitMappedSet::setState(unsigned short, bool, bool)+0x24>
	if (state) {
    263e:	2a00      	cmp	r2, #0
    2640:	d1f1      	bne.n	2626 <BitMappedSet::setState(unsigned short, bool, bool)+0x1a>
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	else {
		if ((_state[byteNum] & bitVal) > 0) {
    2642:	6806      	ldr	r6, [r0, #0]
    2644:	5c73      	ldrb	r3, [r6, r1]
    2646:	421d      	tst	r5, r3
    2648:	d015      	beq.n	2676 <BitMappedSet::setState(unsigned short, bool, bool)+0x6a>
			_state[byteNum] &= ~bitVal;
    264a:	ea23 0404 	bic.w	r4, r3, r4
			_change[byteNum] |= bitVal;
			return true;
    264e:	2301      	movs	r3, #1
			return true;
		}
	}
	else {
		if ((_state[byteNum] & bitVal) > 0) {
			_state[byteNum] &= ~bitVal;
    2650:	5474      	strb	r4, [r6, r1]
			_change[byteNum] |= bitVal;
    2652:	6880      	ldr	r0, [r0, #8]
    2654:	5c42      	ldrb	r2, [r0, r1]
    2656:	4315      	orrs	r5, r2
    2658:	5445      	strb	r5, [r0, r1]
			return true;
		}
	}
	return false;
}
    265a:	4618      	mov	r0, r3
    265c:	bc70      	pop	{r4, r5, r6}
    265e:	4770      	bx	lr
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
	if (state) {
		if ((_state[byteNum] & bitVal) == 0) {
			_state[byteNum] |= bitVal;
    2660:	ea45 0203 	orr.w	r2, r5, r3
			_change[byteNum] |= bitVal;
			return true;
    2664:	2301      	movs	r3, #1
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
	if (state) {
		if ((_state[byteNum] & bitVal) == 0) {
			_state[byteNum] |= bitVal;
    2666:	5462      	strb	r2, [r4, r1]
			_change[byteNum] |= bitVal;
    2668:	6880      	ldr	r0, [r0, #8]
    266a:	5c42      	ldrb	r2, [r0, r1]
    266c:	4315      	orrs	r5, r2
    266e:	5445      	strb	r5, [r0, r1]
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	return false;
}
    2670:	4618      	mov	r0, r3
    2672:	bc70      	pop	{r4, r5, r6}
    2674:	4770      	bx	lr
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
    2676:	4613      	mov	r3, r2
    2678:	e7da      	b.n	2630 <BitMappedSet::setState(unsigned short, bool, bool)+0x24>
    267a:	bf00      	nop

0000267c <BitMappedSet::setProtection(unsigned short, bool)>:
	}
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
    267c:	8983      	ldrh	r3, [r0, #12]
    267e:	428b      	cmp	r3, r1
    2680:	d90e      	bls.n	26a0 <BitMappedSet::setProtection(unsigned short, bool)+0x24>
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
    2682:	2301      	movs	r3, #1
		}
	}
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
    2684:	b410      	push	{r4}
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
    2686:	f001 0407 	and.w	r4, r1, #7
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
    268a:	10c9      	asrs	r1, r1, #3
	byte bitVal = (byte)1 << (n & 7u);
    268c:	40a3      	lsls	r3, r4
	if (protection) _protection[byteNum] |= bitVal;
    268e:	b289      	uxth	r1, r1
    2690:	b93a      	cbnz	r2, 26a2 <BitMappedSet::setProtection(unsigned short, bool)+0x26>
	else _protection[byteNum] &= ~bitVal;
    2692:	6840      	ldr	r0, [r0, #4]
    2694:	5c42      	ldrb	r2, [r0, r1]
    2696:	ea22 0303 	bic.w	r3, r2, r3
    269a:	5443      	strb	r3, [r0, r1]
}
    269c:	f85d 4b04 	ldr.w	r4, [sp], #4
    26a0:	4770      	bx	lr

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
	if (protection) _protection[byteNum] |= bitVal;
    26a2:	6842      	ldr	r2, [r0, #4]
    26a4:	5c50      	ldrb	r0, [r2, r1]
    26a6:	4303      	orrs	r3, r0
    26a8:	5453      	strb	r3, [r2, r1]
    26aa:	e7f7      	b.n	269c <BitMappedSet::setProtection(unsigned short, bool)+0x20>

000026ac <BitMappedSet::getStates4(unsigned short)>:
	_change[byteNum] &= ~bitVal;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    26ac:	7b82      	ldrb	r2, [r0, #14]
	byte bitVal = (byte)1 << (n & 7u);
	_change[byteNum] &= ~bitVal;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    26ae:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return 0;
    26b0:	429a      	cmp	r2, r3
    26b2:	d907      	bls.n	26c4 <BitMappedSet::getStates4(unsigned short)+0x18>
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
    26b4:	6802      	ldr	r2, [r0, #0]
    26b6:	5cd0      	ldrb	r0, [r2, r3]
    26b8:	07cb      	lsls	r3, r1, #31
    26ba:	bf54      	ite	pl
    26bc:	f000 000f 	andpl.w	r0, r0, #15
    26c0:	0900      	lsrmi	r0, r0, #4
    26c2:	4770      	bx	lr
	_change[byteNum] &= ~bitVal;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    26c4:	2000      	movs	r0, #0
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
}
    26c6:	4770      	bx	lr

000026c8 <BitMappedSet::getStates8(unsigned short)>:

byte BitMappedSet::getStates8(uint16_t group) {
	if (group >= _arraySize) return 0;
    26c8:	7b83      	ldrb	r3, [r0, #14]
    26ca:	428b      	cmp	r3, r1
    26cc:	d902      	bls.n	26d4 <BitMappedSet::getStates8(unsigned short)+0xc>
	return _state[group];
    26ce:	6803      	ldr	r3, [r0, #0]
    26d0:	5c58      	ldrb	r0, [r3, r1]
    26d2:	4770      	bx	lr
	if (byteNum >= _arraySize) return 0;
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
}

byte BitMappedSet::getStates8(uint16_t group) {
	if (group >= _arraySize) return 0;
    26d4:	2000      	movs	r0, #0
	return _state[group];
}
    26d6:	4770      	bx	lr

000026d8 <BitMappedSet::getChanges4(unsigned short)>:

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    26d8:	7b82      	ldrb	r2, [r0, #14]
	if (group >= _arraySize) return 0;
	return _state[group];
}

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    26da:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return 0;
    26dc:	429a      	cmp	r2, r3
    26de:	d907      	bls.n	26f0 <BitMappedSet::getChanges4(unsigned short)+0x18>
	return ((group & 1u) == 0) ? _change[byteNum] & 0x0f : (_change[byteNum] & 0xf0) >> 4;
    26e0:	6882      	ldr	r2, [r0, #8]
    26e2:	5cd0      	ldrb	r0, [r2, r3]
    26e4:	07cb      	lsls	r3, r1, #31
    26e6:	bf54      	ite	pl
    26e8:	f000 000f 	andpl.w	r0, r0, #15
    26ec:	0900      	lsrmi	r0, r0, #4
    26ee:	4770      	bx	lr
	return _state[group];
}

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    26f0:	2000      	movs	r0, #0
	return ((group & 1u) == 0) ? _change[byteNum] & 0x0f : (_change[byteNum] & 0xf0) >> 4;
}
    26f2:	4770      	bx	lr

000026f4 <BitMappedSet::clearChanges4(unsigned short)>:
	return _change[group];
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return;
    26f4:	7b82      	ldrb	r2, [r0, #14]
	if (group >= _arraySize) return 0;
	return _change[group];
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    26f6:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return;
    26f8:	429a      	cmp	r2, r3
    26fa:	d907      	bls.n	270c <BitMappedSet::clearChanges4(unsigned short)+0x18>
	if ((group & 1u) == 0) _change[byteNum] &= 0xf0;
    26fc:	f011 0f01 	tst.w	r1, #1
    2700:	6881      	ldr	r1, [r0, #8]
    2702:	5cca      	ldrb	r2, [r1, r3]
    2704:	d003      	beq.n	270e <BitMappedSet::clearChanges4(unsigned short)+0x1a>
	else _change[byteNum] &= 0x0f;
    2706:	f002 020f 	and.w	r2, r2, #15
    270a:	54ca      	strb	r2, [r1, r3]
    270c:	4770      	bx	lr
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return;
	if ((group & 1u) == 0) _change[byteNum] &= 0xf0;
    270e:	f022 020f 	bic.w	r2, r2, #15
    2712:	54ca      	strb	r2, [r1, r3]
    2714:	4770      	bx	lr
    2716:	bf00      	nop

00002718 <CmdExecutor::_getParts(String&)>:
		Serial.println("'!");
	}
	return ok;
}

void CmdExecutor::_getParts(String& cmd) {
    2718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    271c:	688f      	ldr	r7, [r1, #8]
    271e:	b085      	sub	sp, #20
	i0 = 0;
	i1 = 0;
	
	//firstArgIdx = 0;
	len = cmd.length();
	if (len == 0) return;
    2720:	b3ef      	cbz	r7, 279e <CmdExecutor::_getParts(String&)+0x86>
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) < 32) cmd.setCharAt(i0, 32);
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) == ',') cmd.setCharAt(i0, 32);
	for (_partsCount = 0; _partsCount < MAX_PARTS; _partsCount++) {
    2722:	2300      	movs	r3, #0
    2724:	4606      	mov	r6, r0
    2726:	4688      	mov	r8, r1
    2728:	461d      	mov	r5, r3
    272a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    272e:	462c      	mov	r4, r5
    2730:	e002      	b.n	2738 <CmdExecutor::_getParts(String&)+0x20>
		while (cmd.charAt(i0) <= 32 && i0 < len) i0++; // search 1st non-space char
    2732:	2820      	cmp	r0, #32
    2734:	d806      	bhi.n	2744 <CmdExecutor::_getParts(String&)+0x2c>
    2736:	3401      	adds	r4, #1
    2738:	4621      	mov	r1, r4
    273a:	4640      	mov	r0, r8
    273c:	f009 fdfe 	bl	c33c <String::charAt(unsigned int) const>
    2740:	42bc      	cmp	r4, r7
    2742:	dbf6      	blt.n	2732 <CmdExecutor::_getParts(String&)+0x1a>
		if (i0 == len) break;
    2744:	42bc      	cmp	r4, r7
    2746:	d02d      	beq.n	27a4 <CmdExecutor::_getParts(String&)+0x8c>
    2748:	4625      	mov	r5, r4
    274a:	e002      	b.n	2752 <CmdExecutor::_getParts(String&)+0x3a>
		i1 = i0;
		while (cmd.charAt(i1) > 32 && i1 < len) i1++; // search 1st space char
    274c:	2820      	cmp	r0, #32
    274e:	d906      	bls.n	275e <CmdExecutor::_getParts(String&)+0x46>
    2750:	3501      	adds	r5, #1
    2752:	4629      	mov	r1, r5
    2754:	4640      	mov	r0, r8
    2756:	f009 fdf1 	bl	c33c <String::charAt(unsigned int) const>
    275a:	42bd      	cmp	r5, r7
    275c:	dbf6      	blt.n	274c <CmdExecutor::_getParts(String&)+0x34>
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
    275e:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
    2762:	462b      	mov	r3, r5
    2764:	4622      	mov	r2, r4
    2766:	4641      	mov	r1, r8
    2768:	f100 0904 	add.w	r9, r0, #4
    276c:	4668      	mov	r0, sp
    276e:	f009 fe1d 	bl	c3ac <String::substring(unsigned int, unsigned int) const>
    2772:	4668      	mov	r0, sp
    2774:	eb06 1909 	add.w	r9, r6, r9, lsl #4
    2778:	f009 fe44 	bl	c404 <String::toLowerCase()>
    277c:	4601      	mov	r1, r0
    277e:	4648      	mov	r0, r9
    2780:	f009 fd1a 	bl	c1b8 <String::operator=(String const&)>
    2784:	4668      	mov	r0, sp
    2786:	f009 fc39 	bl	bffc <String::~String()>
		_cmdPartIdx[_partsCount] = i0;
    278a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    278e:	18f2      	adds	r2, r6, r3
	//firstArgIdx = 0;
	len = cmd.length();
	if (len == 0) return;
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) < 32) cmd.setCharAt(i0, 32);
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) == ',') cmd.setCharAt(i0, 32);
	for (_partsCount = 0; _partsCount < MAX_PARTS; _partsCount++) {
    2790:	3301      	adds	r3, #1
    2792:	2b03      	cmp	r3, #3
		while (cmd.charAt(i0) <= 32 && i0 < len) i0++; // search 1st non-space char
		if (i0 == len) break;
		i1 = i0;
		while (cmd.charAt(i1) > 32 && i1 < len) i1++; // search 1st space char
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
		_cmdPartIdx[_partsCount] = i0;
    2794:	f882 4080 	strb.w	r4, [r2, #128]	; 0x80
	//firstArgIdx = 0;
	len = cmd.length();
	if (len == 0) return;
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) < 32) cmd.setCharAt(i0, 32);
	//for (i0 = 0; i0 < len; i0++) if (cmd.charAt(i0) == ',') cmd.setCharAt(i0, 32);
	for (_partsCount = 0; _partsCount < MAX_PARTS; _partsCount++) {
    2798:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    279c:	ddc7      	ble.n	272e <CmdExecutor::_getParts(String&)+0x16>
	}
	for (i1 = _partsCount; i1 < MAX_PARTS; i1++) {
		_cmdPartStr[i1] = "";
		_cmdPartIdx[i1] = i0;
	}
}
    279e:	b005      	add	sp, #20
    27a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
		_cmdPartIdx[_partsCount] = i0;
		//if (_partsCount == 1) firstArgIdx = i0;
		i0 = i1;
	}
	for (i1 = _partsCount; i1 < MAX_PARTS; i1++) {
    27a4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    27a8:	2b03      	cmp	r3, #3
    27aa:	dcf8      	bgt.n	279e <CmdExecutor::_getParts(String&)+0x86>
    27ac:	1d1d      	adds	r5, r3, #4
    27ae:	3380      	adds	r3, #128	; 0x80
    27b0:	f106 0784 	add.w	r7, r6, #132	; 0x84
    27b4:	b2e4      	uxtb	r4, r4
    27b6:	eb06 1505 	add.w	r5, r6, r5, lsl #4
    27ba:	441e      	add	r6, r3
		_cmdPartStr[i1] = "";
    27bc:	4628      	mov	r0, r5
    27be:	4906      	ldr	r1, [pc, #24]	; (27d8 <CmdExecutor::_getParts(String&)+0xc0>)
    27c0:	f009 fd0a 	bl	c1d8 <String::operator=(char const*)>
		_cmdPartIdx[i1] = i0;
    27c4:	f806 4b01 	strb.w	r4, [r6], #1
		_cmdPartStr[_partsCount] = cmd.substring(i0, i1).toLowerCase();
		_cmdPartIdx[_partsCount] = i0;
		//if (_partsCount == 1) firstArgIdx = i0;
		i0 = i1;
	}
	for (i1 = _partsCount; i1 < MAX_PARTS; i1++) {
    27c8:	42be      	cmp	r6, r7
    27ca:	f105 0510 	add.w	r5, r5, #16
    27ce:	d1f5      	bne.n	27bc <CmdExecutor::_getParts(String&)+0xa4>
		_cmdPartStr[i1] = "";
		_cmdPartIdx[i1] = i0;
	}
}
    27d0:	b005      	add	sp, #20
    27d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    27d6:	bf00      	nop
    27d8:	200011b0 	.word	0x200011b0

000027dc <CmdExecutor::execCmd(String)>:

#include <MemoryFree.h>
#include "Board_Sys80b.h"
#include "PinGame.h"

bool CmdExecutor::execCmd(String command) {
    27dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27e0:	b08a      	sub	sp, #40	; 0x28
    27e2:	460e      	mov	r6, r1
    27e4:	4604      	mov	r4, r0
	String s;
    27e6:	2100      	movs	r1, #0
    27e8:	a802      	add	r0, sp, #8
    27ea:	f009 fc47 	bl	c07c <String::String(char const*)>
    27ee:	68b3      	ldr	r3, [r6, #8]

	unsigned int len = command.length();
	if (len == 0) return false;
    27f0:	b18b      	cbz	r3, 2816 <CmdExecutor::execCmd(String)+0x3a>
	if (_hw == nullptr || _sys == nullptr) {
    27f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    27f4:	2a00      	cmp	r2, #0
    27f6:	f000 8215 	beq.w	2c24 <CmdExecutor::execCmd(String)+0x448>
    27fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    27fc:	2a00      	cmp	r2, #0
    27fe:	f000 8211 	beq.w	2c24 <CmdExecutor::execCmd(String)+0x448>
		Serial.print(F("execCmd(..): WARNING: neither system or board undefined!"));
		return false;
	}
	if (len > MAX_LENGTH) command = command.substring(0, MAX_LENGTH-1);
    2802:	2b80      	cmp	r3, #128	; 0x80
    2804:	f200 80e2 	bhi.w	29cc <CmdExecutor::execCmd(String)+0x1f0>
	_getParts(command);
    2808:	4631      	mov	r1, r6
    280a:	4620      	mov	r0, r4
    280c:	f7ff ff84 	bl	2718 <CmdExecutor::_getParts(String&)>
	//	Serial.print(_cmdPart[i]);
	//	Serial.println("'");
	//}
	//if (_partsCount > 0) Serial.println("---");

	if (_partsCount == 0) return false;
    2810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    2814:	b93b      	cbnz	r3, 2826 <CmdExecutor::execCmd(String)+0x4a>

	unsigned int len = command.length();
	if (len == 0) return false;
	if (_hw == nullptr || _sys == nullptr) {
		Serial.print(F("execCmd(..): WARNING: neither system or board undefined!"));
		return false;
    2816:	2500      	movs	r5, #0
#include <MemoryFree.h>
#include "Board_Sys80b.h"
#include "PinGame.h"

bool CmdExecutor::execCmd(String command) {
	String s;
    2818:	a802      	add	r0, sp, #8
    281a:	f009 fbef 	bl	bffc <String::~String()>
		Serial.print(F("* Unknown or incorrect command: '"));
		Serial.print(cmd);
		Serial.println("'!");
	}
	return ok;
}
    281e:	4628      	mov	r0, r5
    2820:	b00a      	add	sp, #40	; 0x28
    2822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	//	Serial.println("'");
	//}
	//if (_partsCount > 0) Serial.println("---");

	if (_partsCount == 0) return false;
	String& cmd = _cmdPartStr[0];
    2826:	f104 0840 	add.w	r8, r4, #64	; 0x40
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
    282a:	6821      	ldr	r1, [r4, #0]
    282c:	4640      	mov	r0, r8
    282e:	f009 fd6f 	bl	c310 <String::equals(char const*) const>
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;

	if (cmd == soundCmd) {
    2832:	2800      	cmp	r0, #0
    2834:	f040 80e1 	bne.w	29fa <CmdExecutor::execCmd(String)+0x21e>

	if (_partsCount == 0) return false;
	String& cmd = _cmdPartStr[0];
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;
    2838:	4605      	mov	r5, r0
    283a:	6861      	ldr	r1, [r4, #4]
    283c:	4640      	mov	r0, r8
    283e:	f009 fd67 	bl	c310 <String::equals(char const*) const>
	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
		_sys->setSound(arg1);
		ok = true;
	}
	if (cmd == solenoidCmd) {
    2842:	2800      	cmp	r0, #0
    2844:	f040 820f 	bne.w	2c66 <CmdExecutor::execCmd(String)+0x48a>
    2848:	68a1      	ldr	r1, [r4, #8]
    284a:	4640      	mov	r0, r8
    284c:	f009 fd60 	bl	c310 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt();
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
    2850:	2800      	cmp	r0, #0
    2852:	f040 81ec 	bne.w	2c2e <CmdExecutor::execCmd(String)+0x452>
    2856:	68e1      	ldr	r1, [r4, #12]
    2858:	4640      	mov	r0, r8
    285a:	f009 fd59 	bl	c310 <String::equals(char const*) const>
			arg3 = _cmdPartStr[3].toInt();
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
	}
	if (cmd == lampCmd) {
    285e:	2800      	cmp	r0, #0
    2860:	f040 82cc 	bne.w	2dfc <CmdExecutor::execCmd(String)+0x620>
    2864:	6921      	ldr	r1, [r4, #16]
    2866:	4640      	mov	r0, r8
    2868:	f009 fd52 	bl	c310 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulselightCmd) {
    286c:	2800      	cmp	r0, #0
    286e:	f040 82b6 	bne.w	2dde <CmdExecutor::execCmd(String)+0x602>
    2872:	6961      	ldr	r1, [r4, #20]
    2874:	4640      	mov	r0, r8
    2876:	f009 fd4b 	bl	c310 <String::equals(char const*) const>
		arg1 = _cmdPartStr[1].toInt();
		_sys->pulseLight(arg1);
		ok = true;
	}
	if (cmd == ledgridCmd) {
    287a:	2800      	cmp	r0, #0
    287c:	f040 82a0 	bne.w	2dc0 <CmdExecutor::execCmd(String)+0x5e4>
    2880:	69a1      	ldr	r1, [r4, #24]
    2882:	4640      	mov	r0, r8
    2884:	f009 fd44 	bl	c310 <String::equals(char const*) const>
			arg2 = _cmdPartStr[2].toInt() & 0xff;
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
	}
	if (cmd == ledgridmodeCmd) {
    2888:	2800      	cmp	r0, #0
    288a:	f040 824c 	bne.w	2d26 <CmdExecutor::execCmd(String)+0x54a>
    288e:	69e1      	ldr	r1, [r4, #28]
    2890:	4640      	mov	r0, r8
    2892:	f009 fd3d 	bl	c310 <String::equals(char const*) const>
			_hw->ledGridMode = LG_OFF;
			ok = true;
		}
		ok = true;
	}
	if (cmd == lcdCmd) {
    2896:	2800      	cmp	r0, #0
    2898:	f040 8232 	bne.w	2d00 <CmdExecutor::execCmd(String)+0x524>
    289c:	6a21      	ldr	r1, [r4, #32]
    289e:	4640      	mov	r0, r8
    28a0:	f009 fd36 	bl	c310 <String::equals(char const*) const>
			s = command.substring(_cmdPartIdx[2]);
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
	}
	if (cmd == factorysettingsCmd) {
    28a4:	2800      	cmp	r0, #0
    28a6:	f040 8218 	bne.w	2cda <CmdExecutor::execCmd(String)+0x4fe>
    28aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    28ac:	4640      	mov	r0, r8
    28ae:	f009 fd2f 	bl	c310 <String::equals(char const*) const>
		_hw->restoreFactorySettings(true);
		_hw->lcdclr();
		_hw->lcdprn(0, F("Factory Settings restored."));
		ok = true;
	}
	if (cmd == freememCmd) {
    28b2:	2800      	cmp	r0, #0
    28b4:	f040 81e6 	bne.w	2c84 <CmdExecutor::execCmd(String)+0x4a8>
    28b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    28ba:	4640      	mov	r0, r8
    28bc:	f009 fd28 	bl	c310 <String::equals(char const*) const>
		s = String(freeMemory());
		_hw->lcdprn(0, s);
		_hw->lcdprn(F(" bytes free"));
		ok = true;
	}
	if (cmd == revCmd) {
    28c0:	2800      	cmp	r0, #0
    28c2:	d031      	beq.n	2928 <CmdExecutor::execCmd(String)+0x14c>
		_hw->lcdclr();
    28c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    28c6:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    byte getSettingBit(byte bitPos);
    bool saveSettingByte(byte addr, byte byteMask, byte value);
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    28ca:	b11b      	cbz	r3, 28d4 <CmdExecutor::execCmd(String)+0xf8>
    28cc:	4618      	mov	r0, r3
    28ce:	f007 f995 	bl	9bfc <LiquidCrystalFast::clear()>
    28d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		_hw->lcdprn(0, F("PRB rev."));
    28d4:	2300      	movs	r3, #0
    28d6:	4a4f      	ldr	r2, [pc, #316]	; (2a14 <CmdExecutor::execCmd(String)+0x238>)
    28d8:	4619      	mov	r1, r3
    28da:	f003 f9ab 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    28de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		s = String(_hw->getRevision());
    28e0:	a806      	add	r0, sp, #24
    28e2:	f893 10ec 	ldrb.w	r1, [r3, #236]	; 0xec
    28e6:	f009 fc0d 	bl	c104 <String::String(unsigned char)>
    28ea:	a906      	add	r1, sp, #24
    28ec:	a802      	add	r0, sp, #8
    28ee:	f009 fc6b 	bl	c1c8 <String::operator=(String&&)>
    28f2:	a806      	add	r0, sp, #24
    28f4:	f009 fb82 	bl	bffc <String::~String()>
		_hw->lcdprn(s);
    28f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28fa:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    inline void lcdprn(const char* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(const __FlashStringHelper* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(String& st) { if (_lcd != nullptr) _lcd->print(st); }
    28fe:	b160      	cbz	r0, 291a <CmdExecutor::execCmd(String)+0x13e>
    2900:	a902      	add	r1, sp, #8
    2902:	f009 fa93 	bl	be2c <Print::print(String const&)>
		_hw->lcdprn(F(" by"));
    2906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2908:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    inline void lcdprn(const char* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(const __FlashStringHelper* st) { if (_lcd != nullptr) _lcd->print(st); }
    290c:	b128      	cbz	r0, 291a <CmdExecutor::execCmd(String)+0x13e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    290e:	6803      	ldr	r3, [r0, #0]
    2910:	2203      	movs	r2, #3
    2912:	4941      	ldr	r1, [pc, #260]	; (2a18 <CmdExecutor::execCmd(String)+0x23c>)
    2914:	685b      	ldr	r3, [r3, #4]
    2916:	4798      	blx	r3
    2918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		_hw->lcdprn(1, F("F.Volpi - ITALY"));
		ok = true;
    291a:	2501      	movs	r5, #1
		_hw->lcdclr();
		_hw->lcdprn(0, F("PRB rev."));
		s = String(_hw->getRevision());
		_hw->lcdprn(s);
		_hw->lcdprn(F(" by"));
		_hw->lcdprn(1, F("F.Volpi - ITALY"));
    291c:	4618      	mov	r0, r3
    291e:	4a3f      	ldr	r2, [pc, #252]	; (2a1c <CmdExecutor::execCmd(String)+0x240>)
    2920:	2300      	movs	r3, #0
    2922:	4629      	mov	r1, r5
    2924:	f003 f986 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    292a:	4640      	mov	r0, r8
    292c:	f009 fcf0 	bl	c310 <String::equals(char const*) const>
		ok = true;
	}
	if (cmd == pocCmd) {
    2930:	b368      	cbz	r0, 298e <CmdExecutor::execCmd(String)+0x1b2>
		if (_partsCount > 1 && _cmdPartStr[1] == clrStr) _hw->resetPowerOnCounter();
    2932:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    2936:	2b01      	cmp	r3, #1
    2938:	dd07      	ble.n	294a <CmdExecutor::execCmd(String)+0x16e>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    293a:	4939      	ldr	r1, [pc, #228]	; (2a20 <CmdExecutor::execCmd(String)+0x244>)
    293c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    2940:	f009 fce6 	bl	c310 <String::equals(char const*) const>
    2944:	2800      	cmp	r0, #0
    2946:	f040 82ab 	bne.w	2ea0 <CmdExecutor::execCmd(String)+0x6c4>
		_hw->lcdclr();
    294a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    294c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    byte getSettingBit(byte bitPos);
    bool saveSettingByte(byte addr, byte byteMask, byte value);
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    2950:	b11b      	cbz	r3, 295a <CmdExecutor::execCmd(String)+0x17e>
    2952:	4618      	mov	r0, r3
    2954:	f007 f952 	bl	9bfc <LiquidCrystalFast::clear()>
    2958:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		_hw->lcdprn(0, F("Power-on counter"));
    295a:	2300      	movs	r3, #0
    295c:	4a31      	ldr	r2, [pc, #196]	; (2a24 <CmdExecutor::execCmd(String)+0x248>)
		s = String(_hw->getPowerOnCounter());
		_hw->lcdprn(1, s);
		ok = true;
    295e:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == pocCmd) {
		if (_partsCount > 1 && _cmdPartStr[1] == clrStr) _hw->resetPowerOnCounter();
		_hw->lcdclr();
		_hw->lcdprn(0, F("Power-on counter"));
    2960:	4619      	mov	r1, r3
    2962:	f003 f967 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		s = String(_hw->getPowerOnCounter());
    2968:	220a      	movs	r2, #10
    296a:	a806      	add	r0, sp, #24
    296c:	f8b3 10ee 	ldrh.w	r1, [r3, #238]	; 0xee
    2970:	f009 fbdc 	bl	c12c <String::String(int, unsigned char)>
    2974:	a906      	add	r1, sp, #24
    2976:	a802      	add	r0, sp, #8
    2978:	f009 fc26 	bl	c1c8 <String::operator=(String&&)>
    297c:	a806      	add	r0, sp, #24
    297e:	f009 fb3d 	bl	bffc <String::~String()>
		_hw->lcdprn(1, s);
    2982:	2300      	movs	r3, #0
    2984:	aa02      	add	r2, sp, #8
    2986:	4629      	mov	r1, r5
    2988:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    298a:	f003 f96d 	bl	5c68 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
    298e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2990:	4640      	mov	r0, r8
    2992:	f009 fcbd 	bl	c310 <String::equals(char const*) const>
		ok = true;
	}
	if (cmd == resetCmd) {
    2996:	2800      	cmp	r0, #0
    2998:	d14c      	bne.n	2a34 <CmdExecutor::execCmd(String)+0x258>
    299a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    299c:	4640      	mov	r0, r8
    299e:	f009 fcb7 	bl	c310 <String::equals(char const*) const>
		_sys->reset();
		_hw->lcdclr();
		_hw->lcdprn(0, F("Reset done."));
		ok = true;
	}
	if (cmd == helpCmd) {
    29a2:	2800      	cmp	r0, #0
    29a4:	d15d      	bne.n	2a62 <CmdExecutor::execCmd(String)+0x286>
		Serial.println(F(" : reset system 80/B"));
		Serial.println(helpCmd);
		Serial.println();
		ok = true;
	}
	if (!ok) {
    29a6:	2d00      	cmp	r5, #0
    29a8:	f040 8248 	bne.w	2e3c <CmdExecutor::execCmd(String)+0x660>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    29ac:	2121      	movs	r1, #33	; 0x21
    29ae:	481e      	ldr	r0, [pc, #120]	; (2a28 <CmdExecutor::execCmd(String)+0x24c>)
    29b0:	f009 f8a0 	bl	baf4 <usb_serial_write>
		Serial.print(F("* Unknown or incorrect command: '"));
		Serial.print(cmd);
    29b4:	4641      	mov	r1, r8
    29b6:	481d      	ldr	r0, [pc, #116]	; (2a2c <CmdExecutor::execCmd(String)+0x250>)
    29b8:	f009 fa38 	bl	be2c <Print::print(String const&)>
    29bc:	2102      	movs	r1, #2
    29be:	481c      	ldr	r0, [pc, #112]	; (2a30 <CmdExecutor::execCmd(String)+0x254>)
    29c0:	f009 f898 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    29c4:	4819      	ldr	r0, [pc, #100]	; (2a2c <CmdExecutor::execCmd(String)+0x250>)
    29c6:	f009 fa57 	bl	be78 <Print::println()>
    29ca:	e725      	b.n	2818 <CmdExecutor::execCmd(String)+0x3c>
	if (len == 0) return false;
	if (_hw == nullptr || _sys == nullptr) {
		Serial.print(F("execCmd(..): WARNING: neither system or board undefined!"));
		return false;
	}
	if (len > MAX_LENGTH) command = command.substring(0, MAX_LENGTH-1);
    29cc:	237f      	movs	r3, #127	; 0x7f
    29ce:	2200      	movs	r2, #0
    29d0:	4631      	mov	r1, r6
    29d2:	a806      	add	r0, sp, #24
    29d4:	f009 fcea 	bl	c3ac <String::substring(unsigned int, unsigned int) const>
    29d8:	a906      	add	r1, sp, #24
    29da:	4630      	mov	r0, r6
    29dc:	f009 fbf4 	bl	c1c8 <String::operator=(String&&)>
    29e0:	a806      	add	r0, sp, #24
    29e2:	f009 fb0b 	bl	bffc <String::~String()>
	_getParts(command);
    29e6:	4631      	mov	r1, r6
    29e8:	4620      	mov	r0, r4
    29ea:	f7ff fe95 	bl	2718 <CmdExecutor::_getParts(String&)>
	//	Serial.print(_cmdPart[i]);
	//	Serial.println("'");
	//}
	//if (_partsCount > 0) Serial.println("---");

	if (_partsCount == 0) return false;
    29ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    29f2:	2b00      	cmp	r3, #0
    29f4:	f43f af0f 	beq.w	2816 <CmdExecutor::execCmd(String)+0x3a>
    29f8:	e715      	b.n	2826 <CmdExecutor::execCmd(String)+0x4a>
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;

	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
    29fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
		_sys->setSound(arg1);
		ok = true;
    29fe:	2501      	movs	r5, #1
	const char* clrStr = "clear";
	int arg1, arg2, arg3;
	bool ok = false;

	if (cmd == soundCmd) {
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
    2a00:	f009 fd10 	bl	c424 <String::toInt() const>
    2a04:	f000 071f 	and.w	r7, r0, #31
		_sys->setSound(arg1);
    2a08:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2a0a:	4639      	mov	r1, r7
    2a0c:	f002 fade 	bl	4fcc <Sys80b::setSound(unsigned char)>
    2a10:	e713      	b.n	283a <CmdExecutor::execCmd(String)+0x5e>
    2a12:	bf00      	nop
    2a14:	20000b18 	.word	0x20000b18
    2a18:	20000b24 	.word	0x20000b24
    2a1c:	20000b28 	.word	0x20000b28
    2a20:	20000ad0 	.word	0x20000ad0
    2a24:	20000b38 	.word	0x20000b38
    2a28:	20000cac 	.word	0x20000cac
    2a2c:	20001ea4 	.word	0x20001ea4
    2a30:	20000cd0 	.word	0x20000cd0
		s = String(_hw->getPowerOnCounter());
		_hw->lcdprn(1, s);
		ok = true;
	}
	if (cmd == resetCmd) {
		_sys->reset();
    2a34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2a36:	f001 fe6f 	bl	4718 <PinGame::reset()>
		_hw->lcdclr();
    2a3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2a3c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    2a40:	b11b      	cbz	r3, 2a4a <CmdExecutor::execCmd(String)+0x26e>
    2a42:	4618      	mov	r0, r3
    2a44:	f007 f8da 	bl	9bfc <LiquidCrystalFast::clear()>
    2a48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		_hw->lcdprn(0, F("Reset done."));
    2a4a:	2300      	movs	r3, #0
    2a4c:	4ac6      	ldr	r2, [pc, #792]	; (2d68 <CmdExecutor::execCmd(String)+0x58c>)
    2a4e:	4619      	mov	r1, r3
    2a50:	f003 f8f0 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2a54:	4640      	mov	r0, r8
    2a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a58:	f009 fc5a 	bl	c310 <String::equals(char const*) const>
		ok = true;
	}
	if (cmd == helpCmd) {
    2a5c:	2800      	cmp	r0, #0
    2a5e:	f000 81ed 	beq.w	2e3c <CmdExecutor::execCmd(String)+0x660>
		_hw->lcdclr();
    2a62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2a64:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    2a68:	b11b      	cbz	r3, 2a72 <CmdExecutor::execCmd(String)+0x296>
    2a6a:	4618      	mov	r0, r3
    2a6c:	f007 f8c6 	bl	9bfc <LiquidCrystalFast::clear()>
    2a70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		_hw->lcdprn(0, F("See serial comm"));
    2a72:	2300      	movs	r3, #0
		Serial.print(pocCmd);
		Serial.println(F(" [clear] : [clear and] show power-on counter"));
		Serial.print(resetCmd);
		Serial.println(F(" : reset system 80/B"));
		Serial.println(helpCmd);
		Serial.println();
    2a74:	2501      	movs	r5, #1
		_hw->lcdprn(0, F("Reset done."));
		ok = true;
	}
	if (cmd == helpCmd) {
		_hw->lcdclr();
		_hw->lcdprn(0, F("See serial comm"));
    2a76:	4abd      	ldr	r2, [pc, #756]	; (2d6c <CmdExecutor::execCmd(String)+0x590>)
    2a78:	4619      	mov	r1, r3
    2a7a:	f003 f8db 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
		_hw->lcdprn(1, F("for list of cmd."));
    2a7e:	2300      	movs	r3, #0
    2a80:	4abb      	ldr	r2, [pc, #748]	; (2d70 <CmdExecutor::execCmd(String)+0x594>)
    2a82:	4629      	mov	r1, r5
    2a84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2a86:	f003 f8d5 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2a8a:	2113      	movs	r1, #19
    2a8c:	48b9      	ldr	r0, [pc, #740]	; (2d74 <CmdExecutor::execCmd(String)+0x598>)
    2a8e:	f009 f831 	bl	baf4 <usb_serial_write>
    2a92:	48b9      	ldr	r0, [pc, #740]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2a94:	f009 f9f0 	bl	be78 <Print::println()>
		Serial.println(F("AVAILABLE COMMANDS:"));
		Serial.print(soundCmd);
    2a98:	6826      	ldr	r6, [r4, #0]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2a9a:	4630      	mov	r0, r6
    2a9c:	f00a ff50 	bl	d940 <strlen>
    2aa0:	4601      	mov	r1, r0
    2aa2:	4630      	mov	r0, r6
    2aa4:	f009 f826 	bl	baf4 <usb_serial_write>
    2aa8:	2109      	movs	r1, #9
    2aaa:	48b4      	ldr	r0, [pc, #720]	; (2d7c <CmdExecutor::execCmd(String)+0x5a0>)
    2aac:	f009 f822 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2ab0:	48b1      	ldr	r0, [pc, #708]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2ab2:	f009 f9e1 	bl	be78 <Print::println()>
		Serial.println(F(" <number>"));
		Serial.println(solenoidCmd);
    2ab6:	6866      	ldr	r6, [r4, #4]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2ab8:	4630      	mov	r0, r6
    2aba:	f00a ff41 	bl	d940 <strlen>
    2abe:	4601      	mov	r1, r0
    2ac0:	4630      	mov	r0, r6
    2ac2:	f009 f817 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2ac6:	48ac      	ldr	r0, [pc, #688]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2ac8:	f009 f9d6 	bl	be78 <Print::println()>
    2acc:	2117      	movs	r1, #23
    2ace:	48ac      	ldr	r0, [pc, #688]	; (2d80 <CmdExecutor::execCmd(String)+0x5a4>)
    2ad0:	f009 f810 	bl	baf4 <usb_serial_write>
    2ad4:	48a8      	ldr	r0, [pc, #672]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2ad6:	f009 f9cf 	bl	be78 <Print::println()>
		Serial.println(F(" clear | <number> <0|1>"));
		Serial.print(pulsesolenoidCmd);
    2ada:	68a6      	ldr	r6, [r4, #8]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2adc:	4630      	mov	r0, r6
    2ade:	f00a ff2f 	bl	d940 <strlen>
    2ae2:	4601      	mov	r1, r0
    2ae4:	4630      	mov	r0, r6
    2ae6:	f009 f805 	bl	baf4 <usb_serial_write>
    2aea:	211a      	movs	r1, #26
    2aec:	48a5      	ldr	r0, [pc, #660]	; (2d84 <CmdExecutor::execCmd(String)+0x5a8>)
    2aee:	f009 f801 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2af2:	48a1      	ldr	r0, [pc, #644]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2af4:	f009 f9c0 	bl	be78 <Print::println()>
		Serial.println(F(" <number> [<milliseconds>]"));
		Serial.print(lampCmd);
    2af8:	68e6      	ldr	r6, [r4, #12]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2afa:	4630      	mov	r0, r6
    2afc:	f00a ff20 	bl	d940 <strlen>
    2b00:	4601      	mov	r1, r0
    2b02:	4630      	mov	r0, r6
    2b04:	f008 fff6 	bl	baf4 <usb_serial_write>
    2b08:	2117      	movs	r1, #23
    2b0a:	489d      	ldr	r0, [pc, #628]	; (2d80 <CmdExecutor::execCmd(String)+0x5a4>)
    2b0c:	f008 fff2 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2b10:	4899      	ldr	r0, [pc, #612]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2b12:	f009 f9b1 	bl	be78 <Print::println()>
		Serial.println(F(" clear | <number> <0|1>"));
		Serial.print(pulselightCmd);
    2b16:	6926      	ldr	r6, [r4, #16]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b18:	4630      	mov	r0, r6
    2b1a:	f00a ff11 	bl	d940 <strlen>
    2b1e:	4601      	mov	r1, r0
    2b20:	4630      	mov	r0, r6
    2b22:	f008 ffe7 	bl	baf4 <usb_serial_write>
    2b26:	2109      	movs	r1, #9
    2b28:	4894      	ldr	r0, [pc, #592]	; (2d7c <CmdExecutor::execCmd(String)+0x5a0>)
    2b2a:	f008 ffe3 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2b2e:	4892      	ldr	r0, [pc, #584]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2b30:	f009 f9a2 	bl	be78 <Print::println()>
		Serial.println(F(" <number>"));
		Serial.print(ledgridmodeCmd);
    2b34:	69a6      	ldr	r6, [r4, #24]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b36:	4630      	mov	r0, r6
    2b38:	f00a ff02 	bl	d940 <strlen>
    2b3c:	4601      	mov	r1, r0
    2b3e:	4630      	mov	r0, r6
    2b40:	f008 ffd8 	bl	baf4 <usb_serial_write>
    2b44:	2118      	movs	r1, #24
    2b46:	4890      	ldr	r0, [pc, #576]	; (2d88 <CmdExecutor::execCmd(String)+0x5ac>)
    2b48:	f008 ffd4 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2b4c:	488a      	ldr	r0, [pc, #552]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2b4e:	f009 f993 	bl	be78 <Print::println()>
		Serial.println(F(" lights | switches | off"));
		Serial.print(lcdCmd);
    2b52:	69e6      	ldr	r6, [r4, #28]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b54:	4630      	mov	r0, r6
    2b56:	f00a fef3 	bl	d940 <strlen>
    2b5a:	4601      	mov	r1, r0
    2b5c:	4630      	mov	r0, r6
    2b5e:	f008 ffc9 	bl	baf4 <usb_serial_write>
    2b62:	2115      	movs	r1, #21
    2b64:	4889      	ldr	r0, [pc, #548]	; (2d8c <CmdExecutor::execCmd(String)+0x5b0>)
    2b66:	f008 ffc5 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2b6a:	4883      	ldr	r0, [pc, #524]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2b6c:	f009 f984 	bl	be78 <Print::println()>
		Serial.println(F(" clear | <row> <text>"));
		Serial.print(factorysettingsCmd);
    2b70:	6a26      	ldr	r6, [r4, #32]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b72:	4630      	mov	r0, r6
    2b74:	f00a fee4 	bl	d940 <strlen>
    2b78:	4601      	mov	r1, r0
    2b7a:	4630      	mov	r0, r6
    2b7c:	f008 ffba 	bl	baf4 <usb_serial_write>
    2b80:	2124      	movs	r1, #36	; 0x24
    2b82:	4883      	ldr	r0, [pc, #524]	; (2d90 <CmdExecutor::execCmd(String)+0x5b4>)
    2b84:	f008 ffb6 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2b88:	487b      	ldr	r0, [pc, #492]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2b8a:	f009 f975 	bl	be78 <Print::println()>
		Serial.println(F(" : restore factory settings in NVRAM"));
		Serial.print(freememCmd);
    2b8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b90:	4630      	mov	r0, r6
    2b92:	f00a fed5 	bl	d940 <strlen>
    2b96:	4601      	mov	r1, r0
    2b98:	4630      	mov	r0, r6
    2b9a:	f008 ffab 	bl	baf4 <usb_serial_write>
    2b9e:	211c      	movs	r1, #28
    2ba0:	487c      	ldr	r0, [pc, #496]	; (2d94 <CmdExecutor::execCmd(String)+0x5b8>)
    2ba2:	f008 ffa7 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2ba6:	4874      	ldr	r0, [pc, #464]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2ba8:	f009 f966 	bl	be78 <Print::println()>
		Serial.println(F(" : show Teensy's free memory"));
		Serial.print(revCmd);
    2bac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2bae:	4630      	mov	r0, r6
    2bb0:	f00a fec6 	bl	d940 <strlen>
    2bb4:	4601      	mov	r1, r0
    2bb6:	4630      	mov	r0, r6
    2bb8:	f008 ff9c 	bl	baf4 <usb_serial_write>
    2bbc:	2116      	movs	r1, #22
    2bbe:	4876      	ldr	r0, [pc, #472]	; (2d98 <CmdExecutor::execCmd(String)+0x5bc>)
    2bc0:	f008 ff98 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2bc4:	486c      	ldr	r0, [pc, #432]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2bc6:	f009 f957 	bl	be78 <Print::println()>
		Serial.println(F(" : show board revision"));
		Serial.print(pocCmd);
    2bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2bcc:	4630      	mov	r0, r6
    2bce:	f00a feb7 	bl	d940 <strlen>
    2bd2:	4601      	mov	r1, r0
    2bd4:	4630      	mov	r0, r6
    2bd6:	f008 ff8d 	bl	baf4 <usb_serial_write>
    2bda:	212c      	movs	r1, #44	; 0x2c
    2bdc:	486f      	ldr	r0, [pc, #444]	; (2d9c <CmdExecutor::execCmd(String)+0x5c0>)
    2bde:	f008 ff89 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2be2:	4865      	ldr	r0, [pc, #404]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2be4:	f009 f948 	bl	be78 <Print::println()>
		Serial.println(F(" [clear] : [clear and] show power-on counter"));
		Serial.print(resetCmd);
    2be8:	6b26      	ldr	r6, [r4, #48]	; 0x30
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2bea:	4630      	mov	r0, r6
    2bec:	f00a fea8 	bl	d940 <strlen>
    2bf0:	4601      	mov	r1, r0
    2bf2:	4630      	mov	r0, r6
    2bf4:	f008 ff7e 	bl	baf4 <usb_serial_write>
    2bf8:	2114      	movs	r1, #20
    2bfa:	4869      	ldr	r0, [pc, #420]	; (2da0 <CmdExecutor::execCmd(String)+0x5c4>)
    2bfc:	f008 ff7a 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c00:	485d      	ldr	r0, [pc, #372]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2c02:	f009 f939 	bl	be78 <Print::println()>
		Serial.println(F(" : reset system 80/B"));
		Serial.println(helpCmd);
    2c06:	6b64      	ldr	r4, [r4, #52]	; 0x34
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c08:	4620      	mov	r0, r4
    2c0a:	f00a fe99 	bl	d940 <strlen>
    2c0e:	4601      	mov	r1, r0
    2c10:	4620      	mov	r0, r4
    2c12:	f008 ff6f 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2c16:	4858      	ldr	r0, [pc, #352]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2c18:	f009 f92e 	bl	be78 <Print::println()>
		Serial.println();
    2c1c:	4856      	ldr	r0, [pc, #344]	; (2d78 <CmdExecutor::execCmd(String)+0x59c>)
    2c1e:	f009 f92b 	bl	be78 <Print::println()>
    2c22:	e5f9      	b.n	2818 <CmdExecutor::execCmd(String)+0x3c>
    2c24:	2138      	movs	r1, #56	; 0x38
    2c26:	485f      	ldr	r0, [pc, #380]	; (2da4 <CmdExecutor::execCmd(String)+0x5c8>)
    2c28:	f008 ff64 	bl	baf4 <usb_serial_write>
    2c2c:	e5f3      	b.n	2816 <CmdExecutor::execCmd(String)+0x3a>
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2c2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    2c32:	f009 fbf7 	bl	c424 <String::toInt() const>
    2c36:	4607      	mov	r7, r0
		arg2 = _cmdPartStr[2].toInt();
    2c38:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2c3c:	f009 fbf2 	bl	c424 <String::toInt() const>
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
    2c40:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		}
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
		arg2 = _cmdPartStr[2].toInt();
    2c44:	4681      	mov	r9, r0
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
    2c46:	2b02      	cmp	r3, #2
    2c48:	f000 814c 	beq.w	2ee4 <CmdExecutor::execCmd(String)+0x708>
		else {
			arg3 = _cmdPartStr[3].toInt();
    2c4c:	f104 0070 	add.w	r0, r4, #112	; 0x70
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
    2c50:	2501      	movs	r5, #1
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
		arg2 = _cmdPartStr[2].toInt();
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
		else {
			arg3 = _cmdPartStr[3].toInt();
    2c52:	f009 fbe7 	bl	c424 <String::toInt() const>
			_sys->activateSolenoid(arg1, arg2, arg3);
    2c56:	fa1f f289 	uxth.w	r2, r9
    2c5a:	b283      	uxth	r3, r0
    2c5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2c5e:	b2f9      	uxtb	r1, r7
    2c60:	f002 f986 	bl	4f70 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    2c64:	e5f7      	b.n	2856 <CmdExecutor::execCmd(String)+0x7a>
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
		_sys->setSound(arg1);
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
    2c66:	f104 0550 	add.w	r5, r4, #80	; 0x50
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2c6a:	494f      	ldr	r1, [pc, #316]	; (2da8 <CmdExecutor::execCmd(String)+0x5cc>)
    2c6c:	4628      	mov	r0, r5
    2c6e:	f009 fb4f 	bl	c310 <String::equals(char const*) const>
    2c72:	2800      	cmp	r0, #0
    2c74:	f000 80d0 	beq.w	2e18 <CmdExecutor::execCmd(String)+0x63c>
    2c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		else {
			arg1 = _cmdPartStr[1].toInt();
			arg2 = _cmdPartStr[2].toInt();
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
    2c7a:	2501      	movs	r5, #1
		arg1 = _cmdPartStr[1].toInt() & 0x1f;
		_sys->setSound(arg1);
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
    2c7c:	68d8      	ldr	r0, [r3, #12]
    2c7e:	f001 ff15 	bl	4aac <SolenoidSet::resetAll()>
    2c82:	e5e1      	b.n	2848 <CmdExecutor::execCmd(String)+0x6c>
		_hw->lcdclr();
		_hw->lcdprn(0, F("Factory Settings restored."));
		ok = true;
	}
	if (cmd == freememCmd) {
		_hw->restoreFactorySettings(true);
    2c84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2c86:	2101      	movs	r1, #1
    2c88:	f003 f840 	bl	5d0c <Board_Sys80b::restoreFactorySettings(bool)>
    2c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c8e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    2c92:	b108      	cbz	r0, 2c98 <CmdExecutor::execCmd(String)+0x4bc>
    2c94:	f006 ffb2 	bl	9bfc <LiquidCrystalFast::clear()>
		_hw->lcdclr();
		s = String(freeMemory());
    2c98:	f002 fedc 	bl	5a54 <freeMemory>
    2c9c:	220a      	movs	r2, #10
    2c9e:	4601      	mov	r1, r0
    2ca0:	a806      	add	r0, sp, #24
    2ca2:	f009 fa43 	bl	c12c <String::String(int, unsigned char)>
    2ca6:	a906      	add	r1, sp, #24
    2ca8:	a802      	add	r0, sp, #8
    2caa:	f009 fa8d 	bl	c1c8 <String::operator=(String&&)>
    2cae:	a806      	add	r0, sp, #24
    2cb0:	f009 f9a4 	bl	bffc <String::~String()>
		_hw->lcdprn(0, s);
    2cb4:	2300      	movs	r3, #0
    2cb6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2cb8:	aa02      	add	r2, sp, #8
    2cba:	4619      	mov	r1, r3
    2cbc:	f002 ffd4 	bl	5c68 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
    2cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cc2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    inline void lcdprn(const char* st) { if (_lcd != nullptr) _lcd->print(st); }
    inline void lcdprn(const __FlashStringHelper* st) { if (_lcd != nullptr) _lcd->print(st); }
    2cc6:	2800      	cmp	r0, #0
    2cc8:	f000 80f5 	beq.w	2eb6 <CmdExecutor::execCmd(String)+0x6da>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2ccc:	6803      	ldr	r3, [r0, #0]
    2cce:	220b      	movs	r2, #11
    2cd0:	4936      	ldr	r1, [pc, #216]	; (2dac <CmdExecutor::execCmd(String)+0x5d0>)
		_hw->lcdprn(F(" bytes free"));
		ok = true;
    2cd2:	2501      	movs	r5, #1
    2cd4:	685b      	ldr	r3, [r3, #4]
    2cd6:	4798      	blx	r3
    2cd8:	e5ee      	b.n	28b8 <CmdExecutor::execCmd(String)+0xdc>
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
	}
	if (cmd == factorysettingsCmd) {
		_hw->restoreFactorySettings(true);
    2cda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2cdc:	2101      	movs	r1, #1
    2cde:	f003 f815 	bl	5d0c <Board_Sys80b::restoreFactorySettings(bool)>
		_hw->lcdclr();
    2ce2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2ce4:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    byte getSettingBit(byte bitPos);
    bool saveSettingByte(byte addr, byte byteMask, byte value);
    bool saveSettingBit(byte bitPos, bool state);
    uint16_t incrementPowerOnCounter();
    //bool readSerialInput();
    inline void lcdclr() { if (_lcd != nullptr) _lcd->clear(); }
    2ce8:	b11b      	cbz	r3, 2cf2 <CmdExecutor::execCmd(String)+0x516>
    2cea:	4618      	mov	r0, r3
    2cec:	f006 ff86 	bl	9bfc <LiquidCrystalFast::clear()>
    2cf0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		_hw->lcdprn(0, F("Factory Settings restored."));
    2cf2:	2300      	movs	r3, #0
    2cf4:	4a2e      	ldr	r2, [pc, #184]	; (2db0 <CmdExecutor::execCmd(String)+0x5d4>)
		ok = true;
    2cf6:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == factorysettingsCmd) {
		_hw->restoreFactorySettings(true);
		_hw->lcdclr();
		_hw->lcdprn(0, F("Factory Settings restored."));
    2cf8:	4619      	mov	r1, r3
    2cfa:	f002 ff9b 	bl	5c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>
    2cfe:	e5d4      	b.n	28aa <CmdExecutor::execCmd(String)+0xce>
    2d00:	4929      	ldr	r1, [pc, #164]	; (2da8 <CmdExecutor::execCmd(String)+0x5cc>)
    2d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
    2d06:	f009 fb03 	bl	c310 <String::equals(char const*) const>
			ok = true;
		}
		ok = true;
	}
	if (cmd == lcdCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->lcdclr();
    2d0a:	4681      	mov	r9, r0
    2d0c:	2800      	cmp	r0, #0
    2d0e:	f000 80d4 	beq.w	2eba <CmdExecutor::execCmd(String)+0x6de>
    2d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		else {
			s = command.substring(_cmdPartIdx[2]);
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
    2d14:	2501      	movs	r5, #1
    2d16:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    2d1a:	2800      	cmp	r0, #0
    2d1c:	f43f adbe 	beq.w	289c <CmdExecutor::execCmd(String)+0xc0>
    2d20:	f006 ff6c 	bl	9bfc <LiquidCrystalFast::clear()>
    2d24:	e5ba      	b.n	289c <CmdExecutor::execCmd(String)+0xc0>
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
	}
	if (cmd == ledgridmodeCmd) {
		if (_cmdPartStr[1] == "lamps") {
    2d26:	f104 0550 	add.w	r5, r4, #80	; 0x50
    2d2a:	4922      	ldr	r1, [pc, #136]	; (2db4 <CmdExecutor::execCmd(String)+0x5d8>)
    2d2c:	4628      	mov	r0, r5
    2d2e:	f009 faef 	bl	c310 <String::equals(char const*) const>
    2d32:	b118      	cbz	r0, 2d3c <CmdExecutor::execCmd(String)+0x560>
			_hw->ledGridMode = LG_LAMPS;
    2d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2d36:	2202      	movs	r2, #2
    2d38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    2d3c:	491e      	ldr	r1, [pc, #120]	; (2db8 <CmdExecutor::execCmd(String)+0x5dc>)
    2d3e:	4628      	mov	r0, r5
    2d40:	f009 fae6 	bl	c310 <String::equals(char const*) const>
			ok = true;
		}
		if (_cmdPartStr[1] == "switches") {
    2d44:	b118      	cbz	r0, 2d4e <CmdExecutor::execCmd(String)+0x572>
			_hw->ledGridMode = LG_SWITCHES;
    2d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2d48:	2201      	movs	r2, #1
    2d4a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    2d4e:	4628      	mov	r0, r5
    2d50:	491a      	ldr	r1, [pc, #104]	; (2dbc <CmdExecutor::execCmd(String)+0x5e0>)
    2d52:	f009 fadd 	bl	c310 <String::equals(char const*) const>
			ok = true;
		}
		if (_cmdPartStr[1] == "off") {
    2d56:	2800      	cmp	r0, #0
    2d58:	f000 80a0 	beq.w	2e9c <CmdExecutor::execCmd(String)+0x6c0>
			_hw->ledGridMode = LG_OFF;
    2d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2d5e:	2200      	movs	r2, #0
			ok = true;
		}
		ok = true;
    2d60:	2501      	movs	r5, #1
		if (_cmdPartStr[1] == "switches") {
			_hw->ledGridMode = LG_SWITCHES;
			ok = true;
		}
		if (_cmdPartStr[1] == "off") {
			_hw->ledGridMode = LG_OFF;
    2d62:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    2d66:	e592      	b.n	288e <CmdExecutor::execCmd(String)+0xb2>
    2d68:	20000b4c 	.word	0x20000b4c
    2d6c:	20000b58 	.word	0x20000b58
    2d70:	20000b68 	.word	0x20000b68
    2d74:	20000b7c 	.word	0x20000b7c
    2d78:	20001ea4 	.word	0x20001ea4
    2d7c:	20000b90 	.word	0x20000b90
    2d80:	20000b9c 	.word	0x20000b9c
    2d84:	20000bb4 	.word	0x20000bb4
    2d88:	20000bd0 	.word	0x20000bd0
    2d8c:	20000bec 	.word	0x20000bec
    2d90:	20000c04 	.word	0x20000c04
    2d94:	20000c2c 	.word	0x20000c2c
    2d98:	20000c4c 	.word	0x20000c4c
    2d9c:	20000c64 	.word	0x20000c64
    2da0:	20000c94 	.word	0x20000c94
    2da4:	20000a94 	.word	0x20000a94
    2da8:	20000ad0 	.word	0x20000ad0
    2dac:	20000b0c 	.word	0x20000b0c
    2db0:	20000af0 	.word	0x20000af0
    2db4:	20000ad8 	.word	0x20000ad8
    2db8:	20000ae0 	.word	0x20000ae0
    2dbc:	20000aec 	.word	0x20000aec
		arg1 = _cmdPartStr[1].toInt();
		_sys->pulseLight(arg1);
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
    2dc0:	f104 0550 	add.w	r5, r4, #80	; 0x50
    2dc4:	494b      	ldr	r1, [pc, #300]	; (2ef4 <CmdExecutor::execCmd(String)+0x718>)
    2dc6:	4628      	mov	r0, r5
    2dc8:	f009 faa2 	bl	c310 <String::equals(char const*) const>
    2dcc:	2800      	cmp	r0, #0
    2dce:	d053      	beq.n	2e78 <CmdExecutor::execCmd(String)+0x69c>
    2dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		else {
			arg1 = _cmdPartStr[1].toInt() & 7;
			arg2 = _cmdPartStr[2].toInt() & 0xff;
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
    2dd2:	2501      	movs	r5, #1
		arg1 = _cmdPartStr[1].toInt();
		_sys->pulseLight(arg1);
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
    2dd4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2dd8:	f003 fa5e 	bl	6298 <Led8x8::clear()>
    2ddc:	e550      	b.n	2880 <CmdExecutor::execCmd(String)+0xa4>
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulselightCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2dde:	f104 0050 	add.w	r0, r4, #80	; 0x50
		_sys->pulseLight(arg1);
		ok = true;
    2de2:	2501      	movs	r5, #1
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
	}
	if (cmd == pulselightCmd) {
		arg1 = _cmdPartStr[1].toInt();
    2de4:	f009 fb1e 	bl	c424 <String::toInt() const>
    2de8:	4b43      	ldr	r3, [pc, #268]	; (2ef8 <CmdExecutor::execCmd(String)+0x71c>)
    2dea:	b2c1      	uxtb	r1, r0
    2dec:	4607      	mov	r7, r0
    2dee:	6818      	ldr	r0, [r3, #0]
    2df0:	f000 ffea 	bl	3dc8 <LightSet::getLight(int)>
    2df4:	21fa      	movs	r1, #250	; 0xfa
    2df6:	f000 fd6b 	bl	38d0 <Light::pulse(unsigned short)>
    2dfa:	e53a      	b.n	2872 <CmdExecutor::execCmd(String)+0x96>
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
	}
	if (cmd == lampCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
    2dfc:	f104 0550 	add.w	r5, r4, #80	; 0x50
    2e00:	493c      	ldr	r1, [pc, #240]	; (2ef4 <CmdExecutor::execCmd(String)+0x718>)
    2e02:	4628      	mov	r0, r5
    2e04:	f009 fa84 	bl	c310 <String::equals(char const*) const>
    2e08:	4681      	mov	r9, r0
    2e0a:	b1c8      	cbz	r0, 2e40 <CmdExecutor::execCmd(String)+0x664>
		return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
	}
	inline bool isLightActive(byte n) {
		return LightGroup::activeLightSet->getLight(n)->isActive();
	}
	inline void switchOffAllLights() { LightGroup::activeLightSet->switchOffAllLights(); }
    2e0c:	4b3a      	ldr	r3, [pc, #232]	; (2ef8 <CmdExecutor::execCmd(String)+0x71c>)
		else {
			arg1 = _cmdPartStr[1].toInt();
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
    2e0e:	2501      	movs	r5, #1
    2e10:	6818      	ldr	r0, [r3, #0]
    2e12:	f000 fff1 	bl	3df8 <LightSet::switchOffAllLights()>
    2e16:	e525      	b.n	2864 <CmdExecutor::execCmd(String)+0x88>
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
		else {
			arg1 = _cmdPartStr[1].toInt();
    2e18:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt();
			_sys->setSolenoid(arg1, arg2 > 0);
		}
		ok = true;
    2e1a:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == solenoidCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->solenoids->resetAll();
		else {
			arg1 = _cmdPartStr[1].toInt();
    2e1c:	f009 fb02 	bl	c424 <String::toInt() const>
    2e20:	4607      	mov	r7, r0
			arg2 = _cmdPartStr[2].toInt();
    2e22:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2e26:	f009 fafd 	bl	c424 <String::toInt() const>
			_sys->setSolenoid(arg1, arg2 > 0);
    2e2a:	2800      	cmp	r0, #0
    2e2c:	b2f9      	uxtb	r1, r7
    2e2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2e30:	bfd4      	ite	le
    2e32:	2200      	movle	r2, #0
    2e34:	2201      	movgt	r2, #1
    2e36:	f002 f885 	bl	4f44 <Sys80b::setSolenoid(unsigned char, bool)>
    2e3a:	e505      	b.n	2848 <CmdExecutor::execCmd(String)+0x6c>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2e3c:	2501      	movs	r5, #1
    2e3e:	e4eb      	b.n	2818 <CmdExecutor::execCmd(String)+0x3c>
		ok = true;
	}
	if (cmd == lampCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
		else {
			arg1 = _cmdPartStr[1].toInt();
    2e40:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt();
			_sys->setLight(arg1, arg2 > 0);
		}
		ok = true;
    2e42:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == lampCmd) {
		if (_cmdPartStr[1] == clrStr) _sys->switchOffAllLights();
		else {
			arg1 = _cmdPartStr[1].toInt();
    2e44:	f009 faee 	bl	c424 <String::toInt() const>
    2e48:	4607      	mov	r7, r0
			arg2 = _cmdPartStr[2].toInt();
    2e4a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2e4e:	f009 fae9 	bl	c424 <String::toInt() const>
	inline LightSet* getActiveLightSet() { return LightGroup::activeLightSet; }
	inline void setLight(byte n, lightState s) { 
		LightGroup::activeLightSet->getLight(n)->set(s);
	}
	inline void setLight(byte n, bool s) {
		LightGroup::activeLightSet->getLight(n)->set(s ? ON_L : OFF_L);
    2e52:	4b29      	ldr	r3, [pc, #164]	; (2ef8 <CmdExecutor::execCmd(String)+0x71c>)
    2e54:	4682      	mov	sl, r0
    2e56:	b2f9      	uxtb	r1, r7
    2e58:	6818      	ldr	r0, [r3, #0]
    2e5a:	f000 ffb5 	bl	3dc8 <LightSet::getLight(int)>
    2e5e:	f1ba 0f00 	cmp.w	sl, #0
    2e62:	f8cd 9000 	str.w	r9, [sp]
    2e66:	f04f 0332 	mov.w	r3, #50	; 0x32
    2e6a:	bfd4      	ite	le
    2e6c:	2100      	movle	r1, #0
    2e6e:	2101      	movgt	r1, #1
    2e70:	22c8      	movs	r2, #200	; 0xc8
    2e72:	f000 fcf7 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    2e76:	e4f5      	b.n	2864 <CmdExecutor::execCmd(String)+0x88>
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 7;
    2e78:	4628      	mov	r0, r5
			arg2 = _cmdPartStr[2].toInt() & 0xff;
			_hw->ledGrid->setRow(arg1, arg2);
		}
		ok = true;
    2e7a:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == ledgridCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->ledGrid->clear();
		else {
			arg1 = _cmdPartStr[1].toInt() & 7;
    2e7c:	f009 fad2 	bl	c424 <String::toInt() const>
    2e80:	f000 0707 	and.w	r7, r0, #7
			arg2 = _cmdPartStr[2].toInt() & 0xff;
    2e84:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2e88:	f009 facc 	bl	c424 <String::toInt() const>
			_hw->ledGrid->setRow(arg1, arg2);
    2e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2e8e:	b2c2      	uxtb	r2, r0
    2e90:	4639      	mov	r1, r7
    2e92:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2e96:	f003 f9d5 	bl	6244 <Led8x8::setRow(unsigned char, unsigned char)>
    2e9a:	e4f1      	b.n	2880 <CmdExecutor::execCmd(String)+0xa4>
		}
		if (_cmdPartStr[1] == "off") {
			_hw->ledGridMode = LG_OFF;
			ok = true;
		}
		ok = true;
    2e9c:	2501      	movs	r5, #1
    2e9e:	e4f6      	b.n	288e <CmdExecutor::execCmd(String)+0xb2>
		_hw->lcdprn(F(" by"));
		_hw->lcdprn(1, F("F.Volpi - ITALY"));
		ok = true;
	}
	if (cmd == pocCmd) {
		if (_partsCount > 1 && _cmdPartStr[1] == clrStr) _hw->resetPowerOnCounter();
    2ea0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    inline byte readReturns() { return switchMatrix_IO->mcpReadPB(); }
    inline bool readSlamSw() { return (digitalReadFast(SLAM_PIN) == HIGH); }
    inline uint16_t getPowerOnCounter() { return _poc; }
    inline void resetPowerOnCounter() { NVData->writeWord(0, 0); _poc = 0; }
    2ea2:	2200      	movs	r2, #0
    2ea4:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    2ea8:	4611      	mov	r1, r2
    2eaa:	f004 f86d 	bl	6f88 <NVData_class::writeWord(unsigned short, unsigned short)>
    2eae:	2300      	movs	r3, #0
    2eb0:	f8a5 30ee 	strh.w	r3, [r5, #238]	; 0xee
    2eb4:	e549      	b.n	294a <CmdExecutor::execCmd(String)+0x16e>
		_hw->restoreFactorySettings(true);
		_hw->lcdclr();
		s = String(freeMemory());
		_hw->lcdprn(0, s);
		_hw->lcdprn(F(" bytes free"));
		ok = true;
    2eb6:	2501      	movs	r5, #1
    2eb8:	e4fe      	b.n	28b8 <CmdExecutor::execCmd(String)+0xdc>
		ok = true;
	}
	if (cmd == lcdCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->lcdclr();
		else {
			s = command.substring(_cmdPartIdx[2]);
    2eba:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
    2ebe:	4631      	mov	r1, r6
    2ec0:	a806      	add	r0, sp, #24
			_hw->lcdprn(0, s, arg1);
		}
		ok = true;
    2ec2:	2501      	movs	r5, #1
		ok = true;
	}
	if (cmd == lcdCmd) {
		if (_cmdPartStr[1] == clrStr) _hw->lcdclr();
		else {
			s = command.substring(_cmdPartIdx[2]);
    2ec4:	f009 fa96 	bl	c3f4 <String::substring(unsigned int) const>
    2ec8:	a906      	add	r1, sp, #24
    2eca:	a802      	add	r0, sp, #8
    2ecc:	f009 f97c 	bl	c1c8 <String::operator=(String&&)>
    2ed0:	a806      	add	r0, sp, #24
    2ed2:	f009 f893 	bl	bffc <String::~String()>
			_hw->lcdprn(0, s, arg1);
    2ed6:	4649      	mov	r1, r9
    2ed8:	b2fb      	uxtb	r3, r7
    2eda:	aa02      	add	r2, sp, #8
    2edc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2ede:	f002 fec3 	bl	5c68 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
    2ee2:	e4db      	b.n	289c <CmdExecutor::execCmd(String)+0xc0>
		ok = true;
	}
	if (cmd == pulsesolenoidCmd) {
		arg1 = _cmdPartStr[1].toInt();
		arg2 = _cmdPartStr[2].toInt();
		if (_partsCount == 2) _sys->activateSolenoid(arg1, arg2);
    2ee4:	b282      	uxth	r2, r0
    2ee6:	2300      	movs	r3, #0
    2ee8:	b2f9      	uxtb	r1, r7
    2eea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2eec:	f002 f840 	bl	4f70 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
		else {
			arg3 = _cmdPartStr[3].toInt();
			_sys->activateSolenoid(arg1, arg2, arg3);
		}
		ok = true;
    2ef0:	2501      	movs	r5, #1
    2ef2:	e4b0      	b.n	2856 <CmdExecutor::execCmd(String)+0x7a>
    2ef4:	20000ad0 	.word	0x20000ad0
    2ef8:	20002988 	.word	0x20002988

00002efc <TextDisplay::getVisibleChar(unsigned char, unsigned char)>:
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    2efc:	7e03      	ldrb	r3, [r0, #24]
    2efe:	428b      	cmp	r3, r1
    2f00:	d907      	bls.n	2f12 <TextDisplay::getVisibleChar(unsigned char, unsigned char)+0x16>
    2f02:	7e43      	ldrb	r3, [r0, #25]
    2f04:	4293      	cmp	r3, r2
    2f06:	d904      	bls.n	2f12 <TextDisplay::getVisibleChar(unsigned char, unsigned char)+0x16>
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
	void setChar(byte row, byte col, byte ch);
	inline byte getChar(byte row, byte col) {
		return (validPosition(row, col)) ? (byte)textRow[row][col] : ERR_BYTE;
    2f08:	6843      	ldr	r3, [r0, #4]
    2f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    2f0e:	5c98      	ldrb	r0, [r3, r2]
	}
	inline virtual byte getVisibleChar(byte row, byte col) { return getChar(row, col); }
    2f10:	4770      	bx	lr
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
	void setChar(byte row, byte col, byte ch);
	inline byte getChar(byte row, byte col) {
		return (validPosition(row, col)) ? (byte)textRow[row][col] : ERR_BYTE;
    2f12:	2021      	movs	r0, #33	; 0x21
    2f14:	4770      	bx	lr
    2f16:	bf00      	nop

00002f18 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]>:
	blinkParams[line].enabled = true;
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
    2f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
    2f1c:	6845      	ldr	r5, [r0, #4]
    2f1e:	fa0f f981 	sxth.w	r9, r1
	blinkParams[line].enabled = true;
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
    2f22:	b086      	sub	sp, #24
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
    2f24:	eb05 1549 	add.w	r5, r5, r9, lsl #5
	if (!ln.dfxEnabled) return;
    2f28:	7cab      	ldrb	r3, [r5, #18]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d037      	beq.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
	byte tLen = ln.text.length();
	byte dWidth = display->getWidth();
    2f2e:	f8d0 a000 	ldr.w	sl, [r0]
    2f32:	460e      	mov	r6, r1
	byte i;
	char ch;

	switch (ln.dfxType) {
    2f34:	7c6b      	ldrb	r3, [r5, #17]
    2f36:	4607      	mov	r7, r0
    2f38:	f89a 8019 	ldrb.w	r8, [sl, #25]
// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
	if (!ln.dfxEnabled) return;
	byte tLen = ln.text.length();
    2f3c:	7a2c      	ldrb	r4, [r5, #8]
	byte dWidth = display->getWidth();
	byte i;
	char ch;

	switch (ln.dfxType) {
    2f3e:	2b09      	cmp	r3, #9
    2f40:	f200 8102 	bhi.w	3148 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x230>
    2f44:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f48:	000a006b 	.word	0x000a006b
    2f4c:	009d007d 	.word	0x009d007d
    2f50:	009d00ba 	.word	0x009d00ba
    2f54:	00d300ba 	.word	0x00d300ba
    2f58:	002e00e9 	.word	0x002e00e9
	case NONE:
		display->setText(line, ln.dfxStep, ln.text);
		ln.dfxEnabled = false;
		break;
	case BOUNCE_IN: // endless fx
		display->setText(line, ln.dfxStep, ln.text);
    2f5c:	f895 8018 	ldrb.w	r8, [r5, #24]
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}
	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    2f60:	f04f 0900 	mov.w	r9, #0
    2f64:	4629      	mov	r1, r5
    2f66:	a802      	add	r0, sp, #8
    2f68:	f009 f8ae 	bl	c0c8 <String::String(String const&)>
    2f6c:	9b02      	ldr	r3, [sp, #8]
    2f6e:	4642      	mov	r2, r8
    2f70:	4631      	mov	r1, r6
    2f72:	4650      	mov	r0, sl
    2f74:	f8cd 9000 	str.w	r9, [sp]
    2f78:	f002 fbfe 	bl	5778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    2f7c:	a802      	add	r0, sp, #8
    2f7e:	f009 f83d 	bl	bffc <String::~String()>
		if (ln.dfxAux == 0) { // text direction: left
    2f82:	7eab      	ldrb	r3, [r5, #26]
    2f84:	2b00      	cmp	r3, #0
    2f86:	f000 80ec 	beq.w	3162 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x24a>
			if (--ln.dfxStep == 0) ln.dfxAux = 1;
		}
		else { // text direction: right
			if (++ln.dfxStep == rows - tLen) ln.dfxAux = 0;
    2f8a:	8b2b      	ldrh	r3, [r5, #24]
    2f8c:	3301      	adds	r3, #1
    2f8e:	b29b      	uxth	r3, r3
    2f90:	832b      	strh	r3, [r5, #24]
    2f92:	7f3a      	ldrb	r2, [r7, #28]
    2f94:	1b14      	subs	r4, r2, r4
    2f96:	42a3      	cmp	r3, r4
    2f98:	d101      	bne.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    2f9a:	f885 901a 	strb.w	r9, [r5, #26]
	default:
		ln.dfxType = NONE;
		ln.dfxEnabled = false;
		return;
	}
}
    2f9e:	b006      	add	sp, #24
    2fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ch = ln.text.charAt(ln.dfxStep--);
			display->setChar(line, 0, ch);
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
    2fa4:	f007 fae0 	bl	a568 <micros>
    2fa8:	6839      	ldr	r1, [r7, #0]
    2faa:	b2c0      	uxtb	r0, r0
    2fac:	684b      	ldr	r3, [r1, #4]
    2fae:	fbb0 f2f8 	udiv	r2, r0, r8
    2fb2:	fb08 0412 	mls	r4, r8, r2, r0
    2fb6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    2fba:	7e0b      	ldrb	r3, [r1, #24]
    2fbc:	b2e4      	uxtb	r4, r4
    2fbe:	7e49      	ldrb	r1, [r1, #25]
    2fc0:	e004      	b.n	2fcc <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xb4>
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
				break;
			}
			else if (++i == dWidth) i = 0;
    2fc2:	3401      	adds	r4, #1
    2fc4:	b2e4      	uxtb	r4, r4
    2fc6:	45a0      	cmp	r8, r4
    2fc8:	bf08      	it	eq
    2fca:	2400      	moveq	r4, #0
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    2fcc:	429e      	cmp	r6, r3
    2fce:	d2f8      	bcs.n	2fc2 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xaa>
    2fd0:	428c      	cmp	r4, r1
    2fd2:	d2f6      	bcs.n	2fc2 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xaa>
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
    2fd4:	5d02      	ldrb	r2, [r0, r4]
    2fd6:	2a20      	cmp	r2, #32
    2fd8:	d1f3      	bne.n	2fc2 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0xaa>
				ch = ln.text.charAt(i);
    2fda:	4621      	mov	r1, r4
    2fdc:	4628      	mov	r0, r5
    2fde:	f009 f9ad 	bl	c33c <String::charAt(unsigned int) const>
				display->setChar(line, i, ch);
    2fe2:	4622      	mov	r2, r4
    2fe4:	4603      	mov	r3, r0
    2fe6:	4631      	mov	r1, r6
    2fe8:	6838      	ldr	r0, [r7, #0]
    2fea:	f002 fc6d 	bl	58c8 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
				ln.dfxStep++;
    2fee:	8b2b      	ldrh	r3, [r5, #24]
    2ff0:	3301      	adds	r3, #1
    2ff2:	b29b      	uxth	r3, r3
				break;
			}
			else if (++i == dWidth) i = 0;
		}
		if (ln.dfxStep == dWidth) {
    2ff4:	4543      	cmp	r3, r8
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
    2ff6:	832b      	strh	r3, [r5, #24]
				break;
			}
			else if (++i == dWidth) i = 0;
		}
		if (ln.dfxStep == dWidth) {
    2ff8:	d1d1      	bne.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
	}
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    2ffa:	2400      	movs	r4, #0
			display->setText(line, ln.text);
    2ffc:	683f      	ldr	r7, [r7, #0]
    2ffe:	4629      	mov	r1, r5
    3000:	a802      	add	r0, sp, #8
    3002:	f009 f861 	bl	c0c8 <String::String(String const&)>
    3006:	9b02      	ldr	r3, [sp, #8]
    3008:	4638      	mov	r0, r7
    300a:	4631      	mov	r1, r6
    300c:	4622      	mov	r2, r4
    300e:	9400      	str	r4, [sp, #0]
    3010:	f002 fbb2 	bl	5778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    3014:	a802      	add	r0, sp, #8
    3016:	f008 fff1 	bl	bffc <String::~String()>
			ln.dfxEnabled = false; // effect process completed
    301a:	74ac      	strb	r4, [r5, #18]
    301c:	e7bf      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
	byte i;
	char ch;

	switch (ln.dfxType) {
	case NONE:
		display->setText(line, ln.dfxStep, ln.text);
    301e:	7e2f      	ldrb	r7, [r5, #24]
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}
	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    3020:	2400      	movs	r4, #0
    3022:	4629      	mov	r1, r5
    3024:	a802      	add	r0, sp, #8
    3026:	f009 f84f 	bl	c0c8 <String::String(String const&)>
    302a:	9b02      	ldr	r3, [sp, #8]
    302c:	463a      	mov	r2, r7
    302e:	4631      	mov	r1, r6
    3030:	4650      	mov	r0, sl
    3032:	9400      	str	r4, [sp, #0]
    3034:	f002 fba0 	bl	5778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    3038:	a802      	add	r0, sp, #8
    303a:	f008 ffdf 	bl	bffc <String::~String()>
		ln.dfxEnabled = false;
    303e:	74ac      	strb	r4, [r5, #18]
    3040:	e7ad      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		else { // text direction: right
			if (++ln.dfxStep == rows - tLen) ln.dfxAux = 0;
		}
		break;
	case BOUNCE_OUT: // endless fx
		display->setText(line, ln.text, (short)ln.dfxStep);
    3042:	4629      	mov	r1, r5
    3044:	a802      	add	r0, sp, #8
    3046:	f009 f83f 	bl	c0c8 <String::String(String const&)>
	}
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
    304a:	f04f 0e00 	mov.w	lr, #0
    304e:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
    3052:	4631      	mov	r1, r6
    3054:	9a02      	ldr	r2, [sp, #8]
    3056:	4650      	mov	r0, sl
    3058:	f8cd e000 	str.w	lr, [sp]
    305c:	f002 fbbc 	bl	57d8 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    3060:	a802      	add	r0, sp, #8
    3062:	f008 ffcb 	bl	bffc <String::~String()>
		if (ln.dfxAux == 0) { // text direction: left
    3066:	7eab      	ldrb	r3, [r5, #26]
    3068:	2b00      	cmp	r3, #0
    306a:	d171      	bne.n	3150 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x238>
			if (++ln.dfxStep == tLen - rows) ln.dfxAux = 1;
    306c:	8b2b      	ldrh	r3, [r5, #24]
    306e:	3301      	adds	r3, #1
    3070:	b29b      	uxth	r3, r3
    3072:	832b      	strh	r3, [r5, #24]
    3074:	7f3a      	ldrb	r2, [r7, #28]
    3076:	1aa4      	subs	r4, r4, r2
    3078:	42a3      	cmp	r3, r4
    307a:	d190      	bne.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    307c:	2301      	movs	r3, #1
    307e:	76ab      	strb	r3, [r5, #26]
    3080:	e78d      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
		}
		break;
	case LEFT_SCRL:
	case LEFT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
    3082:	4629      	mov	r1, r5
    3084:	a802      	add	r0, sp, #8
    3086:	f009 f81f 	bl	c0c8 <String::String(String const&)>
    308a:	2701      	movs	r7, #1
    308c:	8b2b      	ldrh	r3, [r5, #24]
    308e:	4631      	mov	r1, r6
    3090:	9a02      	ldr	r2, [sp, #8]
    3092:	4650      	mov	r0, sl
    3094:	eb03 0e07 	add.w	lr, r3, r7
    3098:	b21b      	sxth	r3, r3
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
    309a:	ebc8 0804 	rsb	r8, r8, r4
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
		}
		break;
	case LEFT_SCRL:
	case LEFT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
    309e:	f8a5 e018 	strh.w	lr, [r5, #24]
    30a2:	9700      	str	r7, [sp, #0]
    30a4:	f002 fb98 	bl	57d8 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    30a8:	a802      	add	r0, sp, #8
    30aa:	f008 ffa7 	bl	bffc <String::~String()>
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
    30ae:	8b2b      	ldrh	r3, [r5, #24]
    30b0:	4543      	cmp	r3, r8
    30b2:	f77f af74 	ble.w	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		break;
	case RIGHT_SCRL:
	case RIGHT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
    30b6:	2300      	movs	r3, #0
    30b8:	74ab      	strb	r3, [r5, #18]
    30ba:	e770      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
		break;
	case RIGHT_SCRL:
	case RIGHT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
    30bc:	4629      	mov	r1, r5
    30be:	a802      	add	r0, sp, #8
    30c0:	f009 f802 	bl	c0c8 <String::String(String const&)>
    30c4:	8b2b      	ldrh	r3, [r5, #24]
    30c6:	2701      	movs	r7, #1
    30c8:	9a02      	ldr	r2, [sp, #8]
    30ca:	f103 3eff 	add.w	lr, r3, #4294967295
    30ce:	4631      	mov	r1, r6
    30d0:	b21b      	sxth	r3, r3
    30d2:	4650      	mov	r0, sl
    30d4:	f8a5 e018 	strh.w	lr, [r5, #24]
    30d8:	9700      	str	r7, [sp, #0]
    30da:	f002 fb7d 	bl	57d8 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    30de:	a802      	add	r0, sp, #8
    30e0:	f008 ff8c 	bl	bffc <String::~String()>
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
    30e4:	8b2b      	ldrh	r3, [r5, #24]
    30e6:	42a3      	cmp	r3, r4
    30e8:	f67f af59 	bls.w	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    30ec:	e7e3      	b.n	30b6 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x19e>
		break;
	case LEFT_ROT: // endless fx
		if (ln.dfxStep == tLen-1) { // rightmost text character index on display
    30ee:	3c01      	subs	r4, #1
    30f0:	8b2b      	ldrh	r3, [r5, #24]
    30f2:	42a3      	cmp	r3, r4
    30f4:	d04d      	beq.n	3192 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x27a>
			display->setText(line, ln.text);
			ln.dfxStep = 0;
		}
		else {
			display->scrollLeft(line);
    30f6:	4650      	mov	r0, sl
    30f8:	f002 fbb0 	bl	585c <TextDisplay::scrollLeft(unsigned char)>
			ch = ln.text.charAt(ln.dfxStep++);
    30fc:	8b29      	ldrh	r1, [r5, #24]
    30fe:	4628      	mov	r0, r5
    3100:	1c4b      	adds	r3, r1, #1
    3102:	832b      	strh	r3, [r5, #24]
    3104:	f009 f91a 	bl	c33c <String::charAt(unsigned int) const>
			display->setChar(line, dWidth-1, ch);
    3108:	f108 32ff 	add.w	r2, r8, #4294967295
    310c:	4603      	mov	r3, r0
    310e:	4631      	mov	r1, r6
    3110:	b2d2      	uxtb	r2, r2
    3112:	6838      	ldr	r0, [r7, #0]
    3114:	f002 fbd8 	bl	58c8 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
    3118:	e741      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		}
		break;
	case RIGHT_ROT: // endless fx
		if (ln.dfxStep == 0) { // leftmost text character index on display
    311a:	f8b5 8018 	ldrh.w	r8, [r5, #24]
    311e:	f1b8 0f00 	cmp.w	r8, #0
    3122:	d126      	bne.n	3172 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x25a>
			display->setText(line, ln.text);
    3124:	4629      	mov	r1, r5
    3126:	a802      	add	r0, sp, #8
    3128:	f008 ffce 	bl	c0c8 <String::String(String const&)>
			ln.dfxStep = tLen - 1;
    312c:	3c01      	subs	r4, #1
	}
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    312e:	9b02      	ldr	r3, [sp, #8]
    3130:	4642      	mov	r2, r8
    3132:	4631      	mov	r1, r6
    3134:	4650      	mov	r0, sl
    3136:	f8cd 8000 	str.w	r8, [sp]
    313a:	f002 fb1d 	bl	5778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
			display->setChar(line, dWidth-1, ch);
		}
		break;
	case RIGHT_ROT: // endless fx
		if (ln.dfxStep == 0) { // leftmost text character index on display
			display->setText(line, ln.text);
    313e:	a802      	add	r0, sp, #8
    3140:	f008 ff5c 	bl	bffc <String::~String()>
			ln.dfxStep = tLen - 1;
    3144:	832c      	strh	r4, [r5, #24]
    3146:	e72a      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
			display->setText(line, ln.text);
			ln.dfxEnabled = false; // effect process completed
		}
		break;
	default:
		ln.dfxType = NONE;
    3148:	2300      	movs	r3, #0
    314a:	746b      	strb	r3, [r5, #17]
		ln.dfxEnabled = false;
    314c:	74ab      	strb	r3, [r5, #18]
    314e:	e726      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		display->setText(line, ln.text, (short)ln.dfxStep);
		if (ln.dfxAux == 0) { // text direction: left
			if (++ln.dfxStep == tLen - rows) ln.dfxAux = 1;
		}
		else { // text direction: right
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
    3150:	8b2b      	ldrh	r3, [r5, #24]
    3152:	3b01      	subs	r3, #1
    3154:	b29b      	uxth	r3, r3
    3156:	832b      	strh	r3, [r5, #24]
    3158:	2b00      	cmp	r3, #0
    315a:	f47f af20 	bne.w	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    315e:	76ab      	strb	r3, [r5, #26]
    3160:	e71d      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
		ln.dfxEnabled = false;
		break;
	case BOUNCE_IN: // endless fx
		display->setText(line, ln.dfxStep, ln.text);
		if (ln.dfxAux == 0) { // text direction: left
			if (--ln.dfxStep == 0) ln.dfxAux = 1;
    3162:	8b2b      	ldrh	r3, [r5, #24]
    3164:	3b01      	subs	r3, #1
    3166:	b29b      	uxth	r3, r3
    3168:	832b      	strh	r3, [r5, #24]
    316a:	2b00      	cmp	r3, #0
    316c:	f47f af17 	bne.w	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    3170:	e784      	b.n	307c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x164>
		if (ln.dfxStep == 0) { // leftmost text character index on display
			display->setText(line, ln.text);
			ln.dfxStep = tLen - 1;
		}
		else {
			display->scrollRight(line);
    3172:	4650      	mov	r0, sl
    3174:	f002 fb90 	bl	5898 <TextDisplay::scrollRight(unsigned char)>
			ch = ln.text.charAt(ln.dfxStep--);
    3178:	8b29      	ldrh	r1, [r5, #24]
    317a:	4628      	mov	r0, r5
    317c:	1e4b      	subs	r3, r1, #1
    317e:	832b      	strh	r3, [r5, #24]
    3180:	f009 f8dc 	bl	c33c <String::charAt(unsigned int) const>
			display->setChar(line, 0, ch);
    3184:	4631      	mov	r1, r6
    3186:	4603      	mov	r3, r0
    3188:	2200      	movs	r2, #0
    318a:	6838      	ldr	r0, [r7, #0]
    318c:	f002 fb9c 	bl	58c8 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
    3190:	e705      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>
    3192:	2400      	movs	r4, #0
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
		break;
	case LEFT_ROT: // endless fx
		if (ln.dfxStep == tLen-1) { // rightmost text character index on display
			display->setText(line, ln.text);
    3194:	4629      	mov	r1, r5
    3196:	a802      	add	r0, sp, #8
    3198:	f008 ff96 	bl	c0c8 <String::String(String const&)>
    319c:	9b02      	ldr	r3, [sp, #8]
    319e:	4631      	mov	r1, r6
    31a0:	4650      	mov	r0, sl
    31a2:	4622      	mov	r2, r4
    31a4:	9400      	str	r4, [sp, #0]
    31a6:	f002 fae7 	bl	5778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    31aa:	a802      	add	r0, sp, #8
    31ac:	f008 ff26 	bl	bffc <String::~String()>
			ln.dfxStep = 0;
    31b0:	832c      	strh	r4, [r5, #24]
    31b2:	e6f4      	b.n	2f9e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]+0x86>

000031b4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>:
	inputText = text;
	_enableDisplayEffect(line, effectId);
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
    31b4:	7f03      	ldrb	r3, [r0, #28]
    31b6:	428b      	cmp	r3, r1
    31b8:	d800      	bhi.n	31bc <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x8>
    31ba:	4770      	bx	lr
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
    31bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31c0:	460d      	mov	r5, r1
    31c2:	b08c      	sub	sp, #48	; 0x30
	void rotateUp();
	void rotateDown();
	//void writeChar(byte row, byte col, byte chr);
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
    31c4:	6801      	ldr	r1, [r0, #0]
    31c6:	4604      	mov	r4, r0
    31c8:	4668      	mov	r0, sp
    31ca:	4617      	mov	r7, r2
    31cc:	311c      	adds	r1, #28
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
    31ce:	fa0f f885 	sxth.w	r8, r5
    31d2:	f008 ff79 	bl	c0c8 <String::String(String const&)>
	byte txLen = inputText.length();
	byte columns = display->getWidth();

	//delete &ln.text;
	ln.dfxDelay = STD_DFX_DELAY;
    31d6:	2132      	movs	r1, #50	; 0x32
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
    31d8:	2f01      	cmp	r7, #1
void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
	byte txLen = inputText.length();
    31da:	f894 9014 	ldrb.w	r9, [r4, #20]
	byte columns = display->getWidth();
    31de:	e894 0048 	ldmia.w	r4, {r3, r6}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
    31e2:	eb06 1648 	add.w	r6, r6, r8, lsl #5
    31e6:	f893 a019 	ldrb.w	sl, [r3, #25]
	byte txLen = inputText.length();
	byte columns = display->getWidth();

	//delete &ln.text;
	ln.dfxDelay = STD_DFX_DELAY;
    31ea:	83b1      	strh	r1, [r6, #28]
	ln.dfxType = effectId;
    31ec:	7477      	strb	r7, [r6, #17]

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
    31ee:	d010      	beq.n	3212 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x5e>
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
	}
	if (effectId == BOUNCE_OUT) {
    31f0:	2f02      	cmp	r7, #2
    31f2:	d019      	beq.n	3228 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
		if (txLen < rows) effectId = BOUNCE_IN;
		else if (txLen == rows) effectId = NONE;
	}

	switch (effectId) {
    31f4:	2f09      	cmp	r7, #9
    31f6:	f200 80e2 	bhi.w	33be <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x20a>
    31fa:	e8df f017 	tbh	[pc, r7, lsl #1]
    31fe:	00da      	.short	0x00da
    3200:	00e00019 	.word	0x00e00019
    3204:	00a50087 	.word	0x00a50087
    3208:	002c00c5 	.word	0x002c00c5
    320c:	00d6004e 	.word	0x00d6004e
    3210:	007b      	.short	0x007b
	ln.dfxDelay = STD_DFX_DELAY;
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
		if (txLen > rows) effectId = BOUNCE_OUT;
    3212:	7f22      	ldrb	r2, [r4, #28]
    3214:	4591      	cmp	r9, r2
    3216:	d903      	bls.n	3220 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x6c>
		ln.dfxStep = 0; // first char position on display
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
		//display->setText(line, ln.text);
		break;
	case BOUNCE_OUT:
		ln.dfxStep = 0; // first char of displayed extended line 
    3218:	2300      	movs	r3, #0
    321a:	8333      	strh	r3, [r6, #24]
		ln.dfxAux = 0; // text direction: 0 = left, 1 = right
    321c:	76b3      	strb	r3, [r6, #26]
		//display->setText(line, ln.text);
		break;
    321e:	e00b      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
    3220:	bf14      	ite	ne
    3222:	2701      	movne	r7, #1
    3224:	2700      	moveq	r7, #0
    3226:	e7e5      	b.n	31f4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x40>
    3228:	7f22      	ldrb	r2, [r4, #28]
	}
	if (effectId == BOUNCE_OUT) {
		if (txLen < rows) effectId = BOUNCE_IN;
    322a:	4591      	cmp	r9, r2
    322c:	f080 80bf 	bcs.w	33ae <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1fa>
	switch (effectId) {
	case NONE:
		ln.text = inputText;
		break;
	case BOUNCE_IN:
		ln.dfxStep = 0; // first char position on display
    3230:	2200      	movs	r2, #0
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
    3232:	2301      	movs	r3, #1
	switch (effectId) {
	case NONE:
		ln.text = inputText;
		break;
	case BOUNCE_IN:
		ln.dfxStep = 0; // first char position on display
    3234:	8332      	strh	r2, [r6, #24]
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
    3236:	76b3      	strb	r3, [r6, #26]
	default:
		ln.dfxEnabled = false;
		ln.dfxStep = 0; // chars completed
		return;
	}
	ln.dfxEnabled = true;
    3238:	2301      	movs	r3, #1
    323a:	74b3      	strb	r3, [r6, #18]
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
    323c:	7f23      	ldrb	r3, [r4, #28]
    323e:	42ab      	cmp	r3, r5
    3240:	d903      	bls.n	324a <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x96>
    3242:	4629      	mov	r1, r5
    3244:	4620      	mov	r0, r4
    3246:	f7ff fe67 	bl	2f18 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]>
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
    324a:	4668      	mov	r0, sp
    324c:	f008 fed6 	bl	bffc <String::~String()>
	}
	ln.dfxEnabled = true;
	//display->clearRow(line);
	DFXStep(line);
	//delete &spaces;
}
    3250:	b00c      	add	sp, #48	; 0x30
    3252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3256:	af08      	add	r7, sp, #32
    3258:	f104 010c 	add.w	r1, r4, #12
    325c:	4638      	mov	r0, r7
    325e:	f008 ff33 	bl	c0c8 <String::String(String const&)>
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
		ln.dfxStep = 0; // first char of displayed extended line 
		break;
	case RIGHT_INS:
		ln.text = inputText + display->getRowCopy(line);
    3262:	6823      	ldr	r3, [r4, #0]
	inline void scrollUp() { rotateUp(); clearRow(rows - 1); }
	inline void scrollDown() { rotateDown(); clearRow(0); }
	void rotateUp();
	void rotateDown();
	//void writeChar(byte row, byte col, byte chr);
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
    3264:	7e1a      	ldrb	r2, [r3, #24]
    3266:	42aa      	cmp	r2, r5
    3268:	f200 80cf 	bhi.w	340a <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x256>
    326c:	f10d 0910 	add.w	r9, sp, #16
    3270:	4976      	ldr	r1, [pc, #472]	; (344c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    3272:	4648      	mov	r0, r9
    3274:	f008 ff02 	bl	c07c <String::String(char const*)>
    3278:	4649      	mov	r1, r9
    327a:	4638      	mov	r0, r7
    327c:	f009 f832 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    3280:	4601      	mov	r1, r0
    3282:	4630      	mov	r0, r6
    3284:	f008 ff98 	bl	c1b8 <String::operator=(String const&)>
    3288:	4648      	mov	r0, r9
    328a:	f008 feb7 	bl	bffc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    328e:	4638      	mov	r0, r7
    3290:	f008 feb4 	bl	bffc <String::~String()>
		ln.dfxStep = inputText.length(); // first char of displayed extended line 
    3294:	6963      	ldr	r3, [r4, #20]
    3296:	8333      	strh	r3, [r6, #24]
		break;
    3298:	e7ce      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    329a:	f1b9 0f00 	cmp.w	r9, #0
    329e:	f040 80ce 	bne.w	343e <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x28a>
    32a2:	7e1a      	ldrb	r2, [r3, #24]
    32a4:	42aa      	cmp	r2, r5
    32a6:	f200 80c2 	bhi.w	342e <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x27a>
    32aa:	af08      	add	r7, sp, #32
    32ac:	4967      	ldr	r1, [pc, #412]	; (344c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    32ae:	4638      	mov	r0, r7
    32b0:	f008 fee4 	bl	c07c <String::String(char const*)>
    32b4:	4639      	mov	r1, r7
    32b6:	4630      	mov	r0, r6
    32b8:	f008 ff86 	bl	c1c8 <String::operator=(String&&)>
    32bc:	4638      	mov	r0, r7
    32be:	f008 fe9d 	bl	bffc <String::~String()>
		ln.dfxStep = txLen-1; // rightmost text character index on display
    32c2:	f109 33ff 	add.w	r3, r9, #4294967295
    32c6:	8333      	strh	r3, [r6, #24]
	case RIGHT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    32c8:	f1b9 0f00 	cmp.w	r9, #0
    32cc:	f040 8085 	bne.w	33da <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x226>
    32d0:	6823      	ldr	r3, [r4, #0]
    32d2:	7e1a      	ldrb	r2, [r3, #24]
    32d4:	42aa      	cmp	r2, r5
    32d6:	d879      	bhi.n	33cc <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x218>
    32d8:	495c      	ldr	r1, [pc, #368]	; (344c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    32da:	4638      	mov	r0, r7
    32dc:	f008 fece 	bl	c07c <String::String(char const*)>
    32e0:	4639      	mov	r1, r7
    32e2:	4630      	mov	r0, r6
    32e4:	f008 ff70 	bl	c1c8 <String::operator=(String&&)>
    32e8:	4638      	mov	r0, r7
    32ea:	f008 fe87 	bl	bffc <String::~String()>
		ln.dfxStep = 0; // leftmost text character index on display
    32ee:	2300      	movs	r3, #0
    32f0:	8333      	strh	r3, [r6, #24]
		break;
    32f2:	e7a1      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
	case SPRAY:
		ln.text = inputText; // cuts overwidth lines
    32f4:	f104 010c 	add.w	r1, r4, #12
    32f8:	4630      	mov	r0, r6
    32fa:	f008 ff5d 	bl	c1b8 <String::operator=(String const&)>
		display->clearRow(line);
    32fe:	4629      	mov	r1, r5
    3300:	6820      	ldr	r0, [r4, #0]
    3302:	f002 fa25 	bl	5750 <TextDisplay::clearRow(unsigned char)>
		ln.dfxStep = 0; // completed line characters
    3306:	2300      	movs	r3, #0
    3308:	8333      	strh	r3, [r6, #24]
		break;
    330a:	e795      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
    330c:	7e1a      	ldrb	r2, [r3, #24]
    330e:	42aa      	cmp	r2, r5
    3310:	d869      	bhi.n	33e6 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x232>
    3312:	f10d 0910 	add.w	r9, sp, #16
    3316:	494d      	ldr	r1, [pc, #308]	; (344c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    3318:	4648      	mov	r0, r9
    331a:	f008 feaf 	bl	c07c <String::String(char const*)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    331e:	4649      	mov	r1, r9
    3320:	a808      	add	r0, sp, #32
    3322:	f008 fed1 	bl	c0c8 <String::String(String const&)>
		ln.dfxStep = 0; // first char of displayed extended line 
		ln.dfxAux = 0; // text direction: 0 = left, 1 = right
		//display->setText(line, ln.text);
		break;
	case LEFT_SCRL:
		ln.text = display->getRowCopy(line) + spaces;
    3326:	4669      	mov	r1, sp
    3328:	a808      	add	r0, sp, #32
	case RIGHT_SCRL:
		ln.text = spaces + display->getRowCopy(line);
		ln.dfxStep = columns; // first char of displayed extended line 
		break;
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
    332a:	f008 ffdb 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    332e:	4601      	mov	r1, r0
    3330:	4630      	mov	r0, r6
    3332:	f008 ff41 	bl	c1b8 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    3336:	a808      	add	r0, sp, #32
    3338:	f008 fe60 	bl	bffc <String::~String()>
    333c:	4648      	mov	r0, r9
    333e:	f008 fe5d 	bl	bffc <String::~String()>
		ln.dfxStep = 0; // first char of displayed extended line 
    3342:	2300      	movs	r3, #0
    3344:	8333      	strh	r3, [r6, #24]
		break;
    3346:	e777      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3348:	af08      	add	r7, sp, #32
    334a:	4669      	mov	r1, sp
    334c:	4638      	mov	r0, r7
    334e:	f008 febb 	bl	c0c8 <String::String(String const&)>
	case LEFT_SCRL:
		ln.text = display->getRowCopy(line) + spaces;
		ln.dfxStep = 0; // first char of displayed extended line 
		break;
	case RIGHT_SCRL:
		ln.text = spaces + display->getRowCopy(line);
    3352:	6823      	ldr	r3, [r4, #0]
    3354:	7e1a      	ldrb	r2, [r3, #24]
    3356:	42aa      	cmp	r2, r5
    3358:	d84e      	bhi.n	33f8 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x244>
    335a:	f10d 0910 	add.w	r9, sp, #16
    335e:	493b      	ldr	r1, [pc, #236]	; (344c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    3360:	4648      	mov	r0, r9
    3362:	f008 fe8b 	bl	c07c <String::String(char const*)>
    3366:	4649      	mov	r1, r9
    3368:	4638      	mov	r0, r7
    336a:	f008 ffbb 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    336e:	4601      	mov	r1, r0
    3370:	4630      	mov	r0, r6
    3372:	f008 ff21 	bl	c1b8 <String::operator=(String const&)>
    3376:	4648      	mov	r0, r9
    3378:	f008 fe40 	bl	bffc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    337c:	4638      	mov	r0, r7
    337e:	f008 fe3d 	bl	bffc <String::~String()>
		ln.dfxStep = columns; // first char of displayed extended line 
    3382:	f8a6 a018 	strh.w	sl, [r6, #24]
		break;
    3386:	e757      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
    3388:	7e1a      	ldrb	r2, [r3, #24]
    338a:	42aa      	cmp	r2, r5
    338c:	d846      	bhi.n	341c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x268>
    338e:	f10d 0910 	add.w	r9, sp, #16
    3392:	492e      	ldr	r1, [pc, #184]	; (344c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x298>)
    3394:	4648      	mov	r0, r9
    3396:	f008 fe71 	bl	c07c <String::String(char const*)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    339a:	4649      	mov	r1, r9
    339c:	a808      	add	r0, sp, #32
    339e:	f008 fe93 	bl	c0c8 <String::String(String const&)>
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
    33a2:	a808      	add	r0, sp, #32
    33a4:	f104 010c 	add.w	r1, r4, #12
    33a8:	e7bf      	b.n	332a <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x176>
    33aa:	af08      	add	r7, sp, #32
    33ac:	e78c      	b.n	32c8 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x114>
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
	}
	if (effectId == BOUNCE_OUT) {
		if (txLen < rows) effectId = BOUNCE_IN;
		else if (txLen == rows) effectId = NONE;
    33ae:	f47f af33 	bne.w	3218 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x64>
	}

	switch (effectId) {
	case NONE:
		ln.text = inputText;
    33b2:	f104 010c 	add.w	r1, r4, #12
    33b6:	4630      	mov	r0, r6
    33b8:	f008 fefe 	bl	c1b8 <String::operator=(String const&)>
		break;
    33bc:	e73c      	b.n	3238 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x84>
		ln.text = inputText; // cuts overwidth lines
		display->clearRow(line);
		ln.dfxStep = 0; // completed line characters
		break;
	default:
		ln.dfxEnabled = false;
    33be:	2300      	movs	r3, #0
		ln.dfxStep = 0; // chars completed
		return;
    33c0:	4668      	mov	r0, sp
		ln.text = inputText; // cuts overwidth lines
		display->clearRow(line);
		ln.dfxStep = 0; // completed line characters
		break;
	default:
		ln.dfxEnabled = false;
    33c2:	74b3      	strb	r3, [r6, #18]
		ln.dfxStep = 0; // chars completed
    33c4:	8333      	strh	r3, [r6, #24]
		return;
    33c6:	f008 fe19 	bl	bffc <String::~String()>
    33ca:	e741      	b.n	3250 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x9c>
    33cc:	685b      	ldr	r3, [r3, #4]
    33ce:	4638      	mov	r0, r7
    33d0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    33d4:	f008 fe52 	bl	c07c <String::String(char const*)>
    33d8:	e782      	b.n	32e0 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x12c>
		break;
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
		ln.dfxStep = txLen-1; // rightmost text character index on display
	case RIGHT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    33da:	f104 010c 	add.w	r1, r4, #12
    33de:	4638      	mov	r0, r7
    33e0:	f008 fe72 	bl	c0c8 <String::String(String const&)>
    33e4:	e77c      	b.n	32e0 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x12c>
    33e6:	685b      	ldr	r3, [r3, #4]
    33e8:	f10d 0910 	add.w	r9, sp, #16
    33ec:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    33f0:	4648      	mov	r0, r9
    33f2:	f008 fe43 	bl	c07c <String::String(char const*)>
    33f6:	e792      	b.n	331e <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x16a>
    33f8:	685b      	ldr	r3, [r3, #4]
    33fa:	f10d 0910 	add.w	r9, sp, #16
    33fe:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    3402:	4648      	mov	r0, r9
    3404:	f008 fe3a 	bl	c07c <String::String(char const*)>
    3408:	e7ad      	b.n	3366 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1b2>
    340a:	685b      	ldr	r3, [r3, #4]
    340c:	f10d 0910 	add.w	r9, sp, #16
    3410:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    3414:	4648      	mov	r0, r9
    3416:	f008 fe31 	bl	c07c <String::String(char const*)>
    341a:	e72d      	b.n	3278 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0xc4>
    341c:	685b      	ldr	r3, [r3, #4]
    341e:	f10d 0910 	add.w	r9, sp, #16
    3422:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    3426:	4648      	mov	r0, r9
    3428:	f008 fe28 	bl	c07c <String::String(char const*)>
    342c:	e7b5      	b.n	339a <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1e6>
    342e:	685b      	ldr	r3, [r3, #4]
    3430:	af08      	add	r7, sp, #32
    3432:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
    3436:	4638      	mov	r0, r7
    3438:	f008 fe20 	bl	c07c <String::String(char const*)>
    343c:	e73a      	b.n	32b4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x100>
	case RIGHT_INS:
		ln.text = inputText + display->getRowCopy(line);
		ln.dfxStep = inputText.length(); // first char of displayed extended line 
		break;
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    343e:	af08      	add	r7, sp, #32
    3440:	f104 010c 	add.w	r1, r4, #12
    3444:	4638      	mov	r0, r7
    3446:	f008 fe3f 	bl	c0c8 <String::String(String const&)>
    344a:	e733      	b.n	32b4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x100>
    344c:	200011b0 	.word	0x200011b0

00003450 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>:
		startBlinking(line);
	}
	else stopBlinking(line);
}

void ExtTextDisplay::setDynamicFX(byte line, const char* text, DFX_type effectId) {
    3450:	b570      	push	{r4, r5, r6, lr}
	if (line >= rows) return;
    3452:	7f04      	ldrb	r4, [r0, #28]
    3454:	428c      	cmp	r4, r1
    3456:	d800      	bhi.n	345a <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)+0xa>
    3458:	bd70      	pop	{r4, r5, r6, pc}
    345a:	461e      	mov	r6, r3
    345c:	460d      	mov	r5, r1
    345e:	4604      	mov	r4, r0
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
    3460:	4611      	mov	r1, r2
    3462:	300c      	adds	r0, #12
    3464:	f008 feb8 	bl	c1d8 <String::operator=(char const*)>
	_enableDisplayEffect(line, effectId);
    3468:	4632      	mov	r2, r6
    346a:	4629      	mov	r1, r5
    346c:	4620      	mov	r0, r4
}
    346e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void ExtTextDisplay::setDynamicFX(byte line, const char* text, DFX_type effectId) {
	if (line >= rows) return;
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
    3472:	f7ff be9f 	b.w	31b4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>
    3476:	bf00      	nop

00003478 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)>:
}

 void ExtTextDisplay::setDynamicFX(byte line, String& text, DFX_type effectId) {
    3478:	b570      	push	{r4, r5, r6, lr}
	if (line >= rows) return;
    347a:	7f04      	ldrb	r4, [r0, #28]
    347c:	428c      	cmp	r4, r1
    347e:	d800      	bhi.n	3482 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)+0xa>
    3480:	bd70      	pop	{r4, r5, r6, pc}
    3482:	461e      	mov	r6, r3
    3484:	460d      	mov	r5, r1
    3486:	4604      	mov	r4, r0
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
    3488:	4611      	mov	r1, r2
    348a:	300c      	adds	r0, #12
    348c:	f008 fe94 	bl	c1b8 <String::operator=(String const&)>
	_enableDisplayEffect(line, effectId);
    3490:	4632      	mov	r2, r6
    3492:	4629      	mov	r1, r5
    3494:	4620      	mov	r0, r4
}
    3496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 void ExtTextDisplay::setDynamicFX(byte line, String& text, DFX_type effectId) {
	if (line >= rows) return;
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
    349a:	f7ff be8b 	b.w	31b4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>
    349e:	bf00      	nop

000034a0 <ExtTextDisplay::update(unsigned long)>:
		ln.dfxEnabled = false;
		return;
	}
}

bool ExtTextDisplay::update(uint32_t t) {
    34a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool changed = false;

	// DFX
	DFXTextLine* ln;
	for (byte i = 0; i < rows; i++) {
    34a4:	7f05      	ldrb	r5, [r0, #28]
    34a6:	2d00      	cmp	r5, #0
    34a8:	d057      	beq.n	355a <ExtTextDisplay::update(unsigned long)+0xba>
    34aa:	2400      	movs	r4, #0
    34ac:	4606      	mov	r6, r0
    34ae:	460f      	mov	r7, r1
    34b0:	4620      	mov	r0, r4
		ln = &extLine[i];
    34b2:	6873      	ldr	r3, [r6, #4]
    34b4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
		if (ln->dfxEnabled) {
    34b8:	7c9a      	ldrb	r2, [r3, #18]
    34ba:	b14a      	cbz	r2, 34d0 <ExtTextDisplay::update(unsigned long)+0x30>
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
    34bc:	695a      	ldr	r2, [r3, #20]
    34be:	8b99      	ldrh	r1, [r3, #28]
    34c0:	1aba      	subs	r2, r7, r2
    34c2:	428a      	cmp	r2, r1
    34c4:	d304      	bcc.n	34d0 <ExtTextDisplay::update(unsigned long)+0x30>
				ln->dfxLastStepTime = t;
    34c6:	615f      	str	r7, [r3, #20]
				DFXStep(i);
				changed = true;
    34c8:	2001      	movs	r0, #1
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
    34ca:	7f35      	ldrb	r5, [r6, #28]
    34cc:	42a5      	cmp	r5, r4
    34ce:	d83d      	bhi.n	354c <ExtTextDisplay::update(unsigned long)+0xac>
bool ExtTextDisplay::update(uint32_t t) {
	bool changed = false;

	// DFX
	DFXTextLine* ln;
	for (byte i = 0; i < rows; i++) {
    34d0:	3401      	adds	r4, #1
    34d2:	b2e4      	uxtb	r4, r4
    34d4:	42ac      	cmp	r4, r5
    34d6:	d3ec      	bcc.n	34b2 <ExtTextDisplay::update(unsigned long)+0x12>
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    34d8:	2d00      	cmp	r5, #0
    34da:	d041      	beq.n	3560 <ExtTextDisplay::update(unsigned long)+0xc0>
    34dc:	2300      	movs	r3, #0
    34de:	f8d6 e008 	ldr.w	lr, [r6, #8]
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    34e2:	f04f 0c64 	mov.w	ip, #100	; 0x64
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    34e6:	4698      	mov	r8, r3
    34e8:	e008      	b.n	34fc <ExtTextDisplay::update(unsigned long)+0x5c>
    34ea:	428d      	cmp	r5, r1
    34ec:	d912      	bls.n	3514 <ExtTextDisplay::update(unsigned long)+0x74>
    34ee:	f882 8010 	strb.w	r8, [r2, #16]
    34f2:	7f35      	ldrb	r5, [r6, #28]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    34f4:	3301      	adds	r3, #1
    34f6:	b2db      	uxtb	r3, r3
    34f8:	429d      	cmp	r5, r3
    34fa:	d925      	bls.n	3548 <ExtTextDisplay::update(unsigned long)+0xa8>
		bl = &blinkParams[i];
    34fc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    3500:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
    3504:	7c11      	ldrb	r1, [r2, #16]
    3506:	2900      	cmp	r1, #0
    3508:	d0f4      	beq.n	34f4 <ExtTextDisplay::update(unsigned long)+0x54>
	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
    350a:	6955      	ldr	r5, [r2, #20]
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    350c:	8b51      	ldrh	r1, [r2, #26]
	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
    350e:	1b7d      	subs	r5, r7, r5
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    3510:	2900      	cmp	r1, #0
    3512:	d1ea      	bne.n	34ea <ExtTextDisplay::update(unsigned long)+0x4a>
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
    3514:	8b14      	ldrh	r4, [r2, #24]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    3516:	3301      	adds	r3, #1
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    3518:	f892 a012 	ldrb.w	sl, [r2, #18]
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
    351c:	f892 9011 	ldrb.w	r9, [r2, #17]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    3520:	b2db      	uxtb	r3, r3
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    3522:	fbb5 f1f4 	udiv	r1, r5, r4
    3526:	fb04 5511 	mls	r5, r4, r1, r5
    352a:	fb0c f505 	mul.w	r5, ip, r5
    352e:	fbb5 f4f4 	udiv	r4, r5, r4
    3532:	4554      	cmp	r4, sl
    3534:	bf8c      	ite	hi
    3536:	2400      	movhi	r4, #0
    3538:	2401      	movls	r4, #1
				if (bl->phase != lastState) changed = true;
    353a:	45a1      	cmp	r9, r4
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    353c:	7454      	strb	r4, [r2, #17]
    353e:	7f35      	ldrb	r5, [r6, #28]
				if (bl->phase != lastState) changed = true;
    3540:	bf18      	it	ne
    3542:	2001      	movne	r0, #1
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    3544:	429d      	cmp	r5, r3
    3546:	d8d9      	bhi.n	34fc <ExtTextDisplay::update(unsigned long)+0x5c>
    3548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    354c:	4630      	mov	r0, r6
    354e:	4621      	mov	r1, r4
    3550:	f7ff fce2 	bl	2f18 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.8]>
    3554:	7f35      	ldrb	r5, [r6, #28]
		ln = &extLine[i];
		if (ln->dfxEnabled) {
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
				ln->dfxLastStepTime = t;
				DFXStep(i);
				changed = true;
    3556:	2001      	movs	r0, #1
    3558:	e7ba      	b.n	34d0 <ExtTextDisplay::update(unsigned long)+0x30>
		return;
	}
}

bool ExtTextDisplay::update(uint32_t t) {
	bool changed = false;
    355a:	4628      	mov	r0, r5
			}
		}
	}

	return changed;
}
    355c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003564 <ExtTextDisplay::_clearBlinkMask(unsigned char)>:
	LineBlinkParams& bl = blinkParams[row];
	if (bl.enabled) return ((bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
	return ch;
}

 void ExtTextDisplay::_clearBlinkMask(byte row) {
    3564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 LineBlinkParams& lbp = blinkParams[row];
    3566:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    356a:	6883      	ldr	r3, [r0, #8]
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
    356c:	7f42      	ldrb	r2, [r0, #29]
	if (bl.enabled) return ((bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
	return ch;
}

 void ExtTextDisplay::_clearBlinkMask(byte row) {
	 LineBlinkParams& lbp = blinkParams[row];
    356e:	eb03 0681 	add.w	r6, r3, r1, lsl #2
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
    3572:	b162      	cbz	r2, 358e <ExtTextDisplay::_clearBlinkMask(unsigned char)+0x2a>
    3574:	4605      	mov	r5, r0
    3576:	2400      	movs	r4, #0
    3578:	2720      	movs	r7, #32
    357a:	4621      	mov	r1, r4
    357c:	3401      	adds	r4, #1
    357e:	4630      	mov	r0, r6
    3580:	f008 feec 	bl	c35c <String::operator[](unsigned int)>
    3584:	7007      	strb	r7, [r0, #0]
    3586:	b2e4      	uxtb	r4, r4
    3588:	7f6b      	ldrb	r3, [r5, #29]
    358a:	42a3      	cmp	r3, r4
    358c:	d8f5      	bhi.n	357a <ExtTextDisplay::_clearBlinkMask(unsigned char)+0x16>
    358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003590 <ExtTextDisplay::clearLine(unsigned char)>:
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}

void ExtTextDisplay::clearLine(byte line) {
    3590:	b538      	push	{r3, r4, r5, lr}
    3592:	4604      	mov	r4, r0
	display->clearRow(line);
    3594:	6800      	ldr	r0, [r0, #0]
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}

void ExtTextDisplay::clearLine(byte line) {
    3596:	460d      	mov	r5, r1
	display->clearRow(line);
    3598:	f002 f8da 	bl	5750 <TextDisplay::clearRow(unsigned char)>
	}

	inline void stopDynamicFX(byte line) {
		if (line < rows) extLine[line].dfxEnabled = false;
    359c:	7f23      	ldrb	r3, [r4, #28]
    359e:	6860      	ldr	r0, [r4, #4]
    35a0:	42ab      	cmp	r3, r5
    35a2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    35a6:	d901      	bls.n	35ac <ExtTextDisplay::clearLine(unsigned char)+0x1c>
    35a8:	2300      	movs	r3, #0
    35aa:	7483      	strb	r3, [r0, #18]
	inline void setBlinkMask(byte line, String& mask) {
		blinkParams[line].mask = mask.substring(0, cols);
	}

	inline void stopBlinking(byte line) {
		blinkParams[line].enabled = false;
    35ac:	68a3      	ldr	r3, [r4, #8]
    35ae:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    35b2:	2200      	movs	r2, #0
    35b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	stopDynamicFX(line);
	stopBlinking(line);
	extLine[line].text = "";
    35b8:	4904      	ldr	r1, [pc, #16]	; (35cc <ExtTextDisplay::clearLine(unsigned char)+0x3c>)
    35ba:	741a      	strb	r2, [r3, #16]
    35bc:	f008 fe0c 	bl	c1d8 <String::operator=(char const*)>
	_clearBlinkMask(line);
    35c0:	4629      	mov	r1, r5
    35c2:	4620      	mov	r0, r4
}
    35c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void ExtTextDisplay::clearLine(byte line) {
	display->clearRow(line);
	stopDynamicFX(line);
	stopBlinking(line);
	extLine[line].text = "";
	_clearBlinkMask(line);
    35c8:	f7ff bfcc 	b.w	3564 <ExtTextDisplay::_clearBlinkMask(unsigned char)>
    35cc:	200011b0 	.word	0x200011b0

000035d0 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)>:
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
    35d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35d4:	2500      	movs	r5, #0
    35d6:	4606      	mov	r6, r0
    35d8:	460f      	mov	r7, r1
    35da:	b084      	sub	sp, #16
    35dc:	6005      	str	r5, [r0, #0]
    35de:	4629      	mov	r1, r5
    35e0:	6045      	str	r5, [r0, #4]
    35e2:	300c      	adds	r0, #12
    35e4:	f008 fd4a 	bl	c07c <String::String(char const*)>
    35e8:	7775      	strb	r5, [r6, #29]
    35ea:	7735      	strb	r5, [r6, #28]
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    35ec:	f04f 0820 	mov.w	r8, #32
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
    35f0:	6037      	str	r7, [r6, #0]
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    35f2:	2008      	movs	r0, #8
    35f4:	7e3c      	ldrb	r4, [r7, #24]
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
    35f6:	7734      	strb	r4, [r6, #28]
    35f8:	7e7b      	ldrb	r3, [r7, #25]
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    35fa:	fb08 0004 	mla	r0, r8, r4, r0
#include "ExtTextDisplay.h"

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
    35fe:	7773      	strb	r3, [r6, #29]
	extLine = new DFXTextLine[rows];
    3600:	f008 fbf8 	bl	bdf4 <operator new[](unsigned int)>
    3604:	6044      	str	r4, [r0, #4]
    3606:	f100 0908 	add.w	r9, r0, #8
    360a:	f8c0 8000 	str.w	r8, [r0]
    360e:	b1ac      	cbz	r4, 363c <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x6c>
    3610:	1e67      	subs	r7, r4, #1
		uint32_t startTime = 0; // blink effect start time
		uint16_t period = DEF_BLINK_PERIOD; // blink _period (on+off) [ms]
		uint16_t duration = DEF_BLINK_DURATION; // blink effect duration [ms]: 0 is forever
	};

	struct DFXTextLine {
    3612:	f04f 0801 	mov.w	r8, #1
    3616:	464c      	mov	r4, r9
    3618:	3f01      	subs	r7, #1
    361a:	4620      	mov	r0, r4
    361c:	2100      	movs	r1, #0
    361e:	3420      	adds	r4, #32
    3620:	f008 fd2c 	bl	c07c <String::String(char const*)>
    3624:	1c7a      	adds	r2, r7, #1
    3626:	f804 8c10 	strb.w	r8, [r4, #-16]
    362a:	f804 5c0f 	strb.w	r5, [r4, #-15]
    362e:	f804 5c0e 	strb.w	r5, [r4, #-14]
    3632:	f844 5c0c 	str.w	r5, [r4, #-12]
    3636:	f824 5c08 	strh.w	r5, [r4, #-8]
    363a:	d1ed      	bne.n	3618 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x48>
	blinkParams = new LineBlinkParams[rows];
    363c:	7f34      	ldrb	r4, [r6, #28]
    363e:	271c      	movs	r7, #28
    3640:	2008      	movs	r0, #8

ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    3642:	f8c6 9004 	str.w	r9, [r6, #4]
	blinkParams = new LineBlinkParams[rows];
    3646:	1e65      	subs	r5, r4, #1
    3648:	fb07 0004 	mla	r0, r7, r4, r0
    364c:	f008 fbd2 	bl	bdf4 <operator new[](unsigned int)>
    3650:	6007      	str	r7, [r0, #0]
    3652:	f100 0808 	add.w	r8, r0, #8
    3656:	6044      	str	r4, [r0, #4]
    3658:	b1d4      	cbz	r4, 3690 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0xc0>
    365a:	4644      	mov	r4, r8
	static const byte LINE_MAX_LEN = 100;
	static const uint16_t STD_DFX_DELAY = 50;
	static const int DEF_BLINK_PERIOD = 500; // [ms]
	static const int DEF_BLINK_DURATION = 0; // [ms]

	struct LineBlinkParams {
    365c:	2700      	movs	r7, #0
    365e:	f04f 0a01 	mov.w	sl, #1
    3662:	f04f 0932 	mov.w	r9, #50	; 0x32
    3666:	4620      	mov	r0, r4
    3668:	2100      	movs	r1, #0
    366a:	f008 fd07 	bl	c07c <String::String(char const*)>
    366e:	3d01      	subs	r5, #1
    3670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3674:	7427      	strb	r7, [r4, #16]
    3676:	f884 a011 	strb.w	sl, [r4, #17]
    367a:	341c      	adds	r4, #28
    367c:	f824 3c04 	strh.w	r3, [r4, #-4]
    3680:	1c6b      	adds	r3, r5, #1
    3682:	f804 9c0a 	strb.w	r9, [r4, #-10]
    3686:	f844 7c08 	str.w	r7, [r4, #-8]
    368a:	f824 7c02 	strh.w	r7, [r4, #-2]
    368e:	d1ea      	bne.n	3666 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x96>
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    3690:	7f33      	ldrb	r3, [r6, #28]
ExtTextDisplay::ExtTextDisplay(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
    3692:	f8c6 8008 	str.w	r8, [r6, #8]
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    3696:	b38b      	cbz	r3, 36fc <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x12c>
    3698:	2500      	movs	r5, #0
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
		bl->phase = true;
    369a:	f04f 0901 	mov.w	r9, #1
		bl->dutyCycle = 50;
    369e:	2732      	movs	r7, #50	; 0x32
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
    36a0:	46aa      	mov	sl, r5
    36a2:	e001      	b.n	36a8 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0xd8>
    36a4:	f8d6 8008 	ldr.w	r8, [r6, #8]
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
    36a8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
    36ac:	6831      	ldr	r1, [r6, #0]
    36ae:	4668      	mov	r0, sp
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    36b0:	3501      	adds	r5, #1
		bl = &(blinkParams[i]);
    36b2:	eb08 0483 	add.w	r4, r8, r3, lsl #2
    36b6:	311c      	adds	r1, #28
    36b8:	f008 fd06 	bl	c0c8 <String::String(String const&)>
		bl->mask = display->getSpacesRow();
    36bc:	4669      	mov	r1, sp
    36be:	4620      	mov	r0, r4
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    36c0:	b2ed      	uxtb	r5, r5
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
    36c2:	f008 fd81 	bl	c1c8 <String::operator=(String&&)>
    36c6:	4668      	mov	r0, sp
    36c8:	f008 fc98 	bl	bffc <String::~String()>
		bl->enabled = false;
		bl->phase = true;
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
    36cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
    36d0:	f884 a010 	strb.w	sl, [r4, #16]
		bl->phase = true;
    36d4:	f884 9011 	strb.w	r9, [r4, #17]
		bl->dutyCycle = 50;
    36d8:	74a7      	strb	r7, [r4, #18]
		bl->period = DEF_BLINK_PERIOD;
		bl->duration = DEF_BLINK_DURATION;
    36da:	f8a4 a01a 	strh.w	sl, [r4, #26]
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
		bl->phase = true;
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
    36de:	8323      	strh	r3, [r4, #24]
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    36e0:	7f33      	ldrb	r3, [r6, #28]
    36e2:	42ab      	cmp	r3, r5
    36e4:	d8de      	bhi.n	36a4 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0xd4>
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	}

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    36e6:	b14b      	cbz	r3, 36fc <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x12c>
    36e8:	2400      	movs	r4, #0
    36ea:	4621      	mov	r1, r4
    36ec:	3401      	adds	r4, #1
    36ee:	4630      	mov	r0, r6
    36f0:	f7ff ff4e 	bl	3590 <ExtTextDisplay::clearLine(unsigned char)>
    36f4:	7f33      	ldrb	r3, [r6, #28]
    36f6:	b2e4      	uxtb	r4, r4
    36f8:	42a3      	cmp	r3, r4
    36fa:	d8f6      	bhi.n	36ea <ExtTextDisplay::ExtTextDisplay(TextDisplay&)+0x11a>
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}
    36fc:	4630      	mov	r0, r6
    36fe:	b004      	add	sp, #16
    3700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003704 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)>:
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    3704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3708:	4605      	mov	r5, r0
	char ch;
	byte max = text.length() + pos;
    370a:	6897      	ldr	r7, [r2, #8]
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    370c:	461c      	mov	r4, r3
    370e:	4690      	mov	r8, r2
	char ch;
	byte max = text.length() + pos;
    3710:	441f      	add	r7, r3
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    3712:	460e      	mov	r6, r1
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
    3714:	f7ff ff26 	bl	3564 <ExtTextDisplay::_clearBlinkMask(unsigned char)>
	for (byte i = pos; i < cols && i < max; i++) {
    3718:	7f6b      	ldrb	r3, [r5, #29]
    371a:	42a3      	cmp	r3, r4
    371c:	d91f      	bls.n	375e <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
    371e:	b2ff      	uxtb	r7, r7
    3720:	42bc      	cmp	r4, r7
    3722:	d21c      	bcs.n	375e <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
    3724:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    3728:	46a1      	mov	r9, r4
    372a:	00b6      	lsls	r6, r6, #2
    372c:	e001      	b.n	3732 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x2e>
    372e:	42a7      	cmp	r7, r4
    3730:	d915      	bls.n	375e <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
		ch = text.charAt(i - pos);
    3732:	ebc9 0104 	rsb	r1, r9, r4
    3736:	4640      	mov	r0, r8
    3738:	f008 fe00 	bl	c33c <String::charAt(unsigned int) const>
    373c:	4682      	mov	sl, r0
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    373e:	68a8      	ldr	r0, [r5, #8]
    3740:	4621      	mov	r1, r4

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    3742:	3401      	adds	r4, #1
		ch = text.charAt(i - pos);
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    3744:	4430      	add	r0, r6
    3746:	f008 fe09 	bl	c35c <String::operator[](unsigned int)>
    374a:	f1ba 0f20 	cmp.w	sl, #32

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    374e:	b2e4      	uxtb	r4, r4
		ch = text.charAt(i - pos);
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    3750:	bf14      	ite	ne
    3752:	2278      	movne	r2, #120	; 0x78
    3754:	2220      	moveq	r2, #32
    3756:	7002      	strb	r2, [r0, #0]

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    3758:	7f6b      	ldrb	r3, [r5, #29]
    375a:	42a3      	cmp	r3, r4
    375c:	d8e7      	bhi.n	372e <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x2a>
    375e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3762:	bf00      	nop

00003764 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>:
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    3764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    3768:	7f04      	ldrb	r4, [r0, #28]
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    376a:	b089      	sub	sp, #36	; 0x24
    376c:	4690      	mov	r8, r2
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    376e:	428c      	cmp	r4, r1
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    3770:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    3774:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    3778:	d802      	bhi.n	3780 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x1c>
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    377a:	b009      	add	sp, #36	; 0x24
    377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
    3780:	b20e      	sxth	r6, r1
    3782:	4604      	mov	r4, r0
    3784:	6840      	ldr	r0, [r0, #4]
    3786:	460d      	mov	r5, r1
    3788:	0177      	lsls	r7, r6, #5
    378a:	4641      	mov	r1, r8
    378c:	4699      	mov	r9, r3
    378e:	9203      	str	r2, [sp, #12]
    3790:	4438      	add	r0, r7
	extLine[line].dfxType = NONE;
    3792:	f04f 0b00 	mov.w	fp, #0

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
    3796:	f008 fd0f 	bl	c1b8 <String::operator=(String const&)>
	extLine[line].dfxType = NONE;
    379a:	6863      	ldr	r3, [r4, #4]
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
    379c:	4641      	mov	r1, r8
    379e:	a804      	add	r0, sp, #16
 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    37a0:	441f      	add	r7, r3
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
    37a2:	6823      	ldr	r3, [r4, #0]
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
    37a4:	f8a7 9018 	strh.w	r9, [r7, #24]
 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    37a8:	f887 b011 	strb.w	fp, [r7, #17]
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
    37ac:	f887 b012 	strb.w	fp, [r7, #18]
	display->setText(line, pos, text, clearBefore);
    37b0:	9302      	str	r3, [sp, #8]
    37b2:	f008 fc89 	bl	c0c8 <String::String(String const&)>
	}
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}
	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    37b6:	a802      	add	r0, sp, #8
    37b8:	4629      	mov	r1, r5
    37ba:	c80d      	ldmia	r0, {r0, r2, r3}
    37bc:	9200      	str	r2, [sp, #0]
    37be:	464a      	mov	r2, r9
    37c0:	f001 ffda 	bl	5778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    37c4:	a804      	add	r0, sp, #16
    37c6:	f008 fc19 	bl	bffc <String::~String()>
	if (blinking) {
    37ca:	f1ba 0f00 	cmp.w	sl, #0
    37ce:	d109      	bne.n	37e4 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x80>
	inline void setBlinkMask(byte line, String& mask) {
		blinkParams[line].mask = mask.substring(0, cols);
	}

	inline void stopBlinking(byte line) {
		blinkParams[line].enabled = false;
    37d0:	68a3      	ldr	r3, [r4, #8]
    37d2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    37d6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    37da:	f886 a010 	strb.w	sl, [r6, #16]
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    37de:	b009      	add	sp, #36	; 0x24
    37e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    37e4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
	if (blinking) {
		_setBlinkMask(line, text, pos);
    37e8:	4629      	mov	r1, r5
    37ea:	4620      	mov	r0, r4
    37ec:	464b      	mov	r3, r9
    37ee:	4642      	mov	r2, r8

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    37f0:	00b6      	lsls	r6, r6, #2
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
	if (blinking) {
		_setBlinkMask(line, text, pos);
    37f2:	f7ff ff87 	bl	3704 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)>

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    37f6:	68a3      	ldr	r3, [r4, #8]
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
    37f8:	2532      	movs	r5, #50	; 0x32
    37fa:	4a07      	ldr	r2, [pc, #28]	; (3818 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0xb4>)

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    37fc:	4433      	add	r3, r6
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    37fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3802:	2101      	movs	r1, #1
    3804:	6812      	ldr	r2, [r2, #0]
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
    3806:	749d      	strb	r5, [r3, #18]
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3808:	68a4      	ldr	r4, [r4, #8]

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    380a:	f8a3 b01a 	strh.w	fp, [r3, #26]
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    380e:	4426      	add	r6, r4
//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    3810:	8318      	strh	r0, [r3, #24]
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    3812:	7431      	strb	r1, [r6, #16]
	blinkParams[line].startTime = millis();
    3814:	6172      	str	r2, [r6, #20]
    3816:	e7b0      	b.n	377a <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x16>
    3818:	20002c14 	.word	0x20002c14

0000381c <Light::Light()>:

#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
    381c:	2200      	movs	r2, #0
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
	blinkDutyCycle = 50;
    381e:	2132      	movs	r1, #50	; 0x32
*/

#include "Light.h"

// constructor with default property values
Light::Light() {
    3820:	b410      	push	{r4}
	on = false;
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
    3822:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
	blinkDutyCycle = 50;
    3826:	7101      	strb	r1, [r0, #4]

#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
    3828:	7002      	strb	r2, [r0, #0]
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
    382a:	8044      	strh	r4, [r0, #2]
#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
	impulse = false;
    382c:	7382      	strb	r2, [r0, #14]
	state = OFF_L;
    382e:	7042      	strb	r2, [r0, #1]
	blinkPeriod = 500;
	blinkDutyCycle = 50;
	activePeriod = 0;
    3830:	8182      	strh	r2, [r0, #12]
	//updated = true;
	//_changed = false;
}
    3832:	f85d 4b04 	ldr.w	r4, [sp], #4
    3836:	4770      	bx	lr

00003838 <Light::copy(Light*)>:
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
	on = from->on;
	state = from->state;
    3838:	784a      	ldrb	r2, [r1, #1]
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
    383a:	884b      	ldrh	r3, [r1, #2]
	activationTime = from.activationTime;
	activePeriod = from.activePeriod;
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
    383c:	b470      	push	{r4, r5, r6}
	on = from->on;
    383e:	780c      	ldrb	r4, [r1, #0]
	state = from->state;
    3840:	7042      	strb	r2, [r0, #1]
	activePeriod = from.activePeriod;
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
	on = from->on;
    3842:	7004      	strb	r4, [r0, #0]
	state = from->state;
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
    3844:	8043      	strh	r3, [r0, #2]
	blinkDutyCycle = from->blinkDutyCycle;
    3846:	790b      	ldrb	r3, [r1, #4]
    3848:	7103      	strb	r3, [r0, #4]
	activationTime = from->activationTime;
    384a:	688e      	ldr	r6, [r1, #8]
	activePeriod = from->activePeriod;
    384c:	898d      	ldrh	r5, [r1, #12]
	impulse = from->impulse;
    384e:	7b8c      	ldrb	r4, [r1, #14]
	pulseTime = from->pulseTime;
    3850:	690a      	ldr	r2, [r1, #16]
	pulsePeriod = from->pulsePeriod;
    3852:	8a8b      	ldrh	r3, [r1, #20]
	on = from->on;
	state = from->state;
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
	blinkDutyCycle = from->blinkDutyCycle;
	activationTime = from->activationTime;
    3854:	6086      	str	r6, [r0, #8]
	activePeriod = from->activePeriod;
    3856:	8185      	strh	r5, [r0, #12]
	impulse = from->impulse;
    3858:	7384      	strb	r4, [r0, #14]
	pulseTime = from->pulseTime;
    385a:	6102      	str	r2, [r0, #16]
	pulsePeriod = from->pulsePeriod;
    385c:	8283      	strh	r3, [r0, #20]
}
    385e:	bc70      	pop	{r4, r5, r6}
    3860:	4770      	bx	lr
    3862:	bf00      	nop

00003864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>:
	blinkPeriod = 500; // ON+STATIC_TEXT (ms)
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
    3864:	b410      	push	{r4}
	on = (st != OFF_L);
    3866:	1c0c      	adds	r4, r1, #0
    3868:	bf18      	it	ne
    386a:	2401      	movne	r4, #1
	if (st == ON_L && st != state) {
    386c:	2901      	cmp	r1, #1
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    386e:	7004      	strb	r4, [r0, #0]
	blinkPeriod = 500; // ON+STATIC_TEXT (ms)
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
    3870:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	on = (st != OFF_L);
	if (st == ON_L && st != state) {
    3874:	d00d      	beq.n	3892 <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x2e>
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
    3876:	2902      	cmp	r1, #2
    3878:	d107      	bne.n	388a <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x26>
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    387a:	2a00      	cmp	r2, #0
    387c:	bf08      	it	eq
    387e:	22c8      	moveq	r2, #200	; 0xc8
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
    3880:	2b00      	cmp	r3, #0
    3882:	bf08      	it	eq
    3884:	2332      	moveq	r3, #50	; 0x32
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
    3886:	8042      	strh	r2, [r0, #2]
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
    3888:	7103      	strb	r3, [r0, #4]
	}
	state = st;
    388a:	7041      	strb	r1, [r0, #1]
}
    388c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3890:	4770      	bx	lr
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
	if (st == ON_L && st != state) {
    3892:	7843      	ldrb	r3, [r0, #1]
    3894:	2b01      	cmp	r3, #1
    3896:	d0f8      	beq.n	388a <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x26>
    3898:	4b03      	ldr	r3, [pc, #12]	; (38a8 <Light::set(lightState, unsigned short, unsigned char, unsigned short)+0x44>)
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
    389a:	8184      	strh	r4, [r0, #12]
    389c:	681b      	ldr	r3, [r3, #0]
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
}
    389e:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
	if (st == ON_L && st != state) {
		activationTime = millis();
    38a2:	6083      	str	r3, [r0, #8]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    38a4:	7041      	strb	r1, [r0, #1]
}
    38a6:	4770      	bx	lr
    38a8:	20002c14 	.word	0x20002c14

000038ac <Light::invert()>:
	activePeriod = blinkP * ticks;
}

// inverts light ON/OFF static state
void Light::invert() {
	if (state == ON_L) set(OFF_L);
    38ac:	7843      	ldrb	r3, [r0, #1]
    38ae:	2b01      	cmp	r3, #1
    38b0:	d008      	beq.n	38c4 <Light::invert()+0x18>
	else if (state == OFF_L) set(ON_L);
    38b2:	b933      	cbnz	r3, 38c2 <Light::invert()+0x16>
    38b4:	4905      	ldr	r1, [pc, #20]	; (38cc <Light::invert()+0x20>)
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    38b6:	2201      	movs	r2, #1
	if (st == ON_L && st != state) {
		activationTime = millis();
		activePeriod = activeT; // unlimited state time (default)
    38b8:	8183      	strh	r3, [r0, #12]
    38ba:	680b      	ldr	r3, [r1, #0]
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    38bc:	7002      	strb	r2, [r0, #0]
	if (st == ON_L && st != state) {
		activationTime = millis();
    38be:	6083      	str	r3, [r0, #8]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    38c0:	7042      	strb	r2, [r0, #1]
    38c2:	4770      	bx	lr
	blinkDutyCycle = 50; // 0-100 % ON time
	activePeriod = 0; // (ms)
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC, uint16_t activeT) {
	on = (st != OFF_L);
    38c4:	2300      	movs	r3, #0
    38c6:	7003      	strb	r3, [r0, #0]
	}
	if (st == BLINK_L) {
		blinkPeriod = (blinkP == 0) ? DEF_BLNK_PERIOD : blinkP;
		blinkDutyCycle = (blinkDutyC == 0) ? 50 : blinkDutyC;
	}
	state = st;
    38c8:	7043      	strb	r3, [r0, #1]
    38ca:	4770      	bx	lr
    38cc:	20002c14 	.word	0x20002c14

000038d0 <Light::pulse(unsigned short)>:
void Light::invert() {
	if (state == ON_L) set(OFF_L);
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
    38d0:	b410      	push	{r4}
	pulsePeriod = pulseP;
	impulse = true;
	pulseTime = millis();
	on = !on;
    38d2:	7803      	ldrb	r3, [r0, #0]
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
	impulse = true;
    38d4:	2401      	movs	r4, #1
    38d6:	4a05      	ldr	r2, [pc, #20]	; (38ec <Light::pulse(unsigned short)+0x1c>)
	pulseTime = millis();
	on = !on;
    38d8:	4063      	eors	r3, r4
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
	impulse = true;
    38da:	7384      	strb	r4, [r0, #14]
    38dc:	6812      	ldr	r2, [r2, #0]
	if (state == ON_L) set(OFF_L);
	else if (state == OFF_L) set(ON_L);
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
    38de:	8281      	strh	r1, [r0, #20]
	impulse = true;
	pulseTime = millis();
    38e0:	6102      	str	r2, [r0, #16]
	on = !on;
    38e2:	7003      	strb	r3, [r0, #0]
}
    38e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    38e8:	4770      	bx	lr
    38ea:	bf00      	nop
    38ec:	20002c14 	.word	0x20002c14

000038f0 <Light::update(unsigned long)>:
// return true when light changes its on/off state
bool Light::update(uint32_t ms) {
	bool prevState = on;

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
    38f0:	7843      	ldrb	r3, [r0, #1]
    38f2:	2b02      	cmp	r3, #2
	pulseTime = millis();
	on = !on;
}

// return true when light changes its on/off state
bool Light::update(uint32_t ms) {
    38f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool prevState = on;
    38f6:	7805      	ldrb	r5, [r0, #0]

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
    38f8:	d01c      	beq.n	3934 <Light::update(unsigned long)+0x44>
    38fa:	462b      	mov	r3, r5
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
	}

	// pulse state
	if (impulse) {
    38fc:	7b82      	ldrb	r2, [r0, #14]
    38fe:	b122      	cbz	r2, 390a <Light::update(unsigned long)+0x1a>
		if ((ms - pulseTime) > pulsePeriod) {
    3900:	6902      	ldr	r2, [r0, #16]
    3902:	8a84      	ldrh	r4, [r0, #20]
    3904:	1a8a      	subs	r2, r1, r2
    3906:	42a2      	cmp	r2, r4
    3908:	d80e      	bhi.n	3928 <Light::update(unsigned long)+0x38>
			on = !on;
		}
	}

	// checks light active time
	if (on) {
    390a:	b153      	cbz	r3, 3922 <Light::update(unsigned long)+0x32>
		if (activePeriod > 0 && (ms - activationTime) >= (uint32_t)activePeriod) {
    390c:	8982      	ldrh	r2, [r0, #12]
    390e:	b142      	cbz	r2, 3922 <Light::update(unsigned long)+0x32>
    3910:	6884      	ldr	r4, [r0, #8]
    3912:	1b09      	subs	r1, r1, r4
    3914:	4291      	cmp	r1, r2
    3916:	d304      	bcc.n	3922 <Light::update(unsigned long)+0x32>
			activePeriod = 0; // resets previous active-time setting
    3918:	2200      	movs	r2, #0
    391a:	4613      	mov	r3, r2
    391c:	8182      	strh	r2, [r0, #12]
			state = OFF_L;
    391e:	7042      	strb	r2, [r0, #1]
			on = false;
    3920:	7002      	strb	r2, [r0, #0]
		}
	}

	return (on != prevState);
}
    3922:	ea85 0003 	eor.w	r0, r5, r3
    3926:	bdf0      	pop	{r4, r5, r6, r7, pc}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
			on = !on;
    3928:	f083 0301 	eor.w	r3, r3, #1
	}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
    392c:	2200      	movs	r2, #0
			on = !on;
    392e:	7003      	strb	r3, [r0, #0]
	}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
    3930:	7382      	strb	r2, [r0, #14]
    3932:	e7ea      	b.n	390a <Light::update(unsigned long)+0x1a>

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
		uint32_t t; // blink ON time
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
    3934:	6882      	ldr	r2, [r0, #8]
    3936:	2464      	movs	r4, #100	; 0x64
	bool prevState = on;

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
		uint32_t t; // blink ON time
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
    3938:	8846      	ldrh	r6, [r0, #2]
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
    393a:	1a8a      	subs	r2, r1, r2
    393c:	f890 e004 	ldrb.w	lr, [r0, #4]
    3940:	fbb2 f7f6 	udiv	r7, r2, r6
    3944:	fb06 2217 	mls	r2, r6, r7, r2
    3948:	fb04 f202 	mul.w	r2, r4, r2
    394c:	fbb2 f3f6 	udiv	r3, r2, r6
    3950:	4573      	cmp	r3, lr
    3952:	bf2c      	ite	cs
    3954:	2300      	movcs	r3, #0
    3956:	2301      	movcc	r3, #1
    3958:	7003      	strb	r3, [r0, #0]
    395a:	e7cf      	b.n	38fc <Light::update(unsigned long)+0xc>

0000395c <LightGroup::LightGroup(char const*, long, ...)>:
//	nameStr = "";
//	_tmpLight = new Light();
//	_size = 0;
//}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
    395c:	b40c      	push	{r2, r3}
    395e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3960:	460e      	mov	r6, r1
    3962:	b085      	sub	sp, #20
    3964:	2100      	movs	r1, #0
    3966:	4604      	mov	r4, r0
    3968:	f008 fb88 	bl	c07c <String::String(char const*)>
	_size = 0; 
    396c:	2300      	movs	r3, #0
	_tmpLight = new Light();
    396e:	2018      	movs	r0, #24
//	_tmpLight = new Light();
//	_size = 0;
//}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
    3970:	7523      	strb	r3, [r4, #20]
	_tmpLight = new Light();
    3972:	f008 fa3d 	bl	bdf0 <operator new(unsigned int)>
    3976:	4607      	mov	r7, r0
    3978:	f7ff ff50 	bl	381c <Light::Light()>
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
    397c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
//	_size = 0;
//}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
	_tmpLight = new Light();
    397e:	61a7      	str	r7, [r4, #24]
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
    3980:	1c6b      	adds	r3, r5, #1
    3982:	7d20      	ldrb	r0, [r4, #20]
    3984:	d007      	beq.n	3996 <LightGroup::LightGroup(char const*, long, ...)+0x3a>
    3986:	ab0a      	add	r3, sp, #40	; 0x28
    3988:	f853 2f04 	ldr.w	r2, [r3, #4]!
    398c:	3001      	adds	r0, #1
    398e:	3201      	adds	r2, #1
    3990:	b2c0      	uxtb	r0, r0
    3992:	d1f9      	bne.n	3988 <LightGroup::LightGroup(char const*, long, ...)+0x2c>
    3994:	7520      	strb	r0, [r4, #20]
	lightNum = new byte[_size];
    3996:	f008 fa2d 	bl	bdf4 <operator new[](unsigned int)>
	ip = &lNumber;
	for (byte i = 0; i < _size; i++) lightNum[i] = (byte)*(ip+i);
    399a:	7d23      	ldrb	r3, [r4, #20]
LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
	_tmpLight = new Light();
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
	lightNum = new byte[_size];
    399c:	6120      	str	r0, [r4, #16]
	ip = &lNumber;
	for (byte i = 0; i < _size; i++) lightNum[i] = (byte)*(ip+i);
    399e:	b15b      	cbz	r3, 39b8 <LightGroup::LightGroup(char const*, long, ...)+0x5c>
    39a0:	2300      	movs	r3, #0
    39a2:	e003      	b.n	39ac <LightGroup::LightGroup(char const*, long, ...)+0x50>
    39a4:	aa0a      	add	r2, sp, #40	; 0x28
    39a6:	6920      	ldr	r0, [r4, #16]
    39a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    39ac:	1c59      	adds	r1, r3, #1
    39ae:	54c5      	strb	r5, [r0, r3]
    39b0:	7d22      	ldrb	r2, [r4, #20]
    39b2:	b2cb      	uxtb	r3, r1
    39b4:	429a      	cmp	r2, r3
    39b6:	d8f5      	bhi.n	39a4 <LightGroup::LightGroup(char const*, long, ...)+0x48>
	nameStr = String(setName);
    39b8:	4631      	mov	r1, r6
    39ba:	4668      	mov	r0, sp
    39bc:	f008 fb5e 	bl	c07c <String::String(char const*)>
    39c0:	4669      	mov	r1, sp
    39c2:	4620      	mov	r0, r4
    39c4:	f008 fc00 	bl	c1c8 <String::operator=(String&&)>
    39c8:	4668      	mov	r0, sp
    39ca:	f008 fb17 	bl	bffc <String::~String()>
	//Serial.printf("new light group (size:%i) '", _size);
	//Serial.print(nameStr);
	//Serial.print("':[");
	//for (int i = 0; i < _size; i++) Serial.printf("%i,",lightNum[i]);
	//Serial.println("]");
}
    39ce:	4620      	mov	r0, r4
    39d0:	b005      	add	sp, #20
    39d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    39d6:	b002      	add	sp, #8
    39d8:	4770      	bx	lr
    39da:	bf00      	nop

000039dc <LightGroup::light(unsigned char)>:
	//Serial.println("]");
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
	 if (activeLightSet == nullptr) {
    39dc:	4b0d      	ldr	r3, [pc, #52]	; (3a14 <LightGroup::light(unsigned char)+0x38>)
	//for (int i = 0; i < _size; i++) Serial.printf("%i,", lightNum[i]);
	//Serial.println("]");
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
    39de:	b510      	push	{r4, lr}
	 if (activeLightSet == nullptr) {
    39e0:	681c      	ldr	r4, [r3, #0]
    39e2:	b1a4      	cbz	r4, 3a0e <LightGroup::light(unsigned char)+0x32>
		 Serial.println(F("LightGroup::light: undefined light set"));
		 delay(100);
		 return nullptr;
	 }
	 Light* l = activeLightSet->getLight(lightNum[n]);
    39e4:	6903      	ldr	r3, [r0, #16]
    39e6:	4620      	mov	r0, r4
    39e8:	5c59      	ldrb	r1, [r3, r1]
    39ea:	f000 f9ed 	bl	3dc8 <LightSet::getLight(int)>
	 if (l == nullptr) {
    39ee:	4604      	mov	r4, r0
    39f0:	b108      	cbz	r0, 39f6 <LightGroup::light(unsigned char)+0x1a>
    39f2:	4620      	mov	r0, r4
    39f4:	bd10      	pop	{r4, pc}
    39f6:	211e      	movs	r1, #30
    39f8:	4807      	ldr	r0, [pc, #28]	; (3a18 <LightGroup::light(unsigned char)+0x3c>)
    39fa:	f008 f87b 	bl	baf4 <usb_serial_write>
    39fe:	4807      	ldr	r0, [pc, #28]	; (3a1c <LightGroup::light(unsigned char)+0x40>)
    3a00:	f008 fa3a 	bl	be78 <Print::println()>
		 Serial.println(F("LightGroup::light: null light!"));
		 delay(100);
    3a04:	2064      	movs	r0, #100	; 0x64
    3a06:	f006 fd49 	bl	a49c <delay>
    3a0a:	4620      	mov	r0, r4
    3a0c:	bd10      	pop	{r4, pc}
    3a0e:	2126      	movs	r1, #38	; 0x26
    3a10:	4803      	ldr	r0, [pc, #12]	; (3a20 <LightGroup::light(unsigned char)+0x44>)
    3a12:	e7f2      	b.n	39fa <LightGroup::light(unsigned char)+0x1e>
    3a14:	20002988 	.word	0x20002988
    3a18:	20000d04 	.word	0x20000d04
    3a1c:	20001ea4 	.word	0x20001ea4
    3a20:	20000cdc 	.word	0x20000cdc

00003a24 <LightGroup::set(unsigned char, lightState)>:
	 }
	 return l;
}

void LightGroup::set(byte n, lightState st) {
	if (activeLightSet == nullptr) {
    3a24:	4b11      	ldr	r3, [pc, #68]	; (3a6c <LightGroup::set(unsigned char, lightState)+0x48>)
    3a26:	681b      	ldr	r3, [r3, #0]
		 delay(100);
	 }
	 return l;
}

void LightGroup::set(byte n, lightState st) {
    3a28:	b570      	push	{r4, r5, r6, lr}
    3a2a:	b082      	sub	sp, #8
	if (activeLightSet == nullptr) {
    3a2c:	b1db      	cbz	r3, 3a66 <LightGroup::set(unsigned char, lightState)+0x42>
		Serial.println(F("LightGroup::set: undefined light set!"));
		delay(100);
		return;
	}
	if (n >= _size) {
    3a2e:	7d03      	ldrb	r3, [r0, #20]
    3a30:	428b      	cmp	r3, r1
    3a32:	d90b      	bls.n	3a4c <LightGroup::set(unsigned char, lightState)+0x28>
    3a34:	4616      	mov	r6, r2
		Serial.println(F("LightGroup::set: illegal light number"));
		delay(100);
		return;
	}
	light(n)->set(st);
    3a36:	f7ff ffd1 	bl	39dc <LightGroup::light(unsigned char)>
    3a3a:	2200      	movs	r2, #0
    3a3c:	2332      	movs	r3, #50	; 0x32
    3a3e:	4631      	mov	r1, r6
    3a40:	9200      	str	r2, [sp, #0]
    3a42:	22c8      	movs	r2, #200	; 0xc8
    3a44:	f7ff ff0e 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
}
    3a48:	b002      	add	sp, #8
    3a4a:	bd70      	pop	{r4, r5, r6, pc}
    3a4c:	2125      	movs	r1, #37	; 0x25
    3a4e:	4808      	ldr	r0, [pc, #32]	; (3a70 <LightGroup::set(unsigned char, lightState)+0x4c>)
    3a50:	f008 f850 	bl	baf4 <usb_serial_write>
    3a54:	4807      	ldr	r0, [pc, #28]	; (3a74 <LightGroup::set(unsigned char, lightState)+0x50>)
    3a56:	f008 fa0f 	bl	be78 <Print::println()>
		delay(100);
		return;
	}
	if (n >= _size) {
		Serial.println(F("LightGroup::set: illegal light number"));
		delay(100);
    3a5a:	2064      	movs	r0, #100	; 0x64
		return;
	}
	light(n)->set(st);
}
    3a5c:	b002      	add	sp, #8
    3a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay(100);
		return;
	}
	if (n >= _size) {
		Serial.println(F("LightGroup::set: illegal light number"));
		delay(100);
    3a62:	f006 bd1b 	b.w	a49c <delay>
    3a66:	2125      	movs	r1, #37	; 0x25
    3a68:	4803      	ldr	r0, [pc, #12]	; (3a78 <LightGroup::set(unsigned char, lightState)+0x54>)
    3a6a:	e7f1      	b.n	3a50 <LightGroup::set(unsigned char, lightState)+0x2c>
    3a6c:	20002988 	.word	0x20002988
    3a70:	20000d4c 	.word	0x20000d4c
    3a74:	20001ea4 	.word	0x20001ea4
    3a78:	20000d24 	.word	0x20000d24

00003a7c <LightGroup::pulse(unsigned char, unsigned short)>:
	}
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
    3a7c:	4b0b      	ldr	r3, [pc, #44]	; (3aac <LightGroup::pulse(unsigned char, unsigned short)+0x30>)
    3a7e:	681b      	ldr	r3, [r3, #0]
		return;
	}
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
    3a80:	b510      	push	{r4, lr}
	if (activeLightSet == nullptr) {
    3a82:	b13b      	cbz	r3, 3a94 <LightGroup::pulse(unsigned char, unsigned short)+0x18>
    3a84:	4614      	mov	r4, r2
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
		return;
	}
	light(n)->pulse(tm);
    3a86:	f7ff ffa9 	bl	39dc <LightGroup::light(unsigned char)>
    3a8a:	4621      	mov	r1, r4
}
    3a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
		return;
	}
	light(n)->pulse(tm);
    3a90:	f7ff bf1e 	b.w	38d0 <Light::pulse(unsigned short)>
    3a94:	2127      	movs	r1, #39	; 0x27
    3a96:	4806      	ldr	r0, [pc, #24]	; (3ab0 <LightGroup::pulse(unsigned char, unsigned short)+0x34>)
    3a98:	f008 f82c 	bl	baf4 <usb_serial_write>
    3a9c:	4805      	ldr	r0, [pc, #20]	; (3ab4 <LightGroup::pulse(unsigned char, unsigned short)+0x38>)
    3a9e:	f008 f9eb 	bl	be78 <Print::println()>
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
    3aa2:	2064      	movs	r0, #100	; 0x64
		return;
	}
	light(n)->pulse(tm);
}
    3aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::pulse: undefined light set!"));
		delay(100);
    3aa8:	f006 bcf8 	b.w	a49c <delay>
    3aac:	20002988 	.word	0x20002988
    3ab0:	20000da0 	.word	0x20000da0
    3ab4:	20001ea4 	.word	0x20001ea4

00003ab8 <LightGroup::getState(unsigned char)>:
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3ab8:	4b07      	ldr	r3, [pc, #28]	; (3ad8 <LightGroup::getState(unsigned char)+0x20>)
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	b14b      	cbz	r3, 3ad2 <LightGroup::getState(unsigned char)+0x1a>
		return;
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
    3abe:	b510      	push	{r4, lr}
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3ac0:	7d03      	ldrb	r3, [r0, #20]
    3ac2:	428b      	cmp	r3, r1
    3ac4:	d801      	bhi.n	3aca <LightGroup::getState(unsigned char)+0x12>
    3ac6:	2000      	movs	r0, #0
	return light(n)->state;
}
    3ac8:	bd10      	pop	{r4, pc}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
	return light(n)->state;
    3aca:	f7ff ff87 	bl	39dc <LightGroup::light(unsigned char)>
    3ace:	7840      	ldrb	r0, [r0, #1]
    3ad0:	bd10      	pop	{r4, pc}
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3ad2:	4618      	mov	r0, r3
	return light(n)->state;
}
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	20002988 	.word	0x20002988

00003adc <LightGroup::isActive(unsigned char)>:

bool LightGroup::isActive(byte n) {
    3adc:	b538      	push	{r3, r4, r5, lr}
	if (activeLightSet == nullptr) {
    3ade:	4b14      	ldr	r3, [pc, #80]	; (3b30 <LightGroup::isActive(unsigned char)+0x54>)
    3ae0:	681c      	ldr	r4, [r3, #0]
    3ae2:	b1c4      	cbz	r4, 3b16 <LightGroup::isActive(unsigned char)+0x3a>
		Serial.println(F("LightGroup::isActive: undefined light set!"));
		delay(100);
		return false;
	}
	if (n >= _size) {
    3ae4:	7d03      	ldrb	r3, [r0, #20]
    3ae6:	460d      	mov	r5, r1
    3ae8:	428b      	cmp	r3, r1
    3aea:	d908      	bls.n	3afe <LightGroup::isActive(unsigned char)+0x22>
		Serial.println(F("LightGroup::isActive: illegal light number"));
		delay(100);
		return false;
	}
	Light* l = light(n);
    3aec:	f7ff ff76 	bl	39dc <LightGroup::light(unsigned char)>
	if (l == nullptr) {
    3af0:	4604      	mov	r4, r0
    3af2:	b198      	cbz	r0, 3b1c <LightGroup::isActive(unsigned char)+0x40>
    void blink(uint16_t blinkP = DEF_BLNK_PERIOD, byte blinkDutyC = 50, byte ticks = 0);
    void invert();
    void pulse(uint16_t pulseP = DEF_PULSE_PERIOD);
    bool update(uint32_t ms);
    inline bool isActive() const { return (state != OFF_L); }
    3af4:	7840      	ldrb	r0, [r0, #1]
    3af6:	3000      	adds	r0, #0
    3af8:	bf18      	it	ne
    3afa:	2001      	movne	r0, #1
		Serial.printf(F("LightGroup::isActive: undefined light #%d\n"), n);
		delay(100);
		return false;
	}
	return l->isActive();
}
    3afc:	bd38      	pop	{r3, r4, r5, pc}
    3afe:	212a      	movs	r1, #42	; 0x2a
    3b00:	480c      	ldr	r0, [pc, #48]	; (3b34 <LightGroup::isActive(unsigned char)+0x58>)
    3b02:	f007 fff7 	bl	baf4 <usb_serial_write>
    3b06:	480c      	ldr	r0, [pc, #48]	; (3b38 <LightGroup::isActive(unsigned char)+0x5c>)
    3b08:	f008 f9b6 	bl	be78 <Print::println()>
		delay(100);
		return false;
	}
	if (n >= _size) {
		Serial.println(F("LightGroup::isActive: illegal light number"));
		delay(100);
    3b0c:	2064      	movs	r0, #100	; 0x64
    3b0e:	f006 fcc5 	bl	a49c <delay>
		return false;
    3b12:	2000      	movs	r0, #0
    3b14:	bd38      	pop	{r3, r4, r5, pc}
    3b16:	212a      	movs	r1, #42	; 0x2a
    3b18:	4808      	ldr	r0, [pc, #32]	; (3b3c <LightGroup::isActive(unsigned char)+0x60>)
    3b1a:	e7f2      	b.n	3b02 <LightGroup::isActive(unsigned char)+0x26>
	}
	Light* l = light(n);
	if (l == nullptr) {
		Serial.printf(F("LightGroup::isActive: undefined light #%d\n"), n);
    3b1c:	462a      	mov	r2, r5
    3b1e:	4908      	ldr	r1, [pc, #32]	; (3b40 <LightGroup::isActive(unsigned char)+0x64>)
    3b20:	4805      	ldr	r0, [pc, #20]	; (3b38 <LightGroup::isActive(unsigned char)+0x5c>)
    3b22:	f008 f9c1 	bl	bea8 <Print::printf(__FlashStringHelper const*, ...)>
		delay(100);
    3b26:	2064      	movs	r0, #100	; 0x64
    3b28:	f006 fcb8 	bl	a49c <delay>
		return false;
    3b2c:	4620      	mov	r0, r4
    3b2e:	bd38      	pop	{r3, r4, r5, pc}
    3b30:	20002988 	.word	0x20002988
    3b34:	20000df4 	.word	0x20000df4
    3b38:	20001ea4 	.word	0x20001ea4
    3b3c:	20000dc8 	.word	0x20000dc8
    3b40:	20000e20 	.word	0x20000e20

00003b44 <LightGroup::setAll(lightState)>:
	}
	return l->isActive();
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
    3b44:	4b13      	ldr	r3, [pc, #76]	; (3b94 <LightGroup::setAll(lightState)+0x50>)
    3b46:	681b      	ldr	r3, [r3, #0]
		return false;
	}
	return l->isActive();
}

void LightGroup::setAll(lightState st) {
    3b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4a:	b083      	sub	sp, #12
	if (activeLightSet == nullptr) {
    3b4c:	b1ab      	cbz	r3, 3b7a <LightGroup::setAll(lightState)+0x36>
		Serial.println(F("LightGroup::setAll: undefined light set!"));
		delay(100);
		return;
	}
	for (int i = 0; i < _size; i++) light(i)->set(st);
    3b4e:	7d03      	ldrb	r3, [r0, #20]
    3b50:	4605      	mov	r5, r0
    3b52:	b183      	cbz	r3, 3b76 <LightGroup::setAll(lightState)+0x32>
    3b54:	2400      	movs	r4, #0
    3b56:	460e      	mov	r6, r1
    3b58:	4627      	mov	r7, r4
    3b5a:	b2e1      	uxtb	r1, r4
    3b5c:	4628      	mov	r0, r5
    3b5e:	f7ff ff3d 	bl	39dc <LightGroup::light(unsigned char)>
    3b62:	2332      	movs	r3, #50	; 0x32
    3b64:	9700      	str	r7, [sp, #0]
    3b66:	22c8      	movs	r2, #200	; 0xc8
    3b68:	4631      	mov	r1, r6
    3b6a:	3401      	adds	r4, #1
    3b6c:	f7ff fe7a 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    3b70:	7d2b      	ldrb	r3, [r5, #20]
    3b72:	42a3      	cmp	r3, r4
    3b74:	dcf1      	bgt.n	3b5a <LightGroup::setAll(lightState)+0x16>
}
    3b76:	b003      	add	sp, #12
    3b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b7a:	2128      	movs	r1, #40	; 0x28
    3b7c:	4806      	ldr	r0, [pc, #24]	; (3b98 <LightGroup::setAll(lightState)+0x54>)
    3b7e:	f007 ffb9 	bl	baf4 <usb_serial_write>
    3b82:	4806      	ldr	r0, [pc, #24]	; (3b9c <LightGroup::setAll(lightState)+0x58>)
    3b84:	f008 f978 	bl	be78 <Print::println()>
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::setAll: undefined light set!"));
		delay(100);
    3b88:	2064      	movs	r0, #100	; 0x64
		return;
	}
	for (int i = 0; i < _size; i++) light(i)->set(st);
}
    3b8a:	b003      	add	sp, #12
    3b8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::setAll: undefined light set!"));
		delay(100);
    3b90:	f006 bc84 	b.w	a49c <delay>
    3b94:	20002988 	.word	0x20002988
    3b98:	20000e4c 	.word	0x20000e4c
    3b9c:	20001ea4 	.word	0x20001ea4

00003ba0 <LightGroup::switchTheFirst(lightState)>:
// to the given state.
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
	byte i;

	if (activeLightSet == nullptr) {
    3ba0:	4b1a      	ldr	r3, [pc, #104]	; (3c0c <LightGroup::switchTheFirst(lightState)+0x6c>)
    3ba2:	681b      	ldr	r3, [r3, #0]
}

// switch the first light of the group of a different state than st
// to the given state.
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
    3ba4:	b570      	push	{r4, r5, r6, lr}
    3ba6:	b082      	sub	sp, #8
	byte i;

	if (activeLightSet == nullptr) {
    3ba8:	b313      	cbz	r3, 3bf0 <LightGroup::switchTheFirst(lightState)+0x50>
    3baa:	4605      	mov	r5, r0
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3bac:	7d00      	ldrb	r0, [r0, #20]
    3bae:	b1d0      	cbz	r0, 3be6 <LightGroup::switchTheFirst(lightState)+0x46>
    3bb0:	460e      	mov	r6, r1
    3bb2:	2400      	movs	r4, #0
    3bb4:	e003      	b.n	3bbe <LightGroup::switchTheFirst(lightState)+0x1e>
    3bb6:	b2d4      	uxtb	r4, r2
    3bb8:	7d2b      	ldrb	r3, [r5, #20]
    3bba:	42a3      	cmp	r3, r4
    3bbc:	d915      	bls.n	3bea <LightGroup::switchTheFirst(lightState)+0x4a>
		if (light(i)->state != st) {
    3bbe:	4621      	mov	r1, r4
    3bc0:	4628      	mov	r0, r5
    3bc2:	f7ff ff0b 	bl	39dc <LightGroup::light(unsigned char)>
    3bc6:	7843      	ldrb	r3, [r0, #1]
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3bc8:	1c62      	adds	r2, r4, #1
		if (light(i)->state != st) {
    3bca:	42b3      	cmp	r3, r6
    3bcc:	d0f3      	beq.n	3bb6 <LightGroup::switchTheFirst(lightState)+0x16>
			light(i)->set(st);
    3bce:	4621      	mov	r1, r4
    3bd0:	4628      	mov	r0, r5
    3bd2:	f7ff ff03 	bl	39dc <LightGroup::light(unsigned char)>
    3bd6:	2200      	movs	r2, #0
    3bd8:	4631      	mov	r1, r6
    3bda:	2332      	movs	r3, #50	; 0x32
    3bdc:	9200      	str	r2, [sp, #0]
    3bde:	22c8      	movs	r2, #200	; 0xc8
    3be0:	f7ff fe40 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
			break;
    3be4:	4620      	mov	r0, r4
		}
	}
	return i;
}
    3be6:	b002      	add	sp, #8
    3be8:	bd70      	pop	{r4, r5, r6, pc}
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3bea:	4620      	mov	r0, r4
			light(i)->set(st);
			break;
		}
	}
	return i;
}
    3bec:	b002      	add	sp, #8
    3bee:	bd70      	pop	{r4, r5, r6, pc}
    3bf0:	2130      	movs	r1, #48	; 0x30
    3bf2:	4807      	ldr	r0, [pc, #28]	; (3c10 <LightGroup::switchTheFirst(lightState)+0x70>)
    3bf4:	f007 ff7e 	bl	baf4 <usb_serial_write>
    3bf8:	4806      	ldr	r0, [pc, #24]	; (3c14 <LightGroup::switchTheFirst(lightState)+0x74>)
    3bfa:	f008 f93d 	bl	be78 <Print::println()>
byte LightGroup::switchTheFirst(lightState st) {
	byte i;

	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::switchTheFirst: undefined light set!"));
		delay(100);
    3bfe:	2064      	movs	r0, #100	; 0x64
    3c00:	f006 fc4c 	bl	a49c <delay>
    3c04:	20ff      	movs	r0, #255	; 0xff
			light(i)->set(st);
			break;
		}
	}
	return i;
}
    3c06:	b002      	add	sp, #8
    3c08:	bd70      	pop	{r4, r5, r6, pc}
    3c0a:	bf00      	nop
    3c0c:	20002988 	.word	0x20002988
    3c10:	20000e78 	.word	0x20000e78
    3c14:	20001ea4 	.word	0x20001ea4

00003c18 <LightGroup::switchTheFirst(lightState, unsigned short)>:

byte LightGroup::switchTheFirst(lightState st, uint16_t maxP) {
    3c18:	b570      	push	{r4, r5, r6, lr}
    3c1a:	4615      	mov	r5, r2
    3c1c:	4606      	mov	r6, r0
	byte gl;
	gl = switchTheFirst(st);
    3c1e:	f7ff ffbf 	bl	3ba0 <LightGroup::switchTheFirst(lightState)>
    3c22:	4604      	mov	r4, r0
	if (maxP > 0 && gl != 0xff) light(gl)->activePeriod = maxP;
    3c24:	b135      	cbz	r5, 3c34 <LightGroup::switchTheFirst(lightState, unsigned short)+0x1c>
    3c26:	28ff      	cmp	r0, #255	; 0xff
    3c28:	d004      	beq.n	3c34 <LightGroup::switchTheFirst(lightState, unsigned short)+0x1c>
    3c2a:	4630      	mov	r0, r6
    3c2c:	4621      	mov	r1, r4
    3c2e:	f7ff fed5 	bl	39dc <LightGroup::light(unsigned char)>
    3c32:	8185      	strh	r5, [r0, #12]
	return gl;
}
    3c34:	4620      	mov	r0, r4
    3c36:	bd70      	pop	{r4, r5, r6, pc}

00003c38 <LightGroup::rotateRight()>:
		for (int i = _size - 1; i > 0; i--) light(i + 1)->copy(light(i));
	}
	light(0)->reset();
}

void LightGroup::rotateRight() {
    3c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
    3c3a:	4b1f      	ldr	r3, [pc, #124]	; (3cb8 <LightGroup::rotateRight()+0x80>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d036      	beq.n	3cb0 <LightGroup::rotateRight()+0x78>
		Serial.println(F("LightGroup::rotateRight: undefined light set!"));
		delay(100);
		return;
	}
	if (_size <= 1) {
    3c42:	7d01      	ldrb	r1, [r0, #20]
    3c44:	4606      	mov	r6, r0
    3c46:	2901      	cmp	r1, #1
    3c48:	d926      	bls.n	3c98 <LightGroup::rotateRight()+0x60>
		delay(100);
		return;
	}
	//Serial.print("rotateRight on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(_size - 1));
    3c4a:	3901      	subs	r1, #1
    3c4c:	6984      	ldr	r4, [r0, #24]
    3c4e:	b2c9      	uxtb	r1, r1
    3c50:	f7ff fec4 	bl	39dc <LightGroup::light(unsigned char)>
    3c54:	4601      	mov	r1, r0
    3c56:	4620      	mov	r0, r4
    3c58:	f7ff fdee 	bl	3838 <Light::copy(Light*)>
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
    3c5c:	7d34      	ldrb	r4, [r6, #20]
    3c5e:	3c02      	subs	r4, #2
    3c60:	d411      	bmi.n	3c86 <LightGroup::rotateRight()+0x4e>
    3c62:	b2e5      	uxtb	r5, r4
    3c64:	4630      	mov	r0, r6
    3c66:	3c01      	subs	r4, #1
    3c68:	1c69      	adds	r1, r5, #1
    3c6a:	b2c9      	uxtb	r1, r1
    3c6c:	f7ff feb6 	bl	39dc <LightGroup::light(unsigned char)>
    3c70:	4607      	mov	r7, r0
    3c72:	4629      	mov	r1, r5
    3c74:	4630      	mov	r0, r6
    3c76:	f7ff feb1 	bl	39dc <LightGroup::light(unsigned char)>
    3c7a:	4601      	mov	r1, r0
    3c7c:	4638      	mov	r0, r7
    3c7e:	f7ff fddb 	bl	3838 <Light::copy(Light*)>
    3c82:	1c63      	adds	r3, r4, #1
    3c84:	d1ed      	bne.n	3c62 <LightGroup::rotateRight()+0x2a>
	light(0)->copy(_tmpLight);
    3c86:	2100      	movs	r1, #0
    3c88:	4630      	mov	r0, r6
    3c8a:	f7ff fea7 	bl	39dc <LightGroup::light(unsigned char)>
    3c8e:	69b1      	ldr	r1, [r6, #24]
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3c90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	}
	//Serial.print("rotateRight on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
    3c94:	f7ff bdd0 	b.w	3838 <Light::copy(Light*)>
    3c98:	2128      	movs	r1, #40	; 0x28
    3c9a:	4808      	ldr	r0, [pc, #32]	; (3cbc <LightGroup::rotateRight()+0x84>)
    3c9c:	f007 ff2a 	bl	baf4 <usb_serial_write>
    3ca0:	4807      	ldr	r0, [pc, #28]	; (3cc0 <LightGroup::rotateRight()+0x88>)
    3ca2:	f008 f8e9 	bl	be78 <Print::println()>
		delay(100);
		return;
	}
	if (_size <= 1) {
		Serial.println(F("LightGroup::rotateRight: group size <= 1"));
		delay(100);
    3ca6:	2064      	movs	r0, #100	; 0x64
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		delay(100);
		return;
	}
	if (_size <= 1) {
		Serial.println(F("LightGroup::rotateRight: group size <= 1"));
		delay(100);
    3cac:	f006 bbf6 	b.w	a49c <delay>
    3cb0:	212d      	movs	r1, #45	; 0x2d
    3cb2:	4804      	ldr	r0, [pc, #16]	; (3cc4 <LightGroup::rotateRight()+0x8c>)
    3cb4:	e7f2      	b.n	3c9c <LightGroup::rotateRight()+0x64>
    3cb6:	bf00      	nop
    3cb8:	20002988 	.word	0x20002988
    3cbc:	20000f6c 	.word	0x20000f6c
    3cc0:	20001ea4 	.word	0x20001ea4
    3cc4:	20000f3c 	.word	0x20000f3c

00003cc8 <LightGroup::rotateLeft()>:
	for (int i = 0; i < _size - 1; i++)
		light(i)->copy(light(i + 1));
	light(_size - 1)->reset();
}

void LightGroup::rotateLeft() {
    3cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
    3cca:	4b1f      	ldr	r3, [pc, #124]	; (3d48 <LightGroup::rotateLeft()+0x80>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	b37b      	cbz	r3, 3d30 <LightGroup::rotateLeft()+0x68>
		Serial.println(F("LightGroup::rotateLeft: undefined light set!"));
		delay(100);
		return;
	}
	if (_size <= 1) return;
    3cd0:	7d03      	ldrb	r3, [r0, #20]
    3cd2:	4606      	mov	r6, r0
    3cd4:	2b01      	cmp	r3, #1
    3cd6:	d928      	bls.n	3d2a <LightGroup::rotateLeft()+0x62>
	//Serial.print("rotateLeft on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(0));
    3cd8:	6984      	ldr	r4, [r0, #24]
    3cda:	2100      	movs	r1, #0
    3cdc:	f7ff fe7e 	bl	39dc <LightGroup::light(unsigned char)>
    3ce0:	4601      	mov	r1, r0
    3ce2:	4620      	mov	r0, r4
    3ce4:	f7ff fda8 	bl	3838 <Light::copy(Light*)>
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
    3ce8:	7d31      	ldrb	r1, [r6, #20]
    3cea:	2901      	cmp	r1, #1
    3cec:	dd1e      	ble.n	3d2c <LightGroup::rotateLeft()+0x64>
    3cee:	2500      	movs	r5, #0
    3cf0:	b2ec      	uxtb	r4, r5
    3cf2:	4630      	mov	r0, r6
    3cf4:	3501      	adds	r5, #1
    3cf6:	4621      	mov	r1, r4
    3cf8:	f7ff fe70 	bl	39dc <LightGroup::light(unsigned char)>
    3cfc:	1c61      	adds	r1, r4, #1
    3cfe:	4607      	mov	r7, r0
    3d00:	4630      	mov	r0, r6
    3d02:	b2c9      	uxtb	r1, r1
    3d04:	f7ff fe6a 	bl	39dc <LightGroup::light(unsigned char)>
    3d08:	4601      	mov	r1, r0
    3d0a:	4638      	mov	r0, r7
    3d0c:	f7ff fd94 	bl	3838 <Light::copy(Light*)>
    3d10:	7d31      	ldrb	r1, [r6, #20]
    3d12:	3901      	subs	r1, #1
    3d14:	42a9      	cmp	r1, r5
    3d16:	dceb      	bgt.n	3cf0 <LightGroup::rotateLeft()+0x28>
	light(_size - 1)->copy(_tmpLight);
    3d18:	b2c9      	uxtb	r1, r1
    3d1a:	4630      	mov	r0, r6
    3d1c:	f7ff fe5e 	bl	39dc <LightGroup::light(unsigned char)>
    3d20:	69b1      	ldr	r1, [r6, #24]
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (_size <= 1) return;
	//Serial.print("rotateLeft on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(0));
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
	light(_size - 1)->copy(_tmpLight);
    3d26:	f7ff bd87 	b.w	3838 <Light::copy(Light*)>
    3d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d2c:	3901      	subs	r1, #1
    3d2e:	e7f3      	b.n	3d18 <LightGroup::rotateLeft()+0x50>
    3d30:	212c      	movs	r1, #44	; 0x2c
    3d32:	4806      	ldr	r0, [pc, #24]	; (3d4c <LightGroup::rotateLeft()+0x84>)
    3d34:	f007 fede 	bl	baf4 <usb_serial_write>
    3d38:	4805      	ldr	r0, [pc, #20]	; (3d50 <LightGroup::rotateLeft()+0x88>)
    3d3a:	f008 f89d 	bl	be78 <Print::println()>
}

void LightGroup::rotateLeft() {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::rotateLeft: undefined light set!"));
		delay(100);
    3d3e:	2064      	movs	r0, #100	; 0x64
	_tmpLight->copy(light(0));
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
	light(_size - 1)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

void LightGroup::rotateLeft() {
	if (activeLightSet == nullptr) {
		Serial.println(F("LightGroup::rotateLeft: undefined light set!"));
		delay(100);
    3d44:	f006 bbaa 	b.w	a49c <delay>
    3d48:	20002988 	.word	0x20002988
    3d4c:	20000fec 	.word	0x20000fec
    3d50:	20001ea4 	.word	0x20001ea4

00003d54 <LightSet::LightSet(int)>:
//}

LightSet::LightSet(int ls_size) {
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    3d54:	f5b1 7f80 	cmp.w	r1, #256	; 0x100

//LightSet::LightSet() {
//	_size = 0;
//}

LightSet::LightSet(int ls_size) {
    3d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d5c:	4607      	mov	r7, r0
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    3d5e:	dc17      	bgt.n	3d90 <LightSet::LightSet(int)+0x3c>
	light = new Light[ls_size];
    3d60:	f1b1 6faa 	cmp.w	r1, #89128960	; 0x5500000
    3d64:	460e      	mov	r6, r1
    3d66:	d91c      	bls.n	3da2 <LightSet::LightSet(int)+0x4e>
    3d68:	f04f 30ff 	mov.w	r0, #4294967295
    3d6c:	180c      	adds	r4, r1, r0
    3d6e:	f008 f841 	bl	bdf4 <operator new[](unsigned int)>
    3d72:	4680      	mov	r8, r0
    3d74:	4645      	mov	r5, r8
    3d76:	3c01      	subs	r4, #1
    3d78:	4628      	mov	r0, r5
    3d7a:	f7ff fd4f 	bl	381c <Light::Light()>
    3d7e:	3518      	adds	r5, #24
    3d80:	1c63      	adds	r3, r4, #1
    3d82:	d1f8      	bne.n	3d76 <LightSet::LightSet(int)+0x22>
    3d84:	f8c7 8000 	str.w	r8, [r7]
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
}
    3d88:	4638      	mov	r0, r7
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
	light = new Light[ls_size];
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
    3d8a:	607e      	str	r6, [r7, #4]
}
    3d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

LightSet::LightSet(int ls_size) {
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
	light = new Light[ls_size];
    3d90:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    3d94:	24ff      	movs	r4, #255	; 0xff
    3d96:	f008 f82d 	bl	bdf4 <operator new[](unsigned int)>
//}

LightSet::LightSet(int ls_size) {
	//Serial.println("Lightset init...");
	//delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    3d9a:	f44f 7680 	mov.w	r6, #256	; 0x100
	light = new Light[ls_size];
    3d9e:	4680      	mov	r8, r0
    3da0:	e7e8      	b.n	3d74 <LightSet::LightSet(int)+0x20>
    3da2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3da6:	1e4c      	subs	r4, r1, #1
    3da8:	00c0      	lsls	r0, r0, #3
    3daa:	f008 f823 	bl	bdf4 <operator new[](unsigned int)>
    3dae:	1c62      	adds	r2, r4, #1
    3db0:	4680      	mov	r8, r0
    3db2:	d0e7      	beq.n	3d84 <LightSet::LightSet(int)+0x30>
    3db4:	e7de      	b.n	3d74 <LightSet::LightSet(int)+0x20>
    3db6:	bf00      	nop

00003db8 <LightSet::~LightSet()>:
	light = larray;
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
}

LightSet::~LightSet() {
    3db8:	b510      	push	{r4, lr}
    3dba:	4604      	mov	r4, r0
	delete[] light;
    3dbc:	6800      	ldr	r0, [r0, #0]
    3dbe:	b108      	cbz	r0, 3dc4 <LightSet::~LightSet()+0xc>
    3dc0:	f008 f81a 	bl	bdf8 <operator delete[](void*)>
	//delete lightChanges;
}
    3dc4:	4620      	mov	r0, r4
    3dc6:	bd10      	pop	{r4, pc}

00003dc8 <LightSet::getLight(int)>:
	return _size;
}

 //returns nullptr if <light> is too big
 Light* LightSet::getLight(int n) {
	 if (n < 0 || n >= _size) {
    3dc8:	2900      	cmp	r1, #0
 int LightSet::getSize() {
	return _size;
}

 //returns nullptr if <light> is too big
 Light* LightSet::getLight(int n) {
    3dca:	b508      	push	{r3, lr}
	 if (n < 0 || n >= _size) {
    3dcc:	db08      	blt.n	3de0 <LightSet::getLight(int)+0x18>
    3dce:	6843      	ldr	r3, [r0, #4]
    3dd0:	4299      	cmp	r1, r3
    3dd2:	da05      	bge.n	3de0 <LightSet::getLight(int)+0x18>
		 Serial.printf(F("WARNING: LightSet::getLight(): invalid light number %d\n"), n);
		 return nullptr;
	 }
	 return &(light[n]);
    3dd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3dd8:	6800      	ldr	r0, [r0, #0]
    3dda:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
    3dde:	bd08      	pop	{r3, pc}
    3de0:	460a      	mov	r2, r1
}

 //returns nullptr if <light> is too big
 Light* LightSet::getLight(int n) {
	 if (n < 0 || n >= _size) {
		 Serial.printf(F("WARNING: LightSet::getLight(): invalid light number %d\n"), n);
    3de2:	4803      	ldr	r0, [pc, #12]	; (3df0 <LightSet::getLight(int)+0x28>)
    3de4:	4903      	ldr	r1, [pc, #12]	; (3df4 <LightSet::getLight(int)+0x2c>)
    3de6:	f008 f85f 	bl	bea8 <Print::printf(__FlashStringHelper const*, ...)>
		 return nullptr;
    3dea:	2000      	movs	r0, #0
    3dec:	bd08      	pop	{r3, pc}
    3dee:	bf00      	nop
    3df0:	20001ea4 	.word	0x20001ea4
    3df4:	20001028 	.word	0x20001028

00003df8 <LightSet::switchOffAllLights()>:
 void LightSet::resetAll() {
	for (byte i = 0; i < _size; i++) light[i].reset();
}

 void LightSet::switchOffAllLights() {
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
    3df8:	6843      	ldr	r3, [r0, #4]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	dd16      	ble.n	3e2c <LightSet::switchOffAllLights()+0x34>

 void LightSet::resetAll() {
	for (byte i = 0; i < _size; i++) light[i].reset();
}

 void LightSet::switchOffAllLights() {
    3dfe:	b570      	push	{r4, r5, r6, lr}
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
    3e00:	2400      	movs	r4, #0

 void LightSet::resetAll() {
	for (byte i = 0; i < _size; i++) light[i].reset();
}

 void LightSet::switchOffAllLights() {
    3e02:	b082      	sub	sp, #8
    3e04:	4605      	mov	r5, r0
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
    3e06:	4626      	mov	r6, r4
    3e08:	682a      	ldr	r2, [r5, #0]
    3e0a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    3e0e:	3401      	adds	r4, #1
    3e10:	2332      	movs	r3, #50	; 0x32
    3e12:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3e16:	9600      	str	r6, [sp, #0]
    3e18:	22c8      	movs	r2, #200	; 0xc8
    3e1a:	2100      	movs	r1, #0
    3e1c:	f7ff fd22 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    3e20:	686b      	ldr	r3, [r5, #4]
    3e22:	b2e4      	uxtb	r4, r4
    3e24:	429c      	cmp	r4, r3
    3e26:	dbef      	blt.n	3e08 <LightSet::switchOffAllLights()+0x10>
}
    3e28:	b002      	add	sp, #8
    3e2a:	bd70      	pop	{r4, r5, r6, pc}
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop

00003e30 <LightSet::switchOnAllLights()>:

 void LightSet::switchOnAllLights() {
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
    3e30:	6843      	ldr	r3, [r0, #4]
    3e32:	2b00      	cmp	r3, #0
    3e34:	dd16      	ble.n	3e64 <LightSet::switchOnAllLights()+0x34>

 void LightSet::switchOffAllLights() {
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
}

 void LightSet::switchOnAllLights() {
    3e36:	b570      	push	{r4, r5, r6, lr}
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
    3e38:	2400      	movs	r4, #0

 void LightSet::switchOffAllLights() {
	for (byte i = 0; i < _size; i++) light[i].set(OFF_L);
}

 void LightSet::switchOnAllLights() {
    3e3a:	b082      	sub	sp, #8
    3e3c:	4605      	mov	r5, r0
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
    3e3e:	4626      	mov	r6, r4
    3e40:	682a      	ldr	r2, [r5, #0]
    3e42:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    3e46:	3401      	adds	r4, #1
    3e48:	2332      	movs	r3, #50	; 0x32
    3e4a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3e4e:	9600      	str	r6, [sp, #0]
    3e50:	22c8      	movs	r2, #200	; 0xc8
    3e52:	2101      	movs	r1, #1
    3e54:	f7ff fd06 	bl	3864 <Light::set(lightState, unsigned short, unsigned char, unsigned short)>
    3e58:	686b      	ldr	r3, [r5, #4]
    3e5a:	b2e4      	uxtb	r4, r4
    3e5c:	429c      	cmp	r4, r3
    3e5e:	dbef      	blt.n	3e40 <LightSet::switchOnAllLights()+0x10>
 }
    3e60:	b002      	add	sp, #8
    3e62:	bd70      	pop	{r4, r5, r6, pc}
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop

00003e68 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)>:
// Updates all low-level "lamps" according to corresponding "lights" state.
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet& ls, byte from, byte to) {
	byte top;
	
	if (from > to) return;
    3e68:	429a      	cmp	r2, r3
    3e6a:	d81d      	bhi.n	3ea8 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x40>
	 for (byte i = 0; i < _size; i++) light[i].set(ON_L);
 }

// Updates all low-level "lamps" according to corresponding "lights" state.
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet& ls, byte from, byte to) {
    3e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e6e:	4614      	mov	r4, r2
    3e70:	4606      	mov	r6, r0
    3e72:	460f      	mov	r7, r1
	byte top;
	
	if (from > to) return;
	if (to == 0) top = _size; else top = to + 1;
    3e74:	b1ab      	cbz	r3, 3ea2 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x3a>
    3e76:	3301      	adds	r3, #1
    3e78:	6842      	ldr	r2, [r0, #4]
    3e7a:	b2dd      	uxtb	r5, r3
	if (top > _size) top = _size;
    3e7c:	4295      	cmp	r5, r2
    3e7e:	dd0d      	ble.n	3e9c <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x34>
    3e80:	b2d5      	uxtb	r5, r2
    3e82:	e00b      	b.n	3e9c <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x34>
	for (byte i = from; i < top; i++) ls.setState(i, light[i].on);
    3e84:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    3e88:	4621      	mov	r1, r4
    3e8a:	3401      	adds	r4, #1
    3e8c:	6832      	ldr	r2, [r6, #0]
    3e8e:	2300      	movs	r3, #0
    3e90:	b2e4      	uxtb	r4, r4
    3e92:	f812 2030 	ldrb.w	r2, [r2, r0, lsl #3]
    3e96:	4638      	mov	r0, r7
    3e98:	f7fe fbb8 	bl	260c <BitMappedSet::setState(unsigned short, bool, bool)>
    3e9c:	42a5      	cmp	r5, r4
    3e9e:	d8f1      	bhi.n	3e84 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x1c>
    3ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet& ls, byte from, byte to) {
	byte top;
	
	if (from > to) return;
	if (to == 0) top = _size; else top = to + 1;
    3ea2:	6842      	ldr	r2, [r0, #4]
    3ea4:	b2d5      	uxtb	r5, r2
    3ea6:	e7e9      	b.n	3e7c <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)+0x14>
    3ea8:	4770      	bx	lr
    3eaa:	bf00      	nop

00003eac <LightSet::update(unsigned long)>:
	if (top > _size) top = _size;
	for (byte i = from; i < top; i++) ls.setState(i, light[i].on);
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
    3eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    3eae:	6843      	ldr	r3, [r0, #4]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	dd15      	ble.n	3ee0 <LightSet::update(unsigned long)+0x34>
    3eb4:	2400      	movs	r4, #0
    3eb6:	460f      	mov	r7, r1
    3eb8:	4606      	mov	r6, r0
    3eba:	4625      	mov	r5, r4
		if (light[i].update(ms) && !changes) changes = true;
    3ebc:	6833      	ldr	r3, [r6, #0]
    3ebe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    3ec2:	3401      	adds	r4, #1
		if (light[i].update(ms) && !changes) changes = true;
    3ec4:	4639      	mov	r1, r7
    3ec6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3eca:	f7ff fd11 	bl	38f0 <Light::update(unsigned long)>
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    3ece:	6873      	ldr	r3, [r6, #4]
    3ed0:	b2e4      	uxtb	r4, r4
		if (light[i].update(ms) && !changes) changes = true;
    3ed2:	42a8      	cmp	r0, r5
    3ed4:	bf88      	it	hi
    3ed6:	2501      	movhi	r5, #1
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
	for (byte i = 0; i < _size; i++) {
    3ed8:	429c      	cmp	r4, r3
    3eda:	dbef      	blt.n	3ebc <LightSet::update(unsigned long)+0x10>
		if (light[i].update(ms) && !changes) changes = true;
	}
	return changes;
}
    3edc:	4628      	mov	r0, r5
    3ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (byte i = from; i < top; i++) ls.setState(i, light[i].on);
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool changes = false;
    3ee0:	2500      	movs	r5, #0
    3ee2:	e7fb      	b.n	3edc <LightSet::update(unsigned long)+0x30>

00003ee4 <Sys80b::onSwitchEvent(unsigned char, bool)>:
	inline uint32_t getSolenoidsOutput() { return solenoids->getStates(); }
	virtual void updateSound();
	inline uint16_t getDisplayOutput() { return display.LastData();	}
	void updUserKeyState(UserKey key, uint32_t& ms);
	void _millisRoutine(uint32_t& ms);
	virtual void onSwitchEvent(byte sw, bool st) {};
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop

00003ee8 <PinGame::begin()>:
public:
	PinGame(Board_Sys80b& board);
	virtual ~PinGame();

	void reset();
	virtual void begin() {};
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop

00003eec <PinGame::timerRoutine(int, unsigned long&)>:
	//void updateAndRenderLamps(uint32_t ms);
	//void onSwitchEvent(byte sw, bool st);
	virtual void millisRoutine(uint32_t& ms);
	inline String getGameName() { return _gameName; } // returns game name
	inline int getGameNumber() { return _gameNum; } //  returns Gottileb game id number
	virtual void timerRoutine(int taskIdentifer, uint32_t& tm) {}
    3eec:	4770      	bx	lr
    3eee:	bf00      	nop

00003ef0 <non-virtual thunk to PinGame::timerRoutine(int, unsigned long&)>:
    3ef0:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    3ef4:	e7fa      	b.n	3eec <PinGame::timerRoutine(int, unsigned long&)>
    3ef6:	bf00      	nop

00003ef8 <PinGame::~PinGame()>:
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    3ef8:	4b31      	ldr	r3, [pc, #196]	; (3fc0 <PinGame::~PinGame()+0xc8>)
    3efa:	b570      	push	{r4, r5, r6, lr}
    3efc:	f103 0230 	add.w	r2, r3, #48	; 0x30
	delete lights;
    3f00:	f8d0 439c 	ldr.w	r4, [r0, #924]	; 0x39c
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    3f04:	4605      	mov	r5, r0
    3f06:	6003      	str	r3, [r0, #0]
    3f08:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
	delete lights;
    3f0c:	b134      	cbz	r4, 3f1c <PinGame::~PinGame()+0x24>
    3f0e:	4620      	mov	r0, r4
    3f10:	f7ff ff52 	bl	3db8 <LightSet::~LightSet()>
    3f14:	4620      	mov	r0, r4
    3f16:	2108      	movs	r1, #8
    3f18:	f007 ff70 	bl	bdfc <operator delete(void*, unsigned int)>
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    3f1c:	f505 60a1 	add.w	r0, r5, #1288	; 0x508
    3f20:	f505 7626 	add.w	r6, r5, #664	; 0x298
    3f24:	f008 f86a 	bl	bffc <String::~String()>

#include "Arduino.h"
#include "TimerTask.h"
//#define MAX_TASKS 20

class TimerSet {
    3f28:	f205 40e4 	addw	r0, r5, #1252	; 0x4e4
    3f2c:	f008 f866 	bl	bffc <String::~String()>
    3f30:	f205 40d4 	addw	r0, r5, #1236	; 0x4d4
    3f34:	f008 f862 	bl	bffc <String::~String()>
    3f38:	f205 40bc 	addw	r0, r5, #1212	; 0x4bc
    3f3c:	f008 f85e 	bl	bffc <String::~String()>
    3f40:	f205 40a4 	addw	r0, r5, #1188	; 0x4a4
    3f44:	f008 f85a 	bl	bffc <String::~String()>
    3f48:	f205 408c 	addw	r0, r5, #1164	; 0x48c
    3f4c:	f008 f856 	bl	bffc <String::~String()>
    3f50:	f205 4074 	addw	r0, r5, #1140	; 0x474
    3f54:	f008 f852 	bl	bffc <String::~String()>

#include "Arduino.h"
#include "Sys80b.h"
//class Sys80b;

class Sys80b_Sensor {
    3f58:	f505 608b 	add.w	r0, r5, #1112	; 0x458
    3f5c:	f008 f84e 	bl	bffc <String::~String()>
    3f60:	f505 6088 	add.w	r0, r5, #1088	; 0x440
    3f64:	f008 f84a 	bl	bffc <String::~String()>
    3f68:	f505 6085 	add.w	r0, r5, #1064	; 0x428
    3f6c:	f008 f846 	bl	bffc <String::~String()>
    3f70:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    3f74:	f008 f842 	bl	bffc <String::~String()>
    3f78:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
    3f7c:	f008 f83e 	bl	bffc <String::~String()>
    3f80:	f505 7078 	add.w	r0, r5, #992	; 0x3e0
    3f84:	f008 f83a 	bl	bffc <String::~String()>
    3f88:	f505 7453 	add.w	r4, r5, #844	; 0x34c
    3f8c:	f505 7072 	add.w	r0, r5, #968	; 0x3c8
    3f90:	f008 f834 	bl	bffc <String::~String()>
    3f94:	f505 706c 	add.w	r0, r5, #944	; 0x3b0
    3f98:	f008 f830 	bl	bffc <String::~String()>
    3f9c:	42a6      	cmp	r6, r4
    3f9e:	d009      	beq.n	3fb4 <PinGame::~PinGame()+0xbc>
    3fa0:	3c24      	subs	r4, #36	; 0x24
#include "ExtTextDisplay.h"

enum pinballMode { SHOW_MODE, GAME_MODE, TEST_MODE, BOOKKEEP_MODE };

// top score entry
struct TopPlay {
    3fa2:	f104 0014 	add.w	r0, r4, #20
    3fa6:	f008 f829 	bl	bffc <String::~String()>
    3faa:	1d20      	adds	r0, r4, #4
    3fac:	f008 f826 	bl	bffc <String::~String()>
    3fb0:	42a6      	cmp	r6, r4
    3fb2:	d1f5      	bne.n	3fa0 <PinGame::~PinGame()+0xa8>
    3fb4:	4628      	mov	r0, r5
    3fb6:	f000 feb7 	bl	4d28 <Sys80b::~Sys80b()>
	delete lights;
}
    3fba:	4628      	mov	r0, r5
    3fbc:	bd70      	pop	{r4, r5, r6, pc}
    3fbe:	bf00      	nop
    3fc0:	20001068 	.word	0x20001068

00003fc4 <non-virtual thunk to PinGame::~PinGame()>:
	bool _3balls;
	//String inits;

public:
	PinGame(Board_Sys80b& board);
	virtual ~PinGame();
    3fc4:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    3fc8:	f7ff bf96 	b.w	3ef8 <PinGame::~PinGame()>

00003fcc <PinGame::~PinGame()>:
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
	setActiveLightSet(lights);
	//reset();
}

PinGame::~PinGame() {
    3fcc:	b510      	push	{r4, lr}
    3fce:	4604      	mov	r4, r0
	delete lights;
}
    3fd0:	f7ff ff92 	bl	3ef8 <PinGame::~PinGame()>
    3fd4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    3fd8:	4620      	mov	r0, r4
    3fda:	f007 ff0f 	bl	bdfc <operator delete(void*, unsigned int)>
    3fde:	4620      	mov	r0, r4
    3fe0:	bd10      	pop	{r4, pc}
    3fe2:	bf00      	nop

00003fe4 <non-virtual thunk to PinGame::~PinGame()>:
    3fe4:	f5a0 7025 	sub.w	r0, r0, #660	; 0x294
    3fe8:	f7ff bff0 	b.w	3fcc <PinGame::~PinGame()>

00003fec <PinGame::millisRoutine(unsigned long&)>:

// void PinGame::setDefaultLightSet() {
//	setActiveLightSet(lights);
//}

void PinGame::millisRoutine(uint32_t& ms) {
    3fec:	b570      	push	{r4, r5, r6, lr}
    3fee:	460d      	mov	r5, r1

	tmr.update(ms);
	
	// updates all non-steady mode lights state
	/* if (currentLampGroup == 0) */ LightGroup::activeLightSet->update(ms);
    3ff0:	4e0d      	ldr	r6, [pc, #52]	; (4028 <PinGame::millisRoutine(unsigned long&)+0x3c>)

// void PinGame::setDefaultLightSet() {
//	setActiveLightSet(lights);
//}

void PinGame::millisRoutine(uint32_t& ms) {
    3ff2:	4604      	mov	r4, r0

	tmr.update(ms);
    3ff4:	f200 40e4 	addw	r0, r0, #1252	; 0x4e4
    3ff8:	f001 fccc 	bl	5994 <TimerSet::update(unsigned long&)>
	
	// updates all non-steady mode lights state
	/* if (currentLampGroup == 0) */ LightGroup::activeLightSet->update(ms);
    3ffc:	6829      	ldr	r1, [r5, #0]
    3ffe:	6830      	ldr	r0, [r6, #0]
    4000:	f7ff ff54 	bl	3eac <LightSet::update(unsigned long)>
	
	// PERCHE' NON FUNZIONA ?!
	//byte cl = currentLampGroup << 2;
	//LightGroup::activeLightSet->renderToLamps(lamps, cl, cl + 3);
	LightGroup::activeLightSet->renderToLamps(*lamps);
    4004:	2300      	movs	r3, #0
    4006:	6830      	ldr	r0, [r6, #0]
    4008:	68a1      	ldr	r1, [r4, #8]
    400a:	461a      	mov	r2, r3
    400c:	f7ff ff2c 	bl	3e68 <LightSet::renderToLamps(BitMappedSet&, unsigned char, unsigned char)>
	
	extDisplay->update(ms);
    4010:	6829      	ldr	r1, [r5, #0]
    4012:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
    4016:	f7ff fa43 	bl	34a0 <ExtTextDisplay::update(unsigned long)>

	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
    401a:	4629      	mov	r1, r5
    401c:	4620      	mov	r0, r4
}
    401e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//LightGroup::activeLightSet->renderToLamps(lamps, cl, cl + 3);
	LightGroup::activeLightSet->renderToLamps(*lamps);
	
	extDisplay->update(ms);

	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
    4022:	f001 b99d 	b.w	5360 <Sys80b::_millisRoutine(unsigned long&)>
    4026:	bf00      	nop
    4028:	20002988 	.word	0x20002988

0000402c <Sys80b::onButtonPressed(UserKey)>:
	virtual void onSlamSwitchEvent(bool active) {};
	virtual void onButtonPressed(UserKey key) { 
    402c:	b538      	push	{r3, r4, r5, lr}
    402e:	460d      	mov	r5, r1
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4030:	4c06      	ldr	r4, [pc, #24]	; (404c <Sys80b::onButtonPressed(UserKey)+0x20>)
    4032:	2111      	movs	r1, #17
    4034:	4806      	ldr	r0, [pc, #24]	; (4050 <Sys80b::onButtonPressed(UserKey)+0x24>)
    4036:	f007 fd5d 	bl	baf4 <usb_serial_write>
    403a:	4629      	mov	r1, r5
    403c:	4620      	mov	r0, r4
    403e:	f007 ff83 	bl	bf48 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4042:	4620      	mov	r0, r4
		Serial.print("onButtonPressed: "); 
		Serial.println(key);
	}
    4044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4048:	f007 bf16 	b.w	be78 <Print::println()>
    404c:	20001ea4 	.word	0x20001ea4
    4050:	200010a4 	.word	0x200010a4

00004054 <PinGame::PinGame(Board_Sys80b&)>:

//#include "nvData.h"
#include "TimerSet.h"
#include "LightSet.h"

PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
    4054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4058:	b086      	sub	sp, #24
    405a:	4604      	mov	r4, r0
    405c:	f000 fefe 	bl	4e5c <Sys80b::Sys80b(Board_Sys80b&)>
    4060:	4bab      	ldr	r3, [pc, #684]	; (4310 <PinGame::PinGame(Board_Sys80b&)+0x2bc>)
    4062:	f504 7527 	add.w	r5, r4, #668	; 0x29c
    4066:	f504 7654 	add.w	r6, r4, #848	; 0x350
    406a:	f103 0230 	add.w	r2, r3, #48	; 0x30
    406e:	6023      	str	r3, [r4, #0]
    4070:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
#include "ExtTextDisplay.h"

enum pinballMode { SHOW_MODE, GAME_MODE, TEST_MODE, BOOKKEEP_MODE };

// top score entry
struct TopPlay {
    4074:	2100      	movs	r1, #0
    4076:	4628      	mov	r0, r5
    4078:	f008 f800 	bl	c07c <String::String(char const*)>
    407c:	f105 0010 	add.w	r0, r5, #16
    4080:	3524      	adds	r5, #36	; 0x24
    4082:	2100      	movs	r1, #0
    4084:	f007 fffa 	bl	c07c <String::String(char const*)>
    4088:	42ae      	cmp	r6, r5
    408a:	d1f3      	bne.n	4074 <PinGame::PinGame(Board_Sys80b&)+0x20>
    408c:	2230      	movs	r2, #48	; 0x30
    408e:	2100      	movs	r1, #0
    4090:	f504 7053 	add.w	r0, r4, #844	; 0x34c
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4094:	f504 756c 	add.w	r5, r4, #944	; 0x3b0
    4098:	f008 ffaa 	bl	cff0 <memset>
    409c:	2306      	movs	r3, #6
    409e:	4628      	mov	r0, r5
    40a0:	2100      	movs	r1, #0
    40a2:	f884 33ac 	strb.w	r3, [r4, #940]	; 0x3ac
    40a6:	f504 7672 	add.w	r6, r4, #968	; 0x3c8
		SENSOR(rightCoin, RIGHTCOIN_SW, "Right coin");
		SENSOR(centerCoin, CENTERCOIN_SW, "Right coin");
		SENSOR(replay, REPLAY_SW, "Replay button");
		SENSOR(tilt, REPLAY_SW, "Tilt (cabinet)");
		// constructor
		StdSw(Sys80b* sys) : _sys(sys) {
    40aa:	f8c4 43a4 	str.w	r4, [r4, #932]	; 0x3a4
    40ae:	f504 7878 	add.w	r8, r4, #992	; 0x3e0
    40b2:	f8c4 43a8 	str.w	r4, [r4, #936]	; 0x3a8
    40b6:	f504 6782 	add.w	r7, r4, #1040	; 0x410
    40ba:	f007 ffdf 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    40be:	4995      	ldr	r1, [pc, #596]	; (4314 <PinGame::PinGame(Board_Sys80b&)+0x2c0>)
    40c0:	a802      	add	r0, sp, #8
    40c2:	f007 ffef 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    40c6:	a902      	add	r1, sp, #8
    40c8:	4628      	mov	r0, r5
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    40ca:	f504 757e 	add.w	r5, r4, #1016	; 0x3f8
		descr = String(descrText);
    40ce:	f008 f87b 	bl	c1c8 <String::operator=(String&&)>
    40d2:	a802      	add	r0, sp, #8
    40d4:	f007 ff92 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    40d8:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    40dc:	2307      	movs	r3, #7
    40de:	4630      	mov	r0, r6
    40e0:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    40e4:	2100      	movs	r1, #0
    40e6:	f884 33c4 	strb.w	r3, [r4, #964]	; 0x3c4
    40ea:	f007 ffc7 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    40ee:	498a      	ldr	r1, [pc, #552]	; (4318 <PinGame::PinGame(Board_Sys80b&)+0x2c4>)
    40f0:	a802      	add	r0, sp, #8
    40f2:	f007 ffd7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    40f6:	a902      	add	r1, sp, #8
    40f8:	4630      	mov	r0, r6
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    40fa:	f504 6685 	add.w	r6, r4, #1064	; 0x428
		descr = String(descrText);
    40fe:	f008 f863 	bl	c1c8 <String::operator=(String&&)>
    4102:	a802      	add	r0, sp, #8
    4104:	f007 ff7a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4108:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    410c:	2310      	movs	r3, #16
    410e:	4640      	mov	r0, r8
    4110:	f8c4 23d8 	str.w	r2, [r4, #984]	; 0x3d8
    4114:	2100      	movs	r1, #0
    4116:	f884 33dc 	strb.w	r3, [r4, #988]	; 0x3dc
    411a:	f007 ffaf 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    411e:	497f      	ldr	r1, [pc, #508]	; (431c <PinGame::PinGame(Board_Sys80b&)+0x2c8>)
    4120:	a802      	add	r0, sp, #8
    4122:	f007 ffbf 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    4126:	a902      	add	r1, sp, #8
    4128:	4640      	mov	r0, r8
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    412a:	f04f 082f 	mov.w	r8, #47	; 0x2f
		descr = String(descrText);
    412e:	f008 f84b 	bl	c1c8 <String::operator=(String&&)>
    4132:	a802      	add	r0, sp, #8
    4134:	f007 ff62 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4138:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    413c:	2311      	movs	r3, #17
    413e:	4628      	mov	r0, r5
    4140:	f8c4 23f0 	str.w	r2, [r4, #1008]	; 0x3f0
    4144:	2100      	movs	r1, #0
    4146:	f884 33f4 	strb.w	r3, [r4, #1012]	; 0x3f4
    414a:	f007 ff97 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    414e:	4974      	ldr	r1, [pc, #464]	; (4320 <PinGame::PinGame(Board_Sys80b&)+0x2cc>)
    4150:	a802      	add	r0, sp, #8
    4152:	f007 ffa7 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    4156:	a902      	add	r1, sp, #8
    4158:	4628      	mov	r0, r5
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    415a:	f504 6588 	add.w	r5, r4, #1088	; 0x440
		descr = String(descrText);
    415e:	f008 f833 	bl	c1c8 <String::operator=(String&&)>
    4162:	a802      	add	r0, sp, #8
    4164:	f007 ff4a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4168:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    416c:	231b      	movs	r3, #27
    416e:	4638      	mov	r0, r7
    4170:	f8c4 2408 	str.w	r2, [r4, #1032]	; 0x408
    4174:	2100      	movs	r1, #0
    4176:	f884 340c 	strb.w	r3, [r4, #1036]	; 0x40c
    417a:	f007 ff7f 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    417e:	4969      	ldr	r1, [pc, #420]	; (4324 <PinGame::PinGame(Board_Sys80b&)+0x2d0>)
    4180:	a802      	add	r0, sp, #8
    4182:	f007 ff8f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    4186:	a902      	add	r1, sp, #8
    4188:	4638      	mov	r0, r7
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    418a:	f504 678b 	add.w	r7, r4, #1112	; 0x458
		descr = String(descrText);
    418e:	f008 f81b 	bl	c1c8 <String::operator=(String&&)>
    4192:	a802      	add	r0, sp, #8
    4194:	f007 ff32 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    4198:	f8d4 23a4 	ldr.w	r2, [r4, #932]	; 0x3a4
    419c:	2325      	movs	r3, #37	; 0x25
    419e:	4630      	mov	r0, r6
    41a0:	f8c4 2420 	str.w	r2, [r4, #1056]	; 0x420
    41a4:	2100      	movs	r1, #0
    41a6:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    41aa:	f007 ff67 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    41ae:	495d      	ldr	r1, [pc, #372]	; (4324 <PinGame::PinGame(Board_Sys80b&)+0x2d0>)
    41b0:	a802      	add	r0, sp, #8
    41b2:	f007 ff77 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    41b6:	a902      	add	r1, sp, #8
    41b8:	4630      	mov	r0, r6
    41ba:	f204 46e4 	addw	r6, r4, #1252	; 0x4e4
    41be:	f008 f803 	bl	c1c8 <String::operator=(String&&)>
    41c2:	a802      	add	r0, sp, #8
    41c4:	f007 ff1a 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    41c8:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
    41cc:	f884 843c 	strb.w	r8, [r4, #1084]	; 0x43c
    41d0:	4628      	mov	r0, r5
    41d2:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    41d6:	2100      	movs	r1, #0
    41d8:	f007 ff50 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    41dc:	4952      	ldr	r1, [pc, #328]	; (4328 <PinGame::PinGame(Board_Sys80b&)+0x2d4>)
    41de:	a802      	add	r0, sp, #8
    41e0:	f007 ff60 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    41e4:	a902      	add	r1, sp, #8
    41e6:	4628      	mov	r0, r5
    41e8:	f504 65a1 	add.w	r5, r4, #1288	; 0x508
    41ec:	f007 ffec 	bl	c1c8 <String::operator=(String&&)>
    41f0:	a802      	add	r0, sp, #8
    41f2:	f007 ff03 	bl	bffc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    41f6:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
    41fa:	f884 8454 	strb.w	r8, [r4, #1108]	; 0x454
    41fe:	4638      	mov	r0, r7
    4200:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    4204:	2100      	movs	r1, #0
    4206:	f007 ff39 	bl	c07c <String::String(char const*)>
		descr = String(descrText);
    420a:	4948      	ldr	r1, [pc, #288]	; (432c <PinGame::PinGame(Board_Sys80b&)+0x2d8>)
    420c:	a802      	add	r0, sp, #8
    420e:	f007 ff49 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    4212:	a902      	add	r1, sp, #8
    4214:	4638      	mov	r0, r7
    4216:	f007 ffd7 	bl	c1c8 <String::operator=(String&&)>
    421a:	a802      	add	r0, sp, #8
    421c:	f007 feee 	bl	bffc <String::~String()>
		ACTUATOR(knocker, SOLENOIDS, KNOCKER_SOL, "knocker");
		ACTUATOR(outhole, SOLENOIDS, OUTHOLE_SOL, "outhole");
		ACTUATOR(relay_Q, LAMPS, Q_LAMP, "Q relay");
		ACTUATOR(relay_T, LAMPS, T_LAMP, "T relay");
		// constructor
		StdAct(Sys80b* sys) : _sys(sys) {
    4220:	2301      	movs	r3, #1
    4222:	4a43      	ldr	r2, [pc, #268]	; (4330 <PinGame::PinGame(Board_Sys80b&)+0x2dc>)
    4224:	4621      	mov	r1, r4
    4226:	f8c4 4468 	str.w	r4, [r4, #1128]	; 0x468
    422a:	f204 406c 	addw	r0, r4, #1132	; 0x46c
    422e:	9200      	str	r2, [sp, #0]
    4230:	461a      	mov	r2, r3
    4232:	f001 f8f3 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    4236:	483f      	ldr	r0, [pc, #252]	; (4334 <PinGame::PinGame(Board_Sys80b&)+0x2e0>)
    4238:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    423c:	2308      	movs	r3, #8
    423e:	2201      	movs	r2, #1
    4240:	9000      	str	r0, [sp, #0]
    4242:	f204 4084 	addw	r0, r4, #1156	; 0x484
    4246:	f001 f8e9 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    424a:	483b      	ldr	r0, [pc, #236]	; (4338 <PinGame::PinGame(Board_Sys80b&)+0x2e4>)
    424c:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    4250:	2309      	movs	r3, #9
    4252:	2201      	movs	r2, #1
    4254:	9000      	str	r0, [sp, #0]
    4256:	f204 409c 	addw	r0, r4, #1180	; 0x49c
    425a:	f001 f8df 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    425e:	4837      	ldr	r0, [pc, #220]	; (433c <PinGame::PinGame(Board_Sys80b&)+0x2e8>)
    4260:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    4264:	2300      	movs	r3, #0
    4266:	2203      	movs	r2, #3
    4268:	9000      	str	r0, [sp, #0]
    426a:	f204 40b4 	addw	r0, r4, #1204	; 0x4b4
    426e:	f001 f8d5 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    4272:	4833      	ldr	r0, [pc, #204]	; (4340 <PinGame::PinGame(Board_Sys80b&)+0x2ec>)
    4274:	2301      	movs	r3, #1
    4276:	2203      	movs	r2, #3
    4278:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
    427c:	9000      	str	r0, [sp, #0]
    427e:	f204 40cc 	addw	r0, r4, #1228	; 0x4cc
    4282:	f001 f8cb 	bl	541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    4286:	4630      	mov	r0, r6
    4288:	f001 fb2c 	bl	58e4 <TimerSet::TimerSet()>
    428c:	2100      	movs	r1, #0
    428e:	4628      	mov	r0, r5
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
	_gameNum = 0;
    4290:	460f      	mov	r7, r1

//#include "nvData.h"
#include "TimerSet.h"
#include "LightSet.h"

PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
    4292:	f007 fef3 	bl	c07c <String::String(char const*)>
	msg->outln(F("Game init..."));
    4296:	492b      	ldr	r1, [pc, #172]	; (4344 <PinGame::PinGame(Board_Sys80b&)+0x2f0>)
    4298:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    429c:	f002 f8d8 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	delay(100);
    42a0:	2064      	movs	r0, #100	; 0x64
    42a2:	f006 f8fb 	bl	a49c <delay>
	extDisplay = new ExtTextDisplay(display);
    42a6:	2020      	movs	r0, #32
    42a8:	f007 fda2 	bl	bdf0 <operator new(unsigned int)>
    42ac:	4680      	mov	r8, r0
    42ae:	f104 0110 	add.w	r1, r4, #16
    42b2:	f7ff f98d 	bl	35d0 <ExtTextDisplay::ExtTextDisplay(TextDisplay&)>
    42b6:	f8c4 83a0 	str.w	r8, [r4, #928]	; 0x3a0
	lights = new LightSet(LAMPS_COUNT);
    42ba:	2008      	movs	r0, #8
    42bc:	f007 fd98 	bl	bdf0 <operator new(unsigned int)>
    42c0:	4680      	mov	r8, r0
    42c2:	2130      	movs	r1, #48	; 0x30
    42c4:	f7ff fd46 	bl	3d54 <LightSet::LightSet(int)>
	_gameName = String("<no_name>");
    42c8:	491f      	ldr	r1, [pc, #124]	; (4348 <PinGame::PinGame(Board_Sys80b&)+0x2f4>)

PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
    42ca:	f8c4 839c 	str.w	r8, [r4, #924]	; 0x39c
	_gameName = String("<no_name>");
    42ce:	a802      	add	r0, sp, #8
    42d0:	f007 fed4 	bl	c07c <String::String(char const*)>
    42d4:	a902      	add	r1, sp, #8
    42d6:	4628      	mov	r0, r5
	_gameNum = 0;
	tmr.name = F("Pinball timer");
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    42d8:	463d      	mov	r5, r7
PinGame::PinGame(Board_Sys80b& board) : Sys80b(board) {
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
    42da:	f007 ff75 	bl	c1c8 <String::operator=(String&&)>
    42de:	a802      	add	r0, sp, #8
    42e0:	f007 fe8c 	bl	bffc <String::~String()>
	_gameNum = 0;
	tmr.name = F("Pinball timer");
    42e4:	4630      	mov	r0, r6
	msg->outln(F("Game init..."));
	delay(100);
	extDisplay = new ExtTextDisplay(display);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
	_gameNum = 0;
    42e6:	f8a4 7518 	strh.w	r7, [r4, #1304]	; 0x518
	tmr.name = F("Pinball timer");
    42ea:	4918      	ldr	r1, [pc, #96]	; (434c <PinGame::PinGame(Board_Sys80b&)+0x2f8>)
    42ec:	f007 ff7e 	bl	c1ec <String::operator=(__FlashStringHelper const*)>
	for (int i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    42f0:	b2a9      	uxth	r1, r5
    42f2:	3501      	adds	r5, #1
    42f4:	2201      	movs	r2, #1
    42f6:	68a0      	ldr	r0, [r4, #8]
    42f8:	f7fe f9c0 	bl	267c <BitMappedSet::setProtection(unsigned short, bool)>
    42fc:	2d03      	cmp	r5, #3
    42fe:	d1f7      	bne.n	42f0 <PinGame::PinGame(Board_Sys80b&)+0x29c>
	//void switchModeStep(byte stp);
	byte getNextPlayerOn();
	String getTopPlayerString(byte playerNum);
	//void onPRBButtonPressed(Sys80bIO::buttonID bt);
	//void setDefaultLightSet();
	inline void setActiveLightSet(LightSet *ls) { LightGroup::activeLightSet = ls; }
    4300:	4b13      	ldr	r3, [pc, #76]	; (4350 <PinGame::PinGame(Board_Sys80b&)+0x2fc>)
	setActiveLightSet(lights);
	//reset();
}
    4302:	4620      	mov	r0, r4
    4304:	f8d4 239c 	ldr.w	r2, [r4, #924]	; 0x39c
    4308:	601a      	str	r2, [r3, #0]
    430a:	b006      	add	sp, #24
    430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4310:	20001068 	.word	0x20001068
    4314:	200010b8 	.word	0x200010b8
    4318:	200010cc 	.word	0x200010cc
    431c:	200010d8 	.word	0x200010d8
    4320:	200010f0 	.word	0x200010f0
    4324:	200010fc 	.word	0x200010fc
    4328:	20001108 	.word	0x20001108
    432c:	20001118 	.word	0x20001118
    4330:	20000720 	.word	0x20000720
    4334:	20000508 	.word	0x20000508
    4338:	20000510 	.word	0x20000510
    433c:	20001128 	.word	0x20001128
    4340:	20001130 	.word	0x20001130
    4344:	20001138 	.word	0x20001138
    4348:	20001148 	.word	0x20001148
    434c:	20001154 	.word	0x20001154
    4350:	20002988 	.word	0x20002988

00004354 <PinGame::setPinballMode(pinballMode)>:
	p.ballsLeft = getBallsCount();
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
    4354:	b570      	push	{r4, r5, r6, lr}
    4356:	b084      	sub	sp, #16
    4358:	4606      	mov	r6, r0
    435a:	460c      	mov	r4, r1
	String s;
    435c:	2100      	movs	r1, #0
    435e:	4668      	mov	r0, sp
    4360:	f007 fe8c 	bl	c07c <String::String(char const*)>

	msg->clr();
    4364:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
    4368:	f001 fffe 	bl	6368 <Msg::clr()>
	msg->out(F("Switching mode: "));
    436c:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
    4370:	4922      	ldr	r1, [pc, #136]	; (43fc <PinGame::setPinballMode(pinballMode)+0xa8>)
    4372:	f002 f9d9 	bl	6728 <Msg::out(__FlashStringHelper const*)>
	msg->outln(m);
    4376:	4621      	mov	r1, r4
    4378:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
    437c:	220a      	movs	r2, #10
    437e:	f002 f899 	bl	64b4 <Msg::outln(unsigned long, int)>
	_mode = m;
    4382:	f886 451a 	strb.w	r4, [r6, #1306]	; 0x51a
	//modeStep = 0;
	switch (m) {
    4386:	b1ec      	cbz	r4, 43c4 <PinGame::setPinballMode(pinballMode)+0x70>
    4388:	2c01      	cmp	r4, #1
    438a:	d116      	bne.n	43ba <PinGame::setPinballMode(pinballMode)+0x66>
	inline void setOnGameRelay(bool st) { setLamp(Q_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    438c:	2300      	movs	r3, #0
    438e:	4622      	mov	r2, r4
    4390:	68b0      	ldr	r0, [r6, #8]
    4392:	4619      	mov	r1, r3
    4394:	f7fe f93a 	bl	260c <BitMappedSet::setState(unsigned short, bool, bool)>
		extDisplay->clear();
		_gameOver = true;
		break;
	case GAME_MODE:
		setOnGameRelay(true); // game over
		extDisplay->clear();
    4398:	f8d6 53a0 	ldr.w	r5, [r6, #928]	; 0x3a0
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	}

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    439c:	7f2b      	ldrb	r3, [r5, #28]
    439e:	b14b      	cbz	r3, 43b4 <PinGame::setPinballMode(pinballMode)+0x60>
    43a0:	2400      	movs	r4, #0
    43a2:	4621      	mov	r1, r4
    43a4:	3401      	adds	r4, #1
    43a6:	4628      	mov	r0, r5
    43a8:	f7ff f8f2 	bl	3590 <ExtTextDisplay::clearLine(unsigned char)>
    43ac:	7f2b      	ldrb	r3, [r5, #28]
    43ae:	b2e4      	uxtb	r4, r4
    43b0:	42a3      	cmp	r3, r4
    43b2:	d8f6      	bhi.n	43a2 <PinGame::setPinballMode(pinballMode)+0x4e>
		_gameOver = false;
    43b4:	2300      	movs	r3, #0
    43b6:	f886 351b 	strb.w	r3, [r6, #1307]	; 0x51b
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
	String s;
    43ba:	4668      	mov	r0, sp
    43bc:	f007 fe1e 	bl	bffc <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    43c0:	b004      	add	sp, #16
    43c2:	bd70      	pop	{r4, r5, r6, pc}
    43c4:	4623      	mov	r3, r4
    43c6:	4622      	mov	r2, r4
    43c8:	4621      	mov	r1, r4
    43ca:	68b0      	ldr	r0, [r6, #8]
    43cc:	f7fe f91e 	bl	260c <BitMappedSet::setState(unsigned short, bool, bool)>
	_mode = m;
	//modeStep = 0;
	switch (m) {
	case SHOW_MODE:
		setOnGameRelay(false); // game over
		extDisplay->clear();
    43d0:	f8d6 53a0 	ldr.w	r5, [r6, #928]	; 0x3a0
    43d4:	7f2b      	ldrb	r3, [r5, #28]
    43d6:	b143      	cbz	r3, 43ea <PinGame::setPinballMode(pinballMode)+0x96>
    43d8:	4621      	mov	r1, r4
    43da:	3401      	adds	r4, #1
    43dc:	4628      	mov	r0, r5
    43de:	f7ff f8d7 	bl	3590 <ExtTextDisplay::clearLine(unsigned char)>
    43e2:	7f2b      	ldrb	r3, [r5, #28]
    43e4:	b2e4      	uxtb	r4, r4
    43e6:	42a3      	cmp	r3, r4
    43e8:	d8f6      	bhi.n	43d8 <PinGame::setPinballMode(pinballMode)+0x84>
		_gameOver = true;
    43ea:	2301      	movs	r3, #1
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
	String s;
    43ec:	4668      	mov	r0, sp
	//modeStep = 0;
	switch (m) {
	case SHOW_MODE:
		setOnGameRelay(false); // game over
		extDisplay->clear();
		_gameOver = true;
    43ee:	f886 351b 	strb.w	r3, [r6, #1307]	; 0x51b
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void PinGame::setPinballMode(pinballMode m) {
	String s;
    43f2:	f007 fe03 	bl	bffc <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    43f6:	b004      	add	sp, #16
    43f8:	bd70      	pop	{r4, r5, r6, pc}
    43fa:	bf00      	nop
    43fc:	20001164 	.word	0x20001164

00004400 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>:

	String crStr = String(credits);
	extDisplay->putText(1, crStr, 10 - crStr.length());
}

String PinGame::getScoreStr(uint32_t scr, byte digits, bool leadingZeros, bool dots) {
    4400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4404:	b088      	sub	sp, #32
    4406:	4617      	mov	r7, r2
    4408:	4606      	mov	r6, r0
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(const __FlashStringHelper *pgmstr) : String(pgmstr) {}
    440a:	4933      	ldr	r1, [pc, #204]	; (44d8 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xd8>)
    440c:	a804      	add	r0, sp, #16
    440e:	461d      	mov	r5, r3
    4410:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    4414:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    4418:	f007 fe44 	bl	c0a4 <String::String(__FlashStringHelper const*)>
	byte ch, i, len;
	String st = F("0000000000") + String(scr);
    441c:	220a      	movs	r2, #10
    441e:	4639      	mov	r1, r7
    4420:	4668      	mov	r0, sp
    4422:	f007 fe97 	bl	c154 <String::String(unsigned long, unsigned char)>
    4426:	4669      	mov	r1, sp
    4428:	a804      	add	r0, sp, #16
    442a:	f007 ff5b 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    442e:	4601      	mov	r1, r0
    4430:	4630      	mov	r0, r6
    4432:	f007 fe49 	bl	c0c8 <String::String(String const&)>
    4436:	4668      	mov	r0, sp
    4438:	f007 fde0 	bl	bffc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    443c:	a804      	add	r0, sp, #16
    443e:	f007 fddd 	bl	bffc <String::~String()>
	if (digits > 10) digits = 10;
	st = st.substring(st.length() - digits);
    4442:	2d0a      	cmp	r5, #10
    4444:	68b2      	ldr	r2, [r6, #8]
    4446:	4631      	mov	r1, r6
    4448:	a804      	add	r0, sp, #16
    444a:	bf94      	ite	ls
    444c:	1b52      	subls	r2, r2, r5
    444e:	3a0a      	subhi	r2, #10
    4450:	f007 ffd0 	bl	c3f4 <String::substring(unsigned int) const>
    4454:	a904      	add	r1, sp, #16
    4456:	4630      	mov	r0, r6
    4458:	f007 feb6 	bl	c1c8 <String::operator=(String&&)>
    445c:	a804      	add	r0, sp, #16
    445e:	f007 fdcd 	bl	bffc <String::~String()>
	len = st.length();
    4462:	7a37      	ldrb	r7, [r6, #8]

	// zero clearing
	if (!leadingZeros && len > 2) { // cut leading zeros
    4464:	2f02      	cmp	r7, #2
    4466:	bf94      	ite	ls
    4468:	2300      	movls	r3, #0
    446a:	2301      	movhi	r3, #1
    446c:	42a3      	cmp	r3, r4
    446e:	d902      	bls.n	4476 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x76>
		for (i = 0; i < (len - 2) && st.charAt(i) == '0'; i++) st.setCharAt(i, ' ');
    4470:	1ebd      	subs	r5, r7, #2
    4472:	2d00      	cmp	r5, #0
    4474:	dc1e      	bgt.n	44b4 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xb4>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
    4476:	2f03      	cmp	r7, #3
    4478:	d918      	bls.n	44ac <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xac>
    447a:	f1b8 0f00 	cmp.w	r8, #0
    447e:	d015      	beq.n	44ac <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xac>
    4480:	1f3d      	subs	r5, r7, #4
    4482:	2403      	movs	r4, #3
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
    4484:	4629      	mov	r1, r5
    4486:	4630      	mov	r0, r6
    4488:	f007 ff58 	bl	c33c <String::charAt(unsigned int) const>
    448c:	4603      	mov	r3, r0
			if (ch == ' ') break;
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    448e:	4629      	mov	r1, r5
    4490:	4630      	mov	r0, r6
    4492:	f063 027f 	orn	r2, r3, #127	; 0x7f
	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
    4496:	2b20      	cmp	r3, #32
    4498:	f1a5 0503 	sub.w	r5, r5, #3
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    449c:	b2d2      	uxtb	r2, r2
	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
    449e:	d005      	beq.n	44ac <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xac>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
    44a0:	3403      	adds	r4, #3
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    44a2:	f007 ff55 	bl	c350 <String::setCharAt(unsigned int, char)>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
    44a6:	b2e4      	uxtb	r4, r4
    44a8:	42a7      	cmp	r7, r4
    44aa:	d8eb      	bhi.n	4484 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x84>
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
		}
	}

	return st;
}
    44ac:	4630      	mov	r0, r6
    44ae:	b008      	add	sp, #32
    44b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	st = st.substring(st.length() - digits);
	len = st.length();

	// zero clearing
	if (!leadingZeros && len > 2) { // cut leading zeros
		for (i = 0; i < (len - 2) && st.charAt(i) == '0'; i++) st.setCharAt(i, ' ');
    44b4:	2400      	movs	r4, #0
    44b6:	4621      	mov	r1, r4
    44b8:	4630      	mov	r0, r6
    44ba:	f007 ff3f 	bl	c33c <String::charAt(unsigned int) const>
    44be:	2830      	cmp	r0, #48	; 0x30
    44c0:	d1d9      	bne.n	4476 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x76>
    44c2:	4621      	mov	r1, r4
    44c4:	3401      	adds	r4, #1
    44c6:	2220      	movs	r2, #32
    44c8:	4630      	mov	r0, r6
    44ca:	b2e4      	uxtb	r4, r4
    44cc:	f007 ff40 	bl	c350 <String::setCharAt(unsigned int, char)>
    44d0:	42ac      	cmp	r4, r5
    44d2:	dad0      	bge.n	4476 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0x76>
    44d4:	e7ef      	b.n	44b6 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)+0xb6>
    44d6:	bf00      	nop
    44d8:	20001180 	.word	0x20001180

000044dc <PinGame::displayScoresAndCredits()>:
	extDisplay->putText(1, crStr, 9);
	//delete& crStr;
}

// TODO
void PinGame::displayScoresAndCredits() {
    44dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44e0:	b097      	sub	sp, #92	; 0x5c
    44e2:	4606      	mov	r6, r0
	String st[4];
    44e4:	2100      	movs	r1, #0
    44e6:	a806      	add	r0, sp, #24
    44e8:	f007 fdc8 	bl	c07c <String::String(char const*)>
    44ec:	2100      	movs	r1, #0
    44ee:	a80a      	add	r0, sp, #40	; 0x28
    44f0:	f007 fdc4 	bl	c07c <String::String(char const*)>
    44f4:	2100      	movs	r1, #0
    44f6:	a80e      	add	r0, sp, #56	; 0x38
    44f8:	f007 fdc0 	bl	c07c <String::String(char const*)>
    44fc:	a812      	add	r0, sp, #72	; 0x48
    44fe:	2100      	movs	r1, #0
    4500:	f007 fdbc 	bl	c07c <String::String(char const*)>
	//displayFx->putText(0, st[0], 0);
	//displayFx->putText(0, st[1], 12);
	//displayFx->putText(1, st[2], 0);
	//displayFx->putText(1, st[3], 12);

	extDisplay->clear();
    4504:	f8d6 53a0 	ldr.w	r5, [r6, #928]	; 0x3a0
    4508:	7f2b      	ldrb	r3, [r5, #28]
    450a:	b14b      	cbz	r3, 4520 <PinGame::displayScoresAndCredits()+0x44>
    450c:	2400      	movs	r4, #0
    450e:	4621      	mov	r1, r4
    4510:	3401      	adds	r4, #1
    4512:	4628      	mov	r0, r5
    4514:	f7ff f83c 	bl	3590 <ExtTextDisplay::clearLine(unsigned char)>
    4518:	7f2b      	ldrb	r3, [r5, #28]
    451a:	b2e4      	uxtb	r4, r4
    451c:	42a3      	cmp	r3, r4
    451e:	d8f6      	bhi.n	450e <PinGame::displayScoresAndCredits()+0x32>
    4520:	4635      	mov	r5, r6
    4522:	af06      	add	r7, sp, #24
    4524:	f106 0930 	add.w	r9, r6, #48	; 0x30
	for (i = 0; i < 4; i++) st[i] = getScoreStr(player[i].score, SCORE_DIGITS, false);
    4528:	f04f 0800 	mov.w	r8, #0
    452c:	2308      	movs	r3, #8
    452e:	f8d5 234c 	ldr.w	r2, [r5, #844]	; 0x34c
    4532:	4631      	mov	r1, r6
    4534:	f8cd 8004 	str.w	r8, [sp, #4]
    4538:	eb0d 0003 	add.w	r0, sp, r3
    453c:	f8cd 8000 	str.w	r8, [sp]
    4540:	f7ff ff5e 	bl	4400 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>
    4544:	350c      	adds	r5, #12
    4546:	a902      	add	r1, sp, #8
    4548:	4638      	mov	r0, r7
    454a:	f007 fe3d 	bl	c1c8 <String::operator=(String&&)>
    454e:	a802      	add	r0, sp, #8
    4550:	f007 fd54 	bl	bffc <String::~String()>
    4554:	45a9      	cmp	r9, r5
    4556:	f107 0710 	add.w	r7, r7, #16
    455a:	f04f 0400 	mov.w	r4, #0
    455e:	d1e5      	bne.n	452c <PinGame::displayScoresAndCredits()+0x50>
	extDisplay->putText(0, st[0] ,0);
    4560:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    4564:	4623      	mov	r3, r4
    4566:	aa06      	add	r2, sp, #24
    4568:	4621      	mov	r1, r4
    456a:	9401      	str	r4, [sp, #4]
    456c:	9400      	str	r4, [sp, #0]
    456e:	f7ff f8f9 	bl	3764 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(0, st[1], 12);
    4572:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    4576:	aa0a      	add	r2, sp, #40	; 0x28
    4578:	4621      	mov	r1, r4
    457a:	9401      	str	r4, [sp, #4]
    457c:	230c      	movs	r3, #12
    457e:	9400      	str	r4, [sp, #0]
    4580:	f7ff f8f0 	bl	3764 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(1, st[2], 0);
    4584:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    4588:	4623      	mov	r3, r4
    458a:	aa0e      	add	r2, sp, #56	; 0x38
    458c:	9401      	str	r4, [sp, #4]
    458e:	2101      	movs	r1, #1
    4590:	9400      	str	r4, [sp, #0]
    4592:	f7ff f8e7 	bl	3764 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(1, st[3], 12);
    4596:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    459a:	aa12      	add	r2, sp, #72	; 0x48
    459c:	230c      	movs	r3, #12
    459e:	9401      	str	r4, [sp, #4]
    45a0:	2101      	movs	r1, #1
    45a2:	9400      	str	r4, [sp, #0]
    45a4:	f7ff f8de 	bl	3764 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>

	String crStr = String(credits);
    45a8:	f896 137c 	ldrb.w	r1, [r6, #892]	; 0x37c
    45ac:	a802      	add	r0, sp, #8
    45ae:	f007 fda9 	bl	c104 <String::String(unsigned char)>
	extDisplay->putText(1, crStr, 10 - crStr.length());
    45b2:	9b04      	ldr	r3, [sp, #16]
    45b4:	aa02      	add	r2, sp, #8
    45b6:	2101      	movs	r1, #1
    45b8:	f1c3 030a 	rsb	r3, r3, #10
    45bc:	f8d6 03a0 	ldr.w	r0, [r6, #928]	; 0x3a0
    45c0:	9401      	str	r4, [sp, #4]
    45c2:	b2db      	uxtb	r3, r3
    45c4:	9400      	str	r4, [sp, #0]
    45c6:	f7ff f8cd 	bl	3764 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	extDisplay->putText(0, st[0] ,0);
	extDisplay->putText(0, st[1], 12);
	extDisplay->putText(1, st[2], 0);
	extDisplay->putText(1, st[3], 12);

	String crStr = String(credits);
    45ca:	a802      	add	r0, sp, #8
    45cc:	f007 fd16 	bl	bffc <String::~String()>
	//delete& crStr;
}

// TODO
void PinGame::displayScoresAndCredits() {
	String st[4];
    45d0:	a812      	add	r0, sp, #72	; 0x48
    45d2:	f007 fd13 	bl	bffc <String::~String()>
    45d6:	a80e      	add	r0, sp, #56	; 0x38
    45d8:	f007 fd10 	bl	bffc <String::~String()>
    45dc:	a80a      	add	r0, sp, #40	; 0x28
    45de:	f007 fd0d 	bl	bffc <String::~String()>
    45e2:	a806      	add	r0, sp, #24
    45e4:	f007 fd0a 	bl	bffc <String::~String()>
	extDisplay->putText(1, st[2], 0);
	extDisplay->putText(1, st[3], 12);

	String crStr = String(credits);
	extDisplay->putText(1, crStr, 10 - crStr.length());
}
    45e8:	b017      	add	sp, #92	; 0x5c
    45ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    45ee:	bf00      	nop

000045f0 <PinGame::loadHighScores()>:
	uint32_t sc;
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
    45f0:	2300      	movs	r3, #0
	}

	return st;
}

void PinGame::loadHighScores() {
    45f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    45f6:	4606      	mov	r6, r0
    45f8:	b089      	sub	sp, #36	; 0x24
	uint32_t sc;
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
    45fa:	2424      	movs	r4, #36	; 0x24
    45fc:	f500 7527 	add.w	r5, r0, #668	; 0x29c
    4600:	f500 7954 	add.w	r9, r0, #848	; 0x350
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
    4604:	4698      	mov	r8, r3
    4606:	2701      	movs	r7, #1
	uint32_t sc;
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
    4608:	f88d 300f 	strb.w	r3, [sp, #15]
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
    460c:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4610:	4621      	mov	r1, r4
    4612:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4616:	f002 fb21 	bl	6c5c <NVData_class::readDWord(unsigned short)>
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
    461a:	2308      	movs	r3, #8

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
    461c:	4602      	mov	r2, r0
		topScore[i].score = sc;
    461e:	f845 0c04 	str.w	r0, [r5, #-4]
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
    4622:	4631      	mov	r1, r6
    4624:	a804      	add	r0, sp, #16
    4626:	9701      	str	r7, [sp, #4]
    4628:	f8cd 8000 	str.w	r8, [sp]
    462c:	f7ff fee8 	bl	4400 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>
    4630:	a904      	add	r1, sp, #16
    4632:	4628      	mov	r0, r5
    4634:	f007 fdc8 	bl	c1c8 <String::operator=(String&&)>
    4638:	a804      	add	r0, sp, #16
    463a:	f007 fcdf 	bl	bffc <String::~String()>
		inits[0] = (char)(hw->NVData->readByte(j + 4));
    463e:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4642:	1d21      	adds	r1, r4, #4
    4644:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4648:	b289      	uxth	r1, r1
    464a:	f002 fac7 	bl	6bdc <NVData_class::readByte(unsigned short)>
		inits[1] = (char)(hw->NVData->readByte(j + 5));
    464e:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4652:	1d61      	adds	r1, r4, #5
	for (i = 0; i < TOP_SCORES; i++) {
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
		inits[0] = (char)(hw->NVData->readByte(j + 4));
    4654:	f88d 000c 	strb.w	r0, [sp, #12]
		inits[1] = (char)(hw->NVData->readByte(j + 5));
    4658:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    465c:	b289      	uxth	r1, r1
    465e:	f002 fabd 	bl	6bdc <NVData_class::readByte(unsigned short)>
		inits[2] = (char)(hw->NVData->readByte(j + 6));
    4662:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    4666:	1da1      	adds	r1, r4, #6
		j = 36 + i * 8;
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
		inits[0] = (char)(hw->NVData->readByte(j + 4));
		inits[1] = (char)(hw->NVData->readByte(j + 5));
    4668:	f88d 000d 	strb.w	r0, [sp, #13]
		inits[2] = (char)(hw->NVData->readByte(j + 6));
    466c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4670:	3408      	adds	r4, #8
    4672:	b289      	uxth	r1, r1
    4674:	f002 fab2 	bl	6bdc <NVData_class::readByte(unsigned short)>
		topScore[i].playerName = String(inits);
    4678:	a903      	add	r1, sp, #12
		sc = hw->NVData->readDWord(j);
		topScore[i].score = sc;
		topScore[i].scoreString = getScoreStr(sc, SCORE_DIGITS, false, true);
		inits[0] = (char)(hw->NVData->readByte(j + 4));
		inits[1] = (char)(hw->NVData->readByte(j + 5));
		inits[2] = (char)(hw->NVData->readByte(j + 6));
    467a:	f88d 000e 	strb.w	r0, [sp, #14]
		topScore[i].playerName = String(inits);
    467e:	a804      	add	r0, sp, #16
    4680:	f007 fcfc 	bl	c07c <String::String(char const*)>
    4684:	a904      	add	r1, sp, #16
    4686:	f105 0010 	add.w	r0, r5, #16
    468a:	3524      	adds	r5, #36	; 0x24
    468c:	f007 fd9c 	bl	c1c8 <String::operator=(String&&)>
    4690:	a804      	add	r0, sp, #16
    4692:	f007 fcb3 	bl	bffc <String::~String()>
	char inits[4];
	//String scStr;

	//msg->outln(F("- loadHighScores()..."));
	inits[3] = 0;
	for (i = 0; i < TOP_SCORES; i++) {
    4696:	454d      	cmp	r5, r9
    4698:	b2a4      	uxth	r4, r4
    469a:	d1b7      	bne.n	460c <PinGame::loadHighScores()+0x1c>
		//Serial.print(topScore[i].playerName);
		//Serial.print(" -  ");		
		//Serial.println(topScore[i].scoreString);
		//delay(100);
	}
}
    469c:	b009      	add	sp, #36	; 0x24
    469e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    46a2:	bf00      	nop

000046a4 <PinGame::loadAwardScoreLevels()>:

void PinGame::loadAwardScoreLevels() {
    46a4:	b570      	push	{r4, r5, r6, lr}
    46a6:	4606      	mov	r6, r0
    46a8:	2416      	movs	r4, #22
    46aa:	f500 7562 	add.w	r5, r0, #904	; 0x388
	//msg->outln(F("- loadAwardScoreLevels()..."));
	for (byte i = 0; i < 3; i++) {
		awardLevelScore[i] = hw->NVData->readDWord(22 + i * 4);
    46ae:	4621      	mov	r1, r4
    46b0:	3404      	adds	r4, #4
    46b2:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
    46b6:	b2a4      	uxth	r4, r4
    46b8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    46bc:	f002 face 	bl	6c5c <NVData_class::readDWord(unsigned short)>
	}
}

void PinGame::loadAwardScoreLevels() {
	//msg->outln(F("- loadAwardScoreLevels()..."));
	for (byte i = 0; i < 3; i++) {
    46c0:	2c22      	cmp	r4, #34	; 0x22
		awardLevelScore[i] = hw->NVData->readDWord(22 + i * 4);
    46c2:	f845 0f04 	str.w	r0, [r5, #4]!
	}
}

void PinGame::loadAwardScoreLevels() {
	//msg->outln(F("- loadAwardScoreLevels()..."));
	for (byte i = 0; i < 3; i++) {
    46c6:	d1f2      	bne.n	46ae <PinGame::loadAwardScoreLevels()+0xa>
		awardLevelScore[i] = hw->NVData->readDWord(22 + i * 4);
		//Serial.printf("level %d: ", i + 1);
		//Serial.println(awardLevelScore[i]);
	}
}
    46c8:	bd70      	pop	{r4, r5, r6, pc}
    46ca:	bf00      	nop

000046cc <PinGame::loadCoinsPerCredits()>:

void PinGame::loadCoinsPerCredits() {
    46cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46d0:	4607      	mov	r7, r0
    46d2:	2500      	movs	r5, #0
			ch_coins[i] = coins_ratio[v];
			//Serial.printf("chute %d: %d credit(s) for %d coin(s)\n", 
			//	i+1 , ch_credits[i], ch_coins[i]);
		}
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
    46d4:	f04f 0801 	mov.w	r8, #1

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
    46d8:	4e0e      	ldr	r6, [pc, #56]	; (4714 <PinGame::loadCoinsPerCredits()+0x48>)
    46da:	f500 7460 	add.w	r4, r0, #896	; 0x380
void PinGame::loadCoinsPerCredits() {
	byte i, v;

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
    46de:	b2e9      	uxtb	r1, r5
    46e0:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
    46e4:	f001 fcac 	bl	6040 <Board_Sys80b::getSettingByte(unsigned char)>
    46e8:	f000 001f 	and.w	r0, r0, #31
		if (v <= 24) {
    46ec:	2818      	cmp	r0, #24
			ch_credits[i] = credits_ratio[v];
			ch_coins[i] = coins_ratio[v];
    46ee:	eb06 0300 	add.w	r3, r6, r0
	byte i, v;

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
		if (v <= 24) {
    46f2:	d80a      	bhi.n	470a <PinGame::loadCoinsPerCredits()+0x3e>
			ch_credits[i] = credits_ratio[v];
    46f4:	5c32      	ldrb	r2, [r6, r0]
			ch_coins[i] = coins_ratio[v];
    46f6:	7f1b      	ldrb	r3, [r3, #28]

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i) & 0b00011111;
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
    46f8:	7022      	strb	r2, [r4, #0]
			ch_coins[i] = coins_ratio[v];
    46fa:	f804 3c03 	strb.w	r3, [r4, #-3]
    46fe:	3501      	adds	r5, #1
    4700:	3401      	adds	r4, #1

void PinGame::loadCoinsPerCredits() {
	byte i, v;

	//msg->outln(F("- loadCoinsPerCredits()..."));
	for (i = 0; i < 3; i++) {
    4702:	2d03      	cmp	r5, #3
    4704:	d1eb      	bne.n	46de <PinGame::loadCoinsPerCredits()+0x12>
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
			ch_coins[i] = 1;
		}
	}
}
    4706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ch_coins[i] = coins_ratio[v];
			//Serial.printf("chute %d: %d credit(s) for %d coin(s)\n", 
			//	i+1 , ch_credits[i], ch_coins[i]);
		}
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
    470a:	f884 8000 	strb.w	r8, [r4]
			ch_coins[i] = 1;
    470e:	f804 8c03 	strb.w	r8, [r4, #-3]
    4712:	e7f4      	b.n	46fe <PinGame::loadCoinsPerCredits()+0x32>
    4714:	60001620 	.word	0x60001620

00004718 <PinGame::reset()>:
PinGame::~PinGame() {
	delete lights;
}

// pinball generic initialization procedures
void PinGame::reset() {
    4718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    471c:	4605      	mov	r5, r0
    471e:	b08b      	sub	sp, #44	; 0x2c
	byte i;

	msg->outln(F("Game reset..."));
    4720:	493e      	ldr	r1, [pc, #248]	; (481c <PinGame::reset()+0x104>)
	//delay(100);
	Sys80b::reset();
	// variables init
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
    4722:	2600      	movs	r6, #0

// pinball generic initialization procedures
void PinGame::reset() {
	byte i;

	msg->outln(F("Game reset..."));
    4724:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
    4728:	f505 742b 	add.w	r4, r5, #684	; 0x2ac
    472c:	f001 fe90 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	//delay(100);
	Sys80b::reset();
    4730:	4628      	mov	r0, r5
    4732:	f000 fbdb 	bl	4eec <Sys80b::reset()>
    4736:	f8d5 239c 	ldr.w	r2, [r5, #924]	; 0x39c
    473a:	4b39      	ldr	r3, [pc, #228]	; (4820 <PinGame::reset()+0x108>)
	//_gameOver = true;
	_players = 0;
	credits = 0; // TODO

	//hw->lcdclr();
	String st = F("Game: ");
    473c:	a802      	add	r0, sp, #8
    473e:	4939      	ldr	r1, [pc, #228]	; (4824 <PinGame::reset()+0x10c>)
    4740:	f505 7958 	add.w	r9, r5, #864	; 0x360
	msg->outln(F("Game reset..."));
	//delay(100);
	Sys80b::reset();
	// variables init
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
    4744:	f885 6283 	strb.w	r6, [r5, #643]	; 0x283

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
	for (i = 0; i < TOP_SCORES; i++) {
		topScore[i].playerName = String("FAB");
		topScore[i].score = 1000;
    4748:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	//delay(100);
	Sys80b::reset();
	// variables init
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
	_keyRepeat = false;
    474c:	f885 6284 	strb.w	r6, [r5, #644]	; 0x284
	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
	for (i = 0; i < TOP_SCORES; i++) {
		topScore[i].playerName = String("FAB");
		topScore[i].score = 1000;
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
    4750:	2701      	movs	r7, #1
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
	_keyRepeat = false;
	//_mode = NORMAL_MODE;
	//_gameOver = true;
	_players = 0;
    4752:	f885 651c 	strb.w	r6, [r5, #1308]	; 0x51c
	credits = 0; // TODO
    4756:	f885 637c 	strb.w	r6, [r5, #892]	; 0x37c
    475a:	601a      	str	r2, [r3, #0]

	//hw->lcdclr();
	String st = F("Game: ");
    475c:	f007 fca2 	bl	c0a4 <String::String(__FlashStringHelper const*)>
	//void renderNextLampsGroup();
	//void updateLights(uint32_t ms);
	//void updateAndRenderLamps(uint32_t ms);
	//void onSwitchEvent(byte sw, bool st);
	virtual void millisRoutine(uint32_t& ms);
	inline String getGameName() { return _gameName; } // returns game name
    4760:	f505 61a1 	add.w	r1, r5, #1288	; 0x508
    4764:	a806      	add	r0, sp, #24
    4766:	f007 fcaf 	bl	c0c8 <String::String(String const&)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    476a:	a906      	add	r1, sp, #24
    476c:	a802      	add	r0, sp, #8
    476e:	f007 fd83 	bl	c278 <String::append(String const&)>
	st += getGameName();
    4772:	a806      	add	r0, sp, #24
    4774:	f007 fc42 	bl	bffc <String::~String()>
	hw->lcdprn(0, st);
    4778:	4633      	mov	r3, r6
    477a:	aa02      	add	r2, sp, #8
    477c:	4631      	mov	r1, r6
    477e:	f8d5 028c 	ldr.w	r0, [r5, #652]	; 0x28c
    4782:	f001 fa71 	bl	5c68 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>
	//delay(50);

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
    4786:	f885 6383 	strb.w	r6, [r5, #899]	; 0x383
    478a:	f885 6384 	strb.w	r6, [r5, #900]	; 0x384
    478e:	f885 6385 	strb.w	r6, [r5, #901]	; 0x385
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
    4792:	f8c5 634c 	str.w	r6, [r5, #844]	; 0x34c
    4796:	f8c5 6358 	str.w	r6, [r5, #856]	; 0x358
    479a:	f8c5 6364 	str.w	r6, [r5, #868]	; 0x364
    479e:	f8c5 6370 	str.w	r6, [r5, #880]	; 0x370
	for (i = 0; i < TOP_SCORES; i++) {
		topScore[i].playerName = String("FAB");
    47a2:	4921      	ldr	r1, [pc, #132]	; (4828 <PinGame::reset()+0x110>)
    47a4:	a806      	add	r0, sp, #24
    47a6:	f007 fc69 	bl	c07c <String::String(char const*)>
    47aa:	a906      	add	r1, sp, #24
    47ac:	4620      	mov	r0, r4
    47ae:	f007 fd0b 	bl	c1c8 <String::operator=(String&&)>
    47b2:	a806      	add	r0, sp, #24
    47b4:	f007 fc22 	bl	bffc <String::~String()>
		topScore[i].score = 1000;
    47b8:	f844 8c14 	str.w	r8, [r4, #-20]
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
    47bc:	2308      	movs	r3, #8
    47be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    47c2:	4629      	mov	r1, r5
    47c4:	a806      	add	r0, sp, #24
    47c6:	9701      	str	r7, [sp, #4]
    47c8:	9700      	str	r7, [sp, #0]
    47ca:	f7ff fe19 	bl	4400 <PinGame::getScoreStr(unsigned long, unsigned char, bool, bool)>
    47ce:	a906      	add	r1, sp, #24
    47d0:	f1a4 0010 	sub.w	r0, r4, #16
    47d4:	3424      	adds	r4, #36	; 0x24
    47d6:	f007 fcf7 	bl	c1c8 <String::operator=(String&&)>
    47da:	a806      	add	r0, sp, #24
    47dc:	f007 fc0e 	bl	bffc <String::~String()>
	hw->lcdprn(0, st);
	//delay(50);

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
	for (i = 0; i < TOP_SCORES; i++) {
    47e0:	45a1      	cmp	r9, r4
    47e2:	d1de      	bne.n	47a2 <PinGame::reset()+0x8a>
    47e4:	2400      	movs	r4, #0
		topScore[i].playerName = String("FAB");
		topScore[i].score = 1000;
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
	}
	for (i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    47e6:	b2a1      	uxth	r1, r4
    47e8:	3401      	adds	r4, #1
    47ea:	2201      	movs	r2, #1
    47ec:	68a8      	ldr	r0, [r5, #8]
    47ee:	f7fd ff45 	bl	267c <BitMappedSet::setProtection(unsigned short, bool)>
    47f2:	2c03      	cmp	r4, #3
    47f4:	d1f7      	bne.n	47e6 <PinGame::reset()+0xce>
														   
	//_3balls = (getBallsCount() == 3) ? true : false;
	_3balls = true; // TODO
    47f6:	2301      	movs	r3, #1
	loadCoinsPerCredits();
    47f8:	4628      	mov	r0, r5
		topScore[i].scoreString = getScoreStr(topScore[i].score, 8, true, true);
	}
	for (i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
														   
	//_3balls = (getBallsCount() == 3) ? true : false;
	_3balls = true; // TODO
    47fa:	f885 351d 	strb.w	r3, [r5, #1309]	; 0x51d
	loadCoinsPerCredits();
    47fe:	f7ff ff65 	bl	46cc <PinGame::loadCoinsPerCredits()>
	loadAwardScoreLevels();
    4802:	4628      	mov	r0, r5
    4804:	f7ff ff4e 	bl	46a4 <PinGame::loadAwardScoreLevels()>
	loadHighScores();
    4808:	4628      	mov	r0, r5
    480a:	f7ff fef1 	bl	45f0 <PinGame::loadHighScores()>
	//_gameOver = true;
	_players = 0;
	credits = 0; // TODO

	//hw->lcdclr();
	String st = F("Game: ");
    480e:	a802      	add	r0, sp, #8
    4810:	f007 fbf4 	bl	bffc <String::~String()>
	loadAwardScoreLevels();
	loadHighScores();
	//defaultBallsPerPlay = (getSettingSwitch(25) == 1) ? 3 : 5;
	
	//setPinballMode(SHOW_MODE);
}
    4814:	b00b      	add	sp, #44	; 0x2c
    4816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    481a:	bf00      	nop
    481c:	2000118c 	.word	0x2000118c
    4820:	20002988 	.word	0x20002988
    4824:	2000119c 	.word	0x2000119c
    4828:	200011a4 	.word	0x200011a4

0000482c <PinGame::addCredits(unsigned char)>:
		addCredits(ch_credits[cch]);
		coins[cch] = 0;
	}
}

void PinGame::addCredits(byte increment) {
    482c:	b538      	push	{r3, r4, r5, lr}
    482e:	4604      	mov	r4, r0
    4830:	460d      	mov	r5, r1
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4832:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
    4836:	2101      	movs	r1, #1
    4838:	f001 fc02 	bl	6040 <Board_Sys80b::getSettingByte(unsigned char)>
	//prevcr = credits;
	credits += increment;
    483c:	f894 137c 	ldrb.w	r1, [r4, #892]	; 0x37c
	}
}

void PinGame::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4840:	4b06      	ldr	r3, [pc, #24]	; (485c <PinGame::addCredits(unsigned char)+0x30>)
    4842:	f3c0 1087 	ubfx	r0, r0, #6, #8
	//prevcr = credits;
	credits += increment;
    4846:	4429      	add	r1, r5
	}
}

void PinGame::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    4848:	4418      	add	r0, r3
	//prevcr = credits;
	credits += increment;
    484a:	b2c9      	uxtb	r1, r1
	}
}

void PinGame::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    484c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	//prevcr = credits;
	credits += increment;
    4850:	4299      	cmp	r1, r3
    4852:	bf28      	it	cs
    4854:	4619      	movcs	r1, r3
    4856:	f884 137c 	strb.w	r1, [r4, #892]	; 0x37c
    485a:	bd38      	pop	{r3, r4, r5, pc}
    485c:	60001620 	.word	0x60001620

00004860 <PinGame::addScore(unsigned long)>:
	player[playerOn].ballsLeft++;
	activateSolenoid(KNOCKER_SOL, 250); // knocker
	//stdAct.knocker.activate(250);
}

void PinGame::addScore(uint32_t sc) {
    4860:	b570      	push	{r4, r5, r6, lr}
	byte lev;

	player[playerOn].score += sc;
    4862:	f890 3387 	ldrb.w	r3, [r0, #903]	; 0x387
	player[playerOn].ballsLeft++;
	activateSolenoid(KNOCKER_SOL, 250); // knocker
	//stdAct.knocker.activate(250);
}

void PinGame::addScore(uint32_t sc) {
    4866:	4604      	mov	r4, r0
	byte lev;

	player[playerOn].score += sc;
    4868:	005d      	lsls	r5, r3, #1
    486a:	18ea      	adds	r2, r5, r3
    486c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4870:	f8d2 034c 	ldr.w	r0, [r2, #844]	; 0x34c
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
    4874:	f892 6355 	ldrb.w	r6, [r2, #853]	; 0x355
}

void PinGame::addScore(uint32_t sc) {
	byte lev;

	player[playerOn].score += sc;
    4878:	4401      	add	r1, r0
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
    487a:	2e02      	cmp	r6, #2
}

void PinGame::addScore(uint32_t sc) {
	byte lev;

	player[playerOn].score += sc;
    487c:	f8c2 134c 	str.w	r1, [r2, #844]	; 0x34c
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
    4880:	d805      	bhi.n	488e <PinGame::addScore(unsigned long)+0x2e>
    4882:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    4886:	f8d0 038c 	ldr.w	r0, [r0, #908]	; 0x38c
    488a:	4281      	cmp	r1, r0
    488c:	d227      	bcs.n	48de <PinGame::addScore(unsigned long)+0x7e>
			addCredits(1);
			setSolenoid(KNOCKER_SOL, true); // kicker
		}
	}
	// update for top score
	if (!player[playerOn].topScorer && player[playerOn].score >= topScore[0].score) {
    488e:	442b      	add	r3, r5
    4890:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4894:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
    4898:	b92a      	cbnz	r2, 48a6 <PinGame::addScore(unsigned long)+0x46>
    489a:	f8d3 134c 	ldr.w	r1, [r3, #844]	; 0x34c
    489e:	f8d4 2298 	ldr.w	r2, [r4, #664]	; 0x298
    48a2:	4291      	cmp	r1, r2
    48a4:	d200      	bcs.n	48a8 <PinGame::addScore(unsigned long)+0x48>
    48a6:	bd70      	pop	{r4, r5, r6, pc}
		player[playerOn].topScorer = true;
    48a8:	2601      	movs	r6, #1
    inline void lcdprn(String& st) { if (_lcd != nullptr) _lcd->print(st); }
    void lcdprn(byte line, const char* st, byte col = 0);
    void lcdprn(byte line, const __FlashStringHelper* st, byte col = 0);
    void lcdprn(byte line, String& st, byte col = 0);

    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    48aa:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    48ae:	2116      	movs	r1, #22
    48b0:	f883 6356 	strb.w	r6, [r3, #854]	; 0x356
    48b4:	f001 fbce 	bl	6054 <Board_Sys80b::getSettingBit(unsigned char)>
    48b8:	4605      	mov	r5, r0
    48ba:	2117      	movs	r1, #23
    48bc:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    48c0:	f001 fbc8 	bl	6054 <Board_Sys80b::getSettingBit(unsigned char)>
		addCredits(hw->getSettingSwitch(23) * 2 + hw->getSettingSwitch(24));
    48c4:	eb00 0145 	add.w	r1, r0, r5, lsl #1
    48c8:	4620      	mov	r0, r4
    48ca:	b2c9      	uxtb	r1, r1
    48cc:	f7ff ffae 	bl	482c <PinGame::addCredits(unsigned char)>
		setSolenoid(KNOCKER_SOL, true); // kicker
    48d0:	4632      	mov	r2, r6
    48d2:	4620      	mov	r0, r4
    48d4:	2108      	movs	r1, #8
	}
}
    48d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}
	// update for top score
	if (!player[playerOn].topScorer && player[playerOn].score >= topScore[0].score) {
		player[playerOn].topScorer = true;
		addCredits(hw->getSettingSwitch(23) * 2 + hw->getSettingSwitch(24));
		setSolenoid(KNOCKER_SOL, true); // kicker
    48da:	f000 bb33 	b.w	4f44 <Sys80b::setSolenoid(unsigned char, bool)>

	player[playerOn].score += sc;
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
		player[playerOn].awardLevelReached++;
    48de:	3601      	adds	r6, #1
    48e0:	211c      	movs	r1, #28
    48e2:	f882 6355 	strb.w	r6, [r2, #853]	; 0x355
    48e6:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    48ea:	f001 fbb3 	bl	6054 <Board_Sys80b::getSettingBit(unsigned char)>
		if (hw->getSettingSwitch(29) == 1) addExtraBall();
    48ee:	2801      	cmp	r0, #1
    48f0:	d00c      	beq.n	490c <PinGame::addScore(unsigned long)+0xac>
		else {
			addCredits(1);
    48f2:	2101      	movs	r1, #1
    48f4:	4620      	mov	r0, r4
    48f6:	f7ff ff99 	bl	482c <PinGame::addCredits(unsigned char)>
			setSolenoid(KNOCKER_SOL, true); // kicker
    48fa:	2201      	movs	r2, #1
    48fc:	2108      	movs	r1, #8
    48fe:	4620      	mov	r0, r4
    4900:	f000 fb20 	bl	4f44 <Sys80b::setSolenoid(unsigned char, bool)>
    4904:	f894 3387 	ldrb.w	r3, [r4, #903]	; 0x387
    4908:	005d      	lsls	r5, r3, #1
    490a:	e7c0      	b.n	488e <PinGame::addScore(unsigned long)+0x2e>
//	displayScoresAndCredits();
//	//setSound(_);
//}

void PinGame::addExtraBall() {
	player[playerOn].ballsLeft++;
    490c:	f894 5387 	ldrb.w	r5, [r4, #903]	; 0x387
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    4910:	2300      	movs	r3, #0
    4912:	22fa      	movs	r2, #250	; 0xfa
    4914:	2108      	movs	r1, #8
//	displayScoresAndCredits();
//	//setSound(_);
//}

void PinGame::addExtraBall() {
	player[playerOn].ballsLeft++;
    4916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    491a:	4620      	mov	r0, r4
//	displayScoresAndCredits();
//	//setSound(_);
//}

void PinGame::addExtraBall() {
	player[playerOn].ballsLeft++;
    491c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    4920:	f895 6354 	ldrb.w	r6, [r5, #852]	; 0x354
    4924:	3601      	adds	r6, #1
    4926:	f885 6354 	strb.w	r6, [r5, #852]	; 0x354
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    492a:	f000 fb21 	bl	4f70 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    492e:	f894 3387 	ldrb.w	r3, [r4, #903]	; 0x387
    4932:	005d      	lsls	r5, r3, #1
    4934:	e7ab      	b.n	488e <PinGame::addScore(unsigned long)+0x2e>
    4936:	bf00      	nop

00004938 <PinGame::addBonus(unsigned long)>:
		setSolenoid(KNOCKER_SOL, true); // kicker
	}
}

void PinGame::addBonus(uint32_t sc) {
	player[playerOn].bonus += sc;
    4938:	f890 3387 	ldrb.w	r3, [r0, #903]	; 0x387
    493c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4940:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4944:	f8d0 3350 	ldr.w	r3, [r0, #848]	; 0x350
    4948:	4419      	add	r1, r3
    494a:	f8c0 1350 	str.w	r1, [r0, #848]	; 0x350
    494e:	4770      	bx	lr

00004950 <SolenoidSet::SolenoidSet(unsigned char)>:
}

SolenoidSet::SolenoidSet(byte n) {
	//Serial.println("SolenoidSet(n) init...");
	//delay(100);
	if (n == 0 || n >= MAX_COUNT) {
    4950:	1e4b      	subs	r3, r1, #1
    4952:	2b1e      	cmp	r3, #30
	//delay(100);
	_solenoid = nullptr;
	_size = 0;
}

SolenoidSet::SolenoidSet(byte n) {
    4954:	b570      	push	{r4, r5, r6, lr}
    4956:	4606      	mov	r6, r0
	//Serial.println("SolenoidSet(n) init...");
	//delay(100);
	if (n == 0 || n >= MAX_COUNT) {
    4958:	d825      	bhi.n	49a6 <SolenoidSet::SolenoidSet(unsigned char)+0x56>
		_solenoid = nullptr;
		_size = 0;
		return;
	}
	_solenoid = new Solenoid[n];
    495a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    495e:	460c      	mov	r4, r1
#include "Arduino.h"
#include "BitMappedSet.h"

//class Solenoid;

struct Solenoid {
    4960:	f241 3588 	movw	r5, #5000	; 0x1388
    4964:	00c0      	lsls	r0, r0, #3
    4966:	f007 fa45 	bl	bdf4 <operator new[](unsigned int)>
    496a:	2100      	movs	r1, #0
    496c:	f100 0318 	add.w	r3, r0, #24
    4970:	460a      	mov	r2, r1
    4972:	3101      	adds	r1, #1
    4974:	f803 2c18 	strb.w	r2, [r3, #-24]
    4978:	f843 2c14 	str.w	r2, [r3, #-20]
    497c:	3318      	adds	r3, #24
    497e:	428c      	cmp	r4, r1
    4980:	f823 2c28 	strh.w	r2, [r3, #-40]
    4984:	f823 5c26 	strh.w	r5, [r3, #-38]
    4988:	f823 2c24 	strh.w	r2, [r3, #-36]
    498c:	d1f1      	bne.n	4972 <SolenoidSet::SolenoidSet(unsigned char)+0x22>
    498e:	6030      	str	r0, [r6, #0]
	_state = new BitMappedSet(n);
    4990:	2010      	movs	r0, #16
    4992:	f007 fa2d 	bl	bdf0 <operator new(unsigned int)>
    4996:	4605      	mov	r5, r0
    4998:	4621      	mov	r1, r4
    499a:	f7fd fe15 	bl	25c8 <BitMappedSet::BitMappedSet(unsigned short)>
    499e:	6075      	str	r5, [r6, #4]
	_size = n;
    49a0:	7234      	strb	r4, [r6, #8]
}
    49a2:	4630      	mov	r0, r6
    49a4:	bd70      	pop	{r4, r5, r6, pc}

SolenoidSet::SolenoidSet(byte n) {
	//Serial.println("SolenoidSet(n) init...");
	//delay(100);
	if (n == 0 || n >= MAX_COUNT) {
		_solenoid = nullptr;
    49a6:	2300      	movs	r3, #0
    49a8:	6003      	str	r3, [r0, #0]
		_size = 0;
    49aa:	7203      	strb	r3, [r0, #8]
		return;
	}
	_solenoid = new Solenoid[n];
	_state = new BitMappedSet(n);
	_size = n;
}
    49ac:	4630      	mov	r0, r6
    49ae:	bd70      	pop	{r4, r5, r6, pc}

000049b0 <SolenoidSet::~SolenoidSet()>:

SolenoidSet::~SolenoidSet() {
    49b0:	b538      	push	{r3, r4, r5, lr}
    49b2:	4604      	mov	r4, r0
	delete[] _solenoid;
    49b4:	6800      	ldr	r0, [r0, #0]
    49b6:	b108      	cbz	r0, 49bc <SolenoidSet::~SolenoidSet()+0xc>
    49b8:	f007 fa1e 	bl	bdf8 <operator delete[](void*)>
	delete _state;
    49bc:	6865      	ldr	r5, [r4, #4]
    49be:	b135      	cbz	r5, 49ce <SolenoidSet::~SolenoidSet()+0x1e>
    49c0:	4628      	mov	r0, r5
    49c2:	f7fd fddb 	bl	257c <BitMappedSet::~BitMappedSet()>
    49c6:	4628      	mov	r0, r5
    49c8:	2110      	movs	r1, #16
    49ca:	f007 fa17 	bl	bdfc <operator delete(void*, unsigned int)>
}
    49ce:	4620      	mov	r0, r4
    49d0:	bd38      	pop	{r3, r4, r5, pc}
    49d2:	bf00      	nop

000049d4 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>:
byte SolenoidSet::getSize() {
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
    49d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Solenoid& sol = _solenoid[n];
    49d6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    49da:	6805      	ldr	r5, [r0, #0]
    49dc:	00e4      	lsls	r4, r4, #3
	if (sol.active == state) return false;
    49de:	5d2e      	ldrb	r6, [r5, r4]
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
	Solenoid& sol = _solenoid[n];
    49e0:	192f      	adds	r7, r5, r4
	if (sol.active == state) return false;
    49e2:	4296      	cmp	r6, r2
    49e4:	d00e      	beq.n	4a04 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)+0x30>
	sol.active = state;
    49e6:	552a      	strb	r2, [r5, r4]
	if (state) sol.swOnTime = t;
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	b94a      	cbnz	r2, 4a00 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)+0x2c>
	else sol.swOffTime = t;
    49ec:	617b      	str	r3, [r7, #20]
    49ee:	4605      	mov	r5, r0
    49f0:	460c      	mov	r4, r1
	_state->setState(n, state);
    49f2:	2300      	movs	r3, #0
    49f4:	6840      	ldr	r0, [r0, #4]
    49f6:	f7fd fe09 	bl	260c <BitMappedSet::setState(unsigned short, bool, bool)>
	_lastChanged = n;
    49fa:	726c      	strb	r4, [r5, #9]
	return true;
    49fc:	2001      	movs	r0, #1
    49fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
	Solenoid& sol = _solenoid[n];
	if (sol.active == state) return false;
	sol.active = state;
	if (state) sol.swOnTime = t;
    4a00:	613b      	str	r3, [r7, #16]
    4a02:	e7f4      	b.n	49ee <SolenoidSet::_switch(unsigned char, bool, unsigned long&)+0x1a>
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state, uint32_t& t) {
	Solenoid& sol = _solenoid[n];
	if (sol.active == state) return false;
    4a04:	2000      	movs	r0, #0
	if (state) sol.swOnTime = t;
	else sol.swOffTime = t;
	_state->setState(n, state);
	_lastChanged = n;
	return true;
}
    4a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004a08 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]>:
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4a08:	b5f0      	push	{r4, r5, r6, r7, lr}
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4a0a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    4a0e:	6804      	ldr	r4, [r0, #0]
    4a10:	4f0c      	ldr	r7, [pc, #48]	; (4a44 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]+0x3c>)
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4a12:	b083      	sub	sp, #12
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4a14:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
	sol.settingTime = millis();
	if (delay == 0) {
    4a18:	461e      	mov	r6, r3
    4a1a:	683b      	ldr	r3, [r7, #0]
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4a1c:	4615      	mov	r5, r2
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
    4a1e:	6063      	str	r3, [r4, #4]
	if (delay == 0) {
    4a20:	b146      	cbz	r6, 4a34 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]+0x2c>
		uint32_t t = millis();
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
    4a22:	2d00      	cmp	r5, #0
	sol.swOnDelay = delay;
	return true;
}
    4a24:	f04f 0001 	mov.w	r0, #1
	if (delay == 0) {
		uint32_t t = millis();
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
	sol.swOnDelay = delay;
    4a28:	81a6      	strh	r6, [r4, #12]
	sol.settingTime = millis();
	if (delay == 0) {
		uint32_t t = millis();
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
    4a2a:	bf08      	it	eq
    4a2c:	25fa      	moveq	r5, #250	; 0xfa
    4a2e:	8125      	strh	r5, [r4, #8]
	sol.swOnDelay = delay;
	return true;
}
    4a30:	b003      	add	sp, #12
    4a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a34:	683f      	ldr	r7, [r7, #0]
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	if (delay == 0) {
		uint32_t t = millis();
    4a36:	ab02      	add	r3, sp, #8
		_switch(n, true, t);
    4a38:	2201      	movs	r2, #1
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	if (delay == 0) {
		uint32_t t = millis();
    4a3a:	f843 7d04 	str.w	r7, [r3, #-4]!
		_switch(n, true, t);
    4a3e:	f7ff ffc9 	bl	49d4 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
    4a42:	e7ee      	b.n	4a22 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]+0x1a>
    4a44:	20002c14 	.word	0x20002c14

00004a48 <SolenoidSet::setState(unsigned char, bool)>:
	return true;
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
    4a48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (n >= _size) return false;
    4a4a:	7a05      	ldrb	r5, [r0, #8]
	return true;
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
    4a4c:	b083      	sub	sp, #12
	if (n >= _size) return false;
    4a4e:	428d      	cmp	r5, r1
    4a50:	d91a      	bls.n	4a88 <SolenoidSet::setState(unsigned char, bool)+0x40>
	Solenoid& sol = _solenoid[n];
    4a52:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    4a56:	6806      	ldr	r6, [r0, #0]
    4a58:	f8df e034 	ldr.w	lr, [pc, #52]	; 4a90 <SolenoidSet::setState(unsigned char, bool)+0x48>
	sol.settingTime = millis();
	sol.swOnDelay = 0;
    4a5c:	2500      	movs	r5, #0

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4a5e:	00db      	lsls	r3, r3, #3
    4a60:	f8de c000 	ldr.w	ip, [lr]
    4a64:	18f4      	adds	r4, r6, r3
	sol.settingTime = millis();
	sol.swOnDelay = 0;
	sol.activePeriod = 0;
	if (sol.active == state) return false;
    4a66:	5cf3      	ldrb	r3, [r6, r3]
    4a68:	4293      	cmp	r3, r2
// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
    4a6a:	f8c4 c004 	str.w	ip, [r4, #4]
	sol.swOnDelay = 0;
    4a6e:	81a5      	strh	r5, [r4, #12]
	sol.activePeriod = 0;
    4a70:	8125      	strh	r5, [r4, #8]
	if (sol.active == state) return false;
    4a72:	d009      	beq.n	4a88 <SolenoidSet::setState(unsigned char, bool)+0x40>
    4a74:	f8de 4000 	ldr.w	r4, [lr]
	uint32_t t = millis();
    4a78:	ab02      	add	r3, sp, #8
    4a7a:	f843 4d04 	str.w	r4, [r3, #-4]!
	_switch(n, state, t);
    4a7e:	f7ff ffa9 	bl	49d4 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
    4a82:	2001      	movs	r0, #1
	return true;
}
    4a84:	b003      	add	sp, #12
    4a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
    4a88:	2000      	movs	r0, #0
	sol.activePeriod = 0;
	if (sol.active == state) return false;
	uint32_t t = millis();
	_switch(n, state, t);
	return true;
}
    4a8a:	b003      	add	sp, #12
    4a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a8e:	bf00      	nop
    4a90:	20002c14 	.word	0x20002c14

00004a94 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)>:
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4a94:	b410      	push	{r4}
	//Serial.printf("SolenoidSet::activate(%d, %d, %d)\n", n, actPeriod, delay);
	if (n >= _size) return false;
    4a96:	7a04      	ldrb	r4, [r0, #8]
    4a98:	428c      	cmp	r4, r1
    4a9a:	d903      	bls.n	4aa4 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)+0x10>
		_switch(n, true, t);
	}
	sol.activePeriod = (actPeriod == 0) ? Solenoid::DEF_ACTIVE_TIME : actPeriod;
	sol.swOnDelay = delay;
	return true;
}
    4a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4aa0:	f7ff bfb2 	b.w	4a08 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short) [clone .part.2]>
    4aa4:	2000      	movs	r0, #0
    4aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
    4aaa:	4770      	bx	lr

00004aac <SolenoidSet::resetAll()>:

// resets all solenoids
 void SolenoidSet::resetAll() {
    4aac:	b538      	push	{r3, r4, r5, lr}
	for (byte n = 0; n < _size; n++) setState(n, false);
    4aae:	7a03      	ldrb	r3, [r0, #8]
    4ab0:	b15b      	cbz	r3, 4aca <SolenoidSet::resetAll()+0x1e>
    4ab2:	4605      	mov	r5, r0
    4ab4:	2400      	movs	r4, #0
    4ab6:	4621      	mov	r1, r4
    4ab8:	3401      	adds	r4, #1
    4aba:	2200      	movs	r2, #0
    4abc:	4628      	mov	r0, r5
    4abe:	f7ff ffc3 	bl	4a48 <SolenoidSet::setState(unsigned char, bool)>
    4ac2:	7a2b      	ldrb	r3, [r5, #8]
    4ac4:	b2e4      	uxtb	r4, r4
    4ac6:	42a3      	cmp	r3, r4
    4ac8:	d8f5      	bhi.n	4ab6 <SolenoidSet::resetAll()+0xa>
    4aca:	bd38      	pop	{r3, r4, r5, pc}

00004acc <SolenoidSet::update(unsigned long&)>:
}

// returns true on changes
bool SolenoidSet::update(uint32_t& t) {
    4acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4ad0:	7a02      	ldrb	r2, [r0, #8]
    4ad2:	2a00      	cmp	r2, #0
    4ad4:	d05b      	beq.n	4b8e <SolenoidSet::update(unsigned long&)+0xc2>
    4ad6:	2500      	movs	r5, #0
    4ad8:	4689      	mov	r9, r1
    4ada:	4607      	mov	r7, r0
    4adc:	462e      	mov	r6, r5
    4ade:	46ae      	mov	lr, r5
    4ae0:	e00d      	b.n	4afe <SolenoidSet::update(unsigned long&)+0x32>
		sol = &_solenoid[i];
		changedState = false;
		if (sol->active) { // solenoid activated ?
			// check if solenoid is active for too long time
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
    4ae2:	8961      	ldrh	r1, [r4, #10]
    4ae4:	b129      	cbz	r1, 4af2 <SolenoidSet::update(unsigned long&)+0x26>
    4ae6:	f8d9 3000 	ldr.w	r3, [r9]
    4aea:	6920      	ldr	r0, [r4, #16]
    4aec:	1a1b      	subs	r3, r3, r0
    4aee:	428b      	cmp	r3, r1
    4af0:	d83b      	bhi.n	4b6a <SolenoidSet::update(unsigned long&)+0x9e>
				_switch(i, false, t);
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4af2:	8923      	ldrh	r3, [r4, #8]
    4af4:	bb53      	cbnz	r3, 4b4c <SolenoidSet::update(unsigned long&)+0x80>
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4af6:	3601      	adds	r6, #1
    4af8:	3518      	adds	r5, #24
    4afa:	42b2      	cmp	r2, r6
    4afc:	dd23      	ble.n	4b46 <SolenoidSet::update(unsigned long&)+0x7a>
		sol = &_solenoid[i];
    4afe:	683c      	ldr	r4, [r7, #0]
		changedState = false;
		if (sol->active) { // solenoid activated ?
    4b00:	f814 8005 	ldrb.w	r8, [r4, r5]
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
		sol = &_solenoid[i];
    4b04:	442c      	add	r4, r5
		changedState = false;
		if (sol->active) { // solenoid activated ?
    4b06:	f1b8 0f00 	cmp.w	r8, #0
    4b0a:	d1ea      	bne.n	4ae2 <SolenoidSet::update(unsigned long&)+0x16>
				_switch(i, false, t);
				changedState = true;
			}
		}
		// check if solenoid should switch on after a delay (on active == false)
		else if ((sol->swOnDelay > 0) && (t - sol->settingTime) >= sol->swOnDelay) {
    4b0c:	89a3      	ldrh	r3, [r4, #12]
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d0f1      	beq.n	4af6 <SolenoidSet::update(unsigned long&)+0x2a>
    4b12:	f8d9 1000 	ldr.w	r1, [r9]
    4b16:	6860      	ldr	r0, [r4, #4]
    4b18:	1a09      	subs	r1, r1, r0
    4b1a:	4299      	cmp	r1, r3
    4b1c:	d3eb      	bcc.n	4af6 <SolenoidSet::update(unsigned long&)+0x2a>
			_switch(i, true, t);
    4b1e:	fa5f fa86 	uxtb.w	sl, r6
    4b22:	464b      	mov	r3, r9
    4b24:	2201      	movs	r2, #1
    4b26:	4638      	mov	r0, r7
    4b28:	4651      	mov	r1, sl
    4b2a:	f7ff ff53 	bl	49d4 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
			sol->swOnDelay = 0;
    4b2e:	f8a4 800c 	strh.w	r8, [r4, #12]
    4b32:	7a3a      	ldrb	r2, [r7, #8]
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4b34:	3601      	adds	r6, #1
			changedState = true;
		}

		if (changedState) {
			_lastChanged = i;
			changes = true;
    4b36:	f04f 0e01 	mov.w	lr, #1
			sol->swOnDelay = 0;
			changedState = true;
		}

		if (changedState) {
			_lastChanged = i;
    4b3a:	f887 a009 	strb.w	sl, [r7, #9]
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4b3e:	42b2      	cmp	r2, r6
    4b40:	f105 0518 	add.w	r5, r5, #24
    4b44:	dcdb      	bgt.n	4afe <SolenoidSet::update(unsigned long&)+0x32>
	//		changes = true;
	//	}
	//}

	return changes;
}
    4b46:	4670      	mov	r0, lr
    4b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
				_switch(i, false, t);
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4b4c:	6924      	ldr	r4, [r4, #16]
    4b4e:	f8d9 1000 	ldr.w	r1, [r9]
    4b52:	1b09      	subs	r1, r1, r4
    4b54:	428b      	cmp	r3, r1
    4b56:	d2ce      	bcs.n	4af6 <SolenoidSet::update(unsigned long&)+0x2a>
    4b58:	fa5f fa86 	uxtb.w	sl, r6
				_switch(i, false, t);
    4b5c:	464b      	mov	r3, r9
    4b5e:	2200      	movs	r2, #0
    4b60:	4651      	mov	r1, sl
    4b62:	4638      	mov	r0, r7
    4b64:	f7ff ff36 	bl	49d4 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
    4b68:	e7e3      	b.n	4b32 <SolenoidSet::update(unsigned long&)+0x66>
		sol = &_solenoid[i];
		changedState = false;
		if (sol->active) { // solenoid activated ?
			// check if solenoid is active for too long time
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
				_switch(i, false, t);
    4b6a:	fa5f fa86 	uxtb.w	sl, r6
    4b6e:	2200      	movs	r2, #0
    4b70:	464b      	mov	r3, r9
    4b72:	4638      	mov	r0, r7
    4b74:	4651      	mov	r1, sl
    4b76:	f7ff ff2d 	bl	49d4 <SolenoidSet::_switch(unsigned char, bool, unsigned long&)>
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4b7a:	8922      	ldrh	r2, [r4, #8]
    4b7c:	2a00      	cmp	r2, #0
    4b7e:	d0d8      	beq.n	4b32 <SolenoidSet::update(unsigned long&)+0x66>
    4b80:	6921      	ldr	r1, [r4, #16]
    4b82:	f8d9 3000 	ldr.w	r3, [r9]
    4b86:	1a5b      	subs	r3, r3, r1
    4b88:	4293      	cmp	r3, r2
    4b8a:	d9d2      	bls.n	4b32 <SolenoidSet::update(unsigned long&)+0x66>
    4b8c:	e7e6      	b.n	4b5c <SolenoidSet::update(unsigned long&)+0x90>
	for (byte n = 0; n < _size; n++) setState(n, false);
}

// returns true on changes
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
    4b8e:	4696      	mov	lr, r2
	//		_lastChanged = i;
	//		changes = true;
	//	}
	//}

	return changes;
    4b90:	e7d9      	b.n	4b46 <SolenoidSet::update(unsigned long&)+0x7a>
    4b92:	bf00      	nop

00004b94 <SolenoidSet::getStates()>:
}

// Returns a 32-bit word with actual solenoid states coded in its bits:
// bit n contains state of solenoid n.
uint32_t SolenoidSet::getStates() {
    4b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t bits = 0;
	for (byte i = 0; i*8 < _size; i++) bits |= ((uint32_t)_state->getStates8(i) << (8 * i));
    4b96:	7a06      	ldrb	r6, [r0, #8]
    4b98:	b186      	cbz	r6, 4bbc <SolenoidSet::getStates()+0x28>
    4b9a:	2500      	movs	r5, #0
    4b9c:	4607      	mov	r7, r0
    4b9e:	462c      	mov	r4, r5
    4ba0:	462e      	mov	r6, r5
    4ba2:	4621      	mov	r1, r4
    4ba4:	3401      	adds	r4, #1
    4ba6:	6878      	ldr	r0, [r7, #4]
    4ba8:	b2e4      	uxtb	r4, r4
    4baa:	f7fd fd8d 	bl	26c8 <BitMappedSet::getStates8(unsigned short)>
    4bae:	7a3b      	ldrb	r3, [r7, #8]
    4bb0:	40a8      	lsls	r0, r5
    4bb2:	00e5      	lsls	r5, r4, #3
    4bb4:	429d      	cmp	r5, r3
    4bb6:	ea46 0600 	orr.w	r6, r6, r0
    4bba:	dbf2      	blt.n	4ba2 <SolenoidSet::getStates()+0xe>
	return bits;
}
    4bbc:	4630      	mov	r0, r6
    4bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004bc0 <SwitchGrid8x8::SwitchGrid8x8()>:
* 8x8 pinball switch grid I/O functions.
*/

#include "SwitchGrid8x8.h"

SwitchGrid8x8::SwitchGrid8x8() {
    4bc0:	b4f0      	push	{r4, r5, r6, r7}
    4bc2:	f200 260b 	addw	r6, r0, #523	; 0x20b
    4bc6:	4607      	mov	r7, r0
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
    4bc8:	2200      	movs	r2, #0
    4bca:	f200 2403 	addw	r4, r0, #515	; 0x203
    4bce:	4603      	mov	r3, r0
* 8x8 pinball switch grid I/O functions.
*/

#include "SwitchGrid8x8.h"

SwitchGrid8x8::SwitchGrid8x8() {
    4bd0:	4635      	mov	r5, r6
    4bd2:	f103 0120 	add.w	r1, r3, #32
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
    4bd6:	f804 2f01 	strb.w	r2, [r4, #1]!
		returns_changed[i] = 0;
    4bda:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
    4bde:	f843 2f04 	str.w	r2, [r3, #4]!
    4be2:	428b      	cmp	r3, r1
    4be4:	f04f 0000 	mov.w	r0, #0
    4be8:	d1f9      	bne.n	4bde <SwitchGrid8x8::SwitchGrid8x8()+0x1e>

SwitchGrid8x8::SwitchGrid8x8() {
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
    4bea:	42b4      	cmp	r4, r6
    4bec:	d1f1      	bne.n	4bd2 <SwitchGrid8x8::SwitchGrid8x8()+0x12>
		returns_latch[i] = 0;
		returns_changed[i] = 0;
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
	}
	lastSwitchChanged = 0xff;
    4bee:	23ff      	movs	r3, #255	; 0xff
	_strobe = 0;
    4bf0:	f887 0214 	strb.w	r0, [r7, #532]	; 0x214
}
    4bf4:	4638      	mov	r0, r7
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
		returns_changed[i] = 0;
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
	}
	lastSwitchChanged = 0xff;
    4bf6:	707b      	strb	r3, [r7, #1]
	_strobe = 0;
}
    4bf8:	bcf0      	pop	{r4, r5, r6, r7}
    4bfa:	4770      	bx	lr

00004bfc <SwitchGrid8x8::~SwitchGrid8x8()>:

SwitchGrid8x8::~SwitchGrid8x8() {
    4bfc:	b510      	push	{r4, lr}
    4bfe:	4604      	mov	r4, r0
	delete[] returns_latch;
    4c00:	f510 7001 	adds.w	r0, r0, #516	; 0x204
    4c04:	d001      	beq.n	4c0a <SwitchGrid8x8::~SwitchGrid8x8()+0xe>
    4c06:	f007 f8f7 	bl	bdf8 <operator delete[](void*)>
	delete[] returns_changed;
    4c0a:	f514 7003 	adds.w	r0, r4, #524	; 0x20c
    4c0e:	d001      	beq.n	4c14 <SwitchGrid8x8::~SwitchGrid8x8()+0x18>
    4c10:	f007 f8f2 	bl	bdf8 <operator delete[](void*)>
	delete[] swChangeTime;
    4c14:	1d20      	adds	r0, r4, #4
    4c16:	d001      	beq.n	4c1c <SwitchGrid8x8::~SwitchGrid8x8()+0x20>
    4c18:	f007 f8ee 	bl	bdf8 <operator delete[](void*)>
}
    4c1c:	4620      	mov	r0, r4
    4c1e:	bd10      	pop	{r4, pc}

00004c20 <SwitchGrid8x8::incrementStrobe()>:

byte SwitchGrid8x8::incrementStrobe() {
	if (++_strobe > 7) _strobe = 0;
    4c20:	f890 3214 	ldrb.w	r3, [r0, #532]	; 0x214
    4c24:	3301      	adds	r3, #1
    4c26:	b2db      	uxtb	r3, r3
    4c28:	2b07      	cmp	r3, #7
    4c2a:	d905      	bls.n	4c38 <SwitchGrid8x8::incrementStrobe()+0x18>
    4c2c:	2200      	movs	r2, #0
    4c2e:	4613      	mov	r3, r2
    4c30:	f880 2214 	strb.w	r2, [r0, #532]	; 0x214
	return _strobe;
}
    4c34:	4618      	mov	r0, r3
    4c36:	4770      	bx	lr
	delete[] returns_changed;
	delete[] swChangeTime;
}

byte SwitchGrid8x8::incrementStrobe() {
	if (++_strobe > 7) _strobe = 0;
    4c38:	f880 3214 	strb.w	r3, [r0, #532]	; 0x214
	return _strobe;
}
    4c3c:	4618      	mov	r0, r3
    4c3e:	4770      	bx	lr

00004c40 <SwitchGrid8x8::getLastChangedSwitch()>:
}

// return 0xff when no changes occurred on current row
 byte SwitchGrid8x8::getLastChangedSwitch() {
	return lastSwitchChanged;
}
    4c40:	7840      	ldrb	r0, [r0, #1]
    4c42:	4770      	bx	lr

00004c44 <SwitchGrid8x8::getRow(unsigned char)>:

 byte SwitchGrid8x8::getRow(byte r) {
	return returns_latch[r&7];
    4c44:	f001 0107 	and.w	r1, r1, #7
    4c48:	4408      	add	r0, r1
}
    4c4a:	f890 0204 	ldrb.w	r0, [r0, #516]	; 0x204
    4c4e:	4770      	bx	lr

00004c50 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)>:
// tm = current system time [ms]
// returns changed bits (0 if no bit has changed)
 byte SwitchGrid8x8::setRow(byte r, byte val, uint32_t& tm) {
	byte diff, b, bv;

	r &= 7;
    4c50:	f001 0107 	and.w	r1, r1, #7
	diff = returns_latch[r] ^ val;
    4c54:	eb00 0c01 	add.w	ip, r0, r1
// Has unbounce effect on on->off transitions, with delay defined by SW_ONOFF_DELAY [ms].
// <r> = row [0..7]
// <val> = value [0..255]
// tm = current system time [ms]
// returns changed bits (0 if no bit has changed)
 byte SwitchGrid8x8::setRow(byte r, byte val, uint32_t& tm) {
    4c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c5c:	4686      	mov	lr, r0
	byte diff, b, bv;

	r &= 7;
	diff = returns_latch[r] ^ val;
    4c5e:	f89c 0204 	ldrb.w	r0, [ip, #516]	; 0x204
	if (diff > 0) { // changes detected!
    4c62:	4050      	eors	r0, r2
    4c64:	d037      	beq.n	4cd6 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x86>
    4c66:	014d      	lsls	r5, r1, #5
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
    4c68:	2401      	movs	r4, #1
 uint32_t SwitchGrid8x8::getSwitchChangeCount(byte col, byte row) {
	return swChangeCount[row & 7][col & 7];
}

 byte SwitchGrid8x8::getSwitchNumber(byte col, byte row) {
	return (row & 7) * 10 + (col & 7);
    4c6a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4c6e:	4698      	mov	r8, r3
    4c70:	f105 0720 	add.w	r7, r5, #32

	r &= 7;
	diff = returns_latch[r] ^ val;
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
    4c74:	f88e 0000 	strb.w	r0, [lr]
    4c78:	4475      	add	r5, lr
 uint32_t SwitchGrid8x8::getSwitchChangeCount(byte col, byte row) {
	return swChangeCount[row & 7][col & 7];
}

 byte SwitchGrid8x8::getSwitchNumber(byte col, byte row) {
	return (row & 7) * 10 + (col & 7);
    4c7a:	40a1      	lsls	r1, r4
    4c7c:	4477      	add	r7, lr
    4c7e:	e00e      	b.n	4c9e <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x4e>
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
				lastSwitchChanged = getSwitchNumber(b, r);
				if (val & bv) { // switch has just closed
					returns_latch[r] |= bv; 
    4c80:	f89c 6204 	ldrb.w	r6, [ip, #516]	; 0x204
    4c84:	4326      	orrs	r6, r4
    4c86:	f88c 6204 	strb.w	r6, [ip, #516]	; 0x204
					swChangeTime[r][b] = tm;
    4c8a:	f8d8 6000 	ldr.w	r6, [r8]
    4c8e:	606e      	str	r6, [r5, #4]
    4c90:	3504      	adds	r5, #4
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
				}
			}
			bv <<= 1;
    4c92:	0064      	lsls	r4, r4, #1
    4c94:	3101      	adds	r1, #1
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
		for (b = 0; b < 8; b++) { // for each bit...
    4c96:	42bd      	cmp	r5, r7
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
				}
			}
			bv <<= 1;
    4c98:	b2e4      	uxtb	r4, r4
    4c9a:	b2c9      	uxtb	r1, r1
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
		for (b = 0; b < 8; b++) { // for each bit...
    4c9c:	d01b      	beq.n	4cd6 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x86>
			if (diff & bv) { // bit has changed!
    4c9e:	4220      	tst	r0, r4
    4ca0:	d0f6      	beq.n	4c90 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x40>
				swChangeCount[r][b]++;
    4ca2:	f8d5 6104 	ldr.w	r6, [r5, #260]	; 0x104
				lastSwitchChanged = getSwitchNumber(b, r);
				if (val & bv) { // switch has just closed
    4ca6:	4222      	tst	r2, r4
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
    4ca8:	f106 0601 	add.w	r6, r6, #1
    4cac:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
				lastSwitchChanged = getSwitchNumber(b, r);
    4cb0:	f88e 1001 	strb.w	r1, [lr, #1]
				if (val & bv) { // switch has just closed
    4cb4:	d1e4      	bne.n	4c80 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x30>
					returns_latch[r] |= bv; 
					swChangeTime[r][b] = tm;
				}
				else { // switch now open
					if (tm - swChangeTime[r][b] >= SW_ONOFF_DELAY) { // debounce condition
    4cb6:	f8d8 6000 	ldr.w	r6, [r8]
    4cba:	686b      	ldr	r3, [r5, #4]
    4cbc:	1af6      	subs	r6, r6, r3
    4cbe:	2e31      	cmp	r6, #49	; 0x31
    4cc0:	d90b      	bls.n	4cda <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x8a>
						returns_latch[r] &= ~bv;
    4cc2:	f89c 6204 	ldrb.w	r6, [ip, #516]	; 0x204
    4cc6:	ea26 0604 	bic.w	r6, r6, r4
    4cca:	f88c 6204 	strb.w	r6, [ip, #516]	; 0x204
						swChangeTime[r][b] = tm;
    4cce:	f8d8 6000 	ldr.w	r6, [r8]
    4cd2:	606e      	str	r6, [r5, #4]
    4cd4:	e7dc      	b.n	4c90 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x40>
	#ifdef SWGRID_TRACK_CHANGES
		returns_changed[r] |= diff;
	#endif
	}
	return diff;
}
    4cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				else { // switch now open
					if (tm - swChangeTime[r][b] >= SW_ONOFF_DELAY) { // debounce condition
						returns_latch[r] &= ~bv;
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
    4cda:	ea20 0004 	bic.w	r0, r0, r4
    4cde:	e7d7      	b.n	4c90 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x40>

00004ce0 <SwitchGrid8x8::setCurrentRow(unsigned char, unsigned long&)>:
 byte SwitchGrid8x8::getRow(byte r) {
	return returns_latch[r&7];
}

 byte SwitchGrid8x8::setCurrentRow(byte val, uint32_t& tm) {
	return setRow(_strobe, val, tm);
    4ce0:	4613      	mov	r3, r2
    4ce2:	460a      	mov	r2, r1
    4ce4:	f890 1214 	ldrb.w	r1, [r0, #532]	; 0x214
    4ce8:	f7ff bfb2 	b.w	4c50 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)>

00004cec <SwitchGrid8x8::currentRowChanged()>:
	}
	return diff;
}

 bool SwitchGrid8x8::currentRowChanged() {
	return (lastRowChanges > 0) ? true : false;
    4cec:	7800      	ldrb	r0, [r0, #0]
}
    4cee:	3000      	adds	r0, #0
    4cf0:	bf18      	it	ne
    4cf2:	2001      	movne	r0, #1
    4cf4:	4770      	bx	lr
    4cf6:	bf00      	nop

00004cf8 <SwitchGrid8x8::getSwitch(unsigned char)>:

// switchNum = 0..63
 bool SwitchGrid8x8::getSwitch(byte switchNum) {
	byte r = switchNum % 10;
    4cf8:	4a08      	ldr	r2, [pc, #32]	; (4d1c <SwitchGrid8x8::getSwitch(unsigned char)+0x24>)
    4cfa:	fba2 3201 	umull	r3, r2, r2, r1
    4cfe:	08d2      	lsrs	r2, r2, #3
    4d00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4d04:	eba1 0342 	sub.w	r3, r1, r2, lsl #1
    4d08:	b2db      	uxtb	r3, r3
	byte c = switchNum - r;
	return ((returns_latch[r] & (1u<<c)) > 0) ? true : false;
    4d0a:	4418      	add	r0, r3
    4d0c:	1ac9      	subs	r1, r1, r3
    4d0e:	f890 0204 	ldrb.w	r0, [r0, #516]	; 0x204
    4d12:	b2c9      	uxtb	r1, r1
    4d14:	40c8      	lsrs	r0, r1
}
    4d16:	f000 0001 	and.w	r0, r0, #1
    4d1a:	4770      	bx	lr
    4d1c:	cccccccd 	.word	0xcccccccd

00004d20 <Sys80b::onSlamSwitchEvent(bool)>:
	virtual void updateSound();
	inline uint16_t getDisplayOutput() { return display.LastData();	}
	void updUserKeyState(UserKey key, uint32_t& ms);
	void _millisRoutine(uint32_t& ms);
	virtual void onSwitchEvent(byte sw, bool st) {};
	virtual void onSlamSwitchEvent(bool active) {};
    4d20:	4770      	bx	lr
    4d22:	bf00      	nop

00004d24 <Sys80b::onTestButtonPressed()>:
	virtual void onButtonPressed(UserKey key) { 
		Serial.print("onButtonPressed: "); 
		Serial.println(key);
	}
	virtual void onTestButtonPressed() {}
    4d24:	4770      	bx	lr
    4d26:	bf00      	nop

00004d28 <Sys80b::~Sys80b()>:
	slamSwitchLastState = slamSwitchNormalState;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    4d28:	b538      	push	{r3, r4, r5, lr}
    4d2a:	4b18      	ldr	r3, [pc, #96]	; (4d8c <Sys80b::~Sys80b()+0x64>)
    4d2c:	4604      	mov	r4, r0
	delete solenoids;
    4d2e:	68c5      	ldr	r5, [r0, #12]
	slamSwitchLastState = slamSwitchNormalState;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    4d30:	6003      	str	r3, [r0, #0]
	delete solenoids;
    4d32:	b135      	cbz	r5, 4d42 <Sys80b::~Sys80b()+0x1a>
    4d34:	4628      	mov	r0, r5
    4d36:	f7ff fe3b 	bl	49b0 <SolenoidSet::~SolenoidSet()>
    4d3a:	4628      	mov	r0, r5
    4d3c:	210c      	movs	r1, #12
    4d3e:	f007 f85d 	bl	bdfc <operator delete(void*, unsigned int)>
	delete lamps;
    4d42:	68a5      	ldr	r5, [r4, #8]
    4d44:	b135      	cbz	r5, 4d54 <Sys80b::~Sys80b()+0x2c>
    4d46:	4628      	mov	r0, r5
    4d48:	f7fd fc18 	bl	257c <BitMappedSet::~BitMappedSet()>
    4d4c:	4628      	mov	r0, r5
    4d4e:	2110      	movs	r1, #16
    4d50:	f007 f854 	bl	bdfc <operator delete(void*, unsigned int)>
		_buff = new Type[_size];
		Clear();
	}

	~Buffer() {
		delete[] _buff;
    4d54:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    4d58:	b108      	cbz	r0, 4d5e <Sys80b::~Sys80b()+0x36>
    4d5a:	f007 f84d 	bl	bdf8 <operator delete[](void*)>
	slamSwitchLastState = slamSwitchNormalState;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    4d5e:	f104 0054 	add.w	r0, r4, #84	; 0x54
    4d62:	f7ff ff4b 	bl	4bfc <SwitchGrid8x8::~SwitchGrid8x8()>
// Sys80/b's display control. It provides:
// - a buffer for byte-data to send to HW display
// - getNextDisplayData() function for retrieving bytes to send to HW display
// rev: nov/19
//class Sys80b_Display : public ExtTextDisplay {
class Sys80b_Display : public TextDisplay {
    4d66:	4b0a      	ldr	r3, [pc, #40]	; (4d90 <Sys80b::~Sys80b()+0x68>)
    4d68:	6c20      	ldr	r0, [r4, #64]	; 0x40
    4d6a:	6123      	str	r3, [r4, #16]
    4d6c:	b108      	cbz	r0, 4d72 <Sys80b::~Sys80b()+0x4a>
    4d6e:	f007 f843 	bl	bdf8 <operator delete[](void*)>
// Basic fixed-size alphanumeric display object which provides.:
// - both char and row (line) text set/get functions
// - vertical/horizontal shift and rotate functions
// - getRowCopy() function that returns a new string with row text
// rev: nov/19
class TextDisplay { 
    4d72:	4b08      	ldr	r3, [pc, #32]	; (4d94 <Sys80b::~Sys80b()+0x6c>)
    4d74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4d78:	6123      	str	r3, [r4, #16]
    4d7a:	f007 f93f 	bl	bffc <String::~String()>
    4d7e:	f104 0018 	add.w	r0, r4, #24
    4d82:	f007 f93b 	bl	bffc <String::~String()>
	delete solenoids;
	delete lamps;
}
    4d86:	4620      	mov	r0, r4
    4d88:	bd38      	pop	{r3, r4, r5, pc}
    4d8a:	bf00      	nop
    4d8c:	200011d4 	.word	0x200011d4
    4d90:	200011c8 	.word	0x200011c8
    4d94:	200011bc 	.word	0x200011bc

00004d98 <Sys80b::~Sys80b()>:
	slamSwitchLastState = slamSwitchNormalState;
	//hw = nullptr;
	//reset();
}

Sys80b::~Sys80b() {
    4d98:	b510      	push	{r4, lr}
    4d9a:	4604      	mov	r4, r0
	delete solenoids;
	delete lamps;
}
    4d9c:	f7ff ffc4 	bl	4d28 <Sys80b::~Sys80b()>
    4da0:	f44f 7125 	mov.w	r1, #660	; 0x294
    4da4:	4620      	mov	r0, r4
    4da6:	f007 f829 	bl	bdfc <operator delete(void*, unsigned int)>
    4daa:	4620      	mov	r0, r4
    4dac:	bd10      	pop	{r4, pc}
    4dae:	bf00      	nop

00004db0 <Sys80b::updateSound()>:
		return true;
	}
	return false;
}

 void Sys80b::updateSound() {
    4db0:	b538      	push	{r3, r4, r5, lr}
	 if (!_soundPendingCmd) return;
    4db2:	f890 3280 	ldrb.w	r3, [r0, #640]	; 0x280
    4db6:	b1a3      	cbz	r3, 4de2 <Sys80b::updateSound()+0x32>
    4db8:	f8d0 3274 	ldr.w	r3, [r0, #628]	; 0x274
	 byte s = soundBuffer.isEmpty() ? 0 : soundBuffer.get();
    4dbc:	b993      	cbnz	r3, 4de4 <Sys80b::updateSound()+0x34>
    4dbe:	461d      	mov	r5, r3
    4dc0:	21ff      	movs	r1, #255	; 0xff
    4dc2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
    4dc6:	4604      	mov	r4, r0
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    4dc8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    4dcc:	f002 fd48 	bl	7860 <PIO::mcpWritePB(unsigned char)>
	 hw->writeSound(~(s & 0x7f)); // only bits 0..6, not the 7th bit
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
    4dd0:	f8d4 3274 	ldr.w	r3, [r4, #628]	; 0x274
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	bf0c      	ite	eq
    4dd8:	462b      	moveq	r3, r5
    4dda:	f045 0301 	orrne.w	r3, r5, #1
    4dde:	f884 3280 	strb.w	r3, [r4, #640]	; 0x280
    4de2:	bd38      	pop	{r3, r4, r5, pc}
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    4de4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
		if (_firstPtr == _size) _firstPtr = 0;
    4de8:	f8d0 4278 	ldr.w	r4, [r0, #632]	; 0x278
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    4dec:	1c4a      	adds	r2, r1, #1
    4dee:	f8d0 526c 	ldr.w	r5, [r0, #620]	; 0x26c
		if (_firstPtr == _size) _firstPtr = 0;
    4df2:	42a2      	cmp	r2, r4
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    4df4:	f835 5011 	ldrh.w	r5, [r5, r1, lsl #1]
    4df8:	f8c0 2270 	str.w	r2, [r0, #624]	; 0x270
		if (_firstPtr == _size) _firstPtr = 0;
    4dfc:	d00b      	beq.n	4e16 <Sys80b::updateSound()+0x66>
	return false;
}

 void Sys80b::updateSound() {
	 if (!_soundPendingCmd) return;
	 byte s = soundBuffer.isEmpty() ? 0 : soundBuffer.get();
    4dfe:	b2ed      	uxtb	r5, r5
		_valuesCount--;
    4e00:	1e5a      	subs	r2, r3, #1
    4e02:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    4e06:	3500      	adds	r5, #0
    4e08:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
    4e0c:	bf18      	it	ne
    4e0e:	2501      	movne	r5, #1
    4e10:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
    4e14:	e7d5      	b.n	4dc2 <Sys80b::updateSound()+0x12>
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
		if (_firstPtr == _size) _firstPtr = 0;
    4e16:	2200      	movs	r2, #0
    4e18:	f8c0 2270 	str.w	r2, [r0, #624]	; 0x270
    4e1c:	e7ef      	b.n	4dfe <Sys80b::updateSound()+0x4e>
    4e1e:	bf00      	nop

00004e20 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]>:
void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
    4e20:	6802      	ldr	r2, [r0, #0]
	 byte s = soundBuffer.isEmpty() ? 0 : soundBuffer.get();
	 hw->writeSound(~(s & 0x7f)); // only bits 0..6, not the 7th bit
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
 }

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
    4e22:	b510      	push	{r4, lr}
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
    4e24:	6952      	ldr	r2, [r2, #20]
    4e26:	4c0a      	ldr	r4, [pc, #40]	; (4e50 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]+0x30>)
    4e28:	42a2      	cmp	r2, r4
    4e2a:	d10d      	bne.n	4e48 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]+0x28>
    4e2c:	460c      	mov	r4, r1
    4e2e:	4809      	ldr	r0, [pc, #36]	; (4e54 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]+0x34>)
    4e30:	2111      	movs	r1, #17
    4e32:	f006 fe5f 	bl	baf4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4e36:	4621      	mov	r1, r4
    4e38:	4807      	ldr	r0, [pc, #28]	; (4e58 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]+0x38>)
    4e3a:	f007 f885 	bl	bf48 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4e3e:	4806      	ldr	r0, [pc, #24]	; (4e58 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]+0x38>)
	}
}
    4e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e44:	f007 b818 	b.w	be78 <Print::println()>
    4e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
    4e4c:	4710      	bx	r2
    4e4e:	bf00      	nop
    4e50:	0000402d 	.word	0x0000402d
    4e54:	200010a4 	.word	0x200010a4
    4e58:	20001ea4 	.word	0x20001ea4

00004e5c <Sys80b::Sys80b(Board_Sys80b&)>:
//#include "SolenoidSet.h"

const byte Sys80b::dPlayerRow[] = { 0, 0, 1, 1 };
const byte Sys80b::dPlayerCol[] = { 0, 10, 0, 10 };

Sys80b::Sys80b(Board_Sys80b& board) {
    4e5c:	b538      	push	{r3, r4, r5, lr}
    4e5e:	4a1f      	ldr	r2, [pc, #124]	; (4edc <Sys80b::Sys80b(Board_Sys80b&)+0x80>)
    4e60:	4604      	mov	r4, r0
    4e62:	4b1f      	ldr	r3, [pc, #124]	; (4ee0 <Sys80b::Sys80b(Board_Sys80b&)+0x84>)
    4e64:	3010      	adds	r0, #16
    4e66:	f840 2c10 	str.w	r2, [r0, #-16]
    4e6a:	460d      	mov	r5, r1
    4e6c:	6063      	str	r3, [r4, #4]
    4e6e:	f000 fb1b 	bl	54a8 <Sys80b_Display::Sys80b_Display()>
    4e72:	f104 0054 	add.w	r0, r4, #84	; 0x54
    4e76:	f7ff fea3 	bl	4bc0 <SwitchGrid8x8::SwitchGrid8x8()>
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    4e7a:	230a      	movs	r3, #10
		_buff = new Type[_size];
    4e7c:	2014      	movs	r0, #20
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    4e7e:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
		_buff = new Type[_size];
    4e82:	f006 ffb7 	bl	bdf4 <operator new[](unsigned int)>
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    4e86:	2300      	movs	r3, #0
    4e88:	210e      	movs	r1, #14
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
		_buff = new Type[_size];
    4e8a:	f8c4 026c 	str.w	r0, [r4, #620]	; 0x26c
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    4e8e:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
		_valuesCount = 0;
    4e92:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
    4e96:	4813      	ldr	r0, [pc, #76]	; (4ee4 <Sys80b::Sys80b(Board_Sys80b&)+0x88>)
    4e98:	f006 fe2c 	bl	baf4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    4e9c:	4812      	ldr	r0, [pc, #72]	; (4ee8 <Sys80b::Sys80b(Board_Sys80b&)+0x8c>)
    4e9e:	f006 ffeb 	bl	be78 <Print::println()>
	Serial.println("Sys80b init...");
	//delay(100);
	hw = &board;
	msg = &(board.msg);
    4ea2:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
const byte Sys80b::dPlayerCol[] = { 0, 10, 0, 10 };

Sys80b::Sys80b(Board_Sys80b& board) {
	Serial.println("Sys80b init...");
	//delay(100);
	hw = &board;
    4ea6:	f8c4 528c 	str.w	r5, [r4, #652]	; 0x28c
	msg = &(board.msg);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
    4eaa:	200c      	movs	r0, #12

Sys80b::Sys80b(Board_Sys80b& board) {
	Serial.println("Sys80b init...");
	//delay(100);
	hw = &board;
	msg = &(board.msg);
    4eac:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
    4eb0:	f006 ff9e 	bl	bdf0 <operator new(unsigned int)>
    4eb4:	4605      	mov	r5, r0
    4eb6:	2109      	movs	r1, #9
    4eb8:	f7ff fd4a 	bl	4950 <SolenoidSet::SolenoidSet(unsigned char)>
    4ebc:	60e5      	str	r5, [r4, #12]
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
    4ebe:	2010      	movs	r0, #16
    4ec0:	f006 ff96 	bl	bdf0 <operator new(unsigned int)>
    4ec4:	2130      	movs	r1, #48	; 0x30
    4ec6:	4605      	mov	r5, r0
    4ec8:	f7fd fb7e 	bl	25c8 <BitMappedSet::BitMappedSet(unsigned short)>
	slamSwitchNormalState = true;
    4ecc:	2301      	movs	r3, #1
	slamSwitchLastState = slamSwitchNormalState;
	//hw = nullptr;
	//reset();
}
    4ece:	4620      	mov	r0, r4
	//delay(100);
	hw = &board;
	msg = &(board.msg);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
    4ed0:	60a5      	str	r5, [r4, #8]
	slamSwitchNormalState = true;
    4ed2:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
	slamSwitchLastState = slamSwitchNormalState;
    4ed6:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
	//hw = nullptr;
	//reset();
}
    4eda:	bd38      	pop	{r3, r4, r5, pc}
    4edc:	200011d4 	.word	0x200011d4
    4ee0:	200011f0 	.word	0x200011f0
    4ee4:	200011f8 	.word	0x200011f8
    4ee8:	20001ea4 	.word	0x20001ea4

00004eec <Sys80b::reset()>:
	delete solenoids;
	delete lamps;
}

// reset all outputs to 0
void Sys80b::reset() {
    4eec:	b538      	push	{r3, r4, r5, lr}
	msg->outln(F("Sys80b reset..."));
    4eee:	4914      	ldr	r1, [pc, #80]	; (4f40 <Sys80b::reset()+0x54>)
	delete solenoids;
	delete lamps;
}

// reset all outputs to 0
void Sys80b::reset() {
    4ef0:	4604      	mov	r4, r0
	msg->outln(F("Sys80b reset..."));
    4ef2:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    4ef6:	2500      	movs	r5, #0
    4ef8:	f001 faaa 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	delay(100);
    4efc:	2064      	movs	r0, #100	; 0x64
    4efe:	f005 facd 	bl	a49c <delay>

	hw->outputReset();
    4f02:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    4f06:	f000 fe5b 	bl	5bc0 <Board_Sys80b::outputReset()>
	lamps->reset();
    4f0a:	68a0      	ldr	r0, [r4, #8]
    4f0c:	f7fd fb46 	bl	259c <BitMappedSet::reset()>
	solenoids->resetAll();
    4f10:	68e0      	ldr	r0, [r4, #12]
    4f12:	f7ff fdcb 	bl	4aac <SolenoidSet::resetAll()>
    4f16:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
		_valuesCount = 0;
    4f1a:	f8c4 5274 	str.w	r5, [r4, #628]	; 0x274
	soundBuffer.Clear();
	currentLampGroup = 0;
	display.reset();
    4f1e:	f104 0010 	add.w	r0, r4, #16

	hw->outputReset();
	lamps->reset();
	solenoids->resetAll();
	soundBuffer.Clear();
	currentLampGroup = 0;
    4f22:	f884 527c 	strb.w	r5, [r4, #636]	; 0x27c
	display.reset();
    4f26:	f000 fb99 	bl	565c <Sys80b_Display::reset()>
	_soundPendingCmd = false;
	_changedSwitchNum = 0xff;
    4f2a:	22ff      	movs	r2, #255	; 0xff
	slamSwitchLastState = slamSwitchNormalState;
    4f2c:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
	lamps->reset();
	solenoids->resetAll();
	soundBuffer.Clear();
	currentLampGroup = 0;
	display.reset();
	_soundPendingCmd = false;
    4f30:	f884 5280 	strb.w	r5, [r4, #640]	; 0x280
	_changedSwitchNum = 0xff;
    4f34:	f884 2281 	strb.w	r2, [r4, #641]	; 0x281
	slamSwitchLastState = slamSwitchNormalState;
    4f38:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    4f3c:	bd38      	pop	{r3, r4, r5, pc}
    4f3e:	bf00      	nop
    4f40:	20001208 	.word	0x20001208

00004f44 <Sys80b::setSolenoid(unsigned char, bool)>:
}

// sets a solenoid state, updating internal variables
// n = [1..9]
void Sys80b::setSolenoid(byte n, bool active) {
	if (n < 1 || n > 9) return;
    4f44:	3901      	subs	r1, #1
    4f46:	b2c9      	uxtb	r1, r1
    4f48:	2908      	cmp	r1, #8
    4f4a:	d900      	bls.n	4f4e <Sys80b::setSolenoid(unsigned char, bool)+0xa>
    4f4c:	4770      	bx	lr
	//return 3; // TODO
}

// sets a solenoid state, updating internal variables
// n = [1..9]
void Sys80b::setSolenoid(byte n, bool active) {
    4f4e:	b538      	push	{r3, r4, r5, lr}
    4f50:	4604      	mov	r4, r0
	if (n < 1 || n > 9) return;
	solenoids->setState(n-1, active);
    4f52:	68c0      	ldr	r0, [r0, #12]
    4f54:	f7ff fd78 	bl	4a48 <SolenoidSet::setState(unsigned char, bool)>
	hw->writeSolenoids(solenoids->getStates());
    4f58:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
    4f5c:	68e0      	ldr	r0, [r4, #12]
    4f5e:	f7ff fe19 	bl	4b94 <SolenoidSet::getStates()>
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    void writeDisplayLD(byte b);
    inline void writeDisplayLD1(bool b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(bool b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    4f62:	b281      	uxth	r1, r0
    4f64:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
}
    4f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f6c:	f002 ba74 	b.w	7458 <PIO::mcpWrite(unsigned short)>

00004f70 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>:
// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
// n = [1..9]
 void Sys80b::activateSolenoid(byte n, uint16_t actPeriod, uint16_t swDelay) {
	//Serial.printf("activateSolenoid(%d, %d, %d)\n",n, actPeriod, swDelay);
	if (n < 1 || n > 9) return;
    4f70:	3901      	subs	r1, #1
    4f72:	b2c9      	uxtb	r1, r1
    4f74:	2908      	cmp	r1, #8
    4f76:	d814      	bhi.n	4fa2 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)+0x32>
	if (actPeriod == 0) actPeriod = SOL_DEF_TIME;
    4f78:	2a00      	cmp	r2, #0
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
// n = [1..9]
 void Sys80b::activateSolenoid(byte n, uint16_t actPeriod, uint16_t swDelay) {
    4f7a:	b538      	push	{r3, r4, r5, lr}
    4f7c:	4604      	mov	r4, r0
	//Serial.printf("activateSolenoid(%d, %d, %d)\n",n, actPeriod, swDelay);
	if (n < 1 || n > 9) return;
	if (actPeriod == 0) actPeriod = SOL_DEF_TIME;
	solenoids->activate(n-1, actPeriod, swDelay);
    4f7e:	bf08      	it	eq
    4f80:	f44f 72fa 	moveq.w	r2, #500	; 0x1f4
    4f84:	68c0      	ldr	r0, [r0, #12]
    4f86:	f7ff fd85 	bl	4a94 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)>
	hw->writeSolenoids(solenoids->getStates());
    4f8a:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
    4f8e:	68e0      	ldr	r0, [r4, #12]
    4f90:	f7ff fe00 	bl	4b94 <SolenoidSet::getStates()>
    4f94:	b281      	uxth	r1, r0
    4f96:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
}
    4f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f9e:	f002 ba5b 	b.w	7458 <PIO::mcpWrite(unsigned short)>
    4fa2:	4770      	bx	lr

00004fa4 <Sys80b::checkSolenoids(unsigned long&)>:

// checks whether:
// - delay activation time elapsed (when delayedSwitch = true)
// - maximum active time elapsed for safe switch-off
 void Sys80b::checkSolenoids(uint32_t& t) {
    4fa4:	b538      	push	{r3, r4, r5, lr}
    4fa6:	4604      	mov	r4, r0
	if (solenoids->update(t)) hw->writeSolenoids(solenoids->getStates());
    4fa8:	68c0      	ldr	r0, [r0, #12]
    4faa:	f7ff fd8f 	bl	4acc <SolenoidSet::update(unsigned long&)>
    4fae:	b900      	cbnz	r0, 4fb2 <Sys80b::checkSolenoids(unsigned long&)+0xe>
    4fb0:	bd38      	pop	{r3, r4, r5, pc}
    4fb2:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
    4fb6:	68e0      	ldr	r0, [r4, #12]
    4fb8:	f7ff fdec 	bl	4b94 <SolenoidSet::getStates()>
    4fbc:	b281      	uxth	r1, r0
    4fbe:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
}
    4fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4fc6:	f002 ba47 	b.w	7458 <PIO::mcpWrite(unsigned short)>
    4fca:	bf00      	nop

00004fcc <Sys80b::setSound(unsigned char)>:

// snd = 0..31
 void Sys80b::setSound(byte snd) {
    4fcc:	b430      	push	{r4, r5}
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4fce:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
    4fd2:	f8d0 4278 	ldr.w	r4, [r0, #632]	; 0x278
    4fd6:	42a2      	cmp	r2, r4
    4fd8:	d20c      	bcs.n	4ff4 <Sys80b::setSound(unsigned char)+0x28>
		unsigned p = _firstPtr + _valuesCount++;
    4fda:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
    4fde:	1c55      	adds	r5, r2, #1
    4fe0:	4413      	add	r3, r2
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4fe2:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4fe6:	f8c0 5274 	str.w	r5, [r0, #628]	; 0x274
		if (p >= _size) p -= _size;
    4fea:	429c      	cmp	r4, r3
    4fec:	bf98      	it	ls
    4fee:	1b1b      	subls	r3, r3, r4
		_buff[p] = value;
    4ff0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//soundBuffer.sendCmd(snd);
	soundBuffer.put(snd);
	_soundPendingCmd = true;
    4ff4:	2301      	movs	r3, #1
}
    4ff6:	bc30      	pop	{r4, r5}

// snd = 0..31
 void Sys80b::setSound(byte snd) {
	//soundBuffer.sendCmd(snd);
	soundBuffer.put(snd);
	_soundPendingCmd = true;
    4ff8:	f880 3280 	strb.w	r3, [r0, #640]	; 0x280
}
    4ffc:	4770      	bx	lr
    4ffe:	bf00      	nop

00005000 <Sys80b::incrementStrobe()>:

// uint16_t Sys80b::pullSoundCmd() {
//	return (soundBuffer.isEmpty()) ? 0 : soundBuffer.get();
//}

byte Sys80b::incrementStrobe() {
    5000:	b538      	push	{r3, r4, r5, lr}
    5002:	4605      	mov	r5, r0
	byte strb = switchGrid.incrementStrobe();
    5004:	3054      	adds	r0, #84	; 0x54
    5006:	f7ff fe0b 	bl	4c20 <SwitchGrid8x8::incrementStrobe()>
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    void writeDisplayLD(byte b);
    inline void writeDisplayLD1(bool b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(bool b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    500a:	2101      	movs	r1, #1
    500c:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
    5010:	4604      	mov	r4, r0
    5012:	4081      	lsls	r1, r0
    5014:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    5018:	43c9      	mvns	r1, r1
    501a:	b2c9      	uxtb	r1, r1
    501c:	f002 fb36 	bl	768c <PIO::mcpWritePA(unsigned char)>
	hw->writeStrobes(~(byte)(1u<<strb)); // strobe advance (inverted)
	return strb;
}
    5020:	4620      	mov	r0, r4
    5022:	bd38      	pop	{r3, r4, r5, pc}

00005024 <Sys80b::acquireReturns(unsigned long&)>:
// Stores returns states in <_returnsInput> variable
// updating internal SwitchGrid8x8 object attributes.
// Returned value is also stored internally and readable
// through getChangedSwitch() function.
// returns: last changed switch number (0xff in case of no changes)
byte Sys80b::acquireReturns(uint32_t& t) {
    5024:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
    5028:	b570      	push	{r4, r5, r6, lr}
	_returnsInput = (byte)~(hw->readReturns()); // read actual switch returns on current strobe line (inverted)
	switchGrid.setCurrentRow(_returnsInput, t);
    502a:	f100 0554 	add.w	r5, r0, #84	; 0x54
// Stores returns states in <_returnsInput> variable
// updating internal SwitchGrid8x8 object attributes.
// Returned value is also stored internally and readable
// through getChangedSwitch() function.
// returns: last changed switch number (0xff in case of no changes)
byte Sys80b::acquireReturns(uint32_t& t) {
    502e:	4604      	mov	r4, r0
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    inline byte readReturns() { return switchMatrix_IO->mcpReadPB(); }
    5030:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    5034:	460e      	mov	r6, r1
    5036:	f002 f927 	bl	7288 <PIO::mcpReadPB()>
	_returnsInput = (byte)~(hw->readReturns()); // read actual switch returns on current strobe line (inverted)
    503a:	43c3      	mvns	r3, r0
	switchGrid.setCurrentRow(_returnsInput, t);
    503c:	4632      	mov	r2, r6
    503e:	4628      	mov	r0, r5
// updating internal SwitchGrid8x8 object attributes.
// Returned value is also stored internally and readable
// through getChangedSwitch() function.
// returns: last changed switch number (0xff in case of no changes)
byte Sys80b::acquireReturns(uint32_t& t) {
	_returnsInput = (byte)~(hw->readReturns()); // read actual switch returns on current strobe line (inverted)
    5040:	b2d9      	uxtb	r1, r3
    5042:	f884 127f 	strb.w	r1, [r4, #639]	; 0x27f
	switchGrid.setCurrentRow(_returnsInput, t);
    5046:	f7ff fe4b 	bl	4ce0 <SwitchGrid8x8::setCurrentRow(unsigned char, unsigned long&)>
	if (!switchGrid.currentRowChanged()) _changedSwitchNum = 0xff;
    504a:	4628      	mov	r0, r5
    504c:	f7ff fe4e 	bl	4cec <SwitchGrid8x8::currentRowChanged()>
    5050:	b920      	cbnz	r0, 505c <Sys80b::acquireReturns(unsigned long&)+0x38>
    5052:	23ff      	movs	r3, #255	; 0xff
    5054:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
	else {
		_changedSwitchNum = switchGrid.getLastChangedSwitch();
		_changedSwitchState = switchGrid.getSwitch(_changedSwitchNum);
	}
	return _changedSwitchNum;
}
    5058:	4618      	mov	r0, r3
    505a:	bd70      	pop	{r4, r5, r6, pc}
byte Sys80b::acquireReturns(uint32_t& t) {
	_returnsInput = (byte)~(hw->readReturns()); // read actual switch returns on current strobe line (inverted)
	switchGrid.setCurrentRow(_returnsInput, t);
	if (!switchGrid.currentRowChanged()) _changedSwitchNum = 0xff;
	else {
		_changedSwitchNum = switchGrid.getLastChangedSwitch();
    505c:	4628      	mov	r0, r5
    505e:	f7ff fdef 	bl	4c40 <SwitchGrid8x8::getLastChangedSwitch()>
    5062:	4601      	mov	r1, r0
		_changedSwitchState = switchGrid.getSwitch(_changedSwitchNum);
    5064:	4628      	mov	r0, r5
byte Sys80b::acquireReturns(uint32_t& t) {
	_returnsInput = (byte)~(hw->readReturns()); // read actual switch returns on current strobe line (inverted)
	switchGrid.setCurrentRow(_returnsInput, t);
	if (!switchGrid.currentRowChanged()) _changedSwitchNum = 0xff;
	else {
		_changedSwitchNum = switchGrid.getLastChangedSwitch();
    5066:	f884 1281 	strb.w	r1, [r4, #641]	; 0x281
		_changedSwitchState = switchGrid.getSwitch(_changedSwitchNum);
    506a:	f7ff fe45 	bl	4cf8 <SwitchGrid8x8::getSwitch(unsigned char)>
    506e:	f894 3281 	ldrb.w	r3, [r4, #641]	; 0x281
    5072:	f884 0282 	strb.w	r0, [r4, #642]	; 0x282
	}
	return _changedSwitchNum;
}
    5076:	4618      	mov	r0, r3
    5078:	bd70      	pop	{r4, r5, r6, pc}
    507a:	bf00      	nop

0000507c <Sys80b::feedDisplay()>:

// Gets next sequencial data to send to display and forwards each byte to its 
// correspondig line.
// If data contains a byte routed to both rows, it will be forwarded only once.
void Sys80b::feedDisplay() {
    507c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5080:	4605      	mov	r5, r0
    5082:	f04f 0901 	mov.w	r9, #1
    5086:	4f2f      	ldr	r7, [pc, #188]	; (5144 <Sys80b::feedDisplay()+0xc8>)
    5088:	f100 0810 	add.w	r8, r0, #16
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    508c:	4c2e      	ldr	r4, [pc, #184]	; (5148 <Sys80b::feedDisplay()+0xcc>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    508e:	4e2f      	ldr	r6, [pc, #188]	; (514c <Sys80b::feedDisplay()+0xd0>)
	uint16_t dd; // display control + data
	byte dc; // display control code: 1 = row 1; 2 = row 2; 3 = both rows
	byte db; // display data (8-bit);

	for (int i = 0; i < 2; i++) { // 1 iteration only in case dc == 3
		dd = display.getNextDisplayData();
    5090:	4640      	mov	r0, r8
    5092:	f000 fa49 	bl	5528 <Sys80b_Display::getNextDisplayData()>
    5096:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		dc = (byte)((dd & 0x300) >> 8);
    509a:	f3c0 2b07 	ubfx	fp, r0, #8, #8
    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    509e:	b2c1      	uxtb	r1, r0
    50a0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    50a4:	f002 faf2 	bl	768c <PIO::mcpWritePA(unsigned char)>
		db = (byte)(dd & 0xff);
		hw->writeDisplayData(db); // updates 8-bit data bus
		if (dc & 1u) hw->writeDisplayLD1(HIGH); // LD on
    50a8:	f01b 0e01 	ands.w	lr, fp, #1
	byte dc; // display control code: 1 = row 1; 2 = row 2; 3 = both rows
	byte db; // display data (8-bit);

	for (int i = 0; i < 2; i++) { // 1 iteration only in case dc == 3
		dd = display.getNextDisplayData();
		dc = (byte)((dd & 0x300) >> 8);
    50ac:	f00b 0a03 	and.w	sl, fp, #3
		db = (byte)(dd & 0xff);
		hw->writeDisplayData(db); // updates 8-bit data bus
		if (dc & 1u) hw->writeDisplayLD1(HIGH); // LD on
    50b0:	d005      	beq.n	50be <Sys80b::feedDisplay()+0x42>
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
    50b2:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    50b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    50ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    50be:	f00b 0302 	and.w	r3, fp, #2
		if (dc & 2u) hw->writeDisplayLD2(HIGH);
    50c2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    50c6:	b12b      	cbz	r3, 50d4 <Sys80b::feedDisplay()+0x58>
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
    50c8:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    50cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    50d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    50d4:	6821      	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    50d6:	683a      	ldr	r2, [r7, #0]
    50d8:	fba6 3202 	umull	r3, r2, r6, r2
    50dc:	0c93      	lsrs	r3, r2, #18
    50de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    50e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    50e6:	6823      	ldr	r3, [r4, #0]
    50e8:	1a5b      	subs	r3, r3, r1
    50ea:	429a      	cmp	r2, r3
    50ec:	d8fb      	bhi.n	50e6 <Sys80b::feedDisplay()+0x6a>
		delayMicroseconds(11);
		if (dc & 1u) hw->writeDisplayLD1(LOW); // LD off
    50ee:	f1be 0f00 	cmp.w	lr, #0
    50f2:	d005      	beq.n	5100 <Sys80b::feedDisplay()+0x84>
			} else if (pin == 14) {
				CORE_PIN14_PORTCLEAR = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTCLEAR = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
    50f4:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    50f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    50fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if (dc & 2u) hw->writeDisplayLD2(LOW);
    5100:	b128      	cbz	r0, 510e <Sys80b::feedDisplay()+0x92>
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
    5102:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5106:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    510a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if (dc == 3u) break; // CMD for both rows has already been sent
    510e:	f1ba 0f03 	cmp.w	sl, #3
    5112:	d008      	beq.n	5126 <Sys80b::feedDisplay()+0xaa>
		if (i == 0) delayMicroseconds(100); // only after first iteration
    5114:	f1b9 0f01 	cmp.w	r9, #1
    5118:	d007      	beq.n	512a <Sys80b::feedDisplay()+0xae>
void Sys80b::feedDisplay() {
	uint16_t dd; // display control + data
	byte dc; // display control code: 1 = row 1; 2 = row 2; 3 = both rows
	byte db; // display data (8-bit);

	for (int i = 0; i < 2; i++) { // 1 iteration only in case dc == 3
    511a:	f1b9 0f02 	cmp.w	r9, #2
    511e:	d002      	beq.n	5126 <Sys80b::feedDisplay()+0xaa>
    5120:	f109 0901 	add.w	r9, r9, #1
    5124:	e7b4      	b.n	5090 <Sys80b::feedDisplay()+0x14>
    5126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    512a:	6821      	ldr	r1, [r4, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    512c:	2264      	movs	r2, #100	; 0x64
    512e:	683b      	ldr	r3, [r7, #0]
    5130:	fba6 0303 	umull	r0, r3, r6, r3
    5134:	0c9b      	lsrs	r3, r3, #18
    5136:	fb02 f303 	mul.w	r3, r2, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    513a:	6822      	ldr	r2, [r4, #0]
    513c:	1a52      	subs	r2, r2, r1
    513e:	4293      	cmp	r3, r2
    5140:	d8fb      	bhi.n	513a <Sys80b::feedDisplay()+0xbe>
    5142:	e7ed      	b.n	5120 <Sys80b::feedDisplay()+0xa4>
    5144:	20001e70 	.word	0x20001e70
    5148:	e0001004 	.word	0xe0001004
    514c:	431bde83 	.word	0x431bde83

00005150 <Sys80b::renderNextLampsGroup()>:
}

// Real lamps update routine.
// Updates 1 consecutive group of 4 lamps for each call.
// Returns true in case of effective update forwarded.
bool Sys80b::renderNextLampsGroup() {
    5150:	b570      	push	{r4, r5, r6, lr}
    5152:	4605      	mov	r5, r0
    5154:	240c      	movs	r4, #12
	byte i;

	for (i = 0; i < 12; i++) { // search next not-updated group
		if (lamps->getChanges4(currentLampGroup) > 0) break;
    5156:	f895 127c 	ldrb.w	r1, [r5, #636]	; 0x27c
    515a:	68a8      	ldr	r0, [r5, #8]
    515c:	f7fd fabc 	bl	26d8 <BitMappedSet::getChanges4(unsigned short)>
    5160:	b988      	cbnz	r0, 5186 <Sys80b::renderNextLampsGroup()+0x36>
		if (++currentLampGroup >= 12) currentLampGroup = 0;
    5162:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    5166:	3301      	adds	r3, #1
    5168:	b2db      	uxtb	r3, r3
    516a:	2b0b      	cmp	r3, #11
    516c:	bf88      	it	hi
    516e:	f885 027c 	strbhi.w	r0, [r5, #636]	; 0x27c
    5172:	f104 30ff 	add.w	r0, r4, #4294967295
    5176:	bf98      	it	ls
    5178:	f885 327c 	strbls.w	r3, [r5, #636]	; 0x27c
// Updates 1 consecutive group of 4 lamps for each call.
// Returns true in case of effective update forwarded.
bool Sys80b::renderNextLampsGroup() {
	byte i;

	for (i = 0; i < 12; i++) { // search next not-updated group
    517c:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    5180:	d1e9      	bne.n	5156 <Sys80b::renderNextLampsGroup()+0x6>
		hw->write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
		lamps->clearChanges4(currentLampGroup);
		return true;
	}
	//clearLampsOutput();
	return false;
    5182:	4620      	mov	r0, r4
    5184:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < 12; i++) { // search next not-updated group
		if (lamps->getChanges4(currentLampGroup) > 0) break;
		if (++currentLampGroup >= 12) currentLampGroup = 0;
	}
	if (i < 12) { // pending update
		hw->write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
    5186:	f895 427c 	ldrb.w	r4, [r5, #636]	; 0x27c
    518a:	f8d5 628c 	ldr.w	r6, [r5, #652]	; 0x28c
    518e:	4621      	mov	r1, r4
    5190:	68a8      	ldr	r0, [r5, #8]
    5192:	f7fd fa8b 	bl	26ac <BitMappedSet::getStates4(unsigned short)>
    5196:	4621      	mov	r1, r4
    5198:	4602      	mov	r2, r0
    519a:	4630      	mov	r0, r6
    519c:	f000 fda6 	bl	5cec <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>
		lamps->clearChanges4(currentLampGroup);
    51a0:	68a8      	ldr	r0, [r5, #8]
    51a2:	f895 127c 	ldrb.w	r1, [r5, #636]	; 0x27c
    51a6:	f7fd faa5 	bl	26f4 <BitMappedSet::clearChanges4(unsigned short)>
    51aa:	2001      	movs	r0, #1
		return true;
	}
	//clearLampsOutput();
	return false;
}
    51ac:	bd70      	pop	{r4, r5, r6, pc}
    51ae:	bf00      	nop

000051b0 <Sys80b::renderLampsGroup(unsigned char)>:

// Updates a group of 4 lamp.
// Returns true in case of effective update forwarded.
bool Sys80b::renderLampsGroup(byte lg) {
    51b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lamps->getChanges4(lg) > 0) { // pending changes ?
    51b2:	b28d      	uxth	r5, r1
	return false;
}

// Updates a group of 4 lamp.
// Returns true in case of effective update forwarded.
bool Sys80b::renderLampsGroup(byte lg) {
    51b4:	460e      	mov	r6, r1
    51b6:	4604      	mov	r4, r0
	if (lamps->getChanges4(lg) > 0) { // pending changes ?
    51b8:	6880      	ldr	r0, [r0, #8]
    51ba:	4629      	mov	r1, r5
    51bc:	f7fd fa8c 	bl	26d8 <BitMappedSet::getChanges4(unsigned short)>
    51c0:	b178      	cbz	r0, 51e2 <Sys80b::renderLampsGroup(unsigned char)+0x32>
		hw->write4Lamps(lg, lamps->getStates4(lg));
    51c2:	f8d4 728c 	ldr.w	r7, [r4, #652]	; 0x28c
    51c6:	4629      	mov	r1, r5
    51c8:	68a0      	ldr	r0, [r4, #8]
    51ca:	f7fd fa6f 	bl	26ac <BitMappedSet::getStates4(unsigned short)>
    51ce:	4631      	mov	r1, r6
    51d0:	4602      	mov	r2, r0
    51d2:	4638      	mov	r0, r7
    51d4:	f000 fd8a 	bl	5cec <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>
		lamps->clearChanges4(lg);
    51d8:	68a0      	ldr	r0, [r4, #8]
    51da:	4629      	mov	r1, r5
    51dc:	f7fd fa8a 	bl	26f4 <BitMappedSet::clearChanges4(unsigned short)>
		return true;
    51e0:	2001      	movs	r0, #1
	}
	return false;
}
    51e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000051e4 <Sys80b::updUserKeyState(UserKey, unsigned long&)>:
	 byte s = soundBuffer.isEmpty() ? 0 : soundBuffer.get();
	 hw->writeSound(~(s & 0x7f)); // only bits 0..6, not the 7th bit
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
 }

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
    51e4:	b430      	push	{r4, r5}
	if (key != _keyPressed) {
    51e6:	f890 5283 	ldrb.w	r5, [r0, #643]	; 0x283
    51ea:	428d      	cmp	r5, r1
    51ec:	d009      	beq.n	5202 <Sys80b::updUserKeyState(UserKey, unsigned long&)+0x1e>
		_keyPressed = key;
		_keyStartTime = ms;
    51ee:	6815      	ldr	r5, [r2, #0]
    51f0:	4603      	mov	r3, r0
		_keyRepeat = false;
    51f2:	2200      	movs	r2, #0
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
 }

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    51f4:	f883 1283 	strb.w	r1, [r3, #643]	; 0x283
		_keyStartTime = ms;
    51f8:	f8c0 5288 	str.w	r5, [r0, #648]	; 0x288
		_keyRepeat = false;
    51fc:	f880 2284 	strb.w	r2, [r0, #644]	; 0x284
		if (key != NO_KEY) onButtonPressed(key);
    5200:	b909      	cbnz	r1, 5206 <Sys80b::updUserKeyState(UserKey, unsigned long&)+0x22>
	}
}
    5202:	bc30      	pop	{r4, r5}
    5204:	4770      	bx	lr
    5206:	bc30      	pop	{r4, r5}
    5208:	f7ff be0a 	b.w	4e20 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.9] [clone .constprop.14]>

0000520c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)>:

void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
    520c:	b5f0      	push	{r4, r5, r6, r7, lr}
    520e:	b089      	sub	sp, #36	; 0x24
    5210:	460d      	mov	r5, r1
    5212:	4604      	mov	r4, r0
	String str;
    5214:	2100      	movs	r1, #0
    5216:	4668      	mov	r0, sp
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
	}
}

void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
    5218:	4616      	mov	r6, r2
    521a:	461f      	mov	r7, r3
	String str;
    521c:	f006 ff2e 	bl	c07c <String::String(char const*)>

	str = "switch ";
    5220:	4928      	ldr	r1, [pc, #160]	; (52c4 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xb8>)
    5222:	4668      	mov	r0, sp
    5224:	f006 ffd8 	bl	c1d8 <String::operator=(char const*)>
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
    5228:	4629      	mov	r1, r5
    522a:	4668      	mov	r0, sp
    522c:	f007 f846 	bl	c2bc <String::append(int)>
	str += sw;
	str += (st ? " closed" : " opened");
    5230:	4b25      	ldr	r3, [pc, #148]	; (52c8 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xbc>)
    5232:	4926      	ldr	r1, [pc, #152]	; (52cc <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xc0>)
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    5234:	4668      	mov	r0, sp
    5236:	2e00      	cmp	r6, #0
    5238:	bf08      	it	eq
    523a:	4619      	moveq	r1, r3
    523c:	f007 f820 	bl	c280 <String::append(char const*)>
	msg->outln(str);
    5240:	4669      	mov	r1, sp
    5242:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    5246:	f001 f969 	bl	651c <Msg::outln(String&)>

	// user buttons
	if (sw == LEFTADV_KEY || sw == RIGHTADV_KEY || sw == REPLAY_KEY) {
    524a:	1e6b      	subs	r3, r5, #1
    524c:	2b02      	cmp	r3, #2
    524e:	d82f      	bhi.n	52b0 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xa4>
			key = REPLAY_KEY;
			str = "REPLAY";
			break;
		default:
			key = NO_KEY;
			str = "<unknown>";
    5250:	491f      	ldr	r1, [pc, #124]	; (52d0 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xc4>)
    5252:	4668      	mov	r0, sp
    5254:	f006 ffc0 	bl	c1d8 <String::operator=(char const*)>
	 hw->writeSound(~(s & 0x7f)); // only bits 0..6, not the 7th bit
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
 }

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
    5258:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
    525c:	b13b      	cbz	r3, 526e <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x62>
		_keyPressed = key;
		_keyStartTime = ms;
    525e:	683a      	ldr	r2, [r7, #0]
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
 }

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    5260:	2300      	movs	r3, #0
		_keyStartTime = ms;
    5262:	f8c4 2288 	str.w	r2, [r4, #648]	; 0x288
	 _soundPendingCmd = !(soundBuffer.isEmpty() && s == 0);
 }

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    5266:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
		_keyStartTime = ms;
		_keyRepeat = false;
    526a:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    526e:	4919      	ldr	r1, [pc, #100]	; (52d4 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xc8>)
    5270:	a804      	add	r0, sp, #16
    5272:	f006 ff03 	bl	c07c <String::String(char const*)>
		default:
			key = NO_KEY;
			str = "<unknown>";
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		str = "Key " + str;
    5276:	4669      	mov	r1, sp
    5278:	a804      	add	r0, sp, #16
    527a:	f007 f833 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    527e:	4601      	mov	r1, r0
    5280:	4668      	mov	r0, sp
    5282:	f006 ff99 	bl	c1b8 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    5286:	a804      	add	r0, sp, #16
    5288:	f006 feb8 	bl	bffc <String::~String()>
		str += (st ? " pressed" : " released");
    528c:	4b12      	ldr	r3, [pc, #72]	; (52d8 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xcc>)
    528e:	4913      	ldr	r1, [pc, #76]	; (52dc <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xd0>)
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    5290:	4668      	mov	r0, sp
    5292:	2e00      	cmp	r6, #0
    5294:	bf08      	it	eq
    5296:	4619      	moveq	r1, r3
    5298:	f006 fff2 	bl	c280 <String::append(char const*)>
		msg->outln(str);
    529c:	4669      	mov	r1, sp
    529e:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    52a2:	f001 f93b 	bl	651c <Msg::outln(String&)>
		return;
    52a6:	4668      	mov	r0, sp
    52a8:	f006 fea8 	bl	bffc <String::~String()>
	// TEST button
	if (sw == TEST_SW) {
		onTestButtonPressed();
		return;
	}
}
    52ac:	b009      	add	sp, #36	; 0x24
    52ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->outln(str);
		return;
	}

	// TEST button
	if (sw == TEST_SW) {
    52b0:	2d07      	cmp	r5, #7
    52b2:	d1f8      	bne.n	52a6 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x9a>
		onTestButtonPressed();
    52b4:	6823      	ldr	r3, [r4, #0]
    52b6:	4a0a      	ldr	r2, [pc, #40]	; (52e0 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0xd4>)
    52b8:	699b      	ldr	r3, [r3, #24]
    52ba:	4293      	cmp	r3, r2
    52bc:	d0f3      	beq.n	52a6 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x9a>
    52be:	4620      	mov	r0, r4
    52c0:	4798      	blx	r3
    52c2:	e7f0      	b.n	52a6 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x9a>
    52c4:	20001234 	.word	0x20001234
    52c8:	20001220 	.word	0x20001220
    52cc:	20001218 	.word	0x20001218
    52d0:	2000123c 	.word	0x2000123c
    52d4:	20001248 	.word	0x20001248
    52d8:	20001228 	.word	0x20001228
    52dc:	20000034 	.word	0x20000034
    52e0:	00004d25 	.word	0x00004d25

000052e4 <Sys80b::_checkPressedKey(unsigned long&)>:
		return;
	}
}

void Sys80b::_checkPressedKey(uint32_t& ms) {
    52e4:	b570      	push	{r4, r5, r6, lr}
	if (_keyPressed != NO_KEY) {
    52e6:	f890 4283 	ldrb.w	r4, [r0, #643]	; 0x283
    52ea:	b304      	cbz	r4, 532e <Sys80b::_checkPressedKey(unsigned long&)+0x4a>
		if (!_keyRepeat) {
    52ec:	f890 2284 	ldrb.w	r2, [r0, #644]	; 0x284
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
    52f0:	6809      	ldr	r1, [r1, #0]
	}
}

void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
    52f2:	b9fa      	cbnz	r2, 5334 <Sys80b::_checkPressedKey(unsigned long&)+0x50>
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
    52f4:	f8d0 2288 	ldr.w	r2, [r0, #648]	; 0x288
    52f8:	1a8a      	subs	r2, r1, r2
    52fa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    52fe:	d318      	bcc.n	5332 <Sys80b::_checkPressedKey(unsigned long&)+0x4e>
				_keyRepeat = true;
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    5300:	6802      	ldr	r2, [r0, #0]

void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
				_keyRepeat = true;
    5302:	2601      	movs	r6, #1
    5304:	4d13      	ldr	r5, [pc, #76]	; (5354 <Sys80b::_checkPressedKey(unsigned long&)+0x70>)
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    5306:	6952      	ldr	r2, [r2, #20]
void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
				_keyRepeat = true;
				_keyStartTime = ms;
    5308:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
    530c:	42aa      	cmp	r2, r5

void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
				_keyRepeat = true;
    530e:	f880 6284 	strb.w	r6, [r0, #644]	; 0x284
    5312:	d11b      	bne.n	534c <Sys80b::_checkPressedKey(unsigned long&)+0x68>
    5314:	2111      	movs	r1, #17
    5316:	4810      	ldr	r0, [pc, #64]	; (5358 <Sys80b::_checkPressedKey(unsigned long&)+0x74>)
    5318:	f006 fbec 	bl	baf4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    531c:	4621      	mov	r1, r4
    531e:	480f      	ldr	r0, [pc, #60]	; (535c <Sys80b::_checkPressedKey(unsigned long&)+0x78>)
    5320:	f006 fe12 	bl	bf48 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5324:	480d      	ldr	r0, [pc, #52]	; (535c <Sys80b::_checkPressedKey(unsigned long&)+0x78>)
				onButtonPressed(_keyPressed);
			}
		}
	}
	else _keyRepeat = false;
}
    5326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    532a:	f006 bda5 	b.w	be78 <Print::println()>
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
			}
		}
	}
	else _keyRepeat = false;
    532e:	f880 4284 	strb.w	r4, [r0, #644]	; 0x284
    5332:	bd70      	pop	{r4, r5, r6, pc}
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
			}
		}
		else { // repeating key
			if (ms - _keyStartTime >= KEY_REPEAT_PERIOD) {
    5334:	f8d0 2288 	ldr.w	r2, [r0, #648]	; 0x288
    5338:	1a8a      	subs	r2, r1, r2
    533a:	2ac7      	cmp	r2, #199	; 0xc7
    533c:	d9f9      	bls.n	5332 <Sys80b::_checkPressedKey(unsigned long&)+0x4e>
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    533e:	6802      	ldr	r2, [r0, #0]
    5340:	4d04      	ldr	r5, [pc, #16]	; (5354 <Sys80b::_checkPressedKey(unsigned long&)+0x70>)
    5342:	6952      	ldr	r2, [r2, #20]
				onButtonPressed(_keyPressed);
			}
		}
		else { // repeating key
			if (ms - _keyStartTime >= KEY_REPEAT_PERIOD) {
				_keyStartTime = ms;
    5344:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
    5348:	42aa      	cmp	r2, r5
    534a:	d0e3      	beq.n	5314 <Sys80b::_checkPressedKey(unsigned long&)+0x30>
				onButtonPressed(_keyPressed);
    534c:	4621      	mov	r1, r4
			}
		}
	}
	else _keyRepeat = false;
}
    534e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}
		else { // repeating key
			if (ms - _keyStartTime >= KEY_REPEAT_PERIOD) {
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    5352:	4710      	bx	r2
    5354:	0000402d 	.word	0x0000402d
    5358:	200010a4 	.word	0x200010a4
    535c:	20001ea4 	.word	0x20001ea4

00005360 <Sys80b::_millisRoutine(unsigned long&)>:
// called every millisecond.
// Returns true when an input change has detected:
// either a switch from grid or the slam switch.
// In case of change detection, use getChangesSwitch()
// to get the event.
void Sys80b::_millisRoutine(uint32_t& ms) {
    5360:	b570      	push	{r4, r5, r6, lr}
    5362:	4604      	mov	r4, r0
    5364:	460d      	mov	r5, r1
	
	renderNextLampsGroup();
    5366:	f7ff fef3 	bl	5150 <Sys80b::renderNextLampsGroup()>
	updateSound();
    536a:	6823      	ldr	r3, [r4, #0]
    536c:	4620      	mov	r0, r4
    536e:	689b      	ldr	r3, [r3, #8]
    5370:	4798      	blx	r3
	checkSolenoids(ms);
    5372:	4629      	mov	r1, r5
    5374:	4620      	mov	r0, r4
    5376:	f7ff fe15 	bl	4fa4 <Sys80b::checkSolenoids(unsigned long&)>
	feedDisplay();
    537a:	4620      	mov	r0, r4
    537c:	f7ff fe7e 	bl	507c <Sys80b::feedDisplay()>
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    5380:	4a23      	ldr	r2, [pc, #140]	; (5410 <Sys80b::_millisRoutine(unsigned long&)+0xb0>)
	// /* if (display.isLastPosition()) */ display.update(ms);
	
	bool slsw = hw->readSlamSw();
	if (slsw != slamSwitchLastState) {
    5382:	f894 327e 	ldrb.w	r3, [r4, #638]	; 0x27e
    5386:	6891      	ldr	r1, [r2, #8]
    5388:	f3c1 1600 	ubfx	r6, r1, #4, #1
    538c:	42b3      	cmp	r3, r6
    538e:	d00a      	beq.n	53a6 <Sys80b::_millisRoutine(unsigned long&)+0x46>
		onSlamSwitchEvent(slamSwitchNormalState ? !slsw : slsw); // code from superclass
    5390:	6823      	ldr	r3, [r4, #0]
    5392:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    5396:	691b      	ldr	r3, [r3, #16]
    5398:	bb12      	cbnz	r2, 53e0 <Sys80b::_millisRoutine(unsigned long&)+0x80>
    539a:	4a1e      	ldr	r2, [pc, #120]	; (5414 <Sys80b::_millisRoutine(unsigned long&)+0xb4>)
    539c:	4631      	mov	r1, r6
    539e:	4293      	cmp	r3, r2
    53a0:	d127      	bne.n	53f2 <Sys80b::_millisRoutine(unsigned long&)+0x92>
		slamSwitchLastState = slsw;
    53a2:	f884 627e 	strb.w	r6, [r4, #638]	; 0x27e
	}

	byte changedSw = acquireReturns(ms);
    53a6:	4629      	mov	r1, r5
    53a8:	4620      	mov	r0, r4
    53aa:	f7ff fe3b 	bl	5024 <Sys80b::acquireReturns(unsigned long&)>
    53ae:	4606      	mov	r6, r0
	incrementStrobe();
    53b0:	4620      	mov	r0, r4
    53b2:	f7ff fe25 	bl	5000 <Sys80b::incrementStrobe()>
	if (changedSw != 0xff) {
    53b6:	2eff      	cmp	r6, #255	; 0xff
    53b8:	d00c      	beq.n	53d4 <Sys80b::_millisRoutine(unsigned long&)+0x74>
		_onSwitchEvent(_changedSwitchNum, _changedSwitchState, ms);
    53ba:	462b      	mov	r3, r5
    53bc:	f894 2282 	ldrb.w	r2, [r4, #642]	; 0x282
    53c0:	f894 1281 	ldrb.w	r1, [r4, #641]	; 0x281
    53c4:	4620      	mov	r0, r4
    53c6:	f7ff ff21 	bl	520c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)>
		onSwitchEvent(_changedSwitchNum, _changedSwitchState); // code from superclass
    53ca:	6823      	ldr	r3, [r4, #0]
    53cc:	4a12      	ldr	r2, [pc, #72]	; (5418 <Sys80b::_millisRoutine(unsigned long&)+0xb8>)
    53ce:	68db      	ldr	r3, [r3, #12]
    53d0:	4293      	cmp	r3, r2
    53d2:	d111      	bne.n	53f8 <Sys80b::_millisRoutine(unsigned long&)+0x98>
	}
	
	_checkPressedKey(ms);
    53d4:	4629      	mov	r1, r5
    53d6:	4620      	mov	r0, r4
}
    53d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (changedSw != 0xff) {
		_onSwitchEvent(_changedSwitchNum, _changedSwitchState, ms);
		onSwitchEvent(_changedSwitchNum, _changedSwitchState); // code from superclass
	}
	
	_checkPressedKey(ms);
    53dc:	f7ff bf82 	b.w	52e4 <Sys80b::_checkPressedKey(unsigned long&)>
    53e0:	f001 0110 	and.w	r1, r1, #16
    53e4:	4a0b      	ldr	r2, [pc, #44]	; (5414 <Sys80b::_millisRoutine(unsigned long&)+0xb4>)
    53e6:	fab1 f181 	clz	r1, r1
    53ea:	4293      	cmp	r3, r2
    53ec:	ea4f 1151 	mov.w	r1, r1, lsr #5
    53f0:	d0d7      	beq.n	53a2 <Sys80b::_millisRoutine(unsigned long&)+0x42>
	feedDisplay();
	// /* if (display.isLastPosition()) */ display.update(ms);
	
	bool slsw = hw->readSlamSw();
	if (slsw != slamSwitchLastState) {
		onSlamSwitchEvent(slamSwitchNormalState ? !slsw : slsw); // code from superclass
    53f2:	4620      	mov	r0, r4
    53f4:	4798      	blx	r3
    53f6:	e7d4      	b.n	53a2 <Sys80b::_millisRoutine(unsigned long&)+0x42>

	byte changedSw = acquireReturns(ms);
	incrementStrobe();
	if (changedSw != 0xff) {
		_onSwitchEvent(_changedSwitchNum, _changedSwitchState, ms);
		onSwitchEvent(_changedSwitchNum, _changedSwitchState); // code from superclass
    53f8:	4620      	mov	r0, r4
    53fa:	f894 1281 	ldrb.w	r1, [r4, #641]	; 0x281
    53fe:	f894 2282 	ldrb.w	r2, [r4, #642]	; 0x282
    5402:	4798      	blx	r3
	}
	
	_checkPressedKey(ms);
    5404:	4629      	mov	r1, r5
    5406:	4620      	mov	r0, r4
}
    5408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (changedSw != 0xff) {
		_onSwitchEvent(_changedSwitchNum, _changedSwitchState, ms);
		onSwitchEvent(_changedSwitchNum, _changedSwitchState); // code from superclass
	}
	
	_checkPressedKey(ms);
    540c:	f7ff bf6a 	b.w	52e4 <Sys80b::_checkPressedKey(unsigned long&)>
    5410:	4200c000 	.word	0x4200c000
    5414:	00004d21 	.word	0x00004d21
    5418:	00003ee5 	.word	0x00003ee5

0000541c <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>:
	_type = t;
	num = n;
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
    541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const __FlashStringHelper* descrText) {
    5420:	f100 0508 	add.w	r5, r0, #8
	_type = t;
	num = n;
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
    5424:	b084      	sub	sp, #16
    5426:	4604      	mov	r4, r0
    5428:	4617      	mov	r7, r2
    542a:	461e      	mov	r6, r3
    542c:	4688      	mov	r8, r1
	const __FlashStringHelper* descrText) {
    542e:	4628      	mov	r0, r5
    5430:	2100      	movs	r1, #0
    5432:	f006 fe23 	bl	c07c <String::String(char const*)>
	_sys = refSystem;
	_type = t;
	num = n;
	descr = String(descrText);
    5436:	990a      	ldr	r1, [sp, #40]	; 0x28
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
	const __FlashStringHelper* descrText) {
	_sys = refSystem;
    5438:	f8c4 8000 	str.w	r8, [r4]
	_type = t;
	num = n;
	descr = String(descrText);
    543c:	4668      	mov	r0, sp
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
	const __FlashStringHelper* descrText) {
	_sys = refSystem;
	_type = t;
    543e:	7127      	strb	r7, [r4, #4]
	num = n;
    5440:	7166      	strb	r6, [r4, #5]
	descr = String(descrText);
    5442:	f006 fe2f 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    5446:	4669      	mov	r1, sp
    5448:	4628      	mov	r0, r5
    544a:	f006 febd 	bl	c1c8 <String::operator=(String&&)>
    544e:	4668      	mov	r0, sp
    5450:	f006 fdd4 	bl	bffc <String::~String()>
};
    5454:	4620      	mov	r0, r4
    5456:	b004      	add	sp, #16
    5458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000545c <Sys80b_Actuator::set(bool)>:
		return false;
	}
};

void Sys80b_Actuator::set(bool state) {
	switch (_type) {
    545c:	7903      	ldrb	r3, [r0, #4]
    545e:	2b01      	cmp	r3, #1
    5460:	d00c      	beq.n	547c <Sys80b_Actuator::set(bool)+0x20>
    5462:	2b03      	cmp	r3, #3
    5464:	d109      	bne.n	547a <Sys80b_Actuator::set(bool)+0x1e>
	inline void setOnGameRelay(bool st) { setLamp(Q_LAMP, st); }
	void activateSolenoid(byte n, uint16_t actPeriod = SOL_DEF_TIME, uint16_t swDelay = 0);
	void checkSolenoids(uint32_t& t);
	// setPeriod a lamp on or off, with status memory
	inline void setLamp(byte n, bool state, bool forceProtection = false) { 
		lamps->setState(n, state, forceProtection); 
    5466:	460a      	mov	r2, r1
    5468:	2300      	movs	r3, #0
	default:
		return false;
	}
};

void Sys80b_Actuator::set(bool state) {
    546a:	b410      	push	{r4}
    546c:	6804      	ldr	r4, [r0, #0]
    546e:	7941      	ldrb	r1, [r0, #5]
    5470:	68a0      	ldr	r0, [r4, #8]
		_sys->setLamp(num, state);
		break;
	default:
		return;
	}
};
    5472:	f85d 4b04 	ldr.w	r4, [sp], #4
    5476:	f7fd b8c9 	b.w	260c <BitMappedSet::setState(unsigned short, bool, bool)>
    547a:	4770      	bx	lr
};

void Sys80b_Actuator::set(bool state) {
	switch (_type) {
	case SOLENOIDS:
		_sys->setSolenoid(num, state);
    547c:	460a      	mov	r2, r1
    547e:	7941      	ldrb	r1, [r0, #5]
    5480:	6800      	ldr	r0, [r0, #0]
    5482:	f7ff bd5f 	b.w	4f44 <Sys80b::setSolenoid(unsigned char, bool)>
    5486:	bf00      	nop

00005488 <Sys80b_Actuator::activate(unsigned short, unsigned short)>:
	default:
		return;
	}
};

void Sys80b_Actuator::activate(uint16_t actPeriod, uint16_t swDelay) {
    5488:	b410      	push	{r4}
	if (_type == SOLENOIDS)	_sys->activateSolenoid(num, actPeriod, swDelay);
    548a:	7904      	ldrb	r4, [r0, #4]
    548c:	2c01      	cmp	r4, #1
    548e:	d002      	beq.n	5496 <Sys80b_Actuator::activate(unsigned short, unsigned short)+0xe>
}
    5490:	f85d 4b04 	ldr.w	r4, [sp], #4
    5494:	4770      	bx	lr
		return;
	}
};

void Sys80b_Actuator::activate(uint16_t actPeriod, uint16_t swDelay) {
	if (_type == SOLENOIDS)	_sys->activateSolenoid(num, actPeriod, swDelay);
    5496:	4613      	mov	r3, r2
}
    5498:	f85d 4b04 	ldr.w	r4, [sp], #4
		return;
	}
};

void Sys80b_Actuator::activate(uint16_t actPeriod, uint16_t swDelay) {
	if (_type == SOLENOIDS)	_sys->activateSolenoid(num, actPeriod, swDelay);
    549c:	460a      	mov	r2, r1
    549e:	7941      	ldrb	r1, [r0, #5]
    54a0:	6800      	ldr	r0, [r0, #0]
    54a2:	f7ff bd65 	b.w	4f70 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    54a6:	bf00      	nop

000054a8 <Sys80b_Display::Sys80b_Display()>:
//	_pushCmd(3, CD_NORMAL_MODE);
//	_pushCmd(3, CD_BUF_PTR);
//	_pushCmd(3, CD_START_SCAN);
//}

Sys80b_Display::Sys80b_Display() : TextDisplay(2, DISPLAY_COLS) {
    54a8:	b510      	push	{r4, lr}
    54aa:	2102      	movs	r1, #2
    54ac:	2214      	movs	r2, #20
    54ae:	4604      	mov	r4, r0
    54b0:	f000 f90a 	bl	56c8 <TextDisplay::TextDisplay(unsigned char, unsigned char)>
    54b4:	4a06      	ldr	r2, [pc, #24]	; (54d0 <Sys80b_Display::Sys80b_Display()+0x28>)
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    54b6:	2320      	movs	r3, #32
		_buff = new Type[_size];
    54b8:	2040      	movs	r0, #64	; 0x40
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    54ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    54bc:	6022      	str	r2, [r4, #0]
		_buff = new Type[_size];
    54be:	f006 fc99 	bl	bdf4 <operator new[](unsigned int)>
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    54c2:	2300      	movs	r3, #0
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
		_buff = new Type[_size];
    54c4:	6320      	str	r0, [r4, #48]	; 0x30
	//_init(*d);
}
    54c6:	4620      	mov	r0, r4
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    54c8:	6363      	str	r3, [r4, #52]	; 0x34
		_valuesCount = 0;
    54ca:	63a3      	str	r3, [r4, #56]	; 0x38
    54cc:	bd10      	pop	{r4, pc}
    54ce:	bf00      	nop
    54d0:	200011c8 	.word	0x200011c8

000054d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>:
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
}

void Sys80b_Display::_pushCmd(byte ld, byte cmd) {
    54d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
	if (cmdBuffer.getCount() >= CMD_BUF_LEN) return; // refused
    54d6:	2b1f      	cmp	r3, #31
    54d8:	dc25      	bgt.n	5526 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x52>
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
    54da:	0209      	lsls	r1, r1, #8
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
}

void Sys80b_Display::_pushCmd(byte ld, byte cmd) {
    54dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    54de:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	if (cmdBuffer.getCount() >= CMD_BUF_LEN) return; // refused
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
    54e0:	f401 7140 	and.w	r1, r1, #768	; 0x300
    54e4:	42ab      	cmp	r3, r5
    54e6:	d21d      	bcs.n	5524 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x50>
		unsigned p = _firstPtr + _valuesCount++;
    54e8:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
    54ec:	1c5c      	adds	r4, r3, #1
		if (p >= _size) p -= _size;
		_buff[p] = value;
    54ee:	f240 4601 	movw	r6, #1025	; 0x401
    54f2:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    54f6:	eb03 070c 	add.w	r7, r3, ip
    54fa:	6384      	str	r4, [r0, #56]	; 0x38
		if (p >= _size) p -= _size;
		_buff[p] = value;
    54fc:	430e      	orrs	r6, r1

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
    54fe:	42bd      	cmp	r5, r7
    5500:	bf98      	it	ls
    5502:	1b7f      	subls	r7, r7, r5
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5504:	42a5      	cmp	r5, r4
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
		_buff[p] = value;
    5506:	f82e 6017 	strh.w	r6, [lr, r7, lsl #1]
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    550a:	d90b      	bls.n	5524 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x50>
		unsigned p = _firstPtr + _valuesCount++;
    550c:	4464      	add	r4, ip
		if (p >= _size) p -= _size;
		_buff[p] = value;
    550e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    5512:	3302      	adds	r3, #2
		if (p >= _size) p -= _size;
    5514:	42ac      	cmp	r4, r5
		_buff[p] = value;
    5516:	ea41 0102 	orr.w	r1, r1, r2
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    551a:	6383      	str	r3, [r0, #56]	; 0x38
		if (p >= _size) p -= _size;
    551c:	bf28      	it	cs
    551e:	1b64      	subcs	r4, r4, r5
		_buff[p] = value;
    5520:	f82e 1014 	strh.w	r1, [lr, r4, lsl #1]
    5524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5526:	4770      	bx	lr

00005528 <Sys80b_Display::getNextDisplayData()>:
// returns a word with format 00000RLL.DDDDDDDD where:
// R = reset bit (active low)
// LL = LD2, LD1 bits (active high)
// DDDDDDDD = data byte
// at least LD1 or LD2 (or Reset) should be setPeriod for any effect
uint16_t Sys80b_Display::getNextDisplayData() {
    5528:	b538      	push	{r3, r4, r5, lr}
    552a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    552c:	4604      	mov	r4, r0

	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
    552e:	b15b      	cbz	r3, 5548 <Sys80b_Display::getNextDisplayData()+0x20>
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    5530:	6b41      	ldr	r1, [r0, #52]	; 0x34
		if (_firstPtr == _size) _firstPtr = 0;
    5532:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    5534:	1c4a      	adds	r2, r1, #1
    5536:	6b00      	ldr	r0, [r0, #48]	; 0x30
		if (_firstPtr == _size) _firstPtr = 0;
    5538:	42aa      	cmp	r2, r5
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
    553a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    553e:	6362      	str	r2, [r4, #52]	; 0x34
		if (_firstPtr == _size) _firstPtr = 0;
    5540:	d034      	beq.n	55ac <Sys80b_Display::getNextDisplayData()+0x84>
		_valuesCount--;
    5542:	3b01      	subs	r3, #1
    5544:	63a3      	str	r3, [r4, #56]	; 0x38
    5546:	bd38      	pop	{r3, r4, r5, pc}

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
    5548:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    554c:	7e02      	ldrb	r2, [r0, #24]
    554e:	429a      	cmp	r2, r3
    5550:	d815      	bhi.n	557e <Sys80b_Display::getNextDisplayData()+0x56>
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    5552:	b373      	cbz	r3, 55b2 <Sys80b_Display::getNextDisplayData()+0x8a>
	data |= ch;
    5554:	f240 6521 	movw	r5, #1569	; 0x621
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    5558:	3301      	adds	r3, #1
    555a:	b2da      	uxtb	r2, r3
    555c:	2a01      	cmp	r2, #1
    555e:	d952      	bls.n	5606 <Sys80b_Display::getNextDisplayData()+0xde>
		currentRow = 0;
		if (++currentCol == DISPLAY_COLS) {
    5560:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
    5564:	2200      	movs	r2, #0
		if (++currentCol == DISPLAY_COLS) {
    5566:	3301      	adds	r3, #1
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
    5568:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
		if (++currentCol == DISPLAY_COLS) {
    556c:	b2db      	uxtb	r3, r3
    556e:	2b14      	cmp	r3, #20
    5570:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    5574:	d03c      	beq.n	55f0 <Sys80b_Display::getNextDisplayData()+0xc8>
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
    5576:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	return data;
    557a:	4628      	mov	r0, r5
    557c:	bd38      	pop	{r3, r4, r5, pc}

	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
    557e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    5582:	7e41      	ldrb	r1, [r0, #25]
    5584:	4291      	cmp	r1, r2
    5586:	d9e4      	bls.n	5552 <Sys80b_Display::getNextDisplayData()+0x2a>
	inline String getRowCopy(byte row) { return (row >= rows) ? String("") : String(textRow[row]); }
	void getRowCopy(byte row, String& destStr);
	inline String getSpacesRow() { return String(spacesStr); }
	void setChar(byte row, byte col, byte ch);
	inline byte getChar(byte row, byte col) {
		return (validPosition(row, col)) ? (byte)textRow[row][col] : ERR_BYTE;
    5588:	6841      	ldr	r1, [r0, #4]
    558a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    558e:	5c8a      	ldrb	r2, [r1, r2]
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = getChar(row, col);
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    5590:	09d1      	lsrs	r1, r2, #7
    5592:	d017      	beq.n	55c4 <Sys80b_Display::getNextDisplayData()+0x9c>
    5594:	18c1      	adds	r1, r0, r3
    5596:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    559a:	2901      	cmp	r1, #1
    559c:	d112      	bne.n	55c4 <Sys80b_Display::getNextDisplayData()+0x9c>
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    559e:	bb7b      	cbnz	r3, 5600 <Sys80b_Display::getNextDisplayData()+0xd8>
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    55a0:	2301      	movs	r3, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    55a2:	f44f 65a4 	mov.w	r5, #1312	; 0x520
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    55a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    55aa:	e7e4      	b.n	5576 <Sys80b_Display::getNextDisplayData()+0x4e>
	}

	Type get() {
		if (_valuesCount == 0) return (Type)0;
		Type value = _buff[_firstPtr++];
		if (_firstPtr == _size) _firstPtr = 0;
    55ac:	2200      	movs	r2, #0
    55ae:	6362      	str	r2, [r4, #52]	; 0x34
    55b0:	e7c7      	b.n	5542 <Sys80b_Display::getNextDisplayData()+0x1a>
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    55b2:	f240 5521 	movw	r5, #1313	; 0x521
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    55b6:	2301      	movs	r3, #1
		if (++currentCol == DISPLAY_COLS) {
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
    55b8:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	return data;
    55bc:	4628      	mov	r0, r5
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    55be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
	return data;
    55c2:	bd38      	pop	{r3, r4, r5, pc}
    55c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    55c8:	b290      	uxth	r0, r2
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    55ca:	b9fb      	cbnz	r3, 560c <Sys80b_Display::getNextDisplayData()+0xe4>
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    55cc:	2a01      	cmp	r2, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    55ce:	f440 65a0 	orr.w	r5, r0, #1280	; 0x500
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    55d2:	d1f0      	bne.n	55b6 <Sys80b_Display::getNextDisplayData()+0x8e>
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    55d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    55d6:	b1b1      	cbz	r1, 5606 <Sys80b_Display::getNextDisplayData()+0xde>
		unsigned p = _firstPtr + _valuesCount++;
    55d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    55da:	2201      	movs	r2, #1
		if (p >= _size) p -= _size;
    55dc:	428b      	cmp	r3, r1
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    55de:	63a2      	str	r2, [r4, #56]	; 0x38
		if (p >= _size) p -= _size;
		_buff[p] = value;
    55e0:	6b22      	ldr	r2, [r4, #48]	; 0x30

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
    55e2:	bf28      	it	cs
    55e4:	1a5b      	subcs	r3, r3, r1
		_buff[p] = value;
    55e6:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
    55ea:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    55ee:	e7b3      	b.n	5558 <Sys80b_Display::getNextDisplayData()+0x30>
	if (++currentRow > 1) {
		currentRow = 0;
		if (++currentCol == DISPLAY_COLS) {
			currentCol = 0;
    55f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
    55f4:	2103      	movs	r1, #3
    55f6:	22c0      	movs	r2, #192	; 0xc0
    55f8:	4620      	mov	r0, r4
    55fa:	f7ff ff6b 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
    55fe:	e7ba      	b.n	5576 <Sys80b_Display::getNextDisplayData()+0x4e>
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    5600:	f44f 65c4 	mov.w	r5, #1568	; 0x620
    5604:	e7a8      	b.n	5558 <Sys80b_Display::getNextDisplayData()+0x30>
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    5606:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    560a:	e7b4      	b.n	5576 <Sys80b_Display::getNextDisplayData()+0x4e>

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    560c:	2a01      	cmp	r2, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();

	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    560e:	f440 65c0 	orr.w	r5, r0, #1536	; 0x600
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    5612:	d1a1      	bne.n	5558 <Sys80b_Display::getNextDisplayData()+0x30>
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5614:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    5616:	2900      	cmp	r1, #0
    5618:	d09e      	beq.n	5558 <Sys80b_Display::getNextDisplayData()+0x30>
    561a:	e7dd      	b.n	55d8 <Sys80b_Display::getNextDisplayData()+0xb0>

0000561c <Sys80b_Display::_sendInitSequence()>:
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
	cmdBuffer.put(base | CD_PREFIX);
	cmdBuffer.put(base | cmd);
}

void Sys80b_Display::_sendInitSequence() {
    561c:	b510      	push	{r4, lr}
	_pushCmd(3, CD_DIGIT_CNT | DISPLAY_COLS);
    561e:	2294      	movs	r2, #148	; 0x94
    5620:	2103      	movs	r1, #3
    5622:	f7ff ff57 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_DTIME_16CLK); // no sw effect
    5626:	2205      	movs	r2, #5
    5628:	2103      	movs	r1, #3
    562a:	f7ff ff53 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_DUTY_CYCLE | 0x3F); // maximum brightess
    562e:	227f      	movs	r2, #127	; 0x7f
    5630:	2103      	movs	r1, #3
    5632:	f7ff ff4f 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_NORMAL_MODE);
    5636:	2208      	movs	r2, #8
    5638:	2103      	movs	r1, #3
    563a:	f7ff ff4b 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_BUF_PTR);
    563e:	22c0      	movs	r2, #192	; 0xc0
    5640:	2103      	movs	r1, #3
    5642:	f7ff ff47 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_START_SCAN);
    5646:	220e      	movs	r2, #14
    5648:	2103      	movs	r1, #3
    564a:	f7ff ff43 	bl	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_START_SCAN);
    564e:	220e      	movs	r2, #14
    5650:	2103      	movs	r1, #3
    5652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_pushCmd(3, CD_DTIME_16CLK); // no sw effect
	_pushCmd(3, CD_DUTY_CYCLE | 0x3F); // maximum brightess
	_pushCmd(3, CD_NORMAL_MODE);
	_pushCmd(3, CD_BUF_PTR);
	_pushCmd(3, CD_START_SCAN);
	_pushCmd(3, CD_START_SCAN);
    5656:	f7ff bf3d 	b.w	54d4 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
    565a:	bf00      	nop

0000565c <Sys80b_Display::reset()>:
Sys80b_Display::Sys80b_Display() : TextDisplay(2, DISPLAY_COLS) {
	//_init(*d);
}

void Sys80b_Display::reset() {
	currentCol = 0; // current display column
    565c:	2300      	movs	r3, #0
    565e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c

Sys80b_Display::Sys80b_Display() : TextDisplay(2, DISPLAY_COLS) {
	//_init(*d);
}

void Sys80b_Display::reset() {
    5660:	b510      	push	{r4, lr}
    5662:	4604      	mov	r4, r0
	currentCol = 0; // current display column
    5664:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	currentRow = 0; // current display row
    5668:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    566c:	6343      	str	r3, [r0, #52]	; 0x34
		_valuesCount = 0;
    566e:	6383      	str	r3, [r0, #56]	; 0x38
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    5670:	b12a      	cbz	r2, 567e <Sys80b_Display::reset()+0x22>
		unsigned p = _firstPtr + _valuesCount++;
    5672:	2101      	movs	r1, #1
		if (p >= _size) p -= _size;
		_buff[p] = value;
    5674:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5676:	f44f 7240 	mov.w	r2, #768	; 0x300
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    567a:	6381      	str	r1, [r0, #56]	; 0x38
		if (p >= _size) p -= _size;
		_buff[p] = value;
    567c:	801a      	strh	r2, [r3, #0]
	cmdBuffer.Clear();
	cmdBuffer.put(0x0300u); // reset signal (active low) to both rows
	_sendInitSequence();
    567e:	4620      	mov	r0, r4
    5680:	f7ff ffcc 	bl	561c <Sys80b_Display::_sendInitSequence()>
	for (byte i = 0; i < 2; i++) mode[i] = NORMAL;
    5684:	2300      	movs	r3, #0
    5686:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    568a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    568e:	bd10      	pop	{r4, pc}

00005690 <TextDisplay::clear()>:
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    5690:	7e03      	ldrb	r3, [r0, #24]
    5692:	b1c3      	cbz	r3, 56c6 <TextDisplay::clear()+0x36>
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
    5694:	b4f0      	push	{r4, r5, r6, r7}
	for (byte i = 0; i < rows; i++) {
    5696:	2600      	movs	r6, #0
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
    5698:	2520      	movs	r5, #32
    569a:	4637      	mov	r7, r6
    569c:	7e42      	ldrb	r2, [r0, #25]
    569e:	00b4      	lsls	r4, r6, #2
    56a0:	b142      	cbz	r2, 56b4 <TextDisplay::clear()+0x24>
    56a2:	2300      	movs	r3, #0
    56a4:	6841      	ldr	r1, [r0, #4]
    56a6:	1c5a      	adds	r2, r3, #1
    56a8:	5909      	ldr	r1, [r1, r4]
    56aa:	54cd      	strb	r5, [r1, r3]
    56ac:	b2d3      	uxtb	r3, r2
    56ae:	7e42      	ldrb	r2, [r0, #25]
    56b0:	429a      	cmp	r2, r3
    56b2:	d8f7      	bhi.n	56a4 <TextDisplay::clear()+0x14>
		textRow[i][columns] = 0;
    56b4:	6843      	ldr	r3, [r0, #4]
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    56b6:	3601      	adds	r6, #1
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
    56b8:	591b      	ldr	r3, [r3, r4]
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    56ba:	b2f6      	uxtb	r6, r6
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
    56bc:	549f      	strb	r7, [r3, r2]
	clear();
	spacesStr = String(textRow[0]); // empty text line string for further use
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    56be:	7e03      	ldrb	r3, [r0, #24]
    56c0:	42b3      	cmp	r3, r6
    56c2:	d8eb      	bhi.n	569c <TextDisplay::clear()+0xc>
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
	}
}
    56c4:	bcf0      	pop	{r4, r5, r6, r7}
    56c6:	4770      	bx	lr

000056c8 <TextDisplay::TextDisplay(unsigned char, unsigned char)>:
#include "TextDisplay.h"

TextDisplay::TextDisplay(byte rws = MIN_ROWS_COUNT, byte cols = MIN_COLS_COUNT) {
    56c8:	4b20      	ldr	r3, [pc, #128]	; (574c <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x84>)
    56ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56ce:	f100 081c 	add.w	r8, r0, #28
    56d2:	b084      	sub	sp, #16
    56d4:	4605      	mov	r5, r0
    56d6:	460c      	mov	r4, r1
    56d8:	f840 3b08 	str.w	r3, [r0], #8
    56dc:	2100      	movs	r1, #0
    56de:	4616      	mov	r6, r2
    56e0:	f006 fccc 	bl	c07c <String::String(char const*)>
    56e4:	4640      	mov	r0, r8
    56e6:	2100      	movs	r1, #0
    56e8:	f006 fcc8 	bl	c07c <String::String(char const*)>
	// dimensions check
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
    56ec:	b354      	cbz	r4, 5744 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x7c>
    56ee:	00a0      	lsls	r0, r4, #2
	rows = rws;
    56f0:	762c      	strb	r4, [r5, #24]
	if (cols == MIN_COLS_COUNT) cols = MIN_COLS_COUNT;
	columns = cols;
    56f2:	766e      	strb	r6, [r5, #25]
	// creates "empty" display text lines filled with spaces
	textRow = new char*[rows];
    56f4:	f006 fb7e 	bl	bdf4 <operator new[](unsigned int)>
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
    56f8:	7e2b      	ldrb	r3, [r5, #24]
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
	rows = rws;
	if (cols == MIN_COLS_COUNT) cols = MIN_COLS_COUNT;
	columns = cols;
	// creates "empty" display text lines filled with spaces
	textRow = new char*[rows];
    56fa:	6068      	str	r0, [r5, #4]
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
    56fc:	b17b      	cbz	r3, 571e <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x56>
    56fe:	4606      	mov	r6, r0
    5700:	2400      	movs	r4, #0
    5702:	e000      	b.n	5706 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x3e>
    5704:	686e      	ldr	r6, [r5, #4]
    5706:	7e68      	ldrb	r0, [r5, #25]
    5708:	b227      	sxth	r7, r4
    570a:	3401      	adds	r4, #1
    570c:	3001      	adds	r0, #1
    570e:	f006 fb71 	bl	bdf4 <operator new[](unsigned int)>
    5712:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
    5716:	b2e4      	uxtb	r4, r4
    5718:	7e2b      	ldrb	r3, [r5, #24]
    571a:	42a3      	cmp	r3, r4
    571c:	d8f2      	bhi.n	5704 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x3c>
	clear();
    571e:	4628      	mov	r0, r5
    5720:	f7ff ffb6 	bl	5690 <TextDisplay::clear()>
	spacesStr = String(textRow[0]); // empty text line string for further use
    5724:	686b      	ldr	r3, [r5, #4]
    5726:	4668      	mov	r0, sp
    5728:	6819      	ldr	r1, [r3, #0]
    572a:	f006 fca7 	bl	c07c <String::String(char const*)>
    572e:	4669      	mov	r1, sp
    5730:	4640      	mov	r0, r8
    5732:	f006 fd49 	bl	c1c8 <String::operator=(String&&)>
    5736:	4668      	mov	r0, sp
    5738:	f006 fc60 	bl	bffc <String::~String()>
}
    573c:	4628      	mov	r0, r5
    573e:	b004      	add	sp, #16
    5740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5744:	2004      	movs	r0, #4
#include "TextDisplay.h"

TextDisplay::TextDisplay(byte rws = MIN_ROWS_COUNT, byte cols = MIN_COLS_COUNT) {
	// dimensions check
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
    5746:	2401      	movs	r4, #1
    5748:	e7d2      	b.n	56f0 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x28>
    574a:	bf00      	nop
    574c:	200011bc 	.word	0x200011bc

00005750 <TextDisplay::clearRow(unsigned char)>:
		textRow[i][columns] = 0;
	}
}

void TextDisplay::clearRow(byte row) {
	if (row >= rows) return;
    5750:	7e03      	ldrb	r3, [r0, #24]
    5752:	428b      	cmp	r3, r1
    5754:	d90e      	bls.n	5774 <TextDisplay::clearRow(unsigned char)+0x24>
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
    5756:	7e43      	ldrb	r3, [r0, #25]
    5758:	b163      	cbz	r3, 5774 <TextDisplay::clearRow(unsigned char)+0x24>
    575a:	0089      	lsls	r1, r1, #2
    575c:	2300      	movs	r3, #0
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
	}
}

void TextDisplay::clearRow(byte row) {
    575e:	b430      	push	{r4, r5}
	if (row >= rows) return;
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
    5760:	2520      	movs	r5, #32
    5762:	6844      	ldr	r4, [r0, #4]
    5764:	1c5a      	adds	r2, r3, #1
    5766:	5864      	ldr	r4, [r4, r1]
    5768:	54e5      	strb	r5, [r4, r3]
    576a:	b2d3      	uxtb	r3, r2
    576c:	7e42      	ldrb	r2, [r0, #25]
    576e:	429a      	cmp	r2, r3
    5770:	d8f7      	bhi.n	5762 <TextDisplay::clearRow(unsigned char)+0x12>
}
    5772:	bc30      	pop	{r4, r5}
    5774:	4770      	bx	lr
    5776:	bf00      	nop

00005778 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>:

// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
    5778:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (row > rows) return;
    577a:	7e04      	ldrb	r4, [r0, #24]
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
}

// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
    577c:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if (row > rows) return;
    5780:	428c      	cmp	r4, r1
    5782:	d317      	bcc.n	57b4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    5784:	b9bd      	cbnz	r5, 57b6 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
    5786:	7e45      	ldrb	r5, [r0, #25]
	if (col > columns) return;
    5788:	42aa      	cmp	r2, r5
    578a:	d813      	bhi.n	57b4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
	byte c = col;
	char* tRow = textRow[row];
    578c:	6846      	ldr	r6, [r0, #4]
	for (i = 0; srcText[i] != 0 && c < columns; i++) tRow[c++] = srcText[i];
    578e:	781c      	ldrb	r4, [r3, #0]
	if (row > rows) return;
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
	if (col > columns) return;
	byte c = col;
	char* tRow = textRow[row];
    5790:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
	for (i = 0; srcText[i] != 0 && c < columns; i++) tRow[c++] = srcText[i];
    5794:	b174      	cbz	r4, 57b4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
    5796:	42aa      	cmp	r2, r5
    5798:	d20c      	bcs.n	57b4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
    579a:	4611      	mov	r1, r2
    579c:	e002      	b.n	57a4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x2c>
    579e:	7e45      	ldrb	r5, [r0, #25]
    57a0:	428d      	cmp	r5, r1
    57a2:	d907      	bls.n	57b4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3c>
    57a4:	1c4d      	adds	r5, r1, #1
    57a6:	5474      	strb	r4, [r6, r1]
    57a8:	b2e9      	uxtb	r1, r5
    57aa:	1a8c      	subs	r4, r1, r2
    57ac:	b2e4      	uxtb	r4, r4
    57ae:	5d1c      	ldrb	r4, [r3, r4]
    57b0:	2c00      	cmp	r4, #0
    57b2:	d1f4      	bne.n	579e <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x26>
    57b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
	if (row > rows) return;
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    57b6:	7e45      	ldrb	r5, [r0, #25]
    57b8:	2d00      	cmp	r5, #0
    57ba:	d0e5      	beq.n	5788 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x10>
    57bc:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    57c0:	2400      	movs	r4, #0
    57c2:	2720      	movs	r7, #32
    57c4:	6846      	ldr	r6, [r0, #4]
    57c6:	1c65      	adds	r5, r4, #1
    57c8:	f856 600e 	ldr.w	r6, [r6, lr]
    57cc:	5537      	strb	r7, [r6, r4]
    57ce:	b2ec      	uxtb	r4, r5
    57d0:	7e45      	ldrb	r5, [r0, #25]
    57d2:	42a5      	cmp	r5, r4
    57d4:	d8f6      	bhi.n	57c4 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x4c>
    57d6:	e7d7      	b.n	5788 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x10>

000057d8 <TextDisplay::setText(unsigned char, char const*, short, bool)>:
}

// Copy <srcText> in <row>-th text buffer, starting from <offset>-th char of <srcText>.
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
    57d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (row >= rows) return;
    57da:	7e04      	ldrb	r4, [r0, #24]
}

// Copy <srcText> in <row>-th text buffer, starting from <offset>-th char of <srcText>.
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
    57dc:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if (row >= rows) return;
    57e0:	428c      	cmp	r4, r1
    57e2:	d929      	bls.n	5838 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
	short i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    57e4:	bb4d      	cbnz	r5, 583a <TextDisplay::setText(unsigned char, char const*, short, bool)+0x62>
    57e6:	7e45      	ldrb	r5, [r0, #25]
	if (offset <= -((short)columns)) return; // too large negative offset 
    57e8:	426c      	negs	r4, r5
    57ea:	42a3      	cmp	r3, r4
    57ec:	dd24      	ble.n	5838 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
	uint16_t ln = 0;
	while (srcText[ln] != 0) ln++;
    57ee:	7814      	ldrb	r4, [r2, #0]
    57f0:	b12c      	cbz	r4, 57fe <TextDisplay::setText(unsigned char, char const*, short, bool)+0x26>
    57f2:	2400      	movs	r4, #0
    57f4:	3401      	adds	r4, #1
    57f6:	b2a4      	uxth	r4, r4
    57f8:	5d16      	ldrb	r6, [r2, r4]
    57fa:	2e00      	cmp	r6, #0
    57fc:	d1fa      	bne.n	57f4 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x1c>
	if (offset >= ln) return; // too large offset 
    57fe:	42a3      	cmp	r3, r4
    5800:	da1a      	bge.n	5838 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>

	byte c = 0;
	char* tRow = textRow[row];
    5802:	6844      	ldr	r4, [r0, #4]
    5804:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
	for (i = offset; c < columns; i++) {
    5808:	b1b5      	cbz	r5, 5838 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
    580a:	4619      	mov	r1, r3
    580c:	2501      	movs	r5, #1
		if (i < 0) tRow[c++] = 32;
    580e:	f04f 0e20 	mov.w	lr, #32
    5812:	e00a      	b.n	582a <TextDisplay::setText(unsigned char, char const*, short, bool)+0x52>
		else {
			if (srcText[i] == 0) break;
    5814:	5c56      	ldrb	r6, [r2, r1]
    5816:	b17e      	cbz	r6, 5838 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
			tRow[c++] = srcText[i];
    5818:	553e      	strb	r6, [r7, r4]
	while (srcText[ln] != 0) ln++;
	if (offset >= ln) return; // too large offset 

	byte c = 0;
	char* tRow = textRow[row];
	for (i = offset; c < columns; i++) {
    581a:	7e46      	ldrb	r6, [r0, #25]
    581c:	3101      	adds	r1, #1
    581e:	1c6c      	adds	r4, r5, #1
    5820:	42ae      	cmp	r6, r5
    5822:	b209      	sxth	r1, r1
    5824:	b2e4      	uxtb	r4, r4
    5826:	d907      	bls.n	5838 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
    5828:	4625      	mov	r5, r4
    582a:	1acc      	subs	r4, r1, r3
		if (i < 0) tRow[c++] = 32;
    582c:	2900      	cmp	r1, #0
    582e:	b2e4      	uxtb	r4, r4
    5830:	daf0      	bge.n	5814 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x3c>
    5832:	f807 e004 	strb.w	lr, [r7, r4]
    5836:	e7f0      	b.n	581a <TextDisplay::setText(unsigned char, char const*, short, bool)+0x42>
    5838:	bdf0      	pop	{r4, r5, r6, r7, pc}
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
	if (row >= rows) return;
	short i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    583a:	7e45      	ldrb	r5, [r0, #25]
    583c:	2d00      	cmp	r5, #0
    583e:	d0d3      	beq.n	57e8 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x10>
    5840:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    5844:	2400      	movs	r4, #0
    5846:	2720      	movs	r7, #32
    5848:	6846      	ldr	r6, [r0, #4]
    584a:	1c65      	adds	r5, r4, #1
    584c:	f856 600e 	ldr.w	r6, [r6, lr]
    5850:	5537      	strb	r7, [r6, r4]
    5852:	b22c      	sxth	r4, r5
    5854:	7e45      	ldrb	r5, [r0, #25]
    5856:	42ac      	cmp	r4, r5
    5858:	dbf6      	blt.n	5848 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x70>
    585a:	e7c5      	b.n	57e8 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x10>

0000585c <TextDisplay::scrollLeft(unsigned char)>:
	}
}

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
    585c:	7e03      	ldrb	r3, [r0, #24]
    585e:	428b      	cmp	r3, r1
    5860:	d913      	bls.n	588a <TextDisplay::scrollLeft(unsigned char)+0x2e>
	byte i;
	char* tRow = textRow[row];
    5862:	6842      	ldr	r2, [r0, #4]
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5864:	7e43      	ldrb	r3, [r0, #25]

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    5866:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    586a:	b17b      	cbz	r3, 588c <TextDisplay::scrollLeft(unsigned char)+0x30>
    586c:	2300      	movs	r3, #0
		}
	}
}

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
    586e:	b410      	push	{r4}
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5870:	18cc      	adds	r4, r1, r3
    5872:	1c5a      	adds	r2, r3, #1
    5874:	7864      	ldrb	r4, [r4, #1]
    5876:	54cc      	strb	r4, [r1, r3]
    5878:	b2d3      	uxtb	r3, r2
    587a:	7e42      	ldrb	r2, [r0, #25]
    587c:	429a      	cmp	r2, r3
    587e:	d8f7      	bhi.n	5870 <TextDisplay::scrollLeft(unsigned char)+0x14>
    5880:	3a01      	subs	r2, #1
	tRow[columns-1] = ' ';
    5882:	2320      	movs	r3, #32
    5884:	548b      	strb	r3, [r1, r2]
}
    5886:	f85d 4b04 	ldr.w	r4, [sp], #4
    588a:	4770      	bx	lr
// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    588c:	f04f 32ff 	mov.w	r2, #4294967295
	tRow[columns-1] = ' ';
    5890:	2320      	movs	r3, #32
    5892:	548b      	strb	r3, [r1, r2]
    5894:	4770      	bx	lr
    5896:	bf00      	nop

00005898 <TextDisplay::scrollRight(unsigned char)>:
}

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
    5898:	7e03      	ldrb	r3, [r0, #24]
    589a:	428b      	cmp	r3, r1
    589c:	d912      	bls.n	58c4 <TextDisplay::scrollRight(unsigned char)+0x2c>
	byte i;
	char* tRow = textRow[row];
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    589e:	7e43      	ldrb	r3, [r0, #25]

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    58a0:	6842      	ldr	r2, [r0, #4]
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    58a2:	3b01      	subs	r3, #1

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    58a4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    58a8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    58ac:	d007      	beq.n	58be <TextDisplay::scrollRight(unsigned char)+0x26>
    58ae:	18c8      	adds	r0, r1, r3
    58b0:	1e5a      	subs	r2, r3, #1
    58b2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    58b6:	54c8      	strb	r0, [r1, r3]
    58b8:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
    58bc:	d1f7      	bne.n	58ae <TextDisplay::scrollRight(unsigned char)+0x16>
	tRow[0] = ' ';
    58be:	2320      	movs	r3, #32
    58c0:	700b      	strb	r3, [r1, #0]
    58c2:	4770      	bx	lr
    58c4:	4770      	bx	lr
    58c6:	bf00      	nop

000058c8 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>:
void TextDisplay::getRowCopy(byte row, String& destStr) {
	if (row >= rows) return;
	destStr.copy((const char*)textRow[row], columns);
}

void TextDisplay::setChar(byte row, byte col, byte ch) {
    58c8:	b410      	push	{r4}
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    58ca:	7e04      	ldrb	r4, [r0, #24]
    58cc:	428c      	cmp	r4, r1
    58ce:	d906      	bls.n	58de <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)+0x16>
    58d0:	7e44      	ldrb	r4, [r0, #25]
    58d2:	4294      	cmp	r4, r2
    58d4:	d903      	bls.n	58de <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)+0x16>
	if (!validPosition(row, col)) return; 
	textRow[row][col] = ch;
    58d6:	6840      	ldr	r0, [r0, #4]
    58d8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    58dc:	548b      	strb	r3, [r1, r2]
}
    58de:	f85d 4b04 	ldr.w	r4, [sp], #4
    58e2:	4770      	bx	lr

000058e4 <TimerSet::TimerSet()>:
* Contains C++ code.
*/

#include "TimerSet.h"

TimerSet::TimerSet() {
    58e4:	b510      	push	{r4, lr}
    58e6:	2100      	movs	r1, #0
    58e8:	4604      	mov	r4, r0
    58ea:	f006 fbc7 	bl	c07c <String::String(char const*)>
	_first_timer = nullptr;
    58ee:	2300      	movs	r3, #0
	_last_timer = nullptr;
	_count = 0;
	_nextTaskId = 0;
}
    58f0:	4620      	mov	r0, r4
*/

#include "TimerSet.h"

TimerSet::TimerSet() {
	_first_timer = nullptr;
    58f2:	6123      	str	r3, [r4, #16]
	_last_timer = nullptr;
    58f4:	6163      	str	r3, [r4, #20]
	_count = 0;
    58f6:	7623      	strb	r3, [r4, #24]
	_nextTaskId = 0;
    58f8:	61e3      	str	r3, [r4, #28]
}
    58fa:	bd10      	pop	{r4, pc}

000058fc <TimerSet::add(TimerTask&)>:
//	Serial.print(_count);
//	Serial.println(")");
//	return true;
//}

int TimerSet::add(TimerTask& tt) {
    58fc:	b510      	push	{r4, lr}
	//Serial.print("Adding timer... ");
	if (&tt == nullptr) {
    58fe:	2900      	cmp	r1, #0
    5900:	d034      	beq.n	596c <TimerSet::add(TimerTask&)+0x70>
    5902:	4602      	mov	r2, r0
}

bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
    5904:	7e00      	ldrb	r0, [r0, #24]
    5906:	b988      	cbnz	r0, 592c <TimerSet::add(TimerTask&)+0x30>
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
    5908:	2301      	movs	r3, #1
    590a:	6111      	str	r1, [r2, #16]
    590c:	7613      	strb	r3, [r2, #24]
	if (_last_timer != nullptr) _last_timer->_next = &tt;
    590e:	6953      	ldr	r3, [r2, #20]
    5910:	b103      	cbz	r3, 5914 <TimerSet::add(TimerTask&)+0x18>
    5912:	6119      	str	r1, [r3, #16]
	_last_timer = &tt;
	tt._next = nullptr;
	tt.id = _nextTaskId;
    5914:	69d0      	ldr	r0, [r2, #28]
	}
	Serial.println("_");
}

int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
    5916:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
    591a:	2300      	movs	r3, #0
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
    591c:	6151      	str	r1, [r2, #20]
	}
	Serial.println("_");
}

int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
    591e:	42a0      	cmp	r0, r4
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
	tt.id = _nextTaskId;
    5920:	6008      	str	r0, [r1, #0]
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
    5922:	610b      	str	r3, [r1, #16]
int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
		_nextTaskId = 0;
		return INT32_MAX;
	}
	return _nextTaskId++;
    5924:	bf18      	it	ne
    5926:	1c43      	addne	r3, r0, #1
    5928:	61d3      	str	r3, [r2, #28]
    592a:	bd10      	pop	{r4, pc}

bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
	tt = _first_timer;
    592c:	6913      	ldr	r3, [r2, #16]
	while (tt != nullptr) {
    592e:	b913      	cbnz	r3, 5936 <TimerSet::add(TimerTask&)+0x3a>
    5930:	e00d      	b.n	594e <TimerSet::add(TimerTask&)+0x52>
		if (tt == &ttask) return true;
		tt = tt->_next;
    5932:	691b      	ldr	r3, [r3, #16]
bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
	tt = _first_timer;
	while (tt != nullptr) {
    5934:	b15b      	cbz	r3, 594e <TimerSet::add(TimerTask&)+0x52>
		if (tt == &ttask) return true;
    5936:	4299      	cmp	r1, r3
    5938:	d1fb      	bne.n	5932 <TimerSet::add(TimerTask&)+0x36>
    593a:	211b      	movs	r1, #27
    593c:	4810      	ldr	r0, [pc, #64]	; (5980 <TimerSet::add(TimerTask&)+0x84>)
    593e:	f006 f8d9 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    5942:	4810      	ldr	r0, [pc, #64]	; (5984 <TimerSet::add(TimerTask&)+0x88>)
    5944:	f006 fa98 	bl	be78 <Print::println()>
		Serial.println(F("! Can't add null timertask!"));
		return -1;
	}
	if (contains(tt)) {
		Serial.println(F("! Can't add same timertask!"));
		return -2;
    5948:	f06f 0001 	mvn.w	r0, #1
    594c:	bd10      	pop	{r4, pc}
	}
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
    594e:	2812      	cmp	r0, #18
    5950:	d802      	bhi.n	5958 <TimerSet::add(TimerTask&)+0x5c>
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
    5952:	3001      	adds	r0, #1
    5954:	7610      	strb	r0, [r2, #24]
    5956:	e7da      	b.n	590e <TimerSet::add(TimerTask&)+0x12>
    5958:	2123      	movs	r1, #35	; 0x23
    595a:	480b      	ldr	r0, [pc, #44]	; (5988 <TimerSet::add(TimerTask&)+0x8c>)
    595c:	f006 f8ca 	bl	baf4 <usb_serial_write>
    5960:	4808      	ldr	r0, [pc, #32]	; (5984 <TimerSet::add(TimerTask&)+0x88>)
    5962:	f006 fa89 	bl	be78 <Print::println()>
		return -2;
	}
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
		Serial.println(F("! Max number of TimerTasks reached."));
		return -3;
    5966:	f06f 0002 	mvn.w	r0, #2
    596a:	bd10      	pop	{r4, pc}
    596c:	211b      	movs	r1, #27
    596e:	4807      	ldr	r0, [pc, #28]	; (598c <TimerSet::add(TimerTask&)+0x90>)
    5970:	f006 f8c0 	bl	baf4 <usb_serial_write>
    5974:	4803      	ldr	r0, [pc, #12]	; (5984 <TimerSet::add(TimerTask&)+0x88>)
    5976:	f006 fa7f 	bl	be78 <Print::println()>

int TimerSet::add(TimerTask& tt) {
	//Serial.print("Adding timer... ");
	if (&tt == nullptr) {
		Serial.println(F("! Can't add null timertask!"));
		return -1;
    597a:	f04f 30ff 	mov.w	r0, #4294967295
    597e:	bd10      	pop	{r4, pc}
    5980:	20001290 	.word	0x20001290
    5984:	20001ea4 	.word	0x20001ea4
    5988:	2000126c 	.word	0x2000126c
    598c:	20001250 	.word	0x20001250

00005990 <TimerSet::add(TimerTask*)>:
	//Serial.println(")");
	return nextTaskId();
}

int TimerSet::add(TimerTask* tt) {
	return add(*tt);
    5990:	f7ff bfb4 	b.w	58fc <TimerSet::add(TimerTask&)>

00005994 <TimerSet::update(unsigned long&)>:
	return nullptr;
}

// checks all the registered Timertask
// returns: nearest next event time (ms)
uint32_t TimerSet::update(uint32_t& ms) {
    5994:	b570      	push	{r4, r5, r6, lr}
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
    5996:	7e03      	ldrb	r3, [r0, #24]
    5998:	b91b      	cbnz	r3, 59a2 <TimerSet::update(unsigned long&)+0xe>
// returns: nearest next event time (ms)
uint32_t TimerSet::update(uint32_t& ms) {
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
    599a:	f04f 35ff 	mov.w	r5, #4294967295
			rt = tt->update(_chkTime);
			if (rt < nextEventT) nextEventT = rt;
		}
	}
	return nextEventT;
}
    599e:	4628      	mov	r0, r5
    59a0:	bd70      	pop	{r4, r5, r6, pc}
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
		_chkTime = ms;
    59a2:	680b      	ldr	r3, [r1, #0]
		for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    59a4:	6904      	ldr	r4, [r0, #16]
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
		_chkTime = ms;
    59a6:	6203      	str	r3, [r0, #32]
		for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    59a8:	2c00      	cmp	r4, #0
    59aa:	d0f6      	beq.n	599a <TimerSet::update(unsigned long&)+0x6>
    59ac:	f100 0620 	add.w	r6, r0, #32
    59b0:	f04f 35ff 	mov.w	r5, #4294967295
			rt = tt->update(_chkTime);
    59b4:	4620      	mov	r0, r4
    59b6:	4631      	mov	r1, r6
    59b8:	f000 f81a 	bl	59f0 <TimerTask::update(unsigned long&)>
	uint32_t rt, nextEventT;

	nextEventT = UINT32_MAX;
	if (_count > 0) {
		_chkTime = ms;
		for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    59bc:	6924      	ldr	r4, [r4, #16]
    59be:	4285      	cmp	r5, r0
    59c0:	bf28      	it	cs
    59c2:	4605      	movcs	r5, r0
    59c4:	2c00      	cmp	r4, #0
    59c6:	d1f5      	bne.n	59b4 <TimerSet::update(unsigned long&)+0x20>
			rt = tt->update(_chkTime);
			if (rt < nextEventT) nextEventT = rt;
		}
	}
	return nextEventT;
}
    59c8:	4628      	mov	r0, r5
    59ca:	bd70      	pop	{r4, r5, r6, pc}

000059cc <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>:
	_enabled = en;
	tag = "";
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
    59cc:	b4f0      	push	{r4, r5, r6, r7}
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
    59ce:	2600      	movs	r6, #0
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    59d0:	4d06      	ldr	r5, [pc, #24]	; (59ec <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)+0x20>)
	_enabled = en;
	tag = "";
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
    59d2:	f89d 7010 	ldrb.w	r7, [sp, #16]
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    59d6:	42b3      	cmp	r3, r6
    59d8:	bf08      	it	eq
    59da:	462b      	moveq	r3, r5
TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
    59dc:	7206      	strb	r6, [r0, #8]
	_enabled = en;
    59de:	7707      	strb	r7, [r0, #28]
	tag = (name == NULL) ? "" : name;
	_next = NULL;
    59e0:	6106      	str	r6, [r0, #16]
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
    59e2:	6041      	str	r1, [r0, #4]
	//id = taskId;
	_period = ms;
    59e4:	6182      	str	r2, [r0, #24]
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    59e6:	60c3      	str	r3, [r0, #12]
	_next = NULL;
}
    59e8:	bcf0      	pop	{r4, r5, r6, r7}
    59ea:	4770      	bx	lr
    59ec:	200011b0 	.word	0x200011b0

000059f0 <TimerTask::update(unsigned long&)>:

// Updates Timertask state, checking whether its wait period has expired
// returns: remaining time before trigger [ms] > 0; 0 if not enabled
uint32_t TimerTask::update(uint32_t& chkTime) {
    59f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t elapsed;

	if (!_enabled) return UINT32_MAX;
    59f2:	7f03      	ldrb	r3, [r0, #28]
    59f4:	b913      	cbnz	r3, 59fc <TimerTask::update(unsigned long&)+0xc>
    59f6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		_startTime = chkTime;
		return _period;
	}
	return _period - elapsed;
}
    59fa:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t elapsed;

	if (!_enabled) return UINT32_MAX;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
    59fc:	680a      	ldr	r2, [r1, #0]
    59fe:	6944      	ldr	r4, [r0, #20]
	if (elapsed >= _period) {
    5a00:	6983      	ldr	r3, [r0, #24]
	uint32_t elapsed;

	if (!_enabled) return UINT32_MAX;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
    5a02:	1b12      	subs	r2, r2, r4
	if (elapsed >= _period) {
    5a04:	429a      	cmp	r2, r3
    5a06:	d201      	bcs.n	5a0c <TimerTask::update(unsigned long&)+0x1c>
			return 0;
		}
		_startTime = chkTime;
		return _period;
	}
	return _period - elapsed;
    5a08:	1a98      	subs	r0, r3, r2
    5a0a:	bd38      	pop	{r3, r4, r5, pc}
    5a0c:	4604      	mov	r4, r0
	if (!_enabled) return UINT32_MAX;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
	if (elapsed >= _period) {
		execObj->timerRoutine(id, chkTime);
    5a0e:	6840      	ldr	r0, [r0, #4]
    5a10:	460a      	mov	r2, r1
    5a12:	460d      	mov	r5, r1
    5a14:	6803      	ldr	r3, [r0, #0]
    5a16:	6821      	ldr	r1, [r4, #0]
    5a18:	689b      	ldr	r3, [r3, #8]
    5a1a:	4798      	blx	r3
		//if (funct != NULL) (_game->*funct)(chkTime);
		if (oneShot) {
    5a1c:	7a23      	ldrb	r3, [r4, #8]
    5a1e:	b113      	cbz	r3, 5a26 <TimerTask::update(unsigned long&)+0x36>
			_enabled = false;
    5a20:	2000      	movs	r0, #0
    5a22:	7720      	strb	r0, [r4, #28]
			return 0;
    5a24:	bd38      	pop	{r3, r4, r5, pc}
		}
		_startTime = chkTime;
    5a26:	682b      	ldr	r3, [r5, #0]
		return _period;
    5a28:	69a0      	ldr	r0, [r4, #24]
		//if (funct != NULL) (_game->*funct)(chkTime);
		if (oneShot) {
			_enabled = false;
			return 0;
		}
		_startTime = chkTime;
    5a2a:	6163      	str	r3, [r4, #20]
		return _period;
    5a2c:	bd38      	pop	{r3, r4, r5, pc}
    5a2e:	bf00      	nop

00005a30 <TimerTask::setPeriod(unsigned long)>:
	Serial.print(_period);
	if (_enabled) Serial.print(",1]"); else Serial.print(",0]");
}

void TimerTask::setPeriod(uint32_t ms) {
	_period = ms;
    5a30:	6181      	str	r1, [r0, #24]
    5a32:	4770      	bx	lr

00005a34 <TimerTask::setPeriodic(bool)>:
	_period = ms;
	oneShot = !periodic;
}

void TimerTask::setPeriodic(bool periodic) {
	oneShot = !periodic;
    5a34:	f081 0101 	eor.w	r1, r1, #1
    5a38:	7201      	strb	r1, [r0, #8]
    5a3a:	4770      	bx	lr

00005a3c <TimerTask::enable()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    5a3c:	4b02      	ldr	r3, [pc, #8]	; (5a48 <TimerTask::enable()+0xc>)
}

void TimerTask::enable() {
	_startTime = millis();
	_enabled = true;
    5a3e:	2201      	movs	r2, #1
    5a40:	681b      	ldr	r3, [r3, #0]
    5a42:	7702      	strb	r2, [r0, #28]
void TimerTask::setPeriodic(bool periodic) {
	oneShot = !periodic;
}

void TimerTask::enable() {
	_startTime = millis();
    5a44:	6143      	str	r3, [r0, #20]
    5a46:	4770      	bx	lr
    5a48:	20002c14 	.word	0x20002c14

00005a4c <TimerTask::disable()>:
	_enabled = true;
}

void TimerTask::disable() {
	_enabled = false;
    5a4c:	2300      	movs	r3, #0
    5a4e:	7703      	strb	r3, [r0, #28]
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop

00005a54 <freeMemory>:
extern "C" char* sbrk(int incr);
#else  // __ARM__
extern char* __brkval;
#endif  // __arm__

int freeMemory() {
    5a54:	b510      	push	{r4, lr}
    5a56:	b082      	sub	sp, #8
    char top;
#ifdef __arm__
    return &top - reinterpret_cast<char*>(sbrk(0));
    5a58:	2000      	movs	r0, #0
    5a5a:	f008 f8c5 	bl	dbe8 <sbrk>
    5a5e:	f10d 0407 	add.w	r4, sp, #7
#elif defined(CORE_TEENSY) || (ARDUINO > 103 && ARDUINO != 151)
    return &top - __brkval;
#else  // __arm__
    return __brkval ? &top - __brkval : &top - __malloc_heap_start;
#endif  // __arm__
    5a62:	1a20      	subs	r0, r4, r0
    5a64:	b002      	add	sp, #8
    5a66:	bd10      	pop	{r4, pc}

00005a68 <Board_Sys80b::Board_Sys80b()>:
#include <SPI.h>
#include <Bounce.h>

#define BOARD_SW_REV F("0.2003")

Board_Sys80b::Board_Sys80b() {	
    5a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a6a:	4d3b      	ldr	r5, [pc, #236]	; (5b58 <Board_Sys80b::Board_Sys80b()+0xf0>)
    5a6c:	4606      	mov	r6, r0
    5a6e:	4604      	mov	r4, r0
    5a70:	4f3a      	ldr	r7, [pc, #232]	; (5b5c <Board_Sys80b::Board_Sys80b()+0xf4>)
    5a72:	6828      	ldr	r0, [r5, #0]
    5a74:	6869      	ldr	r1, [r5, #4]
    5a76:	68aa      	ldr	r2, [r5, #8]
    5a78:	68eb      	ldr	r3, [r5, #12]
    5a7a:	f844 7b04 	str.w	r7, [r4], #4
    5a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5a80:	69eb      	ldr	r3, [r5, #28]
    5a82:	6928      	ldr	r0, [r5, #16]
    5a84:	6969      	ldr	r1, [r5, #20]
    5a86:	69aa      	ldr	r2, [r5, #24]
    5a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5a8a:	6a28      	ldr	r0, [r5, #32]
    5a8c:	224a      	movs	r2, #74	; 0x4a
    5a8e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    5a92:	6270      	str	r0, [r6, #36]	; 0x24
    5a94:	f106 0028 	add.w	r0, r6, #40	; 0x28
    5a98:	f004 fb04 	bl	a0a4 <memcpy>
    5a9c:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    5aa0:	f000 fc2e 	bl	6300 <Msg::Msg()>
	// pins setup
	pinMode(SLAM_PIN, INPUT_PULLUP);
    5aa4:	2102      	movs	r1, #2
    5aa6:	4608      	mov	r0, r1
    5aa8:	f004 fdbc 	bl	a624 <pinMode>
	pinMode(NEXTB_PIN, INPUT_PULLUP);
    5aac:	2102      	movs	r1, #2
    5aae:	2003      	movs	r0, #3
    5ab0:	f004 fdb8 	bl	a624 <pinMode>
	pinMode(ENTRB_PIN, INPUT_PULLUP);
    5ab4:	2102      	movs	r1, #2
    5ab6:	2004      	movs	r0, #4
    5ab8:	f004 fdb4 	bl	a624 <pinMode>
	pinMode(BACKB_PIN, INPUT_PULLUP);
    5abc:	2102      	movs	r1, #2
    5abe:	2005      	movs	r0, #5
    5ac0:	f004 fdb0 	bl	a624 <pinMode>
	pinMode(REV_D0_PIN, INPUT_PULLUP);
    5ac4:	2102      	movs	r1, #2
    5ac6:	200b      	movs	r0, #11
    5ac8:	f004 fdac 	bl	a624 <pinMode>
	pinMode(REV_D1_PIN, INPUT_PULLUP);
    5acc:	2102      	movs	r1, #2
    5ace:	200c      	movs	r0, #12
    5ad0:	f004 fda8 	bl	a624 <pinMode>
	pinMode(GPIO_SS_PIN, OUTPUT);
    5ad4:	2101      	movs	r1, #1
    5ad6:	200e      	movs	r0, #14
    5ad8:	f004 fda4 	bl	a624 <pinMode>
	pinMode(LG_SS_PIN, OUTPUT);
    5adc:	2101      	movs	r1, #1
    5ade:	200f      	movs	r0, #15
    5ae0:	f004 fda0 	bl	a624 <pinMode>
	pinMode(SD_SS_PIN, OUTPUT);
    5ae4:	2101      	movs	r1, #1
    5ae6:	200a      	movs	r0, #10
    5ae8:	f004 fd9c 	bl	a624 <pinMode>
	pinMode(D_LD1_PIN, OUTPUT);
    5aec:	2101      	movs	r1, #1
    5aee:	2010      	movs	r0, #16
    5af0:	f004 fd98 	bl	a624 <pinMode>
	pinMode(D_LD2_PIN, OUTPUT);
    5af4:	2101      	movs	r1, #1
    5af6:	2011      	movs	r0, #17
    5af8:	f004 fd94 	bl	a624 <pinMode>
	pinMode(D_RES_PIN, OUTPUT);
    5afc:	2101      	movs	r1, #1
    5afe:	2012      	movs	r0, #18
    5b00:	f004 fd90 	bl	a624 <pinMode>
	digitalWrite(GPIO_SS_PIN, HIGH);
    5b04:	2101      	movs	r1, #1
    5b06:	200e      	movs	r0, #14
    5b08:	f004 fd80 	bl	a60c <digitalWrite>
	digitalWrite(LG_SS_PIN, HIGH);
    5b0c:	2101      	movs	r1, #1
    5b0e:	200f      	movs	r0, #15
    5b10:	f004 fd7c 	bl	a60c <digitalWrite>
	digitalWrite(SD_SS_PIN, HIGH);
    5b14:	2101      	movs	r1, #1
    5b16:	200a      	movs	r0, #10
    5b18:	f004 fd78 	bl	a60c <digitalWrite>
	digitalWrite(D_LD1_PIN, LOW);
    5b1c:	2100      	movs	r1, #0
    5b1e:	2010      	movs	r0, #16
    5b20:	f004 fd74 	bl	a60c <digitalWrite>
	digitalWrite(D_LD2_PIN, LOW);
    5b24:	2100      	movs	r1, #0
    5b26:	2011      	movs	r0, #17
    5b28:	f004 fd70 	bl	a60c <digitalWrite>
	digitalWrite(D_RES_PIN, LOW);
    5b2c:	2100      	movs	r1, #0
    5b2e:	2012      	movs	r0, #18
    5b30:	f004 fd6c 	bl	a60c <digitalWrite>

	Serial.begin(SERIAL_BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    5b34:	2008      	movs	r0, #8
    5b36:	f006 f95b 	bl	bdf0 <operator new(unsigned int)>
	_poc = 0;
    5b3a:	2200      	movs	r2, #0
	digitalWrite(D_LD1_PIN, LOW);
	digitalWrite(D_LD2_PIN, LOW);
	digitalWrite(D_RES_PIN, LOW);

	Serial.begin(SERIAL_BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    5b3c:	4603      	mov	r3, r0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5b3e:	2107      	movs	r1, #7
//#include "debug/printf.h"


class SPISettings {
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    5b40:	4807      	ldr	r0, [pc, #28]	; (5b60 <Board_Sys80b::Board_Sys80b()+0xf8>)
    5b42:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
    5b46:	6018      	str	r0, [r3, #0]
	_poc = 0;
	_lcd = nullptr;
}
    5b48:	4630      	mov	r0, r6
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5b4a:	6059      	str	r1, [r3, #4]
	digitalWrite(D_LD2_PIN, LOW);
	digitalWrite(D_RES_PIN, LOW);

	Serial.begin(SERIAL_BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
	_poc = 0;
    5b4c:	f8a6 20ee 	strh.w	r2, [r6, #238]	; 0xee
	_lcd = nullptr;
    5b50:	f8c6 20f0 	str.w	r2, [r6, #240]	; 0xf0
}
    5b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b56:	bf00      	nop
    5b58:	200012d4 	.word	0x200012d4
    5b5c:	20001344 	.word	0x20001344
    5b60:	000186a0 	.word	0x000186a0

00005b64 <Board_Sys80b::~Board_Sys80b()>:

Board_Sys80b::~Board_Sys80b() {
    5b64:	b538      	push	{r3, r4, r5, lr}
    5b66:	4604      	mov	r4, r0
	//delete lcd;
	delete ledGrid;
    5b68:	2110      	movs	r1, #16
    5b6a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    5b6e:	f006 f945 	bl	bdfc <operator delete(void*, unsigned int)>
	delete nextButton;
    5b72:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    5b74:	2110      	movs	r1, #16
    5b76:	f006 f941 	bl	bdfc <operator delete(void*, unsigned int)>
	delete enterButton;
    5b7a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5b7c:	2110      	movs	r1, #16
    5b7e:	f006 f93d 	bl	bdfc <operator delete(void*, unsigned int)>
	delete backButton;
    5b82:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    5b86:	2110      	movs	r1, #16
    5b88:	f006 f938 	bl	bdfc <operator delete(void*, unsigned int)>
	delete _spiSettings;
    5b8c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    5b90:	2108      	movs	r1, #8
    5b92:	f006 f933 	bl	bdfc <operator delete(void*, unsigned int)>
	delete NVData;
    5b96:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    5b9a:	b135      	cbz	r5, 5baa <Board_Sys80b::~Board_Sys80b()+0x46>
    5b9c:	4628      	mov	r0, r5
    5b9e:	f001 fa65 	bl	706c <NVData_class::~NVData_class()>
    5ba2:	4628      	mov	r0, r5
    5ba4:	2164      	movs	r1, #100	; 0x64
    5ba6:	f006 f929 	bl	bdfc <operator delete(void*, unsigned int)>

#include "Arduino.h"

class LiquidCrystalFast;

class Msg {
    5baa:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    5bae:	f006 fa25 	bl	bffc <String::~String()>
    5bb2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    5bb6:	f006 fa21 	bl	bffc <String::~String()>
}
    5bba:	4620      	mov	r0, r4
    5bbc:	bd38      	pop	{r3, r4, r5, pc}
    5bbe:	bf00      	nop

00005bc0 <Board_Sys80b::outputReset()>:
	//delay(100);

	return true;
}

void Board_Sys80b::outputReset() {
    5bc0:	b570      	push	{r4, r5, r6, lr}
    void writeDisplayLD(byte b);
    inline void writeDisplayLD1(bool b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(bool b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    5bc2:	2100      	movs	r1, #0
    5bc4:	4605      	mov	r5, r0
    5bc6:	1c84      	adds	r4, r0, #2
    5bc8:	f100 061a 	add.w	r6, r0, #26
    5bcc:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    5bd0:	f001 fc42 	bl	7458 <PIO::mcpWrite(unsigned short)>
//}

// adr = 0..11
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
    5bd4:	f834 1f02 	ldrh.w	r1, [r4, #2]!
    5bd8:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5bdc:	0109      	lsls	r1, r1, #4
    5bde:	b289      	uxth	r1, r1
    5be0:	f001 fc3a 	bl	7458 <PIO::mcpWrite(unsigned short)>
	return true;
}

void Board_Sys80b::outputReset() {
	writeSolenoids(0);
	for (int i = 0; i < 12; i++) write4Lamps(i, 0);
    5be4:	42b4      	cmp	r4, r6
    5be6:	d1f5      	bne.n	5bd4 <Board_Sys80b::outputReset()+0x14>
	_lcd->setCursor(col, line);
	_lcd->print(st);
}

void Board_Sys80b::writeDisplayAndSoundReset(bool b) {
	if (_revision == 0) digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    5be8:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
    5bec:	b92b      	cbnz	r3, 5bfa <Board_Sys80b::outputReset()+0x3a>
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
			} else if (pin == 18) {
				CORE_PIN18_PORTCLEAR = CORE_PIN18_BITMASK;
    5bee:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	displayAndSound_IO->mcpWritePB(b ? 0 : 0x80);
    5bfa:	2100      	movs	r1, #0
    5bfc:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    5c00:	f001 fe2e 	bl	7860 <PIO::mcpWritePB(unsigned char)>

void Board_Sys80b::outputReset() {
	writeSolenoids(0);
	for (int i = 0; i < 12; i++) write4Lamps(i, 0);
	writeDisplayAndSoundReset(true);
	delay(50);
    5c04:	2032      	movs	r0, #50	; 0x32
    5c06:	f004 fc49 	bl	a49c <delay>
	_lcd->setCursor(col, line);
	_lcd->print(st);
}

void Board_Sys80b::writeDisplayAndSoundReset(bool b) {
	if (_revision == 0) digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    5c0a:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
    5c0e:	b92b      	cbnz	r3, 5c1c <Board_Sys80b::outputReset()+0x5c>
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
			} else if (pin == 18) {
				CORE_PIN18_PORTSET = CORE_PIN18_BITMASK;
    5c10:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	displayAndSound_IO->mcpWritePB(b ? 0 : 0x80);
    5c1c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    5c20:	2180      	movs	r1, #128	; 0x80
    5c22:	f001 fe1d 	bl	7860 <PIO::mcpWritePB(unsigned char)>
    void lcdprn(byte line, String& st, byte col = 0);

    inline byte getSettingSwitch(byte n) { return getSettingBit(n - 1); }
    inline void setSettingSwitch(byte n, bool s) { saveSettingBit(n - 1, s); }
    void writeDisplayAndSoundReset(bool b);
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(0x80 | b); }
    5c26:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    5c2a:	218f      	movs	r1, #143	; 0x8f
	for (int i = 0; i < 12; i++) write4Lamps(i, 0);
	writeDisplayAndSoundReset(true);
	delay(50);
	writeDisplayAndSoundReset(false);
	writeSound(0xf); // reset sound output (active low)
}
    5c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c30:	f001 be16 	b.w	7860 <PIO::mcpWritePB(unsigned char)>

00005c34 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)>:
	if (_lcd == nullptr) return;
	_lcd->setCursor(col, line);
	_lcd->print(st);
}

void Board_Sys80b::lcdprn(byte line, const __FlashStringHelper* st, byte col) {
    5c34:	b570      	push	{r4, r5, r6, lr}
	if (_lcd == nullptr) return;
    5c36:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    5c3a:	b19e      	cbz	r6, 5c64 <Board_Sys80b::lcdprn(unsigned char, __FlashStringHelper const*, unsigned char)+0x30>
    5c3c:	4604      	mov	r4, r0
    5c3e:	4615      	mov	r5, r2
	_lcd->setCursor(col, line);
    5c40:	4630      	mov	r0, r6
    5c42:	460a      	mov	r2, r1
    5c44:	4619      	mov	r1, r3
    5c46:	f003 ff9d 	bl	9b84 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	_lcd->print(st);
    5c4a:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5c4e:	4628      	mov	r0, r5
    5c50:	f007 fe76 	bl	d940 <strlen>
    5c54:	6823      	ldr	r3, [r4, #0]
    5c56:	4602      	mov	r2, r0
    5c58:	4629      	mov	r1, r5
    5c5a:	4620      	mov	r0, r4
    5c5c:	685b      	ldr	r3, [r3, #4]
}
    5c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c62:	4718      	bx	r3
    5c64:	bd70      	pop	{r4, r5, r6, pc}
    5c66:	bf00      	nop

00005c68 <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)>:

void Board_Sys80b::lcdprn(byte line, String& st, byte col) {
    5c68:	b570      	push	{r4, r5, r6, lr}
	if (_lcd == nullptr) return;
    5c6a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    5c6e:	b16e      	cbz	r6, 5c8c <Board_Sys80b::lcdprn(unsigned char, String&, unsigned char)+0x24>
    5c70:	4615      	mov	r5, r2
    5c72:	4604      	mov	r4, r0
    5c74:	460a      	mov	r2, r1
	_lcd->setCursor(col, line);
    5c76:	4630      	mov	r0, r6
    5c78:	4619      	mov	r1, r3
    5c7a:	f003 ff83 	bl	9b84 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	_lcd->print(st);
    5c7e:	4629      	mov	r1, r5
    5c80:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
}
    5c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void Board_Sys80b::lcdprn(byte line, String& st, byte col) {
	if (_lcd == nullptr) return;
	_lcd->setCursor(col, line);
	_lcd->print(st);
    5c88:	f006 b8d0 	b.w	be2c <Print::print(String const&)>
    5c8c:	bd70      	pop	{r4, r5, r6, pc}
    5c8e:	bf00      	nop

00005c90 <Board_Sys80b::readButtons()>:
void Board_Sys80b::writeDisplayLD(byte b) {
	digitalWriteFast(D_LD1_PIN, ((b & 1) ? HIGH : LOW));
	digitalWriteFast(D_LD2_PIN, ((b & 2) ? HIGH : LOW));
}

ButtonID Board_Sys80b::readButtons() {
    5c90:	b510      	push	{r4, lr}
    5c92:	4604      	mov	r4, r0
	nextButton->update();
    5c94:	6f80      	ldr	r0, [r0, #120]	; 0x78
    5c96:	f004 f9db 	bl	a050 <Bounce::update()>
	enterButton->update();
    5c9a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5c9c:	f004 f9d8 	bl	a050 <Bounce::update()>
	backButton->update();
    5ca0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    5ca4:	f004 f9d4 	bl	a050 <Bounce::update()>
	if (nextButton->fallingEdge()) return NEXT_BUTT;
    5ca8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    5caa:	f004 f9f1 	bl	a090 <Bounce::fallingEdge()>
    5cae:	b108      	cbz	r0, 5cb4 <Board_Sys80b::readButtons()+0x24>
    5cb0:	2003      	movs	r0, #3
    5cb2:	bd10      	pop	{r4, pc}
	if (enterButton->fallingEdge()) return ENTER_BUTT;
    5cb4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5cb6:	f004 f9eb 	bl	a090 <Bounce::fallingEdge()>
    5cba:	b108      	cbz	r0, 5cc0 <Board_Sys80b::readButtons()+0x30>
    5cbc:	2002      	movs	r0, #2
	if (backButton->fallingEdge()) return BACK_BUTT;
	return NONE_BUTT;
}
    5cbe:	bd10      	pop	{r4, pc}
	nextButton->update();
	enterButton->update();
	backButton->update();
	if (nextButton->fallingEdge()) return NEXT_BUTT;
	if (enterButton->fallingEdge()) return ENTER_BUTT;
	if (backButton->fallingEdge()) return BACK_BUTT;
    5cc0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
	return NONE_BUTT;
}
    5cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nextButton->update();
	enterButton->update();
	backButton->update();
	if (nextButton->fallingEdge()) return NEXT_BUTT;
	if (enterButton->fallingEdge()) return ENTER_BUTT;
	if (backButton->fallingEdge()) return BACK_BUTT;
    5cc8:	f004 b9e2 	b.w	a090 <Bounce::fallingEdge()>

00005ccc <Board_Sys80b::_readHwRev()>:
	if (enterButton->update()) return true;
	if (backButton->update()) return true;
	return false;
}

byte Board_Sys80b::_readHwRev() {
    5ccc:	b510      	push	{r4, lr}
	byte rev = 0;
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
    5cce:	200b      	movs	r0, #11
    5cd0:	f004 fca2 	bl	a618 <digitalRead>
	if (backButton->update()) return true;
	return false;
}

byte Board_Sys80b::_readHwRev() {
	byte rev = 0;
    5cd4:	fab0 f480 	clz	r4, r0
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
	if (digitalRead(REV_D1_PIN) == LOW) rev += 2;
    5cd8:	200c      	movs	r0, #12
	if (backButton->update()) return true;
	return false;
}

byte Board_Sys80b::_readHwRev() {
	byte rev = 0;
    5cda:	0964      	lsrs	r4, r4, #5
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
	if (digitalRead(REV_D1_PIN) == LOW) rev += 2;
    5cdc:	f004 fc9c 	bl	a618 <digitalRead>
    5ce0:	b908      	cbnz	r0, 5ce6 <Board_Sys80b::_readHwRev()+0x1a>
    5ce2:	3402      	adds	r4, #2
    5ce4:	b2e4      	uxtb	r4, r4
	return rev;
}
    5ce6:	4620      	mov	r0, r4
    5ce8:	bd10      	pop	{r4, pc}
    5cea:	bf00      	nop

00005cec <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>:
//	digitalWriteFast(D_LD2_PIN, ((adr & 2) != 0) ? HIGH : LOW);
//}

// adr = 0..11
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
    5cec:	290b      	cmp	r1, #11
    5cee:	d900      	bls.n	5cf2 <Board_Sys80b::write4Lamps(unsigned char, unsigned char)+0x6>
    5cf0:	4770      	bx	lr
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
    5cf2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    5cf6:	f002 020f 	and.w	r2, r2, #15
    5cfa:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
    5cfe:	8889      	ldrh	r1, [r1, #4]
    5d00:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5d04:	b289      	uxth	r1, r1
    5d06:	f001 bba7 	b.w	7458 <PIO::mcpWrite(unsigned short)>
    5d0a:	bf00      	nop

00005d0c <Board_Sys80b::restoreFactorySettings(bool)>:
}

void Board_Sys80b::restoreFactorySettings(bool immediateUpdate) {
    5d0c:	b570      	push	{r4, r5, r6, lr}
	msg.out(F("* Restoring factory settings... "));
    5d0e:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
}

void Board_Sys80b::restoreFactorySettings(bool immediateUpdate) {
    5d12:	4604      	mov	r4, r0
    5d14:	460e      	mov	r6, r1
	msg.out(F("* Restoring factory settings... "));
    5d16:	4910      	ldr	r1, [pc, #64]	; (5d58 <Board_Sys80b::restoreFactorySettings(bool)+0x4c>)
    5d18:	4628      	mov	r0, r5
    5d1a:	f000 fd05 	bl	6728 <Msg::out(__FlashStringHelper const*)>
	//NVData->clearAll();
	NVData->writeBytes(2u, factoryStatsBytes, 74);
    5d1e:	f104 0228 	add.w	r2, r4, #40	; 0x28
    5d22:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5d26:	234a      	movs	r3, #74	; 0x4a
    5d28:	2102      	movs	r1, #2
    5d2a:	f001 f88f 	bl	6e4c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)>
	NVData->writeBytes(SETTINGS_ADR, factorySettingsOpSw, 4);
    5d2e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5d32:	2164      	movs	r1, #100	; 0x64
    5d34:	f104 0224 	add.w	r2, r4, #36	; 0x24
    5d38:	2304      	movs	r3, #4
    5d3a:	f001 f887 	bl	6e4c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)>
	msg.outln(F("ok."));
    5d3e:	4628      	mov	r0, r5
    5d40:	4906      	ldr	r1, [pc, #24]	; (5d5c <Board_Sys80b::restoreFactorySettings(bool)+0x50>)
    5d42:	f000 fb85 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	if (immediateUpdate) NVData->update();
    5d46:	b906      	cbnz	r6, 5d4a <Board_Sys80b::restoreFactorySettings(bool)+0x3e>
    5d48:	bd70      	pop	{r4, r5, r6, pc}
    5d4a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
}
    5d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg.out(F("* Restoring factory settings... "));
	//NVData->clearAll();
	NVData->writeBytes(2u, factoryStatsBytes, 74);
	NVData->writeBytes(SETTINGS_ADR, factorySettingsOpSw, 4);
	msg.outln(F("ok."));
	if (immediateUpdate) NVData->update();
    5d52:	f001 b961 	b.w	7018 <NVData_class::update()>
    5d56:	bf00      	nop
    5d58:	20001354 	.word	0x20001354
    5d5c:	20001378 	.word	0x20001378

00005d60 <Board_Sys80b::incrementPowerOnCounter()>:
	delay(50);
	writeDisplayAndSoundReset(false);
	writeSound(0xf); // reset sound output (active low)
}

uint16_t Board_Sys80b::incrementPowerOnCounter() {
    5d60:	b538      	push	{r3, r4, r5, lr}
    5d62:	4605      	mov	r5, r0
	if (!NVData->ready()) {
    5d64:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    5d68:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
    5d6c:	b18c      	cbz	r4, 5d92 <Board_Sys80b::incrementPowerOnCounter()+0x32>
		msg.warn(F("NVData not available!"), CLASS_NAME, "incrementPowerOnCounter");
		return 0;
	}
	uint16_t poc = NVData->readWord(0);
    5d6e:	2100      	movs	r1, #0
    5d70:	f000 ff50 	bl	6c14 <NVData_class::readWord(unsigned short)>
	if (poc++ == 0) restoreFactorySettings(false); // on first bootup only
    5d74:	1c44      	adds	r4, r0, #1
    5d76:	b2a4      	uxth	r4, r4
    5d78:	b1a0      	cbz	r0, 5da4 <Board_Sys80b::incrementPowerOnCounter()+0x44>
	NVData->writeWord(0, poc);
    5d7a:	4622      	mov	r2, r4
    5d7c:	2100      	movs	r1, #0
    5d7e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    5d82:	f001 f901 	bl	6f88 <NVData_class::writeWord(unsigned short, unsigned short)>
	NVData->update();
    5d86:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    5d8a:	f001 f945 	bl	7018 <NVData_class::update()>
	if (!NVData->ready()) {
		msg.warn(F("NVData not available!"), CLASS_NAME, "incrementPowerOnCounter");
		return 0;
	}
	uint16_t poc = NVData->readWord(0);
	if (poc++ == 0) restoreFactorySettings(false); // on first bootup only
    5d8e:	4620      	mov	r0, r4
	NVData->writeWord(0, poc);
	NVData->update();
	return poc;
}
    5d90:	bd38      	pop	{r3, r4, r5, pc}
	writeSound(0xf); // reset sound output (active low)
}

uint16_t Board_Sys80b::incrementPowerOnCounter() {
	if (!NVData->ready()) {
		msg.warn(F("NVData not available!"), CLASS_NAME, "incrementPowerOnCounter");
    5d92:	4628      	mov	r0, r5
    5d94:	4b06      	ldr	r3, [pc, #24]	; (5db0 <Board_Sys80b::incrementPowerOnCounter()+0x50>)
    5d96:	4907      	ldr	r1, [pc, #28]	; (5db4 <Board_Sys80b::incrementPowerOnCounter()+0x54>)
    5d98:	f850 2ba0 	ldr.w	r2, [r0], #160
    5d9c:	f000 fc24 	bl	65e8 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>
    5da0:	4620      	mov	r0, r4
    5da2:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
	}
	uint16_t poc = NVData->readWord(0);
	if (poc++ == 0) restoreFactorySettings(false); // on first bootup only
    5da4:	4601      	mov	r1, r0
    5da6:	4628      	mov	r0, r5
    5da8:	f7ff ffb0 	bl	5d0c <Board_Sys80b::restoreFactorySettings(bool)>
    5dac:	e7e5      	b.n	5d7a <Board_Sys80b::incrementPowerOnCounter()+0x1a>
    5dae:	bf00      	nop
    5db0:	2000137c 	.word	0x2000137c
    5db4:	20001394 	.word	0x20001394

00005db8 <Board_Sys80b::begin()>:
	delete backButton;
	delete _spiSettings;
	delete NVData;
}

bool Board_Sys80b::begin() {
    5db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5dbc:	4604      	mov	r4, r0
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
	inline void enableSerialOutput() { serialOutputEnabled = true; }
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    5dbe:	4605      	mov	r5, r0
	inline void disableLogOutput() { logFileEnabled = false; }
	inline void setPostDelay(uint16_t delay) { mdelay = delay; }
    5dc0:	2600      	movs	r6, #0
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
	inline void enableSerialOutput() { serialOutputEnabled = true; }
    5dc2:	2701      	movs	r7, #1
    5dc4:	b083      	sub	sp, #12
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    5dc6:	f855 1fa0 	ldr.w	r1, [r5, #160]!
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
	inline void enableSerialOutput() { serialOutputEnabled = true; }
    5dca:	f880 70bf 	strb.w	r7, [r0, #191]	; 0xbf
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    5dce:	30c8      	adds	r0, #200	; 0xc8
	inline void disableLogOutput() { logFileEnabled = false; }
	inline void setPostDelay(uint16_t delay) { mdelay = delay; }
    5dd0:	f820 6c0c 	strh.w	r6, [r0, #-12]
		lcd = &lcdispl; lcdOutputEnabled = true; 
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
    5dd4:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
	inline void enableSerialOutput() { serialOutputEnabled = true; }
	inline void disableSerialOutput() { serialOutputEnabled = false; }
	inline void enableLogOutput(const char* name = nullptr) { 
		logFileName = (name == nullptr) ? CLASS_NAME : name; logFileEnabled = true; }
    5dd8:	f006 f9fe 	bl	c1d8 <String::operator=(char const*)>
    5ddc:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
	const char* hdr = "begin";
	msg.enableSerialOutput();
	msg.setPostDelay(0);
	msg.disableLCDOutput();
	msg.enableLogOutput();
	msg.normalOutputToLog = false;
    5de0:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
	_revision = _readHwRev();
    5de4:	4620      	mov	r0, r4
    5de6:	f7ff ff71 	bl	5ccc <Board_Sys80b::_readHwRev()>
	msg.out(F("Starting board rev."));
    5dea:	4983      	ldr	r1, [pc, #524]	; (5ff8 <Board_Sys80b::begin()+0x240>)
	msg.enableSerialOutput();
	msg.setPostDelay(0);
	msg.disableLCDOutput();
	msg.enableLogOutput();
	msg.normalOutputToLog = false;
	_revision = _readHwRev();
    5dec:	f884 00ec 	strb.w	r0, [r4, #236]	; 0xec
	msg.out(F("Starting board rev."));
    5df0:	4628      	mov	r0, r5
    5df2:	f000 fc99 	bl	6728 <Msg::out(__FlashStringHelper const*)>
	msg.outln(_revision);
    5df6:	220a      	movs	r2, #10
    5df8:	4628      	mov	r0, r5
    5dfa:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    5dfe:	f000 fb59 	bl	64b4 <Msg::outln(unsigned long, int)>
	//delay(100);

	// SPI init
	msg.outln(F("- SPI init..."));
    5e02:	497e      	ldr	r1, [pc, #504]	; (5ffc <Board_Sys80b::begin()+0x244>)
    5e04:	4628      	mov	r0, r5
    5e06:	f000 fb23 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	SPI.begin();
    5e0a:	487d      	ldr	r0, [pc, #500]	; (6000 <Board_Sys80b::begin()+0x248>)
    5e0c:	f003 ffe6 	bl	9ddc <SPIClass::begin()>
	//delay(100);

	// SD init
	msg.outln(F("- SD init..."));
    5e10:	4628      	mov	r0, r5
    5e12:	497c      	ldr	r1, [pc, #496]	; (6004 <Board_Sys80b::begin()+0x24c>)
    5e14:	f000 fb1c 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	if (!SD.begin(SD_SS_PIN)) {
    5e18:	210a      	movs	r1, #10
    5e1a:	487b      	ldr	r0, [pc, #492]	; (6008 <Board_Sys80b::begin()+0x250>)
    5e1c:	f001 fee2 	bl	7be4 <SDClass::begin(unsigned char)>
    5e20:	4681      	mov	r9, r0
    5e22:	2800      	cmp	r0, #0
    5e24:	f000 80ce 	beq.w	5fc4 <Board_Sys80b::begin()+0x20c>
		return false;
	}
	//delay(100);

	// PIO init (Parallel Input/Output)
	msg.outln(F("- PIOs init..."));
    5e28:	4978      	ldr	r1, [pc, #480]	; (600c <Board_Sys80b::begin()+0x254>)
    5e2a:	4628      	mov	r0, r5
    5e2c:	f000 fb10 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	solenoids_IO = new PIO(_spiSettings, GPIO_SS_PIN, 0, 0x0000); // all 16 pins set as output
    5e30:	2008      	movs	r0, #8
    5e32:	f005 ffdd 	bl	bdf0 <operator new(unsigned int)>
    5e36:	4680      	mov	r8, r0
    5e38:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    5e3c:	4633      	mov	r3, r6
    5e3e:	220e      	movs	r2, #14
    5e40:	9600      	str	r6, [sp, #0]
    5e42:	f001 fbfd 	bl	7640 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    5e46:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
	lamps_IO = new PIO(_spiSettings, GPIO_SS_PIN, 1, 0x0000); // all 16 pins set as output
    5e4a:	2008      	movs	r0, #8
    5e4c:	f005 ffd0 	bl	bdf0 <operator new(unsigned int)>
    5e50:	4680      	mov	r8, r0
    5e52:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    5e56:	463b      	mov	r3, r7
    5e58:	220e      	movs	r2, #14
    5e5a:	9600      	str	r6, [sp, #0]
    5e5c:	f001 fbf0 	bl	7640 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    5e60:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
	switchMatrix_IO = new PIO(_spiSettings, GPIO_SS_PIN, 2, 0xff00); // 8 bits output + 8 bits input
    5e64:	2008      	movs	r0, #8
    5e66:	f005 ffc3 	bl	bdf0 <operator new(unsigned int)>
    5e6a:	f44f 4e7f 	mov.w	lr, #65280	; 0xff00
    5e6e:	4680      	mov	r8, r0
    5e70:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    5e74:	2302      	movs	r3, #2
    5e76:	f8cd e000 	str.w	lr, [sp]
    5e7a:	220e      	movs	r2, #14
    5e7c:	f001 fbe0 	bl	7640 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    5e80:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
	displayAndSound_IO = new PIO(_spiSettings, GPIO_SS_PIN, 3, 0x0000); // all 16 pins set as output
    5e84:	2008      	movs	r0, #8
    5e86:	f005 ffb3 	bl	bdf0 <operator new(unsigned int)>
    5e8a:	4680      	mov	r8, r0
    5e8c:	2303      	movs	r3, #3
    5e8e:	220e      	movs	r2, #14
    5e90:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    5e94:	9600      	str	r6, [sp, #0]
    5e96:	f001 fbd3 	bl	7640 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    5e9a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	outputReset(); // hardware immediate resets
    5e9e:	4620      	mov	r0, r4
    5ea0:	f7ff fe8e 	bl	5bc0 <Board_Sys80b::outputReset()>
	//delay(100);

	msg.outln(F("- Buttons init..."));
    5ea4:	495a      	ldr	r1, [pc, #360]	; (6010 <Board_Sys80b::begin()+0x258>)
    5ea6:	4628      	mov	r0, r5
    5ea8:	f000 fad2 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	nextButton = new Bounce(NEXTB_PIN, DEBOUNCE_T);
    5eac:	2010      	movs	r0, #16
    5eae:	f005 ff9f 	bl	bdf0 <operator new(unsigned int)>
    5eb2:	4680      	mov	r8, r0
    5eb4:	2264      	movs	r2, #100	; 0x64
    5eb6:	2103      	movs	r1, #3
    5eb8:	f004 f89e 	bl	9ff8 <Bounce::Bounce(unsigned char, unsigned long)>
    5ebc:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
    5ec0:	2010      	movs	r0, #16
    5ec2:	f005 ff95 	bl	bdf0 <operator new(unsigned int)>
    5ec6:	4680      	mov	r8, r0
    5ec8:	2264      	movs	r2, #100	; 0x64
    5eca:	2104      	movs	r1, #4
    5ecc:	f004 f894 	bl	9ff8 <Bounce::Bounce(unsigned char, unsigned long)>
    5ed0:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
    5ed4:	2010      	movs	r0, #16
    5ed6:	f005 ff8b 	bl	bdf0 <operator new(unsigned int)>
    5eda:	4680      	mov	r8, r0
    5edc:	2264      	movs	r2, #100	; 0x64
    5ede:	2105      	movs	r1, #5
    5ee0:	f004 f88a 	bl	9ff8 <Bounce::Bounce(unsigned char, unsigned long)>
	//delay(100);

	msg.out(F("- NVRAM init... "));
    5ee4:	494b      	ldr	r1, [pc, #300]	; (6014 <Board_Sys80b::begin()+0x25c>)
	//delay(100);

	msg.outln(F("- Buttons init..."));
	nextButton = new Bounce(NEXTB_PIN, DEBOUNCE_T);
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
    5ee6:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
	//delay(100);

	msg.out(F("- NVRAM init... "));
    5eea:	4628      	mov	r0, r5
    5eec:	f000 fc1c 	bl	6728 <Msg::out(__FlashStringHelper const*)>
	NVData = new NVData_class();
    5ef0:	2064      	movs	r0, #100	; 0x64
    5ef2:	f005 ff7d 	bl	bdf0 <operator new(unsigned int)>
    5ef6:	4680      	mov	r8, r0
    5ef8:	f000 fc6e 	bl	67d8 <NVData_class::NVData_class()>
	NVData->immediateWriteMode = false;
	//NVData->begin(NVData->EEPROM_NVD, 128, SD_SS_PIN);
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
    5efc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
	//delay(100);

	msg.out(F("- NVRAM init... "));
	NVData = new NVData_class();
    5f00:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
	NVData->immediateWriteMode = false;
    5f04:	f888 602d 	strb.w	r6, [r8, #45]	; 0x2d
	//NVData->begin(NVData->EEPROM_NVD, 128, SD_SS_PIN);
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d06c      	beq.n	5fe6 <Board_Sys80b::begin()+0x22e>
    5f0c:	4643      	mov	r3, r8
	if (NVData->ready()) {
    5f0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    5f12:	2b00      	cmp	r3, #0
    5f14:	d060      	beq.n	5fd8 <Board_Sys80b::begin()+0x220>
		msg.outln(F("ok."));
    5f16:	4940      	ldr	r1, [pc, #256]	; (6018 <Board_Sys80b::begin()+0x260>)
    5f18:	4628      	mov	r0, r5
    5f1a:	f000 fa99 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
		msg.out(F("- Power On Counter "));
    5f1e:	493f      	ldr	r1, [pc, #252]	; (601c <Board_Sys80b::begin()+0x264>)
    5f20:	4628      	mov	r0, r5
    5f22:	f000 fc01 	bl	6728 <Msg::out(__FlashStringHelper const*)>
		msg.outln(_poc);
    5f26:	220a      	movs	r2, #10
    5f28:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    5f2c:	4628      	mov	r0, r5
    5f2e:	f000 fac1 	bl	64b4 <Msg::outln(unsigned long, int)>
		_poc = incrementPowerOnCounter();
    5f32:	4620      	mov	r0, r4
    5f34:	f7ff ff14 	bl	5d60 <Board_Sys80b::incrementPowerOnCounter()>
		msg.out(F("- New Power On Counter: "));
    5f38:	4939      	ldr	r1, [pc, #228]	; (6020 <Board_Sys80b::begin()+0x268>)
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
	if (NVData->ready()) {
		msg.outln(F("ok."));
		msg.out(F("- Power On Counter "));
		msg.outln(_poc);
		_poc = incrementPowerOnCounter();
    5f3a:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
		msg.out(F("- New Power On Counter: "));
    5f3e:	4628      	mov	r0, r5
    5f40:	f000 fbf2 	bl	6728 <Msg::out(__FlashStringHelper const*)>
		msg.outln(_poc);
    5f44:	220a      	movs	r2, #10
    5f46:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    5f4a:	4628      	mov	r0, r5
    5f4c:	f000 fab2 	bl	64b4 <Msg::outln(unsigned long, int)>
	else {
		msg.warn(F("Troubles with NV Data initizlization: NV not available!"), CLASS_NAME, hdr);
	}
	//delay(100);

	msg.outln(F("- Led grid init..."));
    5f50:	4934      	ldr	r1, [pc, #208]	; (6024 <Board_Sys80b::begin()+0x26c>)
    5f52:	4628      	mov	r0, r5
    5f54:	f000 fa7c 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
	delay(50);
    5f58:	2032      	movs	r0, #50	; 0x32
    5f5a:	f004 fa9f 	bl	a49c <delay>
	ledGrid = new Led8x8(_spiSettings, LG_SS_PIN);
    5f5e:	2010      	movs	r0, #16
    5f60:	f005 ff46 	bl	bdf0 <operator new(unsigned int)>
    5f64:	4606      	mov	r6, r0
    5f66:	220f      	movs	r2, #15
    5f68:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    5f6c:	f000 f99a 	bl	62a4 <Led8x8::Led8x8(SPISettings*, int)>
    5f70:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	delay(10);
    5f74:	200a      	movs	r0, #10
    5f76:	f004 fa91 	bl	a49c <delay>
	ledGrid->setIntensity(1);
    5f7a:	2101      	movs	r1, #1
    5f7c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    5f80:	f000 f9b8 	bl	62f4 <Led8x8::setIntensity(unsigned char)>
	ledGrid->enabled = true;
    5f84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    5f88:	2201      	movs	r2, #1
	//lcd->clear();
	//lcd->print(F("PRB rev."));
	//lcd->println(_revision);
	//lcd->print(F("SW rev."));
	//lcd->print(BOARD_SW_REV);
	msg.clr();
    5f8a:	4628      	mov	r0, r5
	msg.outln(F("- Led grid init..."));
	delay(50);
	ledGrid = new Led8x8(_spiSettings, LG_SS_PIN);
	delay(10);
	ledGrid->setIntensity(1);
	ledGrid->enabled = true;
    5f8c:	701a      	strb	r2, [r3, #0]
	//lcd->clear();
	//lcd->print(F("PRB rev."));
	//lcd->println(_revision);
	//lcd->print(F("SW rev."));
	//lcd->print(BOARD_SW_REV);
	msg.clr();
    5f8e:	f000 f9eb 	bl	6368 <Msg::clr()>
	msg.out(F("PRB rev."));
    5f92:	4628      	mov	r0, r5
    5f94:	4924      	ldr	r1, [pc, #144]	; (6028 <Board_Sys80b::begin()+0x270>)
    5f96:	f000 fbc7 	bl	6728 <Msg::out(__FlashStringHelper const*)>
	msg.outln(_revision);
    5f9a:	220a      	movs	r2, #10
    5f9c:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    5fa0:	4628      	mov	r0, r5
    5fa2:	f000 fa87 	bl	64b4 <Msg::outln(unsigned long, int)>
	msg.out(F("SW rev."));
    5fa6:	4628      	mov	r0, r5
    5fa8:	4920      	ldr	r1, [pc, #128]	; (602c <Board_Sys80b::begin()+0x274>)
    5faa:	f000 fbbd 	bl	6728 <Msg::out(__FlashStringHelper const*)>
	msg.outln(BOARD_SW_REV);
    5fae:	4628      	mov	r0, r5
    5fb0:	491f      	ldr	r1, [pc, #124]	; (6030 <Board_Sys80b::begin()+0x278>)
    5fb2:	f000 fa4d 	bl	6450 <Msg::outln(__FlashStringHelper const*)>
		lcd = &lcdispl; lcdOutputEnabled = true; 
	}
	void enableLCDOutput(); // to call only after enableLCDOutput(LiquidCrystalFast*)
	inline void enableLCDOutput(LiquidCrystalFast* lcdispl) { 
		lcd = lcdispl; lcdOutputEnabled = true; }
	inline void disableLCDOutput() { lcdOutputEnabled = false; }
    5fb6:	2300      	movs	r3, #0
	msg.disableLCDOutput();
	//delay(100);

	return true;
}
    5fb8:	4648      	mov	r0, r9
    5fba:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
    5fbe:	b003      	add	sp, #12
    5fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	//delay(100);

	// SD init
	msg.outln(F("- SD init..."));
	if (!SD.begin(SD_SS_PIN)) {
		msg.err(F("can't init SD card!"), CLASS_NAME, hdr);
    5fc4:	4628      	mov	r0, r5
    5fc6:	6822      	ldr	r2, [r4, #0]
    5fc8:	4b1a      	ldr	r3, [pc, #104]	; (6034 <Board_Sys80b::begin()+0x27c>)
    5fca:	491b      	ldr	r1, [pc, #108]	; (6038 <Board_Sys80b::begin()+0x280>)
    5fcc:	f000 fb48 	bl	6660 <Msg::err(__FlashStringHelper const*, char const*, char const*)>
	msg.outln(BOARD_SW_REV);
	msg.disableLCDOutput();
	//delay(100);

	return true;
}
    5fd0:	4648      	mov	r0, r9
    5fd2:	b003      	add	sp, #12
    5fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		_poc = incrementPowerOnCounter();
		msg.out(F("- New Power On Counter: "));
		msg.outln(_poc);
	}
	else {
		msg.warn(F("Troubles with NV Data initizlization: NV not available!"), CLASS_NAME, hdr);
    5fd8:	4b16      	ldr	r3, [pc, #88]	; (6034 <Board_Sys80b::begin()+0x27c>)
    5fda:	4628      	mov	r0, r5
    5fdc:	6822      	ldr	r2, [r4, #0]
    5fde:	4917      	ldr	r1, [pc, #92]	; (603c <Board_Sys80b::begin()+0x284>)
    5fe0:	f000 fb02 	bl	65e8 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>
    5fe4:	e7b4      	b.n	5f50 <Board_Sys80b::begin()+0x198>

	msg.out(F("- NVRAM init... "));
	NVData = new NVData_class();
	NVData->immediateWriteMode = false;
	//NVData->begin(NVData->EEPROM_NVD, 128, SD_SS_PIN);
	if (_revision == 0) NVData->begin(NVData->SDFILE_NVD, 128, SD_SS_PIN);
    5fe6:	230a      	movs	r3, #10
    5fe8:	4639      	mov	r1, r7
    5fea:	4640      	mov	r0, r8
    5fec:	2280      	movs	r2, #128	; 0x80
    5fee:	f000 fce9 	bl	69c4 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)>
    5ff2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5ff6:	e78a      	b.n	5f0e <Board_Sys80b::begin()+0x156>
    5ff8:	200013ac 	.word	0x200013ac
    5ffc:	200013c0 	.word	0x200013c0
    6000:	20001e1c 	.word	0x20001e1c
    6004:	200013d0 	.word	0x200013d0
    6008:	2000298c 	.word	0x2000298c
    600c:	200013fc 	.word	0x200013fc
    6010:	2000140c 	.word	0x2000140c
    6014:	20001420 	.word	0x20001420
    6018:	20001378 	.word	0x20001378
    601c:	20001434 	.word	0x20001434
    6020:	20001448 	.word	0x20001448
    6024:	2000149c 	.word	0x2000149c
    6028:	20000b18 	.word	0x20000b18
    602c:	200014b0 	.word	0x200014b0
    6030:	200014b8 	.word	0x200014b8
    6034:	200013e0 	.word	0x200013e0
    6038:	200013e8 	.word	0x200013e8
    603c:	20001464 	.word	0x20001464

00006040 <Board_Sys80b::getSettingByte(unsigned char)>:
	msg.outln(F("ok."));
	if (immediateUpdate) NVData->update();
}

byte Board_Sys80b::getSettingByte(byte addr) {
	if (addr > 3) return 0;
    6040:	2903      	cmp	r1, #3
    6042:	d901      	bls.n	6048 <Board_Sys80b::getSettingByte(unsigned char)+0x8>
	return NVData->readByte(SETTINGS_ADR + addr);
}
    6044:	2000      	movs	r0, #0
    6046:	4770      	bx	lr
	if (immediateUpdate) NVData->update();
}

byte Board_Sys80b::getSettingByte(byte addr) {
	if (addr > 3) return 0;
	return NVData->readByte(SETTINGS_ADR + addr);
    6048:	3164      	adds	r1, #100	; 0x64
    604a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    604e:	f000 bdc5 	b.w	6bdc <NVData_class::readByte(unsigned short)>
    6052:	bf00      	nop

00006054 <Board_Sys80b::getSettingBit(unsigned char)>:
}

byte Board_Sys80b::getSettingBit(byte bitPos) {
    6054:	b510      	push	{r4, lr}
    6056:	460c      	mov	r4, r1
	bitPos &= 0x1fu; // = 0..31
	byte _byte = bitPos >> 3;
	byte _bit = bitPos & 7u;
	return (NVData->readByte(_byte) & (1 << _bit)) ? 1 : 0;
    6058:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    605c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
    6060:	f004 0407 	and.w	r4, r4, #7
    6064:	f000 fdba 	bl	6bdc <NVData_class::readByte(unsigned short)>
    6068:	4120      	asrs	r0, r4
}
    606a:	f000 0001 	and.w	r0, r0, #1
    606e:	bd10      	pop	{r4, pc}

00006070 <Led8x8::_writeCmd(unsigned char, unsigned char)>:
			_writeCmd(++i, 0);
		}
	}
}

void Led8x8::_writeCmd(byte adr, byte data) {
    6070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    6074:	4c57      	ldr	r4, [pc, #348]	; (61d4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x164>)
    6076:	4606      	mov	r6, r0
	SPI.beginTransaction(*_spis);
    6078:	6843      	ldr	r3, [r0, #4]
			_writeCmd(++i, 0);
		}
	}
}

void Led8x8::_writeCmd(byte adr, byte data) {
    607a:	4688      	mov	r8, r1
    607c:	7ce0      	ldrb	r0, [r4, #19]
    607e:	4617      	mov	r7, r2
    6080:	e893 1002 	ldmia.w	r3, {r1, ip}
    6084:	2800      	cmp	r0, #0
    6086:	d02b      	beq.n	60e0 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x70>
			__disable_irq();
    6088:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    608a:	7ce5      	ldrb	r5, [r4, #19]
    608c:	07ea      	lsls	r2, r5, #31
    608e:	462b      	mov	r3, r5
    6090:	d508      	bpl.n	60a4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x34>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6092:	f8df e170 	ldr.w	lr, [pc, #368]	; 6204 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x194>
    6096:	6962      	ldr	r2, [r4, #20]
    6098:	f8de 0000 	ldr.w	r0, [lr]
    609c:	4010      	ands	r0, r2
    609e:	62a0      	str	r0, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    60a0:	f8ce 0000 	str.w	r0, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    60a4:	07ad      	lsls	r5, r5, #30
    60a6:	d506      	bpl.n	60b6 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x46>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    60a8:	4d4b      	ldr	r5, [pc, #300]	; (61d8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x168>)
    60aa:	69a2      	ldr	r2, [r4, #24]
    60ac:	6828      	ldr	r0, [r5, #0]
    60ae:	7ce3      	ldrb	r3, [r4, #19]
    60b0:	4010      	ands	r0, r2
    60b2:	62e0      	str	r0, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    60b4:	6028      	str	r0, [r5, #0]
			}
			if (interruptMasksUsed & 0x04) {
    60b6:	0758      	lsls	r0, r3, #29
    60b8:	d506      	bpl.n	60c8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    60ba:	4d48      	ldr	r5, [pc, #288]	; (61dc <Led8x8::_writeCmd(unsigned char, unsigned char)+0x16c>)
    60bc:	69e2      	ldr	r2, [r4, #28]
    60be:	6828      	ldr	r0, [r5, #0]
    60c0:	7ce3      	ldrb	r3, [r4, #19]
    60c2:	4010      	ands	r0, r2
    60c4:	6320      	str	r0, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    60c6:	6028      	str	r0, [r5, #0]
			}
			if (interruptMasksUsed & 0x08) {
    60c8:	071a      	lsls	r2, r3, #28
    60ca:	d506      	bpl.n	60da <Led8x8::_writeCmd(unsigned char, unsigned char)+0x6a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    60cc:	4d44      	ldr	r5, [pc, #272]	; (61e0 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x170>)
    60ce:	6a22      	ldr	r2, [r4, #32]
    60d0:	6828      	ldr	r0, [r5, #0]
    60d2:	7ce3      	ldrb	r3, [r4, #19]
    60d4:	4010      	ands	r0, r2
    60d6:	6360      	str	r0, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    60d8:	6028      	str	r0, [r5, #0]
			}
			if (interruptMasksUsed & 0x10) {
    60da:	06db      	lsls	r3, r3, #27
    60dc:	d467      	bmi.n	61ae <Led8x8::_writeCmd(unsigned char, unsigned char)+0x13e>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    60de:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    60e0:	68a3      	ldr	r3, [r4, #8]
    60e2:	483c      	ldr	r0, [pc, #240]	; (61d4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x164>)
    60e4:	428b      	cmp	r3, r1
    60e6:	d069      	beq.n	61bc <Led8x8::_writeCmd(unsigned char, unsigned char)+0x14c>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    60e8:	4b3e      	ldr	r3, [pc, #248]	; (61e4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x174>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    60ea:	4d3f      	ldr	r5, [pc, #252]	; (61e8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x178>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    60ec:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    60ee:	6081      	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    60f0:	f3c3 1001 	ubfx	r0, r3, #4, #2
    60f4:	f3c3 6382 	ubfx	r3, r3, #26, #3
    60f8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    60fc:	3301      	adds	r3, #1
    60fe:	fbb0 f0f3 	udiv	r0, r0, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6102:	2900      	cmp	r1, #0
    6104:	d051      	beq.n	61aa <Led8x8::_writeCmd(unsigned char, unsigned char)+0x13a>
    6106:	fbb0 f3f1 	udiv	r3, r0, r1

			if (d && clkhz/d > _clock) d++;
    610a:	b14b      	cbz	r3, 6120 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
    610c:	fbb0 f0f3 	udiv	r0, r0, r3
    6110:	4288      	cmp	r0, r1
    6112:	bf88      	it	hi
    6114:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    6116:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    611a:	d351      	bcc.n	61c0 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x150>
    611c:	f647 73ff 	movw	r3, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    6120:	60e3      	str	r3, [r4, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6122:	6825      	ldr	r5, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    6124:	2100      	movs	r1, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6126:	2003      	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    6128:	f04f 0e01 	mov.w	lr, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    612c:	6129      	str	r1, [r5, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    612e:	6268      	str	r0, [r5, #36]	; 0x24
		port().CCR = _ccr;
    6130:	642b      	str	r3, [r5, #64]	; 0x40
	SPI.beginTransaction(*_spis);
	digitalWrite(_ss_pin, LOW);
    6132:	7a30      	ldrb	r0, [r6, #8]
		port().TCR = settings.tcr;
    6134:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6138:	f8c5 e010 	str.w	lr, [r5, #16]
    613c:	f004 fa66 	bl	a60c <digitalWrite>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6140:	f008 020f 	and.w	r2, r8, #15
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6144:	6823      	ldr	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6146:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6148:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    614a:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
    614e:	d0fb      	beq.n	6148 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xd8>
    6150:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6152:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6154:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6156:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    615a:	d0fb      	beq.n	6154 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xe4>
	SPI.transfer(adr & 0xf);
	SPI.transfer(data);
	digitalWrite(_ss_pin, HIGH);
    615c:	2101      	movs	r1, #1
    615e:	7a30      	ldrb	r0, [r6, #8]
    6160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6162:	f004 fa53 	bl	a60c <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    6166:	7ce3      	ldrb	r3, [r4, #19]
    6168:	491a      	ldr	r1, [pc, #104]	; (61d4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x164>)
    616a:	461a      	mov	r2, r3
    616c:	b1db      	cbz	r3, 61a6 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x136>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    616e:	07de      	lsls	r6, r3, #31
    6170:	d502      	bpl.n	6178 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x108>
    6172:	6a88      	ldr	r0, [r1, #40]	; 0x28
    6174:	491d      	ldr	r1, [pc, #116]	; (61ec <Led8x8::_writeCmd(unsigned char, unsigned char)+0x17c>)
    6176:	6008      	str	r0, [r1, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6178:	079d      	lsls	r5, r3, #30
    617a:	d503      	bpl.n	6184 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x114>
    617c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    617e:	4b1c      	ldr	r3, [pc, #112]	; (61f0 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x180>)
    6180:	7ce2      	ldrb	r2, [r4, #19]
    6182:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6184:	0750      	lsls	r0, r2, #29
    6186:	d503      	bpl.n	6190 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x120>
    6188:	6b21      	ldr	r1, [r4, #48]	; 0x30
    618a:	4b1a      	ldr	r3, [pc, #104]	; (61f4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x184>)
    618c:	7ce2      	ldrb	r2, [r4, #19]
    618e:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6190:	0711      	lsls	r1, r2, #28
    6192:	d503      	bpl.n	619c <Led8x8::_writeCmd(unsigned char, unsigned char)+0x12c>
    6194:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6196:	4b18      	ldr	r3, [pc, #96]	; (61f8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x188>)
    6198:	7ce2      	ldrb	r2, [r4, #19]
    619a:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    619c:	06d3      	lsls	r3, r2, #27
    619e:	d502      	bpl.n	61a6 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x136>
    61a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    61a2:	4b16      	ldr	r3, [pc, #88]	; (61fc <Led8x8::_writeCmd(unsigned char, unsigned char)+0x18c>)
    61a4:	601a      	str	r2, [r3, #0]
    61a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    61aa:	4603      	mov	r3, r0
    61ac:	e7ad      	b.n	610a <Led8x8::_writeCmd(unsigned char, unsigned char)+0x9a>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    61ae:	4814      	ldr	r0, [pc, #80]	; (6200 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x190>)
    61b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61b2:	6805      	ldr	r5, [r0, #0]
    61b4:	402b      	ands	r3, r5
    61b6:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    61b8:	6003      	str	r3, [r0, #0]
    61ba:	e790      	b.n	60de <Led8x8::_writeCmd(unsigned char, unsigned char)+0x6e>
    61bc:	68c3      	ldr	r3, [r0, #12]
    61be:	e7b0      	b.n	6122 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb2>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    61c0:	2b02      	cmp	r3, #2
    61c2:	d904      	bls.n	61ce <Led8x8::_writeCmd(unsigned char, unsigned char)+0x15e>
    61c4:	3b02      	subs	r3, #2
    61c6:	0859      	lsrs	r1, r3, #1
    61c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    61cc:	e7a8      	b.n	6120 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
    61ce:	2300      	movs	r3, #0
    61d0:	e7a6      	b.n	6120 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
    61d2:	bf00      	nop
    61d4:	20001e1c 	.word	0x20001e1c
    61d8:	e000e184 	.word	0xe000e184
    61dc:	e000e188 	.word	0xe000e188
    61e0:	e000e18c 	.word	0xe000e18c
    61e4:	400fc000 	.word	0x400fc000
    61e8:	200014c0 	.word	0x200014c0
    61ec:	e000e100 	.word	0xe000e100
    61f0:	e000e104 	.word	0xe000e104
    61f4:	e000e108 	.word	0xe000e108
    61f8:	e000e10c 	.word	0xe000e10c
    61fc:	e000e110 	.word	0xe000e110
    6200:	e000e190 	.word	0xe000e190
    6204:	e000e180 	.word	0xe000e180

00006208 <Led8x8::setRowByte(unsigned char, unsigned char)>:
	writeOptimization = true;
	clear();
}

// MSB on left
bool Led8x8::setRowByte(byte row, byte data) {
    6208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (enabled) {
    620a:	7807      	ldrb	r7, [r0, #0]
    620c:	b197      	cbz	r7, 6234 <Led8x8::setRowByte(unsigned char, unsigned char)+0x2c>
		byte v = revByte[data];
    620e:	4c0c      	ldr	r4, [pc, #48]	; (6240 <Led8x8::setRowByte(unsigned char, unsigned char)+0x38>)
		row &= 7;
    6210:	f001 0507 	and.w	r5, r1, #7
		if (writeOptimization && v == _row[row]) return false;
    6214:	7843      	ldrb	r3, [r0, #1]
}

// MSB on left
bool Led8x8::setRowByte(byte row, byte data) {
	if (enabled) {
		byte v = revByte[data];
    6216:	5ca6      	ldrb	r6, [r4, r2]
		row &= 7;
		if (writeOptimization && v == _row[row]) return false;
    6218:	b11b      	cbz	r3, 6222 <Led8x8::setRowByte(unsigned char, unsigned char)+0x1a>
    621a:	68c3      	ldr	r3, [r0, #12]
    621c:	5d5b      	ldrb	r3, [r3, r5]
    621e:	42b3      	cmp	r3, r6
    6220:	d00b      	beq.n	623a <Led8x8::setRowByte(unsigned char, unsigned char)+0x32>
    6222:	4604      	mov	r4, r0
		_writeCmd(row + 1, v);
    6224:	4632      	mov	r2, r6
    6226:	1c69      	adds	r1, r5, #1
    6228:	f7ff ff22 	bl	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
		_row[row] = v;
    622c:	68e3      	ldr	r3, [r4, #12]
    622e:	555e      	strb	r6, [r3, r5]
	}
	return true;
}
    6230:	4638      	mov	r0, r7
    6232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		row &= 7;
		if (writeOptimization && v == _row[row]) return false;
		_writeCmd(row + 1, v);
		_row[row] = v;
	}
	return true;
    6234:	2701      	movs	r7, #1
}
    6236:	4638      	mov	r0, r7
    6238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// MSB on left
bool Led8x8::setRowByte(byte row, byte data) {
	if (enabled) {
		byte v = revByte[data];
		row &= 7;
		if (writeOptimization && v == _row[row]) return false;
    623a:	2700      	movs	r7, #0
    623c:	e7f8      	b.n	6230 <Led8x8::setRowByte(unsigned char, unsigned char)+0x28>
    623e:	bf00      	nop
    6240:	6000165c 	.word	0x6000165c

00006244 <Led8x8::setRow(unsigned char, unsigned char)>:
	}
	return true;
}

// MSB on right
bool Led8x8::setRow(byte row, byte data) {
    6244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (enabled) {
    6246:	7807      	ldrb	r7, [r0, #0]
    6248:	b187      	cbz	r7, 626c <Led8x8::setRow(unsigned char, unsigned char)+0x28>
		row &= 7;
		if (writeOptimization && data == _row[row]) return false;
    624a:	7843      	ldrb	r3, [r0, #1]
}

// MSB on right
bool Led8x8::setRow(byte row, byte data) {
	if (enabled) {
		row &= 7;
    624c:	f001 0507 	and.w	r5, r1, #7
		if (writeOptimization && data == _row[row]) return false;
    6250:	b11b      	cbz	r3, 625a <Led8x8::setRow(unsigned char, unsigned char)+0x16>
    6252:	68c3      	ldr	r3, [r0, #12]
    6254:	5d5b      	ldrb	r3, [r3, r5]
    6256:	4293      	cmp	r3, r2
    6258:	d00b      	beq.n	6272 <Led8x8::setRow(unsigned char, unsigned char)+0x2e>
    625a:	4604      	mov	r4, r0
		_writeCmd(row + 1, data);
    625c:	1c69      	adds	r1, r5, #1
    625e:	4616      	mov	r6, r2
    6260:	f7ff ff06 	bl	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
		_row[row] = data;
    6264:	68e3      	ldr	r3, [r4, #12]
    6266:	555e      	strb	r6, [r3, r5]
	}
	return true;
}
    6268:	4638      	mov	r0, r7
    626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		row &= 7;
		if (writeOptimization && data == _row[row]) return false;
		_writeCmd(row + 1, data);
		_row[row] = data;
	}
	return true;
    626c:	2701      	movs	r7, #1
}
    626e:	4638      	mov	r0, r7
    6270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

// MSB on right
bool Led8x8::setRow(byte row, byte data) {
	if (enabled) {
		row &= 7;
		if (writeOptimization && data == _row[row]) return false;
    6272:	2700      	movs	r7, #0
    6274:	e7f8      	b.n	6268 <Led8x8::setRow(unsigned char, unsigned char)+0x24>
    6276:	bf00      	nop

00006278 <Led8x8::clear() [clone .part.3]>:
		_row[row] = data;
	}
	return true;
}

void Led8x8::clear() {
    6278:	2300      	movs	r3, #0
    627a:	b570      	push	{r4, r5, r6, lr}
    627c:	4605      	mov	r5, r0
	if (enabled) {
		byte i = 0;
		while (i < 8) {
			_row[i] = 0;
    627e:	461e      	mov	r6, r3
			_writeCmd(++i, 0);
    6280:	1c5c      	adds	r4, r3, #1

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) {
			_row[i] = 0;
    6282:	68e9      	ldr	r1, [r5, #12]
			_writeCmd(++i, 0);
    6284:	2200      	movs	r2, #0
    6286:	4628      	mov	r0, r5

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) {
			_row[i] = 0;
    6288:	54ce      	strb	r6, [r1, r3]
			_writeCmd(++i, 0);
    628a:	b2e1      	uxtb	r1, r4
    628c:	f7ff fef0 	bl	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
}

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) {
    6290:	2c08      	cmp	r4, #8
    6292:	4623      	mov	r3, r4
    6294:	d1f4      	bne.n	6280 <Led8x8::clear() [clone .part.3]+0x8>
			_row[i] = 0;
			_writeCmd(++i, 0);
		}
	}
}
    6296:	bd70      	pop	{r4, r5, r6, pc}

00006298 <Led8x8::clear()>:
	}
	return true;
}

void Led8x8::clear() {
	if (enabled) {
    6298:	7803      	ldrb	r3, [r0, #0]
    629a:	b10b      	cbz	r3, 62a0 <Led8x8::clear()+0x8>
    629c:	f7ff bfec 	b.w	6278 <Led8x8::clear() [clone .part.3]>
    62a0:	4770      	bx	lr
    62a2:	bf00      	nop

000062a4 <Led8x8::Led8x8(SPISettings*, int)>:
	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
    62a4:	b510      	push	{r4, lr}
    62a6:	4604      	mov	r4, r0
	_spis = ss;
	_ss_pin = pin;
	_row = new byte[8];
    62a8:	2008      	movs	r0, #8
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
	_spis = ss;
    62aa:	6061      	str	r1, [r4, #4]
	_ss_pin = pin;
    62ac:	60a2      	str	r2, [r4, #8]
	_row = new byte[8];
    62ae:	f005 fda1 	bl	bdf4 <operator new[](unsigned int)>
	for (int i = 0; i < 8; i++) _row[i] = 0;
    62b2:	2300      	movs	r3, #0
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
	_spis = ss;
	_ss_pin = pin;
	_row = new byte[8];
    62b4:	4602      	mov	r2, r0
    62b6:	60e0      	str	r0, [r4, #12]
	for (int i = 0; i < 8; i++) _row[i] = 0;
    62b8:	4619      	mov	r1, r3
    62ba:	e000      	b.n	62be <Led8x8::Led8x8(SPISettings*, int)+0x1a>
    62bc:	68e2      	ldr	r2, [r4, #12]
    62be:	54d1      	strb	r1, [r2, r3]
    62c0:	3301      	adds	r3, #1
    62c2:	2b08      	cmp	r3, #8
    62c4:	d1fa      	bne.n	62bc <Led8x8::Led8x8(SPISettings*, int)+0x18>
	_writeCmd(CMD_DECODE, 0); // Decode state off
    62c6:	4620      	mov	r0, r4
    62c8:	2200      	movs	r2, #0
    62ca:	2109      	movs	r1, #9
    62cc:	f7ff fed0 	bl	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
    62d0:	4620      	mov	r0, r4
    62d2:	2207      	movs	r2, #7
    62d4:	210b      	movs	r1, #11
    62d6:	f7ff fecb 	bl	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	digitalWrite(_ss_pin, HIGH);
	SPI.endTransaction();
}

void Led8x8::shutDownMode(bool b) { 
	_writeCmd(CMD_SHUTDWN, b ? 0 : 1); 
    62da:	2201      	movs	r2, #1
    62dc:	210c      	movs	r1, #12
    62de:	4620      	mov	r0, r4
    62e0:	f7ff fec6 	bl	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	_row = new byte[8];
	for (int i = 0; i < 8; i++) _row[i] = 0;
	_writeCmd(CMD_DECODE, 0); // Decode state off
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
	shutDownMode(false); // Shutdown mode off
	enabled = true;
    62e4:	2301      	movs	r3, #1
    62e6:	4620      	mov	r0, r4
    62e8:	7023      	strb	r3, [r4, #0]
	writeOptimization = true;
    62ea:	7063      	strb	r3, [r4, #1]
    62ec:	f7ff ffc4 	bl	6278 <Led8x8::clear() [clone .part.3]>
	clear();
}
    62f0:	4620      	mov	r0, r4
    62f2:	bd10      	pop	{r4, pc}

000062f4 <Led8x8::setIntensity(unsigned char)>:
void Led8x8::shutDownMode(bool b) { 
	_writeCmd(CMD_SHUTDWN, b ? 0 : 1); 
}

void Led8x8::setIntensity(byte i) { 
	_writeCmd(CMD_INTNSTY, i & 0xf); 
    62f4:	f001 020f 	and.w	r2, r1, #15
    62f8:	210a      	movs	r1, #10
    62fa:	f7ff beb9 	b.w	6070 <Led8x8::_writeCmd(unsigned char, unsigned char)>
    62fe:	bf00      	nop

00006300 <Msg::Msg()>:
//	LiquidCrystalFast* lcdpt = nullptr;
//	bool lcdOutputEnabled = false;
//	bool serialOutputEnabled = false;
//}

Msg::Msg() {
    6300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6302:	4604      	mov	r4, r0
    6304:	4b13      	ldr	r3, [pc, #76]	; (6354 <Msg::Msg()+0x54>)
    6306:	2100      	movs	r1, #0
    6308:	4d13      	ldr	r5, [pc, #76]	; (6358 <Msg::Msg()+0x58>)
    630a:	2264      	movs	r2, #100	; 0x64
    630c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    6310:	60a3      	str	r3, [r4, #8]
    6312:	4812      	ldr	r0, [pc, #72]	; (635c <Msg::Msg()+0x5c>)
    6314:	4b12      	ldr	r3, [pc, #72]	; (6360 <Msg::Msg()+0x60>)
    6316:	4f13      	ldr	r7, [pc, #76]	; (6364 <Msg::Msg()+0x64>)
    6318:	6065      	str	r5, [r4, #4]
	lcd = nullptr;
    631a:	460d      	mov	r5, r1
//	LiquidCrystalFast* lcdpt = nullptr;
//	bool lcdOutputEnabled = false;
//	bool serialOutputEnabled = false;
//}

Msg::Msg() {
    631c:	61a3      	str	r3, [r4, #24]
    631e:	6122      	str	r2, [r4, #16]
    6320:	6020      	str	r0, [r4, #0]
    6322:	4630      	mov	r0, r6
    6324:	60e7      	str	r7, [r4, #12]
    6326:	f005 fea9 	bl	c07c <String::String(char const*)>
    632a:	4629      	mov	r1, r5
    632c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6330:	f005 fea4 	bl	c07c <String::String(char const*)>
	lcd = nullptr;
	lcdOutputEnabled = false;
	serialOutputEnabled = false;
	logFileEnabled = false;
	normalOutputToLog = false;
	logFileName = DEF_LOGFILE;
    6334:	4630      	mov	r0, r6
//	bool lcdOutputEnabled = false;
//	bool serialOutputEnabled = false;
//}

Msg::Msg() {
	lcd = nullptr;
    6336:	6265      	str	r5, [r4, #36]	; 0x24
	lcdOutputEnabled = false;
    6338:	77a5      	strb	r5, [r4, #30]
	serialOutputEnabled = false;
    633a:	77e5      	strb	r5, [r4, #31]
	logFileEnabled = false;
    633c:	f884 5020 	strb.w	r5, [r4, #32]
	normalOutputToLog = false;
    6340:	7525      	strb	r5, [r4, #20]
	logFileName = DEF_LOGFILE;
    6342:	68e1      	ldr	r1, [r4, #12]
    6344:	f005 ff48 	bl	c1d8 <String::operator=(char const*)>
	//delay = 0; // delay disabled
	lcd = nullptr;
	mdelay = DEF_DELAY;
    6348:	6923      	ldr	r3, [r4, #16]
	serialOutputEnabled = false;
	logFileEnabled = false;
	normalOutputToLog = false;
	logFileName = DEF_LOGFILE;
	//delay = 0; // delay disabled
	lcd = nullptr;
    634a:	6265      	str	r5, [r4, #36]	; 0x24
	mdelay = DEF_DELAY;
}
    634c:	4620      	mov	r0, r4
	logFileEnabled = false;
	normalOutputToLog = false;
	logFileName = DEF_LOGFILE;
	//delay = 0; // delay disabled
	lcd = nullptr;
	mdelay = DEF_DELAY;
    634e:	83a3      	strh	r3, [r4, #28]
}
    6350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6352:	bf00      	nop
    6354:	200014e0 	.word	0x200014e0
    6358:	200014d4 	.word	0x200014d4
    635c:	200014d0 	.word	0x200014d0
    6360:	200014e8 	.word	0x200014e8
    6364:	200014ec 	.word	0x200014ec

00006368 <Msg::clr()>:
	if (lcd != nullptr) lcdOutputEnabled = true;
	else warn(F("Can't enable undefined LCD device!"), CLASS_NAME);
}

void Msg::clr() {
	if (lcdOutputEnabled) {
    6368:	7f83      	ldrb	r3, [r0, #30]
void Msg::enableLCDOutput() { 
	if (lcd != nullptr) lcdOutputEnabled = true;
	else warn(F("Can't enable undefined LCD device!"), CLASS_NAME);
}

void Msg::clr() {
    636a:	b510      	push	{r4, lr}
    636c:	4604      	mov	r4, r0
	if (lcdOutputEnabled) {
    636e:	b983      	cbnz	r3, 6392 <Msg::clr()+0x2a>
		lcd->clear();
		lcd->setCursor(0, 0);
	}
	if (serialOutputEnabled) Serial.println(F("---"));
    6370:	7fe3      	ldrb	r3, [r4, #31]
    6372:	b933      	cbnz	r3, 6382 <Msg::clr()+0x1a>
	if (mdelay) delay(mdelay);
    6374:	8ba0      	ldrh	r0, [r4, #28]
    6376:	b900      	cbnz	r0, 637a <Msg::clr()+0x12>
    6378:	bd10      	pop	{r4, pc}
}
    637a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (lcdOutputEnabled) {
		lcd->clear();
		lcd->setCursor(0, 0);
	}
	if (serialOutputEnabled) Serial.println(F("---"));
	if (mdelay) delay(mdelay);
    637e:	f004 b88d 	b.w	a49c <delay>
    6382:	2103      	movs	r1, #3
    6384:	4807      	ldr	r0, [pc, #28]	; (63a4 <Msg::clr()+0x3c>)
    6386:	f005 fbb5 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    638a:	4807      	ldr	r0, [pc, #28]	; (63a8 <Msg::clr()+0x40>)
    638c:	f005 fd74 	bl	be78 <Print::println()>
    6390:	e7f0      	b.n	6374 <Msg::clr()+0xc>
	else warn(F("Can't enable undefined LCD device!"), CLASS_NAME);
}

void Msg::clr() {
	if (lcdOutputEnabled) {
		lcd->clear();
    6392:	6a40      	ldr	r0, [r0, #36]	; 0x24
    6394:	f003 fc32 	bl	9bfc <LiquidCrystalFast::clear()>
		lcd->setCursor(0, 0);
    6398:	2200      	movs	r2, #0
    639a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    639c:	4611      	mov	r1, r2
    639e:	f003 fbf1 	bl	9b84 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
    63a2:	e7e5      	b.n	6370 <Msg::clr()+0x8>
    63a4:	200014f4 	.word	0x200014f4
    63a8:	20001ea4 	.word	0x20001ea4

000063ac <Msg::_buildFullMsg(String&, String&, char const*, char const*)>:
	buff = String(freeMemory()) + " bytes free.";
	outln(buff); 
	log(buff);
}

void Msg::_buildFullMsg(String& destStr, String& msg, const char* className, const char* funcName) {
    63ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63b0:	460c      	mov	r4, r1
    63b2:	461d      	mov	r5, r3
    63b4:	4680      	mov	r8, r0
	destStr = "";
    63b6:	4911      	ldr	r1, [pc, #68]	; (63fc <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x50>)
    63b8:	4620      	mov	r0, r4
	buff = String(freeMemory()) + " bytes free.";
	outln(buff); 
	log(buff);
}

void Msg::_buildFullMsg(String& destStr, String& msg, const char* className, const char* funcName) {
    63ba:	4617      	mov	r7, r2
    63bc:	9e06      	ldr	r6, [sp, #24]
	destStr = "";
    63be:	f005 ff0b 	bl	c1d8 <String::operator=(char const*)>
	if (className != nullptr) {
    63c2:	b1ad      	cbz	r5, 63f0 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x44>
		destStr = className;
    63c4:	4629      	mov	r1, r5
    63c6:	4620      	mov	r0, r4
    63c8:	f005 ff06 	bl	c1d8 <String::operator=(char const*)>
		if (funcName != nullptr) {
    63cc:	b15e      	cbz	r6, 63e6 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x3a>
    63ce:	490c      	ldr	r1, [pc, #48]	; (6400 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x54>)
    63d0:	4620      	mov	r0, r4
    63d2:	f005 ff55 	bl	c280 <String::append(char const*)>
    63d6:	4631      	mov	r1, r6
    63d8:	4620      	mov	r0, r4
    63da:	f005 ff51 	bl	c280 <String::append(char const*)>
    63de:	4909      	ldr	r1, [pc, #36]	; (6404 <Msg::_buildFullMsg(String&, String&, char const*, char const*)+0x58>)
    63e0:	4620      	mov	r0, r4
    63e2:	f005 ff4d 	bl	c280 <String::append(char const*)>
    63e6:	f8d8 1018 	ldr.w	r1, [r8, #24]
    63ea:	4620      	mov	r0, r4
    63ec:	f005 ff48 	bl	c280 <String::append(char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    63f0:	4639      	mov	r1, r7
    63f2:	4620      	mov	r0, r4
			destStr += "()";
		}
		destStr += separator;
	}
	destStr += msg;
}
    63f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63f8:	f005 bf3e 	b.w	c278 <String::append(String const&)>
    63fc:	200011b0 	.word	0x200011b0
    6400:	200014f8 	.word	0x200014f8
    6404:	20000990 	.word	0x20000990

00006408 <Msg::_writeLogLn(__FlashStringHelper const*)>:
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLogLn(const __FlashStringHelper* msg) {
    6408:	b530      	push	{r4, r5, lr}
    640a:	b089      	sub	sp, #36	; 0x24
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    640c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    640e:	2313      	movs	r3, #19
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLogLn(const __FlashStringHelper* msg) {
    6410:	460d      	mov	r5, r1
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6412:	4668      	mov	r0, sp
    6414:	490d      	ldr	r1, [pc, #52]	; (644c <Msg::_writeLogLn(__FlashStringHelper const*)+0x44>)
    6416:	f001 fc8f 	bl	7d38 <SDClass::open(char const*, unsigned char)>
	if (!f) return false;
    641a:	4668      	mov	r0, sp
    641c:	f001 fbda 	bl	7bd4 <File::operator bool()>
    6420:	4604      	mov	r4, r0
    6422:	b168      	cbz	r0, 6440 <Msg::_writeLogLn(__FlashStringHelper const*)+0x38>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6424:	4628      	mov	r0, r5
    6426:	f007 fa8b 	bl	d940 <strlen>
    642a:	4629      	mov	r1, r5
    642c:	4602      	mov	r2, r0
    642e:	4668      	mov	r0, sp
    6430:	f001 fb1e 	bl	7a70 <File::write(unsigned char const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    6434:	4668      	mov	r0, sp
    6436:	f005 fd1f 	bl	be78 <Print::println()>
	f.println(msg);
	f.close();
    643a:	4668      	mov	r0, sp
    643c:	f001 fbbc 	bl	7bb8 <File::close()>
	return true;
}

// appends log text-line
bool Msg::_writeLogLn(const __FlashStringHelper* msg) {
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6440:	4668      	mov	r0, sp
    6442:	f001 fba3 	bl	7b8c <File::~File()>
	if (!f) return false;
	f.println(msg);
	f.close();
	return true;
}
    6446:	4620      	mov	r0, r4
    6448:	b009      	add	sp, #36	; 0x24
    644a:	bd30      	pop	{r4, r5, pc}
    644c:	2000298c 	.word	0x2000298c

00006450 <Msg::outln(__FlashStringHelper const*)>:
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    6450:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(const __FlashStringHelper *txt) {
    6452:	b570      	push	{r4, r5, r6, lr}
    6454:	4604      	mov	r4, r0
    6456:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->println(txt);
    6458:	b9d3      	cbnz	r3, 6490 <Msg::outln(__FlashStringHelper const*)+0x40>
	if (serialOutputEnabled) Serial.println(txt);
    645a:	7fe3      	ldrb	r3, [r4, #31]
    645c:	b96b      	cbnz	r3, 647a <Msg::outln(__FlashStringHelper const*)+0x2a>
	if (normalOutputToLog) _writeLogLn(txt);
    645e:	7d23      	ldrb	r3, [r4, #20]
    6460:	b933      	cbnz	r3, 6470 <Msg::outln(__FlashStringHelper const*)+0x20>
	if (mdelay) delay(mdelay);
    6462:	8ba0      	ldrh	r0, [r4, #28]
    6464:	b900      	cbnz	r0, 6468 <Msg::outln(__FlashStringHelper const*)+0x18>
    6466:	bd70      	pop	{r4, r5, r6, pc}
}
    6468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
    646c:	f004 b816 	b.w	a49c <delay>
}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
    6470:	4629      	mov	r1, r5
    6472:	4620      	mov	r0, r4
    6474:	f7ff ffc8 	bl	6408 <Msg::_writeLogLn(__FlashStringHelper const*)>
    6478:	e7f3      	b.n	6462 <Msg::outln(__FlashStringHelper const*)+0x12>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    647a:	4628      	mov	r0, r5
    647c:	f007 fa60 	bl	d940 <strlen>
    6480:	4601      	mov	r1, r0
    6482:	4628      	mov	r0, r5
    6484:	f005 fb36 	bl	baf4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    6488:	4808      	ldr	r0, [pc, #32]	; (64ac <Msg::outln(__FlashStringHelper const*)+0x5c>)
    648a:	f005 fcf5 	bl	be78 <Print::println()>
    648e:	e7e6      	b.n	645e <Msg::outln(__FlashStringHelper const*)+0xe>
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    6490:	6a46      	ldr	r6, [r0, #36]	; 0x24
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6492:	4608      	mov	r0, r1
    6494:	f007 fa54 	bl	d940 <strlen>
    6498:	4629      	mov	r1, r5
    649a:	6833      	ldr	r3, [r6, #0]
    649c:	4602      	mov	r2, r0
    649e:	4630      	mov	r0, r6
    64a0:	685b      	ldr	r3, [r3, #4]
    64a2:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    64a4:	4630      	mov	r0, r6
    64a6:	f005 fce7 	bl	be78 <Print::println()>
    64aa:	e7d6      	b.n	645a <Msg::outln(__FlashStringHelper const*)+0xa>
    64ac:	20001ea4 	.word	0x20001ea4

000064b0 <Msg::outln(char const*)>:
    64b0:	f7ff bfce 	b.w	6450 <Msg::outln(__FlashStringHelper const*)>

000064b4 <Msg::outln(unsigned long, int)>:
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->println(n);
    64b4:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(uint32_t n, int base) {
    64b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    64b8:	4604      	mov	r4, r0
    64ba:	b085      	sub	sp, #20
    64bc:	4616      	mov	r6, r2
    64be:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->println(n);
    64c0:	bb03      	cbnz	r3, 6504 <Msg::outln(unsigned long, int)+0x50>
	if (serialOutputEnabled) Serial.println(n, base);
    64c2:	7fe3      	ldrb	r3, [r4, #31]
    64c4:	b9a3      	cbnz	r3, 64f0 <Msg::outln(unsigned long, int)+0x3c>
	if (normalOutputToLog) {
    64c6:	7d23      	ldrb	r3, [r4, #20]
    64c8:	b92b      	cbnz	r3, 64d6 <Msg::outln(unsigned long, int)+0x22>
		String st = String(n, base);
		_writeLogLn(st);
	}
	if (mdelay) delay(mdelay);
    64ca:	8ba0      	ldrh	r0, [r4, #28]
    64cc:	b108      	cbz	r0, 64d2 <Msg::outln(unsigned long, int)+0x1e>
    64ce:	f003 ffe5 	bl	a49c <delay>
}
    64d2:	b005      	add	sp, #20
    64d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

void Msg::outln(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->println(n);
	if (serialOutputEnabled) Serial.println(n, base);
	if (normalOutputToLog) {
		String st = String(n, base);
    64d6:	b2f2      	uxtb	r2, r6
    64d8:	4629      	mov	r1, r5
    64da:	4668      	mov	r0, sp
    64dc:	f005 fe3a 	bl	c154 <String::String(unsigned long, unsigned char)>
	bool _writeLog(const char* txt);
	bool _writeLog(const __FlashStringHelper* txt);
	inline bool _writeLog(String& txt) { return _writeLog(txt.c_str()); }
	bool _writeLogLn(const char* txt);
	bool _writeLogLn(const __FlashStringHelper* txt);
	inline bool _writeLogLn(String& txt) { return _writeLogLn(txt.c_str());	}
    64e0:	9900      	ldr	r1, [sp, #0]
    64e2:	4620      	mov	r0, r4
    64e4:	f7ff ff90 	bl	6408 <Msg::_writeLogLn(__FlashStringHelper const*)>
    64e8:	4668      	mov	r0, sp
    64ea:	f005 fd87 	bl	bffc <String::~String()>
    64ee:	e7ec      	b.n	64ca <Msg::outln(unsigned long, int)+0x16>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    64f0:	2300      	movs	r3, #0
    64f2:	b2f2      	uxtb	r2, r6
    64f4:	4629      	mov	r1, r5
    64f6:	4808      	ldr	r0, [pc, #32]	; (6518 <Msg::outln(unsigned long, int)+0x64>)
    64f8:	f005 fce6 	bl	bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    64fc:	4806      	ldr	r0, [pc, #24]	; (6518 <Msg::outln(unsigned long, int)+0x64>)
    64fe:	f005 fcbb 	bl	be78 <Print::println()>
    6502:	e7e0      	b.n	64c6 <Msg::outln(unsigned long, int)+0x12>
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->println(n);
    6504:	6a47      	ldr	r7, [r0, #36]	; 0x24

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6506:	2300      	movs	r3, #0
    6508:	220a      	movs	r2, #10
    650a:	4638      	mov	r0, r7
    650c:	f005 fcdc 	bl	bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    6510:	4638      	mov	r0, r7
    6512:	f005 fcb1 	bl	be78 <Print::println()>
    6516:	e7d4      	b.n	64c2 <Msg::outln(unsigned long, int)+0xe>
    6518:	20001ea4 	.word	0x20001ea4

0000651c <Msg::outln(String&)>:
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(String& txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    651c:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(String& txt) {
    651e:	b570      	push	{r4, r5, r6, lr}
    6520:	4604      	mov	r4, r0
    6522:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->println(txt);
    6524:	b9bb      	cbnz	r3, 6556 <Msg::outln(String&)+0x3a>
	if (serialOutputEnabled) Serial.println(txt);
    6526:	7fe3      	ldrb	r3, [r4, #31]
    6528:	b96b      	cbnz	r3, 6546 <Msg::outln(String&)+0x2a>
	if (normalOutputToLog) _writeLogLn(txt);
    652a:	7d23      	ldrb	r3, [r4, #20]
    652c:	b933      	cbnz	r3, 653c <Msg::outln(String&)+0x20>
	if (mdelay) delay(mdelay);
    652e:	8ba0      	ldrh	r0, [r4, #28]
    6530:	b900      	cbnz	r0, 6534 <Msg::outln(String&)+0x18>
    6532:	bd70      	pop	{r4, r5, r6, pc}
}
    6534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void Msg::outln(String& txt) {
	if (lcdOutputEnabled) lcd->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
    6538:	f003 bfb0 	b.w	a49c <delay>
    653c:	6829      	ldr	r1, [r5, #0]
    653e:	4620      	mov	r0, r4
    6540:	f7ff ff62 	bl	6408 <Msg::_writeLogLn(__FlashStringHelper const*)>
    6544:	e7f3      	b.n	652e <Msg::outln(String&)+0x12>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    6546:	4629      	mov	r1, r5
    6548:	4807      	ldr	r0, [pc, #28]	; (6568 <Msg::outln(String&)+0x4c>)
    654a:	f005 fc6f 	bl	be2c <Print::print(String const&)>
    654e:	4806      	ldr	r0, [pc, #24]	; (6568 <Msg::outln(String&)+0x4c>)
    6550:	f005 fc92 	bl	be78 <Print::println()>
    6554:	e7e9      	b.n	652a <Msg::outln(String&)+0xe>
	if (normalOutputToLog) _writeLogLn(txt);
	if (mdelay) delay(mdelay);
}

void Msg::outln(String& txt) {
	if (lcdOutputEnabled) lcd->println(txt);
    6556:	6a46      	ldr	r6, [r0, #36]	; 0x24
    6558:	4630      	mov	r0, r6
    655a:	f005 fc67 	bl	be2c <Print::print(String const&)>
    655e:	4630      	mov	r0, r6
    6560:	f005 fc8a 	bl	be78 <Print::println()>
    6564:	e7df      	b.n	6526 <Msg::outln(String&)+0xa>
    6566:	bf00      	nop
    6568:	20001ea4 	.word	0x20001ea4

0000656c <Msg::warn(String&, char const*, char const*)>:
void Msg::warn(const char* txt, const char* className, const char* callerName) {
	String buff = txt;
	warn(buff, className, callerName);
}

void Msg::warn(String& txt, const char* className, const char* callerName) {
    656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6570:	4604      	mov	r4, r0
    6572:	b086      	sub	sp, #24
    6574:	4688      	mov	r8, r1
    6576:	4616      	mov	r6, r2
    6578:	461f      	mov	r7, r3
	String str = WARN_MSG;
    657a:	6841      	ldr	r1, [r0, #4]
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    657c:	f104 0538 	add.w	r5, r4, #56	; 0x38
	String buff = txt;
	warn(buff, className, callerName);
}

void Msg::warn(String& txt, const char* className, const char* callerName) {
	String str = WARN_MSG;
    6580:	a802      	add	r0, sp, #8
    6582:	f005 fd7b 	bl	c07c <String::String(char const*)>
    6586:	4641      	mov	r1, r8
    6588:	a802      	add	r0, sp, #8
    658a:	f005 fe75 	bl	c278 <String::append(String const&)>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    658e:	4633      	mov	r3, r6
    6590:	4629      	mov	r1, r5
    6592:	aa02      	add	r2, sp, #8
    6594:	4620      	mov	r0, r4
    6596:	9700      	str	r7, [sp, #0]
    6598:	f7ff ff08 	bl	63ac <Msg::_buildFullMsg(String&, String&, char const*, char const*)>
	outln(buff);
    659c:	4629      	mov	r1, r5
    659e:	4620      	mov	r0, r4
    65a0:	f7ff ffbc 	bl	651c <Msg::outln(String&)>
	buff = txt;
	log(buff, className, callerName);
}

void Msg::log(String& txt, const char* className, const char* callerName) {
	if (!logFileEnabled) return;
    65a4:	f894 3020 	ldrb.w	r3, [r4, #32]
    65a8:	b11b      	cbz	r3, 65b2 <Msg::warn(String&, char const*, char const*)+0x46>
    65aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    65ac:	4620      	mov	r0, r4
    65ae:	f7ff ff2b 	bl	6408 <Msg::_writeLogLn(__FlashStringHelper const*)>
	String buff = txt;
	warn(buff, className, callerName);
}

void Msg::warn(String& txt, const char* className, const char* callerName) {
	String str = WARN_MSG;
    65b2:	a802      	add	r0, sp, #8
    65b4:	f005 fd22 	bl	bffc <String::~String()>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}
    65b8:	b006      	add	sp, #24
    65ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65be:	bf00      	nop

000065c0 <Msg::warn(char const*, char const*, char const*)>:
//	lcd->setCursor(0, line);
//	lcd->print(st);
//	if (msgDelay) delay(msgDelay);
//}

void Msg::warn(const char* txt, const char* className, const char* callerName) {
    65c0:	b570      	push	{r4, r5, r6, lr}
    65c2:	b084      	sub	sp, #16
    65c4:	4604      	mov	r4, r0
    65c6:	4615      	mov	r5, r2
    65c8:	461e      	mov	r6, r3
	String buff = txt;
    65ca:	4668      	mov	r0, sp
    65cc:	f005 fd56 	bl	c07c <String::String(char const*)>
	warn(buff, className, callerName);
    65d0:	4633      	mov	r3, r6
    65d2:	462a      	mov	r2, r5
    65d4:	4669      	mov	r1, sp
    65d6:	4620      	mov	r0, r4
    65d8:	f7ff ffc8 	bl	656c <Msg::warn(String&, char const*, char const*)>
//	lcd->print(st);
//	if (msgDelay) delay(msgDelay);
//}

void Msg::warn(const char* txt, const char* className, const char* callerName) {
	String buff = txt;
    65dc:	4668      	mov	r0, sp
    65de:	f005 fd0d 	bl	bffc <String::~String()>
	warn(buff, className, callerName);
}
    65e2:	b004      	add	sp, #16
    65e4:	bd70      	pop	{r4, r5, r6, pc}
    65e6:	bf00      	nop

000065e8 <Msg::warn(__FlashStringHelper const*, char const*, char const*)>:
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}

void Msg::warn(const __FlashStringHelper* txt, const char* className, const char* callerName) {
    65e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		buff = txt;
    65ec:	f100 0538 	add.w	r5, r0, #56	; 0x38
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}

void Msg::warn(const __FlashStringHelper* txt, const char* className, const char* callerName) {
    65f0:	4604      	mov	r4, r0
    65f2:	4616      	mov	r6, r2
    65f4:	461f      	mov	r7, r3
		buff = txt;
    65f6:	4628      	mov	r0, r5
    65f8:	f005 fdf8 	bl	c1ec <String::operator=(__FlashStringHelper const*)>
		warn(buff, className, callerName);
    65fc:	463b      	mov	r3, r7
    65fe:	4632      	mov	r2, r6
    6600:	4629      	mov	r1, r5
    6602:	4620      	mov	r0, r4
}
    6604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log(buff);
}

void Msg::warn(const __FlashStringHelper* txt, const char* className, const char* callerName) {
		buff = txt;
		warn(buff, className, callerName);
    6608:	f7ff bfb0 	b.w	656c <Msg::warn(String&, char const*, char const*)>

0000660c <Msg::err(String&, char const*, char const*)>:
void Msg::err(const char* txt, const char* className, const char* callerName) {
	buff = txt;
	err(buff, className, callerName);
}

void Msg::err(String& txt, const char* className, const char* callerName) {
    660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6610:	4604      	mov	r4, r0
    6612:	b086      	sub	sp, #24
    6614:	4688      	mov	r8, r1
    6616:	4616      	mov	r6, r2
    6618:	461f      	mov	r7, r3
	String str = ERR_MSG;
    661a:	6881      	ldr	r1, [r0, #8]
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    661c:	f104 0538 	add.w	r5, r4, #56	; 0x38
	buff = txt;
	err(buff, className, callerName);
}

void Msg::err(String& txt, const char* className, const char* callerName) {
	String str = ERR_MSG;
    6620:	a802      	add	r0, sp, #8
    6622:	f005 fd2b 	bl	c07c <String::String(char const*)>
    6626:	4641      	mov	r1, r8
    6628:	a802      	add	r0, sp, #8
    662a:	f005 fe25 	bl	c278 <String::append(String const&)>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
    662e:	4633      	mov	r3, r6
    6630:	4629      	mov	r1, r5
    6632:	aa02      	add	r2, sp, #8
    6634:	4620      	mov	r0, r4
    6636:	9700      	str	r7, [sp, #0]
    6638:	f7ff feb8 	bl	63ac <Msg::_buildFullMsg(String&, String&, char const*, char const*)>
	outln(buff);
    663c:	4629      	mov	r1, r5
    663e:	4620      	mov	r0, r4
    6640:	f7ff ff6c 	bl	651c <Msg::outln(String&)>
	buff = txt;
	log(buff, className, callerName);
}

void Msg::log(String& txt, const char* className, const char* callerName) {
	if (!logFileEnabled) return;
    6644:	f894 3020 	ldrb.w	r3, [r4, #32]
    6648:	b11b      	cbz	r3, 6652 <Msg::err(String&, char const*, char const*)+0x46>
    664a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    664c:	4620      	mov	r0, r4
    664e:	f7ff fedb 	bl	6408 <Msg::_writeLogLn(__FlashStringHelper const*)>
	buff = txt;
	err(buff, className, callerName);
}

void Msg::err(String& txt, const char* className, const char* callerName) {
	String str = ERR_MSG;
    6652:	a802      	add	r0, sp, #8
    6654:	f005 fcd2 	bl	bffc <String::~String()>
	str += txt;
	_buildFullMsg(buff, str, className, callerName);
	outln(buff);
	log(buff);
}
    6658:	b006      	add	sp, #24
    665a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    665e:	bf00      	nop

00006660 <Msg::err(__FlashStringHelper const*, char const*, char const*)>:

void Msg::err(const __FlashStringHelper* txt, const char* className, const char* callerName) {
    6660:	b570      	push	{r4, r5, r6, lr}
    6662:	b084      	sub	sp, #16
    6664:	4604      	mov	r4, r0
    6666:	4615      	mov	r5, r2
    6668:	461e      	mov	r6, r3
	String buff = txt;
    666a:	4668      	mov	r0, sp
    666c:	f005 fd1a 	bl	c0a4 <String::String(__FlashStringHelper const*)>
	err(buff, className, callerName);
    6670:	4633      	mov	r3, r6
    6672:	462a      	mov	r2, r5
    6674:	4669      	mov	r1, sp
    6676:	4620      	mov	r0, r4
    6678:	f7ff ffc8 	bl	660c <Msg::err(String&, char const*, char const*)>
	outln(buff);
	log(buff);
}

void Msg::err(const __FlashStringHelper* txt, const char* className, const char* callerName) {
	String buff = txt;
    667c:	4668      	mov	r0, sp
    667e:	f005 fcbd 	bl	bffc <String::~String()>
	err(buff, className, callerName);
}
    6682:	b004      	add	sp, #16
    6684:	bd70      	pop	{r4, r5, r6, pc}
    6686:	bf00      	nop

00006688 <Msg::prFreeMem()>:

void Msg::prFreeMem() {
    6688:	b530      	push	{r4, r5, lr}
    668a:	b089      	sub	sp, #36	; 0x24
    668c:	4604      	mov	r4, r0
	buff = String(freeMemory()) + " bytes free.";
    668e:	f7ff f9e1 	bl	5a54 <freeMemory>
    6692:	220a      	movs	r2, #10
    6694:	4601      	mov	r1, r0
    6696:	4668      	mov	r0, sp
    6698:	f005 fd48 	bl	c12c <String::String(int, unsigned char)>
    669c:	f104 0538 	add.w	r5, r4, #56	; 0x38
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    66a0:	4669      	mov	r1, sp
    66a2:	a804      	add	r0, sp, #16
    66a4:	f005 fd10 	bl	c0c8 <String::String(String const&)>
    66a8:	490d      	ldr	r1, [pc, #52]	; (66e0 <Msg::prFreeMem()+0x58>)
    66aa:	a804      	add	r0, sp, #16
    66ac:	f005 fe22 	bl	c2f4 <operator+(StringSumHelper const&, char const*)>
    66b0:	4601      	mov	r1, r0
    66b2:	4628      	mov	r0, r5
    66b4:	f005 fd80 	bl	c1b8 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    66b8:	a804      	add	r0, sp, #16
    66ba:	f005 fc9f 	bl	bffc <String::~String()>
    66be:	4668      	mov	r0, sp
    66c0:	f005 fc9c 	bl	bffc <String::~String()>
	outln(buff); 
    66c4:	4629      	mov	r1, r5
    66c6:	4620      	mov	r0, r4
    66c8:	f7ff ff28 	bl	651c <Msg::outln(String&)>
	buff = txt;
	log(buff, className, callerName);
}

void Msg::log(String& txt, const char* className, const char* callerName) {
	if (!logFileEnabled) return;
    66cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    66d0:	b11b      	cbz	r3, 66da <Msg::prFreeMem()+0x52>
    66d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    66d4:	4620      	mov	r0, r4
    66d6:	f7ff fe97 	bl	6408 <Msg::_writeLogLn(__FlashStringHelper const*)>

void Msg::prFreeMem() {
	buff = String(freeMemory()) + " bytes free.";
	outln(buff); 
	log(buff);
}
    66da:	b009      	add	sp, #36	; 0x24
    66dc:	bd30      	pop	{r4, r5, pc}
    66de:	bf00      	nop
    66e0:	20001520 	.word	0x20001520

000066e4 <Msg::_writeLog(__FlashStringHelper const*)>:
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLog(const __FlashStringHelper* msg) {
    66e4:	b530      	push	{r4, r5, lr}
    66e6:	b089      	sub	sp, #36	; 0x24
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    66e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    66ea:	2313      	movs	r3, #19
	f.close();
	return true;
}

// appends log text-line
bool Msg::_writeLog(const __FlashStringHelper* msg) {
    66ec:	460d      	mov	r5, r1
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    66ee:	4668      	mov	r0, sp
    66f0:	490c      	ldr	r1, [pc, #48]	; (6724 <Msg::_writeLog(__FlashStringHelper const*)+0x40>)
    66f2:	f001 fb21 	bl	7d38 <SDClass::open(char const*, unsigned char)>
	if (!f) return false;
    66f6:	4668      	mov	r0, sp
    66f8:	f001 fa6c 	bl	7bd4 <File::operator bool()>
    66fc:	4604      	mov	r4, r0
    66fe:	b150      	cbz	r0, 6716 <Msg::_writeLog(__FlashStringHelper const*)+0x32>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6700:	4628      	mov	r0, r5
    6702:	f007 f91d 	bl	d940 <strlen>
    6706:	4629      	mov	r1, r5
    6708:	4602      	mov	r2, r0
    670a:	4668      	mov	r0, sp
    670c:	f001 f9b0 	bl	7a70 <File::write(unsigned char const*, unsigned int)>
	f.print(msg);
	f.close();
    6710:	4668      	mov	r0, sp
    6712:	f001 fa51 	bl	7bb8 <File::close()>
	return true;
}

// appends log text-line
bool Msg::_writeLog(const __FlashStringHelper* msg) {
	File f = SD.open(logFileName.c_str(), FILE_WRITE);
    6716:	4668      	mov	r0, sp
    6718:	f001 fa38 	bl	7b8c <File::~File()>
	if (!f) return false;
	f.print(msg);
	f.close();
	return true;
}
    671c:	4620      	mov	r0, r4
    671e:	b009      	add	sp, #36	; 0x24
    6720:	bd30      	pop	{r4, r5, pc}
    6722:	bf00      	nop
    6724:	2000298c 	.word	0x2000298c

00006728 <Msg::out(__FlashStringHelper const*)>:
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
    6728:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(const __FlashStringHelper *txt) {
    672a:	b570      	push	{r4, r5, r6, lr}
    672c:	4604      	mov	r4, r0
    672e:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->print(txt);
    6730:	b9bb      	cbnz	r3, 6762 <Msg::out(__FlashStringHelper const*)+0x3a>
	if (serialOutputEnabled) Serial.print(txt);
    6732:	7fe3      	ldrb	r3, [r4, #31]
    6734:	b96b      	cbnz	r3, 6752 <Msg::out(__FlashStringHelper const*)+0x2a>
	if (normalOutputToLog) _writeLog(txt);
    6736:	7d23      	ldrb	r3, [r4, #20]
    6738:	b933      	cbnz	r3, 6748 <Msg::out(__FlashStringHelper const*)+0x20>
	if (mdelay) delay(mdelay);
    673a:	8ba0      	ldrh	r0, [r4, #28]
    673c:	b900      	cbnz	r0, 6740 <Msg::out(__FlashStringHelper const*)+0x18>
    673e:	bd70      	pop	{r4, r5, r6, pc}
}
    6740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
    6744:	f003 beaa 	b.w	a49c <delay>
}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
    6748:	4629      	mov	r1, r5
    674a:	4620      	mov	r0, r4
    674c:	f7ff ffca 	bl	66e4 <Msg::_writeLog(__FlashStringHelper const*)>
    6750:	e7f3      	b.n	673a <Msg::out(__FlashStringHelper const*)+0x12>
    6752:	4628      	mov	r0, r5
    6754:	f007 f8f4 	bl	d940 <strlen>
    6758:	4601      	mov	r1, r0
    675a:	4628      	mov	r0, r5
    675c:	f005 f9ca 	bl	baf4 <usb_serial_write>
    6760:	e7e9      	b.n	6736 <Msg::out(__FlashStringHelper const*)+0xe>
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(const __FlashStringHelper *txt) {
	if (lcdOutputEnabled) lcd->print(txt);
    6762:	6a46      	ldr	r6, [r0, #36]	; 0x24
    6764:	4608      	mov	r0, r1
    6766:	f007 f8eb 	bl	d940 <strlen>
    676a:	4629      	mov	r1, r5
    676c:	6833      	ldr	r3, [r6, #0]
    676e:	4602      	mov	r2, r0
    6770:	4630      	mov	r0, r6
    6772:	685b      	ldr	r3, [r3, #4]
    6774:	4798      	blx	r3
    6776:	e7dc      	b.n	6732 <Msg::out(__FlashStringHelper const*)+0xa>

00006778 <Msg::out(char const*)>:
    6778:	f7ff bfd6 	b.w	6728 <Msg::out(__FlashStringHelper const*)>

0000677c <Msg::out(unsigned long, int)>:
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->print(n);
    677c:	7f83      	ldrb	r3, [r0, #30]
	if (serialOutputEnabled) Serial.print(txt);
	if (normalOutputToLog) _writeLog(txt);
	if (mdelay) delay(mdelay);
}

void Msg::out(uint32_t n, int base) {
    677e:	b570      	push	{r4, r5, r6, lr}
    6780:	4604      	mov	r4, r0
    6782:	b084      	sub	sp, #16
    6784:	4616      	mov	r6, r2
    6786:	460d      	mov	r5, r1
	if (lcdOutputEnabled) lcd->print(n);
    6788:	b9eb      	cbnz	r3, 67c6 <Msg::out(unsigned long, int)+0x4a>
	if (serialOutputEnabled) Serial.print(n, base);
    678a:	7fe3      	ldrb	r3, [r4, #31]
    678c:	b9a3      	cbnz	r3, 67b8 <Msg::out(unsigned long, int)+0x3c>
	if (normalOutputToLog) {
    678e:	7d23      	ldrb	r3, [r4, #20]
    6790:	b92b      	cbnz	r3, 679e <Msg::out(unsigned long, int)+0x22>
		String st = String(n, base);
		_writeLog(st);
	}
	if (mdelay) delay(mdelay);
    6792:	8ba0      	ldrh	r0, [r4, #28]
    6794:	b108      	cbz	r0, 679a <Msg::out(unsigned long, int)+0x1e>
    6796:	f003 fe81 	bl	a49c <delay>
}
    679a:	b004      	add	sp, #16
    679c:	bd70      	pop	{r4, r5, r6, pc}

void Msg::out(uint32_t n, int base) {
	if (lcdOutputEnabled) lcd->print(n);
	if (serialOutputEnabled) Serial.print(n, base);
	if (normalOutputToLog) {
		String st = String(n, base);
    679e:	b2f2      	uxtb	r2, r6
    67a0:	4629      	mov	r1, r5
    67a2:	4668      	mov	r0, sp
    67a4:	f005 fcd6 	bl	c154 <String::String(unsigned long, unsigned char)>

protected:
	void _buildFullMsg(String& destStr, String& msg, const char* className, const char* funcName);
	bool _writeLog(const char* txt);
	bool _writeLog(const __FlashStringHelper* txt);
	inline bool _writeLog(String& txt) { return _writeLog(txt.c_str()); }
    67a8:	9900      	ldr	r1, [sp, #0]
    67aa:	4620      	mov	r0, r4
    67ac:	f7ff ff9a 	bl	66e4 <Msg::_writeLog(__FlashStringHelper const*)>
    67b0:	4668      	mov	r0, sp
    67b2:	f005 fc23 	bl	bffc <String::~String()>
    67b6:	e7ec      	b.n	6792 <Msg::out(unsigned long, int)+0x16>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    67b8:	2300      	movs	r3, #0
    67ba:	b2f2      	uxtb	r2, r6
    67bc:	4629      	mov	r1, r5
    67be:	4805      	ldr	r0, [pc, #20]	; (67d4 <Msg::out(unsigned long, int)+0x58>)
    67c0:	f005 fb82 	bl	bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    67c4:	e7e3      	b.n	678e <Msg::out(unsigned long, int)+0x12>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    67c6:	2300      	movs	r3, #0
    67c8:	220a      	movs	r2, #10
    67ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
    67cc:	f005 fb7c 	bl	bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    67d0:	e7db      	b.n	678a <Msg::out(unsigned long, int)+0xe>
    67d2:	bf00      	nop
    67d4:	20001ea4 	.word	0x20001ea4

000067d8 <NVData_class::NVData_class()>:
#include "NVData.h"
#include <EEPROM.h>

/** attenzione: MANCA supporto dispositivo FRAM **/

NVData_class::NVData_class() {
    67d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67da:	4912      	ldr	r1, [pc, #72]	; (6824 <NVData_class::NVData_class()+0x4c>)
    67dc:	4604      	mov	r4, r0
    67de:	4e12      	ldr	r6, [pc, #72]	; (6828 <NVData_class::NVData_class()+0x50>)
    67e0:	3034      	adds	r0, #52	; 0x34
    67e2:	4d12      	ldr	r5, [pc, #72]	; (682c <NVData_class::NVData_class()+0x54>)
    67e4:	4a12      	ldr	r2, [pc, #72]	; (6830 <NVData_class::NVData_class()+0x58>)
    67e6:	4b13      	ldr	r3, [pc, #76]	; (6834 <NVData_class::NVData_class()+0x5c>)
    67e8:	6026      	str	r6, [r4, #0]
    67ea:	6065      	str	r5, [r4, #4]
    67ec:	60a1      	str	r1, [r4, #8]
    67ee:	60e2      	str	r2, [r4, #12]
    67f0:	4911      	ldr	r1, [pc, #68]	; (6838 <NVData_class::NVData_class()+0x60>)
    67f2:	4a12      	ldr	r2, [pc, #72]	; (683c <NVData_class::NVData_class()+0x64>)
    67f4:	6123      	str	r3, [r4, #16]
    67f6:	4f12      	ldr	r7, [pc, #72]	; (6840 <NVData_class::NVData_class()+0x68>)
    67f8:	4b12      	ldr	r3, [pc, #72]	; (6844 <NVData_class::NVData_class()+0x6c>)
    67fa:	4e13      	ldr	r6, [pc, #76]	; (6848 <NVData_class::NVData_class()+0x70>)
    67fc:	4d13      	ldr	r5, [pc, #76]	; (684c <NVData_class::NVData_class()+0x74>)
    67fe:	6262      	str	r2, [r4, #36]	; 0x24
    6800:	62a3      	str	r3, [r4, #40]	; 0x28
    6802:	6167      	str	r7, [r4, #20]
    6804:	61a6      	str	r6, [r4, #24]
    6806:	61e5      	str	r5, [r4, #28]
    6808:	6221      	str	r1, [r4, #32]
    680a:	f001 f9af 	bl	7b6c <File::File()>
	immediateWriteMode = false;
    680e:	2300      	movs	r3, #0
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
    6810:	6822      	ldr	r2, [r4, #0]
	_fileBaseAdr = 0;
}
    6812:	4620      	mov	r0, r4
#include <EEPROM.h>

/** attenzione: MANCA supporto dispositivo FRAM **/

NVData_class::NVData_class() {
	immediateWriteMode = false;
    6814:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
    6818:	6322      	str	r2, [r4, #48]	; 0x30

/** attenzione: MANCA supporto dispositivo FRAM **/

NVData_class::NVData_class() {
	immediateWriteMode = false;
	_ready = false;
    681a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	_fileName = (char*)DEFAULT_FILENAME;
	_fileBaseAdr = 0;
    681e:	6623      	str	r3, [r4, #96]	; 0x60
}
    6820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6822:	bf00      	nop
    6824:	2000154c 	.word	0x2000154c
    6828:	20001530 	.word	0x20001530
    682c:	2000153c 	.word	0x2000153c
    6830:	20001564 	.word	0x20001564
    6834:	20001578 	.word	0x20001578
    6838:	200015f4 	.word	0x200015f4
    683c:	20001610 	.word	0x20001610
    6840:	20001588 	.word	0x20001588
    6844:	2000162c 	.word	0x2000162c
    6848:	20001594 	.word	0x20001594
    684c:	200015b8 	.word	0x200015b8

00006850 <NVData_class::_warnMsg(String, String)>:

	_pendingChanges = false;
	return true;
}

void NVData_class::_warnMsg(String header, String msg) {
    6850:	b570      	push	{r4, r5, r6, lr}
	Serial.print("WARNING: NVData::");
	Serial.print(header);
    6852:	4c0c      	ldr	r4, [pc, #48]	; (6884 <NVData_class::_warnMsg(String, String)+0x34>)

	_pendingChanges = false;
	return true;
}

void NVData_class::_warnMsg(String header, String msg) {
    6854:	460e      	mov	r6, r1
    6856:	480c      	ldr	r0, [pc, #48]	; (6888 <NVData_class::_warnMsg(String, String)+0x38>)
    6858:	2111      	movs	r1, #17
    685a:	4615      	mov	r5, r2
    685c:	f005 f94a 	bl	baf4 <usb_serial_write>
	Serial.print("WARNING: NVData::");
	Serial.print(header);
    6860:	4631      	mov	r1, r6
    6862:	4620      	mov	r0, r4
    6864:	f005 fae2 	bl	be2c <Print::print(String const&)>
    6868:	2104      	movs	r1, #4
    686a:	4808      	ldr	r0, [pc, #32]	; (688c <NVData_class::_warnMsg(String, String)+0x3c>)
    686c:	f005 f942 	bl	baf4 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    6870:	4629      	mov	r1, r5
    6872:	4620      	mov	r0, r4
    6874:	f005 fada 	bl	be2c <Print::print(String const&)>
    6878:	4620      	mov	r0, r4
	Serial.print("(): ");
	Serial.println(msg);
}
    687a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    687e:	f005 bafb 	b.w	be78 <Print::println()>
    6882:	bf00      	nop
    6884:	20001ea4 	.word	0x20001ea4
    6888:	20001640 	.word	0x20001640
    688c:	20001654 	.word	0x20001654

00006890 <NVData_class::_loadData()>:

bool NVData_class::_loadData() {
	const char* hdr = "_loadData";
	uint32_t sz;

	switch (device) {
    6890:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    6894:	2b01      	cmp	r3, #1
	}
	//else _warnMsg("_createEmptyFile", "Can't create settings file!");
	return (bool)f;
}

bool NVData_class::_loadData() {
    6896:	b570      	push	{r4, r5, r6, lr}
    6898:	4605      	mov	r5, r0
    689a:	b08c      	sub	sp, #48	; 0x30
	const char* hdr = "_loadData";
	uint32_t sz;

	switch (device) {
    689c:	d02e      	beq.n	68fc <NVData_class::_loadData()+0x6c>
    689e:	d31c      	bcc.n	68da <NVData_class::_loadData()+0x4a>
    68a0:	2b02      	cmp	r3, #2
    68a2:	d003      	beq.n	68ac <NVData_class::_loadData()+0x1c>
	case FRAM_NVD:
		// TODO..
		_warnMsg(hdr, notImplemStr);
		break;
	}
	return true;
    68a4:	2401      	movs	r4, #1
}
    68a6:	4620      	mov	r0, r4
    68a8:	b00c      	add	sp, #48	; 0x30
    68aa:	bd70      	pop	{r4, r5, r6, pc}
		_f.read(_data, _size);
		_f.close();
		break;
	case FRAM_NVD:
		// TODO..
		_warnMsg(hdr, notImplemStr);
    68ac:	4941      	ldr	r1, [pc, #260]	; (69b4 <NVData_class::_loadData()+0x124>)
    68ae:	4668      	mov	r0, sp
    68b0:	f005 fbe4 	bl	c07c <String::String(char const*)>
    68b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    68b6:	a804      	add	r0, sp, #16
		break;
	}
	return true;
    68b8:	2401      	movs	r4, #1
		_f.read(_data, _size);
		_f.close();
		break;
	case FRAM_NVD:
		// TODO..
		_warnMsg(hdr, notImplemStr);
    68ba:	f005 fbf3 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    68be:	aa04      	add	r2, sp, #16
    68c0:	4669      	mov	r1, sp
    68c2:	4628      	mov	r0, r5
    68c4:	f7ff ffc4 	bl	6850 <NVData_class::_warnMsg(String, String)>
    68c8:	a804      	add	r0, sp, #16
    68ca:	f005 fb97 	bl	bffc <String::~String()>
    68ce:	4668      	mov	r0, sp
    68d0:	f005 fb94 	bl	bffc <String::~String()>
		break;
	}
	return true;
}
    68d4:	4620      	mov	r0, r4
    68d6:	b00c      	add	sp, #48	; 0x30
    68d8:	bd70      	pop	{r4, r5, r6, pc}
	const char* hdr = "_loadData";
	uint32_t sz;

	switch (device) {
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) _data[i] = EEPROM.read(i);
    68da:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    68de:	2b00      	cmp	r3, #0
    68e0:	d0e0      	beq.n	68a4 <NVData_class::_loadData()+0x14>
    68e2:	2400      	movs	r4, #0

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    68e4:	4620      	mov	r0, r4
    68e6:	6dae      	ldr	r6, [r5, #88]	; 0x58
    68e8:	f003 ff9e 	bl	a828 <eeprom_read_byte>
    68ec:	1c63      	adds	r3, r4, #1
    68ee:	5530      	strb	r0, [r6, r4]
    68f0:	b29c      	uxth	r4, r3
    68f2:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    68f6:	42a3      	cmp	r3, r4
    68f8:	d8f4      	bhi.n	68e4 <NVData_class::_loadData()+0x54>
    68fa:	e7d3      	b.n	68a4 <NVData_class::_loadData()+0x14>
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
    68fc:	2100      	movs	r1, #0
		_f = SD.open(_fileName, FILE_READ);
    68fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
	switch (device) {
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) _data[i] = EEPROM.read(i);
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
    6900:	6601      	str	r1, [r0, #96]	; 0x60
		_f = SD.open(_fileName, FILE_READ);
    6902:	a804      	add	r0, sp, #16
    6904:	492c      	ldr	r1, [pc, #176]	; (69b8 <NVData_class::_loadData()+0x128>)
    6906:	f001 fa17 	bl	7d38 <SDClass::open(char const*, unsigned char)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    690a:	aa0c      	add	r2, sp, #48	; 0x30
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    690c:	f89d 4014 	ldrb.w	r4, [sp, #20]
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
    6910:	f105 0341 	add.w	r3, r5, #65	; 0x41
    6914:	f812 6d14 	ldrb.w	r6, [r2, #-20]!
    6918:	f105 004e 	add.w	r0, r5, #78	; 0x4e
    691c:	9906      	ldr	r1, [sp, #24]
    691e:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    6922:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    6926:	63e9      	str	r1, [r5, #60]	; 0x3c
    6928:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    692c:	f803 1b01 	strb.w	r1, [r3], #1
    6930:	4298      	cmp	r0, r3
    6932:	d1f9      	bne.n	6928 <NVData_class::_loadData()+0x98>
    6934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		if (!_f) {
    6936:	f105 0634 	add.w	r6, r5, #52	; 0x34
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) _data[i] = EEPROM.read(i);
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
		_f = SD.open(_fileName, FILE_READ);
    693a:	a804      	add	r0, sp, #16
    693c:	652b      	str	r3, [r5, #80]	; 0x50
    693e:	f001 f925 	bl	7b8c <File::~File()>
		if (!_f) {
    6942:	4630      	mov	r0, r6
    6944:	f001 f946 	bl	7bd4 <File::operator bool()>
    6948:	4604      	mov	r4, r0
    694a:	b1e8      	cbz	r0, 6988 <NVData_class::_loadData()+0xf8>
			_warnMsg(hdr, "can't open SD file");
			return false;
		}
		sz = _f.size();
    694c:	4630      	mov	r0, r6
    694e:	f001 f92f 	bl	7bb0 <File::size()>
		if (sz < _size) {
    6952:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
    6956:	4288      	cmp	r0, r1
    6958:	d21d      	bcs.n	6996 <NVData_class::_loadData()+0x106>
			_warnMsg(hdr, "target file too short: ignored");
    695a:	4916      	ldr	r1, [pc, #88]	; (69b4 <NVData_class::_loadData()+0x124>)
    695c:	a804      	add	r0, sp, #16
    695e:	f005 fb8d 	bl	c07c <String::String(char const*)>
			return false;
    6962:	2400      	movs	r4, #0
			_warnMsg(hdr, "can't open SD file");
			return false;
		}
		sz = _f.size();
		if (sz < _size) {
			_warnMsg(hdr, "target file too short: ignored");
    6964:	4668      	mov	r0, sp
    6966:	4915      	ldr	r1, [pc, #84]	; (69bc <NVData_class::_loadData()+0x12c>)
    6968:	f005 fb88 	bl	c07c <String::String(char const*)>
    696c:	466a      	mov	r2, sp
    696e:	a904      	add	r1, sp, #16
    6970:	4628      	mov	r0, r5
    6972:	f7ff ff6d 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6976:	4668      	mov	r0, sp
    6978:	f005 fb40 	bl	bffc <String::~String()>
    697c:	a804      	add	r0, sp, #16
    697e:	f005 fb3d 	bl	bffc <String::~String()>
		// TODO..
		_warnMsg(hdr, notImplemStr);
		break;
	}
	return true;
}
    6982:	4620      	mov	r0, r4
    6984:	b00c      	add	sp, #48	; 0x30
    6986:	bd70      	pop	{r4, r5, r6, pc}
		break;
	case SDFILE_NVD: // reads file tail
		_fileBaseAdr = 0;
		_f = SD.open(_fileName, FILE_READ);
		if (!_f) {
			_warnMsg(hdr, "can't open SD file");
    6988:	490a      	ldr	r1, [pc, #40]	; (69b4 <NVData_class::_loadData()+0x124>)
    698a:	a804      	add	r0, sp, #16
    698c:	f005 fb76 	bl	c07c <String::String(char const*)>
    6990:	4668      	mov	r0, sp
    6992:	490b      	ldr	r1, [pc, #44]	; (69c0 <NVData_class::_loadData()+0x130>)
    6994:	e7e8      	b.n	6968 <NVData_class::_loadData()+0xd8>
		sz = _f.size();
		if (sz < _size) {
			_warnMsg(hdr, "target file too short: ignored");
			return false;
		}
		_fileBaseAdr = sz - _size;
    6996:	1a41      	subs	r1, r0, r1
		_f.seek(_fileBaseAdr);
    6998:	4630      	mov	r0, r6
		sz = _f.size();
		if (sz < _size) {
			_warnMsg(hdr, "target file too short: ignored");
			return false;
		}
		_fileBaseAdr = sz - _size;
    699a:	6629      	str	r1, [r5, #96]	; 0x60
		_f.seek(_fileBaseAdr);
    699c:	f001 f8fe 	bl	7b9c <File::seek(unsigned long)>
		_f.read(_data, _size);
    69a0:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    69a4:	6da9      	ldr	r1, [r5, #88]	; 0x58
    69a6:	4630      	mov	r0, r6
    69a8:	f001 f8f2 	bl	7b90 <File::read(void*, unsigned short)>
		_f.close();
    69ac:	4630      	mov	r0, r6
    69ae:	f001 f903 	bl	7bb8 <File::close()>
    69b2:	e778      	b.n	68a6 <NVData_class::_loadData()+0x16>
    69b4:	2000165c 	.word	0x2000165c
    69b8:	2000298c 	.word	0x2000298c
    69bc:	2000167c 	.word	0x2000167c
    69c0:	20001668 	.word	0x20001668

000069c4 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)>:
//	if (!_ready) _warnMsg(hdr, "Can't load data!");
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
    69c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69c6:	b08d      	sub	sp, #52	; 0x34
    69c8:	4616      	mov	r6, r2
    69ca:	4604      	mov	r4, r0
    69cc:	460f      	mov	r7, r1
	String st;
    69ce:	4668      	mov	r0, sp
    69d0:	2100      	movs	r1, #0
//	if (!_ready) _warnMsg(hdr, "Can't load data!");
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
    69d2:	461d      	mov	r5, r3
	String st;
    69d4:	f005 fb52 	bl	c07c <String::String(char const*)>
	const char* hdr = "begin";

	device = d;
	if (size > MAX_SIZE) {
    69d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
	const char* hdr = "begin";

	device = d;
    69dc:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	if (size > MAX_SIZE) {
    69e0:	d82c      	bhi.n	6a3c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x78>
		st = "NVData size ";
		st += size;
		st += " too big: trimmed to ";
		st += MAX_SIZE;
		_warnMsg(hdr, st);
		size = MAX_SIZE;
    69e2:	4630      	mov	r0, r6
	}
	_size = size;
    69e4:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
	_data = new byte[_size];
    69e8:	f005 fa04 	bl	bdf4 <operator new[](unsigned int)>
	_ready = false;
    69ec:	2300      	movs	r3, #0
    void writeWord(uint16_t addr, uint16_t val);
    uint32_t readDWord(uint16_t addr);
    void writeDWord(uint16_t addr, uint32_t val);
    void dump(uint16_t from = 0, uint16_t to = 0);
    void update();
    inline void clearAll() { for (uint16_t i = 0; i < _size; i++) _data[i] = 0; }
    69ee:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		st += MAX_SIZE;
		_warnMsg(hdr, st);
		size = MAX_SIZE;
	}
	_size = size;
	_data = new byte[_size];
    69f2:	65a0      	str	r0, [r4, #88]	; 0x58
	_ready = false;
    69f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    69f8:	b14a      	cbz	r2, 6a0e <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x4a>
    69fa:	461e      	mov	r6, r3
    69fc:	e000      	b.n	6a00 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x3c>
    69fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a00:	1c59      	adds	r1, r3, #1
    6a02:	54c6      	strb	r6, [r0, r3]
    6a04:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    6a08:	b28b      	uxth	r3, r1
    6a0a:	429a      	cmp	r2, r3
    6a0c:	d8f7      	bhi.n	69fe <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x3a>

	clearAll();
	if (device == FRAM_NVD) {
    6a0e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    6a12:	2b02      	cmp	r3, #2
    6a14:	d06d      	beq.n	6af2 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x12e>
		_warnMsg(hdr, notImplemStr);
		return false;
	}
	if (device == SDFILE_NVD) {
		if (cs_pin == 0) {
    6a16:	b90d      	cbnz	r5, 6a1c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x58>
    6a18:	2b01      	cmp	r3, #1
    6a1a:	d051      	beq.n	6ac0 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0xfc>
		//if (!SD.begin(cs_pin)) {
		//	_warnMsg(hdr, "cannot init SD device!");
		//	return false;
		//}
	}
	_pendingChanges = false;
    6a1c:	2300      	movs	r3, #0
	_ready = _loadData();
    6a1e:	4620      	mov	r0, r4
		//if (!SD.begin(cs_pin)) {
		//	_warnMsg(hdr, "cannot init SD device!");
		//	return false;
		//}
	}
	_pendingChanges = false;
    6a20:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	_ready = _loadData();
    6a24:	f7ff ff34 	bl	6890 <NVData_class::_loadData()>
    6a28:	4605      	mov	r5, r0
    6a2a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
    6a2e:	b360      	cbz	r0, 6a8a <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0xc6>
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
    6a30:	4668      	mov	r0, sp
    6a32:	f005 fae3 	bl	bffc <String::~String()>
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}
    6a36:	4628      	mov	r0, r5
    6a38:	b00d      	add	sp, #52	; 0x34
    6a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	String st;
	const char* hdr = "begin";

	device = d;
	if (size > MAX_SIZE) {
		st = "NVData size ";
    6a3c:	4932      	ldr	r1, [pc, #200]	; (6b08 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x144>)
    6a3e:	4668      	mov	r0, sp
    6a40:	f005 fbca 	bl	c1d8 <String::operator=(char const*)>
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    6a44:	4631      	mov	r1, r6
    6a46:	4668      	mov	r0, sp
    6a48:	f44f 6680 	mov.w	r6, #1024	; 0x400
    6a4c:	f005 fc36 	bl	c2bc <String::append(int)>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    6a50:	492e      	ldr	r1, [pc, #184]	; (6b0c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x148>)
    6a52:	4668      	mov	r0, sp
    6a54:	f005 fc14 	bl	c280 <String::append(char const*)>
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    6a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6a5c:	4668      	mov	r0, sp
    6a5e:	f005 fc2d 	bl	c2bc <String::append(int)>
		st += size;
		st += " too big: trimmed to ";
		st += MAX_SIZE;
		_warnMsg(hdr, st);
    6a62:	a804      	add	r0, sp, #16
    6a64:	492a      	ldr	r1, [pc, #168]	; (6b10 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6a66:	f005 fb09 	bl	c07c <String::String(char const*)>
    6a6a:	4669      	mov	r1, sp
    6a6c:	a808      	add	r0, sp, #32
    6a6e:	f005 fb2b 	bl	c0c8 <String::String(String const&)>
    6a72:	aa08      	add	r2, sp, #32
    6a74:	a904      	add	r1, sp, #16
    6a76:	4620      	mov	r0, r4
    6a78:	f7ff feea 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6a7c:	a808      	add	r0, sp, #32
    6a7e:	f005 fabd 	bl	bffc <String::~String()>
    6a82:	a804      	add	r0, sp, #16
    6a84:	f005 faba 	bl	bffc <String::~String()>
    6a88:	e7ab      	b.n	69e2 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x1e>
		//	return false;
		//}
	}
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
    6a8a:	4921      	ldr	r1, [pc, #132]	; (6b10 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6a8c:	a804      	add	r0, sp, #16
    6a8e:	f005 faf5 	bl	c07c <String::String(char const*)>
    6a92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6a94:	a808      	add	r0, sp, #32
    6a96:	f005 fb05 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6a9a:	aa08      	add	r2, sp, #32
    6a9c:	a904      	add	r1, sp, #16
    6a9e:	4620      	mov	r0, r4
    6aa0:	f7ff fed6 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6aa4:	a808      	add	r0, sp, #32
    6aa6:	f005 faa9 	bl	bffc <String::~String()>
    6aaa:	a804      	add	r0, sp, #16
    6aac:	f005 faa6 	bl	bffc <String::~String()>
    6ab0:	f894 5054 	ldrb.w	r5, [r4, #84]	; 0x54
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
    6ab4:	4668      	mov	r0, sp
    6ab6:	f005 faa1 	bl	bffc <String::~String()>
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}
    6aba:	4628      	mov	r0, r5
    6abc:	b00d      	add	sp, #52	; 0x34
    6abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_warnMsg(hdr, notImplemStr);
		return false;
	}
	if (device == SDFILE_NVD) {
		if (cs_pin == 0) {
			_warnMsg(hdr, "undefined SPI DS CS pin!");
    6ac0:	4913      	ldr	r1, [pc, #76]	; (6b10 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6ac2:	a804      	add	r0, sp, #16
    6ac4:	f005 fada 	bl	c07c <String::String(char const*)>
    6ac8:	a808      	add	r0, sp, #32
    6aca:	4912      	ldr	r1, [pc, #72]	; (6b14 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x150>)
    6acc:	f005 fad6 	bl	c07c <String::String(char const*)>
    6ad0:	aa08      	add	r2, sp, #32
    6ad2:	a904      	add	r1, sp, #16
    6ad4:	4620      	mov	r0, r4
    6ad6:	f7ff febb 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6ada:	a808      	add	r0, sp, #32
    6adc:	f005 fa8e 	bl	bffc <String::~String()>
    6ae0:	a804      	add	r0, sp, #16
    6ae2:	f005 fa8b 	bl	bffc <String::~String()>
//	//else Serial.println("begin completed.");
//	return _ready;
//}

bool NVData_class::begin(Device d, uint16_t size, byte cs_pin) {
	String st;
    6ae6:	4668      	mov	r0, sp
    6ae8:	f005 fa88 	bl	bffc <String::~String()>
	_pendingChanges = false;
	_ready = _loadData();
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}
    6aec:	4628      	mov	r0, r5
    6aee:	b00d      	add	sp, #52	; 0x34
    6af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_data = new byte[_size];
	_ready = false;

	clearAll();
	if (device == FRAM_NVD) {
		_warnMsg(hdr, notImplemStr);
    6af2:	4907      	ldr	r1, [pc, #28]	; (6b10 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x14c>)
    6af4:	a804      	add	r0, sp, #16
    6af6:	f005 fac1 	bl	c07c <String::String(char const*)>
    6afa:	a808      	add	r0, sp, #32
    6afc:	6a61      	ldr	r1, [r4, #36]	; 0x24
		return false;
    6afe:	2500      	movs	r5, #0
	_data = new byte[_size];
	_ready = false;

	clearAll();
	if (device == FRAM_NVD) {
		_warnMsg(hdr, notImplemStr);
    6b00:	f005 fad0 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6b04:	e7e4      	b.n	6ad0 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x10c>
    6b06:	bf00      	nop
    6b08:	2000169c 	.word	0x2000169c
    6b0c:	200016ac 	.word	0x200016ac
    6b10:	200013e0 	.word	0x200013e0
    6b14:	200016c4 	.word	0x200016c4

00006b18 <NVData_class::_check(String, unsigned short, unsigned short)>:
	Serial.print(header);
	Serial.print("(): ");
	Serial.println(msg);
}

bool NVData_class::_check(String hdr, uint16_t addr, uint16_t addrLimit) {
    6b18:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!_ready) {
    6b1a:	f890 5054 	ldrb.w	r5, [r0, #84]	; 0x54
	Serial.print(header);
	Serial.print("(): ");
	Serial.println(msg);
}

bool NVData_class::_check(String hdr, uint16_t addr, uint16_t addrLimit) {
    6b1e:	b08d      	sub	sp, #52	; 0x34
    6b20:	4604      	mov	r4, r0
	if (!_ready) {
    6b22:	2d00      	cmp	r5, #0
    6b24:	d041      	beq.n	6baa <NVData_class::_check(String, unsigned short, unsigned short)+0x92>
    6b26:	4616      	mov	r6, r2
    6b28:	460f      	mov	r7, r1
		_warnMsg(hdr, notReadyStr);
		return false;
	}
	if (addrLimit == 0) addrLimit = _size - 1;
    6b2a:	b91b      	cbnz	r3, 6b34 <NVData_class::_check(String, unsigned short, unsigned short)+0x1c>
    6b2c:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    6b30:	3b01      	subs	r3, #1
    6b32:	b29b      	uxth	r3, r3
	if (addr > addrLimit) {
    6b34:	42b3      	cmp	r3, r6
    6b36:	d302      	bcc.n	6b3e <NVData_class::_check(String, unsigned short, unsigned short)+0x26>
		st += ")";
		_warnMsg(hdr, st);
		return false;
	}
	return true;
}
    6b38:	4628      	mov	r0, r5
    6b3a:	b00d      	add	sp, #52	; 0x34
    6b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_warnMsg(hdr, notReadyStr);
		return false;
	}
	if (addrLimit == 0) addrLimit = _size - 1;
	if (addr > addrLimit) {
		_warnMsg(hdr, invalidAddrStr);
    6b3e:	4639      	mov	r1, r7
    6b40:	a808      	add	r0, sp, #32
    6b42:	f005 fac1 	bl	c0c8 <String::String(String const&)>
    6b46:	6921      	ldr	r1, [r4, #16]
    6b48:	a804      	add	r0, sp, #16
    6b4a:	2500      	movs	r5, #0
    6b4c:	f005 faaa 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6b50:	aa04      	add	r2, sp, #16
    6b52:	a908      	add	r1, sp, #32
    6b54:	4620      	mov	r0, r4
    6b56:	f7ff fe7b 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6b5a:	a804      	add	r0, sp, #16
    6b5c:	f005 fa4e 	bl	bffc <String::~String()>
    6b60:	a808      	add	r0, sp, #32
    6b62:	f005 fa4b 	bl	bffc <String::~String()>
		String st = "(addr: " + addr;
    6b66:	491b      	ldr	r1, [pc, #108]	; (6bd4 <NVData_class::_check(String, unsigned short, unsigned short)+0xbc>)
    6b68:	4668      	mov	r0, sp
    6b6a:	4431      	add	r1, r6
    6b6c:	f005 fa86 	bl	c07c <String::String(char const*)>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    6b70:	4668      	mov	r0, sp
    6b72:	4919      	ldr	r1, [pc, #100]	; (6bd8 <NVData_class::_check(String, unsigned short, unsigned short)+0xc0>)
    6b74:	f005 fb84 	bl	c280 <String::append(char const*)>
		st += ")";
		_warnMsg(hdr, st);
    6b78:	4639      	mov	r1, r7
    6b7a:	a808      	add	r0, sp, #32
    6b7c:	f005 faa4 	bl	c0c8 <String::String(String const&)>
    6b80:	4669      	mov	r1, sp
    6b82:	a804      	add	r0, sp, #16
    6b84:	f005 faa0 	bl	c0c8 <String::String(String const&)>
    6b88:	aa04      	add	r2, sp, #16
    6b8a:	a908      	add	r1, sp, #32
    6b8c:	4620      	mov	r0, r4
    6b8e:	f7ff fe5f 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6b92:	a804      	add	r0, sp, #16
    6b94:	f005 fa32 	bl	bffc <String::~String()>
    6b98:	a808      	add	r0, sp, #32
    6b9a:	f005 fa2f 	bl	bffc <String::~String()>
		return false;
	}
	if (addrLimit == 0) addrLimit = _size - 1;
	if (addr > addrLimit) {
		_warnMsg(hdr, invalidAddrStr);
		String st = "(addr: " + addr;
    6b9e:	4668      	mov	r0, sp
    6ba0:	f005 fa2c 	bl	bffc <String::~String()>
		st += ")";
		_warnMsg(hdr, st);
		return false;
	}
	return true;
}
    6ba4:	4628      	mov	r0, r5
    6ba6:	b00d      	add	sp, #52	; 0x34
    6ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Serial.println(msg);
}

bool NVData_class::_check(String hdr, uint16_t addr, uint16_t addrLimit) {
	if (!_ready) {
		_warnMsg(hdr, notReadyStr);
    6baa:	a804      	add	r0, sp, #16
    6bac:	f005 fa8c 	bl	c0c8 <String::String(String const&)>
    6bb0:	69a1      	ldr	r1, [r4, #24]
    6bb2:	a808      	add	r0, sp, #32
    6bb4:	f005 fa76 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6bb8:	aa08      	add	r2, sp, #32
    6bba:	a904      	add	r1, sp, #16
    6bbc:	4620      	mov	r0, r4
    6bbe:	f7ff fe47 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6bc2:	a808      	add	r0, sp, #32
    6bc4:	f005 fa1a 	bl	bffc <String::~String()>
    6bc8:	a804      	add	r0, sp, #16
    6bca:	f005 fa17 	bl	bffc <String::~String()>
		st += ")";
		_warnMsg(hdr, st);
		return false;
	}
	return true;
}
    6bce:	4628      	mov	r0, r5
    6bd0:	b00d      	add	sp, #52	; 0x34
    6bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bd4:	200016e0 	.word	0x200016e0
    6bd8:	200002b0 	.word	0x200002b0

00006bdc <NVData_class::readByte(unsigned short)>:
	if (!_ready) _warnMsg(hdr, cantReadDataStr);
	//else Serial.println("begin completed.");
	return _ready;
}

byte NVData_class::readByte(uint16_t addr) {
    6bdc:	b570      	push	{r4, r5, r6, lr}
    6bde:	b084      	sub	sp, #16
    6be0:	4606      	mov	r6, r0
    6be2:	460d      	mov	r5, r1
	if (!_check("readByte", addr)) return 0;
    6be4:	490a      	ldr	r1, [pc, #40]	; (6c10 <NVData_class::readByte(unsigned short)+0x34>)
    6be6:	4668      	mov	r0, sp
    6be8:	f005 fa48 	bl	c07c <String::String(char const*)>
    6bec:	462a      	mov	r2, r5
    6bee:	4669      	mov	r1, sp
    6bf0:	4630      	mov	r0, r6
    6bf2:	2300      	movs	r3, #0
    6bf4:	f7ff ff90 	bl	6b18 <NVData_class::_check(String, unsigned short, unsigned short)>
    6bf8:	4604      	mov	r4, r0
    6bfa:	4668      	mov	r0, sp
    6bfc:	f005 f9fe 	bl	bffc <String::~String()>
    6c00:	b11c      	cbz	r4, 6c0a <NVData_class::readByte(unsigned short)+0x2e>
	return _data[addr];
    6c02:	6db3      	ldr	r3, [r6, #88]	; 0x58
    6c04:	5d58      	ldrb	r0, [r3, r5]
}
    6c06:	b004      	add	sp, #16
    6c08:	bd70      	pop	{r4, r5, r6, pc}
	//else Serial.println("begin completed.");
	return _ready;
}

byte NVData_class::readByte(uint16_t addr) {
	if (!_check("readByte", addr)) return 0;
    6c0a:	4620      	mov	r0, r4
	return _data[addr];
}
    6c0c:	b004      	add	sp, #16
    6c0e:	bd70      	pop	{r4, r5, r6, pc}
    6c10:	200016e8 	.word	0x200016e8

00006c14 <NVData_class::readWord(unsigned short)>:

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint16_t NVData_class::readWord(uint16_t addr) {
    6c14:	b570      	push	{r4, r5, r6, lr}
    6c16:	b084      	sub	sp, #16
    6c18:	4605      	mov	r5, r0
    6c1a:	460e      	mov	r6, r1
	const char* hdr = "readWord";
	if (!_check(hdr, addr, _size-2)) return 0;
    6c1c:	490e      	ldr	r1, [pc, #56]	; (6c58 <NVData_class::readWord(unsigned short)+0x44>)
    6c1e:	4668      	mov	r0, sp
    6c20:	f005 fa2c 	bl	c07c <String::String(char const*)>
    6c24:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    6c28:	4632      	mov	r2, r6
    6c2a:	4669      	mov	r1, sp
    6c2c:	3b02      	subs	r3, #2
    6c2e:	4628      	mov	r0, r5
    6c30:	b29b      	uxth	r3, r3
    6c32:	f7ff ff71 	bl	6b18 <NVData_class::_check(String, unsigned short, unsigned short)>
    6c36:	4604      	mov	r4, r0
    6c38:	4668      	mov	r0, sp
    6c3a:	f005 f9df 	bl	bffc <String::~String()>
    6c3e:	b144      	cbz	r4, 6c52 <NVData_class::readWord(unsigned short)+0x3e>
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
    6c40:	1c72      	adds	r2, r6, #1
}

uint16_t NVData_class::readWord(uint16_t addr) {
	const char* hdr = "readWord";
	if (!_check(hdr, addr, _size-2)) return 0;
	uint16_t data = _data[addr++];
    6c42:	6da9      	ldr	r1, [r5, #88]	; 0x58
	data |= ((uint16_t)_data[addr]) << 8;
    6c44:	b292      	uxth	r2, r2
    6c46:	5d8b      	ldrb	r3, [r1, r6]
    6c48:	5c88      	ldrb	r0, [r1, r2]
    6c4a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	return data;
}
    6c4e:	b004      	add	sp, #16
    6c50:	bd70      	pop	{r4, r5, r6, pc}
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint16_t NVData_class::readWord(uint16_t addr) {
	const char* hdr = "readWord";
	if (!_check(hdr, addr, _size-2)) return 0;
    6c52:	4620      	mov	r0, r4
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
	return data;
}
    6c54:	b004      	add	sp, #16
    6c56:	bd70      	pop	{r4, r5, r6, pc}
    6c58:	200016f4 	.word	0x200016f4

00006c5c <NVData_class::readDWord(unsigned short)>:
	_data[addr++] = (byte)(val & 0x00ff);
	 _data[addr] = (byte)((val & 0xff00) >> 8);
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint32_t NVData_class::readDWord(uint16_t addr) {
    6c5c:	b570      	push	{r4, r5, r6, lr}
    6c5e:	b084      	sub	sp, #16
    6c60:	4606      	mov	r6, r0
    6c62:	460d      	mov	r5, r1
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
    6c64:	4912      	ldr	r1, [pc, #72]	; (6cb0 <NVData_class::readDWord(unsigned short)+0x54>)
    6c66:	4668      	mov	r0, sp
    6c68:	f005 fa08 	bl	c07c <String::String(char const*)>
    6c6c:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
    6c70:	462a      	mov	r2, r5
    6c72:	4669      	mov	r1, sp
    6c74:	3b04      	subs	r3, #4
    6c76:	4630      	mov	r0, r6
    6c78:	b29b      	uxth	r3, r3
    6c7a:	f7ff ff4d 	bl	6b18 <NVData_class::_check(String, unsigned short, unsigned short)>
    6c7e:	4604      	mov	r4, r0
    6c80:	4668      	mov	r0, sp
    6c82:	f005 f9bb 	bl	bffc <String::~String()>
    6c86:	b174      	cbz	r4, 6ca6 <NVData_class::readDWord(unsigned short)+0x4a>
	uint32_t data = 0;
	uint16_t endAddr = addr + 3;
    6c88:	1ceb      	adds	r3, r5, #3
    6c8a:	b29b      	uxth	r3, r3
	while (endAddr >= addr) {
    6c8c:	429d      	cmp	r5, r3
    6c8e:	d80d      	bhi.n	6cac <NVData_class::readDWord(unsigned short)+0x50>
    6c90:	6db4      	ldr	r4, [r6, #88]	; 0x58
    6c92:	2000      	movs	r0, #0
		data <<= 8;
		data |= _data[endAddr--];
    6c94:	1e59      	subs	r1, r3, #1
    6c96:	5ce2      	ldrb	r2, [r4, r3]
    6c98:	b28b      	uxth	r3, r1
    6c9a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
uint32_t NVData_class::readDWord(uint16_t addr) {
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
	uint32_t data = 0;
	uint16_t endAddr = addr + 3;
	while (endAddr >= addr) {
    6c9e:	429d      	cmp	r5, r3
    6ca0:	d9f8      	bls.n	6c94 <NVData_class::readDWord(unsigned short)+0x38>
		data <<= 8;
		data |= _data[endAddr--];
	}
	return data;
}
    6ca2:	b004      	add	sp, #16
    6ca4:	bd70      	pop	{r4, r5, r6, pc}
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint32_t NVData_class::readDWord(uint16_t addr) {
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
    6ca6:	4620      	mov	r0, r4
	while (endAddr >= addr) {
		data <<= 8;
		data |= _data[endAddr--];
	}
	return data;
}
    6ca8:	b004      	add	sp, #16
    6caa:	bd70      	pop	{r4, r5, r6, pc}
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

uint32_t NVData_class::readDWord(uint16_t addr) {
	const char* hdr = "readDWord";
	if (!_check(hdr, addr, _size-4)) return 0;
    6cac:	2000      	movs	r0, #0
    6cae:	e7f8      	b.n	6ca2 <NVData_class::readDWord(unsigned short)+0x46>
    6cb0:	20001700 	.word	0x20001700

00006cb4 <_GLOBAL__sub_I__ZN12NVData_classC2Ev>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    6cb4:	f003 bd92 	b.w	a7dc <eeprom_initialize>

00006cb8 <NVData_class::_saveData()>:
		break;
	}
	return true;
}

bool NVData_class::_saveData() {
    6cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cbc:	b094      	sub	sp, #80	; 0x50
    6cbe:	4605      	mov	r5, r0
	String hdr = "_saveData";
    6cc0:	495d      	ldr	r1, [pc, #372]	; (6e38 <NVData_class::_saveData()+0x180>)
    6cc2:	4668      	mov	r0, sp
    6cc4:	f005 f9da 	bl	c07c <String::String(char const*)>
    6cc8:	2117      	movs	r1, #23
    6cca:	485c      	ldr	r0, [pc, #368]	; (6e3c <NVData_class::_saveData()+0x184>)
    6ccc:	f004 ff12 	bl	baf4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    6cd0:	485b      	ldr	r0, [pc, #364]	; (6e40 <NVData_class::_saveData()+0x188>)
    6cd2:	f005 f8d1 	bl	be78 <Print::println()>
	Serial.println("- Saving data on NVData");
	if (!_ready) {
    6cd6:	f895 7054 	ldrb.w	r7, [r5, #84]	; 0x54
    6cda:	b187      	cbz	r7, 6cfe <NVData_class::_saveData()+0x46>
		_warnMsg(hdr, notReadyStr);
		return false;
	}

	switch (device) {
    6cdc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    6ce0:	2b01      	cmp	r3, #1
    6ce2:	d052      	beq.n	6d8a <NVData_class::_saveData()+0xd2>
    6ce4:	d339      	bcc.n	6d5a <NVData_class::_saveData()+0xa2>
    6ce6:	2b02      	cmp	r3, #2
    6ce8:	d023      	beq.n	6d32 <NVData_class::_saveData()+0x7a>
		_warnMsg(hdr, notImplemStr);
		//for (uint16_t i = 0; i < _size; i++) ; // TODO..
		break;
	}

	_pendingChanges = false;
    6cea:	2300      	movs	r3, #0
    6cec:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	}
	return true;
}

bool NVData_class::_saveData() {
	String hdr = "_saveData";
    6cf0:	4668      	mov	r0, sp
    6cf2:	f005 f983 	bl	bffc <String::~String()>
		break;
	}

	_pendingChanges = false;
	return true;
}
    6cf6:	4638      	mov	r0, r7
    6cf8:	b014      	add	sp, #80	; 0x50
    6cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool NVData_class::_saveData() {
	String hdr = "_saveData";
	Serial.println("- Saving data on NVData");
	if (!_ready) {
		_warnMsg(hdr, notReadyStr);
    6cfe:	4669      	mov	r1, sp
    6d00:	a808      	add	r0, sp, #32
    6d02:	f005 f9e1 	bl	c0c8 <String::String(String const&)>
    6d06:	69a9      	ldr	r1, [r5, #24]
    6d08:	a80c      	add	r0, sp, #48	; 0x30
    6d0a:	f005 f9cb 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6d0e:	aa0c      	add	r2, sp, #48	; 0x30
    6d10:	a908      	add	r1, sp, #32
    6d12:	4628      	mov	r0, r5
    6d14:	f7ff fd9c 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6d18:	a80c      	add	r0, sp, #48	; 0x30
    6d1a:	f005 f96f 	bl	bffc <String::~String()>
    6d1e:	a808      	add	r0, sp, #32
    6d20:	f005 f96c 	bl	bffc <String::~String()>
	}
	return true;
}

bool NVData_class::_saveData() {
	String hdr = "_saveData";
    6d24:	4668      	mov	r0, sp
    6d26:	f005 f969 	bl	bffc <String::~String()>
		break;
	}

	_pendingChanges = false;
	return true;
}
    6d2a:	4638      	mov	r0, r7
    6d2c:	b014      	add	sp, #80	; 0x50
    6d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		//Serial.print(": _fileBaseAdr = ");
		//Serial.println(_fileBaseAdr);
		_f.close();
		break;
	case FRAM_NVD:
		_warnMsg(hdr, notImplemStr);
    6d32:	4669      	mov	r1, sp
    6d34:	a808      	add	r0, sp, #32
    6d36:	f005 f9c7 	bl	c0c8 <String::String(String const&)>
    6d3a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6d3c:	a80c      	add	r0, sp, #48	; 0x30
    6d3e:	f005 f9b1 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6d42:	aa0c      	add	r2, sp, #48	; 0x30
    6d44:	a908      	add	r1, sp, #32
    6d46:	4628      	mov	r0, r5
    6d48:	f7ff fd82 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6d4c:	a80c      	add	r0, sp, #48	; 0x30
    6d4e:	f005 f955 	bl	bffc <String::~String()>
    6d52:	a808      	add	r0, sp, #32
    6d54:	f005 f952 	bl	bffc <String::~String()>
		//for (uint16_t i = 0; i < _size; i++) ; // TODO..
		break;
    6d58:	e7c7      	b.n	6cea <NVData_class::_saveData()+0x32>
		return false;
	}

	switch (device) {
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) EEPROM.update(i, _data[i]);
    6d5a:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
    6d5e:	f1b8 0f00 	cmp.w	r8, #0
    6d62:	d0c2      	beq.n	6cea <NVData_class::_saveData()+0x32>
    6d64:	2400      	movs	r4, #0
    6d66:	6dab      	ldr	r3, [r5, #88]	; 0x58

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    6d68:	4620      	mov	r0, r4
    6d6a:	5d1e      	ldrb	r6, [r3, r4]
    6d6c:	f003 fd5c 	bl	a828 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    6d70:	4286      	cmp	r6, r0
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    6d72:	4631      	mov	r1, r6
    6d74:	4620      	mov	r0, r4
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    6d76:	d003      	beq.n	6d80 <NVData_class::_saveData()+0xc8>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    6d78:	f003 fd8e 	bl	a898 <eeprom_write_byte>
    6d7c:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
    6d80:	3401      	adds	r4, #1
    6d82:	b2a4      	uxth	r4, r4
    6d84:	45a0      	cmp	r8, r4
    6d86:	d8ee      	bhi.n	6d66 <NVData_class::_saveData()+0xae>
    6d88:	e7af      	b.n	6cea <NVData_class::_saveData()+0x32>
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
    6d8a:	2313      	movs	r3, #19
    6d8c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    6d8e:	a80c      	add	r0, sp, #48	; 0x30
    6d90:	492c      	ldr	r1, [pc, #176]	; (6e44 <NVData_class::_saveData()+0x18c>)
    6d92:	f000 ffd1 	bl	7d38 <SDClass::open(char const*, unsigned char)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    6d96:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    6d9a:	aa14      	add	r2, sp, #80	; 0x50
    6d9c:	f105 0341 	add.w	r3, r5, #65	; 0x41
    6da0:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    6da4:	f105 004e 	add.w	r0, r5, #78	; 0x4e
    6da8:	f812 4d14 	ldrb.w	r4, [r2, #-20]!
    6dac:	990e      	ldr	r1, [sp, #56]	; 0x38
    6dae:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
    6db2:	63e9      	str	r1, [r5, #60]	; 0x3c
    6db4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6db8:	f803 1b01 	strb.w	r1, [r3], #1
    6dbc:	4283      	cmp	r3, r0
    6dbe:	d1f9      	bne.n	6db4 <NVData_class::_saveData()+0xfc>
    6dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		if (!_f) {
    6dc2:	f105 0434 	add.w	r4, r5, #52	; 0x34
	case EEPROM_NVD:
		for (uint16_t i = 0; i < _size; i++) EEPROM.update(i, _data[i]);
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
    6dc6:	a80c      	add	r0, sp, #48	; 0x30
    6dc8:	652b      	str	r3, [r5, #80]	; 0x50
    6dca:	f000 fedf 	bl	7b8c <File::~File()>
		if (!_f) {
    6dce:	4620      	mov	r0, r4
    6dd0:	f000 ff00 	bl	7bd4 <File::operator bool()>
    6dd4:	b180      	cbz	r0, 6df8 <NVData_class::_saveData()+0x140>
			String msg = "Can't open file ";
			msg += _fileName;
			_warnMsg(hdr, msg);
			return false;
		}
		_f.write(_data, _size);
    6dd6:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    6dda:	4620      	mov	r0, r4
    6ddc:	6da9      	ldr	r1, [r5, #88]	; 0x58
    6dde:	f000 fe47 	bl	7a70 <File::write(unsigned char const*, unsigned int)>
		_fileBaseAdr = _f.size() - _size;
    6de2:	4620      	mov	r0, r4
    6de4:	f000 fee4 	bl	7bb0 <File::size()>
    6de8:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    6dec:	1ac3      	subs	r3, r0, r3
		//Serial.print(hdr);
		//Serial.print(": _fileBaseAdr = ");
		//Serial.println(_fileBaseAdr);
		_f.close();
    6dee:	4620      	mov	r0, r4
			msg += _fileName;
			_warnMsg(hdr, msg);
			return false;
		}
		_f.write(_data, _size);
		_fileBaseAdr = _f.size() - _size;
    6df0:	662b      	str	r3, [r5, #96]	; 0x60
		//Serial.print(hdr);
		//Serial.print(": _fileBaseAdr = ");
		//Serial.println(_fileBaseAdr);
		_f.close();
    6df2:	f000 fee1 	bl	7bb8 <File::close()>
		break;
    6df6:	e778      	b.n	6cea <NVData_class::_saveData()+0x32>
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
		if (!_f) {
			String msg = "Can't open file ";
    6df8:	4913      	ldr	r1, [pc, #76]	; (6e48 <NVData_class::_saveData()+0x190>)
			msg += _fileName;
			_warnMsg(hdr, msg);
			return false;
    6dfa:	4607      	mov	r7, r0
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
		if (!_f) {
			String msg = "Can't open file ";
    6dfc:	a804      	add	r0, sp, #16
    6dfe:	f005 f93d 	bl	c07c <String::String(char const*)>
    6e02:	6b29      	ldr	r1, [r5, #48]	; 0x30
    6e04:	a804      	add	r0, sp, #16
    6e06:	f005 fa3b 	bl	c280 <String::append(char const*)>
			msg += _fileName;
			_warnMsg(hdr, msg);
    6e0a:	4669      	mov	r1, sp
    6e0c:	a808      	add	r0, sp, #32
    6e0e:	f005 f95b 	bl	c0c8 <String::String(String const&)>
    6e12:	a904      	add	r1, sp, #16
    6e14:	a80c      	add	r0, sp, #48	; 0x30
    6e16:	f005 f957 	bl	c0c8 <String::String(String const&)>
    6e1a:	aa0c      	add	r2, sp, #48	; 0x30
    6e1c:	a908      	add	r1, sp, #32
    6e1e:	4628      	mov	r0, r5
    6e20:	f7ff fd16 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6e24:	a80c      	add	r0, sp, #48	; 0x30
    6e26:	f005 f8e9 	bl	bffc <String::~String()>
    6e2a:	a808      	add	r0, sp, #32
    6e2c:	f005 f8e6 	bl	bffc <String::~String()>
		break;
	case SDFILE_NVD:
		//if (SD.exists(fileName)) SD.remove(fileName);
		_f = SD.open(_fileName, FILE_WRITE);
		if (!_f) {
			String msg = "Can't open file ";
    6e30:	a804      	add	r0, sp, #16
    6e32:	f005 f8e3 	bl	bffc <String::~String()>
    6e36:	e75b      	b.n	6cf0 <NVData_class::_saveData()+0x38>
    6e38:	2000174c 	.word	0x2000174c
    6e3c:	20001758 	.word	0x20001758
    6e40:	20001ea4 	.word	0x20001ea4
    6e44:	2000298c 	.word	0x2000298c
    6e48:	20001770 	.word	0x20001770

00006e4c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)>:
	}
	_data[addr] = val;
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

void NVData_class::writeBytes(uint16_t addr, const byte* values, uint16_t size) {
    6e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e50:	b08c      	sub	sp, #48	; 0x30
    6e52:	4605      	mov	r5, r0
    6e54:	460c      	mov	r4, r1
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
    6e56:	4949      	ldr	r1, [pc, #292]	; (6f7c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x130>)
    6e58:	a808      	add	r0, sp, #32
	}
	_data[addr] = val;
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}

void NVData_class::writeBytes(uint16_t addr, const byte* values, uint16_t size) {
    6e5a:	4616      	mov	r6, r2
    6e5c:	4698      	mov	r8, r3
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
    6e5e:	f005 f90d 	bl	c07c <String::String(char const*)>
    6e62:	4622      	mov	r2, r4
    6e64:	a908      	add	r1, sp, #32
    6e66:	4628      	mov	r0, r5
    6e68:	2300      	movs	r3, #0
    6e6a:	f7ff fe55 	bl	6b18 <NVData_class::_check(String, unsigned short, unsigned short)>
    6e6e:	4607      	mov	r7, r0
    6e70:	a808      	add	r0, sp, #32
    6e72:	f005 f8c3 	bl	bffc <String::~String()>
    6e76:	b1d7      	cbz	r7, 6eae <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x62>
	if (size == 0) {
    6e78:	f1b8 0f00 	cmp.w	r8, #0
    6e7c:	d01a      	beq.n	6eb4 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x68>
		String st = wrongSizeStr + String(" 0");
		_warnMsg(hdr, st);
		return;
	}
	if (addr + size > _size) {
    6e7e:	eb04 0008 	add.w	r0, r4, r8
    6e82:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    6e86:	4627      	mov	r7, r4
    6e88:	4298      	cmp	r0, r3
    6e8a:	dc42      	bgt.n	6f12 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0xc6>
		size = _size - addr;
		st += size;
		_warnMsg(hdr, st);
	}

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
    6e8c:	4284      	cmp	r4, r0
    6e8e:	da07      	bge.n	6ea0 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x54>
    6e90:	1be1      	subs	r1, r4, r7
    6e92:	6daa      	ldr	r2, [r5, #88]	; 0x58
    6e94:	1c63      	adds	r3, r4, #1
    6e96:	5c71      	ldrb	r1, [r6, r1]
    6e98:	5511      	strb	r1, [r2, r4]
    6e9a:	b29c      	uxth	r4, r3
    6e9c:	4284      	cmp	r4, r0
    6e9e:	dbf7      	blt.n	6e90 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x44>
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    6ea0:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d163      	bne.n	6f70 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x124>
    6ea8:	2301      	movs	r3, #1
    6eaa:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
}
    6eae:	b00c      	add	sp, #48	; 0x30
    6eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(const __FlashStringHelper *pgmstr) : String(pgmstr) {}
    6eb4:	6969      	ldr	r1, [r5, #20]
    6eb6:	a808      	add	r0, sp, #32
    6eb8:	f005 f8f4 	bl	c0a4 <String::String(__FlashStringHelper const*)>
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
	if (size == 0) {
		String st = wrongSizeStr + String(" 0");
    6ebc:	a804      	add	r0, sp, #16
    6ebe:	4930      	ldr	r1, [pc, #192]	; (6f80 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x134>)
    6ec0:	f005 f8dc 	bl	c07c <String::String(char const*)>
    6ec4:	a904      	add	r1, sp, #16
    6ec6:	a808      	add	r0, sp, #32
    6ec8:	f005 fa0c 	bl	c2e4 <operator+(StringSumHelper const&, String const&)>
    6ecc:	4601      	mov	r1, r0
    6ece:	4668      	mov	r0, sp
    6ed0:	f005 f8fa 	bl	c0c8 <String::String(String const&)>
    6ed4:	a804      	add	r0, sp, #16
    6ed6:	f005 f891 	bl	bffc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    6eda:	a808      	add	r0, sp, #32
    6edc:	f005 f88e 	bl	bffc <String::~String()>
		_warnMsg(hdr, st);
    6ee0:	a804      	add	r0, sp, #16
    6ee2:	4926      	ldr	r1, [pc, #152]	; (6f7c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x130>)
    6ee4:	f005 f8ca 	bl	c07c <String::String(char const*)>
    6ee8:	4669      	mov	r1, sp
    6eea:	a808      	add	r0, sp, #32
    6eec:	f005 f8ec 	bl	c0c8 <String::String(String const&)>
    6ef0:	aa08      	add	r2, sp, #32
    6ef2:	a904      	add	r1, sp, #16
    6ef4:	4628      	mov	r0, r5
    6ef6:	f7ff fcab 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6efa:	a808      	add	r0, sp, #32
    6efc:	f005 f87e 	bl	bffc <String::~String()>
    6f00:	a804      	add	r0, sp, #16
    6f02:	f005 f87b 	bl	bffc <String::~String()>
	uint16_t i;
	const char* hdr = "writeBytes";

	if (!_check(hdr, addr)) return;
	if (size == 0) {
		String st = wrongSizeStr + String(" 0");
    6f06:	4668      	mov	r0, sp
    6f08:	f005 f878 	bl	bffc <String::~String()>
		_warnMsg(hdr, st);
	}

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}
    6f0c:	b00c      	add	sp, #48	; 0x30
    6f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		String st = wrongSizeStr + String(" 0");
		_warnMsg(hdr, st);
		return;
	}
	if (addr + size > _size) {
		String st = wrongSizeStr;
    6f12:	6969      	ldr	r1, [r5, #20]
    6f14:	4668      	mov	r0, sp
    6f16:	f005 f8c5 	bl	c0a4 <String::String(__FlashStringHelper const*)>
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    6f1a:	4641      	mov	r1, r8
    6f1c:	4668      	mov	r0, sp
    6f1e:	f005 f9cd 	bl	c2bc <String::append(int)>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    6f22:	4918      	ldr	r1, [pc, #96]	; (6f84 <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x138>)
    6f24:	4668      	mov	r0, sp
    6f26:	f005 f9ab 	bl	c280 <String::append(char const*)>
		st += size;
		st += ": trimming to ";
		size = _size - addr;
		st += size;
    6f2a:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    6f2e:	4668      	mov	r0, sp
    6f30:	ebc4 0808 	rsb	r8, r4, r8
    6f34:	fa1f f888 	uxth.w	r8, r8
    6f38:	4641      	mov	r1, r8
    6f3a:	f005 f9bf 	bl	c2bc <String::append(int)>
		_warnMsg(hdr, st);
    6f3e:	490f      	ldr	r1, [pc, #60]	; (6f7c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x130>)
    6f40:	a804      	add	r0, sp, #16
    6f42:	f005 f89b 	bl	c07c <String::String(char const*)>
    6f46:	4669      	mov	r1, sp
    6f48:	a808      	add	r0, sp, #32
    6f4a:	f005 f8bd 	bl	c0c8 <String::String(String const&)>
    6f4e:	aa08      	add	r2, sp, #32
    6f50:	a904      	add	r1, sp, #16
    6f52:	4628      	mov	r0, r5
    6f54:	f7ff fc7c 	bl	6850 <NVData_class::_warnMsg(String, String)>
    6f58:	a808      	add	r0, sp, #32
    6f5a:	f005 f84f 	bl	bffc <String::~String()>
    6f5e:	a804      	add	r0, sp, #16
    6f60:	f005 f84c 	bl	bffc <String::~String()>
		String st = wrongSizeStr + String(" 0");
		_warnMsg(hdr, st);
		return;
	}
	if (addr + size > _size) {
		String st = wrongSizeStr;
    6f64:	4668      	mov	r0, sp
    6f66:	f005 f849 	bl	bffc <String::~String()>
    6f6a:	eb04 0008 	add.w	r0, r4, r8
    6f6e:	e78d      	b.n	6e8c <NVData_class::writeBytes(unsigned short, unsigned char const*, unsigned short)+0x40>
		st += size;
		_warnMsg(hdr, st);
	}

	for (i = addr; i < addr + size; i++) _data[i] = values[i-addr];
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    6f70:	4628      	mov	r0, r5
    6f72:	f7ff fea1 	bl	6cb8 <NVData_class::_saveData()>
}
    6f76:	b00c      	add	sp, #48	; 0x30
    6f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f7c:	20001790 	.word	0x20001790
    6f80:	2000179c 	.word	0x2000179c
    6f84:	200017a0 	.word	0x200017a0

00006f88 <NVData_class::writeWord(unsigned short, unsigned short)>:
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
	return data;
}

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
    6f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f8a:	b089      	sub	sp, #36	; 0x24
    6f8c:	4604      	mov	r4, r0
    6f8e:	460d      	mov	r5, r1
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
    6f90:	4920      	ldr	r1, [pc, #128]	; (7014 <NVData_class::writeWord(unsigned short, unsigned short)+0x8c>)
    6f92:	a804      	add	r0, sp, #16
	uint16_t data = _data[addr++];
	data |= ((uint16_t)_data[addr]) << 8;
	return data;
}

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
    6f94:	4616      	mov	r6, r2
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
    6f96:	f005 f871 	bl	c07c <String::String(char const*)>
    6f9a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    6f9e:	462a      	mov	r2, r5
    6fa0:	a904      	add	r1, sp, #16
    6fa2:	3b02      	subs	r3, #2
    6fa4:	4620      	mov	r0, r4
    6fa6:	b29b      	uxth	r3, r3
    6fa8:	f7ff fdb6 	bl	6b18 <NVData_class::_check(String, unsigned short, unsigned short)>
    6fac:	4607      	mov	r7, r0
    6fae:	a804      	add	r0, sp, #16
    6fb0:	f005 f824 	bl	bffc <String::~String()>
    6fb4:	b90f      	cbnz	r7, 6fba <NVData_class::writeWord(unsigned short, unsigned short)+0x32>
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
	 _data[addr] = (byte)((val & 0xff00) >> 8);
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
}
    6fb6:	b009      	add	sp, #36	; 0x24
    6fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
	if (readWord(addr) == val) {
    6fba:	4629      	mov	r1, r5
    6fbc:	4620      	mov	r0, r4
    6fbe:	f7ff fe29 	bl	6c14 <NVData_class::readWord(unsigned short)>
    6fc2:	42b0      	cmp	r0, r6
    6fc4:	d012      	beq.n	6fec <NVData_class::writeWord(unsigned short, unsigned short)+0x64>
		_warnMsg(hdr, updatedValsStr);
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
    6fc6:	6da2      	ldr	r2, [r4, #88]	; 0x58
	 _data[addr] = (byte)((val & 0xff00) >> 8);
    6fc8:	1c6b      	adds	r3, r5, #1
    6fca:	0a31      	lsrs	r1, r6, #8
	if (!_check(hdr, addr, _size-2)) return;
	if (readWord(addr) == val) {
		_warnMsg(hdr, updatedValsStr);
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
    6fcc:	5556      	strb	r6, [r2, r5]
	 _data[addr] = (byte)((val & 0xff00) >> 8);
    6fce:	b29b      	uxth	r3, r3
    6fd0:	6da2      	ldr	r2, [r4, #88]	; 0x58
    6fd2:	54d1      	strb	r1, [r2, r3]
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    6fd4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    6fd8:	b923      	cbnz	r3, 6fe4 <NVData_class::writeWord(unsigned short, unsigned short)+0x5c>
    6fda:	2301      	movs	r3, #1
    6fdc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
}
    6fe0:	b009      	add	sp, #36	; 0x24
    6fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_warnMsg(hdr, updatedValsStr);
		return;
	}
	_data[addr++] = (byte)(val & 0x00ff);
	 _data[addr] = (byte)((val & 0xff00) >> 8);
	if (immediateWriteMode) _saveData(); else _pendingChanges = true;
    6fe4:	4620      	mov	r0, r4
    6fe6:	f7ff fe67 	bl	6cb8 <NVData_class::_saveData()>
    6fea:	e7e4      	b.n	6fb6 <NVData_class::writeWord(unsigned short, unsigned short)+0x2e>

void NVData_class::writeWord(uint16_t addr, uint16_t val) {
	const char* hdr = "writeWord";
	if (!_check(hdr, addr, _size-2)) return;
	if (readWord(addr) == val) {
		_warnMsg(hdr, updatedValsStr);
    6fec:	4909      	ldr	r1, [pc, #36]	; (7014 <NVData_class::writeWord(unsigned short, unsigned short)+0x8c>)
    6fee:	4668      	mov	r0, sp
    6ff0:	f005 f844 	bl	c07c <String::String(char const*)>
    6ff4:	6a21      	ldr	r1, [r4, #32]
    6ff6:	a804      	add	r0, sp, #16
    6ff8:	f005 f854 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    6ffc:	aa04      	add	r2, sp, #16
    6ffe:	4669      	mov	r1, sp
    7000:	4620      	mov	r0, r4
    7002:	f7ff fc25 	bl	6850 <NVData_class::_warnMsg(String, String)>
    7006:	a804      	add	r0, sp, #16
    7008:	f004 fff8 	bl	bffc <String::~String()>
    700c:	4668      	mov	r0, sp
    700e:	f004 fff5 	bl	bffc <String::~String()>
		return;
    7012:	e7d0      	b.n	6fb6 <NVData_class::writeWord(unsigned short, unsigned short)+0x2e>
    7014:	200017b0 	.word	0x200017b0

00007018 <NVData_class::update()>:
	}
	Serial.println();
}

void NVData_class::update() {
	if (!immediateWriteMode && _pendingChanges) _saveData();
    7018:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
		if ((i & 0x0f) == 0x0f) Serial.println(); else Serial.print(" ");
	}
	Serial.println();
}

void NVData_class::update() {
    701c:	b510      	push	{r4, lr}
    701e:	4604      	mov	r4, r0
    7020:	b088      	sub	sp, #32
	if (!immediateWriteMode && _pendingChanges) _saveData();
    7022:	b9bb      	cbnz	r3, 7054 <NVData_class::update()+0x3c>
    7024:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
    7028:	b9d3      	cbnz	r3, 7060 <NVData_class::update()+0x48>
	else {
		if (!_pendingChanges) _warnMsg("update", updatedValsStr);
    702a:	490f      	ldr	r1, [pc, #60]	; (7068 <NVData_class::update()+0x50>)
    702c:	a804      	add	r0, sp, #16
    702e:	f005 f825 	bl	c07c <String::String(char const*)>
    7032:	6a21      	ldr	r1, [r4, #32]
    7034:	4668      	mov	r0, sp
    7036:	f005 f835 	bl	c0a4 <String::String(__FlashStringHelper const*)>
    703a:	466a      	mov	r2, sp
    703c:	a904      	add	r1, sp, #16
    703e:	4620      	mov	r0, r4
    7040:	f7ff fc06 	bl	6850 <NVData_class::_warnMsg(String, String)>
    7044:	4668      	mov	r0, sp
    7046:	f004 ffd9 	bl	bffc <String::~String()>
    704a:	a804      	add	r0, sp, #16
    704c:	f004 ffd6 	bl	bffc <String::~String()>
		//Serial.print("immediateWriteMode = ");
		//Serial.print(immediateWriteMode);
		//Serial.print("; _pendingChanges = ");
		//Serial.println(_pendingChanges);
	}
}
    7050:	b008      	add	sp, #32
    7052:	bd10      	pop	{r4, pc}
}

void NVData_class::update() {
	if (!immediateWriteMode && _pendingChanges) _saveData();
	else {
		if (!_pendingChanges) _warnMsg("update", updatedValsStr);
    7054:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
    7058:	2b00      	cmp	r3, #0
    705a:	d0e6      	beq.n	702a <NVData_class::update()+0x12>
		//Serial.print("immediateWriteMode = ");
		//Serial.print(immediateWriteMode);
		//Serial.print("; _pendingChanges = ");
		//Serial.println(_pendingChanges);
	}
}
    705c:	b008      	add	sp, #32
    705e:	bd10      	pop	{r4, pc}
	}
	Serial.println();
}

void NVData_class::update() {
	if (!immediateWriteMode && _pendingChanges) _saveData();
    7060:	f7ff fe2a 	bl	6cb8 <NVData_class::_saveData()>
		//Serial.print("immediateWriteMode = ");
		//Serial.print(immediateWriteMode);
		//Serial.print("; _pendingChanges = ");
		//Serial.println(_pendingChanges);
	}
}
    7064:	b008      	add	sp, #32
    7066:	bd10      	pop	{r4, pc}
    7068:	200017c8 	.word	0x200017c8

0000706c <NVData_class::~NVData_class()>:
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
	_fileBaseAdr = 0;
}

NVData_class::~NVData_class() {
    706c:	b510      	push	{r4, lr}
    706e:	4604      	mov	r4, r0
	update();
    7070:	f7ff ffd2 	bl	7018 <NVData_class::update()>
	delete[] _data;
    7074:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7076:	b108      	cbz	r0, 707c <NVData_class::~NVData_class()+0x10>
    7078:	f004 febe 	bl	bdf8 <operator delete[](void*)>
	_ready = false;
	_fileName = (char*)DEFAULT_FILENAME;
	_fileBaseAdr = 0;
}

NVData_class::~NVData_class() {
    707c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7080:	f000 fd84 	bl	7b8c <File::~File()>
	update();
	delete[] _data;
}
    7084:	4620      	mov	r0, r4
    7086:	bd10      	pop	{r4, pc}

00007088 <PIO::_byteWrite(unsigned char, unsigned char)>:
	_byteWrite(GPPUB, 0); // disable port B weak pullup resistors
	mcpWrite(0); // resets any MCP outputs
}

// GENERIC BYTE WRITE - will write a byte to a register, arguments are register address and the value to write
void PIO::_byteWrite(uint8_t reg, uint8_t value) {      // Accept the register and byte
    7088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    708c:	4d70      	ldr	r5, [pc, #448]	; (7250 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c8>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    708e:	6803      	ldr	r3, [r0, #0]
    7090:	7cee      	ldrb	r6, [r5, #19]
    7092:	e893 0110 	ldmia.w	r3, {r4, r8}
    7096:	2e00      	cmp	r6, #0
    7098:	d038      	beq.n	710c <PIO::_byteWrite(unsigned char, unsigned char)+0x84>
			__disable_irq();
    709a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    709c:	f895 e013 	ldrb.w	lr, [r5, #19]
    70a0:	f01e 0f01 	tst.w	lr, #1
    70a4:	4673      	mov	r3, lr
    70a6:	d008      	beq.n	70ba <PIO::_byteWrite(unsigned char, unsigned char)+0x32>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    70a8:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 7274 <PIO::_byteWrite(unsigned char, unsigned char)+0x1ec>
    70ac:	696f      	ldr	r7, [r5, #20]
    70ae:	f8dc 6000 	ldr.w	r6, [ip]
    70b2:	403e      	ands	r6, r7
    70b4:	62ae      	str	r6, [r5, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    70b6:	f8cc 6000 	str.w	r6, [ip]
			}
			if (interruptMasksUsed & 0x02) {
    70ba:	f01e 0f02 	tst.w	lr, #2
    70be:	d009      	beq.n	70d4 <PIO::_byteWrite(unsigned char, unsigned char)+0x4c>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    70c0:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 7278 <PIO::_byteWrite(unsigned char, unsigned char)+0x1f0>
    70c4:	69af      	ldr	r7, [r5, #24]
    70c6:	f8de 6000 	ldr.w	r6, [lr]
    70ca:	7ceb      	ldrb	r3, [r5, #19]
    70cc:	403e      	ands	r6, r7
    70ce:	62ee      	str	r6, [r5, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    70d0:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x04) {
    70d4:	075f      	lsls	r7, r3, #29
    70d6:	d509      	bpl.n	70ec <PIO::_byteWrite(unsigned char, unsigned char)+0x64>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    70d8:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 727c <PIO::_byteWrite(unsigned char, unsigned char)+0x1f4>
    70dc:	69ef      	ldr	r7, [r5, #28]
    70de:	f8de 6000 	ldr.w	r6, [lr]
    70e2:	7ceb      	ldrb	r3, [r5, #19]
    70e4:	403e      	ands	r6, r7
    70e6:	632e      	str	r6, [r5, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    70e8:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x08) {
    70ec:	071e      	lsls	r6, r3, #28
    70ee:	d509      	bpl.n	7104 <PIO::_byteWrite(unsigned char, unsigned char)+0x7c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    70f0:	f8df e18c 	ldr.w	lr, [pc, #396]	; 7280 <PIO::_byteWrite(unsigned char, unsigned char)+0x1f8>
    70f4:	6a2f      	ldr	r7, [r5, #32]
    70f6:	f8de 6000 	ldr.w	r6, [lr]
    70fa:	7ceb      	ldrb	r3, [r5, #19]
    70fc:	403e      	ands	r6, r7
    70fe:	636e      	str	r6, [r5, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7100:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x10) {
    7104:	06df      	lsls	r7, r3, #27
    7106:	f100 8081 	bmi.w	720c <PIO::_byteWrite(unsigned char, unsigned char)+0x184>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    710a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    710c:	68ab      	ldr	r3, [r5, #8]
    710e:	4e50      	ldr	r6, [pc, #320]	; (7250 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c8>)
    7110:	42a3      	cmp	r3, r4
    7112:	f000 8084 	beq.w	721e <PIO::_byteWrite(unsigned char, unsigned char)+0x196>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7116:	4b4f      	ldr	r3, [pc, #316]	; (7254 <PIO::_byteWrite(unsigned char, unsigned char)+0x1cc>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7118:	f8df e168 	ldr.w	lr, [pc, #360]	; 7284 <PIO::_byteWrite(unsigned char, unsigned char)+0x1fc>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    711c:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    711e:	60b4      	str	r4, [r6, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7120:	f3c3 1601 	ubfx	r6, r3, #4, #2
    7124:	f3c3 6382 	ubfx	r3, r3, #26, #3
    7128:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
    712c:	3301      	adds	r3, #1
    712e:	fbb6 f6f3 	udiv	r6, r6, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7132:	2c00      	cmp	r4, #0
    7134:	d065      	beq.n	7202 <PIO::_byteWrite(unsigned char, unsigned char)+0x17a>
    7136:	fbb6 f3f4 	udiv	r3, r6, r4

			if (d && clkhz/d > _clock) d++;
    713a:	2b00      	cmp	r3, #0
    713c:	d064      	beq.n	7208 <PIO::_byteWrite(unsigned char, unsigned char)+0x180>
    713e:	fbb6 f6f3 	udiv	r6, r6, r3
    7142:	42a6      	cmp	r6, r4
    7144:	bf88      	it	hi
    7146:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7148:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    714c:	d376      	bcc.n	723c <PIO::_byteWrite(unsigned char, unsigned char)+0x1b4>
    714e:	f647 74ff 	movw	r4, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7152:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7154:	f04f 0c00 	mov.w	ip, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7158:	f04f 0e03 	mov.w	lr, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    715c:	2601      	movs	r6, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    715e:	f8c3 c010 	str.w	ip, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7162:	60ec      	str	r4, [r5, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7164:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7168:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    716a:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    716e:	611e      	str	r6, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    7170:	7904      	ldrb	r4, [r0, #4]
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7172:	0124      	lsls	r4, r4, #4
    7174:	4e38      	ldr	r6, [pc, #224]	; (7258 <PIO::_byteWrite(unsigned char, unsigned char)+0x1d0>)
    7176:	1937      	adds	r7, r6, r4
    7178:	5934      	ldr	r4, [r6, r4]
    717a:	68ff      	ldr	r7, [r7, #12]
    717c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7180:	7944      	ldrb	r4, [r0, #5]
    7182:	0064      	lsls	r4, r4, #1
    7184:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    7188:	b2e4      	uxtb	r4, r4
    718a:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    718c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    718e:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    7192:	d0fb      	beq.n	718c <PIO::_byteWrite(unsigned char, unsigned char)+0x104>
    7194:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7196:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7198:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    719a:	f411 1ff8 	tst.w	r1, #2031616	; 0x1f0000
    719e:	d0fb      	beq.n	7198 <PIO::_byteWrite(unsigned char, unsigned char)+0x110>
    71a0:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    71a2:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    71a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    71a6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    71aa:	d0fb      	beq.n	71a4 <PIO::_byteWrite(unsigned char, unsigned char)+0x11c>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    71ac:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    71ae:	7ce9      	ldrb	r1, [r5, #19]
    71b0:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    71b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    71b4:	4c26      	ldr	r4, [pc, #152]	; (7250 <PIO::_byteWrite(unsigned char, unsigned char)+0x1c8>)
    71b6:	460b      	mov	r3, r1
    71b8:	18b0      	adds	r0, r6, r2
    71ba:	58b2      	ldr	r2, [r6, r2]
    71bc:	68c0      	ldr	r0, [r0, #12]
    71be:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    71c2:	2900      	cmp	r1, #0
    71c4:	d029      	beq.n	721a <PIO::_byteWrite(unsigned char, unsigned char)+0x192>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    71c6:	07ce      	lsls	r6, r1, #31
    71c8:	d502      	bpl.n	71d0 <PIO::_byteWrite(unsigned char, unsigned char)+0x148>
    71ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    71cc:	4a23      	ldr	r2, [pc, #140]	; (725c <PIO::_byteWrite(unsigned char, unsigned char)+0x1d4>)
    71ce:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    71d0:	0788      	lsls	r0, r1, #30
    71d2:	d503      	bpl.n	71dc <PIO::_byteWrite(unsigned char, unsigned char)+0x154>
    71d4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    71d6:	4a22      	ldr	r2, [pc, #136]	; (7260 <PIO::_byteWrite(unsigned char, unsigned char)+0x1d8>)
    71d8:	7ceb      	ldrb	r3, [r5, #19]
    71da:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    71dc:	0759      	lsls	r1, r3, #29
    71de:	d503      	bpl.n	71e8 <PIO::_byteWrite(unsigned char, unsigned char)+0x160>
    71e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    71e2:	4a20      	ldr	r2, [pc, #128]	; (7264 <PIO::_byteWrite(unsigned char, unsigned char)+0x1dc>)
    71e4:	7ceb      	ldrb	r3, [r5, #19]
    71e6:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    71e8:	071a      	lsls	r2, r3, #28
    71ea:	d503      	bpl.n	71f4 <PIO::_byteWrite(unsigned char, unsigned char)+0x16c>
    71ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
    71ee:	4a1e      	ldr	r2, [pc, #120]	; (7268 <PIO::_byteWrite(unsigned char, unsigned char)+0x1e0>)
    71f0:	7ceb      	ldrb	r3, [r5, #19]
    71f2:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    71f4:	06db      	lsls	r3, r3, #27
    71f6:	d510      	bpl.n	721a <PIO::_byteWrite(unsigned char, unsigned char)+0x192>
    71f8:	6baa      	ldr	r2, [r5, #56]	; 0x38
    71fa:	4b1c      	ldr	r3, [pc, #112]	; (726c <PIO::_byteWrite(unsigned char, unsigned char)+0x1e4>)
    71fc:	601a      	str	r2, [r3, #0]
	_SPIstart();                                 // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(reg);                                   // Send the register we want to write
	SPI.transfer(value);                                 // Send the byte
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    71fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7202:	4633      	mov	r3, r6

			if (d && clkhz/d > _clock) d++;
    7204:	2b00      	cmp	r3, #0
    7206:	d19a      	bne.n	713e <PIO::_byteWrite(unsigned char, unsigned char)+0xb6>
    7208:	461c      	mov	r4, r3
    720a:	e7a2      	b.n	7152 <PIO::_byteWrite(unsigned char, unsigned char)+0xca>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    720c:	4e18      	ldr	r6, [pc, #96]	; (7270 <PIO::_byteWrite(unsigned char, unsigned char)+0x1e8>)
    720e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    7210:	6833      	ldr	r3, [r6, #0]
    7212:	403b      	ands	r3, r7
    7214:	63ab      	str	r3, [r5, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7216:	6033      	str	r3, [r6, #0]
    7218:	e777      	b.n	710a <PIO::_byteWrite(unsigned char, unsigned char)+0x82>
    721a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    721e:	6833      	ldr	r3, [r6, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7220:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    7222:	68f6      	ldr	r6, [r6, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7224:	f04f 0e03 	mov.w	lr, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7228:	611c      	str	r4, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    722a:	2401      	movs	r4, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    722c:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7230:	641e      	str	r6, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7232:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7236:	611c      	str	r4, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    7238:	7904      	ldrb	r4, [r0, #4]
    723a:	e79a      	b.n	7172 <PIO::_byteWrite(unsigned char, unsigned char)+0xea>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    723c:	2b02      	cmp	r3, #2
    723e:	d904      	bls.n	724a <PIO::_byteWrite(unsigned char, unsigned char)+0x1c2>
    7240:	3b02      	subs	r3, #2
    7242:	085c      	lsrs	r4, r3, #1
    7244:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    7248:	e783      	b.n	7152 <PIO::_byteWrite(unsigned char, unsigned char)+0xca>
    724a:	2400      	movs	r4, #0
    724c:	e781      	b.n	7152 <PIO::_byteWrite(unsigned char, unsigned char)+0xca>
    724e:	bf00      	nop
    7250:	20001e1c 	.word	0x20001e1c
    7254:	400fc000 	.word	0x400fc000
    7258:	20001854 	.word	0x20001854
    725c:	e000e100 	.word	0xe000e100
    7260:	e000e104 	.word	0xe000e104
    7264:	e000e108 	.word	0xe000e108
    7268:	e000e10c 	.word	0xe000e10c
    726c:	e000e110 	.word	0xe000e110
    7270:	e000e190 	.word	0xe000e190
    7274:	e000e180 	.word	0xe000e180
    7278:	e000e184 	.word	0xe000e184
    727c:	e000e188 	.word	0xe000e188
    7280:	e000e18c 	.word	0xe000e18c
    7284:	200014c0 	.word	0x200014c0

00007288 <PIO::mcpReadPB()>:

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7288:	4965      	ldr	r1, [pc, #404]	; (7420 <PIO::mcpReadPB()+0x198>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    728a:	6803      	ldr	r3, [r0, #0]
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
}

byte PIO::mcpReadPB() {       // This function will read 8 bits of I/O
    728c:	b5f0      	push	{r4, r5, r6, r7, lr}
    728e:	7ccc      	ldrb	r4, [r1, #19]
    7290:	e893 0024 	ldmia.w	r3, {r2, r5}
    7294:	2c00      	cmp	r4, #0
    7296:	d02b      	beq.n	72f0 <PIO::mcpReadPB()+0x68>
			__disable_irq();
    7298:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    729a:	7ccb      	ldrb	r3, [r1, #19]
    729c:	07de      	lsls	r6, r3, #31
    729e:	461c      	mov	r4, r3
    72a0:	d508      	bpl.n	72b4 <PIO::mcpReadPB()+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    72a2:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 7454 <PIO::mcpReadPB()+0x1cc>
    72a6:	694f      	ldr	r7, [r1, #20]
    72a8:	f8de 6000 	ldr.w	r6, [lr]
    72ac:	403e      	ands	r6, r7
    72ae:	628e      	str	r6, [r1, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    72b0:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    72b4:	079b      	lsls	r3, r3, #30
    72b6:	d506      	bpl.n	72c6 <PIO::mcpReadPB()+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    72b8:	4e5a      	ldr	r6, [pc, #360]	; (7424 <PIO::mcpReadPB()+0x19c>)
    72ba:	698b      	ldr	r3, [r1, #24]
    72bc:	6837      	ldr	r7, [r6, #0]
    72be:	7ccc      	ldrb	r4, [r1, #19]
    72c0:	403b      	ands	r3, r7
    72c2:	62cb      	str	r3, [r1, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    72c4:	6033      	str	r3, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    72c6:	0767      	lsls	r7, r4, #29
    72c8:	d506      	bpl.n	72d8 <PIO::mcpReadPB()+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    72ca:	4e57      	ldr	r6, [pc, #348]	; (7428 <PIO::mcpReadPB()+0x1a0>)
    72cc:	69cb      	ldr	r3, [r1, #28]
    72ce:	6837      	ldr	r7, [r6, #0]
    72d0:	7ccc      	ldrb	r4, [r1, #19]
    72d2:	403b      	ands	r3, r7
    72d4:	630b      	str	r3, [r1, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    72d6:	6033      	str	r3, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    72d8:	0726      	lsls	r6, r4, #28
    72da:	d506      	bpl.n	72ea <PIO::mcpReadPB()+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    72dc:	4e53      	ldr	r6, [pc, #332]	; (742c <PIO::mcpReadPB()+0x1a4>)
    72de:	6a0b      	ldr	r3, [r1, #32]
    72e0:	6837      	ldr	r7, [r6, #0]
    72e2:	7ccc      	ldrb	r4, [r1, #19]
    72e4:	403b      	ands	r3, r7
    72e6:	634b      	str	r3, [r1, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    72e8:	6033      	str	r3, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    72ea:	06e3      	lsls	r3, r4, #27
    72ec:	d47b      	bmi.n	73e6 <PIO::mcpReadPB()+0x15e>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    72ee:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    72f0:	688b      	ldr	r3, [r1, #8]
    72f2:	4c4b      	ldr	r4, [pc, #300]	; (7420 <PIO::mcpReadPB()+0x198>)
    72f4:	4293      	cmp	r3, r2
    72f6:	d07e      	beq.n	73f6 <PIO::mcpReadPB()+0x16e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    72f8:	4b4d      	ldr	r3, [pc, #308]	; (7430 <PIO::mcpReadPB()+0x1a8>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    72fa:	4e4e      	ldr	r6, [pc, #312]	; (7434 <PIO::mcpReadPB()+0x1ac>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    72fc:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    72fe:	60a2      	str	r2, [r4, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7300:	f3c3 1401 	ubfx	r4, r3, #4, #2
    7304:	f3c3 6382 	ubfx	r3, r3, #26, #3
    7308:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
    730c:	3301      	adds	r3, #1
    730e:	fbb4 f4f3 	udiv	r4, r4, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7312:	2a00      	cmp	r2, #0
    7314:	d062      	beq.n	73dc <PIO::mcpReadPB()+0x154>
    7316:	fbb4 f3f2 	udiv	r3, r4, r2

			if (d && clkhz/d > _clock) d++;
    731a:	2b00      	cmp	r3, #0
    731c:	d061      	beq.n	73e2 <PIO::mcpReadPB()+0x15a>
    731e:	fbb4 f4f3 	udiv	r4, r4, r3
    7322:	4294      	cmp	r4, r2
    7324:	bf88      	it	hi
    7326:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7328:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    732c:	d36f      	bcc.n	740e <PIO::mcpReadPB()+0x186>
    732e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7332:	680b      	ldr	r3, [r1, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7334:	2700      	movs	r7, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7336:	2603      	movs	r6, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7338:	2401      	movs	r4, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    733a:	611f      	str	r7, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    733c:	60ca      	str	r2, [r1, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    733e:	625e      	str	r6, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7340:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7342:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7344:	611c      	str	r4, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    7346:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7348:	0112      	lsls	r2, r2, #4
    734a:	4c3b      	ldr	r4, [pc, #236]	; (7438 <PIO::mcpReadPB()+0x1b0>)
    734c:	18a5      	adds	r5, r4, r2
    734e:	58a2      	ldr	r2, [r4, r2]
    7350:	68ed      	ldr	r5, [r5, #12]
    7352:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7356:	7942      	ldrb	r2, [r0, #5]
    7358:	0052      	lsls	r2, r2, #1
    735a:	f042 0241 	orr.w	r2, r2, #65	; 0x41
    735e:	b2d2      	uxtb	r2, r2
    7360:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7364:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7368:	d0fb      	beq.n	7362 <PIO::mcpReadPB()+0xda>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    736a:	2213      	movs	r2, #19
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    736c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    736e:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7370:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7372:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7376:	d0fb      	beq.n	7370 <PIO::mcpReadPB()+0xe8>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7378:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    737a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    737c:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    737e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7380:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7384:	d0fb      	beq.n	737e <PIO::mcpReadPB()+0xf6>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    7386:	7902      	ldrb	r2, [r0, #4]
    7388:	6f58      	ldr	r0, [r3, #116]	; 0x74
    738a:	0113      	lsls	r3, r2, #4
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    738c:	7cca      	ldrb	r2, [r1, #19]
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    738e:	b2c0      	uxtb	r0, r0
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7390:	4e23      	ldr	r6, [pc, #140]	; (7420 <PIO::mcpReadPB()+0x198>)
    7392:	18e5      	adds	r5, r4, r3
    7394:	58e4      	ldr	r4, [r4, r3]
    7396:	4613      	mov	r3, r2
    7398:	68ed      	ldr	r5, [r5, #12]
    739a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    739e:	2a00      	cmp	r2, #0
    73a0:	d028      	beq.n	73f4 <PIO::mcpReadPB()+0x16c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    73a2:	07d7      	lsls	r7, r2, #31
    73a4:	d502      	bpl.n	73ac <PIO::mcpReadPB()+0x124>
    73a6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    73a8:	4c24      	ldr	r4, [pc, #144]	; (743c <PIO::mcpReadPB()+0x1b4>)
    73aa:	6025      	str	r5, [r4, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    73ac:	0795      	lsls	r5, r2, #30
    73ae:	d503      	bpl.n	73b8 <PIO::mcpReadPB()+0x130>
    73b0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    73b2:	4a23      	ldr	r2, [pc, #140]	; (7440 <PIO::mcpReadPB()+0x1b8>)
    73b4:	7ccb      	ldrb	r3, [r1, #19]
    73b6:	6014      	str	r4, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    73b8:	075c      	lsls	r4, r3, #29
    73ba:	d503      	bpl.n	73c4 <PIO::mcpReadPB()+0x13c>
    73bc:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    73be:	4a21      	ldr	r2, [pc, #132]	; (7444 <PIO::mcpReadPB()+0x1bc>)
    73c0:	7ccb      	ldrb	r3, [r1, #19]
    73c2:	6014      	str	r4, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    73c4:	071a      	lsls	r2, r3, #28
    73c6:	d503      	bpl.n	73d0 <PIO::mcpReadPB()+0x148>
    73c8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    73ca:	4a1f      	ldr	r2, [pc, #124]	; (7448 <PIO::mcpReadPB()+0x1c0>)
    73cc:	7ccb      	ldrb	r3, [r1, #19]
    73ce:	6014      	str	r4, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    73d0:	06db      	lsls	r3, r3, #27
    73d2:	d50f      	bpl.n	73f4 <PIO::mcpReadPB()+0x16c>
    73d4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    73d6:	4b1d      	ldr	r3, [pc, #116]	; (744c <PIO::mcpReadPB()+0x1c4>)
    73d8:	601a      	str	r2, [r3, #0]
	_SPIstart();                      // Slave Select LOW before SPI action
	SPI.transfer(OPCODER | (_adr << 1));  // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOB);                      // Send the register we want to read
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
    73da:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    73dc:	4623      	mov	r3, r4

			if (d && clkhz/d > _clock) d++;
    73de:	2b00      	cmp	r3, #0
    73e0:	d19d      	bne.n	731e <PIO::mcpReadPB()+0x96>
    73e2:	461a      	mov	r2, r3
    73e4:	e7a5      	b.n	7332 <PIO::mcpReadPB()+0xaa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    73e6:	4c1a      	ldr	r4, [pc, #104]	; (7450 <PIO::mcpReadPB()+0x1c8>)
    73e8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    73ea:	6826      	ldr	r6, [r4, #0]
    73ec:	4033      	ands	r3, r6
    73ee:	638b      	str	r3, [r1, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    73f0:	6023      	str	r3, [r4, #0]
    73f2:	e77c      	b.n	72ee <PIO::mcpReadPB()+0x66>
}
    73f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    73f6:	6823      	ldr	r3, [r4, #0]
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    73f8:	2201      	movs	r2, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    73fa:	2700      	movs	r7, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    73fc:	68e4      	ldr	r4, [r4, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    73fe:	2603      	movs	r6, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7400:	611f      	str	r7, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7402:	625e      	str	r6, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7404:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7406:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7408:	611a      	str	r2, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    740a:	7902      	ldrb	r2, [r0, #4]
    740c:	e79c      	b.n	7348 <PIO::mcpReadPB()+0xc0>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    740e:	2b02      	cmp	r3, #2
    7410:	d904      	bls.n	741c <PIO::mcpReadPB()+0x194>
    7412:	3b02      	subs	r3, #2
    7414:	085a      	lsrs	r2, r3, #1
    7416:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    741a:	e78a      	b.n	7332 <PIO::mcpReadPB()+0xaa>
    741c:	2200      	movs	r2, #0
    741e:	e788      	b.n	7332 <PIO::mcpReadPB()+0xaa>
    7420:	20001e1c 	.word	0x20001e1c
    7424:	e000e184 	.word	0xe000e184
    7428:	e000e188 	.word	0xe000e188
    742c:	e000e18c 	.word	0xe000e18c
    7430:	400fc000 	.word	0x400fc000
    7434:	200014c0 	.word	0x200014c0
    7438:	20001854 	.word	0x20001854
    743c:	e000e100 	.word	0xe000e100
    7440:	e000e104 	.word	0xe000e104
    7444:	e000e108 	.word	0xe000e108
    7448:	e000e10c 	.word	0xe000e10c
    744c:	e000e110 	.word	0xe000e110
    7450:	e000e190 	.word	0xe000e190
    7454:	e000e180 	.word	0xe000e180

00007458 <PIO::mcpWrite(unsigned short)>:
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
}

void PIO::mcpWrite(uint16_t value) {
    7458:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    745a:	4c6b      	ldr	r4, [pc, #428]	; (7608 <PIO::mcpWrite(unsigned short)+0x1b0>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    745c:	6803      	ldr	r3, [r0, #0]
    745e:	7ce5      	ldrb	r5, [r4, #19]
    7460:	e893 1004 	ldmia.w	r3, {r2, ip}
    7464:	2d00      	cmp	r5, #0
    7466:	d02c      	beq.n	74c2 <PIO::mcpWrite(unsigned short)+0x6a>
			__disable_irq();
    7468:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    746a:	7ce5      	ldrb	r5, [r4, #19]
    746c:	07ef      	lsls	r7, r5, #31
    746e:	462b      	mov	r3, r5
    7470:	d508      	bpl.n	7484 <PIO::mcpWrite(unsigned short)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7472:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 763c <PIO::mcpWrite(unsigned short)+0x1e4>
    7476:	6966      	ldr	r6, [r4, #20]
    7478:	f8de 7000 	ldr.w	r7, [lr]
    747c:	4037      	ands	r7, r6
    747e:	62a7      	str	r7, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7480:	f8ce 7000 	str.w	r7, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    7484:	07ae      	lsls	r6, r5, #30
    7486:	d506      	bpl.n	7496 <PIO::mcpWrite(unsigned short)+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7488:	4f60      	ldr	r7, [pc, #384]	; (760c <PIO::mcpWrite(unsigned short)+0x1b4>)
    748a:	69a6      	ldr	r6, [r4, #24]
    748c:	683d      	ldr	r5, [r7, #0]
    748e:	7ce3      	ldrb	r3, [r4, #19]
    7490:	4035      	ands	r5, r6
    7492:	62e5      	str	r5, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7494:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x04) {
    7496:	075d      	lsls	r5, r3, #29
    7498:	d506      	bpl.n	74a8 <PIO::mcpWrite(unsigned short)+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    749a:	4f5d      	ldr	r7, [pc, #372]	; (7610 <PIO::mcpWrite(unsigned short)+0x1b8>)
    749c:	69e6      	ldr	r6, [r4, #28]
    749e:	683d      	ldr	r5, [r7, #0]
    74a0:	7ce3      	ldrb	r3, [r4, #19]
    74a2:	4035      	ands	r5, r6
    74a4:	6325      	str	r5, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    74a6:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x08) {
    74a8:	071f      	lsls	r7, r3, #28
    74aa:	d506      	bpl.n	74ba <PIO::mcpWrite(unsigned short)+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    74ac:	4f59      	ldr	r7, [pc, #356]	; (7614 <PIO::mcpWrite(unsigned short)+0x1bc>)
    74ae:	6a26      	ldr	r6, [r4, #32]
    74b0:	683d      	ldr	r5, [r7, #0]
    74b2:	7ce3      	ldrb	r3, [r4, #19]
    74b4:	4035      	ands	r5, r6
    74b6:	6365      	str	r5, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    74b8:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x10) {
    74ba:	06de      	lsls	r6, r3, #27
    74bc:	f100 8086 	bmi.w	75cc <PIO::mcpWrite(unsigned short)+0x174>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    74c0:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    74c2:	68a3      	ldr	r3, [r4, #8]
    74c4:	4d50      	ldr	r5, [pc, #320]	; (7608 <PIO::mcpWrite(unsigned short)+0x1b0>)
    74c6:	4293      	cmp	r3, r2
    74c8:	f000 8088 	beq.w	75dc <PIO::mcpWrite(unsigned short)+0x184>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    74cc:	4b52      	ldr	r3, [pc, #328]	; (7618 <PIO::mcpWrite(unsigned short)+0x1c0>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    74ce:	4f53      	ldr	r7, [pc, #332]	; (761c <PIO::mcpWrite(unsigned short)+0x1c4>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    74d0:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    74d2:	60aa      	str	r2, [r5, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    74d4:	f3c3 1501 	ubfx	r5, r3, #4, #2
    74d8:	f3c3 6382 	ubfx	r3, r3, #26, #3
    74dc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    74e0:	3301      	adds	r3, #1
    74e2:	fbb5 f5f3 	udiv	r5, r5, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    74e6:	2a00      	cmp	r2, #0
    74e8:	d06b      	beq.n	75c2 <PIO::mcpWrite(unsigned short)+0x16a>
    74ea:	fbb5 f3f2 	udiv	r3, r5, r2

			if (d && clkhz/d > _clock) d++;
    74ee:	2b00      	cmp	r3, #0
    74f0:	d06a      	beq.n	75c8 <PIO::mcpWrite(unsigned short)+0x170>
    74f2:	fbb5 f5f3 	udiv	r5, r5, r3
    74f6:	4295      	cmp	r5, r2
    74f8:	bf88      	it	hi
    74fa:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    74fc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    7500:	d379      	bcc.n	75f6 <PIO::mcpWrite(unsigned short)+0x19e>
    7502:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7506:	6823      	ldr	r3, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7508:	f04f 0e00 	mov.w	lr, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    750c:	2703      	movs	r7, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    750e:	2501      	movs	r5, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7510:	f8c3 e010 	str.w	lr, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7514:	60e2      	str	r2, [r4, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7516:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7518:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    751a:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    751e:	611d      	str	r5, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    7520:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7522:	0112      	lsls	r2, r2, #4
    7524:	4d3e      	ldr	r5, [pc, #248]	; (7620 <PIO::mcpWrite(unsigned short)+0x1c8>)
    7526:	18ae      	adds	r6, r5, r2
    7528:	58aa      	ldr	r2, [r5, r2]
    752a:	68f6      	ldr	r6, [r6, #12]
    752c:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7530:	7942      	ldrb	r2, [r0, #5]
    7532:	0052      	lsls	r2, r2, #1
    7534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7538:	b2d2      	uxtb	r2, r2
    753a:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    753c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    753e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7542:	d0fb      	beq.n	753c <PIO::mcpWrite(unsigned short)+0xe4>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7544:	2212      	movs	r2, #18
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7546:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7548:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    754a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    754c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7550:	d0fb      	beq.n	754a <PIO::mcpWrite(unsigned short)+0xf2>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7552:	b2ca      	uxtb	r2, r1
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7554:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7556:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    755a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    755e:	d0fb      	beq.n	7558 <PIO::mcpWrite(unsigned short)+0x100>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7560:	1209      	asrs	r1, r1, #8
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7562:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7564:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7568:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    756c:	d0fb      	beq.n	7566 <PIO::mcpWrite(unsigned short)+0x10e>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    756e:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7570:	7ce1      	ldrb	r1, [r4, #19]
    7572:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7576:	4e24      	ldr	r6, [pc, #144]	; (7608 <PIO::mcpWrite(unsigned short)+0x1b0>)
    7578:	460b      	mov	r3, r1
    757a:	18a8      	adds	r0, r5, r2
    757c:	58aa      	ldr	r2, [r5, r2]
    757e:	68c0      	ldr	r0, [r0, #12]
    7580:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    7584:	2900      	cmp	r1, #0
    7586:	d028      	beq.n	75da <PIO::mcpWrite(unsigned short)+0x182>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7588:	07cd      	lsls	r5, r1, #31
    758a:	d502      	bpl.n	7592 <PIO::mcpWrite(unsigned short)+0x13a>
    758c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    758e:	4a25      	ldr	r2, [pc, #148]	; (7624 <PIO::mcpWrite(unsigned short)+0x1cc>)
    7590:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7592:	0788      	lsls	r0, r1, #30
    7594:	d503      	bpl.n	759e <PIO::mcpWrite(unsigned short)+0x146>
    7596:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7598:	4a23      	ldr	r2, [pc, #140]	; (7628 <PIO::mcpWrite(unsigned short)+0x1d0>)
    759a:	7ce3      	ldrb	r3, [r4, #19]
    759c:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    759e:	0759      	lsls	r1, r3, #29
    75a0:	d503      	bpl.n	75aa <PIO::mcpWrite(unsigned short)+0x152>
    75a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    75a4:	4a21      	ldr	r2, [pc, #132]	; (762c <PIO::mcpWrite(unsigned short)+0x1d4>)
    75a6:	7ce3      	ldrb	r3, [r4, #19]
    75a8:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    75aa:	071a      	lsls	r2, r3, #28
    75ac:	d503      	bpl.n	75b6 <PIO::mcpWrite(unsigned short)+0x15e>
    75ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    75b0:	4a1f      	ldr	r2, [pc, #124]	; (7630 <PIO::mcpWrite(unsigned short)+0x1d8>)
    75b2:	7ce3      	ldrb	r3, [r4, #19]
    75b4:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    75b6:	06db      	lsls	r3, r3, #27
    75b8:	d50f      	bpl.n	75da <PIO::mcpWrite(unsigned short)+0x182>
    75ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    75bc:	4b1d      	ldr	r3, [pc, #116]	; (7634 <PIO::mcpWrite(unsigned short)+0x1dc>)
    75be:	601a      	str	r2, [r3, #0]
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer((uint8_t)(value & 0xff));                      // Send the low byte (register address pointer will auto-increment after write)
	SPI.transfer((uint8_t)(value >> 8));                 // Shift the high byte down to the low byte location and send
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    75c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    75c2:	462b      	mov	r3, r5

			if (d && clkhz/d > _clock) d++;
    75c4:	2b00      	cmp	r3, #0
    75c6:	d194      	bne.n	74f2 <PIO::mcpWrite(unsigned short)+0x9a>
    75c8:	461a      	mov	r2, r3
    75ca:	e79c      	b.n	7506 <PIO::mcpWrite(unsigned short)+0xae>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    75cc:	4d1a      	ldr	r5, [pc, #104]	; (7638 <PIO::mcpWrite(unsigned short)+0x1e0>)
    75ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    75d0:	682f      	ldr	r7, [r5, #0]
    75d2:	403b      	ands	r3, r7
    75d4:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    75d6:	602b      	str	r3, [r5, #0]
    75d8:	e772      	b.n	74c0 <PIO::mcpWrite(unsigned short)+0x68>
    75da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    75dc:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    75de:	2200      	movs	r2, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    75e0:	68ed      	ldr	r5, [r5, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    75e2:	2703      	movs	r7, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    75e4:	611a      	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    75e6:	2201      	movs	r2, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    75e8:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    75ea:	641d      	str	r5, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    75ec:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    75f0:	611a      	str	r2, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    75f2:	7902      	ldrb	r2, [r0, #4]
    75f4:	e795      	b.n	7522 <PIO::mcpWrite(unsigned short)+0xca>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    75f6:	2b02      	cmp	r3, #2
    75f8:	d904      	bls.n	7604 <PIO::mcpWrite(unsigned short)+0x1ac>
    75fa:	3b02      	subs	r3, #2
    75fc:	085a      	lsrs	r2, r3, #1
    75fe:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    7602:	e780      	b.n	7506 <PIO::mcpWrite(unsigned short)+0xae>
    7604:	2200      	movs	r2, #0
    7606:	e77e      	b.n	7506 <PIO::mcpWrite(unsigned short)+0xae>
    7608:	20001e1c 	.word	0x20001e1c
    760c:	e000e184 	.word	0xe000e184
    7610:	e000e188 	.word	0xe000e188
    7614:	e000e18c 	.word	0xe000e18c
    7618:	400fc000 	.word	0x400fc000
    761c:	200014c0 	.word	0x200014c0
    7620:	20001854 	.word	0x20001854
    7624:	e000e100 	.word	0xe000e100
    7628:	e000e104 	.word	0xe000e104
    762c:	e000e108 	.word	0xe000e108
    7630:	e000e10c 	.word	0xe000e10c
    7634:	e000e110 	.word	0xe000e110
    7638:	e000e190 	.word	0xe000e190
    763c:	e000e180 	.word	0xe000e180

00007640 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>:
*/

#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
    7640:	b538      	push	{r3, r4, r5, lr}
    7642:	4604      	mov	r4, r0
    7644:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	_spis = ss;
	_ss_pin = ss_pin;
	_adr = address;
    7648:	7143      	strb	r3, [r0, #5]

#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
	_spis = ss;
    764a:	6001      	str	r1, [r0, #0]
	_ss_pin = ss_pin;
	_adr = address;
	_byteWrite(IOCON, ADDR_ENABLE);
    764c:	210a      	movs	r1, #10
#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
	_spis = ss;
	_ss_pin = ss_pin;
    764e:	7102      	strb	r2, [r0, #4]
	_adr = address;
	_byteWrite(IOCON, ADDR_ENABLE);
    7650:	2208      	movs	r2, #8
    7652:	f7ff fd19 	bl	7088 <PIO::_byteWrite(unsigned char, unsigned char)>
	//_wordWrite(IODIRA, pinsConfig); // pins direction configuration
	_byteWrite(IODIRA, (byte)(pinsConfig & 0xff));
    7656:	4620      	mov	r0, r4
    7658:	b2ea      	uxtb	r2, r5
    765a:	2100      	movs	r1, #0
    765c:	f7ff fd14 	bl	7088 <PIO::_byteWrite(unsigned char, unsigned char)>
	_byteWrite(IODIRB, (byte)((pinsConfig & 0xff00) >> 8));
    7660:	4620      	mov	r0, r4
    7662:	0a2a      	lsrs	r2, r5, #8
    7664:	2101      	movs	r1, #1
    7666:	f7ff fd0f 	bl	7088 <PIO::_byteWrite(unsigned char, unsigned char)>
	_byteWrite(GPPUA, 0); // disable port A weak pullup resistors
    766a:	4620      	mov	r0, r4
    766c:	2200      	movs	r2, #0
    766e:	210c      	movs	r1, #12
    7670:	f7ff fd0a 	bl	7088 <PIO::_byteWrite(unsigned char, unsigned char)>
	_byteWrite(GPPUB, 0); // disable port B weak pullup resistors
    7674:	4620      	mov	r0, r4
    7676:	2200      	movs	r2, #0
    7678:	210d      	movs	r1, #13
    767a:	f7ff fd05 	bl	7088 <PIO::_byteWrite(unsigned char, unsigned char)>
	mcpWrite(0); // resets any MCP outputs
    767e:	4620      	mov	r0, r4
    7680:	2100      	movs	r1, #0
    7682:	f7ff fee9 	bl	7458 <PIO::mcpWrite(unsigned short)>
}
    7686:	4620      	mov	r0, r4
    7688:	bd38      	pop	{r3, r4, r5, pc}
    768a:	bf00      	nop

0000768c <PIO::mcpWritePA(unsigned char)>:
	SPI.transfer((uint8_t)(value & 0xff));                      // Send the low byte (register address pointer will auto-increment after write)
	SPI.transfer((uint8_t)(value >> 8));                 // Shift the high byte down to the low byte location and send
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePA(uint8_t value) {
    768c:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    768e:	4c66      	ldr	r4, [pc, #408]	; (7828 <PIO::mcpWritePA(unsigned char)+0x19c>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    7690:	6803      	ldr	r3, [r0, #0]
    7692:	7ce5      	ldrb	r5, [r4, #19]
    7694:	e893 1004 	ldmia.w	r3, {r2, ip}
    7698:	2d00      	cmp	r5, #0
    769a:	d02b      	beq.n	76f4 <PIO::mcpWritePA(unsigned char)+0x68>
			__disable_irq();
    769c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    769e:	7ce5      	ldrb	r5, [r4, #19]
    76a0:	07ef      	lsls	r7, r5, #31
    76a2:	462b      	mov	r3, r5
    76a4:	d508      	bpl.n	76b8 <PIO::mcpWritePA(unsigned char)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    76a6:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 785c <PIO::mcpWritePA(unsigned char)+0x1d0>
    76aa:	6966      	ldr	r6, [r4, #20]
    76ac:	f8de 7000 	ldr.w	r7, [lr]
    76b0:	4037      	ands	r7, r6
    76b2:	62a7      	str	r7, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    76b4:	f8ce 7000 	str.w	r7, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    76b8:	07ae      	lsls	r6, r5, #30
    76ba:	d506      	bpl.n	76ca <PIO::mcpWritePA(unsigned char)+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    76bc:	4f5b      	ldr	r7, [pc, #364]	; (782c <PIO::mcpWritePA(unsigned char)+0x1a0>)
    76be:	69a6      	ldr	r6, [r4, #24]
    76c0:	683d      	ldr	r5, [r7, #0]
    76c2:	7ce3      	ldrb	r3, [r4, #19]
    76c4:	4035      	ands	r5, r6
    76c6:	62e5      	str	r5, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    76c8:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x04) {
    76ca:	075d      	lsls	r5, r3, #29
    76cc:	d506      	bpl.n	76dc <PIO::mcpWritePA(unsigned char)+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    76ce:	4f58      	ldr	r7, [pc, #352]	; (7830 <PIO::mcpWritePA(unsigned char)+0x1a4>)
    76d0:	69e6      	ldr	r6, [r4, #28]
    76d2:	683d      	ldr	r5, [r7, #0]
    76d4:	7ce3      	ldrb	r3, [r4, #19]
    76d6:	4035      	ands	r5, r6
    76d8:	6325      	str	r5, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    76da:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x08) {
    76dc:	071f      	lsls	r7, r3, #28
    76de:	d506      	bpl.n	76ee <PIO::mcpWritePA(unsigned char)+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    76e0:	4f54      	ldr	r7, [pc, #336]	; (7834 <PIO::mcpWritePA(unsigned char)+0x1a8>)
    76e2:	6a26      	ldr	r6, [r4, #32]
    76e4:	683d      	ldr	r5, [r7, #0]
    76e6:	7ce3      	ldrb	r3, [r4, #19]
    76e8:	4035      	ands	r5, r6
    76ea:	6365      	str	r5, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    76ec:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x10) {
    76ee:	06de      	lsls	r6, r3, #27
    76f0:	d47c      	bmi.n	77ec <PIO::mcpWritePA(unsigned char)+0x160>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    76f2:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    76f4:	68a3      	ldr	r3, [r4, #8]
    76f6:	4d4c      	ldr	r5, [pc, #304]	; (7828 <PIO::mcpWritePA(unsigned char)+0x19c>)
    76f8:	4293      	cmp	r3, r2
    76fa:	d07f      	beq.n	77fc <PIO::mcpWritePA(unsigned char)+0x170>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    76fc:	4b4e      	ldr	r3, [pc, #312]	; (7838 <PIO::mcpWritePA(unsigned char)+0x1ac>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    76fe:	4f4f      	ldr	r7, [pc, #316]	; (783c <PIO::mcpWritePA(unsigned char)+0x1b0>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7700:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7702:	60aa      	str	r2, [r5, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7704:	f3c3 1501 	ubfx	r5, r3, #4, #2
    7708:	f3c3 6382 	ubfx	r3, r3, #26, #3
    770c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    7710:	3301      	adds	r3, #1
    7712:	fbb5 f5f3 	udiv	r5, r5, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7716:	2a00      	cmp	r2, #0
    7718:	d063      	beq.n	77e2 <PIO::mcpWritePA(unsigned char)+0x156>
    771a:	fbb5 f3f2 	udiv	r3, r5, r2

			if (d && clkhz/d > _clock) d++;
    771e:	2b00      	cmp	r3, #0
    7720:	d062      	beq.n	77e8 <PIO::mcpWritePA(unsigned char)+0x15c>
    7722:	fbb5 f5f3 	udiv	r5, r5, r3
    7726:	4295      	cmp	r5, r2
    7728:	bf88      	it	hi
    772a:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    772c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    7730:	d371      	bcc.n	7816 <PIO::mcpWritePA(unsigned char)+0x18a>
    7732:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7736:	6823      	ldr	r3, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7738:	f04f 0e00 	mov.w	lr, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    773c:	2703      	movs	r7, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    773e:	2501      	movs	r5, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7740:	f8c3 e010 	str.w	lr, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7744:	60e2      	str	r2, [r4, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7746:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7748:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    774a:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    774e:	611d      	str	r5, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    7750:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7752:	0112      	lsls	r2, r2, #4
    7754:	4d3a      	ldr	r5, [pc, #232]	; (7840 <PIO::mcpWritePA(unsigned char)+0x1b4>)
    7756:	18ae      	adds	r6, r5, r2
    7758:	58aa      	ldr	r2, [r5, r2]
    775a:	68f6      	ldr	r6, [r6, #12]
    775c:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7760:	7942      	ldrb	r2, [r0, #5]
    7762:	0052      	lsls	r2, r2, #1
    7764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7768:	b2d2      	uxtb	r2, r2
    776a:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    776c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    776e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7772:	d0fb      	beq.n	776c <PIO::mcpWritePA(unsigned char)+0xe0>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7774:	2212      	movs	r2, #18
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7776:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7778:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    777a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    777c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7780:	d0fb      	beq.n	777a <PIO::mcpWritePA(unsigned char)+0xee>
    7782:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7784:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7788:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    778c:	d0fb      	beq.n	7786 <PIO::mcpWritePA(unsigned char)+0xfa>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    778e:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7790:	7ce1      	ldrb	r1, [r4, #19]
    7792:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7796:	4e24      	ldr	r6, [pc, #144]	; (7828 <PIO::mcpWritePA(unsigned char)+0x19c>)
    7798:	460b      	mov	r3, r1
    779a:	18a8      	adds	r0, r5, r2
    779c:	58aa      	ldr	r2, [r5, r2]
    779e:	68c0      	ldr	r0, [r0, #12]
    77a0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    77a4:	2900      	cmp	r1, #0
    77a6:	d028      	beq.n	77fa <PIO::mcpWritePA(unsigned char)+0x16e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    77a8:	07cd      	lsls	r5, r1, #31
    77aa:	d502      	bpl.n	77b2 <PIO::mcpWritePA(unsigned char)+0x126>
    77ac:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    77ae:	4a25      	ldr	r2, [pc, #148]	; (7844 <PIO::mcpWritePA(unsigned char)+0x1b8>)
    77b0:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    77b2:	0788      	lsls	r0, r1, #30
    77b4:	d503      	bpl.n	77be <PIO::mcpWritePA(unsigned char)+0x132>
    77b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    77b8:	4a23      	ldr	r2, [pc, #140]	; (7848 <PIO::mcpWritePA(unsigned char)+0x1bc>)
    77ba:	7ce3      	ldrb	r3, [r4, #19]
    77bc:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    77be:	0759      	lsls	r1, r3, #29
    77c0:	d503      	bpl.n	77ca <PIO::mcpWritePA(unsigned char)+0x13e>
    77c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    77c4:	4a21      	ldr	r2, [pc, #132]	; (784c <PIO::mcpWritePA(unsigned char)+0x1c0>)
    77c6:	7ce3      	ldrb	r3, [r4, #19]
    77c8:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    77ca:	071a      	lsls	r2, r3, #28
    77cc:	d503      	bpl.n	77d6 <PIO::mcpWritePA(unsigned char)+0x14a>
    77ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    77d0:	4a1f      	ldr	r2, [pc, #124]	; (7850 <PIO::mcpWritePA(unsigned char)+0x1c4>)
    77d2:	7ce3      	ldrb	r3, [r4, #19]
    77d4:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    77d6:	06db      	lsls	r3, r3, #27
    77d8:	d50f      	bpl.n	77fa <PIO::mcpWritePA(unsigned char)+0x16e>
    77da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    77dc:	4b1d      	ldr	r3, [pc, #116]	; (7854 <PIO::mcpWritePA(unsigned char)+0x1c8>)
    77de:	601a      	str	r2, [r3, #0]
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    77e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    77e2:	462b      	mov	r3, r5

			if (d && clkhz/d > _clock) d++;
    77e4:	2b00      	cmp	r3, #0
    77e6:	d19c      	bne.n	7722 <PIO::mcpWritePA(unsigned char)+0x96>
    77e8:	461a      	mov	r2, r3
    77ea:	e7a4      	b.n	7736 <PIO::mcpWritePA(unsigned char)+0xaa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    77ec:	4d1a      	ldr	r5, [pc, #104]	; (7858 <PIO::mcpWritePA(unsigned char)+0x1cc>)
    77ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    77f0:	682f      	ldr	r7, [r5, #0]
    77f2:	403b      	ands	r3, r7
    77f4:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    77f6:	602b      	str	r3, [r5, #0]
    77f8:	e77b      	b.n	76f2 <PIO::mcpWritePA(unsigned char)+0x66>
    77fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    77fc:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    77fe:	2200      	movs	r2, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    7800:	68ed      	ldr	r5, [r5, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7802:	2703      	movs	r7, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7804:	611a      	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7806:	2201      	movs	r2, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7808:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    780a:	641d      	str	r5, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    780c:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7810:	611a      	str	r2, [r3, #16]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    7812:	7902      	ldrb	r2, [r0, #4]
    7814:	e79d      	b.n	7752 <PIO::mcpWritePA(unsigned char)+0xc6>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7816:	2b02      	cmp	r3, #2
    7818:	d904      	bls.n	7824 <PIO::mcpWritePA(unsigned char)+0x198>
    781a:	3b02      	subs	r3, #2
    781c:	085a      	lsrs	r2, r3, #1
    781e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    7822:	e788      	b.n	7736 <PIO::mcpWritePA(unsigned char)+0xaa>
    7824:	2200      	movs	r2, #0
    7826:	e786      	b.n	7736 <PIO::mcpWritePA(unsigned char)+0xaa>
    7828:	20001e1c 	.word	0x20001e1c
    782c:	e000e184 	.word	0xe000e184
    7830:	e000e188 	.word	0xe000e188
    7834:	e000e18c 	.word	0xe000e18c
    7838:	400fc000 	.word	0x400fc000
    783c:	200014c0 	.word	0x200014c0
    7840:	20001854 	.word	0x20001854
    7844:	e000e100 	.word	0xe000e100
    7848:	e000e104 	.word	0xe000e104
    784c:	e000e108 	.word	0xe000e108
    7850:	e000e10c 	.word	0xe000e10c
    7854:	e000e110 	.word	0xe000e110
    7858:	e000e190 	.word	0xe000e190
    785c:	e000e180 	.word	0xe000e180

00007860 <PIO::mcpWritePB(unsigned char)>:
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePB(uint8_t value) {
    7860:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7862:	4c66      	ldr	r4, [pc, #408]	; (79fc <PIO::mcpWritePB(unsigned char)+0x19c>)
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
    7864:	6803      	ldr	r3, [r0, #0]
    7866:	7ce5      	ldrb	r5, [r4, #19]
    7868:	e893 1004 	ldmia.w	r3, {r2, ip}
    786c:	2d00      	cmp	r5, #0
    786e:	d02b      	beq.n	78c8 <PIO::mcpWritePB(unsigned char)+0x68>
			__disable_irq();
    7870:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7872:	7ce5      	ldrb	r5, [r4, #19]
    7874:	07ef      	lsls	r7, r5, #31
    7876:	462b      	mov	r3, r5
    7878:	d508      	bpl.n	788c <PIO::mcpWritePB(unsigned char)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    787a:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 7a30 <PIO::mcpWritePB(unsigned char)+0x1d0>
    787e:	6966      	ldr	r6, [r4, #20]
    7880:	f8de 7000 	ldr.w	r7, [lr]
    7884:	4037      	ands	r7, r6
    7886:	62a7      	str	r7, [r4, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7888:	f8ce 7000 	str.w	r7, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    788c:	07ae      	lsls	r6, r5, #30
    788e:	d506      	bpl.n	789e <PIO::mcpWritePB(unsigned char)+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7890:	4f5b      	ldr	r7, [pc, #364]	; (7a00 <PIO::mcpWritePB(unsigned char)+0x1a0>)
    7892:	69a6      	ldr	r6, [r4, #24]
    7894:	683d      	ldr	r5, [r7, #0]
    7896:	7ce3      	ldrb	r3, [r4, #19]
    7898:	4035      	ands	r5, r6
    789a:	62e5      	str	r5, [r4, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    789c:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x04) {
    789e:	075d      	lsls	r5, r3, #29
    78a0:	d506      	bpl.n	78b0 <PIO::mcpWritePB(unsigned char)+0x50>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    78a2:	4f58      	ldr	r7, [pc, #352]	; (7a04 <PIO::mcpWritePB(unsigned char)+0x1a4>)
    78a4:	69e6      	ldr	r6, [r4, #28]
    78a6:	683d      	ldr	r5, [r7, #0]
    78a8:	7ce3      	ldrb	r3, [r4, #19]
    78aa:	4035      	ands	r5, r6
    78ac:	6325      	str	r5, [r4, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    78ae:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x08) {
    78b0:	071f      	lsls	r7, r3, #28
    78b2:	d506      	bpl.n	78c2 <PIO::mcpWritePB(unsigned char)+0x62>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    78b4:	4f54      	ldr	r7, [pc, #336]	; (7a08 <PIO::mcpWritePB(unsigned char)+0x1a8>)
    78b6:	6a26      	ldr	r6, [r4, #32]
    78b8:	683d      	ldr	r5, [r7, #0]
    78ba:	7ce3      	ldrb	r3, [r4, #19]
    78bc:	4035      	ands	r5, r6
    78be:	6365      	str	r5, [r4, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    78c0:	603d      	str	r5, [r7, #0]
			}
			if (interruptMasksUsed & 0x10) {
    78c2:	06de      	lsls	r6, r3, #27
    78c4:	d47c      	bmi.n	79c0 <PIO::mcpWritePB(unsigned char)+0x160>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    78c6:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    78c8:	68a3      	ldr	r3, [r4, #8]
    78ca:	4d4c      	ldr	r5, [pc, #304]	; (79fc <PIO::mcpWritePB(unsigned char)+0x19c>)
    78cc:	4293      	cmp	r3, r2
    78ce:	d07f      	beq.n	79d0 <PIO::mcpWritePB(unsigned char)+0x170>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    78d0:	4b4e      	ldr	r3, [pc, #312]	; (7a0c <PIO::mcpWritePB(unsigned char)+0x1ac>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    78d2:	4f4f      	ldr	r7, [pc, #316]	; (7a10 <PIO::mcpWritePB(unsigned char)+0x1b0>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    78d4:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    78d6:	60aa      	str	r2, [r5, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    78d8:	f3c3 1501 	ubfx	r5, r3, #4, #2
    78dc:	f3c3 6382 	ubfx	r3, r3, #26, #3
    78e0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    78e4:	3301      	adds	r3, #1
    78e6:	fbb5 f5f3 	udiv	r5, r5, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    78ea:	2a00      	cmp	r2, #0
    78ec:	d063      	beq.n	79b6 <PIO::mcpWritePB(unsigned char)+0x156>
    78ee:	fbb5 f3f2 	udiv	r3, r5, r2

			if (d && clkhz/d > _clock) d++;
    78f2:	2b00      	cmp	r3, #0
    78f4:	d062      	beq.n	79bc <PIO::mcpWritePB(unsigned char)+0x15c>
    78f6:	fbb5 f5f3 	udiv	r5, r5, r3
    78fa:	4295      	cmp	r5, r2
    78fc:	bf88      	it	hi
    78fe:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7900:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    7904:	d371      	bcc.n	79ea <PIO::mcpWritePB(unsigned char)+0x18a>
    7906:	f647 72ff 	movw	r2, #32767	; 0x7fff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    790a:	6823      	ldr	r3, [r4, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    790c:	f04f 0e00 	mov.w	lr, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7910:	2703      	movs	r7, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    7912:	2501      	movs	r5, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7914:	f8c3 e010 	str.w	lr, [r3, #16]
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7918:	60e2      	str	r2, [r4, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    791a:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    791c:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    791e:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7922:	611d      	str	r5, [r3, #16]
	digitalWriteFast(_ss_pin, LOW);
    7924:	7902      	ldrb	r2, [r0, #4]
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7926:	0112      	lsls	r2, r2, #4
    7928:	4d3a      	ldr	r5, [pc, #232]	; (7a14 <PIO::mcpWritePB(unsigned char)+0x1b4>)
    792a:	18ae      	adds	r6, r5, r2
    792c:	58aa      	ldr	r2, [r5, r2]
    792e:	68f6      	ldr	r6, [r6, #12]
    7930:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7934:	7942      	ldrb	r2, [r0, #5]
    7936:	0052      	lsls	r2, r2, #1
    7938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    793c:	b2d2      	uxtb	r2, r2
    793e:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7942:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7946:	d0fb      	beq.n	7940 <PIO::mcpWritePB(unsigned char)+0xe0>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7948:	2213      	movs	r2, #19
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    794a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    794c:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    794e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7950:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7954:	d0fb      	beq.n	794e <PIO::mcpWritePB(unsigned char)+0xee>
    7956:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    7958:	6659      	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    795a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    795c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    7960:	d0fb      	beq.n	795a <PIO::mcpWritePB(unsigned char)+0xfa>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    7962:	7902      	ldrb	r2, [r0, #4]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7964:	7ce1      	ldrb	r1, [r4, #19]
    7966:	0112      	lsls	r2, r2, #4
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    7968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    796a:	4e24      	ldr	r6, [pc, #144]	; (79fc <PIO::mcpWritePB(unsigned char)+0x19c>)
    796c:	460b      	mov	r3, r1
    796e:	18a8      	adds	r0, r5, r2
    7970:	58aa      	ldr	r2, [r5, r2]
    7972:	68c0      	ldr	r0, [r0, #12]
    7974:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    7978:	2900      	cmp	r1, #0
    797a:	d028      	beq.n	79ce <PIO::mcpWritePB(unsigned char)+0x16e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    797c:	07cd      	lsls	r5, r1, #31
    797e:	d502      	bpl.n	7986 <PIO::mcpWritePB(unsigned char)+0x126>
    7980:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    7982:	4a25      	ldr	r2, [pc, #148]	; (7a18 <PIO::mcpWritePB(unsigned char)+0x1b8>)
    7984:	6010      	str	r0, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7986:	0788      	lsls	r0, r1, #30
    7988:	d503      	bpl.n	7992 <PIO::mcpWritePB(unsigned char)+0x132>
    798a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    798c:	4a23      	ldr	r2, [pc, #140]	; (7a1c <PIO::mcpWritePB(unsigned char)+0x1bc>)
    798e:	7ce3      	ldrb	r3, [r4, #19]
    7990:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7992:	0759      	lsls	r1, r3, #29
    7994:	d503      	bpl.n	799e <PIO::mcpWritePB(unsigned char)+0x13e>
    7996:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7998:	4a21      	ldr	r2, [pc, #132]	; (7a20 <PIO::mcpWritePB(unsigned char)+0x1c0>)
    799a:	7ce3      	ldrb	r3, [r4, #19]
    799c:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    799e:	071a      	lsls	r2, r3, #28
    79a0:	d503      	bpl.n	79aa <PIO::mcpWritePB(unsigned char)+0x14a>
    79a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    79a4:	4a1f      	ldr	r2, [pc, #124]	; (7a24 <PIO::mcpWritePB(unsigned char)+0x1c4>)
    79a6:	7ce3      	ldrb	r3, [r4, #19]
    79a8:	6011      	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    79aa:	06db      	lsls	r3, r3, #27
    79ac:	d50f      	bpl.n	79ce <PIO::mcpWritePB(unsigned char)+0x16e>
    79ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    79b0:	4b1d      	ldr	r3, [pc, #116]	; (7a28 <PIO::mcpWritePB(unsigned char)+0x1c8>)
    79b2:	601a      	str	r2, [r3, #0]
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOB);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}
    79b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    79b6:	462b      	mov	r3, r5

			if (d && clkhz/d > _clock) d++;
    79b8:	2b00      	cmp	r3, #0
    79ba:	d19c      	bne.n	78f6 <PIO::mcpWritePB(unsigned char)+0x96>
    79bc:	461a      	mov	r2, r3
    79be:	e7a4      	b.n	790a <PIO::mcpWritePB(unsigned char)+0xaa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    79c0:	4d1a      	ldr	r5, [pc, #104]	; (7a2c <PIO::mcpWritePB(unsigned char)+0x1cc>)
    79c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    79c4:	682f      	ldr	r7, [r5, #0]
    79c6:	403b      	ands	r3, r7
    79c8:	63a3      	str	r3, [r4, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    79ca:	602b      	str	r3, [r5, #0]
    79cc:	e77b      	b.n	78c6 <PIO::mcpWritePB(unsigned char)+0x66>
    79ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    79d0:	682b      	ldr	r3, [r5, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    79d2:	2200      	movs	r2, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    79d4:	68ed      	ldr	r5, [r5, #12]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    79d6:	2703      	movs	r7, #3
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    79d8:	611a      	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    79da:	2201      	movs	r2, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    79dc:	625f      	str	r7, [r3, #36]	; 0x24
		port().CCR = _ccr;
    79de:	641d      	str	r5, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    79e0:	f8c3 c060 	str.w	ip, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    79e4:	611a      	str	r2, [r3, #16]

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWriteFast(_ss_pin, LOW);
    79e6:	7902      	ldrb	r2, [r0, #4]
    79e8:	e79d      	b.n	7926 <PIO::mcpWritePB(unsigned char)+0xc6>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    79ea:	2b02      	cmp	r3, #2
    79ec:	d904      	bls.n	79f8 <PIO::mcpWritePB(unsigned char)+0x198>
    79ee:	3b02      	subs	r3, #2
    79f0:	085a      	lsrs	r2, r3, #1
    79f2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    79f6:	e788      	b.n	790a <PIO::mcpWritePB(unsigned char)+0xaa>
    79f8:	2200      	movs	r2, #0
    79fa:	e786      	b.n	790a <PIO::mcpWritePB(unsigned char)+0xaa>
    79fc:	20001e1c 	.word	0x20001e1c
    7a00:	e000e184 	.word	0xe000e184
    7a04:	e000e188 	.word	0xe000e188
    7a08:	e000e18c 	.word	0xe000e18c
    7a0c:	400fc000 	.word	0x400fc000
    7a10:	200014c0 	.word	0x200014c0
    7a14:	20001854 	.word	0x20001854
    7a18:	e000e100 	.word	0xe000e100
    7a1c:	e000e104 	.word	0xe000e104
    7a20:	e000e108 	.word	0xe000e108
    7a24:	e000e10c 	.word	0xe000e10c
    7a28:	e000e110 	.word	0xe000e110
    7a2c:	e000e190 	.word	0xe000e190
    7a30:	e000e180 	.word	0xe000e180

00007a34 <_GLOBAL__sub_I__Z4test12Board_Sys80b>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    7a34:	f002 bed2 	b.w	a7dc <eeprom_initialize>

00007a38 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    7a38:	2000      	movs	r0, #0
    7a3a:	4770      	bx	lr

00007a3c <Print::flush()>:
	virtual void flush()				{ }
    7a3c:	4770      	bx	lr
    7a3e:	bf00      	nop

00007a40 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    7a40:	b510      	push	{r4, lr}
    7a42:	b082      	sub	sp, #8
  return write(&val, 1);
    7a44:	6804      	ldr	r4, [r0, #0]
    7a46:	2201      	movs	r2, #1
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    7a48:	ab02      	add	r3, sp, #8
    7a4a:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    7a4e:	4619      	mov	r1, r3
    7a50:	6863      	ldr	r3, [r4, #4]
    7a52:	4798      	blx	r3
}
    7a54:	b002      	add	sp, #8
    7a56:	bd10      	pop	{r4, pc}

00007a58 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    7a58:	69c0      	ldr	r0, [r0, #28]
    7a5a:	b138      	cbz	r0, 7a6c <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    7a5c:	6983      	ldr	r3, [r0, #24]
    7a5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
    7a62:	68c0      	ldr	r0, [r0, #12]
    7a64:	1a18      	subs	r0, r3, r0
    7a66:	4290      	cmp	r0, r2
    7a68:	bf28      	it	cs
    7a6a:	4610      	movcs	r0, r2
}
    7a6c:	4770      	bx	lr
    7a6e:	bf00      	nop

00007a70 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    7a70:	69c3      	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    7a72:	b510      	push	{r4, lr}
    7a74:	4604      	mov	r4, r0
  size_t t;
  if (!_file) {
    7a76:	b13b      	cbz	r3, 7a88 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7a78:	2000      	movs	r0, #0
    7a7a:	7118      	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    7a7c:	69e0      	ldr	r0, [r4, #28]
    7a7e:	f001 fc5f 	bl	9340 <SdFile::write(void const*, unsigned int)>
    7a82:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    7a84:	791b      	ldrb	r3, [r3, #4]
    7a86:	b11b      	cbz	r3, 7a90 <File::write(unsigned char const*, unsigned int)+0x20>
    7a88:	2301      	movs	r3, #1

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    7a8a:	2000      	movs	r0, #0
    7a8c:	7123      	strb	r3, [r4, #4]
    7a8e:	bd10      	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    7a90:	bd10      	pop	{r4, pc}
    7a92:	bf00      	nop

00007a94 <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    7a94:	69c0      	ldr	r0, [r0, #28]
    7a96:	b178      	cbz	r0, 7ab8 <File::read()+0x24>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7a98:	2201      	movs	r2, #1
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    7a9a:	b500      	push	{lr}
    7a9c:	b083      	sub	sp, #12
    7a9e:	f10d 0107 	add.w	r1, sp, #7
    7aa2:	f001 fa15 	bl	8ed0 <SdFile::read(void*, unsigned int)>
    7aa6:	2801      	cmp	r0, #1
    7aa8:	bf0c      	ite	eq
    7aaa:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7aae:	f04f 30ff 	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    7ab2:	b003      	add	sp, #12
    7ab4:	f85d fb04 	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    7ab8:	f04f 30ff 	mov.w	r0, #4294967295
    7abc:	4770      	bx	lr
    7abe:	bf00      	nop

00007ac0 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    7ac0:	69c3      	ldr	r3, [r0, #28]
    7ac2:	b1c3      	cbz	r3, 7af6 <File::peek()+0x36>
    7ac4:	2201      	movs	r2, #1
    return 0;
  }
  return t;
}

int File::peek() {
    7ac6:	b510      	push	{r4, lr}
    7ac8:	b082      	sub	sp, #8
    7aca:	4604      	mov	r4, r0
    7acc:	4618      	mov	r0, r3
    7ace:	f10d 0107 	add.w	r1, sp, #7
    7ad2:	f001 f9fd 	bl	8ed0 <SdFile::read(void*, unsigned int)>
    7ad6:	2801      	cmp	r0, #1
    7ad8:	d003      	beq.n	7ae2 <File::peek()+0x22>
    7ada:	f04f 30ff 	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    7ade:	b002      	add	sp, #8
    7ae0:	bd10      	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    7ae2:	69e0      	ldr	r0, [r4, #28]
    7ae4:	f89d 4007 	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    7ae8:	68c1      	ldr	r1, [r0, #12]
    7aea:	3901      	subs	r1, #1
    7aec:	f001 faac 	bl	9048 <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    7af0:	4620      	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    7af2:	b002      	add	sp, #8
    7af4:	bd10      	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    7af6:	4618      	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    7af8:	4770      	bx	lr
    7afa:	bf00      	nop

00007afc <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    7afc:	69c0      	ldr	r0, [r0, #28]
    7afe:	b108      	cbz	r0, 7b04 <File::flush()+0x8>
    _file->sync();
    7b00:	f001 bad2 	b.w	90a8 <SdFile::sync()>
    7b04:	4770      	bx	lr
    7b06:	bf00      	nop

00007b08 <File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    7b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7b0c:	2300      	movs	r3, #0
    7b0e:	4605      	mov	r5, r0
    7b10:	4c15      	ldr	r4, [pc, #84]	; (7b68 <File::File(SdFile, char const*)+0x60>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    7b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7b16:	712b      	strb	r3, [r5, #4]
    7b18:	4690      	mov	r8, r2
    7b1a:	60a8      	str	r0, [r5, #8]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    7b1c:	2024      	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    7b1e:	602c      	str	r4, [r5, #0]
    7b20:	460c      	mov	r4, r1
    7b22:	732b      	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    7b24:	f004 fef0 	bl	c908 <malloc>
    7b28:	61e8      	str	r0, [r5, #28]
  if (_file) {
    7b2a:	b1c8      	cbz	r0, 7b60 <File::File(SdFile, char const*)+0x58>
    memcpy(_file, &f, sizeof(SdFile));
    7b2c:	4606      	mov	r6, r0
    7b2e:	f104 0e20 	add.w	lr, r4, #32
    7b32:	6820      	ldr	r0, [r4, #0]
    7b34:	3410      	adds	r4, #16
    7b36:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    7b3a:	4637      	mov	r7, r6
    7b3c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7b40:	3610      	adds	r6, #16
    7b42:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7b46:	4574      	cmp	r4, lr
    7b48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    7b4a:	d1f2      	bne.n	7b32 <File::File(SdFile, char const*)+0x2a>
    7b4c:	6820      	ldr	r0, [r4, #0]
    
    strncpy(_name, n, 12);
    7b4e:	4641      	mov	r1, r8
    7b50:	220c      	movs	r2, #12

File::File(SdFile f, const char *n) {
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
  if (_file) {
    memcpy(_file, &f, sizeof(SdFile));
    7b52:	6030      	str	r0, [r6, #0]
    
    strncpy(_name, n, 12);
    7b54:	f105 000d 	add.w	r0, r5, #13
    7b58:	f005 ff60 	bl	da1c <strncpy>
    _name[12] = 0;
    7b5c:	2300      	movs	r3, #0
    7b5e:	766b      	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    7b60:	4628      	mov	r0, r5
    7b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b66:	bf00      	nop
    7b68:	200017d8 	.word	0x200017d8

00007b6c <File::File()>:
    7b6c:	2200      	movs	r2, #0

File::File(void) {
    7b6e:	4906      	ldr	r1, [pc, #24]	; (7b88 <File::File()+0x1c>)
    7b70:	b410      	push	{r4}
    7b72:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7b76:	6001      	str	r1, [r0, #0]
    7b78:	7102      	strb	r2, [r0, #4]
    7b7a:	6084      	str	r4, [r0, #8]
    7b7c:	7302      	strb	r2, [r0, #12]
  _file = 0;
    7b7e:	61c2      	str	r2, [r0, #28]
  _name[0] = 0;
    7b80:	7342      	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    7b82:	f85d 4b04 	ldr.w	r4, [sp], #4
    7b86:	4770      	bx	lr
    7b88:	200017d8 	.word	0x200017d8

00007b8c <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    7b8c:	4770      	bx	lr
    7b8e:	bf00      	nop

00007b90 <File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    7b90:	69c0      	ldr	r0, [r0, #28]
    7b92:	b108      	cbz	r0, 7b98 <File::read(void*, unsigned short)+0x8>
    return _file->read(buf, nbyte);
    7b94:	f001 b99c 	b.w	8ed0 <SdFile::read(void*, unsigned int)>
  return 0;
}
    7b98:	4770      	bx	lr
    7b9a:	bf00      	nop

00007b9c <File::seek(unsigned long)>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    7b9c:	69c0      	ldr	r0, [r0, #28]
    7b9e:	b130      	cbz	r0, 7bae <File::seek(unsigned long)+0x12>
void File::flush() {
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
    7ba0:	b508      	push	{r3, lr}
  if (! _file) return false;

  return _file->seekSet(pos);
    7ba2:	f001 fa51 	bl	9048 <SdFile::seekSet(unsigned long)>
    7ba6:	3000      	adds	r0, #0
    7ba8:	bf18      	it	ne
    7baa:	2001      	movne	r0, #1
}
    7bac:	bd08      	pop	{r3, pc}
    7bae:	4770      	bx	lr

00007bb0 <File::size()>:
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    7bb0:	69c0      	ldr	r0, [r0, #28]
    7bb2:	b100      	cbz	r0, 7bb6 <File::size()+0x6>
    7bb4:	6980      	ldr	r0, [r0, #24]
  return _file->fileSize();
}
    7bb6:	4770      	bx	lr

00007bb8 <File::close()>:

void File::close() {
  if (_file) {
    7bb8:	69c3      	ldr	r3, [r0, #28]
    7bba:	b153      	cbz	r3, 7bd2 <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    7bbc:	b510      	push	{r4, lr}
    7bbe:	4604      	mov	r4, r0
  if (_file) {
    _file->close();
    7bc0:	4618      	mov	r0, r3
    7bc2:	f001 f911 	bl	8de8 <SdFile::close()>
    free(_file); 
    7bc6:	69e0      	ldr	r0, [r4, #28]
    7bc8:	f004 fea6 	bl	c918 <free>
    _file = 0;
    7bcc:	2300      	movs	r3, #0
    7bce:	61e3      	str	r3, [r4, #28]
    7bd0:	bd10      	pop	{r4, pc}
    7bd2:	4770      	bx	lr

00007bd4 <File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    7bd4:	69c0      	ldr	r0, [r0, #28]
    7bd6:	b118      	cbz	r0, 7be0 <File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    7bd8:	7980      	ldrb	r0, [r0, #6]
    7bda:	3000      	adds	r0, #0
    7bdc:	bf18      	it	ne
    7bde:	2001      	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    7be0:	4770      	bx	lr
    7be2:	bf00      	nop

00007be4 <SDClass::begin(unsigned char)>:
  Sd2Card(void) : type_(0) {}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
    7be4:	29fe      	cmp	r1, #254	; 0xfe

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    7be6:	b538      	push	{r3, r4, r5, lr}
    7be8:	4605      	mov	r5, r0
    7bea:	d016      	beq.n	7c1a <SDClass::begin(unsigned char)+0x36>
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
      return (ret == 0) ? true : false;
    }
    #endif
    return SD_init(sckRateID, chipSelectPin);
    7bec:	460a      	mov	r2, r1
    7bee:	2101      	movs	r1, #1
    7bf0:	f000 fe12 	bl	8818 <Sd2Card::SD_init(unsigned char, unsigned char)>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    7bf4:	b908      	cbnz	r0, 7bfa <SDClass::begin(unsigned char)+0x16>
    7bf6:	2000      	movs	r0, #0
    7bf8:	bd38      	pop	{r3, r4, r5, pc}
    7bfa:	1d2c      	adds	r4, r5, #4
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    7bfc:	2201      	movs	r2, #1
    7bfe:	4629      	mov	r1, r5
    7c00:	4620      	mov	r0, r4
    7c02:	f001 fe93 	bl	992c <SdVolume::init(Sd2Card*, unsigned char)>
    7c06:	b198      	cbz	r0, 7c30 <SDClass::begin(unsigned char)+0x4c>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7c08:	4621      	mov	r1, r4
    7c0a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    7c0e:	f001 f935 	bl	8e7c <SdFile::openRoot(SdVolume*)>
    7c12:	3000      	adds	r0, #0
    7c14:	bf18      	it	ne
    7c16:	2001      	movne	r0, #1
    7c18:	bd38      	pop	{r3, r4, r5, pc}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
      chipSelectPin_ = BUILTIN_SDCARD;
    7c1a:	7001      	strb	r1, [r0, #0]
      uint8_t ret = SDHC_CardInit();
    7c1c:	f000 fb0e 	bl	823c <SDHC_CardInit()>
    7c20:	4604      	mov	r4, r0
      type_ = SDHC_CardGetType();
    7c22:	f000 f9ef 	bl	8004 <SDHC_CardGetType()>
    7c26:	70a8      	strb	r0, [r5, #2]
      return (ret == 0) ? true : false;
    7c28:	fab4 f084 	clz	r0, r4
    7c2c:	0940      	lsrs	r0, r0, #5
    7c2e:	e7e1      	b.n	7bf4 <SDClass::begin(unsigned char)+0x10>
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    7c30:	4602      	mov	r2, r0
    7c32:	4629      	mov	r1, r5
    7c34:	4620      	mov	r0, r4
    7c36:	f001 fe79 	bl	992c <SdVolume::init(Sd2Card*, unsigned char)>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    7c3a:	2800      	cmp	r0, #0
    7c3c:	d1e4      	bne.n	7c08 <SDClass::begin(unsigned char)+0x24>
         volume.init(card) &&
    7c3e:	2000      	movs	r0, #0
    7c40:	bd38      	pop	{r3, r4, r5, pc}
    7c42:	bf00      	nop

00007c44 <SDClass::getParentDir(char const*, int*)>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c48:	b099      	sub	sp, #100	; 0x64
    7c4a:	4692      	mov	sl, r2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7c4c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 7d34 <SDClass::getParentDir(char const*, int*)+0xf0>
    7c50:	2200      	movs	r2, #0
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    7c52:	ad06      	add	r5, sp, #24
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7c54:	4607      	mov	r7, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7c56:	3104      	adds	r1, #4
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    7c58:	4690      	mov	r8, r2
    7c5a:	4628      	mov	r0, r5
    7c5c:	4654      	mov	r4, sl

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
    7c5e:	ae0f      	add	r6, sp, #60	; 0x3c
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7c60:	9301      	str	r3, [sp, #4]
    7c62:	f88d 201c 	strb.w	r2, [sp, #28]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7c66:	f88d 201e 	strb.w	r2, [sp, #30]
    7c6a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    7c6e:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    7c72:	f8cd 9018 	str.w	r9, [sp, #24]
    7c76:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7c7a:	f001 f8ff 	bl	8e7c <SdFile::openRoot(SdVolume*)>
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    7c7e:	212f      	movs	r1, #47	; 0x2f
    7c80:	4620      	mov	r0, r4
    7c82:	f005 fc11 	bl	d4a8 <strchr>
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7c86:	4621      	mov	r1, r4
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    7c88:	b348      	cbz	r0, 7cde <SDClass::getParentDir(char const*, int*)+0x9a>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    7c8a:	7822      	ldrb	r2, [r4, #0]
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    7c8c:	1b03      	subs	r3, r0, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7c8e:	a802      	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    7c90:	2a2f      	cmp	r2, #47	; 0x2f
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    7c92:	b2db      	uxtb	r3, r3
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    7c94:	d043      	beq.n	7d1e <SDClass::getParentDir(char const*, int*)+0xda>
    7c96:	2b0c      	cmp	r3, #12
    7c98:	bf28      	it	cs
    7c9a:	230c      	movcs	r3, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7c9c:	461a      	mov	r2, r3
    7c9e:	469b      	mov	fp, r3
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    7ca0:	441c      	add	r4, r3
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7ca2:	f005 febb 	bl	da1c <strncpy>
    subdirname[idx] = 0;
    7ca6:	ab18      	add	r3, sp, #96	; 0x60

    // close the subdir (we reuse them) if open
    subdir->close();
    7ca8:	4630      	mov	r0, r6
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    7caa:	445b      	add	r3, fp
    7cac:	f803 8c58 	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    7cb0:	f001 f89a 	bl	8de8 <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    7cb4:	2301      	movs	r3, #1
    7cb6:	aa02      	add	r2, sp, #8
    7cb8:	4629      	mov	r1, r5
    7cba:	4630      	mov	r0, r6
    7cbc:	f001 fb34 	bl	9328 <SdFile::open(SdFile*, char const*, unsigned char)>
    7cc0:	2800      	cmp	r0, #0
    7cc2:	d02e      	beq.n	7d22 <SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    7cc4:	4628      	mov	r0, r5
    7cc6:	f001 f88f 	bl	8de8 <SdFile::close()>
    7cca:	462b      	mov	r3, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    7ccc:	212f      	movs	r1, #47	; 0x2f
    7cce:	4620      	mov	r0, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    7cd0:	4635      	mov	r5, r6
    7cd2:	461e      	mov	r6, r3
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    7cd4:	f005 fbe8 	bl	d4a8 <strchr>
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7cd8:	4621      	mov	r1, r4
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    7cda:	2800      	cmp	r0, #0
    7cdc:	d1d5      	bne.n	7c8a <SDClass::getParentDir(char const*, int*)+0x46>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    7cde:	ebca 0404 	rsb	r4, sl, r4
    7ce2:	9801      	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    7ce4:	7929      	ldrb	r1, [r5, #4]
    7ce6:	6004      	str	r4, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    7ce8:	796a      	ldrb	r2, [r5, #5]
    7cea:	79ab      	ldrb	r3, [r5, #6]
    7cec:	68e8      	ldr	r0, [r5, #12]
    7cee:	68ac      	ldr	r4, [r5, #8]
    7cf0:	692e      	ldr	r6, [r5, #16]
    7cf2:	7139      	strb	r1, [r7, #4]
    7cf4:	f895 e014 	ldrb.w	lr, [r5, #20]
    7cf8:	717a      	strb	r2, [r7, #5]
    7cfa:	69a9      	ldr	r1, [r5, #24]
    7cfc:	71bb      	strb	r3, [r7, #6]
    7cfe:	69ea      	ldr	r2, [r5, #28]
    7d00:	6a2b      	ldr	r3, [r5, #32]
    7d02:	60f8      	str	r0, [r7, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    7d04:	4638      	mov	r0, r7
    7d06:	f8c7 9000 	str.w	r9, [r7]
    7d0a:	60bc      	str	r4, [r7, #8]
    7d0c:	613e      	str	r6, [r7, #16]
    7d0e:	f887 e014 	strb.w	lr, [r7, #20]
    7d12:	61b9      	str	r1, [r7, #24]
    7d14:	61fa      	str	r2, [r7, #28]
    7d16:	623b      	str	r3, [r7, #32]
    7d18:	b019      	add	sp, #100	; 0x64
    7d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    7d1e:	3401      	adds	r4, #1
    7d20:	e7ad      	b.n	7c7e <SDClass::getParentDir(char const*, int*)+0x3a>
{
  public:
	constexpr Print() : write_error(0) {}
    7d22:	7138      	strb	r0, [r7, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7d24:	71b8      	strb	r0, [r7, #6]
  }

  *index = (int)(filepath - origpath);
  // parent is now the parent diretory of the file!
  return *parent;
}
    7d26:	4638      	mov	r0, r7
    7d28:	f8c7 9000 	str.w	r9, [r7]
    7d2c:	b019      	add	sp, #100	; 0x64
    7d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d32:	bf00      	nop
    7d34:	20001800 	.word	0x20001800

00007d38 <SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    7d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d3a:	b09d      	sub	sp, #116	; 0x74
    7d3c:	4605      	mov	r5, r0
    7d3e:	461f      	mov	r7, r3
    7d40:	4614      	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    7d42:	466b      	mov	r3, sp
    7d44:	a801      	add	r0, sp, #4
    7d46:	f7ff ff7d 	bl	7c44 <SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    7d4a:	9a00      	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    7d4c:	5ca3      	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    7d4e:	4414      	add	r4, r2

  if (! filepath[0]) {
    7d50:	2b00      	cmp	r3, #0
    7d52:	d042      	beq.n	7dda <SDClass::open(char const*, unsigned char)+0xa2>
    7d54:	2300      	movs	r3, #0
    7d56:	4e32      	ldr	r6, [pc, #200]	; (7e20 <SDClass::open(char const*, unsigned char)+0xe8>)

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    7d58:	f89d 200a 	ldrb.w	r2, [sp, #10]
    7d5c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7d60:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    7d64:	960a      	str	r6, [sp, #40]	; 0x28
    7d66:	2a00      	cmp	r2, #0
    7d68:	d031      	beq.n	7dce <SDClass::open(char const*, unsigned char)+0x96>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    7d6a:	463b      	mov	r3, r7
    7d6c:	4622      	mov	r2, r4
    7d6e:	a901      	add	r1, sp, #4
    7d70:	a80a      	add	r0, sp, #40	; 0x28
    7d72:	f001 fad9 	bl	9328 <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    7d76:	b350      	cbz	r0, 7dce <SDClass::open(char const*, unsigned char)+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    7d78:	a801      	add	r0, sp, #4
    7d7a:	f001 f835 	bl	8de8 <SdFile::close()>

  if (mode & (O_APPEND | O_WRITE)) 
    7d7e:	f017 0f06 	tst.w	r7, #6
    7d82:	d147      	bne.n	7e14 <SDClass::open(char const*, unsigned char)+0xdc>
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    7d84:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    file.seekSet(file.fileSize());
  return File(file, filepath);
    7d88:	4622      	mov	r2, r4
    7d8a:	f89d 702e 	ldrb.w	r7, [sp, #46]	; 0x2e
    7d8e:	a913      	add	r1, sp, #76	; 0x4c
    7d90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    7d92:	4628      	mov	r0, r5
    7d94:	9613      	str	r6, [sp, #76]	; 0x4c
    7d96:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    7d9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    7d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    7d9e:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    7da2:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
    7da6:	9615      	str	r6, [sp, #84]	; 0x54
    7da8:	9416      	str	r4, [sp, #88]	; 0x58
    7daa:	9317      	str	r3, [sp, #92]	; 0x5c
    7dac:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    7db0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    7db2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    7db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7db6:	f88d e050 	strb.w	lr, [sp, #80]	; 0x50
    7dba:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
    7dbe:	9619      	str	r6, [sp, #100]	; 0x64
    7dc0:	941a      	str	r4, [sp, #104]	; 0x68
    7dc2:	931b      	str	r3, [sp, #108]	; 0x6c
    7dc4:	f7ff fea0 	bl	7b08 <File::File(SdFile, char const*)>
}
    7dc8:	4628      	mov	r0, r5
    7dca:	b01d      	add	sp, #116	; 0x74
    7dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    7dce:	4628      	mov	r0, r5
    7dd0:	f7ff fecc 	bl	7b6c <File::File()>
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    7dd4:	4628      	mov	r0, r5
    7dd6:	b01d      	add	sp, #116	; 0x74
    7dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dda:	f89d 3008 	ldrb.w	r3, [sp, #8]

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    7dde:	a913      	add	r1, sp, #76	; 0x4c
    7de0:	4a0f      	ldr	r2, [pc, #60]	; (7e20 <SDClass::open(char const*, unsigned char)+0xe8>)
    7de2:	4628      	mov	r0, r5
    7de4:	f89d 7009 	ldrb.w	r7, [sp, #9]
    7de8:	f89d 600a 	ldrb.w	r6, [sp, #10]
    7dec:	9c03      	ldr	r4, [sp, #12]
    7dee:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    7df2:	9213      	str	r2, [sp, #76]	; 0x4c
    7df4:	9b04      	ldr	r3, [sp, #16]
    7df6:	9a05      	ldr	r2, [sp, #20]
    7df8:	f88d 7051 	strb.w	r7, [sp, #81]	; 0x51
    7dfc:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
    7e00:	9415      	str	r4, [sp, #84]	; 0x54
    7e02:	9316      	str	r3, [sp, #88]	; 0x58
    7e04:	9217      	str	r2, [sp, #92]	; 0x5c
    7e06:	f89d 7018 	ldrb.w	r7, [sp, #24]
    7e0a:	9e07      	ldr	r6, [sp, #28]
    7e0c:	9c08      	ldr	r4, [sp, #32]
    7e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e10:	4a04      	ldr	r2, [pc, #16]	; (7e24 <SDClass::open(char const*, unsigned char)+0xec>)
    7e12:	e7d2      	b.n	7dba <SDClass::open(char const*, unsigned char)+0x82>
  }
  // close the parent
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
    7e14:	a80a      	add	r0, sp, #40	; 0x28
    7e16:	9910      	ldr	r1, [sp, #64]	; 0x40
    7e18:	f001 f916 	bl	9048 <SdFile::seekSet(unsigned long)>
    7e1c:	e7b2      	b.n	7d84 <SDClass::open(char const*, unsigned char)+0x4c>
    7e1e:	bf00      	nop
    7e20:	20001800 	.word	0x20001800
    7e24:	200017f4 	.word	0x200017f4

00007e28 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    7e28:	4b06      	ldr	r3, [pc, #24]	; (7e44 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    7e2a:	2200      	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    7e2c:	2002      	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7e2e:	4906      	ldr	r1, [pc, #24]	; (7e48 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    7e30:	709a      	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    7e32:	6058      	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7e34:	62d9      	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    7e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
    7e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7e3e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    7e42:	4770      	bx	lr
    7e44:	2000298c 	.word	0x2000298c
    7e48:	20001800 	.word	0x20001800

00007e4c <sdhc_setSdclk(unsigned long)>:
    //IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7e4c:	4a26      	ldr	r2, [pc, #152]	; (7ee8 <sdhc_setSdclk(unsigned long)+0x9c>)
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    7e4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    7e52:	4b26      	ldr	r3, [pc, #152]	; (7eec <sdhc_setSdclk(unsigned long)+0xa0>)
    //IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    7e56:	fb01 f000 	mul.w	r0, r1, r0
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    7e5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    7e5e:	4924      	ldr	r1, [pc, #144]	; (7ef0 <sdhc_setSdclk(unsigned long)+0xa4>)
    7e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e64:	fba1 1303 	umull	r1, r3, r1, r3
 Serial.print("VEND_SPEC2:    "); Serial.println(SDHC_VENDOR2,HEX);    // Vendor Specific2 register
 #endif
}
*/

static void sdhc_setSdclk(uint32_t kHzMax) {
    7e68:	b4f0      	push	{r4, r5, r6, r7}
  }
  
  uint32_t sdhcClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    7e6a:	089b      	lsrs	r3, r3, #2
    7e6c:	f3c2 24c2 	ubfx	r4, r2, #11, #3
    7e70:	4a20      	ldr	r2, [pc, #128]	; (7ef4 <sdhc_setSdclk(unsigned long)+0xa8>)
    7e72:	3401      	adds	r4, #1
    7e74:	fbb2 f3f3 	udiv	r3, r2, r3
    7e78:	fbb3 f4f4 	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7e7c:	ebb0 1f14 	cmp.w	r0, r4, lsr #4
    7e80:	d22d      	bcs.n	7ede <sdhc_setSdclk(unsigned long)+0x92>
    7e82:	2301      	movs	r3, #1
    7e84:	e001      	b.n	7e8a <sdhc_setSdclk(unsigned long)+0x3e>
    7e86:	2bff      	cmp	r3, #255	; 0xff
    7e88:	d805      	bhi.n	7e96 <sdhc_setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    7e8a:	005b      	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7e8c:	011a      	lsls	r2, r3, #4
    7e8e:	fbb4 f2f2 	udiv	r2, r4, r2
    7e92:	4290      	cmp	r0, r2
    7e94:	d3f7      	bcc.n	7e86 <sdhc_setSdclk(unsigned long)+0x3a>
    7e96:	085a      	lsrs	r2, r3, #1
    7e98:	0217      	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7e9a:	fbb4 f2f3 	udiv	r2, r4, r3
    7e9e:	4290      	cmp	r0, r2
    7ea0:	d220      	bcs.n	7ee4 <sdhc_setSdclk(unsigned long)+0x98>
    7ea2:	0059      	lsls	r1, r3, #1
    7ea4:	2201      	movs	r2, #1
    dvs++;
    7ea6:	1c56      	adds	r6, r2, #1
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7ea8:	fbb4 f5f1 	udiv	r5, r4, r1
    7eac:	42a8      	cmp	r0, r5
    7eae:	4419      	add	r1, r3
    7eb0:	d213      	bcs.n	7eda <sdhc_setSdclk(unsigned long)+0x8e>
    7eb2:	2e10      	cmp	r6, #16
    7eb4:	4632      	mov	r2, r6
    7eb6:	d1f6      	bne.n	7ea6 <sdhc_setSdclk(unsigned long)+0x5a>
    7eb8:	23f0      	movs	r3, #240	; 0xf0
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7eba:	4c0f      	ldr	r4, [pc, #60]	; (7ef8 <sdhc_setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7ebc:	480f      	ldr	r0, [pc, #60]	; (7efc <sdhc_setSdclk(unsigned long)+0xb0>)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7ebe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    7ec0:	4621      	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7ec2:	4010      	ands	r0, r2
    7ec4:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
    7ec8:	ea40 0207 	orr.w	r2, r0, r7
    7ecc:	431a      	orrs	r2, r3
    7ece:	62e2      	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    7ed0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    7ed2:	071b      	lsls	r3, r3, #28
    7ed4:	d5fc      	bpl.n	7ed0 <sdhc_setSdclk(unsigned long)+0x84>
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif

//  Serial.printf("setSdclk: %d %d : %x %x\n\r", f_pll, m_sdClkKhz, sdclkfs, dvs);
}
    7ed6:	bcf0      	pop	{r4, r5, r6, r7}
    7ed8:	4770      	bx	lr
    7eda:	0113      	lsls	r3, r2, #4
    7edc:	e7ed      	b.n	7eba <sdhc_setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7ede:	2700      	movs	r7, #0

static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    7ee0:	2301      	movs	r3, #1
    7ee2:	e7da      	b.n	7e9a <sdhc_setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7ee4:	2300      	movs	r3, #0
    7ee6:	e7e8      	b.n	7eba <sdhc_setSdclk(unsigned long)+0x6e>
    7ee8:	400fc000 	.word	0x400fc000
    7eec:	400d8000 	.word	0x400d8000
    7ef0:	aaaaaaab 	.word	0xaaaaaaab
    7ef4:	5e69ec00 	.word	0x5e69ec00
    7ef8:	402c0000 	.word	0x402c0000
    7efc:	fff0000f 	.word	0xfff0000f

00007f00 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    7f00:	4b20      	ldr	r3, [pc, #128]	; (7f84 <SDHC_CMD_Do(unsigned long)+0x84>)
    7f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    7f04:	4619      	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    7f06:	b410      	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    7f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    7f0c:	461c      	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    7f0e:	631a      	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    7f10:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    7f12:	4b1c      	ldr	r3, [pc, #112]	; (7f84 <SDHC_CMD_Do(unsigned long)+0x84>)
    7f14:	07d2      	lsls	r2, r2, #31
    7f16:	d4fb      	bmi.n	7f10 <SDHC_CMD_Do(unsigned long)+0x10>
    7f18:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7f1a:	0792      	lsls	r2, r2, #30
    7f1c:	d4f8      	bmi.n	7f10 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    7f1e:	60d8      	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    7f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    7f24:	4618      	mov	r0, r3
    7f26:	e000      	b.n	7f2a <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    7f28:	b1aa      	cbz	r2, 7f56 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    7f2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    7f2c:	3a01      	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    7f2e:	4b16      	ldr	r3, [pc, #88]	; (7f88 <SDHC_CMD_Do(unsigned long)+0x88>)
    7f30:	4c14      	ldr	r4, [pc, #80]	; (7f84 <SDHC_CMD_Do(unsigned long)+0x84>)
    7f32:	400b      	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    7f34:	2b00      	cmp	r3, #0
    7f36:	d0f7      	beq.n	7f28 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    7f38:	b16a      	cbz	r2, 7f56 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    7f3a:	2b01      	cmp	r3, #1
    7f3c:	d10b      	bne.n	7f56 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    7f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7f40:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    7f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    7f46:	d00f      	beq.n	7f68 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    7f48:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    7f4c:	2003      	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    7f4e:	6323      	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    7f50:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f54:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    7f56:	4a0b      	ldr	r2, [pc, #44]	; (7f84 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    7f58:	2001      	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    7f5a:	4b0c      	ldr	r3, [pc, #48]	; (7f8c <SDHC_CMD_Do(unsigned long)+0x8c>)
    7f5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
    7f5e:	430b      	orrs	r3, r1
    7f60:	6313      	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    7f62:	f85d 4b04 	ldr.w	r4, [sp], #4
    7f66:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    7f68:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    7f6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    7f6e:	d004      	beq.n	7f7a <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    7f70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    7f74:	2005      	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    7f76:	6323      	str	r3, [r4, #48]	; 0x30
    7f78:	e7f3      	b.n	7f62 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    7f7a:	f043 0301 	orr.w	r3, r3, #1
    7f7e:	6323      	str	r3, [r4, #48]	; 0x30
    7f80:	e7ef      	b.n	7f62 <SDHC_CMD_Do(unsigned long)+0x62>
    7f82:	bf00      	nop
    7f84:	402c0000 	.word	0x402c0000
    7f88:	000e0001 	.word	0x000e0001
    7f8c:	000f0001 	.word	0x000f0001

00007f90 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    7f90:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    7f92:	4d0d      	ldr	r5, [pc, #52]	; (7fc8 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    7f94:	2600      	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    7f96:	480d      	ldr	r0, [pc, #52]	; (7fcc <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    7f98:	f240 34e7 	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    7f9c:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    7f9e:	f7ff ffaf 	bl	7f00 <SDHC_CMD_Do(unsigned long)>
    7fa2:	4603      	mov	r3, r0
    7fa4:	e006      	b.n	7fb4 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    7fa6:	b94b      	cbnz	r3, 7fbc <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    7fa8:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    7faa:	f7ff ffa9 	bl	7f00 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    7fae:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    7fb0:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    7fb2:	d005      	beq.n	7fc0 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    7fb4:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    7fb6:	4805      	ldr	r0, [pc, #20]	; (7fcc <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    7fb8:	0752      	lsls	r2, r2, #29
    7fba:	d4f4      	bmi.n	7fa6 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    7fbc:	4618      	mov	r0, r3
    7fbe:	bd70      	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    7fc0:	2800      	cmp	r0, #0
    7fc2:	bf08      	it	eq
    7fc4:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    7fc6:	bd70      	pop	{r4, r5, r6, pc}
    7fc8:	402c0000 	.word	0x402c0000
    7fcc:	0cdb0000 	.word	0x0cdb0000

00007fd0 <SDHC_ACMD41_SendOperationCond(unsigned long)>:
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    7fd0:	b538      	push	{r3, r4, r5, lr}
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    7fd2:	4c09      	ldr	r4, [pc, #36]	; (7ff8 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x28>)
    7fd4:	2300      	movs	r3, #0
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    7fd6:	4605      	mov	r5, r0
  SDHC_CMDARG = 0;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    7fd8:	4808      	ldr	r0, [pc, #32]	; (7ffc <SDHC_ACMD41_SendOperationCond(unsigned long)+0x2c>)
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    7fda:	60a3      	str	r3, [r4, #8]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    7fdc:	f7ff ff90 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    7fe0:	b100      	cbz	r0, 7fe4 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x14>
  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }

  return result;
}
    7fe2:	bd38      	pop	{r3, r4, r5, pc}
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    7fe4:	6923      	ldr	r3, [r4, #16]

  SDHC_CMDARG = cond;

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    7fe6:	4806      	ldr	r0, [pc, #24]	; (8000 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x30>)

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }

  SDHC_CMDARG = cond;
    7fe8:	60a5      	str	r5, [r4, #8]

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    7fea:	f7ff ff89 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    7fee:	2800      	cmp	r0, #0
    7ff0:	d1f7      	bne.n	7fe2 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x12>
    7ff2:	6923      	ldr	r3, [r4, #16]

  return result;
}
    7ff4:	bd38      	pop	{r3, r4, r5, pc}
    7ff6:	bf00      	nop
    7ff8:	402c0000 	.word	0x402c0000
    7ffc:	371a0000 	.word	0x371a0000
    8000:	29020000 	.word	0x29020000

00008004 <SDHC_CardGetType()>:
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    8004:	4b07      	ldr	r3, [pc, #28]	; (8024 <SDHC_CardGetType()+0x20>)
    8006:	781a      	ldrb	r2, [r3, #0]
    8008:	b94a      	cbnz	r2, 801e <SDHC_CardGetType()+0x1a>
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    800a:	789a      	ldrb	r2, [r3, #2]
    800c:	b12a      	cbz	r2, 801a <SDHC_CardGetType()+0x16>
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
    800e:	785b      	ldrb	r3, [r3, #1]
    8010:	2b00      	cmp	r3, #0
  return 3; // SD_CARD_TYPE_SDHC
    8012:	bf0c      	ite	eq
    8014:	2002      	moveq	r0, #2
    8016:	2003      	movne	r0, #3
    8018:	4770      	bx	lr

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    801a:	2001      	movs	r0, #1
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
  return 3; // SD_CARD_TYPE_SDHC
}
    801c:	4770      	bx	lr
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    801e:	2000      	movs	r0, #0
    8020:	4770      	bx	lr
    8022:	bf00      	nop
    8024:	200029e0 	.word	0x200029e0

00008028 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    8028:	4b38      	ldr	r3, [pc, #224]	; (810c <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    802a:	781a      	ldrb	r2, [r3, #0]
    802c:	b10a      	cbz	r2, 8032 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    802e:	2003      	movs	r0, #3
    8030:	4770      	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    8032:	b570      	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    8034:	785b      	ldrb	r3, [r3, #1]
    8036:	4606      	mov	r6, r0
    8038:	b903      	cbnz	r3, 803c <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    803a:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    803c:	4d34      	ldr	r5, [pc, #208]	; (8110 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    803e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    8042:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    8046:	4833      	ldr	r0, [pc, #204]	; (8114 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    8048:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    804a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    804c:	f043 0310 	orr.w	r3, r3, #16
    8050:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    8052:	60a9      	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    8054:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    8056:	f7ff ff53 	bl	7f00 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    805a:	2800      	cmp	r0, #0
    805c:	d14d      	bne.n	80fa <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    805e:	462c      	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    8060:	692b      	ldr	r3, [r5, #16]
    8062:	f106 0240 	add.w	r2, r6, #64	; 0x40
    8066:	f506 7010 	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    806a:	4629      	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    806c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    806e:	4e28      	ldr	r6, [pc, #160]	; (8110 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    8070:	f043 0520 	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    8074:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    8078:	6325      	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    807a:	d13f      	bne.n	80fc <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    807c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    807e:	051d      	lsls	r5, r3, #20
    8080:	d5fc      	bpl.n	807c <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    8082:	6a0b      	ldr	r3, [r1, #32]
    8084:	3240      	adds	r2, #64	; 0x40
    8086:	f842 3c80 	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    808a:	6a0b      	ldr	r3, [r1, #32]
    808c:	f842 3c7c 	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    8090:	6a0b      	ldr	r3, [r1, #32]
    8092:	f842 3c78 	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    8096:	6a0b      	ldr	r3, [r1, #32]
    8098:	f842 3c74 	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    809c:	6a0b      	ldr	r3, [r1, #32]
    809e:	f842 3c70 	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    80a2:	6a0b      	ldr	r3, [r1, #32]
    80a4:	f842 3c6c 	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    80a8:	6a0b      	ldr	r3, [r1, #32]
    80aa:	f842 3c68 	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    80ae:	6a0b      	ldr	r3, [r1, #32]
    80b0:	f842 3c64 	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    80b4:	6a0b      	ldr	r3, [r1, #32]
    80b6:	f842 3c60 	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    80ba:	6a0b      	ldr	r3, [r1, #32]
    80bc:	f842 3c5c 	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    80c0:	6a0b      	ldr	r3, [r1, #32]
    80c2:	f842 3c58 	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    80c6:	6a0b      	ldr	r3, [r1, #32]
    80c8:	f842 3c54 	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    80cc:	6a0b      	ldr	r3, [r1, #32]
    80ce:	f842 3c50 	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    80d2:	6a0b      	ldr	r3, [r1, #32]
    80d4:	f842 3c4c 	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    80d8:	6a0b      	ldr	r3, [r1, #32]
    80da:	f842 3c48 	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    80de:	6a0b      	ldr	r3, [r1, #32]
    80e0:	f842 3c44 	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    80e4:	4282      	cmp	r2, r0
    80e6:	d1c1      	bne.n	806c <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    80e8:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    80ea:	4909      	ldr	r1, [pc, #36]	; (8110 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    80ec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    80ee:	4a08      	ldr	r2, [pc, #32]	; (8110 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    80f0:	079b      	lsls	r3, r3, #30
    80f2:	d5fb      	bpl.n	80ec <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    80f4:	4b08      	ldr	r3, [pc, #32]	; (8118 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    80f6:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    80f8:	bd70      	pop	{r4, r5, r6, pc}
}
    80fa:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    80fc:	4a07      	ldr	r2, [pc, #28]	; (811c <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    80fe:	431a      	orrs	r2, r3
    8100:	6332      	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    8102:	f7ff ff45 	bl	7f90 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    8106:	2001      	movs	r0, #1
    8108:	e7ef      	b.n	80ea <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    810a:	bf00      	nop
    810c:	200029e0 	.word	0x200029e0
    8110:	402c0000 	.word	0x402c0000
    8114:	113a0010 	.word	0x113a0010
    8118:	01000022 	.word	0x01000022
    811c:	00700020 	.word	0x00700020

00008120 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    8120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    8122:	4b28      	ldr	r3, [pc, #160]	; (81c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    8124:	781a      	ldrb	r2, [r3, #0]
    8126:	b10a      	cbz	r2, 812c <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    8128:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    812c:	785b      	ldrb	r3, [r3, #1]
    812e:	4604      	mov	r4, r0
    8130:	b903      	cbnz	r3, 8134 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    8132:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    8134:	4d24      	ldr	r5, [pc, #144]	; (81c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    8136:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    813a:	4824      	ldr	r0, [pc, #144]	; (81cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    813c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    813e:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    8140:	6cab      	ldr	r3, [r5, #72]	; 0x48
    8142:	f023 0310 	bic.w	r3, r3, #16
    8146:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    8148:	60a9      	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    814a:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    814c:	f7ff fed8 	bl	7f00 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8150:	2800      	cmp	r0, #0
    8152:	d1ea      	bne.n	812a <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    8154:	462a      	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8156:	692b      	ldr	r3, [r5, #16]
    8158:	f504 7700 	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    815c:	462e      	mov	r6, r5
    815e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    8160:	4919      	ldr	r1, [pc, #100]	; (81c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    8162:	06d8      	lsls	r0, r3, #27
    8164:	d5fb      	bpl.n	815e <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    8166:	6b33      	ldr	r3, [r6, #48]	; 0x30
    8168:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    816c:	d119      	bne.n	81a2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    816e:	f104 0140 	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    8172:	f854 3b04 	ldr.w	r3, [r4], #4
    8176:	4d14      	ldr	r5, [pc, #80]	; (81c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    8178:	42a1      	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    817a:	6213      	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    817c:	d1f9      	bne.n	8172 <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    817e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    8180:	f043 0310 	orr.w	r3, r3, #16
    8184:	6333      	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    8186:	6b33      	ldr	r3, [r6, #48]	; 0x30
    8188:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    818c:	d111      	bne.n	81b2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    818e:	428f      	cmp	r7, r1
    8190:	d1e5      	bne.n	815e <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    8192:	490d      	ldr	r1, [pc, #52]	; (81c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    8194:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    8196:	4a0c      	ldr	r2, [pc, #48]	; (81c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    8198:	079b      	lsls	r3, r3, #30
    819a:	d5fb      	bpl.n	8194 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    819c:	4b0c      	ldr	r3, [pc, #48]	; (81d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    819e:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    81a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    81a2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    81a4:	4b0b      	ldr	r3, [pc, #44]	; (81d4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    81a6:	4313      	orrs	r3, r2
    81a8:	630b      	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    81aa:	f7ff fef1 	bl	7f90 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    81ae:	2001      	movs	r0, #1
    81b0:	e7ef      	b.n	8192 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    81b2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    81b4:	4b07      	ldr	r3, [pc, #28]	; (81d4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    81b6:	4313      	orrs	r3, r2
    81b8:	632b      	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    81ba:	f7ff fee9 	bl	7f90 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    81be:	2001      	movs	r0, #1
    81c0:	e7e7      	b.n	8192 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    81c2:	bf00      	nop
    81c4:	200029e0 	.word	0x200029e0
    81c8:	402c0000 	.word	0x402c0000
    81cc:	183a0000 	.word	0x183a0000
    81d0:	01000012 	.word	0x01000012
    81d4:	00700010 	.word	0x00700010

000081d8 <initClock()>:
  }
  
  void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    81d8:	4a16      	ldr	r2, [pc, #88]	; (8234 <initClock()+0x5c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    81da:	4b17      	ldr	r3, [pc, #92]	; (8238 <initClock()+0x60>)
  }
  
  void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    81dc:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    81e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    81e4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    81e8:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    81ec:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    81f0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    81f4:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    81f8:	f041 0118 	orr.w	r1, r1, #24
    81fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    8200:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    8204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    8208:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    820c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    8210:	f042 020c 	orr.w	r2, r2, #12
    8214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    8218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    821a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    821e:	625a      	str	r2, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    8220:	69da      	ldr	r2, [r3, #28]
    8222:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    8226:	61da      	str	r2, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    8228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    822a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
    822e:	625a      	str	r2, [r3, #36]	; 0x24
    8230:	4770      	bx	lr
    8232:	bf00      	nop
    8234:	400d8000 	.word	0x400d8000
    8238:	400fc000 	.word	0x400fc000

0000823c <SDHC_CardInit()>:

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t SDHC_CardInit(void)
{
    823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

// initialize the SDHC Controller
// returns status of initialization(OK, nonInit, noCard, CardProtected)
static uint8_t SDHC_Init(void)
{
  initClock();
    8240:	f7ff ffca 	bl	81d8 <initClock()>
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    8244:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    8248:	4ba9      	ldr	r3, [pc, #676]	; (84f0 <SDHC_CardInit()+0x2b4>)
    824a:	2105      	movs	r1, #5
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    824c:	48a9      	ldr	r0, [pc, #676]	; (84f4 <SDHC_CardInit()+0x2b8>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    824e:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8252:	4ca9      	ldr	r4, [pc, #676]	; (84f8 <SDHC_CardInit()+0x2bc>)
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    8254:	4602      	mov	r2, r0
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    8256:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    825a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    825e:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    8262:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    8266:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
  // De-init GPIO - to prevent unwanted clocks on bus
  SDHC_ReleaseGPIO();

  #if defined (__IMXRT1062__)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
    826a:	6485      	str	r5, [r0, #72]	; 0x48
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    826c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    826e:	431c      	orrs	r4, r3
    8270:	62c4      	str	r4, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    8272:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8274:	01dc      	lsls	r4, r3, #7
    8276:	d4fc      	bmi.n	8272 <SDHC_CardInit()+0x36>

  /* Set the SDHC initial baud rate divider and start */
  sdhc_setSdclk(400);
    8278:	f44f 70c8 	mov.w	r0, #400	; 0x190
    827c:	f7ff fde6 	bl	7e4c <sdhc_setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    8280:	4a9c      	ldr	r2, [pc, #624]	; (84f4 <SDHC_CardInit()+0x2b8>)
    8282:	6a53      	ldr	r3, [r2, #36]	; 0x24
    8284:	489b      	ldr	r0, [pc, #620]	; (84f4 <SDHC_CardInit()+0x2b8>)
    8286:	f013 0303 	ands.w	r3, r3, #3
    828a:	d1fa      	bne.n	8282 <SDHC_CardInit()+0x46>

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    828c:	4c98      	ldr	r4, [pc, #608]	; (84f0 <SDHC_CardInit()+0x2b4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    828e:	f247 0588 	movw	r5, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    8292:	f241 0788 	movw	r7, #4232	; 0x1088

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    8296:	f44f 3681 	mov.w	r6, #66048	; 0x10200

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    829a:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    829e:	4602      	mov	r2, r0
#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    82a0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    82a4:	f240 51dc 	movw	r1, #1500	; 0x5dc
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    82a8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    82ac:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    82b0:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    82b4:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    82b8:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    82bc:	f8c4 53c0 	str.w	r5, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    82c0:	f8c4 53ac 	str.w	r5, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    82c4:	f8c4 73b0 	str.w	r7, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    82c8:	f8c4 53b4 	str.w	r5, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    82cc:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    82d0:	6046      	str	r6, [r0, #4]
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
    82d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    82d4:	4c89      	ldr	r4, [pc, #548]	; (84fc <SDHC_CardInit()+0x2c0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    82d6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    82da:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    82de:	6283      	str	r3, [r0, #40]	; 0x28
    //SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
  //#endif

  /* Enable requests */
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    82e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    82e2:	6303      	str	r3, [r0, #48]	; 0x30
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    82e4:	6344      	str	r4, [r0, #52]	; 0x34

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    82e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    82e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    82ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    82ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    82f0:	4c80      	ldr	r4, [pc, #512]	; (84f4 <SDHC_CardInit()+0x2b8>)
    82f2:	0118      	lsls	r0, r3, #4
    82f4:	d4fb      	bmi.n	82ee <SDHC_CardInit()+0xb2>
#endif

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    82f6:	3901      	subs	r1, #1
    82f8:	d1f5      	bne.n	82e6 <SDHC_CardInit()+0xaa>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  // to do - check if this needed
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    82fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    82fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8300:	6323      	str	r3, [r4, #48]	; 0x30
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    8302:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8304:	03da      	lsls	r2, r3, #15
    8306:	d409      	bmi.n	831c <SDHC_CardInit()+0xe0>
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    8308:	4b7d      	ldr	r3, [pc, #500]	; (8500 <SDHC_CardInit()+0x2c4>)
    830a:	2202      	movs	r2, #2
  sdCardDesc.address = 0;
    830c:	6059      	str	r1, [r3, #4]
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    return 0;
  } else {
    return SDHC_STATUS_NODISK;
    830e:	4610      	mov	r0, r2

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    8310:	7059      	strb	r1, [r3, #1]
  sdCardDesc.version2 = 0;
    8312:	7099      	strb	r1, [r3, #2]
  sdCardDesc.numBlocks = 0;
    8314:	6099      	str	r1, [r3, #8]
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    8316:	701a      	strb	r2, [r3, #0]
    8318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    831c:	4d78      	ldr	r5, [pc, #480]	; (8500 <SDHC_CardInit()+0x2c4>)

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    831e:	4608      	mov	r0, r1
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    8320:	7029      	strb	r1, [r5, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    8322:	7069      	strb	r1, [r5, #1]
  sdCardDesc.version2 = 0;
    8324:	70a9      	strb	r1, [r5, #2]
  sdCardDesc.numBlocks = 0;

  if (resS)
    return resS;

  SDHC_IRQSIGEN = 0;
    8326:	63a1      	str	r1, [r4, #56]	; 0x38
static int SDHC_CMD0_GoToIdle(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    8328:	60a1      	str	r1, [r4, #8]
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    832a:	6069      	str	r1, [r5, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    832c:	60a9      	str	r1, [r5, #8]

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    832e:	f7ff fde7 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8332:	b968      	cbnz	r0, 8350 <SDHC_CardInit()+0x114>
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    8334:	f44f 73d5 	mov.w	r3, #426	; 0x1aa

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8338:	6922      	ldr	r2, [r4, #16]
  SDHC_CMDARG = cond;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    833a:	4872      	ldr	r0, [pc, #456]	; (8504 <SDHC_CardInit()+0x2c8>)
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    833c:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    833e:	f7ff fddf 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8342:	b948      	cbnz	r0, 8358 <SDHC_CardInit()+0x11c>
    8344:	6923      	ldr	r3, [r4, #16]
    return SDHC_STATUS_NOINIT;
  }

  resR = SDHC_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
    8346:	6923      	ldr	r3, [r4, #16]
    8348:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    834c:	f000 80c1 	beq.w	84d2 <SDHC_CardInit()+0x296>

  SDHC_IRQSIGEN = 0;

  resR = SDHC_CMD0_GoToIdle();
  if (resR) {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    8350:	2001      	movs	r0, #1
    8352:	7028      	strb	r0, [r5, #0]
    return SDHC_STATUS_NOINIT;
    8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
  } else if (resR == SDHC_RESULT_NO_RESPONSE) {
    8358:	2805      	cmp	r0, #5
    835a:	d1f9      	bne.n	8350 <SDHC_CardInit()+0x114>
  } else {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    return SDHC_STATUS_NOINIT;
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    835c:	2000      	movs	r0, #0
    835e:	f7ff fe37 	bl	7fd0 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    8362:	2800      	cmp	r0, #0
    8364:	d1f4      	bne.n	8350 <SDHC_CardInit()+0x114>

  if (SDHC_CMDRSP0 & 0x300000) {
    8366:	4b63      	ldr	r3, [pc, #396]	; (84f4 <SDHC_CardInit()+0x2b8>)
    8368:	691a      	ldr	r2, [r3, #16]
    836a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    836e:	d01e      	beq.n	83ae <SDHC_CardInit()+0x172>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    8370:	786a      	ldrb	r2, [r5, #1]
    //
    uint32_t ii = 0;
    8372:	4604      	mov	r4, r0
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    8374:	4f64      	ldr	r7, [pc, #400]	; (8508 <SDHC_CardInit()+0x2cc>)
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    8376:	461e      	mov	r6, r3
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    8378:	2a00      	cmp	r2, #0
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    837a:	f8df 8190 	ldr.w	r8, [pc, #400]	; 850c <SDHC_CardInit()+0x2d0>
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    837e:	bf08      	it	eq
    8380:	f44f 1740 	moveq.w	r7, #3145728	; 0x300000
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    8384:	4638      	mov	r0, r7
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    8386:	3401      	adds	r4, #1
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    8388:	f7ff fe22 	bl	7fd0 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    838c:	2800      	cmp	r0, #0
    838e:	f040 80a3 	bne.w	84d8 <SDHC_CardInit()+0x29c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    8392:	4544      	cmp	r4, r8
    8394:	6933      	ldr	r3, [r6, #16]
    8396:	d801      	bhi.n	839c <SDHC_CardInit()+0x160>
    8398:	2b00      	cmp	r3, #0
    839a:	daf3      	bge.n	8384 <SDHC_CardInit()+0x148>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    839c:	4b5b      	ldr	r3, [pc, #364]	; (850c <SDHC_CardInit()+0x2d0>)
    839e:	429c      	cmp	r4, r3
    83a0:	d803      	bhi.n	83aa <SDHC_CardInit()+0x16e>
    83a2:	4b54      	ldr	r3, [pc, #336]	; (84f4 <SDHC_CardInit()+0x2b8>)
    83a4:	691b      	ldr	r3, [r3, #16]
    83a6:	005b      	lsls	r3, r3, #1
    83a8:	d401      	bmi.n	83ae <SDHC_CardInit()+0x172>
      sdCardDesc.highCapacity = 0;
    83aa:	2300      	movs	r3, #0
    83ac:	706b      	strb	r3, [r5, #1]
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    83ae:	2300      	movs	r3, #0
    83b0:	4c50      	ldr	r4, [pc, #320]	; (84f4 <SDHC_CardInit()+0x2b8>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    83b2:	4857      	ldr	r0, [pc, #348]	; (8510 <SDHC_CardInit()+0x2d4>)
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    83b4:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    83b6:	f7ff fda3 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    83ba:	4603      	mov	r3, r0
    83bc:	2800      	cmp	r0, #0
    83be:	d1c7      	bne.n	8350 <SDHC_CardInit()+0x114>
    83c0:	6922      	ldr	r2, [r4, #16]
  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    83c2:	4854      	ldr	r0, [pc, #336]	; (8514 <SDHC_CardInit()+0x2d8>)
static int SDHC_CMD3_GetAddress(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    83c4:	60a3      	str	r3, [r4, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    83c6:	f7ff fd9b 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    83ca:	2800      	cmp	r0, #0
    83cc:	d1c0      	bne.n	8350 <SDHC_CardInit()+0x114>
    83ce:	6923      	ldr	r3, [r4, #16]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    83d0:	4f51      	ldr	r7, [pc, #324]	; (8518 <SDHC_CardInit()+0x2dc>)
    83d2:	6923      	ldr	r3, [r4, #16]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    83d4:	4851      	ldr	r0, [pc, #324]	; (851c <SDHC_CardInit()+0x2e0>)
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    83d6:	401f      	ands	r7, r3
    83d8:	4e49      	ldr	r6, [pc, #292]	; (8500 <SDHC_CardInit()+0x2c4>)
static int SDHC_CMD9_GetParameters(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    83da:	60a7      	str	r7, [r4, #8]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    83dc:	606f      	str	r7, [r5, #4]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    83de:	f7ff fd8f 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {
    83e2:	2800      	cmp	r0, #0
    83e4:	d1b4      	bne.n	8350 <SDHC_CardInit()+0x114>
    //(void)SDHC_CMDRSP0;
    sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;
    83e6:	69a3      	ldr	r3, [r4, #24]
    83e8:	0e1b      	lsrs	r3, r3, #24
    83ea:	70f3      	strb	r3, [r6, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (SDHC_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    83ec:	69e3      	ldr	r3, [r4, #28]
    83ee:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
    83f2:	d174      	bne.n	84de <SDHC_CardInit()+0x2a2>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    83f4:	69a1      	ldr	r1, [r4, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    83f6:	69a3      	ldr	r3, [r4, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    83f8:	6960      	ldr	r0, [r4, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    83fa:	f3c1 2103 	ubfx	r1, r1, #8, #4
    83fe:	029a      	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    8400:	6963      	ldr	r3, [r4, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    8402:	3909      	subs	r1, #9
    8404:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    8408:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    840c:	ea42 5290 	orr.w	r2, r2, r0, lsr #22
    8410:	3302      	adds	r3, #2
    8412:	3201      	adds	r2, #1
    8414:	fa02 f303 	lsl.w	r3, r2, r3
    8418:	408b      	lsls	r3, r1
    841a:	60b3      	str	r3, [r6, #8]
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    841c:	4e35      	ldr	r6, [pc, #212]	; (84f4 <SDHC_CardInit()+0x2b8>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    841e:	4840      	ldr	r0, [pc, #256]	; (8520 <SDHC_CardInit()+0x2e4>)
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    8420:	60b7      	str	r7, [r6, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    8422:	f7ff fd6d 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    8426:	2800      	cmp	r0, #0
    8428:	d192      	bne.n	8350 <SDHC_CardInit()+0x114>
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    842a:	f44f 7300 	mov.w	r3, #512	; 0x200
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    842e:	6932      	ldr	r2, [r6, #16]
  SDHC_CMDARG = block_size;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    8430:	483c      	ldr	r0, [pc, #240]	; (8524 <SDHC_CardInit()+0x2e8>)
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    8432:	60b3      	str	r3, [r6, #8]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    8434:	f7ff fd64 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    8438:	2800      	cmp	r0, #0
    843a:	d189      	bne.n	8350 <SDHC_CardInit()+0x114>
    843c:	6933      	ldr	r3, [r6, #16]
  SDHC_CMDARG = address;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    843e:	483a      	ldr	r0, [pc, #232]	; (8528 <SDHC_CardInit()+0x2ec>)
static int SDHC_ACMD6_SetBusWidth(uint32_t address, uint32_t width)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    8440:	60b7      	str	r7, [r6, #8]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    8442:	f7ff fd5d 	bl	7f00 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    8446:	2800      	cmp	r0, #0
    8448:	d182      	bne.n	8350 <SDHC_CardInit()+0x114>
  SDHC_CMDARG = width;
    844a:	2302      	movs	r3, #2
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    844c:	6932      	ldr	r2, [r6, #16]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    844e:	4837      	ldr	r0, [pc, #220]	; (852c <SDHC_CardInit()+0x2f0>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
  SDHC_CMDARG = width;
    8450:	60b3      	str	r3, [r6, #8]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    8452:	f7ff fd55 	bl	7f00 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {  (void)SDHC_CMDRSP0; }
    8456:	4607      	mov	r7, r0
    8458:	2800      	cmp	r0, #0
    845a:	f47f af79 	bne.w	8350 <SDHC_CardInit()+0x114>
    845e:	6933      	ldr	r3, [r6, #16]
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    8460:	2305      	movs	r3, #5

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8462:	6ab2      	ldr	r2, [r6, #40]	; 0x28

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    8464:	f246 10a8 	movw	r0, #25000	; 0x61a8
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    8468:	4c21      	ldr	r4, [pc, #132]	; (84f0 <SDHC_CardInit()+0x2b4>)

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    846a:	f022 0206 	bic.w	r2, r2, #6
    846e:	62b2      	str	r2, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8470:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    8472:	f042 0202 	orr.w	r2, r2, #2
    8476:	62b2      	str	r2, [r6, #40]	; 0x28
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
  }
  
  static void SDHC_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    8478:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    847c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    8480:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    8484:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    8488:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    848c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    8490:	f7ff fcdc 	bl	7e4c <sdhc_setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    8494:	f247 0388 	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    8498:	f241 0288 	movw	r2, #4232	; 0x1088

#else
  // Teensy 4.0
  static void SDHC_InitGPIO(void)
  {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    849c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    84a0:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    84a4:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    84a8:	f8c4 71c0 	str.w	r7, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    84ac:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    84b0:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    84b4:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    84b8:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    84bc:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    84c0:	f8c4 23b0 	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    84c4:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    84c8:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  SDHC_InitGPIO();

  return sdCardDesc.status;
    84cc:	7828      	ldrb	r0, [r5, #0]
    84ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
    84d2:	2301      	movs	r3, #1
    84d4:	706b      	strb	r3, [r5, #1]
    84d6:	e741      	b.n	835c <SDHC_CardInit()+0x120>
    84d8:	2001      	movs	r0, #1
    84da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    84de:	2301      	movs	r3, #1
    84e0:	70b3      	strb	r3, [r6, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    84e2:	6963      	ldr	r3, [r4, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    84e4:	f3c3 2315 	ubfx	r3, r3, #8, #22
    84e8:	3301      	adds	r3, #1
    84ea:	029b      	lsls	r3, r3, #10
    84ec:	60b3      	str	r3, [r6, #8]
    84ee:	e795      	b.n	841c <SDHC_CardInit()+0x1e0>
    84f0:	401f8000 	.word	0x401f8000
    84f4:	402c0000 	.word	0x402c0000
    84f8:	01008000 	.word	0x01008000
    84fc:	117f00bb 	.word	0x117f00bb
    8500:	200029e0 	.word	0x200029e0
    8504:	081a0000 	.word	0x081a0000
    8508:	40300000 	.word	0x40300000
    850c:	0001869f 	.word	0x0001869f
    8510:	02090000 	.word	0x02090000
    8514:	031a0000 	.word	0x031a0000
    8518:	ffff0000 	.word	0xffff0000
    851c:	09090000 	.word	0x09090000
    8520:	071b0000 	.word	0x071b0000
    8524:	101a0000 	.word	0x101a0000
    8528:	371a0000 	.word	0x371a0000
    852c:	061a0000 	.word	0x061a0000

00008530 <spiInit(unsigned char)>:

#elif defined(__IMXRT1052__)  || defined(__IMXRT1062__)
 #define USE_TEENSY4_SPI
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    8530:	2805      	cmp	r0, #5
    8532:	d834      	bhi.n	859e <spiInit(unsigned char)+0x6e>
    8534:	e8df f000 	tbb	[pc, r0]
    8538:	231b130b 	.word	0x231b130b
    853c:	032b      	.short	0x032b
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    853e:	4b1c      	ldr	r3, [pc, #112]	; (85b0 <spiInit(unsigned char)+0x80>)
    8540:	2207      	movs	r2, #7
    8542:	491c      	ldr	r1, [pc, #112]	; (85b4 <spiInit(unsigned char)+0x84>)
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8544:	481c      	ldr	r0, [pc, #112]	; (85b8 <spiInit(unsigned char)+0x88>)
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    8546:	e883 0006 	stmia.w	r3, {r1, r2}
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    854a:	f001 bc47 	b.w	9ddc <SPIClass::begin()>
 #define USE_TEENSY4_SPI
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    854e:	4b18      	ldr	r3, [pc, #96]	; (85b0 <spiInit(unsigned char)+0x80>)
    8550:	2207      	movs	r2, #7
    8552:	491a      	ldr	r1, [pc, #104]	; (85bc <spiInit(unsigned char)+0x8c>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8554:	4818      	ldr	r0, [pc, #96]	; (85b8 <spiInit(unsigned char)+0x88>)
 #define USE_TEENSY4_SPI
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    8556:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    855a:	f001 bc3f 	b.w	9ddc <SPIClass::begin()>
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    855e:	4b14      	ldr	r3, [pc, #80]	; (85b0 <spiInit(unsigned char)+0x80>)
    8560:	2207      	movs	r2, #7
    8562:	4917      	ldr	r1, [pc, #92]	; (85c0 <spiInit(unsigned char)+0x90>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8564:	4814      	ldr	r0, [pc, #80]	; (85b8 <spiInit(unsigned char)+0x88>)
 
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    8566:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    856a:	f001 bc37 	b.w	9ddc <SPIClass::begin()>
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    856e:	4b10      	ldr	r3, [pc, #64]	; (85b0 <spiInit(unsigned char)+0x80>)
    8570:	2207      	movs	r2, #7
    8572:	4914      	ldr	r1, [pc, #80]	; (85c4 <spiInit(unsigned char)+0x94>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8574:	4810      	ldr	r0, [pc, #64]	; (85b8 <spiInit(unsigned char)+0x88>)
 static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    8576:	e883 0006 	stmia.w	r3, {r1, r2}
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    857a:	f001 bc2f 	b.w	9ddc <SPIClass::begin()>
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    857e:	4b0c      	ldr	r3, [pc, #48]	; (85b0 <spiInit(unsigned char)+0x80>)
    8580:	2207      	movs	r2, #7
    8582:	4911      	ldr	r1, [pc, #68]	; (85c8 <spiInit(unsigned char)+0x98>)
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8584:	480c      	ldr	r0, [pc, #48]	; (85b8 <spiInit(unsigned char)+0x88>)
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    8586:	e883 0006 	stmia.w	r3, {r1, r2}
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    858a:	f001 bc27 	b.w	9ddc <SPIClass::begin()>
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    858e:	4b08      	ldr	r3, [pc, #32]	; (85b0 <spiInit(unsigned char)+0x80>)
    8590:	2207      	movs	r2, #7
    8592:	490e      	ldr	r1, [pc, #56]	; (85cc <spiInit(unsigned char)+0x9c>)
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8594:	4808      	ldr	r0, [pc, #32]	; (85b8 <spiInit(unsigned char)+0x88>)
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(25200000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    8596:	e883 0006 	stmia.w	r3, {r1, r2}
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    859a:	f001 bc1f 	b.w	9ddc <SPIClass::begin()>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    859e:	4b04      	ldr	r3, [pc, #16]	; (85b0 <spiInit(unsigned char)+0x80>)
    85a0:	2207      	movs	r2, #7
    85a2:	490b      	ldr	r1, [pc, #44]	; (85d0 <spiInit(unsigned char)+0xa0>)
  }
  SPI.begin();
    85a4:	4804      	ldr	r0, [pc, #16]	; (85b8 <spiInit(unsigned char)+0x88>)
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    85a6:	e883 0006 	stmia.w	r3, {r1, r2}
  }
  SPI.begin();
    85aa:	f001 bc17 	b.w	9ddc <SPIClass::begin()>
    85ae:	bf00      	nop
    85b0:	200029f0 	.word	0x200029f0
    85b4:	001e8480 	.word	0x001e8480
    85b8:	20001e1c 	.word	0x20001e1c
    85bc:	01808580 	.word	0x01808580
    85c0:	016e3600 	.word	0x016e3600
    85c4:	007a1200 	.word	0x007a1200
    85c8:	003d0900 	.word	0x003d0900
    85cc:	002dc6c0 	.word	0x002dc6c0
    85d0:	00061a80 	.word	0x00061a80

000085d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    85d4:	b5f0      	push	{r4, r5, r6, r7, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    85d6:	4e27      	ldr	r6, [pc, #156]	; (8674 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    85d8:	27ff      	movs	r7, #255	; 0xff
    85da:	4d27      	ldr	r5, [pc, #156]	; (8678 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    85dc:	f8d6 e000 	ldr.w	lr, [r6]
    85e0:	682b      	ldr	r3, [r5, #0]
    85e2:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    85e4:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    85e6:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    85ea:	d0fb      	beq.n	85e4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    85ec:	6f5c      	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    85ee:	b2e4      	uxtb	r4, r4
    85f0:	2cff      	cmp	r4, #255	; 0xff
    85f2:	d005      	beq.n	8600 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    85f4:	6834      	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    85f6:	ebce 0404 	rsb	r4, lr, r4
    85fa:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    85fe:	d3f0      	bcc.n	85e2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8600:	f041 0440 	orr.w	r4, r1, #64	; 0x40
    8604:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8606:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8608:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    860c:	d0fb      	beq.n	8606 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    860e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    8610:	2618      	movs	r6, #24
    8612:	fa22 f406 	lsr.w	r4, r2, r6
    8616:	b2e4      	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8618:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    861a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    861c:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    8620:	d0fb      	beq.n	861a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    8622:	3e08      	subs	r6, #8
    8624:	6f5c      	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    8626:	f116 0f08 	cmn.w	r6, #8
    862a:	d1f2      	bne.n	8612 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    862c:	b1f9      	cbz	r1, 866e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    862e:	2908      	cmp	r1, #8
    8630:	bf0c      	ite	eq
    8632:	2287      	moveq	r2, #135	; 0x87
    8634:	22ff      	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8636:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8638:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    863a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    863e:	d0fb      	beq.n	8638 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    8640:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    8642:	2100      	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8644:	24ff      	movs	r4, #255	; 0xff
    8646:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    864a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    864e:	d0fb      	beq.n	8648 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    8650:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    8652:	b2cb      	uxtb	r3, r1
    8654:	3101      	adds	r1, #1
    8656:	3bff      	subs	r3, #255	; 0xff
    8658:	b2d2      	uxtb	r2, r2
    865a:	bf18      	it	ne
    865c:	2301      	movne	r3, #1
    865e:	7042      	strb	r2, [r0, #1]
    8660:	ea13 13d2 	ands.w	r3, r3, r2, lsr #7
    8664:	d001      	beq.n	866a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    8666:	682b      	ldr	r3, [r5, #0]
    8668:	e7ed      	b.n	8646 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    866a:	4610      	mov	r0, r2
    866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    866e:	2295      	movs	r2, #149	; 0x95
    8670:	e7e1      	b.n	8636 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    8672:	bf00      	nop
    8674:	20002c14 	.word	0x20002c14
    8678:	20001e1c 	.word	0x20001e1c

0000867c <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    867c:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    867e:	2101      	movs	r1, #1
    8680:	7800      	ldrb	r0, [r0, #0]
    8682:	f001 ffc3 	bl	a60c <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    8686:	4913      	ldr	r1, [pc, #76]	; (86d4 <Sd2Card::chipSelectHigh()+0x58>)
    8688:	780b      	ldrb	r3, [r1, #0]
    868a:	b1eb      	cbz	r3, 86c8 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    868c:	4a12      	ldr	r2, [pc, #72]	; (86d8 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    868e:	2000      	movs	r0, #0
    8690:	7cd3      	ldrb	r3, [r2, #19]
    8692:	7008      	strb	r0, [r1, #0]
    8694:	4619      	mov	r1, r3
    8696:	b1bb      	cbz	r3, 86c8 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8698:	07d8      	lsls	r0, r3, #31
    869a:	d502      	bpl.n	86a2 <Sd2Card::chipSelectHigh()+0x26>
    869c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    869e:	480f      	ldr	r0, [pc, #60]	; (86dc <Sd2Card::chipSelectHigh()+0x60>)
    86a0:	6004      	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    86a2:	079b      	lsls	r3, r3, #30
    86a4:	d503      	bpl.n	86ae <Sd2Card::chipSelectHigh()+0x32>
    86a6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    86a8:	4b0d      	ldr	r3, [pc, #52]	; (86e0 <Sd2Card::chipSelectHigh()+0x64>)
    86aa:	7cd1      	ldrb	r1, [r2, #19]
    86ac:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    86ae:	074c      	lsls	r4, r1, #29
    86b0:	d503      	bpl.n	86ba <Sd2Card::chipSelectHigh()+0x3e>
    86b2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    86b4:	4b0b      	ldr	r3, [pc, #44]	; (86e4 <Sd2Card::chipSelectHigh()+0x68>)
    86b6:	7cd1      	ldrb	r1, [r2, #19]
    86b8:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    86ba:	0708      	lsls	r0, r1, #28
    86bc:	d405      	bmi.n	86ca <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    86be:	06cb      	lsls	r3, r1, #27
    86c0:	d502      	bpl.n	86c8 <Sd2Card::chipSelectHigh()+0x4c>
    86c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    86c4:	4b08      	ldr	r3, [pc, #32]	; (86e8 <Sd2Card::chipSelectHigh()+0x6c>)
    86c6:	601a      	str	r2, [r3, #0]
    86c8:	bd10      	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    86ca:	6b50      	ldr	r0, [r2, #52]	; 0x34
    86cc:	4b07      	ldr	r3, [pc, #28]	; (86ec <Sd2Card::chipSelectHigh()+0x70>)
    86ce:	7cd1      	ldrb	r1, [r2, #19]
    86d0:	6018      	str	r0, [r3, #0]
    86d2:	e7f4      	b.n	86be <Sd2Card::chipSelectHigh()+0x42>
    86d4:	200029f8 	.word	0x200029f8
    86d8:	20001e1c 	.word	0x20001e1c
    86dc:	e000e100 	.word	0xe000e100
    86e0:	e000e104 	.word	0xe000e104
    86e4:	e000e108 	.word	0xe000e108
    86e8:	e000e110 	.word	0xe000e110
    86ec:	e000e10c 	.word	0xe000e10c

000086f0 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    86f0:	4a3f      	ldr	r2, [pc, #252]	; (87f0 <Sd2Card::chipSelectLow()+0x100>)
    86f2:	7813      	ldrb	r3, [r2, #0]
    86f4:	b11b      	cbz	r3, 86fe <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    86f6:	7800      	ldrb	r0, [r0, #0]
    86f8:	2100      	movs	r1, #0
    86fa:	f001 bf87 	b.w	a60c <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    86fe:	4b3d      	ldr	r3, [pc, #244]	; (87f4 <Sd2Card::chipSelectLow()+0x104>)
    8700:	493d      	ldr	r1, [pc, #244]	; (87f8 <Sd2Card::chipSelectLow()+0x108>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    8702:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    8704:	2401      	movs	r4, #1
    8706:	7cde      	ldrb	r6, [r3, #19]
    8708:	7014      	strb	r4, [r2, #0]
    870a:	e891 0030 	ldmia.w	r1, {r4, r5}
    870e:	2e00      	cmp	r6, #0
    8710:	d031      	beq.n	8776 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    8712:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8714:	7cd9      	ldrb	r1, [r3, #19]
    8716:	07ce      	lsls	r6, r1, #31
    8718:	460a      	mov	r2, r1
    871a:	d508      	bpl.n	872e <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    871c:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8814 <Sd2Card::chipSelectLow()+0x124>
    8720:	695f      	ldr	r7, [r3, #20]
    8722:	f8de 6000 	ldr.w	r6, [lr]
    8726:	403e      	ands	r6, r7
    8728:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    872a:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    872e:	078f      	lsls	r7, r1, #30
    8730:	d506      	bpl.n	8740 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8732:	4e32      	ldr	r6, [pc, #200]	; (87fc <Sd2Card::chipSelectLow()+0x10c>)
    8734:	6999      	ldr	r1, [r3, #24]
    8736:	6837      	ldr	r7, [r6, #0]
    8738:	7cda      	ldrb	r2, [r3, #19]
    873a:	4039      	ands	r1, r7
    873c:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    873e:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    8740:	0756      	lsls	r6, r2, #29
    8742:	d506      	bpl.n	8752 <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8744:	4e2e      	ldr	r6, [pc, #184]	; (8800 <Sd2Card::chipSelectLow()+0x110>)
    8746:	69d9      	ldr	r1, [r3, #28]
    8748:	6837      	ldr	r7, [r6, #0]
    874a:	7cda      	ldrb	r2, [r3, #19]
    874c:	4039      	ands	r1, r7
    874e:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    8750:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    8752:	0711      	lsls	r1, r2, #28
    8754:	d506      	bpl.n	8764 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8756:	4e2b      	ldr	r6, [pc, #172]	; (8804 <Sd2Card::chipSelectLow()+0x114>)
    8758:	6a19      	ldr	r1, [r3, #32]
    875a:	6837      	ldr	r7, [r6, #0]
    875c:	7cda      	ldrb	r2, [r3, #19]
    875e:	4039      	ands	r1, r7
    8760:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    8762:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    8764:	06d2      	lsls	r2, r2, #27
    8766:	d505      	bpl.n	8774 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    8768:	4927      	ldr	r1, [pc, #156]	; (8808 <Sd2Card::chipSelectLow()+0x118>)
    876a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    876c:	680e      	ldr	r6, [r1, #0]
    876e:	4032      	ands	r2, r6
    8770:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    8772:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
    8774:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    8776:	689a      	ldr	r2, [r3, #8]
    8778:	491e      	ldr	r1, [pc, #120]	; (87f4 <Sd2Card::chipSelectLow()+0x104>)
    877a:	42a2      	cmp	r2, r4
    877c:	d02c      	beq.n	87d8 <Sd2Card::chipSelectLow()+0xe8>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    877e:	4a23      	ldr	r2, [pc, #140]	; (880c <Sd2Card::chipSelectLow()+0x11c>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8780:	4e23      	ldr	r6, [pc, #140]	; (8810 <Sd2Card::chipSelectLow()+0x120>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8782:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    8784:	608c      	str	r4, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8786:	f3c2 1101 	ubfx	r1, r2, #4, #2
    878a:	f3c2 6282 	ubfx	r2, r2, #26, #3
    878e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    8792:	3201      	adds	r2, #1
    8794:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    8798:	b1e4      	cbz	r4, 87d4 <Sd2Card::chipSelectLow()+0xe4>
    879a:	fbb1 f2f4 	udiv	r2, r1, r4

			if (d && clkhz/d > _clock) d++;
    879e:	b14a      	cbz	r2, 87b4 <Sd2Card::chipSelectLow()+0xc4>
    87a0:	fbb1 f1f2 	udiv	r1, r1, r2
    87a4:	42a1      	cmp	r1, r4
    87a6:	bf88      	it	hi
    87a8:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    87aa:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    87ae:	d315      	bcc.n	87dc <Sd2Card::chipSelectLow()+0xec>
    87b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    87b4:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    87b6:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    87b8:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    87ba:	2403      	movs	r4, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    87bc:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    87be:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    87c0:	625c      	str	r4, [r3, #36]	; 0x24
		port().CCR = _ccr;
    87c2:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    87c4:	661d      	str	r5, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    87c6:	6119      	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    87c8:	2100      	movs	r1, #0
    87ca:	7800      	ldrb	r0, [r0, #0]
}
    87cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    87d0:	f001 bf1c 	b.w	a60c <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    87d4:	460a      	mov	r2, r1
    87d6:	e7e2      	b.n	879e <Sd2Card::chipSelectLow()+0xae>
    87d8:	68ca      	ldr	r2, [r1, #12]
    87da:	e7ec      	b.n	87b6 <Sd2Card::chipSelectLow()+0xc6>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    87dc:	2a02      	cmp	r2, #2
    87de:	bf98      	it	ls
    87e0:	2200      	movls	r2, #0
    87e2:	d9e7      	bls.n	87b4 <Sd2Card::chipSelectLow()+0xc4>
    87e4:	3a02      	subs	r2, #2
    87e6:	0851      	lsrs	r1, r2, #1
    87e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    87ec:	e7e2      	b.n	87b4 <Sd2Card::chipSelectLow()+0xc4>
    87ee:	bf00      	nop
    87f0:	200029f8 	.word	0x200029f8
    87f4:	20001e1c 	.word	0x20001e1c
    87f8:	200029f0 	.word	0x200029f0
    87fc:	e000e184 	.word	0xe000e184
    8800:	e000e188 	.word	0xe000e188
    8804:	e000e18c 	.word	0xe000e18c
    8808:	e000e190 	.word	0xe000e190
    880c:	400fc000 	.word	0x400fc000
    8810:	200014c0 	.word	0x200014c0
    8814:	e000e180 	.word	0xe000e180

00008818 <Sd2Card::SD_init(unsigned char, unsigned char)>:
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    8818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  type_ = 0;
    881c:	2300      	movs	r3, #0
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    881e:	4605      	mov	r5, r0
    8820:	4eaf      	ldr	r6, [pc, #700]	; (8ae0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2c8>)
    8822:	4689      	mov	r9, r1
  type_ = 0;
  chipSelectPin_ = chipSelectPin;
    8824:	7002      	strb	r2, [r0, #0]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    8826:	2101      	movs	r1, #1
    8828:	4610      	mov	r0, r2
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
  type_ = 0;
    882a:	70ab      	strb	r3, [r5, #2]
    882c:	6837      	ldr	r7, [r6, #0]
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    882e:	f001 feed 	bl	a60c <digitalWrite>
  pinMode(chipSelectPin_, OUTPUT);
    8832:	7828      	ldrb	r0, [r5, #0]
    8834:	2101      	movs	r1, #1
    8836:	f001 fef5 	bl	a624 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    883a:	2101      	movs	r1, #1
    883c:	7828      	ldrb	r0, [r5, #0]
    883e:	f001 fee5 	bl	a60c <digitalWrite>
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    8842:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8af8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e0>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    8846:	4aa7      	ldr	r2, [pc, #668]	; (8ae4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2cc>)
    8848:	2307      	movs	r3, #7
    884a:	4ca7      	ldr	r4, [pc, #668]	; (8ae8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d0>)
  }
  SPI.begin();
    884c:	4640      	mov	r0, r8
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    884e:	e884 000c 	stmia.w	r4, {r2, r3}
  }
  SPI.begin();
    8852:	f001 fac3 	bl	9ddc <SPIClass::begin()>
#if defined(USE_TEENSY3_SPI)
  spiBegin();
  spiInit(6);
#elif defined(USE_TEENSY4_SPI)
  spiInit(6);
  pinMode(SS_PIN, OUTPUT);
    8856:	2101      	movs	r1, #1
    8858:	200a      	movs	r0, #10
    885a:	f001 fee3 	bl	a624 <pinMode>
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin  
    885e:	200a      	movs	r0, #10
    8860:	2101      	movs	r1, #1
    8862:	f001 fed3 	bl	a60c <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8866:	f898 0013 	ldrb.w	r0, [r8, #19]
    886a:	e894 4004 	ldmia.w	r4, {r2, lr}
    886e:	2800      	cmp	r0, #0
    8870:	d03a      	beq.n	88e8 <Sd2Card::SD_init(unsigned char, unsigned char)+0xd0>
			__disable_irq();
    8872:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8874:	f898 0013 	ldrb.w	r0, [r8, #19]
    8878:	07c4      	lsls	r4, r0, #31
    887a:	4603      	mov	r3, r0
    887c:	d50a      	bpl.n	8894 <Sd2Card::SD_init(unsigned char, unsigned char)+0x7c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    887e:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8b1c <Sd2Card::SD_init(unsigned char, unsigned char)+0x304>
    8882:	f8d8 4014 	ldr.w	r4, [r8, #20]
    8886:	f8dc 1000 	ldr.w	r1, [ip]
    888a:	4021      	ands	r1, r4
    888c:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    8890:	f8cc 1000 	str.w	r1, [ip]
			}
			if (interruptMasksUsed & 0x02) {
    8894:	0780      	lsls	r0, r0, #30
    8896:	d509      	bpl.n	88ac <Sd2Card::SD_init(unsigned char, unsigned char)+0x94>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8898:	4894      	ldr	r0, [pc, #592]	; (8aec <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d4>)
    889a:	f8d8 1018 	ldr.w	r1, [r8, #24]
    889e:	6804      	ldr	r4, [r0, #0]
    88a0:	f898 3013 	ldrb.w	r3, [r8, #19]
    88a4:	4021      	ands	r1, r4
    88a6:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    88aa:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x04) {
    88ac:	0759      	lsls	r1, r3, #29
    88ae:	d509      	bpl.n	88c4 <Sd2Card::SD_init(unsigned char, unsigned char)+0xac>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    88b0:	488f      	ldr	r0, [pc, #572]	; (8af0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2d8>)
    88b2:	f8d8 101c 	ldr.w	r1, [r8, #28]
    88b6:	6804      	ldr	r4, [r0, #0]
    88b8:	f898 3013 	ldrb.w	r3, [r8, #19]
    88bc:	4021      	ands	r1, r4
    88be:	f8c8 1030 	str.w	r1, [r8, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    88c2:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x08) {
    88c4:	071c      	lsls	r4, r3, #28
    88c6:	d509      	bpl.n	88dc <Sd2Card::SD_init(unsigned char, unsigned char)+0xc4>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    88c8:	488a      	ldr	r0, [pc, #552]	; (8af4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2dc>)
    88ca:	f8d8 1020 	ldr.w	r1, [r8, #32]
    88ce:	6804      	ldr	r4, [r0, #0]
    88d0:	f898 3013 	ldrb.w	r3, [r8, #19]
    88d4:	4021      	ands	r1, r4
    88d6:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    88da:	6001      	str	r1, [r0, #0]
			}
			if (interruptMasksUsed & 0x10) {
    88dc:	06d8      	lsls	r0, r3, #27
    88de:	f100 80a9 	bmi.w	8a34 <Sd2Card::SD_init(unsigned char, unsigned char)+0x21c>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    88e2:	b662      	cpsie	i
    88e4:	f898 0013 	ldrb.w	r0, [r8, #19]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    88e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    88ec:	4982      	ldr	r1, [pc, #520]	; (8af8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e0>)
    88ee:	4293      	cmp	r3, r2
    88f0:	f000 80c1 	beq.w	8a76 <Sd2Card::SD_init(unsigned char, unsigned char)+0x25e>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    88f4:	4b81      	ldr	r3, [pc, #516]	; (8afc <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e4>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    88f6:	4c82      	ldr	r4, [pc, #520]	; (8b00 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2e8>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    88f8:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    88fa:	608a      	str	r2, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    88fc:	f3c3 1101 	ubfx	r1, r3, #4, #2
    8900:	f3c3 6382 	ubfx	r3, r3, #26, #3
    8904:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    8908:	3301      	adds	r3, #1
    890a:	fbb1 f1f3 	udiv	r1, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    890e:	2a00      	cmp	r2, #0
    8910:	f000 808e 	beq.w	8a30 <Sd2Card::SD_init(unsigned char, unsigned char)+0x218>
    8914:	fbb1 f3f2 	udiv	r3, r1, r2

			if (d && clkhz/d > _clock) d++;
    8918:	b153      	cbz	r3, 8930 <Sd2Card::SD_init(unsigned char, unsigned char)+0x118>
    891a:	fbb1 f1f3 	udiv	r1, r1, r3
    891e:	4291      	cmp	r1, r2
    8920:	bf88      	it	hi
    8922:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    8924:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8928:	f0c0 80d1 	bcc.w	8ace <Sd2Card::SD_init(unsigned char, unsigned char)+0x2b6>
    892c:	f647 73ff 	movw	r3, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    8930:	f8c8 300c 	str.w	r3, [r8, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8934:	f8d8 2000 	ldr.w	r2, [r8]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    8938:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    893a:	2103      	movs	r1, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    893c:	f04f 0c01 	mov.w	ip, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    8940:	6114      	str	r4, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    8942:	240a      	movs	r4, #10
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    8944:	6251      	str	r1, [r2, #36]	; 0x24
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8946:	21ff      	movs	r1, #255	; 0xff

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    8948:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    894a:	f8c2 e060 	str.w	lr, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    894e:	f8c2 c010 	str.w	ip, [r2, #16]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8952:	6651      	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8954:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8956:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    895a:	d0fb      	beq.n	8954 <Sd2Card::SD_init(unsigned char, unsigned char)+0x13c>
    895c:	3c01      	subs	r4, #1
    895e:	6f53      	ldr	r3, [r2, #116]	; 0x74
#endif  // not USE_TEENSY3_SPI
  // must supply min of 74 clock cycles with CS high.
#ifdef SPI_HAS_TRANSACTION
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    8960:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8964:	d1f5      	bne.n	8952 <Sd2Card::SD_init(unsigned char, unsigned char)+0x13a>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8966:	b328      	cbz	r0, 89b4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x19c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8968:	07c1      	lsls	r1, r0, #31
    896a:	d505      	bpl.n	8978 <Sd2Card::SD_init(unsigned char, unsigned char)+0x160>
    896c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    8970:	4b64      	ldr	r3, [pc, #400]	; (8b04 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2ec>)
    8972:	f898 0013 	ldrb.w	r0, [r8, #19]
    8976:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    8978:	0782      	lsls	r2, r0, #30
    897a:	d505      	bpl.n	8988 <Sd2Card::SD_init(unsigned char, unsigned char)+0x170>
    897c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    8980:	4b61      	ldr	r3, [pc, #388]	; (8b08 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f0>)
    8982:	f898 0013 	ldrb.w	r0, [r8, #19]
    8986:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    8988:	0743      	lsls	r3, r0, #29
    898a:	d505      	bpl.n	8998 <Sd2Card::SD_init(unsigned char, unsigned char)+0x180>
    898c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    8990:	4b5e      	ldr	r3, [pc, #376]	; (8b0c <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f4>)
    8992:	f898 0013 	ldrb.w	r0, [r8, #19]
    8996:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8998:	0701      	lsls	r1, r0, #28
    899a:	d505      	bpl.n	89a8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x190>
    899c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    89a0:	4b5b      	ldr	r3, [pc, #364]	; (8b10 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2f8>)
    89a2:	f898 0013 	ldrb.w	r0, [r8, #19]
    89a6:	601a      	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    89a8:	06c2      	lsls	r2, r0, #27
    89aa:	d503      	bpl.n	89b4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x19c>
    89ac:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    89b0:	4b58      	ldr	r3, [pc, #352]	; (8b14 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2fc>)
    89b2:	601a      	str	r2, [r3, #0]
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
    89b4:	4628      	mov	r0, r5
    89b6:	f7ff fe9b 	bl	86f0 <Sd2Card::chipSelectLow()>
    89ba:	e004      	b.n	89c6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ae>
    89bc:	6833      	ldr	r3, [r6, #0]
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    89be:	1bdb      	subs	r3, r3, r7
    89c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    89c4:	d851      	bhi.n	8a6a <Sd2Card::SD_init(unsigned char, unsigned char)+0x252>
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    89c6:	2200      	movs	r2, #0
    89c8:	4628      	mov	r0, r5
    89ca:	4611      	mov	r1, r2
    89cc:	f7ff fe02 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    89d0:	2801      	cmp	r0, #1
    89d2:	4682      	mov	sl, r0
    89d4:	7068      	strb	r0, [r5, #1]
    89d6:	d1f1      	bne.n	89bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x1a4>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_CMD0
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    89d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    89dc:	2108      	movs	r1, #8
    89de:	4628      	mov	r0, r5
    89e0:	f7ff fdf8 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    89e4:	0743      	lsls	r3, r0, #29
    89e6:	d52e      	bpl.n	8a46 <Sd2Card::SD_init(unsigned char, unsigned char)+0x22e>
    type_ = SD_CARD_TYPE_SD1;
    89e8:	f885 a002 	strb.w	sl, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    89ec:	f04f 0a00 	mov.w	sl, #0
    89f0:	e004      	b.n	89fc <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e4>
    89f2:	6833      	ldr	r3, [r6, #0]
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    89f4:	1bdb      	subs	r3, r3, r7
    89f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    89fa:	d836      	bhi.n	8a6a <Sd2Card::SD_init(unsigned char, unsigned char)+0x252>
  // private functions
  uint8_t SD_init(uint8_t sckRateID, uint8_t chipSelectPin);
  uint8_t SD_readBlock(uint32_t block, uint8_t* dst);
  uint8_t SD_writeBlock(uint32_t blockNumber, const uint8_t* src);
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    89fc:	2200      	movs	r2, #0
    89fe:	2137      	movs	r1, #55	; 0x37
    8a00:	4628      	mov	r0, r5
    8a02:	f7ff fde7 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8a06:	4652      	mov	r2, sl
    8a08:	2129      	movs	r1, #41	; 0x29
    8a0a:	4628      	mov	r0, r5
    8a0c:	f7ff fde2 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    8a10:	7068      	strb	r0, [r5, #1]
    8a12:	2800      	cmp	r0, #0
    8a14:	d1ed      	bne.n	89f2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1da>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    8a16:	78ab      	ldrb	r3, [r5, #2]
    8a18:	2b02      	cmp	r3, #2
    8a1a:	d033      	beq.n	8a84 <Sd2Card::SD_init(unsigned char, unsigned char)+0x26c>
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    8a1c:	4628      	mov	r0, r5
  return setSckRate(sckRateID);
    8a1e:	2401      	movs	r4, #1
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    8a20:	f7ff fe2c 	bl	867c <Sd2Card::chipSelectHigh()>
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
#if defined(USE_TEENSY3_SPI) || defined(USE_TEENSY4_SPI)
  spiInit(sckRateID);
    8a24:	4648      	mov	r0, r9
    8a26:	f7ff fd83 	bl	8530 <spiInit(unsigned char)>
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
  return false;
}
    8a2a:	4620      	mov	r0, r4
    8a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    8a30:	460b      	mov	r3, r1
    8a32:	e771      	b.n	8918 <Sd2Card::SD_init(unsigned char, unsigned char)+0x100>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    8a34:	4938      	ldr	r1, [pc, #224]	; (8b18 <Sd2Card::SD_init(unsigned char, unsigned char)+0x300>)
    8a36:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    8a3a:	6808      	ldr	r0, [r1, #0]
    8a3c:	4003      	ands	r3, r0
    8a3e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    8a42:	600b      	str	r3, [r1, #0]
    8a44:	e74d      	b.n	88e2 <Sd2Card::SD_init(unsigned char, unsigned char)+0xca>
    8a46:	2104      	movs	r1, #4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8a48:	20ff      	movs	r0, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8a4a:	f8d8 2000 	ldr.w	r2, [r8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8a4e:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8a50:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8a52:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8a56:	d0fb      	beq.n	8a50 <Sd2Card::SD_init(unsigned char, unsigned char)+0x238>
    8a58:	6f52      	ldr	r2, [r2, #116]	; 0x74
    8a5a:	1e4b      	subs	r3, r1, #1
    8a5c:	b2d2      	uxtb	r2, r2
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    8a5e:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
    8a62:	706a      	strb	r2, [r5, #1]
    8a64:	d1f1      	bne.n	8a4a <Sd2Card::SD_init(unsigned char, unsigned char)+0x232>
    if (status_ != 0XAA) {
    8a66:	2aaa      	cmp	r2, #170	; 0xaa
    8a68:	d007      	beq.n	8a7a <Sd2Card::SD_init(unsigned char, unsigned char)+0x262>
  }
  chipSelectHigh();
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
    8a6a:	4628      	mov	r0, r5
    8a6c:	f7ff fe06 	bl	867c <Sd2Card::chipSelectHigh()>
  return false;
}
    8a70:	4620      	mov	r0, r4
    8a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a76:	68cb      	ldr	r3, [r1, #12]
    8a78:	e75c      	b.n	8934 <Sd2Card::SD_init(unsigned char, unsigned char)+0x11c>
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    8a7a:	2302      	movs	r3, #2
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    8a7c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    8a80:	70ab      	strb	r3, [r5, #2]
    8a82:	e7bb      	b.n	89fc <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e4>
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    8a84:	4602      	mov	r2, r0
    8a86:	213a      	movs	r1, #58	; 0x3a
    8a88:	4628      	mov	r0, r5
    8a8a:	f7ff fda3 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8a8e:	2800      	cmp	r0, #0
    8a90:	d1eb      	bne.n	8a6a <Sd2Card::SD_init(unsigned char, unsigned char)+0x252>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8a92:	f8d8 3000 	ldr.w	r3, [r8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8a96:	22ff      	movs	r2, #255	; 0xff
    8a98:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8a9c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8aa0:	d0fb      	beq.n	8a9a <Sd2Card::SD_init(unsigned char, unsigned char)+0x282>
    8aa2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    8aa4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    8aa8:	2ac0      	cmp	r2, #192	; 0xc0
    8aaa:	d103      	bne.n	8ab4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>
    8aac:	2303      	movs	r3, #3
    8aae:	70ab      	strb	r3, [r5, #2]
    8ab0:	f8d8 3000 	ldr.w	r3, [r8]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    8ab4:	2103      	movs	r1, #3
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8ab6:	20ff      	movs	r0, #255	; 0xff
    8ab8:	6658      	str	r0, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8aba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8abc:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8ac0:	d0fb      	beq.n	8aba <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a2>
    8ac2:	3901      	subs	r1, #1
    8ac4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    8ac6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8aca:	d1f5      	bne.n	8ab8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a0>
    8acc:	e7a6      	b.n	8a1c <Sd2Card::SD_init(unsigned char, unsigned char)+0x204>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    8ace:	2b02      	cmp	r3, #2
    8ad0:	d801      	bhi.n	8ad6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2be>
    8ad2:	2300      	movs	r3, #0
    8ad4:	e72c      	b.n	8930 <Sd2Card::SD_init(unsigned char, unsigned char)+0x118>
    8ad6:	3b02      	subs	r3, #2
    8ad8:	085a      	lsrs	r2, r3, #1
    8ada:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8ade:	e727      	b.n	8930 <Sd2Card::SD_init(unsigned char, unsigned char)+0x118>
    8ae0:	20002c14 	.word	0x20002c14
    8ae4:	00061a80 	.word	0x00061a80
    8ae8:	200029f0 	.word	0x200029f0
    8aec:	e000e184 	.word	0xe000e184
    8af0:	e000e188 	.word	0xe000e188
    8af4:	e000e18c 	.word	0xe000e18c
    8af8:	20001e1c 	.word	0x20001e1c
    8afc:	400fc000 	.word	0x400fc000
    8b00:	200014c0 	.word	0x200014c0
    8b04:	e000e100 	.word	0xe000e100
    8b08:	e000e104 	.word	0xe000e104
    8b0c:	e000e108 	.word	0xe000e108
    8b10:	e000e10c 	.word	0xe000e10c
    8b14:	e000e110 	.word	0xe000e110
    8b18:	e000e190 	.word	0xe000e190
    8b1c:	e000e180 	.word	0xe000e180

00008b20 <Sd2Card::waitStartBlock()>:
    8b20:	490f      	ldr	r1, [pc, #60]	; (8b60 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    8b22:	b470      	push	{r4, r5, r6}
    8b24:	4d0f      	ldr	r5, [pc, #60]	; (8b64 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8b26:	24ff      	movs	r4, #255	; 0xff
    8b28:	680e      	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8b2a:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8b2c:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8b2e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8b30:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8b34:	d0fb      	beq.n	8b2e <Sd2Card::waitStartBlock()+0xe>
    8b36:	6f53      	ldr	r3, [r2, #116]	; 0x74
    8b38:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    8b3a:	2bff      	cmp	r3, #255	; 0xff
    8b3c:	7043      	strb	r3, [r0, #1]
    8b3e:	d107      	bne.n	8b50 <Sd2Card::waitStartBlock()+0x30>
    8b40:	680b      	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    8b42:	1b9b      	subs	r3, r3, r6
    8b44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8b48:	d9ef      	bls.n	8b2a <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8b4a:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8b4c:	bc70      	pop	{r4, r5, r6}
    8b4e:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8b50:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    8b54:	fab0 f080 	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8b58:	bc70      	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8b5a:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8b5c:	4770      	bx	lr
    8b5e:	bf00      	nop
    8b60:	20002c14 	.word	0x20002c14
    8b64:	20001e1c 	.word	0x20001e1c

00008b68 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    8b68:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    8b6a:	7883      	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    8b6c:	460d      	mov	r5, r1
    8b6e:	4604      	mov	r4, r0
    8b70:	4616      	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    8b72:	2b03      	cmp	r3, #3
    8b74:	bf18      	it	ne
    8b76:	024d      	lslne	r5, r1, #9
  chipSelectLow();
    8b78:	f7ff fdba 	bl	86f0 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    8b7c:	2111      	movs	r1, #17
    8b7e:	462a      	mov	r2, r5
    8b80:	4620      	mov	r0, r4
    8b82:	f7ff fd27 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8b86:	b918      	cbnz	r0, 8b90 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    8b88:	4620      	mov	r0, r4
    8b8a:	f7ff ffc9 	bl	8b20 <Sd2Card::waitStartBlock()>
    8b8e:	b920      	cbnz	r0, 8b9a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    8b90:	4620      	mov	r0, r4
    8b92:	f7ff fd73 	bl	867c <Sd2Card::chipSelectHigh()>
  return false;
    8b96:	2000      	movs	r0, #0
}
    8b98:	bd70      	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8b9a:	4d11      	ldr	r5, [pc, #68]	; (8be0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    8b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8ba0:	21ff      	movs	r1, #255	; 0xff
    8ba2:	4630      	mov	r0, r6
    8ba4:	f004 fa24 	bl	cff0 <memset>
    8ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
    8bac:	4632      	mov	r2, r6
    8bae:	4628      	mov	r0, r5
    8bb0:	4631      	mov	r1, r6
    8bb2:	f001 fa1d 	bl	9ff0 <SPIClass::transfer(void const*, void*, unsigned int)>
    8bb6:	682b      	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8bb8:	22ff      	movs	r2, #255	; 0xff
    8bba:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8bbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8bbe:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8bc2:	d0fb      	beq.n	8bbc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8bc4:	22ff      	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    8bc6:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8bc8:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8bcc:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    8bd0:	d0fb      	beq.n	8bca <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    8bd2:	4620      	mov	r0, r4
    8bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8bd6:	f7ff fd51 	bl	867c <Sd2Card::chipSelectHigh()>
  return true;
    8bda:	2001      	movs	r0, #1
    8bdc:	bd70      	pop	{r4, r5, r6, pc}
    8bde:	bf00      	nop
    8be0:	20001e1c 	.word	0x20001e1c

00008be4 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    8be4:	4b1b      	ldr	r3, [pc, #108]	; (8c54 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    8be6:	b410      	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8be8:	681c      	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8bea:	6661      	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8bec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8bee:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8bf2:	d0fb      	beq.n	8bec <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    8bf4:	1e51      	subs	r1, r2, #1
    8bf6:	6f63      	ldr	r3, [r4, #116]	; 0x74
    8bf8:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8bfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8c00:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8c02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8c04:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8c08:	d0fb      	beq.n	8c02 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    8c0a:	4291      	cmp	r1, r2
    8c0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    8c0e:	d1f5      	bne.n	8bfc <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8c10:	23ff      	movs	r3, #255	; 0xff
    8c12:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8c14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8c16:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8c1a:	d0fb      	beq.n	8c14 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8c1c:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    8c1e:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8c20:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8c22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8c24:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8c28:	d0fb      	beq.n	8c22 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8c2a:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    8c2c:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8c2e:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8c30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8c32:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8c36:	d0fb      	beq.n	8c30 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    8c38:	6f63      	ldr	r3, [r4, #116]	; 0x74
    8c3a:	b2db      	uxtb	r3, r3
    8c3c:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    8c40:	7043      	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    8c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    8c46:	f1a2 0005 	sub.w	r0, r2, #5
    8c4a:	fab0 f080 	clz	r0, r0
    8c4e:	0940      	lsrs	r0, r0, #5
    8c50:	4770      	bx	lr
    8c52:	bf00      	nop
    8c54:	20001e1c 	.word	0x20001e1c

00008c58 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    8c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c5a:	4605      	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    8c5c:	b169      	cbz	r1, 8c7a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    8c5e:	7883      	ldrb	r3, [r0, #2]
    8c60:	460c      	mov	r4, r1
    8c62:	4616      	mov	r6, r2
    8c64:	2b03      	cmp	r3, #3
    8c66:	bf18      	it	ne
    8c68:	024c      	lslne	r4, r1, #9
  chipSelectLow();
    8c6a:	f7ff fd41 	bl	86f0 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    8c6e:	2118      	movs	r1, #24
    8c70:	4622      	mov	r2, r4
    8c72:	4628      	mov	r0, r5
    8c74:	f7ff fcae 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8c78:	b120      	cbz	r0, 8c84 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    8c7a:	4628      	mov	r0, r5
    8c7c:	f7ff fcfe 	bl	867c <Sd2Card::chipSelectHigh()>
  return false;
    8c80:	2000      	movs	r0, #0
}
    8c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    8c84:	4632      	mov	r2, r6
    8c86:	21fe      	movs	r1, #254	; 0xfe
    8c88:	4628      	mov	r0, r5
    8c8a:	f7ff ffab 	bl	8be4 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    8c8e:	2800      	cmp	r0, #0
    8c90:	d0f3      	beq.n	8c7a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    8c92:	4915      	ldr	r1, [pc, #84]	; (8ce8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8c94:	20ff      	movs	r0, #255	; 0xff
    8c96:	4e15      	ldr	r6, [pc, #84]	; (8cec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    8c98:	680f      	ldr	r7, [r1, #0]
    8c9a:	6832      	ldr	r2, [r6, #0]
    8c9c:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8c9e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8ca0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8ca4:	d0fb      	beq.n	8c9e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    8ca6:	6f54      	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    8ca8:	b2e4      	uxtb	r4, r4
    8caa:	2cff      	cmp	r4, #255	; 0xff
    8cac:	d005      	beq.n	8cba <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    8cae:	680b      	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    8cb0:	1bdb      	subs	r3, r3, r7
    8cb2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    8cb6:	d3f1      	bcc.n	8c9c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    8cb8:	e7df      	b.n	8c7a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    8cba:	2200      	movs	r2, #0
    8cbc:	210d      	movs	r1, #13
    8cbe:	4628      	mov	r0, r5
    8cc0:	f7ff fc88 	bl	85d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8cc4:	2800      	cmp	r0, #0
    8cc6:	d1d8      	bne.n	8c7a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8cc8:	6832      	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8cca:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8ccc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8cce:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8cd2:	d0fb      	beq.n	8ccc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    8cd4:	6f53      	ldr	r3, [r2, #116]	; 0x74
    8cd6:	f013 0fff 	tst.w	r3, #255	; 0xff
    8cda:	d1ce      	bne.n	8c7a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    8cdc:	4628      	mov	r0, r5
    8cde:	f7ff fccd 	bl	867c <Sd2Card::chipSelectHigh()>
  return true;
    8ce2:	2001      	movs	r0, #1
    8ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ce6:	bf00      	nop
    8ce8:	20002c14 	.word	0x20002c14
    8cec:	20001e1c 	.word	0x20001e1c

00008cf0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    8cf0:	4b02      	ldr	r3, [pc, #8]	; (8cfc <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    8cf2:	2207      	movs	r2, #7
    8cf4:	4902      	ldr	r1, [pc, #8]	; (8d00 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    8cf6:	e883 0006 	stmia.w	r3, {r1, r2}
    8cfa:	4770      	bx	lr
    8cfc:	200029f0 	.word	0x200029f0
    8d00:	003d0900 	.word	0x003d0900

00008d04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    8d04:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    8d06:	f990 3005 	ldrsb.w	r3, [r0, #5]
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	db03      	blt.n	8d16 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    8d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    8d12:	f000 bc19 	b.w	9548 <SdVolume::cacheFlush()>
    8d16:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8d18:	2101      	movs	r1, #1
    8d1a:	6900      	ldr	r0, [r0, #16]
    8d1c:	f000 fc54 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8d20:	b300      	cbz	r0, 8d64 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8d22:	7d25      	ldrb	r5, [r4, #20]
    8d24:	4b10      	ldr	r3, [pc, #64]	; (8d68 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    8d26:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    8d2a:	d01b      	beq.n	8d64 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8d2c:	79a3      	ldrb	r3, [r4, #6]
    8d2e:	2b01      	cmp	r3, #1
    8d30:	d915      	bls.n	8d5e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8d32:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8d34:	490d      	ldr	r1, [pc, #52]	; (8d6c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    8d36:	0c1a      	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8d38:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8d3a:	680b      	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    8d3c:	82aa      	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8d3e:	b133      	cbz	r3, 8d4e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    8d40:	f105 0116 	add.w	r1, r5, #22
    8d44:	f105 0018 	add.w	r0, r5, #24
    8d48:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    8d4a:	8b2b      	ldrh	r3, [r5, #24]
    8d4c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    8d4e:	7963      	ldrb	r3, [r4, #5]
    8d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8d54:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    8d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    8d5a:	f000 bbf5 	b.w	9548 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8d5e:	69a3      	ldr	r3, [r4, #24]
    8d60:	61eb      	str	r3, [r5, #28]
    8d62:	e7e6      	b.n	8d32 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    8d64:	2000      	movs	r0, #0
    8d66:	bd38      	pop	{r3, r4, r5, pc}
    8d68:	20002a08 	.word	0x20002a08
    8d6c:	200029fc 	.word	0x200029fc

00008d70 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    8d70:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    8d72:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    8d76:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    8d78:	2101      	movs	r1, #1
    8d7a:	6a00      	ldr	r0, [r0, #32]
    8d7c:	f000 fd1a 	bl	97b4 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    8d80:	b150      	cbz	r0, 8d98 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    8d82:	69e3      	ldr	r3, [r4, #28]
    8d84:	b93b      	cbnz	r3, 8d96 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    8d86:	7963      	ldrb	r3, [r4, #5]
    8d88:	2001      	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    8d8a:	68a2      	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    8d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    8d90:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    8d92:	7163      	strb	r3, [r4, #5]
    8d94:	bd10      	pop	{r4, pc}
  }
  return true;
    8d96:	2001      	movs	r0, #1
}
    8d98:	bd10      	pop	{r4, pc}
    8d9a:	bf00      	nop

00008d9c <SdFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    8d9c:	b570      	push	{r4, r5, r6, lr}
    8d9e:	4606      	mov	r6, r0
  if (!addCluster()) return false;
    8da0:	f7ff ffe6 	bl	8d70 <SdFile::addCluster()>
    8da4:	b198      	cbz	r0, 8dce <SdFile::addDirCluster()+0x32>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    8da6:	6a32      	ldr	r2, [r6, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    8da8:	68b5      	ldr	r5, [r6, #8]
    8daa:	7c11      	ldrb	r1, [r2, #16]
    8dac:	3d02      	subs	r5, #2
    8dae:	6953      	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    8db0:	7914      	ldrb	r4, [r2, #4]
    8db2:	408d      	lsls	r5, r1
    8db4:	3b01      	subs	r3, #1
    8db6:	b174      	cbz	r4, 8dd6 <SdFile::addDirCluster()+0x3a>
    8db8:	441d      	add	r5, r3
    8dba:	e002      	b.n	8dc2 <SdFile::addDirCluster()+0x26>
    8dbc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8dc0:	d007      	beq.n	8dd2 <SdFile::addDirCluster()+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    8dc2:	1960      	adds	r0, r4, r5
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    8dc4:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    8dc6:	f000 fc6f 	bl	96a8 <SdVolume::cacheZeroBlock(unsigned long)>
    8dca:	2800      	cmp	r0, #0
    8dcc:	d1f6      	bne.n	8dbc <SdFile::addDirCluster()+0x20>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    8dce:	2000      	movs	r0, #0
    8dd0:	bd70      	pop	{r4, r5, r6, pc}
    8dd2:	6a33      	ldr	r3, [r6, #32]
    8dd4:	7c19      	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    8dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
    8dda:	69b4      	ldr	r4, [r6, #24]
    8ddc:	2001      	movs	r0, #1
    8dde:	fa02 f301 	lsl.w	r3, r2, r1
    8de2:	4423      	add	r3, r4
    8de4:	61b3      	str	r3, [r6, #24]
  return true;
}
    8de6:	bd70      	pop	{r4, r5, r6, pc}

00008de8 <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8de8:	7982      	ldrb	r2, [r0, #6]
    8dea:	b90a      	cbnz	r2, 8df0 <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    8dec:	2000      	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    8dee:	4770      	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    8df0:	b510      	push	{r4, lr}
    8df2:	4604      	mov	r4, r0
    8df4:	f7ff ff86 	bl	8d04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    8df8:	b118      	cbz	r0, 8e02 <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    8dfa:	2300      	movs	r3, #0
  return true;
    8dfc:	2001      	movs	r0, #1
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
  type_ = FAT_FILE_TYPE_CLOSED;
    8dfe:	71a3      	strb	r3, [r4, #6]
  return true;
}
    8e00:	bd10      	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    8e02:	2000      	movs	r0, #0
    8e04:	bd10      	pop	{r4, pc}
    8e06:	bf00      	nop

00008e08 <SdFile::make83Name(char const*, unsigned char*)>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    8e08:	b4f0      	push	{r4, r5, r6, r7}
    8e0a:	1e4b      	subs	r3, r1, #1
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    8e0c:	2420      	movs	r4, #32
    8e0e:	f101 020a 	add.w	r2, r1, #10
    8e12:	f803 4f01 	strb.w	r4, [r3, #1]!
    8e16:	4293      	cmp	r3, r2
    8e18:	d1fb      	bne.n	8e12 <SdFile::make83Name(char const*, unsigned char*)+0xa>
    8e1a:	3801      	subs	r0, #1
    8e1c:	2500      	movs	r5, #0
    8e1e:	2607      	movs	r6, #7
  i = 0;
  while ((c = *str++) != '\0') {
    8e20:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    8e24:	b314      	cbz	r4, 8e6c <SdFile::make83Name(char const*, unsigned char*)+0x64>
    if (c == '.') {
    8e26:	2c2e      	cmp	r4, #46	; 0x2e
    8e28:	d01b      	beq.n	8e62 <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    8e2a:	4a13      	ldr	r2, [pc, #76]	; (8e78 <SdFile::make83Name(char const*, unsigned char*)+0x70>)
    8e2c:	237c      	movs	r3, #124	; 0x7c
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    8e2e:	429c      	cmp	r4, r3
    8e30:	d014      	beq.n	8e5c <SdFile::make83Name(char const*, unsigned char*)+0x54>
    8e32:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    8e36:	2b00      	cmp	r3, #0
    8e38:	d1f9      	bne.n	8e2e <SdFile::make83Name(char const*, unsigned char*)+0x26>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    8e3a:	f1a4 0321 	sub.w	r3, r4, #33	; 0x21
    8e3e:	2b5d      	cmp	r3, #93	; 0x5d
    8e40:	d80c      	bhi.n	8e5c <SdFile::make83Name(char const*, unsigned char*)+0x54>
    8e42:	42ae      	cmp	r6, r5
    8e44:	d30a      	bcc.n	8e5c <SdFile::make83Name(char const*, unsigned char*)+0x54>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    8e46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    8e4a:	1c6f      	adds	r7, r5, #1
    8e4c:	194a      	adds	r2, r1, r5
    8e4e:	2b19      	cmp	r3, #25
    8e50:	b2fd      	uxtb	r5, r7
    8e52:	d801      	bhi.n	8e58 <SdFile::make83Name(char const*, unsigned char*)+0x50>
    8e54:	3c20      	subs	r4, #32
    8e56:	b2e4      	uxtb	r4, r4
    8e58:	7014      	strb	r4, [r2, #0]
    8e5a:	e7e1      	b.n	8e20 <SdFile::make83Name(char const*, unsigned char*)+0x18>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    8e5c:	2000      	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    8e5e:	bcf0      	pop	{r4, r5, r6, r7}
    8e60:	4770      	bx	lr
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    8e62:	2e0a      	cmp	r6, #10
    8e64:	d0fa      	beq.n	8e5c <SdFile::make83Name(char const*, unsigned char*)+0x54>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    8e66:	2508      	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    8e68:	260a      	movs	r6, #10
    8e6a:	e7d9      	b.n	8e20 <SdFile::make83Name(char const*, unsigned char*)+0x18>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    8e6c:	7808      	ldrb	r0, [r1, #0]
    8e6e:	3820      	subs	r0, #32
    8e70:	bf18      	it	ne
    8e72:	2001      	movne	r0, #1
    8e74:	e7f3      	b.n	8e5e <SdFile::make83Name(char const*, unsigned char*)+0x56>
    8e76:	bf00      	nop
    8e78:	6000175c 	.word	0x6000175c

00008e7c <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    8e7c:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    8e7e:	7983      	ldrb	r3, [r0, #6]
    8e80:	b93b      	cbnz	r3, 8e92 <SdFile::openRoot(SdVolume*)+0x16>
    8e82:	f891 2020 	ldrb.w	r2, [r1, #32]
    8e86:	460d      	mov	r5, r1
    8e88:	4604      	mov	r4, r0

  if (vol->fatType() == 16) {
    8e8a:	2a10      	cmp	r2, #16
    8e8c:	d003      	beq.n	8e96 <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    8e8e:	2a20      	cmp	r2, #32
    8e90:	d011      	beq.n	8eb6 <SdFile::openRoot(SdVolume*)+0x3a>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    8e92:	2000      	movs	r0, #0
    8e94:	bd38      	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    8e96:	2202      	movs	r2, #2
    firstCluster_ = 0;
    8e98:	61c3      	str	r3, [r0, #28]
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    8e9a:	7182      	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    8e9c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    8e9e:	015b      	lsls	r3, r3, #5
    8ea0:	6183      	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    8ea2:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    8ea4:	2201      	movs	r2, #1
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    8ea6:	6225      	str	r5, [r4, #32]
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
    8ea8:	4610      	mov	r0, r2
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    8eaa:	7162      	strb	r2, [r4, #5]

  // set to start of file
  curCluster_ = 0;
    8eac:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    8eae:	60e3      	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    8eb0:	6123      	str	r3, [r4, #16]
  dirIndex_ = 0;
    8eb2:	7523      	strb	r3, [r4, #20]
  return true;
}
    8eb4:	bd38      	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    8eb6:	2303      	movs	r3, #3
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    8eb8:	f100 0218 	add.w	r2, r0, #24
    8ebc:	4608      	mov	r0, r1
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    8ebe:	71a3      	strb	r3, [r4, #6]
    8ec0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    8ec2:	61e1      	str	r1, [r4, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    8ec4:	f000 fc46 	bl	9754 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    8ec8:	2800      	cmp	r0, #0
    8eca:	d1ea      	bne.n	8ea2 <SdFile::openRoot(SdVolume*)+0x26>
    8ecc:	e7e1      	b.n	8e92 <SdFile::openRoot(SdVolume*)+0x16>
    8ece:	bf00      	nop

00008ed0 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    8ed0:	7983      	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    8ed2:	b913      	cbnz	r3, 8eda <SdFile::read(void*, unsigned int)+0xa>
    8ed4:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    8ed8:	4770      	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    8eda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ede:	468b      	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    8ee0:	7941      	ldrb	r1, [r0, #5]
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    8ee2:	b083      	sub	sp, #12
    8ee4:	4605      	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    8ee6:	07c9      	lsls	r1, r1, #31
    8ee8:	d55a      	bpl.n	8fa0 <SdFile::read(void*, unsigned int)+0xd0>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    8eea:	68c1      	ldr	r1, [r0, #12]
    8eec:	6984      	ldr	r4, [r0, #24]
    8eee:	1a64      	subs	r4, r4, r1
    8ef0:	4294      	cmp	r4, r2
    8ef2:	bf28      	it	cs
    8ef4:	4614      	movcs	r4, r2
    8ef6:	4626      	mov	r6, r4
    8ef8:	9401      	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    8efa:	2c00      	cmp	r4, #0
    8efc:	d068      	beq.n	8fd0 <SdFile::read(void*, unsigned int)+0x100>
    8efe:	461a      	mov	r2, r3
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    8f00:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000 <SdFile::read(void*, unsigned int)+0x130>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    8f04:	4f3d      	ldr	r7, [pc, #244]	; (8ffc <SdFile::read(void*, unsigned int)+0x12c>)

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    8f06:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    8f0a:	2a02      	cmp	r2, #2
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    8f0c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9004 <SdFile::read(void*, unsigned int)+0x134>
    8f10:	d041      	beq.n	8f96 <SdFile::read(void*, unsigned int)+0xc6>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    8f12:	6a28      	ldr	r0, [r5, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    8f14:	7904      	ldrb	r4, [r0, #4]
    8f16:	3c01      	subs	r4, #1
    8f18:	ea04 2451 	and.w	r4, r4, r1, lsr #9
    8f1c:	b2e4      	uxtb	r4, r4
      if (offset == 0 && blockOfCluster == 0) {
    8f1e:	f1ba 0f00 	cmp.w	sl, #0
    8f22:	d161      	bne.n	8fe8 <SdFile::read(void*, unsigned int)+0x118>
    8f24:	2c00      	cmp	r4, #0
    8f26:	d15f      	bne.n	8fe8 <SdFile::read(void*, unsigned int)+0x118>
        // start of new cluster
        if (curPosition_ == 0) {
    8f28:	2900      	cmp	r1, #0
    8f2a:	d155      	bne.n	8fd8 <SdFile::read(void*, unsigned int)+0x108>
          // use first cluster in file
          curCluster_ = firstCluster_;
    8f2c:	69e9      	ldr	r1, [r5, #28]
    8f2e:	60a9      	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    8f30:	3902      	subs	r1, #2
    8f32:	7c02      	ldrb	r2, [r0, #16]
    8f34:	6940      	ldr	r0, [r0, #20]
    8f36:	fa01 f202 	lsl.w	r2, r1, r2
    8f3a:	1821      	adds	r1, r4, r0
    8f3c:	4411      	add	r1, r2
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    8f3e:	f5ca 7400 	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    8f42:	796a      	ldrb	r2, [r5, #5]
    8f44:	42b4      	cmp	r4, r6
    8f46:	bfa8      	it	ge
    8f48:	4634      	movge	r4, r6
    8f4a:	0653      	lsls	r3, r2, #25
    8f4c:	d42d      	bmi.n	8faa <SdFile::read(void*, unsigned int)+0xda>
    8f4e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    8f52:	d02a      	beq.n	8faa <SdFile::read(void*, unsigned int)+0xda>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    8f54:	4608      	mov	r0, r1
    8f56:	2100      	movs	r1, #0
    8f58:	f000 fb36 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8f5c:	b300      	cbz	r0, 8fa0 <SdFile::read(void*, unsigned int)+0xd0>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    8f5e:	eb0a 0e09 	add.w	lr, sl, r9
      uint8_t* end = src + n;
    8f62:	eb0e 0004 	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    8f66:	4586      	cmp	lr, r0
    8f68:	d00b      	beq.n	8f82 <SdFile::read(void*, unsigned int)+0xb2>
    8f6a:	f10b 32ff 	add.w	r2, fp, #4294967295
    8f6e:	4673      	mov	r3, lr
    8f70:	f813 1b01 	ldrb.w	r1, [r3], #1
    8f74:	4298      	cmp	r0, r3
    8f76:	f802 1f01 	strb.w	r1, [r2, #1]!
    8f7a:	d1f9      	bne.n	8f70 <SdFile::read(void*, unsigned int)+0xa0>
    8f7c:	ebce 0000 	rsb	r0, lr, r0
    8f80:	4483      	add	fp, r0
    }
    curPosition_ += n;
    8f82:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    8f84:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    8f86:	4421      	add	r1, r4
    8f88:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    8f8a:	d021      	beq.n	8fd0 <SdFile::read(void*, unsigned int)+0x100>
    8f8c:	79aa      	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    8f8e:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    8f92:	2a02      	cmp	r2, #2
    8f94:	d1bd      	bne.n	8f12 <SdFile::read(void*, unsigned int)+0x42>
    8f96:	6a2a      	ldr	r2, [r5, #32]
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    8f98:	6a50      	ldr	r0, [r2, #36]	; 0x24
    8f9a:	eb00 2151 	add.w	r1, r0, r1, lsr #9
    8f9e:	e7ce      	b.n	8f3e <SdFile::read(void*, unsigned int)+0x6e>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    8fa0:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    8fa4:	b003      	add	sp, #12
    8fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    8faa:	683a      	ldr	r2, [r7, #0]
    8fac:	4291      	cmp	r1, r2
    8fae:	d0d1      	beq.n	8f54 <SdFile::read(void*, unsigned int)+0x84>
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    8fb0:	f8d8 0000 	ldr.w	r0, [r8]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    8fb4:	7803      	ldrb	r3, [r0, #0]
    8fb6:	2bfe      	cmp	r3, #254	; 0xfe
    8fb8:	d018      	beq.n	8fec <SdFile::read(void*, unsigned int)+0x11c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    8fba:	465a      	mov	r2, fp
    8fbc:	f7ff fdd4 	bl	8b68 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    8fc0:	2800      	cmp	r0, #0
    8fc2:	d0ed      	beq.n	8fa0 <SdFile::read(void*, unsigned int)+0xd0>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    8fc4:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    8fc6:	1b36      	subs	r6, r6, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    8fc8:	44a3      	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    8fca:	4421      	add	r1, r4
    8fcc:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    8fce:	d1dd      	bne.n	8f8c <SdFile::read(void*, unsigned int)+0xbc>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    8fd0:	9801      	ldr	r0, [sp, #4]
}
    8fd2:	b003      	add	sp, #12
    8fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    8fd8:	f105 0208 	add.w	r2, r5, #8
    8fdc:	68a9      	ldr	r1, [r5, #8]
    8fde:	f000 fb7f 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    8fe2:	2800      	cmp	r0, #0
    8fe4:	d0dc      	beq.n	8fa0 <SdFile::read(void*, unsigned int)+0xd0>
    8fe6:	6a28      	ldr	r0, [r5, #32]
    8fe8:	68a9      	ldr	r1, [r5, #8]
    8fea:	e7a1      	b.n	8f30 <SdFile::read(void*, unsigned int)+0x60>
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    8fec:	4658      	mov	r0, fp
    8fee:	f7ff f81b 	bl	8028 <SDHC_CardReadBlock(void*, unsigned long)>
    8ff2:	fab0 f080 	clz	r0, r0
    8ff6:	0940      	lsrs	r0, r0, #5
    8ff8:	e7e2      	b.n	8fc0 <SdFile::read(void*, unsigned int)+0xf0>
    8ffa:	bf00      	nop
    8ffc:	20001e18 	.word	0x20001e18
    9000:	20002a08 	.word	0x20002a08
    9004:	20002a04 	.word	0x20002a04

00009008 <SdFile::readDirCache()>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    9008:	7983      	ldrb	r3, [r0, #6]
    900a:	2b01      	cmp	r3, #1
    900c:	d917      	bls.n	903e <SdFile::readDirCache()+0x36>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    900e:	68c3      	ldr	r3, [r0, #12]
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9010:	2201      	movs	r2, #1
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    9012:	b530      	push	{r4, r5, lr}
    9014:	b083      	sub	sp, #12
    9016:	4604      	mov	r4, r0
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    9018:	f3c3 1543 	ubfx	r5, r3, #5, #4
    901c:	f10d 0107 	add.w	r1, sp, #7
    9020:	f7ff ff56 	bl	8ed0 <SdFile::read(void*, unsigned int)>
    9024:	2801      	cmp	r0, #1
    9026:	d002      	beq.n	902e <SdFile::readDirCache()+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    9028:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    902a:	b003      	add	sp, #12
    902c:	bd30      	pop	{r4, r5, pc}

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    902e:	68e3      	ldr	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    9030:	4804      	ldr	r0, [pc, #16]	; (9044 <SdFile::readDirCache()+0x3c>)

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    9032:	331f      	adds	r3, #31

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    9034:	eb00 1045 	add.w	r0, r0, r5, lsl #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    9038:	60e3      	str	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    903a:	b003      	add	sp, #12
    903c:	bd30      	pop	{r4, r5, pc}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    903e:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    9040:	4770      	bx	lr
    9042:	bf00      	nop
    9044:	20002a08 	.word	0x20002a08

00009048 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    9048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    904a:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    904c:	b113      	cbz	r3, 9054 <SdFile::seekSet(unsigned long)+0xc>
    904e:	6982      	ldr	r2, [r0, #24]
    9050:	428a      	cmp	r2, r1
    9052:	d201      	bcs.n	9058 <SdFile::seekSet(unsigned long)+0x10>
    9054:	2000      	movs	r0, #0
    9056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    9058:	2b02      	cmp	r3, #2
    905a:	460f      	mov	r7, r1
    905c:	4605      	mov	r5, r0
    905e:	d01c      	beq.n	909a <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    9060:	b1f7      	cbz	r7, 90a0 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    9062:	6a2b      	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    9064:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    9066:	68e9      	ldr	r1, [r5, #12]
    9068:	7c1b      	ldrb	r3, [r3, #16]
    906a:	1e4a      	subs	r2, r1, #1
    906c:	3309      	adds	r3, #9
    906e:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    9070:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    9072:	42a2      	cmp	r2, r4
    9074:	d802      	bhi.n	907c <SdFile::seekSet(unsigned long)+0x34>
    9076:	b109      	cbz	r1, 907c <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    9078:	1aa4      	subs	r4, r4, r2
    907a:	e001      	b.n	9080 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    907c:	69eb      	ldr	r3, [r5, #28]
    907e:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    9080:	f105 0608 	add.w	r6, r5, #8
    9084:	e006      	b.n	9094 <SdFile::seekSet(unsigned long)+0x4c>
    9086:	68a9      	ldr	r1, [r5, #8]
    9088:	3c01      	subs	r4, #1
    908a:	6a28      	ldr	r0, [r5, #32]
    908c:	f000 fb28 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    9090:	2800      	cmp	r0, #0
    9092:	d0df      	beq.n	9054 <SdFile::seekSet(unsigned long)+0xc>
    9094:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    9096:	2c00      	cmp	r4, #0
    9098:	d1f5      	bne.n	9086 <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    909a:	60ef      	str	r7, [r5, #12]
    return true;
    909c:	2001      	movs	r0, #1
    909e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    90a0:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    90a2:	2001      	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    90a4:	60ef      	str	r7, [r5, #12]
    return true;
    90a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000090a8 <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    90a8:	7983      	ldrb	r3, [r0, #6]
    90aa:	b10b      	cbz	r3, 90b0 <SdFile::sync()+0x8>
    90ac:	f7ff be2a 	b.w	8d04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    90b0:	4618      	mov	r0, r3
    90b2:	4770      	bx	lr

000090b4 <SdFile::truncate(unsigned long)>:
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    90b4:	7983      	ldrb	r3, [r0, #6]
    90b6:	2b01      	cmp	r3, #1
    90b8:	d001      	beq.n	90be <SdFile::truncate(unsigned long)+0xa>
    90ba:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    90bc:	4770      	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    90be:	b5f0      	push	{r4, r5, r6, r7, lr}
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    90c0:	7945      	ldrb	r5, [r0, #5]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    90c2:	b083      	sub	sp, #12
    90c4:	4602      	mov	r2, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    90c6:	07ac      	lsls	r4, r5, #30
    90c8:	d51c      	bpl.n	9104 <SdFile::truncate(unsigned long)+0x50>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    90ca:	6985      	ldr	r5, [r0, #24]
    90cc:	460c      	mov	r4, r1
    90ce:	428d      	cmp	r5, r1
    90d0:	d318      	bcc.n	9104 <SdFile::truncate(unsigned long)+0x50>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    90d2:	b1d5      	cbz	r5, 910a <SdFile::truncate(unsigned long)+0x56>
    90d4:	4625      	mov	r5, r4

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    90d6:	68d6      	ldr	r6, [r2, #12]
    90d8:	4614      	mov	r4, r2

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    90da:	f7ff ffb5 	bl	9048 <SdFile::seekSet(unsigned long)>
    90de:	b188      	cbz	r0, 9104 <SdFile::truncate(unsigned long)+0x50>

  if (length == 0) {
    90e0:	b9b5      	cbnz	r5, 9110 <SdFile::truncate(unsigned long)+0x5c>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    90e2:	69e1      	ldr	r1, [r4, #28]
    90e4:	6a20      	ldr	r0, [r4, #32]
    90e6:	f000 fbf1 	bl	98cc <SdVolume::freeChain(unsigned long)>
    90ea:	b158      	cbz	r0, 9104 <SdFile::truncate(unsigned long)+0x50>
    firstCluster_ = 0;
    90ec:	61e5      	str	r5, [r4, #28]
    90ee:	e022      	b.n	9136 <SdFile::truncate(unsigned long)+0x82>
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    90f0:	f000 fbec 	bl	98cc <SdVolume::freeChain(unsigned long)>
    90f4:	b130      	cbz	r0, 9104 <SdFile::truncate(unsigned long)+0x50>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    90f6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    90fa:	68a1      	ldr	r1, [r4, #8]
    90fc:	6a20      	ldr	r0, [r4, #32]
    90fe:	f000 fbd3 	bl	98a8 <SdVolume::fatPut(unsigned long, unsigned long)>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    9102:	b9c0      	cbnz	r0, 9136 <SdFile::truncate(unsigned long)+0x82>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    9104:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    9106:	b003      	add	sp, #12
    9108:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    910a:	4618      	mov	r0, r3

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    910c:	b003      	add	sp, #12
    910e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    9110:	aa01      	add	r2, sp, #4
    9112:	68a1      	ldr	r1, [r4, #8]
    9114:	6a20      	ldr	r0, [r4, #32]
    9116:	f000 fae3 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    911a:	2800      	cmp	r0, #0
    911c:	d0f2      	beq.n	9104 <SdFile::truncate(unsigned long)+0x50>

    if (!vol_->isEOC(toFree)) {
    911e:	6a20      	ldr	r0, [r4, #32]
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9120:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    9124:	4b0e      	ldr	r3, [pc, #56]	; (9160 <SdFile::truncate(unsigned long)+0xac>)
    9126:	f890 7020 	ldrb.w	r7, [r0, #32]
    912a:	9901      	ldr	r1, [sp, #4]
    912c:	2f10      	cmp	r7, #16
    912e:	bf08      	it	eq
    9130:	4613      	moveq	r3, r2
    9132:	4299      	cmp	r1, r3
    9134:	d3dc      	bcc.n	90f0 <SdFile::truncate(unsigned long)+0x3c>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    9136:	7963      	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    9138:	79a2      	ldrb	r2, [r4, #6]
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    913a:	f063 037f 	orn	r3, r3, #127	; 0x7f

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    913e:	61a5      	str	r5, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    9140:	7163      	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    9142:	2a00      	cmp	r2, #0
    9144:	d0de      	beq.n	9104 <SdFile::truncate(unsigned long)+0x50>
    9146:	4620      	mov	r0, r4
    9148:	f7ff fddc 	bl	8d04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    914c:	2800      	cmp	r0, #0
    914e:	d0d9      	beq.n	9104 <SdFile::truncate(unsigned long)+0x50>

  // set file to correct position
  return seekSet(newPos);
    9150:	42b5      	cmp	r5, r6
    9152:	4629      	mov	r1, r5
    9154:	4620      	mov	r0, r4
    9156:	bf28      	it	cs
    9158:	4631      	movcs	r1, r6
    915a:	f7ff ff75 	bl	9048 <SdFile::seekSet(unsigned long)>
    915e:	e7d2      	b.n	9106 <SdFile::truncate(unsigned long)+0x52>
    9160:	0ffffff8 	.word	0x0ffffff8

00009164 <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    9164:	b538      	push	{r3, r4, r5, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    9166:	4b1d      	ldr	r3, [pc, #116]	; (91dc <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>)
    9168:	eb03 1341 	add.w	r3, r3, r1, lsl #5

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    916c:	7add      	ldrb	r5, [r3, #11]
    916e:	f015 0f11 	tst.w	r5, #17
    9172:	d002      	beq.n	917a <SdFile::openCachedEntry(unsigned char, unsigned char)+0x16>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    9174:	f012 0f42 	tst.w	r2, #66	; 0x42
    9178:	d11e      	bne.n	91b8 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    917a:	4615      	mov	r5, r2
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    917c:	4a18      	ldr	r2, [pc, #96]	; (91e0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    917e:	7501      	strb	r1, [r0, #20]
    9180:	4604      	mov	r4, r0
  dirBlock_ = SdVolume::cacheBlockNumber_;
    9182:	6812      	ldr	r2, [r2, #0]
    9184:	6102      	str	r2, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    9186:	8a9a      	ldrh	r2, [r3, #20]
    9188:	8b59      	ldrh	r1, [r3, #26]
    918a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    918e:	61c1      	str	r1, [r0, #28]
    9190:	7ad8      	ldrb	r0, [r3, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    9192:	f010 0018 	ands.w	r0, r0, #24
    9196:	d10d      	bne.n	91b4 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x50>
    fileSize_ = p->fileSize;
    9198:	69da      	ldr	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    919a:	2301      	movs	r3, #1
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    919c:	61a2      	str	r2, [r4, #24]
    type_ = FAT_FILE_TYPE_NORMAL;
    919e:	71a3      	strb	r3, [r4, #6]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    91a0:	f005 030f 	and.w	r3, r5, #15

  // set to start of file
  curCluster_ = 0;
    91a4:	2100      	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    91a6:	7163      	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    91a8:	066b      	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    91aa:	60a1      	str	r1, [r4, #8]
  curPosition_ = 0;
    91ac:	60e1      	str	r1, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    91ae:	d40f      	bmi.n	91d0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x6c>
  return true;
    91b0:	2001      	movs	r0, #1
}
    91b2:	bd38      	pop	{r3, r4, r5, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    91b4:	2810      	cmp	r0, #16
    91b6:	d001      	beq.n	91bc <SdFile::openCachedEntry(unsigned char, unsigned char)+0x58>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    91b8:	2000      	movs	r0, #0
    91ba:	bd38      	pop	{r3, r4, r5, pc}
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    91bc:	f104 0218 	add.w	r2, r4, #24
    91c0:	6a20      	ldr	r0, [r4, #32]
    91c2:	f000 fac7 	bl	9754 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    91c6:	2800      	cmp	r0, #0
    91c8:	d0f6      	beq.n	91b8 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    type_ = FAT_FILE_TYPE_SUBDIR;
    91ca:	2304      	movs	r3, #4
    91cc:	71a3      	strb	r3, [r4, #6]
    91ce:	e7e7      	b.n	91a0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3c>
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    91d0:	4620      	mov	r0, r4
  return true;
}
    91d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    91d6:	f7ff bf6d 	b.w	90b4 <SdFile::truncate(unsigned long)>
    91da:	bf00      	nop
    91dc:	20002a08 	.word	0x20002a08
    91e0:	20001e18 	.word	0x20001e18

000091e4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    91e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    91e8:	b084      	sub	sp, #16
    91ea:	4680      	mov	r8, r0
    91ec:	460c      	mov	r4, r1
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    91ee:	4610      	mov	r0, r2
    91f0:	ae01      	add	r6, sp, #4
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    91f2:	469a      	mov	sl, r3
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    91f4:	4631      	mov	r1, r6
    91f6:	f7ff fe07 	bl	8e08 <SdFile::make83Name(char const*, unsigned char*)>
    91fa:	b3a8      	cbz	r0, 9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    91fc:	2200      	movs	r2, #0
  vol_ = dirFile->vol_;
    91fe:	6a21      	ldr	r1, [r4, #32]
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    9200:	f8df 9120 	ldr.w	r9, [pc, #288]	; 9324 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x140>

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
  vol_ = dirFile->vol_;
    9204:	f8c8 1020 	str.w	r1, [r8, #32]
    9208:	4613      	mov	r3, r2
    920a:	60a2      	str	r2, [r4, #8]
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    920c:	4617      	mov	r7, r2
    920e:	60e2      	str	r2, [r4, #12]
    9210:	e007      	b.n	9222 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3e>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    9212:	f1be 0fe5 	cmp.w	lr, #229	; 0xe5
    9216:	d016      	beq.n	9246 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x62>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    9218:	f003 fe54 	bl	cec4 <memcmp>
    921c:	2800      	cmp	r0, #0
    921e:	d038      	beq.n	9292 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xae>
    9220:	68e3      	ldr	r3, [r4, #12]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    9222:	69a2      	ldr	r2, [r4, #24]
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    9224:	4620      	mov	r0, r4
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    9226:	f3c3 1543 	ubfx	r5, r3, #5, #4

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    922a:	429a      	cmp	r2, r3
    922c:	d920      	bls.n	9270 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x8c>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    922e:	f7ff feeb 	bl	9008 <SdFile::readDirCache()>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    9232:	220b      	movs	r2, #11

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    9234:	4603      	mov	r3, r0
    9236:	b1b8      	cbz	r0, 9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    9238:	f890 e000 	ldrb.w	lr, [r0]
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    923c:	4601      	mov	r1, r0
    923e:	4630      	mov	r0, r6
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    9240:	f1be 0f00 	cmp.w	lr, #0
    9244:	d1e5      	bne.n	9212 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2e>
      // remember first empty slot
      if (!emptyFound) {
    9246:	b93f      	cbnz	r7, 9258 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x74>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    9248:	f8d9 2000 	ldr.w	r2, [r9]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    924c:	f888 5014 	strb.w	r5, [r8, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    9250:	f8c8 2010 	str.w	r2, [r8, #16]
    9254:	f893 e000 	ldrb.w	lr, [r3]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    9258:	2701      	movs	r7, #1
    925a:	f1be 0f00 	cmp.w	lr, #0
    925e:	d1df      	bne.n	9220 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3c>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    9260:	f00a 0312 	and.w	r3, sl, #18
    9264:	2b12      	cmp	r3, #18
    9266:	d01e      	beq.n	92a6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc2>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    9268:	2000      	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    926a:	b004      	add	sp, #16
    926c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    9270:	f00a 0312 	and.w	r3, sl, #18
    9274:	2b12      	cmp	r3, #18
    9276:	d1f7      	bne.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    9278:	b9af      	cbnz	r7, 92a6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc2>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    927a:	79a3      	ldrb	r3, [r4, #6]
    927c:	2b02      	cmp	r3, #2
    927e:	d0f3      	beq.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    9280:	4620      	mov	r0, r4
    9282:	f7ff fd8b 	bl	8d9c <SdFile::addDirCluster()>
    9286:	2800      	cmp	r0, #0
    9288:	d0ee      	beq.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    928a:	4c24      	ldr	r4, [pc, #144]	; (931c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x138>)

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    928c:	f888 7014 	strb.w	r7, [r8, #20]
    9290:	e016      	b.n	92c0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xdc>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    9292:	f00a 0330 	and.w	r3, sl, #48	; 0x30
    9296:	2b30      	cmp	r3, #48	; 0x30
    9298:	d0e6      	beq.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    929a:	4652      	mov	r2, sl
    929c:	4629      	mov	r1, r5
    929e:	4640      	mov	r0, r8
    92a0:	f7ff ff60 	bl	9164 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    92a4:	e7e1      	b.n	926a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x86>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    92a6:	2101      	movs	r1, #1
    92a8:	f8d8 0010 	ldr.w	r0, [r8, #16]
    92ac:	f000 f98c 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    92b0:	2800      	cmp	r0, #0
    92b2:	d0d9      	beq.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    92b4:	f898 4014 	ldrb.w	r4, [r8, #20]
    92b8:	4b18      	ldr	r3, [pc, #96]	; (931c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x138>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    92ba:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    92be:	d0d3      	beq.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    92c0:	2220      	movs	r2, #32
    92c2:	2100      	movs	r1, #0
    92c4:	4620      	mov	r0, r4
    92c6:	f003 fe93 	bl	cff0 <memset>
  memcpy(p->name, dname, 11);

  // set timestamps
  if (dateTime_) {
    92ca:	4a15      	ldr	r2, [pc, #84]	; (9320 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x13c>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    92cc:	4623      	mov	r3, r4

  // set timestamps
  if (dateTime_) {
    92ce:	6815      	ldr	r5, [r2, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    92d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    92d4:	c303      	stmia	r3!, {r0, r1}
    92d6:	0c11      	lsrs	r1, r2, #16
    92d8:	f823 2b02 	strh.w	r2, [r3], #2
    92dc:	7019      	strb	r1, [r3, #0]

  // set timestamps
  if (dateTime_) {
    92de:	b1a5      	cbz	r5, 930a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x126>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    92e0:	f104 010e 	add.w	r1, r4, #14
    92e4:	f104 0010 	add.w	r0, r4, #16
    92e8:	47a8      	blx	r5
    92ea:	8a23      	ldrh	r3, [r4, #16]
    92ec:	89e2      	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    92ee:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    92f0:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    92f2:	82e2      	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    92f4:	f000 f928 	bl	9548 <SdVolume::cacheFlush()>
    92f8:	2800      	cmp	r0, #0
    92fa:	d0b5      	beq.n	9268 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    92fc:	4652      	mov	r2, sl
    92fe:	f898 1014 	ldrb.w	r1, [r8, #20]
    9302:	4640      	mov	r0, r8
    9304:	f7ff ff2e 	bl	9164 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    9308:	e7af      	b.n	926a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x86>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    930a:	f642 0021 	movw	r0, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    930e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    9312:	4603      	mov	r3, r0
    9314:	460a      	mov	r2, r1
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    9316:	8220      	strh	r0, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    9318:	81e1      	strh	r1, [r4, #14]
    931a:	e7e8      	b.n	92ee <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x10a>
    931c:	20002a08 	.word	0x20002a08
    9320:	200029fc 	.word	0x200029fc
    9324:	20001e18 	.word	0x20001e18

00009328 <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    9328:	b410      	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    932a:	7984      	ldrb	r4, [r0, #6]
    932c:	b11c      	cbz	r4, 9336 <SdFile::open(SdFile*, char const*, unsigned char)+0xe>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    932e:	2000      	movs	r0, #0
    9330:	f85d 4b04 	ldr.w	r4, [sp], #4
    9334:	4770      	bx	lr
    9336:	f85d 4b04 	ldr.w	r4, [sp], #4
    933a:	f7ff bf53 	b.w	91e4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    933e:	bf00      	nop

00009340 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    9340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9344:	b085      	sub	sp, #20
    9346:	4607      	mov	r7, r0
    9348:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    934a:	7982      	ldrb	r2, [r0, #6]
    934c:	2a01      	cmp	r2, #1
    934e:	d005      	beq.n	935c <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    9350:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    9352:	2000      	movs	r0, #0
    9354:	713b      	strb	r3, [r7, #4]
}
    9356:	b005      	add	sp, #20
    9358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    935c:	7942      	ldrb	r2, [r0, #5]
    935e:	0794      	lsls	r4, r2, #30
    9360:	d5f6      	bpl.n	9350 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    9362:	0753      	lsls	r3, r2, #29
    9364:	468b      	mov	fp, r1
    9366:	d508      	bpl.n	937a <SdFile::write(void const*, unsigned int)+0x3a>
    9368:	69b9      	ldr	r1, [r7, #24]
    936a:	68fb      	ldr	r3, [r7, #12]
    936c:	428b      	cmp	r3, r1
    936e:	f000 80c0 	beq.w	94f2 <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    9372:	f7ff fe69 	bl	9048 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    9376:	2800      	cmp	r0, #0
    9378:	d0ea      	beq.n	9350 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    937a:	9b01      	ldr	r3, [sp, #4]
    937c:	68f9      	ldr	r1, [r7, #12]
    937e:	2b00      	cmp	r3, #0
    9380:	f000 80c5 	beq.w	950e <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    9384:	f8dd 8004 	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    9388:	f8df 919c 	ldr.w	r9, [pc, #412]	; 9528 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    938c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 952c <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    9390:	6a38      	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    9392:	f3c1 0608 	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    9396:	7902      	ldrb	r2, [r0, #4]
    9398:	3a01      	subs	r2, #1
    939a:	ea02 2551 	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    939e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    93a2:	d153      	bne.n	944c <SdFile::write(void const*, unsigned int)+0x10c>
    93a4:	2e00      	cmp	r6, #0
    93a6:	d151      	bne.n	944c <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    93a8:	68b9      	ldr	r1, [r7, #8]
    93aa:	2900      	cmp	r1, #0
    93ac:	d179      	bne.n	94a2 <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    93ae:	69fa      	ldr	r2, [r7, #28]
    93b0:	2a00      	cmp	r2, #0
    93b2:	f000 8089 	beq.w	94c8 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    93b6:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    93b8:	f5c6 7400 	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    93bc:	3a02      	subs	r2, #2
    93be:	f890 e010 	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    93c2:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    93c4:	6941      	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    93c6:	4544      	cmp	r4, r8
    93c8:	d942      	bls.n	9450 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    93ca:	fa02 f20e 	lsl.w	r2, r2, lr
    93ce:	440d      	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    93d0:	fa1f f488 	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    93d4:	4415      	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    93d6:	b91e      	cbnz	r6, 93e0 <SdFile::write(void const*, unsigned int)+0xa0>
    93d8:	68f8      	ldr	r0, [r7, #12]
    93da:	69ba      	ldr	r2, [r7, #24]
    93dc:	4290      	cmp	r0, r2
    93de:	d253      	bcs.n	9488 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    93e0:	4628      	mov	r0, r5
    93e2:	2101      	movs	r1, #1
    93e4:	f000 f8f0 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    93e8:	2800      	cmp	r0, #0
    93ea:	d0b1      	beq.n	9350 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    93ec:	444e      	add	r6, r9
      uint8_t* end = dst + n;
    93ee:	eb06 0e04 	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    93f2:	4576      	cmp	r6, lr
    93f4:	d00d      	beq.n	9412 <SdFile::write(void const*, unsigned int)+0xd2>
    93f6:	f10b 31ff 	add.w	r1, fp, #4294967295
    93fa:	1e72      	subs	r2, r6, #1
    93fc:	f10e 35ff 	add.w	r5, lr, #4294967295
    9400:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9404:	f802 0f01 	strb.w	r0, [r2, #1]!
    9408:	4295      	cmp	r5, r2
    940a:	d1f9      	bne.n	9400 <SdFile::write(void const*, unsigned int)+0xc0>
    940c:	ebc6 060e 	rsb	r6, r6, lr
    9410:	44b3      	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    9412:	68fd      	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    9414:	ebb8 0804 	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    9418:	eb04 0105 	add.w	r1, r4, r5
    941c:	60f9      	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    941e:	d1b7      	bne.n	9390 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    9420:	69bb      	ldr	r3, [r7, #24]
    9422:	4299      	cmp	r1, r3
    9424:	d96a      	bls.n	94fc <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    9426:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    9428:	61b9      	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    942a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    942e:	717a      	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    9430:	0712      	lsls	r2, r2, #28
    9432:	d507      	bpl.n	9444 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    9434:	79bb      	ldrb	r3, [r7, #6]
    9436:	2b00      	cmp	r3, #0
    9438:	d08a      	beq.n	9350 <SdFile::write(void const*, unsigned int)+0x10>
    943a:	4638      	mov	r0, r7
    943c:	f7ff fc62 	bl	8d04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    9440:	2800      	cmp	r0, #0
    9442:	d085      	beq.n	9350 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    9444:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    9446:	b005      	add	sp, #20
    9448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    944c:	68ba      	ldr	r2, [r7, #8]
    944e:	e7b3      	b.n	93b8 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    9450:	fa02 f20e 	lsl.w	r2, r2, lr
    9454:	440d      	add	r5, r1
    if (n == 512) {
    9456:	f5b4 7f00 	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    945a:	4415      	add	r5, r2
    if (n == 512) {
    945c:	d1bb      	bne.n	93d6 <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    945e:	f8da 2000 	ldr.w	r2, [sl]
    9462:	4295      	cmp	r5, r2
    9464:	d039      	beq.n	94da <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    9466:	4a2c      	ldr	r2, [pc, #176]	; (9518 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    9468:	4629      	mov	r1, r5
    946a:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    946c:	7802      	ldrb	r2, [r0, #0]
    946e:	2afe      	cmp	r2, #254	; 0xfe
    9470:	d038      	beq.n	94e4 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    9472:	465a      	mov	r2, fp
    9474:	f7ff fbf0 	bl	8c58 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    9478:	2800      	cmp	r0, #0
    947a:	f43f af69 	beq.w	9350 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    947e:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    9482:	f44f 7400 	mov.w	r4, #512	; 0x200
    9486:	e7c4      	b.n	9412 <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    9488:	f000 f85e 	bl	9548 <SdVolume::cacheFlush()>
    948c:	2800      	cmp	r0, #0
    948e:	f43f af5f 	beq.w	9350 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    9492:	4922      	ldr	r1, [pc, #136]	; (951c <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    9494:	f8ca 5000 	str.w	r5, [sl]
    9498:	780a      	ldrb	r2, [r1, #0]
    949a:	f042 0201 	orr.w	r2, r2, #1
    949e:	700a      	strb	r2, [r1, #0]
    94a0:	e7a4      	b.n	93ec <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    94a2:	aa03      	add	r2, sp, #12
    94a4:	f000 f91c 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    94a8:	2800      	cmp	r0, #0
    94aa:	f43f af54 	beq.w	9356 <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    94ae:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    94b0:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    94b4:	4b1a      	ldr	r3, [pc, #104]	; (9520 <SdFile::write(void const*, unsigned int)+0x1e0>)
    94b6:	f890 4020 	ldrb.w	r4, [r0, #32]
    94ba:	9a03      	ldr	r2, [sp, #12]
    94bc:	2c10      	cmp	r4, #16
    94be:	bf18      	it	ne
    94c0:	4619      	movne	r1, r3
    94c2:	428a      	cmp	r2, r1
    94c4:	f4ff af77 	bcc.w	93b6 <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    94c8:	4638      	mov	r0, r7
    94ca:	f7ff fc51 	bl	8d70 <SdFile::addCluster()>
    94ce:	2800      	cmp	r0, #0
    94d0:	f43f af3e 	beq.w	9350 <SdFile::write(void const*, unsigned int)+0x10>
    94d4:	6a38      	ldr	r0, [r7, #32]
    94d6:	68ba      	ldr	r2, [r7, #8]
    94d8:	e76e      	b.n	93b8 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    94da:	f04f 32ff 	mov.w	r2, #4294967295
    94de:	f8ca 2000 	str.w	r2, [sl]
    94e2:	e7c0      	b.n	9466 <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    94e4:	4658      	mov	r0, fp
    94e6:	f7fe fe1b 	bl	8120 <SDHC_CardWriteBlock(void const*, unsigned long)>
    94ea:	fab0 f080 	clz	r0, r0
    94ee:	0940      	lsrs	r0, r0, #5
    94f0:	e7c2      	b.n	9478 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    94f2:	9b01      	ldr	r3, [sp, #4]
    94f4:	2b00      	cmp	r3, #0
    94f6:	f47f af45 	bne.w	9384 <SdFile::write(void const*, unsigned int)+0x44>
    94fa:	e799      	b.n	9430 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    94fc:	4b09      	ldr	r3, [pc, #36]	; (9524 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    94fe:	797a      	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    9500:	681b      	ldr	r3, [r3, #0]
    9502:	2b00      	cmp	r3, #0
    9504:	d094      	beq.n	9430 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    9506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    950a:	717a      	strb	r2, [r7, #5]
    950c:	e790      	b.n	9430 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    950e:	69bb      	ldr	r3, [r7, #24]
    9510:	428b      	cmp	r3, r1
    9512:	d388      	bcc.n	9426 <SdFile::write(void const*, unsigned int)+0xe6>
    9514:	797a      	ldrb	r2, [r7, #5]
    9516:	e78b      	b.n	9430 <SdFile::write(void const*, unsigned int)+0xf0>
    9518:	20002a04 	.word	0x20002a04
    951c:	20002c08 	.word	0x20002c08
    9520:	0ffffff8 	.word	0x0ffffff8
    9524:	200029fc 	.word	0x200029fc
    9528:	20002a08 	.word	0x20002a08
    952c:	20001e18 	.word	0x20001e18

00009530 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    9530:	b500      	push	{lr}
    9532:	b083      	sub	sp, #12
  return write(&b, 1);
    9534:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    9536:	ab02      	add	r3, sp, #8
    9538:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    953c:	4619      	mov	r1, r3
    953e:	f7ff feff 	bl	9340 <SdFile::write(void const*, unsigned int)>
}
    9542:	b003      	add	sp, #12
    9544:	f85d fb04 	ldr.w	pc, [sp], #4

00009548 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    9548:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    954a:	4c1a      	ldr	r4, [pc, #104]	; (95b4 <SdVolume::cacheFlush()+0x6c>)
    954c:	7823      	ldrb	r3, [r4, #0]
    954e:	b90b      	cbnz	r3, 9554 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    9550:	2001      	movs	r0, #1
}
    9552:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9554:	4d18      	ldr	r5, [pc, #96]	; (95b8 <SdVolume::cacheFlush()+0x70>)
    9556:	4b19      	ldr	r3, [pc, #100]	; (95bc <SdVolume::cacheFlush()+0x74>)
    9558:	6828      	ldr	r0, [r5, #0]
    955a:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    955c:	7803      	ldrb	r3, [r0, #0]
    955e:	2bfe      	cmp	r3, #254	; 0xfe
    9560:	d017      	beq.n	9592 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    9562:	4a17      	ldr	r2, [pc, #92]	; (95c0 <SdVolume::cacheFlush()+0x78>)
    9564:	f7ff fb78 	bl	8c58 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    9568:	b188      	cbz	r0, 958e <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    956a:	4e16      	ldr	r6, [pc, #88]	; (95c4 <SdVolume::cacheFlush()+0x7c>)
    956c:	6831      	ldr	r1, [r6, #0]
    956e:	b919      	cbnz	r1, 9578 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    9570:	2300      	movs	r3, #0
  }
  return true;
    9572:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    9574:	7023      	strb	r3, [r4, #0]
    9576:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9578:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    957a:	7803      	ldrb	r3, [r0, #0]
    957c:	2bfe      	cmp	r3, #254	; 0xfe
    957e:	d00f      	beq.n	95a0 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    9580:	4a0f      	ldr	r2, [pc, #60]	; (95c0 <SdVolume::cacheFlush()+0x78>)
    9582:	f7ff fb69 	bl	8c58 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    9586:	b110      	cbz	r0, 958e <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9588:	2300      	movs	r3, #0
    958a:	6033      	str	r3, [r6, #0]
    958c:	e7f0      	b.n	9570 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    958e:	2000      	movs	r0, #0
    9590:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    9592:	480b      	ldr	r0, [pc, #44]	; (95c0 <SdVolume::cacheFlush()+0x78>)
    9594:	f7fe fdc4 	bl	8120 <SDHC_CardWriteBlock(void const*, unsigned long)>
    9598:	fab0 f080 	clz	r0, r0
    959c:	0940      	lsrs	r0, r0, #5
    959e:	e7e3      	b.n	9568 <SdVolume::cacheFlush()+0x20>
    95a0:	4807      	ldr	r0, [pc, #28]	; (95c0 <SdVolume::cacheFlush()+0x78>)
    95a2:	f7fe fdbd 	bl	8120 <SDHC_CardWriteBlock(void const*, unsigned long)>
    95a6:	fab0 f080 	clz	r0, r0
    95aa:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    95ac:	2800      	cmp	r0, #0
    95ae:	d1eb      	bne.n	9588 <SdVolume::cacheFlush()+0x40>
    95b0:	e7ed      	b.n	958e <SdVolume::cacheFlush()+0x46>
    95b2:	bf00      	nop
    95b4:	20002c08 	.word	0x20002c08
    95b8:	20002a04 	.word	0x20002a04
    95bc:	20001e18 	.word	0x20001e18
    95c0:	20002a08 	.word	0x20002a08
    95c4:	20002a00 	.word	0x20002a00

000095c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    95c8:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    95ca:	4d12      	ldr	r5, [pc, #72]	; (9614 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    95cc:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    95ce:	682b      	ldr	r3, [r5, #0]
    95d0:	4283      	cmp	r3, r0
    95d2:	d011      	beq.n	95f8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    95d4:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    95d6:	f7ff ffb7 	bl	9548 <SdVolume::cacheFlush()>
    95da:	b908      	cbnz	r0, 95e0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    95dc:	2000      	movs	r0, #0
    95de:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    95e0:	4b0d      	ldr	r3, [pc, #52]	; (9618 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    95e2:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    95e4:	7803      	ldrb	r3, [r0, #0]
    95e6:	2bfe      	cmp	r3, #254	; 0xfe
    95e8:	d00c      	beq.n	9604 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    95ea:	4a0c      	ldr	r2, [pc, #48]	; (961c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    95ec:	4621      	mov	r1, r4
    95ee:	f7ff fabb 	bl	8b68 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    95f2:	2800      	cmp	r0, #0
    95f4:	d0f2      	beq.n	95dc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    95f6:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    95f8:	4b09      	ldr	r3, [pc, #36]	; (9620 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    95fa:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    95fc:	7819      	ldrb	r1, [r3, #0]
    95fe:	4331      	orrs	r1, r6
    9600:	7019      	strb	r1, [r3, #0]
  return true;
}
    9602:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    9604:	4621      	mov	r1, r4
    9606:	4805      	ldr	r0, [pc, #20]	; (961c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    9608:	f7fe fd0e 	bl	8028 <SDHC_CardReadBlock(void*, unsigned long)>
    960c:	fab0 f080 	clz	r0, r0
    9610:	0940      	lsrs	r0, r0, #5
    9612:	e7ee      	b.n	95f2 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    9614:	20001e18 	.word	0x20001e18
    9618:	20002a04 	.word	0x20002a04
    961c:	20002a08 	.word	0x20002a08
    9620:	20002c08 	.word	0x20002c08

00009624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    9624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9626:	f890 3020 	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    962a:	4605      	mov	r5, r0
    962c:	460e      	mov	r6, r1
    962e:	4617      	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9630:	2b10      	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    9632:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    9634:	4b18      	ldr	r3, [pc, #96]	; (9698 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9636:	d017      	beq.n	9668 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    9638:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    963c:	681b      	ldr	r3, [r3, #0]
    963e:	429c      	cmp	r4, r3
    9640:	d117      	bne.n	9672 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    9642:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    9646:	4a15      	ldr	r2, [pc, #84]	; (969c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    9648:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    964c:	4914      	ldr	r1, [pc, #80]	; (96a0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    964e:	7e28      	ldrb	r0, [r5, #24]
    9650:	780a      	ldrb	r2, [r1, #0]
    9652:	2801      	cmp	r0, #1
    9654:	f042 0201 	orr.w	r2, r2, #1
    9658:	700a      	strb	r2, [r1, #0]
    965a:	d919      	bls.n	9690 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    965c:	68a9      	ldr	r1, [r5, #8]
  return true;
    965e:	2001      	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    9660:	4a10      	ldr	r2, [pc, #64]	; (96a4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    9662:	440b      	add	r3, r1
    9664:	6013      	str	r3, [r2, #0]
    9666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9668:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    966c:	681b      	ldr	r3, [r3, #0]
    966e:	429c      	cmp	r4, r3
    9670:	d008      	beq.n	9684 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    9672:	2100      	movs	r1, #0
    9674:	4620      	mov	r0, r4
    9676:	f7ff ffa7 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    967a:	b150      	cbz	r0, 9692 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    967c:	f895 3020 	ldrb.w	r3, [r5, #32]
    9680:	2b10      	cmp	r3, #16
    9682:	d107      	bne.n	9694 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    9684:	b2f1      	uxtb	r1, r6
    9686:	4a05      	ldr	r2, [pc, #20]	; (969c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    9688:	4623      	mov	r3, r4
    968a:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
    968e:	e7dd      	b.n	964c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    9690:	2001      	movs	r0, #1
}
    9692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    9694:	4623      	mov	r3, r4
    9696:	e7d4      	b.n	9642 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    9698:	20001e18 	.word	0x20001e18
    969c:	20002a08 	.word	0x20002a08
    96a0:	20002c08 	.word	0x20002c08
    96a4:	20002a00 	.word	0x20002a00

000096a8 <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    96a8:	b510      	push	{r4, lr}
    96aa:	4604      	mov	r4, r0
  if (!cacheFlush()) return false;
    96ac:	f7ff ff4c 	bl	9548 <SdVolume::cacheFlush()>
    96b0:	b170      	cbz	r0, 96d0 <SdVolume::cacheZeroBlock(unsigned long)+0x28>
    96b2:	4b08      	ldr	r3, [pc, #32]	; (96d4 <SdVolume::cacheZeroBlock(unsigned long)+0x2c>)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    96b4:	2100      	movs	r1, #0
    96b6:	f503 7200 	add.w	r2, r3, #512	; 0x200
    96ba:	f803 1f01 	strb.w	r1, [r3, #1]!
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    96be:	4293      	cmp	r3, r2
    96c0:	d1fb      	bne.n	96ba <SdVolume::cacheZeroBlock(unsigned long)+0x12>
    96c2:	4a05      	ldr	r2, [pc, #20]	; (96d8 <SdVolume::cacheZeroBlock(unsigned long)+0x30>)
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
  cacheSetDirty();
  return true;
    96c4:	2001      	movs	r0, #1

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    96c6:	4905      	ldr	r1, [pc, #20]	; (96dc <SdVolume::cacheZeroBlock(unsigned long)+0x34>)
    96c8:	7813      	ldrb	r3, [r2, #0]
    96ca:	600c      	str	r4, [r1, #0]
    96cc:	4303      	orrs	r3, r0
    96ce:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
}
    96d0:	bd10      	pop	{r4, pc}
    96d2:	bf00      	nop
    96d4:	20002a07 	.word	0x20002a07
    96d8:	20002c08 	.word	0x20002c08
    96dc:	20001e18 	.word	0x20001e18

000096e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    96e0:	68c3      	ldr	r3, [r0, #12]
    96e2:	3301      	adds	r3, #1
    96e4:	428b      	cmp	r3, r1
    96e6:	d318      	bcc.n	971a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    96e8:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    96ea:	f890 3020 	ldrb.w	r3, [r0, #32]
    96ee:	4604      	mov	r4, r0
    96f0:	4616      	mov	r6, r2
    96f2:	460d      	mov	r5, r1
    96f4:	2b10      	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    96f6:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    96f8:	4b14      	ldr	r3, [pc, #80]	; (974c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    96fa:	d010      	beq.n	971e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    96fc:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    9700:	681b      	ldr	r3, [r3, #0]
    9702:	4298      	cmp	r0, r3
    9704:	d110      	bne.n	9728 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    9706:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    970a:	4b11      	ldr	r3, [pc, #68]	; (9750 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    970c:	2001      	movs	r0, #1
    970e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9712:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    9716:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    9718:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    971a:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    971c:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    971e:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    9722:	681b      	ldr	r3, [r3, #0]
    9724:	4298      	cmp	r0, r3
    9726:	d007      	beq.n	9738 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    9728:	2100      	movs	r1, #0
    972a:	f7ff ff4d 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    972e:	b150      	cbz	r0, 9746 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    9730:	f894 3020 	ldrb.w	r3, [r4, #32]
    9734:	2b10      	cmp	r3, #16
    9736:	d1e6      	bne.n	9706 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9738:	b2e9      	uxtb	r1, r5
    973a:	4b05      	ldr	r3, [pc, #20]	; (9750 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    973c:	2001      	movs	r0, #1
    973e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    9742:	6033      	str	r3, [r6, #0]
    9744:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9746:	2000      	movs	r0, #0
    9748:	bd70      	pop	{r4, r5, r6, pc}
    974a:	bf00      	nop
    974c:	20001e18 	.word	0x20001e18
    9750:	20002a08 	.word	0x20002a08

00009754 <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    9754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9758:	b082      	sub	sp, #8
    975a:	4604      	mov	r4, r0
    975c:	4691      	mov	r9, r2
    975e:	4608      	mov	r0, r1
    9760:	ad02      	add	r5, sp, #8
  uint32_t s = 0;
    9762:	f04f 0a00 	mov.w	sl, #0
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9766:	f44f 7800 	mov.w	r8, #512	; 0x200
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    976a:	4f11      	ldr	r7, [pc, #68]	; (97b0 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5c>)
    976c:	f64f 76f8 	movw	r6, #65528	; 0xfff8
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    9770:	f845 1d04 	str.w	r1, [r5, #-4]!
    9774:	e00c      	b.n	9790 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x3c>
    9776:	f894 3020 	ldrb.w	r3, [r4, #32]
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    977a:	7c22      	ldrb	r2, [r4, #16]
  } while (!isEOC(cluster));
    977c:	9801      	ldr	r0, [sp, #4]
    977e:	2b10      	cmp	r3, #16
    9780:	bf14      	ite	ne
    9782:	463b      	movne	r3, r7
    9784:	4633      	moveq	r3, r6
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9786:	fa08 f202 	lsl.w	r2, r8, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    978a:	4298      	cmp	r0, r3
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    978c:	4492      	add	sl, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    978e:	d209      	bcs.n	97a4 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x50>
    if (!fatGet(cluster, &cluster)) return false;
    9790:	4601      	mov	r1, r0
    9792:	462a      	mov	r2, r5
    9794:	4620      	mov	r0, r4
    9796:	f7ff ffa3 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    979a:	2800      	cmp	r0, #0
    979c:	d1eb      	bne.n	9776 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x22>
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    979e:	b002      	add	sp, #8
    97a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    97a4:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    97a6:	f8c9 a000 	str.w	sl, [r9]
  return true;
}
    97aa:	b002      	add	sp, #8
    97ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97b0:	0ffffff8 	.word	0x0ffffff8

000097b4 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    97b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    97b8:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    97ba:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    97bc:	b367      	cbz	r7, 9818 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    97be:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    97c0:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    97c4:	68c3      	ldr	r3, [r0, #12]
    97c6:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    97ca:	b30b      	cbz	r3, 9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    97cc:	468b      	mov	fp, r1
    97ce:	4606      	mov	r6, r0
    97d0:	4691      	mov	r9, r2
    97d2:	463c      	mov	r4, r7
    97d4:	2500      	movs	r5, #0
    97d6:	e005      	b.n	97e4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    97d8:	461c      	mov	r4, r3
    97da:	461f      	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    97dc:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    97de:	68f3      	ldr	r3, [r6, #12]
    97e0:	42ab      	cmp	r3, r5
    97e2:	d915      	bls.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    97e4:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    97e6:	aa01      	add	r2, sp, #4
    97e8:	4630      	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    97ea:	d201      	bcs.n	97f0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    97ec:	2402      	movs	r4, #2
    97ee:	4627      	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    97f0:	4621      	mov	r1, r4
    97f2:	f7ff ff75 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    97f6:	1c63      	adds	r3, r4, #1
    97f8:	b150      	cbz	r0, 9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    97fa:	9a01      	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    97fc:	1bd9      	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    97fe:	2a00      	cmp	r2, #0
    9800:	d1ea      	bne.n	97d8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    9802:	458b      	cmp	fp, r1
    9804:	d010      	beq.n	9828 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    9806:	461c      	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    9808:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    980a:	68f3      	ldr	r3, [r6, #12]
    980c:	42ab      	cmp	r3, r5
    980e:	d8e9      	bhi.n	97e4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    9810:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    9812:	b003      	add	sp, #12
    9814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    9818:	f1a1 0a01 	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    981c:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    981e:	faba fa8a 	clz	sl, sl
    9822:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    9826:	e7cd      	b.n	97c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9828:	2c01      	cmp	r4, #1
    982a:	d9f1      	bls.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    982c:	68f3      	ldr	r3, [r6, #12]
    982e:	3301      	adds	r3, #1
    9830:	429c      	cmp	r4, r3
    9832:	d8ed      	bhi.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9834:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9838:	4621      	mov	r1, r4
    983a:	4630      	mov	r0, r6
    983c:	f7ff fef2 	bl	9624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    9840:	2800      	cmp	r0, #0
    9842:	d0e5      	beq.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    9844:	42a7      	cmp	r7, r4
    9846:	d214      	bcs.n	9872 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    9848:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    984a:	2c01      	cmp	r4, #1
    984c:	d9e0      	bls.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    984e:	68f3      	ldr	r3, [r6, #12]
    9850:	3301      	adds	r3, #1
    9852:	429c      	cmp	r4, r3
    9854:	d8dc      	bhi.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9856:	1c62      	adds	r2, r4, #1
    9858:	4621      	mov	r1, r4
    985a:	4630      	mov	r0, r6
    985c:	f7ff fee2 	bl	9624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    9860:	2800      	cmp	r0, #0
    9862:	d0d5      	beq.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    9864:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    9866:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    986a:	d002      	beq.n	9872 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    986c:	2c01      	cmp	r4, #1
    986e:	d1ee      	bne.n	984e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    9870:	e7ce      	b.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    9872:	f8d9 1000 	ldr.w	r1, [r9]
    9876:	b159      	cbz	r1, 9890 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9878:	2901      	cmp	r1, #1
    987a:	d9c9      	bls.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    987c:	68f3      	ldr	r3, [r6, #12]
    987e:	3301      	adds	r3, #1
    9880:	4299      	cmp	r1, r3
    9882:	d8c5      	bhi.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    9884:	463a      	mov	r2, r7
    9886:	4630      	mov	r0, r6
    9888:	f7ff fecc 	bl	9624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    988c:	2800      	cmp	r0, #0
    988e:	d0bf      	beq.n	9810 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    9890:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    9894:	f1ba 0f00 	cmp.w	sl, #0
    9898:	d003      	beq.n	98a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    989a:	3701      	adds	r7, #1

  return true;
    989c:	2001      	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    989e:	6037      	str	r7, [r6, #0]
    98a0:	e7b7      	b.n	9812 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    98a2:	2001      	movs	r0, #1
    98a4:	e7b5      	b.n	9812 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    98a6:	bf00      	nop

000098a8 <SdVolume::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    98a8:	2901      	cmp	r1, #1
    98aa:	d90c      	bls.n	98c6 <SdVolume::fatPut(unsigned long, unsigned long)+0x1e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    98ac:	68c3      	ldr	r3, [r0, #12]
    98ae:	3301      	adds	r3, #1
    98b0:	4299      	cmp	r1, r3
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    98b2:	b410      	push	{r4}
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    98b4:	d803      	bhi.n	98be <SdVolume::fatPut(unsigned long, unsigned long)+0x16>
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    98b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    98ba:	f7ff beb3 	b.w	9624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    98be:	2000      	movs	r0, #0
    98c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    98c4:	4770      	bx	lr
    98c6:	2000      	movs	r0, #0
    98c8:	4770      	bx	lr
    98ca:	bf00      	nop

000098cc <SdVolume::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;
    98cc:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    98ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    98d0:	4605      	mov	r5, r0
    98d2:	b083      	sub	sp, #12
    98d4:	460c      	mov	r4, r1
    98d6:	f64f 77f8 	movw	r7, #65528	; 0xfff8
    98da:	4e13      	ldr	r6, [pc, #76]	; (9928 <SdVolume::freeChain(unsigned long)+0x5c>)
  // clear free cluster location
  allocSearchStart_ = 2;
    98dc:	6003      	str	r3, [r0, #0]
    98de:	e00b      	b.n	98f8 <SdVolume::freeChain(unsigned long)+0x2c>
    98e0:	f7ff fea0 	bl	9624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    98e4:	b1d0      	cbz	r0, 991c <SdVolume::freeChain(unsigned long)+0x50>
    98e6:	f895 3020 	ldrb.w	r3, [r5, #32]

    cluster = next;
    98ea:	9c01      	ldr	r4, [sp, #4]
    98ec:	2b10      	cmp	r3, #16
    98ee:	bf0c      	ite	eq
    98f0:	463b      	moveq	r3, r7
    98f2:	4633      	movne	r3, r6
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    98f4:	429c      	cmp	r4, r3
    98f6:	d214      	bcs.n	9922 <SdVolume::freeChain(unsigned long)+0x56>
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    98f8:	4621      	mov	r1, r4
    98fa:	aa01      	add	r2, sp, #4
    98fc:	4628      	mov	r0, r5
    98fe:	f7ff feef 	bl	96e0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9902:	2c01      	cmp	r4, #1
    9904:	fab0 f380 	clz	r3, r0
    9908:	4621      	mov	r1, r4
    990a:	4628      	mov	r0, r5
    990c:	d906      	bls.n	991c <SdVolume::freeChain(unsigned long)+0x50>
    990e:	095b      	lsrs	r3, r3, #5
    9910:	461a      	mov	r2, r3
    9912:	b91b      	cbnz	r3, 991c <SdVolume::freeChain(unsigned long)+0x50>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9914:	68eb      	ldr	r3, [r5, #12]
    9916:	3301      	adds	r3, #1
    9918:	429c      	cmp	r4, r3
    991a:	d9e1      	bls.n	98e0 <SdVolume::freeChain(unsigned long)+0x14>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    991c:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    991e:	b003      	add	sp, #12
    9920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    9922:	2001      	movs	r0, #1
}
    9924:	b003      	add	sp, #12
    9926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9928:	0ffffff8 	.word	0x0ffffff8

0000992c <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    992e:	4b40      	ldr	r3, [pc, #256]	; (9a30 <SdVolume::init(Sd2Card*, unsigned char)+0x104>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    9930:	4605      	mov	r5, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9932:	4614      	mov	r4, r2
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    9934:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9936:	b1da      	cbz	r2, 9970 <SdVolume::init(Sd2Card*, unsigned char)+0x44>
    if (part > 4)return false;
    9938:	2a04      	cmp	r2, #4
    993a:	d901      	bls.n	9940 <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    993c:	2000      	movs	r0, #0
    993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    9940:	2100      	movs	r1, #0
    9942:	4608      	mov	r0, r1
    9944:	f7ff fe40 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9948:	2800      	cmp	r0, #0
    994a:	d0f7      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    994c:	4b39      	ldr	r3, [pc, #228]	; (9a34 <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
    994e:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    9952:	f892 21ae 	ldrb.w	r2, [r2, #430]	; 0x1ae
    9956:	0652      	lsls	r2, r2, #25
    9958:	d1f0      	bne.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
    995a:	341b      	adds	r4, #27
    995c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    9960:	f8d4 300a 	ldr.w	r3, [r4, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    9964:	2b63      	cmp	r3, #99	; 0x63
    9966:	d9e9      	bls.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    9968:	f8d4 4006 	ldr.w	r4, [r4, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    996c:	2c00      	cmp	r4, #0
    996e:	d0e5      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    9970:	2100      	movs	r1, #0
    9972:	4620      	mov	r0, r4
    9974:	f7ff fe28 	bl	95c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9978:	2800      	cmp	r0, #0
    997a:	d0df      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    997c:	4a2d      	ldr	r2, [pc, #180]	; (9a34 <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
    997e:	f8b2 300b 	ldrh.w	r3, [r2, #11]
    9982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9986:	d1d9      	bne.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    9988:	7c13      	ldrb	r3, [r2, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    998a:	2b00      	cmp	r3, #0
    998c:	d0d6      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    998e:	89d1      	ldrh	r1, [r2, #14]
    9990:	2900      	cmp	r1, #0
    9992:	d0d3      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    9994:	7b56      	ldrb	r6, [r2, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    9996:	2e00      	cmp	r6, #0
    9998:	d0d0      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    999a:	2100      	movs	r1, #0
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    999c:	762b      	strb	r3, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    999e:	2701      	movs	r7, #1
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;
    99a0:	712e      	strb	r6, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    99a2:	460b      	mov	r3, r1
    99a4:	7429      	strb	r1, [r5, #16]
    99a6:	e003      	b.n	99b0 <SdVolume::init(Sd2Card*, unsigned char)+0x84>
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    99a8:	2909      	cmp	r1, #9
    99aa:	460b      	mov	r3, r1
    99ac:	7429      	strb	r1, [r5, #16]
    99ae:	d0c5      	beq.n	993c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    99b0:	fa07 f003 	lsl.w	r0, r7, r3
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    99b4:	1c59      	adds	r1, r3, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    99b6:	42b0      	cmp	r0, r6
    99b8:	d1f6      	bne.n	99a8 <SdVolume::init(Sd2Card*, unsigned char)+0x7c>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    99ba:	8ad1      	ldrh	r1, [r2, #22]
    99bc:	481d      	ldr	r0, [pc, #116]	; (9a34 <SdVolume::init(Sd2Card*, unsigned char)+0x108>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    99be:	b901      	cbnz	r1, 99c2 <SdVolume::init(Sd2Card*, unsigned char)+0x96>
    99c0:	6a41      	ldr	r1, [r0, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    99c2:	89d0      	ldrh	r0, [r2, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    99c4:	60a9      	str	r1, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    99c6:	4420      	add	r0, r4

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    99c8:	7c16      	ldrb	r6, [r2, #16]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    99ca:	f8df e068 	ldr.w	lr, [pc, #104]	; 9a34 <SdVolume::init(Sd2Card*, unsigned char)+0x108>
    99ce:	61e8      	str	r0, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    99d0:	f8b2 7011 	ldrh.w	r7, [r2, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    99d4:	fb01 0106 	mla	r1, r1, r6, r0

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    99d8:	0178      	lsls	r0, r7, #5
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    99da:	846f      	strh	r7, [r5, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    99dc:	6269      	str	r1, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    99de:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    99e2:	eb01 2060 	add.w	r0, r1, r0, asr #9
    99e6:	6168      	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    99e8:	f8b2 1013 	ldrh.w	r1, [r2, #19]
                           bpb->totalSectors16 : bpb->totalSectors32;
    99ec:	b909      	cbnz	r1, 99f2 <SdVolume::init(Sd2Card*, unsigned char)+0xc6>
    99ee:	f8de 1020 	ldr.w	r1, [lr, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    99f2:	1a24      	subs	r4, r4, r0

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    99f4:	f640 70f4 	movw	r0, #4084	; 0xff4
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    99f8:	440c      	add	r4, r1
    99fa:	fa24 f303 	lsr.w	r3, r4, r3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    99fe:	4283      	cmp	r3, r0
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    9a00:	60eb      	str	r3, [r5, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    9a02:	d90a      	bls.n	9a1a <SdVolume::init(Sd2Card*, unsigned char)+0xee>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    9a04:	f64f 71f4 	movw	r1, #65524	; 0xfff4
    9a08:	428b      	cmp	r3, r1
    9a0a:	d90b      	bls.n	9a24 <SdVolume::init(Sd2Card*, unsigned char)+0xf8>
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    9a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    fatType_ = 32;
    9a0e:	2320      	movs	r3, #32
  }
  return true;
    9a10:	2001      	movs	r0, #1
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    9a12:	626a      	str	r2, [r5, #36]	; 0x24
    fatType_ = 32;
    9a14:	f885 3020 	strb.w	r3, [r5, #32]
  }
  return true;
}
    9a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    9a1a:	230c      	movs	r3, #12
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    9a1c:	2001      	movs	r0, #1
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    9a1e:	f885 3020 	strb.w	r3, [r5, #32]
    9a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    9a24:	2310      	movs	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    9a26:	2001      	movs	r0, #1

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    9a28:	f885 3020 	strb.w	r3, [r5, #32]
    9a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a2e:	bf00      	nop
    9a30:	20002a04 	.word	0x20002a04
    9a34:	20002a08 	.word	0x20002a08

00009a38 <LiquidCrystalFast::send(unsigned char, unsigned char)>:
/****************************************/
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
    9a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;
    9a3c:	7a83      	ldrb	r3, [r0, #10]
/****************************************/
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
    9a3e:	4605      	mov	r5, r0
    9a40:	460f      	mov	r7, r1
    9a42:	4690      	mov	r8, r2
	uint8_t en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;
    9a44:	2bff      	cmp	r3, #255	; 0xff
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
	uint8_t en = _enable_pin;
    9a46:	7a44      	ldrb	r4, [r0, #9]
	if ((_en2 != 255) && (_chip)) en = _en2;
    9a48:	d003      	beq.n	9a52 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x1a>
    9a4a:	7ac2      	ldrb	r2, [r0, #11]
    9a4c:	2a00      	cmp	r2, #0
    9a4e:	bf18      	it	ne
    9a50:	461c      	movne	r4, r3
	if (_rw_pin == 255) {
    9a52:	7a2b      	ldrb	r3, [r5, #8]
    9a54:	2bff      	cmp	r3, #255	; 0xff
    9a56:	d07f      	beq.n	9b58 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x120>
		delayMicroseconds(DELAYPERCHAR);
	} else {
		pinMode(_data_pins[0], INPUT);
    9a58:	2100      	movs	r1, #0
    9a5a:	7ca8      	ldrb	r0, [r5, #18]
    9a5c:	f000 fde2 	bl	a624 <pinMode>
		pinMode(_data_pins[1], INPUT);
    9a60:	2100      	movs	r1, #0
    9a62:	7ce8      	ldrb	r0, [r5, #19]
    9a64:	f000 fdde 	bl	a624 <pinMode>
		pinMode(_data_pins[2], INPUT);
    9a68:	2100      	movs	r1, #0
    9a6a:	7d28      	ldrb	r0, [r5, #20]
    9a6c:	f000 fdda 	bl	a624 <pinMode>
		pinMode(_data_pins[3], INPUT);
    9a70:	2100      	movs	r1, #0
    9a72:	7d68      	ldrb	r0, [r5, #21]
    9a74:	f000 fdd6 	bl	a624 <pinMode>
		digitalWrite(_rw_pin, HIGH);
    9a78:	2101      	movs	r1, #1
    9a7a:	7a28      	ldrb	r0, [r5, #8]
    9a7c:	f000 fdc6 	bl	a60c <digitalWrite>
		digitalWrite(_rs_pin, LOW);
    9a80:	2100      	movs	r1, #0
    9a82:	79e8      	ldrb	r0, [r5, #7]
    9a84:	f000 fdc2 	bl	a60c <digitalWrite>
		uint8_t busy;
		do {
			digitalWrite(en, HIGH);
    9a88:	2101      	movs	r1, #1
    9a8a:	4620      	mov	r0, r4
    9a8c:	f000 fdbe 	bl	a60c <digitalWrite>
			busy = digitalRead(_data_pins[3]);
    9a90:	7d68      	ldrb	r0, [r5, #21]
    9a92:	f000 fdc1 	bl	a618 <digitalRead>
			digitalWrite(en, LOW);
    9a96:	2100      	movs	r1, #0
		digitalWrite(_rw_pin, HIGH);
		digitalWrite(_rs_pin, LOW);
		uint8_t busy;
		do {
			digitalWrite(en, HIGH);
			busy = digitalRead(_data_pins[3]);
    9a98:	4606      	mov	r6, r0
			digitalWrite(en, LOW);
    9a9a:	4620      	mov	r0, r4
    9a9c:	f000 fdb6 	bl	a60c <digitalWrite>
			digitalWrite(en, HIGH);
    9aa0:	2101      	movs	r1, #1
    9aa2:	4620      	mov	r0, r4
    9aa4:	f000 fdb2 	bl	a60c <digitalWrite>
			digitalWrite(en, LOW);
    9aa8:	2100      	movs	r1, #0
    9aaa:	4620      	mov	r0, r4
    9aac:	f000 fdae 	bl	a60c <digitalWrite>
		} while (busy == HIGH);
    9ab0:	2e01      	cmp	r6, #1
    9ab2:	d0e9      	beq.n	9a88 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x50>
		pinMode(_data_pins[0], OUTPUT);
    9ab4:	2101      	movs	r1, #1
    9ab6:	7ca8      	ldrb	r0, [r5, #18]
    9ab8:	f000 fdb4 	bl	a624 <pinMode>
		pinMode(_data_pins[1], OUTPUT);
    9abc:	2101      	movs	r1, #1
    9abe:	7ce8      	ldrb	r0, [r5, #19]
    9ac0:	f000 fdb0 	bl	a624 <pinMode>
		pinMode(_data_pins[2], OUTPUT);
    9ac4:	2101      	movs	r1, #1
    9ac6:	7d28      	ldrb	r0, [r5, #20]
    9ac8:	f000 fdac 	bl	a624 <pinMode>
		pinMode(_data_pins[3], OUTPUT);
    9acc:	2101      	movs	r1, #1
    9ace:	7d68      	ldrb	r0, [r5, #21]
    9ad0:	f000 fda8 	bl	a624 <pinMode>
		digitalWrite(_rw_pin, LOW);
    9ad4:	2100      	movs	r1, #0
    9ad6:	7a28      	ldrb	r0, [r5, #8]
    9ad8:	f000 fd98 	bl	a60c <digitalWrite>
	}
	digitalWrite(_rs_pin, mode);
    9adc:	4641      	mov	r1, r8
    9ade:	79e8      	ldrb	r0, [r5, #7]
    9ae0:	f000 fd94 	bl	a60c <digitalWrite>

	digitalWrite(_data_pins[0], value & 0x10);
    9ae4:	f007 0110 	and.w	r1, r7, #16
    9ae8:	7ca8      	ldrb	r0, [r5, #18]
    9aea:	f000 fd8f 	bl	a60c <digitalWrite>
	digitalWrite(_data_pins[1], value & 0x20);
    9aee:	f007 0120 	and.w	r1, r7, #32
    9af2:	7ce8      	ldrb	r0, [r5, #19]
    9af4:	f000 fd8a 	bl	a60c <digitalWrite>
	digitalWrite(_data_pins[2], value & 0x40);
    9af8:	f007 0140 	and.w	r1, r7, #64	; 0x40
    9afc:	7d28      	ldrb	r0, [r5, #20]
    9afe:	f000 fd85 	bl	a60c <digitalWrite>
	digitalWrite(_data_pins[3], value & 0x80);
    9b02:	f007 0180 	and.w	r1, r7, #128	; 0x80
    9b06:	7d68      	ldrb	r0, [r5, #21]
    9b08:	f000 fd80 	bl	a60c <digitalWrite>
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    9b0c:	4620      	mov	r0, r4
    9b0e:	2101      	movs	r1, #1
    9b10:	f000 fd7c 	bl	a60c <digitalWrite>
	digitalWrite(en, LOW);
    9b14:	4620      	mov	r0, r4
    9b16:	2100      	movs	r1, #0
    9b18:	f000 fd78 	bl	a60c <digitalWrite>

	digitalWrite(_data_pins[0], value & 0x01);
    9b1c:	f007 0101 	and.w	r1, r7, #1
    9b20:	7ca8      	ldrb	r0, [r5, #18]
    9b22:	f000 fd73 	bl	a60c <digitalWrite>
	digitalWrite(_data_pins[1], value & 0x02);
    9b26:	f007 0102 	and.w	r1, r7, #2
    9b2a:	7ce8      	ldrb	r0, [r5, #19]
    9b2c:	f000 fd6e 	bl	a60c <digitalWrite>
	digitalWrite(_data_pins[2], value & 0x04);
    9b30:	f007 0104 	and.w	r1, r7, #4
    9b34:	7d28      	ldrb	r0, [r5, #20]
    9b36:	f000 fd69 	bl	a60c <digitalWrite>
	digitalWrite(_data_pins[3], value & 0x08);
    9b3a:	f007 0108 	and.w	r1, r7, #8
    9b3e:	7d68      	ldrb	r0, [r5, #21]
    9b40:	f000 fd64 	bl	a60c <digitalWrite>
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    9b44:	4620      	mov	r0, r4
    9b46:	2101      	movs	r1, #1
    9b48:	f000 fd60 	bl	a60c <digitalWrite>
	digitalWrite(en, LOW);
    9b4c:	4620      	mov	r0, r4
    9b4e:	2100      	movs	r1, #0
}
    9b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	digitalWrite(_data_pins[0], value & 0x01);
	digitalWrite(_data_pins[1], value & 0x02);
	digitalWrite(_data_pins[2], value & 0x04);
	digitalWrite(_data_pins[3], value & 0x08);
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
	digitalWrite(en, LOW);
    9b54:	f000 bd5a 	b.w	a60c <digitalWrite>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9b58:	4907      	ldr	r1, [pc, #28]	; (9b78 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9b5a:	4b08      	ldr	r3, [pc, #32]	; (9b7c <LiquidCrystalFast::send(unsigned char, unsigned char)+0x144>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9b5c:	6808      	ldr	r0, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9b5e:	4a08      	ldr	r2, [pc, #32]	; (9b80 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x148>)
    9b60:	681b      	ldr	r3, [r3, #0]
    9b62:	fba2 3203 	umull	r3, r2, r2, r3
    9b66:	0c92      	lsrs	r2, r2, #18
    9b68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9b6c:	0192      	lsls	r2, r2, #6
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    9b6e:	680b      	ldr	r3, [r1, #0]
    9b70:	1a1b      	subs	r3, r3, r0
    9b72:	429a      	cmp	r2, r3
    9b74:	d8fb      	bhi.n	9b6e <LiquidCrystalFast::send(unsigned char, unsigned char)+0x136>
    9b76:	e7b1      	b.n	9adc <LiquidCrystalFast::send(unsigned char, unsigned char)+0xa4>
    9b78:	e0001004 	.word	0xe0001004
    9b7c:	20001e70 	.word	0x20001e70
    9b80:	431bde83 	.word	0x431bde83

00009b84 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>:
		_chip = chipSave;
	}
}

void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
    9b84:	b570      	push	{r4, r5, r6, lr}
	if ( row > _numlines ) {
    9b86:	7dc3      	ldrb	r3, [r0, #23]
		_chip = chipSave;
	}
}

void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
    9b88:	4604      	mov	r4, r0
	if ( row > _numlines ) {
    9b8a:	4293      	cmp	r3, r2
    9b8c:	d201      	bcs.n	9b92 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0xe>
		row = _numlines-1;    // we count rows starting w/0
    9b8e:	1e5a      	subs	r2, r3, #1
    9b90:	b2d2      	uxtb	r2, r2
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
    9b92:	2000      	movs	r0, #0
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9b94:	18a3      	adds	r3, r4, r2
void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
    9b96:	73a2      	strb	r2, [r4, #14]
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
    9b98:	73e0      	strb	r0, [r4, #15]
{
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
    9b9a:	7361      	strb	r1, [r4, #13]
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9b9c:	7b20      	ldrb	r0, [r4, #12]
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9b9e:	7e1b      	ldrb	r3, [r3, #24]
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9ba0:	4408      	add	r0, r1
    9ba2:	f003 053f 	and.w	r5, r3, #63	; 0x3f
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9baa:	4428      	add	r0, r5
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    9bac:	b25b      	sxtb	r3, r3
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    9bae:	b2c0      	uxtb	r0, r0
    9bb0:	b245      	sxtb	r5, r0
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
    9bb2:	2d27      	cmp	r5, #39	; 0x27
    9bb4:	dd1c      	ble.n	9bf0 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x6c>
    9bb6:	3828      	subs	r0, #40	; 0x28
    9bb8:	b245      	sxtb	r5, r0
    9bba:	f002 0202 	and.w	r2, r2, #2
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
    9bbe:	7ae1      	ldrb	r1, [r4, #11]
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
	offset |= high_bit;
    9bc0:	431d      	orrs	r5, r3
    9bc2:	b2d6      	uxtb	r6, r2
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
    9bc4:	42b1      	cmp	r1, r6
    9bc6:	d009      	beq.n	9bdc <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x58>
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);   //both chips
}

// Turns the underline cursor on/off
void LiquidCrystalFast::noCursor() {
	_displaycontrol &= ~LCD_CURSORON;
    9bc8:	7f21      	ldrb	r1, [r4, #28]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9bca:	2200      	movs	r2, #0
    9bcc:	4620      	mov	r0, r4
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);   //both chips
}

// Turns the underline cursor on/off
void LiquidCrystalFast::noCursor() {
	_displaycontrol &= ~LCD_CURSORON;
    9bce:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    9bd2:	7721      	strb	r1, [r4, #28]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9bd4:	f041 0108 	orr.w	r1, r1, #8
    9bd8:	f7ff ff2e 	bl	9a38 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    9bdc:	f065 017f 	orn	r1, r5, #127	; 0x7f
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
	_chip = row & 0b10;                     //if it is row 0 or 1 this is 0; if it is row 2 or 3 this is 2
    9be0:	72e6      	strb	r6, [r4, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9be2:	4620      	mov	r0, r4
    9be4:	2200      	movs	r2, #0
    9be6:	b2c9      	uxtb	r1, r1
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
	_chip = row & 0b10;                     //if it is row 0 or 1 this is 0; if it is row 2 or 3 this is 2
	command(LCD_SETDDRAMADDR | (byte) offset );
}
    9be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9bec:	f7ff bf24 	b.w	9a38 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
    9bf0:	2d00      	cmp	r5, #0
    9bf2:	dae2      	bge.n	9bba <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x36>
    9bf4:	3028      	adds	r0, #40	; 0x28
    9bf6:	b245      	sxtb	r5, r0
    9bf8:	e7df      	b.n	9bba <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x36>
    9bfa:	bf00      	nop

00009bfc <LiquidCrystalFast::clear()>:
/******************************************/
/**  high level commands, for the user!   */
/******************************************/

void LiquidCrystalFast::clear()
{
    9bfc:	b538      	push	{r3, r4, r5, lr}
	if (_en2 != 255) {
    9bfe:	7a83      	ldrb	r3, [r0, #10]
/******************************************/
/**  high level commands, for the user!   */
/******************************************/

void LiquidCrystalFast::clear()
{
    9c00:	4604      	mov	r4, r0
	if (_en2 != 255) {
    9c02:	2bff      	cmp	r3, #255	; 0xff
    9c04:	d016      	beq.n	9c34 <LiquidCrystalFast::clear()+0x38>
		_chip=2;
    9c06:	2302      	movs	r3, #2
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9c08:	2200      	movs	r2, #0
    9c0a:	2101      	movs	r1, #1
/******************************************/

void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
    9c0c:	72c3      	strb	r3, [r0, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9c0e:	f7ff ff13 	bl	9a38 <LiquidCrystalFast::send(unsigned char, unsigned char)>
void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
    9c12:	2200      	movs	r2, #0
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9c14:	2101      	movs	r1, #1
    9c16:	4620      	mov	r0, r4
void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
    9c18:	72e2      	strb	r2, [r4, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9c1a:	f7ff ff0d 	bl	9a38 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	void init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
		uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3);
	void send(uint8_t, uint8_t);
	void write4bits(uint8_t);
	void begin2(uint8_t cols, uint8_t rows, uint8_t charsize, uint8_t chip);
	inline void delayPerHome(void) { if (_rw_pin == 255) delayMicroseconds(2900);}
    9c1e:	7a23      	ldrb	r3, [r4, #8]
    9c20:	2bff      	cmp	r3, #255	; 0xff
    9c22:	d01f      	beq.n	9c64 <LiquidCrystalFast::clear()+0x68>
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
		command(LCD_CLEARDISPLAY);
		delayPerHome();
		setCursor(0,0);
    9c24:	2200      	movs	r2, #0
    9c26:	4620      	mov	r0, r4
    9c28:	4611      	mov	r1, r2
    9c2a:	f7ff ffab 	bl	9b84 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	} else {
		command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
		delayPerHome();
	}
	_scroll_count = 0;
    9c2e:	2300      	movs	r3, #0
    9c30:	7323      	strb	r3, [r4, #12]
    9c32:	bd38      	pop	{r3, r4, r5, pc}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    9c34:	2200      	movs	r2, #0
    9c36:	2101      	movs	r1, #1
    9c38:	f7ff fefe 	bl	9a38 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    9c3c:	7a23      	ldrb	r3, [r4, #8]
    9c3e:	2bff      	cmp	r3, #255	; 0xff
    9c40:	d1f5      	bne.n	9c2e <LiquidCrystalFast::clear()+0x32>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9c42:	4a11      	ldr	r2, [pc, #68]	; (9c88 <LiquidCrystalFast::clear()+0x8c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9c44:	f640 3354 	movw	r3, #2900	; 0xb54
    9c48:	4910      	ldr	r1, [pc, #64]	; (9c8c <LiquidCrystalFast::clear()+0x90>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9c4a:	6810      	ldr	r0, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9c4c:	4d10      	ldr	r5, [pc, #64]	; (9c90 <LiquidCrystalFast::clear()+0x94>)
    9c4e:	6809      	ldr	r1, [r1, #0]
    9c50:	fba5 5101 	umull	r5, r1, r5, r1
    9c54:	0c89      	lsrs	r1, r1, #18
    9c56:	fb03 f101 	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    9c5a:	6813      	ldr	r3, [r2, #0]
    9c5c:	1a1b      	subs	r3, r3, r0
    9c5e:	4299      	cmp	r1, r3
    9c60:	d8fb      	bhi.n	9c5a <LiquidCrystalFast::clear()+0x5e>
    9c62:	e7e4      	b.n	9c2e <LiquidCrystalFast::clear()+0x32>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9c64:	4a08      	ldr	r2, [pc, #32]	; (9c88 <LiquidCrystalFast::clear()+0x8c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9c66:	f640 3354 	movw	r3, #2900	; 0xb54
    9c6a:	4908      	ldr	r1, [pc, #32]	; (9c8c <LiquidCrystalFast::clear()+0x90>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    9c6c:	6810      	ldr	r0, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    9c6e:	4d08      	ldr	r5, [pc, #32]	; (9c90 <LiquidCrystalFast::clear()+0x94>)
    9c70:	6809      	ldr	r1, [r1, #0]
    9c72:	fba5 5101 	umull	r5, r1, r5, r1
    9c76:	0c89      	lsrs	r1, r1, #18
    9c78:	fb03 f101 	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    9c7c:	6813      	ldr	r3, [r2, #0]
    9c7e:	1a1b      	subs	r3, r3, r0
    9c80:	4299      	cmp	r1, r3
    9c82:	d8fb      	bhi.n	9c7c <LiquidCrystalFast::clear()+0x80>
    9c84:	e7ce      	b.n	9c24 <LiquidCrystalFast::clear()+0x28>
    9c86:	bf00      	nop
    9c88:	e0001004 	.word	0xe0001004
    9c8c:	20001e70 	.word	0x20001e70
    9c90:	431bde83 	.word	0x431bde83

00009c94 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    9c94:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9c96:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9c98:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9c9a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9c9c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9c9e:	d003      	beq.n	9ca8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    9ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9ca4:	f001 bfa8 	b.w	bbf8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9ca8:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    9caa:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9cae:	4718      	bx	r3

00009cb0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    9cb0:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    9cb2:	f240 2501 	movw	r5, #513	; 0x201
    9cb6:	6804      	ldr	r4, [r0, #0]
    9cb8:	6125      	str	r5, [r4, #16]

	while (count > 0) {
    9cba:	b31b      	cbz	r3, 9d04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    9cbc:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    9cbe:	b1f1      	cbz	r1, 9cfe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    9cc0:	780d      	ldrb	r5, [r1, #0]
    9cc2:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
    9cc4:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    9cc6:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    9cc8:	6f25      	ldr	r5, [r4, #112]	; 0x70
    9cca:	07ad      	lsls	r5, r5, #30
    9ccc:	d406      	bmi.n	9cdc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    9cce:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    9cd0:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    9cd2:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    9cd4:	b112      	cbz	r2, 9cdc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    9cd6:	7015      	strb	r5, [r2, #0]
    9cd8:	3201      	adds	r2, #1
    9cda:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    9cdc:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    9cde:	07ed      	lsls	r5, r5, #31
    9ce0:	d5f2      	bpl.n	9cc8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	d1eb      	bne.n	9cbe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    9ce6:	b16e      	cbz	r6, 9d04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9ce8:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    9cea:	6f0b      	ldr	r3, [r1, #112]	; 0x70
    9cec:	079b      	lsls	r3, r3, #30
    9cee:	d4fc      	bmi.n	9cea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    9cf0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    9cf2:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    9cf4:	b10a      	cbz	r2, 9cfa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    9cf6:	7013      	strb	r3, [r2, #0]
    9cf8:	3201      	adds	r2, #1
			count_read--;
    9cfa:	3e01      	subs	r6, #1
    9cfc:	e7f3      	b.n	9ce6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    9cfe:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    9d02:	e7df      	b.n	9cc4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    9d04:	bc70      	pop	{r4, r5, r6}
    9d06:	4770      	bx	lr

00009d08 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9d08:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    9d0a:	4c30      	ldr	r4, [pc, #192]	; (9dcc <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    9d0c:	4b30      	ldr	r3, [pc, #192]	; (9dd0 <_spi_dma_rxISR0()+0xc8>)
    9d0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    9d10:	6c65      	ldr	r5, [r4, #68]	; 0x44
    9d12:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    9d14:	6c22      	ldr	r2, [r4, #64]	; 0x40
    9d16:	77d9      	strb	r1, [r3, #31]
    9d18:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    9d1a:	7719      	strb	r1, [r3, #28]
    9d1c:	7901      	ldrb	r1, [r0, #4]
    9d1e:	7719      	strb	r1, [r3, #28]
    9d20:	b1fa      	cbz	r2, 9d62 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    9d22:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9d26:	d218      	bcs.n	9d5a <_spi_dma_rxISR0()+0x52>
    9d28:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    9d2a:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9d2c:	8bd9      	ldrh	r1, [r3, #30]
    9d2e:	040e      	lsls	r6, r1, #16
    9d30:	d43b      	bmi.n	9daa <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    9d32:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    9d34:	8bd9      	ldrh	r1, [r3, #30]
    9d36:	b289      	uxth	r1, r1
    9d38:	82d9      	strh	r1, [r3, #22]
    9d3a:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9d3c:	8bd9      	ldrh	r1, [r3, #30]
    9d3e:	0409      	lsls	r1, r1, #16
    9d40:	d42c      	bmi.n	9d9c <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9d42:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    9d44:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    9d46:	8bda      	ldrh	r2, [r3, #30]
    9d48:	b292      	uxth	r2, r2
    9d4a:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    9d4c:	6421      	str	r1, [r4, #64]	; 0x40
    9d4e:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    9d50:	4b1f      	ldr	r3, [pc, #124]	; (9dd0 <_spi_dma_rxISR0()+0xc8>)
    9d52:	76da      	strb	r2, [r3, #27]
    9d54:	792a      	ldrb	r2, [r5, #4]
    9d56:	76da      	strb	r2, [r3, #27]
    9d58:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    9d5a:	4b1e      	ldr	r3, [pc, #120]	; (9dd4 <_spi_dma_rxISR0()+0xcc>)
    9d5c:	4413      	add	r3, r2
    9d5e:	6423      	str	r3, [r4, #64]	; 0x40
    9d60:	e7f5      	b.n	9d4e <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    9d62:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    9d64:	250f      	movs	r5, #15
    9d66:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    9d68:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    9d6c:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    9d6e:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    9d72:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9d74:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
    9d76:	680d      	ldr	r5, [r1, #0]
    9d78:	4917      	ldr	r1, [pc, #92]	; (9dd8 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    9d7a:	61da      	str	r2, [r3, #28]
    9d7c:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    9d7e:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    9d82:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9d84:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    9d88:	d117      	bne.n	9dba <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9d8a:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9d8c:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9d8e:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9d90:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9d92:	d017      	beq.n	9dc4 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9d94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9d98:	f001 bf2e 	b.w	bbf8 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9d9c:	8bd9      	ldrh	r1, [r3, #30]
    9d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    9da2:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    9da6:	430a      	orrs	r2, r1
    9da8:	e7cb      	b.n	9d42 <_spi_dma_rxISR0()+0x3a>
    9daa:	8bd9      	ldrh	r1, [r3, #30]
    9dac:	f3c2 0608 	ubfx	r6, r2, #0, #9
    9db0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    9db4:	4331      	orrs	r1, r6
    9db6:	83d9      	strh	r1, [r3, #30]
    9db8:	e7bc      	b.n	9d34 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    9dba:	462b      	mov	r3, r5
    9dbc:	4611      	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    9dc2:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9dc4:	6883      	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9dc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9dca:	4718      	bx	r3
    9dcc:	20001e1c 	.word	0x20001e1c
    9dd0:	400e8000 	.word	0x400e8000
    9dd4:	ffff8001 	.word	0xffff8001
    9dd8:	00009c95 	.word	0x00009c95

00009ddc <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    9ddc:	6843      	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    9dde:	b5f0      	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9de0:	e893 0082 	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9de4:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 9fcc <SPIClass::begin()+0x1f0>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    9de8:	26b8      	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9dea:	680a      	ldr	r2, [r1, #0]
	hardware().sdo_select_input_register = hardware().sdo_select_val;

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    9dec:	2502      	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9dee:	4c6f      	ldr	r4, [pc, #444]	; (9fac <SPIClass::begin()+0x1d0>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9df0:	ea22 0207 	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9df4:	4f6e      	ldr	r7, [pc, #440]	; (9fb0 <SPIClass::begin()+0x1d4>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    9df6:	600a      	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    9df8:	f8de 2018 	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9dfc:	4014      	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    9dfe:	4a6d      	ldr	r2, [pc, #436]	; (9fb4 <SPIClass::begin()+0x1d8>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9e00:	4327      	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    9e02:	240f      	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    9e04:	f8ce 7018 	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    9e08:	7c07      	ldrb	r7, [r0, #16]
    9e0a:	441f      	add	r7, r3
    9e0c:	7c3f      	ldrb	r7, [r7, #16]
    9e0e:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    9e12:	68bf      	ldr	r7, [r7, #8]
    9e14:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    9e16:	7c47      	ldrb	r7, [r0, #17]
    9e18:	441f      	add	r7, r3
    9e1a:	7e3f      	ldrb	r7, [r7, #24]
    9e1c:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    9e20:	68bf      	ldr	r7, [r7, #8]
    9e22:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    9e24:	7c87      	ldrb	r7, [r0, #18]
    9e26:	441f      	add	r7, r3
    9e28:	f897 7020 	ldrb.w	r7, [r7, #32]
    9e2c:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    9e30:	68bf      	ldr	r7, [r7, #8]
    9e32:	603e      	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    9e34:	680f      	ldr	r7, [r1, #0]
    9e36:	685e      	ldr	r6, [r3, #4]
    9e38:	433e      	orrs	r6, r7
    9e3a:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    9e3c:	7c01      	ldrb	r1, [r0, #16]
    9e3e:	185e      	adds	r6, r3, r1
    9e40:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9e44:	7c36      	ldrb	r6, [r6, #16]
    9e46:	694f      	ldr	r7, [r1, #20]
    9e48:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    9e4c:	6849      	ldr	r1, [r1, #4]
    9e4e:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    9e50:	7c41      	ldrb	r1, [r0, #17]
    9e52:	185e      	adds	r6, r3, r1
    9e54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9e58:	7e36      	ldrb	r6, [r6, #24]
    9e5a:	69cf      	ldr	r7, [r1, #28]
    9e5c:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    9e60:	6849      	ldr	r1, [r1, #4]
    9e62:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    9e64:	7c81      	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    9e66:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    9e68:	185e      	adds	r6, r3, r1
    9e6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9e6e:	f896 6020 	ldrb.w	r6, [r6, #32]
    9e72:	6a49      	ldr	r1, [r1, #36]	; 0x24
    9e74:	eb02 1206 	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
	hardware().sdi_select_input_register = hardware().sdi_select_val;
    9e78:	6b5e      	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    9e7a:	6852      	ldr	r2, [r2, #4]
    9e7c:	6011      	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    9e7e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	hardware().sdi_select_input_register = hardware().sdi_select_val;
	hardware().sdo_select_input_register = hardware().sdo_select_val;
    9e82:	6b99      	ldr	r1, [r3, #56]	; 0x38
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    9e84:	603a      	str	r2, [r7, #0]
	hardware().sdi_select_input_register = hardware().sdi_select_val;
    9e86:	f893 7041 	ldrb.w	r7, [r3, #65]	; 0x41
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9e8a:	6802      	ldr	r2, [r0, #0]
    9e8c:	6037      	str	r7, [r6, #0]
	hardware().sdo_select_input_register = hardware().sdo_select_val;
    9e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    9e92:	600b      	str	r3, [r1, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    9e94:	6115      	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    9e96:	6594      	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    9e98:	7cc3      	ldrb	r3, [r0, #19]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d029      	beq.n	9ef2 <SPIClass::begin()+0x116>
			__disable_irq();
    9e9e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9ea0:	7cc3      	ldrb	r3, [r0, #19]
    9ea2:	07dc      	lsls	r4, r3, #31
    9ea4:	d506      	bpl.n	9eb4 <SPIClass::begin()+0xd8>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9ea6:	4a44      	ldr	r2, [pc, #272]	; (9fb8 <SPIClass::begin()+0x1dc>)
    9ea8:	6943      	ldr	r3, [r0, #20]
    9eaa:	6811      	ldr	r1, [r2, #0]
    9eac:	400b      	ands	r3, r1
    9eae:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9eb0:	6013      	str	r3, [r2, #0]
    9eb2:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    9eb4:	0799      	lsls	r1, r3, #30
    9eb6:	d506      	bpl.n	9ec6 <SPIClass::begin()+0xea>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9eb8:	4a40      	ldr	r2, [pc, #256]	; (9fbc <SPIClass::begin()+0x1e0>)
    9eba:	6983      	ldr	r3, [r0, #24]
    9ebc:	6811      	ldr	r1, [r2, #0]
    9ebe:	400b      	ands	r3, r1
    9ec0:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9ec2:	6013      	str	r3, [r2, #0]
    9ec4:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    9ec6:	075a      	lsls	r2, r3, #29
    9ec8:	d506      	bpl.n	9ed8 <SPIClass::begin()+0xfc>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9eca:	4a3d      	ldr	r2, [pc, #244]	; (9fc0 <SPIClass::begin()+0x1e4>)
    9ecc:	69c3      	ldr	r3, [r0, #28]
    9ece:	6811      	ldr	r1, [r2, #0]
    9ed0:	400b      	ands	r3, r1
    9ed2:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9ed4:	6013      	str	r3, [r2, #0]
    9ed6:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    9ed8:	071f      	lsls	r7, r3, #28
    9eda:	d506      	bpl.n	9eea <SPIClass::begin()+0x10e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9edc:	4a39      	ldr	r2, [pc, #228]	; (9fc4 <SPIClass::begin()+0x1e8>)
    9ede:	6a03      	ldr	r3, [r0, #32]
    9ee0:	6811      	ldr	r1, [r2, #0]
    9ee2:	400b      	ands	r3, r1
    9ee4:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9ee6:	6013      	str	r3, [r2, #0]
    9ee8:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    9eea:	06de      	lsls	r6, r3, #27
    9eec:	d44c      	bmi.n	9f88 <SPIClass::begin()+0x1ac>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    9eee:	b662      	cpsie	i
    9ef0:	6802      	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    9ef2:	4d35      	ldr	r5, [pc, #212]	; (9fc8 <SPIClass::begin()+0x1ec>)
    9ef4:	6883      	ldr	r3, [r0, #8]
    9ef6:	42ab      	cmp	r3, r5
    9ef8:	d04d      	beq.n	9f96 <SPIClass::begin()+0x1ba>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    9efa:	4b34      	ldr	r3, [pc, #208]	; (9fcc <SPIClass::begin()+0x1f0>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    9efc:	6085      	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    9efe:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9f00:	4c33      	ldr	r4, [pc, #204]	; (9fd0 <SPIClass::begin()+0x1f4>)
    9f02:	f3c3 1601 	ubfx	r6, r3, #4, #2
    9f06:	f3c3 6182 	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9f0a:	4b32      	ldr	r3, [pc, #200]	; (9fd4 <SPIClass::begin()+0x1f8>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9f0c:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    9f10:	3101      	adds	r1, #1
    9f12:	fbb4 f1f1 	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9f16:	fba3 4301 	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    9f1a:	0d1b      	lsrs	r3, r3, #20
    9f1c:	d129      	bne.n	9f72 <SPIClass::begin()+0x196>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    9f1e:	60c3      	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9f20:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9f22:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    9f24:	2407      	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    9f26:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9f28:	6116      	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9f2a:	6255      	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    9f2c:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    9f2e:	6614      	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9f30:	6111      	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    9f32:	7cc3      	ldrb	r3, [r0, #19]
    9f34:	b1e3      	cbz	r3, 9f70 <SPIClass::begin()+0x194>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9f36:	07dd      	lsls	r5, r3, #31
    9f38:	d503      	bpl.n	9f42 <SPIClass::begin()+0x166>
    9f3a:	4b27      	ldr	r3, [pc, #156]	; (9fd8 <SPIClass::begin()+0x1fc>)
    9f3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    9f3e:	601a      	str	r2, [r3, #0]
    9f40:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9f42:	079c      	lsls	r4, r3, #30
    9f44:	d503      	bpl.n	9f4e <SPIClass::begin()+0x172>
    9f46:	4b25      	ldr	r3, [pc, #148]	; (9fdc <SPIClass::begin()+0x200>)
    9f48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    9f4a:	601a      	str	r2, [r3, #0]
    9f4c:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9f4e:	0759      	lsls	r1, r3, #29
    9f50:	d503      	bpl.n	9f5a <SPIClass::begin()+0x17e>
    9f52:	4b23      	ldr	r3, [pc, #140]	; (9fe0 <SPIClass::begin()+0x204>)
    9f54:	6b02      	ldr	r2, [r0, #48]	; 0x30
    9f56:	601a      	str	r2, [r3, #0]
    9f58:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9f5a:	071a      	lsls	r2, r3, #28
    9f5c:	d503      	bpl.n	9f66 <SPIClass::begin()+0x18a>
    9f5e:	4b21      	ldr	r3, [pc, #132]	; (9fe4 <SPIClass::begin()+0x208>)
    9f60:	6b42      	ldr	r2, [r0, #52]	; 0x34
    9f62:	601a      	str	r2, [r3, #0]
    9f64:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9f66:	06db      	lsls	r3, r3, #27
    9f68:	d502      	bpl.n	9f70 <SPIClass::begin()+0x194>
    9f6a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    9f6c:	4b1e      	ldr	r3, [pc, #120]	; (9fe8 <SPIClass::begin()+0x20c>)
    9f6e:	601a      	str	r2, [r3, #0]
    9f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    9f72:	fbb1 f1f3 	udiv	r1, r1, r3
    9f76:	42a9      	cmp	r1, r5
    9f78:	bf88      	it	hi
    9f7a:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    9f7c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9f80:	d30b      	bcc.n	9f9a <SPIClass::begin()+0x1be>
    9f82:	f647 73ff 	movw	r3, #32767	; 0x7fff
    9f86:	e7ca      	b.n	9f1e <SPIClass::begin()+0x142>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    9f88:	4a18      	ldr	r2, [pc, #96]	; (9fec <SPIClass::begin()+0x210>)
    9f8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9f8c:	6811      	ldr	r1, [r2, #0]
    9f8e:	400b      	ands	r3, r1
    9f90:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9f92:	6013      	str	r3, [r2, #0]
    9f94:	e7ab      	b.n	9eee <SPIClass::begin()+0x112>
    9f96:	68c3      	ldr	r3, [r0, #12]
    9f98:	e7c2      	b.n	9f20 <SPIClass::begin()+0x144>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    9f9a:	2b02      	cmp	r3, #2
    9f9c:	bf98      	it	ls
    9f9e:	2300      	movls	r3, #0
    9fa0:	d9bd      	bls.n	9f1e <SPIClass::begin()+0x142>
    9fa2:	3b02      	subs	r3, #2
    9fa4:	0859      	lsrs	r1, r3, #1
    9fa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9faa:	e7b8      	b.n	9f1e <SPIClass::begin()+0x142>
    9fac:	e3ffffcf 	.word	0xe3ffffcf
    9fb0:	08000010 	.word	0x08000010
    9fb4:	20001854 	.word	0x20001854
    9fb8:	e000e180 	.word	0xe000e180
    9fbc:	e000e184 	.word	0xe000e184
    9fc0:	e000e188 	.word	0xe000e188
    9fc4:	e000e18c 	.word	0xe000e18c
    9fc8:	003d0900 	.word	0x003d0900
    9fcc:	400fc000 	.word	0x400fc000
    9fd0:	200014c0 	.word	0x200014c0
    9fd4:	431bde83 	.word	0x431bde83
    9fd8:	e000e100 	.word	0xe000e100
    9fdc:	e000e104 	.word	0xe000e104
    9fe0:	e000e108 	.word	0xe000e108
    9fe4:	e000e10c 	.word	0xe000e10c
    9fe8:	e000e110 	.word	0xe000e110
    9fec:	e000e190 	.word	0xe000e190

00009ff0 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    9ff0:	b10b      	cbz	r3, 9ff6 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    9ff2:	f7ff be5d 	b.w	9cb0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    9ff6:	4770      	bx	lr

00009ff8 <Bounce::Bounce(unsigned char, unsigned long)>:

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    9ff8:	b538      	push	{r3, r4, r5, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    9ffa:	4b07      	ldr	r3, [pc, #28]	; (a018 <Bounce::Bounce(unsigned char, unsigned long)+0x20>)
    9ffc:	4604      	mov	r4, r0
    9ffe:	460d      	mov	r5, r1


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    a000:	2100      	movs	r1, #0
    a002:	681b      	ldr	r3, [r3, #0]
       }


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
    a004:	6042      	str	r2, [r0, #4]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    a006:	4628      	mov	r0, r5


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    a008:	60a1      	str	r1, [r4, #8]


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
    a00a:	6023      	str	r3, [r4, #0]
	state = digitalRead(pin);
    a00c:	f000 fb04 	bl	a618 <digitalRead>
    this->pin = pin;
    a010:	7365      	strb	r5, [r4, #13]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    a012:	7320      	strb	r0, [r4, #12]
    this->pin = pin;
}
    a014:	4620      	mov	r0, r4
    a016:	bd38      	pop	{r3, r4, r5, pc}
    a018:	20002c14 	.word	0x20002c14

0000a01c <Bounce::debounce()>:
	return (int)state;
}


// Protected: debounces the pin
int Bounce::debounce() {
    a01c:	b538      	push	{r3, r4, r5, lr}
    a01e:	4604      	mov	r4, r0
	
	uint8_t newState = digitalRead(pin);
    a020:	7b40      	ldrb	r0, [r0, #13]
    a022:	f000 faf9 	bl	a618 <digitalRead>
	if (state != newState ) {
    a026:	7b23      	ldrb	r3, [r4, #12]
    a028:	4283      	cmp	r3, r0
    a02a:	d00c      	beq.n	a046 <Bounce::debounce()+0x2a>
    a02c:	4907      	ldr	r1, [pc, #28]	; (a04c <Bounce::debounce()+0x30>)
    a02e:	4602      	mov	r2, r0
  		if (millis() - previous_millis >= interval_millis) {
    a030:	6825      	ldr	r5, [r4, #0]
    a032:	680b      	ldr	r3, [r1, #0]
    a034:	6860      	ldr	r0, [r4, #4]
    a036:	1b5b      	subs	r3, r3, r5
    a038:	4283      	cmp	r3, r0
    a03a:	d304      	bcc.n	a046 <Bounce::debounce()+0x2a>
    a03c:	680b      	ldr	r3, [r1, #0]
  			previous_millis = millis();
  			state = newState;
  			return 1;
    a03e:	2001      	movs	r0, #1
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
  			state = newState;
    a040:	7322      	strb	r2, [r4, #12]
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
    a042:	6023      	str	r3, [r4, #0]
  			state = newState;
  			return 1;
    a044:	bd38      	pop	{r3, r4, r5, pc}
	}
  }
  
  return 0;
    a046:	2000      	movs	r0, #0
	
}
    a048:	bd38      	pop	{r3, r4, r5, pc}
    a04a:	bf00      	nop
    a04c:	20002c14 	.word	0x20002c14

0000a050 <Bounce::update()>:
}



int Bounce::update()
{
    a050:	b538      	push	{r3, r4, r5, lr}
    a052:	4604      	mov	r4, r0
	if ( debounce() ) {
    a054:	f7ff ffe2 	bl	a01c <Bounce::debounce()>
    a058:	b988      	cbnz	r0, a07e <Bounce::update()+0x2e>
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    a05a:	68a3      	ldr	r3, [r4, #8]
    a05c:	b163      	cbz	r3, a078 <Bounce::update()+0x28>
    a05e:	490b      	ldr	r1, [pc, #44]	; (a08c <Bounce::update()+0x3c>)
    a060:	6825      	ldr	r5, [r4, #0]
    a062:	680a      	ldr	r2, [r1, #0]
    a064:	1b52      	subs	r2, r2, r5
    a066:	4293      	cmp	r3, r2
    a068:	d806      	bhi.n	a078 <Bounce::update()+0x28>
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
    a06a:	2301      	movs	r3, #1
    a06c:	680a      	ldr	r2, [r1, #0]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    a06e:	60a0      	str	r0, [r4, #8]
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
    a070:	6022      	str	r2, [r4, #0]
		 rebounce(0);
		 return stateChanged = 1;
    a072:	4618      	mov	r0, r3
    a074:	73a3      	strb	r3, [r4, #14]
    a076:	bd38      	pop	{r3, r4, r5, pc}
	}

	return stateChanged = 0;
    a078:	2300      	movs	r3, #0
    a07a:	73a3      	strb	r3, [r4, #14]
}
    a07c:	bd38      	pop	{r3, r4, r5, pc}

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    a07e:	2301      	movs	r3, #1
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    a080:	2200      	movs	r2, #0

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    a082:	4618      	mov	r0, r3
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    a084:	60a2      	str	r2, [r4, #8]

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    a086:	73a3      	strb	r3, [r4, #14]
    a088:	bd38      	pop	{r3, r4, r5, pc}
    a08a:	bf00      	nop
    a08c:	20002c14 	.word	0x20002c14

0000a090 <Bounce::fallingEdge()>:
}

// The risingEdge method is true for one scan after the de-bounced input goes from off-to-on.
bool  Bounce::risingEdge() { return stateChanged && state; }
// The fallingEdge  method it true for one scan after the de-bounced input goes from on-to-off. 
bool  Bounce::fallingEdge() { return stateChanged && !state; }
    a090:	7b83      	ldrb	r3, [r0, #14]
    a092:	b123      	cbz	r3, a09e <Bounce::fallingEdge()+0xe>
    a094:	7b00      	ldrb	r0, [r0, #12]
    a096:	fab0 f080 	clz	r0, r0
    a09a:	0940      	lsrs	r0, r0, #5
    a09c:	4770      	bx	lr
    a09e:	4618      	mov	r0, r3
    a0a0:	4770      	bx	lr
    a0a2:	bf00      	nop

0000a0a4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a0a4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a0a6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a0aa:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a0ae:	d16d      	bne.n	a18c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a0b0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a0b2:	d341      	bcc.n	a138 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a0b4:	f851 3b04 	ldr.w	r3, [r1], #4
    a0b8:	f840 3b04 	str.w	r3, [r0], #4
    a0bc:	f851 3b04 	ldr.w	r3, [r1], #4
    a0c0:	f840 3b04 	str.w	r3, [r0], #4
    a0c4:	f851 3b04 	ldr.w	r3, [r1], #4
    a0c8:	f840 3b04 	str.w	r3, [r0], #4
    a0cc:	f851 3b04 	ldr.w	r3, [r1], #4
    a0d0:	f840 3b04 	str.w	r3, [r0], #4
    a0d4:	f851 3b04 	ldr.w	r3, [r1], #4
    a0d8:	f840 3b04 	str.w	r3, [r0], #4
    a0dc:	f851 3b04 	ldr.w	r3, [r1], #4
    a0e0:	f840 3b04 	str.w	r3, [r0], #4
    a0e4:	f851 3b04 	ldr.w	r3, [r1], #4
    a0e8:	f840 3b04 	str.w	r3, [r0], #4
    a0ec:	f851 3b04 	ldr.w	r3, [r1], #4
    a0f0:	f840 3b04 	str.w	r3, [r0], #4
    a0f4:	f851 3b04 	ldr.w	r3, [r1], #4
    a0f8:	f840 3b04 	str.w	r3, [r0], #4
    a0fc:	f851 3b04 	ldr.w	r3, [r1], #4
    a100:	f840 3b04 	str.w	r3, [r0], #4
    a104:	f851 3b04 	ldr.w	r3, [r1], #4
    a108:	f840 3b04 	str.w	r3, [r0], #4
    a10c:	f851 3b04 	ldr.w	r3, [r1], #4
    a110:	f840 3b04 	str.w	r3, [r0], #4
    a114:	f851 3b04 	ldr.w	r3, [r1], #4
    a118:	f840 3b04 	str.w	r3, [r0], #4
    a11c:	f851 3b04 	ldr.w	r3, [r1], #4
    a120:	f840 3b04 	str.w	r3, [r0], #4
    a124:	f851 3b04 	ldr.w	r3, [r1], #4
    a128:	f840 3b04 	str.w	r3, [r0], #4
    a12c:	f851 3b04 	ldr.w	r3, [r1], #4
    a130:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a134:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a136:	d2bd      	bcs.n	a0b4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a138:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a13a:	d311      	bcc.n	a160 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a13c:	f851 3b04 	ldr.w	r3, [r1], #4
    a140:	f840 3b04 	str.w	r3, [r0], #4
    a144:	f851 3b04 	ldr.w	r3, [r1], #4
    a148:	f840 3b04 	str.w	r3, [r0], #4
    a14c:	f851 3b04 	ldr.w	r3, [r1], #4
    a150:	f840 3b04 	str.w	r3, [r0], #4
    a154:	f851 3b04 	ldr.w	r3, [r1], #4
    a158:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a15c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    a15e:	d2ed      	bcs.n	a13c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a160:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    a162:	d305      	bcc.n	a170 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a164:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a168:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    a16c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a16e:	d2f9      	bcs.n	a164 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a170:	3204      	adds	r2, #4
	beq	.Ldone
    a172:	d008      	beq.n	a186 <memcpy+0xe2>

	lsls	r2, r2, #31
    a174:	07d2      	lsls	r2, r2, #31
	itt ne
    a176:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a178:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a17c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a180:	d301      	bcc.n	a186 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a182:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a184:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a186:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a188:	4770      	bx	lr
    a18a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a18c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    a18e:	d313      	bcc.n	a1b8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a190:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a192:	d08d      	beq.n	a0b0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a194:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a198:	d08a      	beq.n	a0b0 <memcpy+0xc>

	rsb	r3, #4
    a19a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    a19e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    a1a0:	07db      	lsls	r3, r3, #31
	itt ne
    a1a2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a1a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a1a8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a1ac:	d380      	bcc.n	a0b0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a1ae:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a1b2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a1b6:	e77b      	b.n	a0b0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a1b8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    a1ba:	d3d9      	bcc.n	a170 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a1bc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    a1be:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a1c2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a1c6:	d2f9      	bcs.n	a1bc <memcpy+0x118>

	ldrb	r3, [r1]
    a1c8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a1ca:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a1cc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a1ce:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a1d0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a1d2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a1d4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a1d6:	4770      	bx	lr

0000a1d8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1d8:	4a96      	ldr	r2, [pc, #600]	; (a434 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a1da:	4b97      	ldr	r3, [pc, #604]	; (a438 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1dc:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a1de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a1e2:	4c96      	ldr	r4, [pc, #600]	; (a43c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a1e4:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a1e8:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a1ea:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1ec:	d91c      	bls.n	a228 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a1ee:	4b94      	ldr	r3, [pc, #592]	; (a440 <set_arm_clock+0x268>)
    a1f0:	4298      	cmp	r0, r3
    a1f2:	f240 8115 	bls.w	a420 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a1f6:	4b93      	ldr	r3, [pc, #588]	; (a444 <set_arm_clock+0x26c>)
    a1f8:	f240 6527 	movw	r5, #1575	; 0x627
    a1fc:	4f92      	ldr	r7, [pc, #584]	; (a448 <set_arm_clock+0x270>)
    a1fe:	4403      	add	r3, r0
    a200:	4c92      	ldr	r4, [pc, #584]	; (a44c <set_arm_clock+0x274>)
    a202:	0a1a      	lsrs	r2, r3, #8
    a204:	fba7 3202 	umull	r3, r2, r7, r2
    a208:	09d3      	lsrs	r3, r2, #7
    a20a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a20e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a212:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    a216:	42ab      	cmp	r3, r5
    a218:	bf28      	it	cs
    a21a:	462b      	movcs	r3, r5
    a21c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    a220:	fba4 3503 	umull	r3, r5, r4, r3
    a224:	08ed      	lsrs	r5, r5, #3
    a226:	e004      	b.n	a232 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    a228:	4d89      	ldr	r5, [pc, #548]	; (a450 <set_arm_clock+0x278>)
    a22a:	42a8      	cmp	r0, r5
    a22c:	bf94      	ite	ls
    a22e:	2506      	movls	r5, #6
    a230:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a232:	4a81      	ldr	r2, [pc, #516]	; (a438 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a234:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a238:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a23c:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a23e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a242:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a246:	d20a      	bcs.n	a25e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a248:	4b7c      	ldr	r3, [pc, #496]	; (a43c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a24a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a24e:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a250:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a252:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a254:	6813      	ldr	r3, [r2, #0]
    a256:	2b00      	cmp	r3, #0
    a258:	dafc      	bge.n	a254 <set_arm_clock+0x7c>
    a25a:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a25e:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    a262:	d131      	bne.n	a2c8 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a264:	4c7b      	ldr	r4, [pc, #492]	; (a454 <set_arm_clock+0x27c>)
    a266:	4a7c      	ldr	r2, [pc, #496]	; (a458 <set_arm_clock+0x280>)
    a268:	f8d4 c010 	ldr.w	ip, [r4, #16]
    a26c:	4614      	mov	r4, r2
    a26e:	ea0c 0202 	and.w	r2, ip, r2
    a272:	42a2      	cmp	r2, r4
    a274:	bf0a      	itet	eq
    a276:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    a27a:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    a27e:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a280:	ea8e 0403 	eor.w	r4, lr, r3
    a284:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a288:	d008      	beq.n	a29c <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a28a:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a28e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a292:	4c69      	ldr	r4, [pc, #420]	; (a438 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a294:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    a298:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a29c:	ea81 0302 	eor.w	r3, r1, r2
    a2a0:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    a2a4:	d008      	beq.n	a2b8 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a2a6:	4b64      	ldr	r3, [pc, #400]	; (a438 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a2a8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a2ac:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a2ae:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a2b0:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a2b2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a2b4:	071c      	lsls	r4, r3, #28
    a2b6:	d4fc      	bmi.n	a2b2 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a2b8:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a2bc:	4a5e      	ldr	r2, [pc, #376]	; (a438 <set_arm_clock+0x260>)
    a2be:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a2c2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a2c4:	0699      	lsls	r1, r3, #26
    a2c6:	d4fc      	bmi.n	a2c2 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a2c8:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a2ca:	4c64      	ldr	r4, [pc, #400]	; (a45c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a2cc:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a2ce:	fb01 f302 	mul.w	r3, r1, r2
    a2d2:	fb00 f303 	mul.w	r3, r0, r3
    a2d6:	42a3      	cmp	r3, r4
    a2d8:	d809      	bhi.n	a2ee <set_arm_clock+0x116>
		if (div_arm < 8) {
    a2da:	2a07      	cmp	r2, #7
    a2dc:	f200 8095 	bhi.w	a40a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    a2e0:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a2e2:	fb01 f302 	mul.w	r3, r1, r2
    a2e6:	fb00 f303 	mul.w	r3, r0, r3
    a2ea:	42a3      	cmp	r3, r4
    a2ec:	d9f5      	bls.n	a2da <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a2ee:	485c      	ldr	r0, [pc, #368]	; (a460 <set_arm_clock+0x288>)
    a2f0:	4c5c      	ldr	r4, [pc, #368]	; (a464 <set_arm_clock+0x28c>)
    a2f2:	4418      	add	r0, r3
    a2f4:	fba4 0300 	umull	r0, r3, r4, r0
    a2f8:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    a2fa:	2b6c      	cmp	r3, #108	; 0x6c
    a2fc:	f200 808b 	bhi.w	a416 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    a300:	2b35      	cmp	r3, #53	; 0x35
    a302:	f200 808f 	bhi.w	a424 <set_arm_clock+0x24c>
    a306:	f8df 8188 	ldr.w	r8, [pc, #392]	; a490 <set_arm_clock+0x2b8>
    a30a:	2336      	movs	r3, #54	; 0x36
    a30c:	4856      	ldr	r0, [pc, #344]	; (a468 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a30e:	f8df c144 	ldr.w	ip, [pc, #324]	; a454 <set_arm_clock+0x27c>
    a312:	4c56      	ldr	r4, [pc, #344]	; (a46c <set_arm_clock+0x294>)
    a314:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a318:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a31c:	ea09 0404 	and.w	r4, r9, r4
    a320:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a322:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a326:	d00b      	beq.n	a340 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a32c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a330:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a332:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a336:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a33a:	6823      	ldr	r3, [r4, #0]
    a33c:	2b00      	cmp	r3, #0
    a33e:	dafc      	bge.n	a33a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a340:	f8df c0f4 	ldr.w	ip, [pc, #244]	; a438 <set_arm_clock+0x260>
    a344:	3a01      	subs	r2, #1
    a346:	f8dc 3010 	ldr.w	r3, [ip, #16]
    a34a:	f003 0307 	and.w	r3, r3, #7
    a34e:	4293      	cmp	r3, r2
    a350:	d007      	beq.n	a362 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a352:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a356:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a358:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a35c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a35e:	03db      	lsls	r3, r3, #15
    a360:	d4fc      	bmi.n	a35c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a362:	3901      	subs	r1, #1
    a364:	0289      	lsls	r1, r1, #10
    a366:	ea8e 0301 	eor.w	r3, lr, r1
    a36a:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    a36e:	d00c      	beq.n	a38a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a370:	4b31      	ldr	r3, [pc, #196]	; (a438 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a372:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a376:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a37a:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a37c:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    a380:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a384:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a386:	0799      	lsls	r1, r3, #30
    a388:	d4fc      	bmi.n	a384 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a38a:	4b39      	ldr	r3, [pc, #228]	; (a470 <set_arm_clock+0x298>)
    a38c:	4939      	ldr	r1, [pc, #228]	; (a474 <set_arm_clock+0x29c>)
    a38e:	4403      	add	r3, r0
    a390:	09db      	lsrs	r3, r3, #7
    a392:	fba1 3103 	umull	r3, r1, r1, r3
    a396:	0b09      	lsrs	r1, r1, #12
    a398:	2904      	cmp	r1, #4
    a39a:	bf28      	it	cs
    a39c:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a39e:	1e4b      	subs	r3, r1, #1
    a3a0:	021b      	lsls	r3, r3, #8
    a3a2:	ea8e 0203 	eor.w	r2, lr, r3
    a3a6:	f412 7f40 	tst.w	r2, #768	; 0x300
    a3aa:	d007      	beq.n	a3bc <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a3ac:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a3b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a3b4:	4a20      	ldr	r2, [pc, #128]	; (a438 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a3b6:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a3ba:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a3bc:	4b1e      	ldr	r3, [pc, #120]	; (a438 <set_arm_clock+0x260>)
    a3be:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a3c0:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a3c2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    a3c6:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a3c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a3ca:	069b      	lsls	r3, r3, #26
    a3cc:	d4fc      	bmi.n	a3c8 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3ce:	4b2a      	ldr	r3, [pc, #168]	; (a478 <set_arm_clock+0x2a0>)
    a3d0:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a3d4:	4c29      	ldr	r4, [pc, #164]	; (a47c <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a3d6:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3d8:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a3dc:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3de:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3e2:	4c27      	ldr	r4, [pc, #156]	; (a480 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3e8:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3ec:	4a25      	ldr	r2, [pc, #148]	; (a484 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3ee:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3f0:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a3f2:	d208      	bcs.n	a406 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a3f4:	4b11      	ldr	r3, [pc, #68]	; (a43c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a3f6:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a3fa:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a3fc:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a3fe:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a400:	6813      	ldr	r3, [r2, #0]
    a402:	2b00      	cmp	r3, #0
    a404:	dafc      	bge.n	a400 <set_arm_clock+0x228>
	}

	return frequency;
}
    a406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a40a:	2904      	cmp	r1, #4
    a40c:	f63f af6f 	bhi.w	a2ee <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    a410:	3101      	adds	r1, #1
				div_arm = 1;
    a412:	2201      	movs	r2, #1
    a414:	e75b      	b.n	a2ce <set_arm_clock+0xf6>
    a416:	f8df 807c 	ldr.w	r8, [pc, #124]	; a494 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a41a:	236c      	movs	r3, #108	; 0x6c
    a41c:	481a      	ldr	r0, [pc, #104]	; (a488 <set_arm_clock+0x2b0>)
    a41e:	e776      	b.n	a30e <set_arm_clock+0x136>
    a420:	2512      	movs	r5, #18
    a422:	e706      	b.n	a232 <set_arm_clock+0x5a>
    a424:	4819      	ldr	r0, [pc, #100]	; (a48c <set_arm_clock+0x2b4>)
    a426:	f8df 8070 	ldr.w	r8, [pc, #112]	; a498 <set_arm_clock+0x2c0>
    a42a:	fb00 f003 	mul.w	r0, r0, r3
    a42e:	ea43 0808 	orr.w	r8, r3, r8
    a432:	e76c      	b.n	a30e <set_arm_clock+0x136>
    a434:	1f78a400 	.word	0x1f78a400
    a438:	400fc000 	.word	0x400fc000
    a43c:	40080000 	.word	0x40080000
    a440:	23c34600 	.word	0x23c34600
    a444:	dc3cba00 	.word	0xdc3cba00
    a448:	004cb223 	.word	0x004cb223
    a44c:	51eb851f 	.word	0x51eb851f
    a450:	016e3600 	.word	0x016e3600
    a454:	400d8000 	.word	0x400d8000
    a458:	80003040 	.word	0x80003040
    a45c:	269fb1ff 	.word	0x269fb1ff
    a460:	005b8d80 	.word	0x005b8d80
    a464:	165e9f81 	.word	0x165e9f81
    a468:	269fb200 	.word	0x269fb200
    a46c:	8001307f 	.word	0x8001307f
    a470:	08f0d17f 	.word	0x08f0d17f
    a474:	00e5109f 	.word	0x00e5109f
    a478:	431bde83 	.word	0x431bde83
    a47c:	20001e70 	.word	0x20001e70
    a480:	20001e6c 	.word	0x20001e6c
    a484:	20002c10 	.word	0x20002c10
    a488:	4d3f6400 	.word	0x4d3f6400
    a48c:	00b71b00 	.word	0x00b71b00
    a490:	80002036 	.word	0x80002036
    a494:	8000206c 	.word	0x8000206c
    a498:	80002000 	.word	0x80002000

0000a49c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    a49c:	2800      	cmp	r0, #0
    a49e:	d057      	beq.n	a550 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a4a0:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    a4a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4a6:	b085      	sub	sp, #20
    a4a8:	4683      	mov	fp, r0
    a4aa:	4c2a      	ldr	r4, [pc, #168]	; (a554 <delay+0xb8>)
    a4ac:	4d2a      	ldr	r5, [pc, #168]	; (a558 <delay+0xbc>)
    a4ae:	4e2b      	ldr	r6, [pc, #172]	; (a55c <delay+0xc0>)
    a4b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a4b4:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a4b8:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    a4ba:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a4bc:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    a4c0:	2900      	cmp	r1, #0
    a4c2:	d1f7      	bne.n	a4b4 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a4c4:	4f26      	ldr	r7, [pc, #152]	; (a560 <delay+0xc4>)
    a4c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
    a4ca:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    a4cc:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a4ce:	4a25      	ldr	r2, [pc, #148]	; (a564 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    a4d0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a4d4:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a4d6:	6812      	ldr	r2, [r2, #0]
    a4d8:	2701      	movs	r7, #1
    a4da:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    a4de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a4e2:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    a4e4:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a4e6:	428b      	cmp	r3, r1
    a4e8:	bf08      	it	eq
    a4ea:	4542      	cmpeq	r2, r8
    a4ec:	bf2c      	ite	cs
    a4ee:	46c2      	movcs	sl, r8
    a4f0:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    a4f2:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a4f6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a4fa:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    a4fc:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a4fe:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    a502:	2b00      	cmp	r3, #0
    a504:	d1f7      	bne.n	a4f6 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a506:	9801      	ldr	r0, [sp, #4]
    a508:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    a50a:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a50c:	4815      	ldr	r0, [pc, #84]	; (a564 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a50e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a512:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a514:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a518:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    a51c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a520:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a524:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    a526:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a528:	4299      	cmp	r1, r3
    a52a:	bf08      	it	eq
    a52c:	4540      	cmpeq	r0, r8
    a52e:	bf2c      	ite	cs
    a530:	4643      	movcs	r3, r8
    a532:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    a534:	441a      	add	r2, r3
    a536:	4572      	cmp	r2, lr
    a538:	d307      	bcc.n	a54a <delay+0xae>
			if (--msec == 0) return;
    a53a:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    a53e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    a542:	d1d8      	bne.n	a4f6 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    a544:	b005      	add	sp, #20
    a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    a54a:	f001 ff71 	bl	c430 <yield>
	}
    a54e:	e7d2      	b.n	a4f6 <delay+0x5a>
    a550:	4770      	bx	lr
    a552:	bf00      	nop
    a554:	20002ed4 	.word	0x20002ed4
    a558:	20002c14 	.word	0x20002c14
    a55c:	20002c0c 	.word	0x20002c0c
    a560:	e0001004 	.word	0xe0001004
    a564:	20002c10 	.word	0x20002c10

0000a568 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    a568:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    a56c:	4a12      	ldr	r2, [pc, #72]	; (a5b8 <micros+0x50>)
    a56e:	2601      	movs	r6, #1
    a570:	4d12      	ldr	r5, [pc, #72]	; (a5bc <micros+0x54>)
    a572:	4c13      	ldr	r4, [pc, #76]	; (a5c0 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a574:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a578:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    a57a:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a57c:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    a580:	2b00      	cmp	r3, #0
    a582:	d1f7      	bne.n	a574 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a584:	4a0f      	ldr	r2, [pc, #60]	; (a5c4 <micros+0x5c>)
    a586:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a588:	4f0f      	ldr	r7, [pc, #60]	; (a5c8 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    a58a:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    a58c:	f04f 0900 	mov.w	r9, #0
    a590:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a594:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    a596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a59a:	4599      	cmp	r9, r3
    a59c:	fba2 6706 	umull	r6, r7, r2, r6
    a5a0:	bf08      	it	eq
    a5a2:	45b8      	cmpeq	r8, r7
    a5a4:	463c      	mov	r4, r7
    a5a6:	bf2c      	ite	cs
    a5a8:	463c      	movcs	r4, r7
    a5aa:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    a5ac:	fb00 4001 	mla	r0, r0, r1, r4
    a5b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    a5b4:	4770      	bx	lr
    a5b6:	bf00      	nop
    a5b8:	20002ed4 	.word	0x20002ed4
    a5bc:	20002c14 	.word	0x20002c14
    a5c0:	20002c0c 	.word	0x20002c0c
    a5c4:	e0001004 	.word	0xe0001004
    a5c8:	20002c10 	.word	0x20002c10

0000a5cc <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    a5cc:	0100      	lsls	r0, r0, #4
    a5ce:	4b07      	ldr	r3, [pc, #28]	; (a5ec <digitalWrite.part.0+0x20>)
    a5d0:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    a5d2:	581b      	ldr	r3, [r3, r0]
	mask = p->mask;
    a5d4:	68d2      	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    a5d6:	6858      	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    a5d8:	4210      	tst	r0, r2
    a5da:	d002      	beq.n	a5e2 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    a5dc:	b911      	cbnz	r1, a5e4 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    a5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    a5e2:	4770      	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    a5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    a5e8:	4770      	bx	lr
    a5ea:	bf00      	nop
    a5ec:	20001854 	.word	0x20001854

0000a5f0 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    a5f0:	0100      	lsls	r0, r0, #4
    a5f2:	4b05      	ldr	r3, [pc, #20]	; (a608 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    a5f4:	581a      	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    a5f6:	1819      	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    a5f8:	6892      	ldr	r2, [r2, #8]
    a5fa:	68cb      	ldr	r3, [r1, #12]
    a5fc:	421a      	tst	r2, r3
}
    a5fe:	bf14      	ite	ne
    a600:	2001      	movne	r0, #1
    a602:	2000      	moveq	r0, #0
    a604:	4770      	bx	lr
    a606:	bf00      	nop
    a608:	20001854 	.word	0x20001854

0000a60c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    a60c:	2827      	cmp	r0, #39	; 0x27
    a60e:	d801      	bhi.n	a614 <digitalWrite+0x8>
    a610:	f7ff bfdc 	b.w	a5cc <digitalWrite.part.0>
    a614:	4770      	bx	lr
    a616:	bf00      	nop

0000a618 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    a618:	2827      	cmp	r0, #39	; 0x27
    a61a:	d801      	bhi.n	a620 <digitalRead+0x8>
    a61c:	f7ff bfe8 	b.w	a5f0 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    a620:	2000      	movs	r0, #0
    a622:	4770      	bx	lr

0000a624 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    a624:	2827      	cmp	r0, #39	; 0x27
    a626:	d81c      	bhi.n	a662 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    a628:	0100      	lsls	r0, r0, #4
    a62a:	4a1a      	ldr	r2, [pc, #104]	; (a694 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a62c:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    a62e:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a632:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    a634:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a636:	d015      	beq.n	a664 <pinMode+0x40>
    a638:	2904      	cmp	r1, #4
    a63a:	d013      	beq.n	a664 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a63c:	68dc      	ldr	r4, [r3, #12]
    a63e:	6842      	ldr	r2, [r0, #4]
    a640:	ea22 0204 	bic.w	r2, r2, r4
    a644:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a646:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    a648:	b1e9      	cbz	r1, a686 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    a64a:	2902      	cmp	r1, #2
    a64c:	d01e      	beq.n	a68c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    a64e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a650:	685b      	ldr	r3, [r3, #4]
}
    a652:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    a656:	bf0c      	ite	eq
    a658:	490f      	ldreq	r1, [pc, #60]	; (a698 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    a65a:	4910      	ldrne	r1, [pc, #64]	; (a69c <pinMode+0x78>)
    a65c:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    a65e:	2215      	movs	r2, #21
    a660:	601a      	str	r2, [r3, #0]
}
    a662:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a664:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    a666:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a668:	6844      	ldr	r4, [r0, #4]
    a66a:	ea42 0204 	orr.w	r2, r2, r4
    a66e:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a670:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    a672:	d008      	beq.n	a686 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    a674:	f640 0138 	movw	r1, #2104	; 0x838
    a678:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a67a:	685b      	ldr	r3, [r3, #4]
    a67c:	2215      	movs	r2, #21
}
    a67e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a682:	601a      	str	r2, [r3, #0]
}
    a684:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a686:	2138      	movs	r1, #56	; 0x38
    a688:	6011      	str	r1, [r2, #0]
    a68a:	e7f6      	b.n	a67a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    a68c:	4904      	ldr	r1, [pc, #16]	; (a6a0 <pinMode+0x7c>)
    a68e:	6011      	str	r1, [r2, #0]
    a690:	e7f3      	b.n	a67a <pinMode+0x56>
    a692:	bf00      	nop
    a694:	20001854 	.word	0x20001854
    a698:	00013038 	.word	0x00013038
    a69c:	00010038 	.word	0x00010038
    a6a0:	0001f038 	.word	0x0001f038

0000a6a4 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    a6a4:	4b15      	ldr	r3, [pc, #84]	; (a6fc <flash_wait+0x58>)
	FLEXSPI_LUT61 = 0;
    a6a6:	2000      	movs	r0, #0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    a6a8:	2101      	movs	r1, #1
    a6aa:	461a      	mov	r2, r3
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    a6ac:	b4f0      	push	{r4, r5, r6, r7}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    a6ae:	4f14      	ldr	r7, [pc, #80]	; (a700 <flash_wait+0x5c>)
	FLEXSPI_LUT61 = 0;
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
    a6b0:	4606      	mov	r6, r0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    a6b2:	4d14      	ldr	r5, [pc, #80]	; (a704 <flash_wait+0x60>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    a6b4:	4c14      	ldr	r4, [pc, #80]	; (a708 <flash_wait+0x64>)
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    a6b6:	f8c3 72f0 	str.w	r7, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    a6ba:	f8c3 02f4 	str.w	r0, [r3, #756]	; 0x2f4
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    a6be:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    a6c2:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    a6c6:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a6ca:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    a6ce:	6953      	ldr	r3, [r2, #20]
    a6d0:	07d8      	lsls	r0, r3, #31
    a6d2:	d403      	bmi.n	a6dc <flash_wait+0x38>
			asm("nop");
    a6d4:	bf00      	nop
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    a6d6:	6953      	ldr	r3, [r2, #20]
    a6d8:	07db      	lsls	r3, r3, #31
    a6da:	d5fb      	bpl.n	a6d4 <flash_wait+0x30>
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    a6dc:	7823      	ldrb	r3, [r4, #0]
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a6de:	4807      	ldr	r0, [pc, #28]	; (a6fc <flash_wait+0x58>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    a6e0:	07df      	lsls	r7, r3, #31
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a6e2:	6151      	str	r1, [r2, #20]
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    a6e4:	d4eb      	bmi.n	a6be <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    a6e6:	6803      	ldr	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    a6e8:	4602      	mov	r2, r0
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    a6ea:	f043 0301 	orr.w	r3, r3, #1
    a6ee:	6003      	str	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    a6f0:	6813      	ldr	r3, [r2, #0]
    a6f2:	07db      	lsls	r3, r3, #31
    a6f4:	d4fc      	bmi.n	a6f0 <flash_wait+0x4c>
	__enable_irq();
    a6f6:	b662      	cpsie	i
}
    a6f8:	bcf0      	pop	{r4, r5, r6, r7}
    a6fa:	4770      	bx	lr
    a6fc:	402a8000 	.word	0x402a8000
    a700:	24010405 	.word	0x24010405
    a704:	000f0001 	.word	0x000f0001
    a708:	402a8100 	.word	0x402a8100

0000a70c <flash_write.constprop.0>:

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
    a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a70e:	460d      	mov	r5, r1
{
	__disable_irq();
    a710:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    a712:	4a2c      	ldr	r2, [pc, #176]	; (a7c4 <flash_write.constprop.0+0xb8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
    a714:	2400      	movs	r4, #0

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    a716:	4e2c      	ldr	r6, [pc, #176]	; (a7c8 <flash_write.constprop.0+0xbc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    a718:	2302      	movs	r3, #2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    a71a:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    a71e:	f44f 2770 	mov.w	r7, #983040	; 0xf0000

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    a722:	6196      	str	r6, [r2, #24]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a724:	2601      	movs	r6, #1
// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    a726:	61d3      	str	r3, [r2, #28]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a728:	f020 031f 	bic.w	r3, r0, #31
	FLEXSPI_IPCR0 = 0;
    a72c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    a730:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    a734:	1c81      	adds	r1, r0, #2
	FLEXSPI_LUT61 = 0;
    a736:	f8c2 42f4 	str.w	r4, [r2, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    a73a:	f8c2 42f8 	str.w	r4, [r2, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    a73e:	f8c2 42fc 	str.w	r4, [r2, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    a742:	f8c2 70a4 	str.w	r7, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a746:	f8c2 60b0 	str.w	r6, [r2, #176]	; 0xb0
	asm("dsb");
    a74a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a74e:	4a1f      	ldr	r2, [pc, #124]	; (a7cc <flash_write.constprop.0+0xc0>)
    a750:	6013      	str	r3, [r2, #0]
		location += 32;
    a752:	3320      	adds	r3, #32
	} while (location < end_addr);
    a754:	4299      	cmp	r1, r3
    a756:	d8fb      	bhi.n	a750 <flash_write.constprop.0+0x44>
	asm("dsb");
    a758:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a75c:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    a760:	4a18      	ldr	r2, [pc, #96]	; (a7c4 <flash_write.constprop.0+0xb8>)
    a762:	6953      	ldr	r3, [r2, #20]
    a764:	4917      	ldr	r1, [pc, #92]	; (a7c4 <flash_write.constprop.0+0xb8>)
    a766:	07df      	lsls	r7, r3, #31
    a768:	d5fb      	bpl.n	a762 <flash_write.constprop.0+0x56>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a76a:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    a76c:	4a18      	ldr	r2, [pc, #96]	; (a7d0 <flash_write.constprop.0+0xc4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
    a76e:	f3c0 0016 	ubfx	r0, r0, #0, #23
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    a772:	f242 2701 	movw	r7, #8705	; 0x2201
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    a776:	4e17      	ldr	r6, [pc, #92]	; (a7d4 <flash_write.constprop.0+0xc8>)
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    a778:	460c      	mov	r4, r1
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a77a:	614b      	str	r3, [r1, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    a77c:	f8c1 22f0 	str.w	r2, [r1, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a780:	2202      	movs	r2, #2
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    a782:	f8c1 72f4 	str.w	r7, [r1, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    a786:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
    a78a:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    a78e:	f8c1 60a4 	str.w	r6, [r1, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a792:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
    a796:	e001      	b.n	a79c <flash_write.constprop.0+0x90>
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
    a798:	065e      	lsls	r6, r3, #25
    a79a:	d409      	bmi.n	a7b0 <flash_write.constprop.0+0xa4>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    a79c:	6963      	ldr	r3, [r4, #20]
    a79e:	4909      	ldr	r1, [pc, #36]	; (a7c4 <flash_write.constprop.0+0xb8>)
    a7a0:	07d8      	lsls	r0, r3, #31
    a7a2:	d5f9      	bpl.n	a798 <flash_write.constprop.0+0x8c>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    a7a4:	2341      	movs	r3, #65	; 0x41
    a7a6:	614b      	str	r3, [r1, #20]
	flash_wait();
}
    a7a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
	flash_wait();
    a7ac:	f7ff bf7a 	b.w	a6a4 <flash_wait>
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
    a7b0:	b122      	cbz	r2, a7bc <flash_write.constprop.0+0xb0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    a7b2:	4629      	mov	r1, r5
    a7b4:	4808      	ldr	r0, [pc, #32]	; (a7d8 <flash_write.constprop.0+0xcc>)
				src += wrlen;
    a7b6:	4415      	add	r5, r2
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    a7b8:	f7ff fc74 	bl	a0a4 <memcpy>
				src += wrlen;
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    a7bc:	2340      	movs	r3, #64	; 0x40
    a7be:	2200      	movs	r2, #0
    a7c0:	6163      	str	r3, [r4, #20]
    a7c2:	e7eb      	b.n	a79c <flash_write.constprop.0+0x90>
    a7c4:	402a8000 	.word	0x402a8000
    a7c8:	5af05af0 	.word	0x5af05af0
    a7cc:	e000ef5c 	.word	0xe000ef5c
    a7d0:	08180432 	.word	0x08180432
    a7d4:	000f0002 	.word	0x000f0002
    a7d8:	402a8180 	.word	0x402a8180

0000a7dc <eeprom_initialize>:

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    a7dc:	b4f0      	push	{r4, r5, r6, r7}
    a7de:	4e0e      	ldr	r6, [pc, #56]	; (a818 <eeprom_initialize+0x3c>)
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    a7e0:	f64f 75ff 	movw	r5, #65535	; 0xffff

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    a7e4:	4c0d      	ldr	r4, [pc, #52]	; (a81c <eeprom_initialize+0x40>)
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    a7e6:	4f0e      	ldr	r7, [pc, #56]	; (a820 <eeprom_initialize+0x44>)
    a7e8:	f5a4 5380 	sub.w	r3, r4, #4096	; 0x1000
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
    a7ec:	2200      	movs	r2, #0
    a7ee:	e002      	b.n	a7f6 <eeprom_initialize+0x1a>
		do {
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
    a7f0:	429c      	cmp	r4, r3
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
			index++;
    a7f2:	b282      	uxth	r2, r0
		} while (p < end);
    a7f4:	d904      	bls.n	a800 <eeprom_initialize+0x24>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    a7f6:	f833 1b02 	ldrh.w	r1, [r3], #2
			index++;
    a7fa:	1c50      	adds	r0, r2, #1
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    a7fc:	42a9      	cmp	r1, r5
    a7fe:	d1f7      	bne.n	a7f0 <eeprom_initialize+0x14>
    a800:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			index++;
		} while (p < end);
		sector_index[sector] = index;
    a804:	f826 2f02 	strh.w	r2, [r6, #2]!

void eeprom_initialize(void)
{
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    a808:	42bc      	cmp	r4, r7
    a80a:	d1ed      	bne.n	a7e8 <eeprom_initialize+0xc>
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
		sector_index[sector] = index;
	}
	initialized = 1;
    a80c:	4b05      	ldr	r3, [pc, #20]	; (a824 <eeprom_initialize+0x48>)
    a80e:	2201      	movs	r2, #1
    a810:	701a      	strb	r2, [r3, #0]
}
    a812:	bcf0      	pop	{r4, r5, r6, r7}
    a814:	4770      	bx	lr
    a816:	bf00      	nop
    a818:	20002c16 	.word	0x20002c16
    a81c:	601f1000 	.word	0x601f1000
    a820:	60200000 	.word	0x60200000
    a824:	20002c36 	.word	0x20002c36

0000a828 <eeprom_read_byte>:
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
    a828:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    a82c:	d301      	bcc.n	a832 <eeprom_read_byte+0xa>
    a82e:	20ff      	movs	r0, #255	; 0xff
	while (p < end) {
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    a830:	4770      	bx	lr
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    a832:	4b15      	ldr	r3, [pc, #84]	; (a888 <eeprom_read_byte+0x60>)
	}
	initialized = 1;
}

uint8_t eeprom_read_byte(const uint8_t *addr_ptr)
{
    a834:	b570      	push	{r4, r5, r6, lr}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    a836:	781b      	ldrb	r3, [r3, #0]
    a838:	4604      	mov	r4, r0
    a83a:	b303      	cbz	r3, a87e <eeprom_read_byte+0x56>
	sector = (addr >> 2) % FLASH_SECTORS;
    a83c:	08a5      	lsrs	r5, r4, #2
    a83e:	4913      	ldr	r1, [pc, #76]	; (a88c <eeprom_read_byte+0x64>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a840:	4b13      	ldr	r3, [pc, #76]	; (a890 <eeprom_read_byte+0x68>)
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    a842:	f004 0003 	and.w	r0, r4, #3
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    a846:	fba1 2105 	umull	r2, r1, r1, r5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    a84a:	4c12      	ldr	r4, [pc, #72]	; (a894 <eeprom_read_byte+0x6c>)
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    a84c:	08c9      	lsrs	r1, r1, #3
    a84e:	ebc1 1601 	rsb	r6, r1, r1, lsl #4
    a852:	460a      	mov	r2, r1
    a854:	1ba9      	subs	r1, r5, r6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    a856:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    a85a:	20ff      	movs	r0, #255	; 0xff
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a85c:	440b      	add	r3, r1
	end = p + sector_index[sector];
    a85e:	f834 5011 	ldrh.w	r5, [r4, r1, lsl #1]
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a862:	031b      	lsls	r3, r3, #12
	end = p + sector_index[sector];
    a864:	eb03 0545 	add.w	r5, r3, r5, lsl #1
	while (p < end) {
    a868:	42ab      	cmp	r3, r5
    a86a:	d20b      	bcs.n	a884 <eeprom_read_byte+0x5c>
		uint32_t val = *p++;
    a86c:	f833 1b02 	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    a870:	b2cc      	uxtb	r4, r1
    a872:	42a2      	cmp	r2, r4
    a874:	bf08      	it	eq
    a876:	0a08      	lsreq	r0, r1, #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    a878:	429d      	cmp	r5, r3
    a87a:	d8f7      	bhi.n	a86c <eeprom_read_byte+0x44>
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    a87c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    a87e:	f7ff ffad 	bl	a7dc <eeprom_initialize>
    a882:	e7db      	b.n	a83c <eeprom_read_byte+0x14>
    a884:	bd70      	pop	{r4, r5, r6, pc}
    a886:	bf00      	nop
    a888:	20002c36 	.word	0x20002c36
    a88c:	88888889 	.word	0x88888889
    a890:	000601f0 	.word	0x000601f0
    a894:	20002c18 	.word	0x20002c18

0000a898 <eeprom_write_byte>:
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
    a898:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    a89c:	f080 80ac 	bcs.w	a9f8 <eeprom_write_byte+0x160>
	if (!initialized) eeprom_initialize();
    a8a0:	4b5f      	ldr	r3, [pc, #380]	; (aa20 <eeprom_write_byte+0x188>)
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    a8a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    a8a6:	781b      	ldrb	r3, [r3, #0]
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    a8a8:	b0c3      	sub	sp, #268	; 0x10c
    a8aa:	4689      	mov	r9, r1
    a8ac:	4680      	mov	r8, r0
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	f000 80b0 	beq.w	aa14 <eeprom_write_byte+0x17c>

	sector = (addr >> 2) % FLASH_SECTORS; 
    a8b4:	ea4f 0398 	mov.w	r3, r8, lsr #2
    a8b8:	4d5a      	ldr	r5, [pc, #360]	; (aa24 <eeprom_write_byte+0x18c>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    a8ba:	f008 0003 	and.w	r0, r8, #3
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a8be:	4f5a      	ldr	r7, [pc, #360]	; (aa28 <eeprom_write_byte+0x190>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    a8c0:	fba5 2503 	umull	r2, r5, r5, r3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    a8c4:	4e59      	ldr	r6, [pc, #356]	; (aa2c <eeprom_write_byte+0x194>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    a8c6:	08ed      	lsrs	r5, r5, #3
    a8c8:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
    a8cc:	46a8      	mov	r8, r5
    a8ce:	1a9d      	subs	r5, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    a8d0:	ea40 0888 	orr.w	r8, r0, r8, lsl #2
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a8d4:	442f      	add	r7, r5
	end = p + sector_index[sector];
    a8d6:	f836 4015 	ldrh.w	r4, [r6, r5, lsl #1]

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a8da:	033f      	lsls	r7, r7, #12
	end = p + sector_index[sector];
    a8dc:	eb07 0044 	add.w	r0, r7, r4, lsl #1
	while (p < end) {
    a8e0:	4287      	cmp	r7, r0
    a8e2:	f080 809a 	bcs.w	aa1a <eeprom_write_byte+0x182>
    a8e6:	463b      	mov	r3, r7
    a8e8:	f04f 0eff 	mov.w	lr, #255	; 0xff
		uint16_t val = *p++;
    a8ec:	f833 2b02 	ldrh.w	r2, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    a8f0:	b2d1      	uxtb	r1, r2
    a8f2:	4588      	cmp	r8, r1
    a8f4:	bf08      	it	eq
    a8f6:	ea4f 2e12 	moveq.w	lr, r2, lsr #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    a8fa:	4298      	cmp	r0, r3
    a8fc:	d8f6      	bhi.n	a8ec <eeprom_write_byte+0x54>
		uint16_t val = *p++;
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
    a8fe:	45f1      	cmp	r9, lr
    a900:	d077      	beq.n	a9f2 <eeprom_write_byte+0x15a>
	if (sector_index[sector] < 2048) {
    a902:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    a906:	d378      	bcc.n	a9fa <eeprom_write_byte+0x162>
		uint16_t newdata = offset | (data << 8);
		flash_write(end, &newdata, 2);
		sector_index[sector] = sector_index[sector] + 1;
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
    a908:	ac02      	add	r4, sp, #8
    a90a:	f44f 7280 	mov.w	r2, #256	; 0x100
    a90e:	21ff      	movs	r1, #255	; 0xff
    a910:	4620      	mov	r0, r4
    a912:	f002 fb6d 	bl	cff0 <memset>
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
    a916:	f507 5180 	add.w	r1, r7, #4096	; 0x1000

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    a91a:	463a      	mov	r2, r7
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
			uint16_t val = *p++;
    a91c:	f832 3b02 	ldrh.w	r3, [r2], #2
			buf[val & 255] = val >> 8;
    a920:	b2d8      	uxtb	r0, r3
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    a922:	4291      	cmp	r1, r2
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
    a924:	ea4f 2313 	mov.w	r3, r3, lsr #8
    a928:	5423      	strb	r3, [r4, r0]
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    a92a:	d8f7      	bhi.n	a91c <eeprom_write_byte+0x84>
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
    a92c:	f804 9008 	strb.w	r9, [r4, r8]
}

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
    a930:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    a932:	4b3f      	ldr	r3, [pc, #252]	; (aa30 <eeprom_write_byte+0x198>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    a934:	2200      	movs	r2, #0

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    a936:	483f      	ldr	r0, [pc, #252]	; (aa34 <eeprom_write_byte+0x19c>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    a938:	f04f 0c02 	mov.w	ip, #2
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    a93c:	f240 4e06 	movw	lr, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    a940:	f44f 2470 	mov.w	r4, #983040	; 0xf0000

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    a944:	6198      	str	r0, [r3, #24]
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a946:	2001      	movs	r0, #1
// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    a948:	f8c3 c01c 	str.w	ip, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    a94c:	f8c3 e2f0 	str.w	lr, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    a950:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    a954:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    a958:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    a95c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    a960:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a964:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    a968:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a96c:	4a32      	ldr	r2, [pc, #200]	; (aa38 <eeprom_write_byte+0x1a0>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a96e:	463b      	mov	r3, r7
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    a970:	6013      	str	r3, [r2, #0]
		location += 32;
    a972:	3320      	adds	r3, #32
	} while (location < end_addr);
    a974:	4299      	cmp	r1, r3
    a976:	d8fb      	bhi.n	a970 <eeprom_write_byte+0xd8>
	asm("dsb");
    a978:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a97c:	f3bf 8f6f 	isb	sy
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    a980:	492b      	ldr	r1, [pc, #172]	; (aa30 <eeprom_write_byte+0x198>)
    a982:	694b      	ldr	r3, [r1, #20]
    a984:	4a2a      	ldr	r2, [pc, #168]	; (aa30 <eeprom_write_byte+0x198>)
    a986:	07d8      	lsls	r0, r3, #31
    a988:	d5fb      	bpl.n	a982 <eeprom_write_byte+0xea>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
    a98a:	4b2c      	ldr	r3, [pc, #176]	; (aa3c <eeprom_write_byte+0x1a4>)
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a98c:	2001      	movs	r0, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    a98e:	f8df e0b0 	ldr.w	lr, [pc, #176]	; aa40 <eeprom_write_byte+0x1a8>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    a992:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
    a996:	403b      	ands	r3, r7
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    a998:	4611      	mov	r1, r2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a99a:	6150      	str	r0, [r2, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    a99c:	f8c2 e2f0 	str.w	lr, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
    a9a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    a9a4:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    a9a8:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    a9ac:	694b      	ldr	r3, [r1, #20]
    a9ae:	4a20      	ldr	r2, [pc, #128]	; (aa30 <eeprom_write_byte+0x198>)
    a9b0:	07db      	lsls	r3, r3, #31
    a9b2:	d5fb      	bpl.n	a9ac <eeprom_write_byte+0x114>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a9b4:	2301      	movs	r3, #1
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    a9b6:	2400      	movs	r4, #0
    a9b8:	f10d 0907 	add.w	r9, sp, #7
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    a9bc:	6153      	str	r3, [r2, #20]
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
    a9be:	46a0      	mov	r8, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x007FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
    a9c0:	f7ff fe70 	bl	a6a4 <flash_wait>
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    a9c4:	f819 3f01 	ldrb.w	r3, [r9, #1]!
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
    a9c8:	eb07 0048 	add.w	r0, r7, r8, lsl #1
    a9cc:	f10d 0106 	add.w	r1, sp, #6
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    a9d0:	2bff      	cmp	r3, #255	; 0xff
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    a9d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    a9d6:	f104 0401 	add.w	r4, r4, #1
			if (buf[i] != 0xFF) {
    a9da:	d005      	beq.n	a9e8 <eeprom_write_byte+0x150>
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
    a9dc:	f108 0801 	add.w	r8, r8, #1
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    a9e0:	f8ad 3006 	strh.w	r3, [sp, #6]
				flash_write(p + index, &newval, 2);
    a9e4:	f7ff fe92 	bl	a70c <flash_write.constprop.0>
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    a9e8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    a9ec:	d1ea      	bne.n	a9c4 <eeprom_write_byte+0x12c>
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
			}
		}
		sector_index[sector] = index;
    a9ee:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
	}
}
    a9f2:	b043      	add	sp, #268	; 0x10c
    a9f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a9f8:	4770      	bx	lr
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    a9fa:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		flash_write(end, &newdata, 2);
    a9fe:	a902      	add	r1, sp, #8
		sector_index[sector] = sector_index[sector] + 1;
    aa00:	3401      	adds	r4, #1
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    aa02:	f8ad 8008 	strh.w	r8, [sp, #8]
		flash_write(end, &newdata, 2);
    aa06:	f7ff fe81 	bl	a70c <flash_write.constprop.0>
		sector_index[sector] = sector_index[sector] + 1;
    aa0a:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
				index = index + 1;
			}
		}
		sector_index[sector] = index;
	}
}
    aa0e:	b043      	add	sp, #268	; 0x10c
    aa10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    aa14:	f7ff fee2 	bl	a7dc <eeprom_initialize>
    aa18:	e74c      	b.n	a8b4 <eeprom_write_byte+0x1c>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
    aa1a:	f04f 0eff 	mov.w	lr, #255	; 0xff
    aa1e:	e76e      	b.n	a8fe <eeprom_write_byte+0x66>
    aa20:	20002c36 	.word	0x20002c36
    aa24:	88888889 	.word	0x88888889
    aa28:	000601f0 	.word	0x000601f0
    aa2c:	20002c18 	.word	0x20002c18
    aa30:	402a8000 	.word	0x402a8000
    aa34:	5af05af0 	.word	0x5af05af0
    aa38:	e000ef5c 	.word	0xe000ef5c
    aa3c:	007ff000 	.word	0x007ff000
    aa40:	08180420 	.word	0x08180420

0000aa44 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    aa44:	2004      	movs	r0, #4
    aa46:	4671      	mov	r1, lr
    aa48:	4208      	tst	r0, r1
    aa4a:	d003      	beq.n	aa54 <_MSP>
    aa4c:	f3ef 8009 	mrs	r0, PSP
    aa50:	f000 b808 	b.w	aa64 <HardFault_HandlerC>

0000aa54 <_MSP>:
    aa54:	f3ef 8008 	mrs	r0, MSP
    aa58:	f000 b804 	b.w	aa64 <HardFault_HandlerC>

0000aa5c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    aa5c:	4770      	bx	lr
    aa5e:	bf00      	nop

0000aa60 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    aa60:	4770      	bx	lr
    aa62:	bf00      	nop

0000aa64 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    aa64:	4b1b      	ldr	r3, [pc, #108]	; (aad4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    aa66:	2105      	movs	r1, #5
    aa68:	4a1b      	ldr	r2, [pc, #108]	; (aad8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    aa6a:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    aa6c:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    aa6e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    aa72:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    aa74:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    aa78:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    aa7a:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    aa7c:	4c17      	ldr	r4, [pc, #92]	; (aadc <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    aa7e:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    aa80:	4817      	ldr	r0, [pc, #92]	; (aae0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    aa82:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    aa84:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    aa88:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    aa8c:	6823      	ldr	r3, [r4, #0]
    aa8e:	4283      	cmp	r3, r0
    aa90:	d902      	bls.n	aa98 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    aa92:	4814      	ldr	r0, [pc, #80]	; (aae4 <HardFault_HandlerC+0x80>)
    aa94:	f7ff fba0 	bl	a1d8 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    aa98:	4d0e      	ldr	r5, [pc, #56]	; (aad4 <HardFault_HandlerC+0x70>)
    aa9a:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    aa9c:	2000      	movs	r0, #0
    aa9e:	4a12      	ldr	r2, [pc, #72]	; (aae8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    aaa0:	4912      	ldr	r1, [pc, #72]	; (aaec <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    aaa2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    aaa6:	9001      	str	r0, [sp, #4]
    aaa8:	9b01      	ldr	r3, [sp, #4]
    aaaa:	4293      	cmp	r3, r2
    aaac:	d805      	bhi.n	aaba <HardFault_HandlerC+0x56>
    aaae:	9b01      	ldr	r3, [sp, #4]
    aab0:	3301      	adds	r3, #1
    aab2:	9301      	str	r3, [sp, #4]
    aab4:	9b01      	ldr	r3, [sp, #4]
    aab6:	4293      	cmp	r3, r2
    aab8:	d9f9      	bls.n	aaae <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    aaba:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    aabe:	9001      	str	r0, [sp, #4]
    aac0:	9b01      	ldr	r3, [sp, #4]
    aac2:	428b      	cmp	r3, r1
    aac4:	d8ed      	bhi.n	aaa2 <HardFault_HandlerC+0x3e>
    aac6:	9b01      	ldr	r3, [sp, #4]
    aac8:	3301      	adds	r3, #1
    aaca:	9301      	str	r3, [sp, #4]
    aacc:	9b01      	ldr	r3, [sp, #4]
    aace:	428b      	cmp	r3, r1
    aad0:	d9f9      	bls.n	aac6 <HardFault_HandlerC+0x62>
    aad2:	e7e6      	b.n	aaa2 <HardFault_HandlerC+0x3e>
    aad4:	401bc000 	.word	0x401bc000
    aad8:	401f8000 	.word	0x401f8000
    aadc:	20001e70 	.word	0x20001e70
    aae0:	23c345ff 	.word	0x23c345ff
    aae4:	11e1a300 	.word	0x11e1a300
    aae8:	000f423f 	.word	0x000f423f
    aaec:	0089543f 	.word	0x0089543f

0000aaf0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    aaf0:	4a09      	ldr	r2, [pc, #36]	; (ab18 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    aaf2:	b508      	push	{r3, lr}
        char *prev = __brkval;
    aaf4:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    aaf6:	b120      	cbz	r0, ab02 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    aaf8:	4418      	add	r0, r3
    aafa:	4908      	ldr	r1, [pc, #32]	; (ab1c <_sbrk+0x2c>)
    aafc:	4288      	cmp	r0, r1
    aafe:	d802      	bhi.n	ab06 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    ab00:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    ab02:	4618      	mov	r0, r3
    ab04:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    ab06:	f001 fe9d 	bl	c844 <__errno>
    ab0a:	220c      	movs	r2, #12
                        return (void *)-1;
    ab0c:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    ab10:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ab12:	4618      	mov	r0, r3
    ab14:	bd08      	pop	{r3, pc}
    ab16:	bf00      	nop
    ab18:	20001e74 	.word	0x20001e74
    ab1c:	20280000 	.word	0x20280000

0000ab20 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    ab20:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    ab22:	4a06      	ldr	r2, [pc, #24]	; (ab3c <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    ab24:	2107      	movs	r1, #7
    ab26:	4b06      	ldr	r3, [pc, #24]	; (ab40 <Panic_Temp_isr+0x20>)
    ab28:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    ab2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    ab2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ab30:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    ab32:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    ab36:	bf30      	wfi
    ab38:	e7fd      	b.n	ab36 <Panic_Temp_isr+0x16>
    ab3a:	bf00      	nop
    ab3c:	400d4000 	.word	0x400d4000
    ab40:	400ac000 	.word	0x400ac000

0000ab44 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ab44:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    ab46:	b430      	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ab48:	b11b      	cbz	r3, ab52 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ab4a:	6853      	ldr	r3, [r2, #4]
    ab4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ab50:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    ab52:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ab54:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ab56:	b19c      	cbz	r4, ab80 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ab58:	4b10      	ldr	r3, [pc, #64]	; (ab9c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    ab5a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ab5c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    ab60:	420c      	tst	r4, r1
    ab62:	d117      	bne.n	ab94 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ab64:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ab68:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    ab6c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ab70:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    ab74:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ab78:	0464      	lsls	r4, r4, #17
    ab7a:	d5f3      	bpl.n	ab64 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ab7c:	4229      	tst	r1, r5
    ab7e:	d109      	bne.n	ab94 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    ab80:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    ab82:	4c06      	ldr	r4, [pc, #24]	; (ab9c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    ab84:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    ab86:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    ab88:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ab8c:	4319      	orrs	r1, r3
    ab8e:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ab92:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    ab94:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ab96:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ab98:	bc30      	pop	{r4, r5}
    ab9a:	4770      	bx	lr
    ab9c:	402e0000 	.word	0x402e0000

0000aba0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    aba0:	b570      	push	{r4, r5, r6, lr}
    aba2:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    aba4:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    aba6:	b190      	cbz	r0, abce <run_callbacks+0x2e>
    aba8:	4602      	mov	r2, r0
    abaa:	2400      	movs	r4, #0
    abac:	e003      	b.n	abb6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    abae:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    abb0:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    abb2:	2a01      	cmp	r2, #1
    abb4:	d00c      	beq.n	abd0 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    abb6:	6853      	ldr	r3, [r2, #4]
    abb8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    abbc:	d0f7      	beq.n	abae <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    abbe:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    abc0:	b12c      	cbz	r4, abce <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    abc2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    abc4:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    abc6:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    abc8:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    abca:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    abcc:	d1f9      	bne.n	abc2 <run_callbacks+0x22>
    abce:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    abd0:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    abd2:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    abd4:	e7f4      	b.n	abc0 <run_callbacks+0x20>
    abd6:	bf00      	nop

0000abd8 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    abda:	b9f1      	cbnz	r1, ac1a <endpoint0_transmit.constprop.1+0x42>
    abdc:	4c22      	ldr	r4, [pc, #136]	; (ac68 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    abde:	4923      	ldr	r1, [pc, #140]	; (ac6c <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    abe0:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    abe2:	4b23      	ldr	r3, [pc, #140]	; (ac70 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    abe4:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    abe6:	2580      	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    abe8:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    abea:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    abec:	461a      	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    abee:	604d      	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    abf0:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    abf2:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    abf6:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    abf8:	f044 1401 	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    abfc:	4d1d      	ldr	r5, [pc, #116]	; (ac74 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    abfe:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ac02:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    ac06:	f041 0101 	orr.w	r1, r1, #1
    ac0a:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ac0e:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    ac10:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ac14:	2b00      	cmp	r3, #0
    ac16:	d1fb      	bne.n	ac10 <endpoint0_transmit.constprop.1+0x38>
}
    ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac1a:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ac1c:	4b16      	ldr	r3, [pc, #88]	; (ac78 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    ac1e:	4d14      	ldr	r5, [pc, #80]	; (ac70 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ac20:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ac22:	4c11      	ldr	r4, [pc, #68]	; (ac68 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac24:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    ac28:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ac2a:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac2c:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ac2e:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    ac32:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ac34:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ac38:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ac3a:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    ac3e:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ac42:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    ac46:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ac48:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    ac4a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ac4e:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ac52:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ac56:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ac58:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    ac5a:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ac5e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ac62:	2b00      	cmp	r3, #0
    ac64:	d1fb      	bne.n	ac5e <endpoint0_transmit.constprop.1+0x86>
    ac66:	e7ba      	b.n	abde <endpoint0_transmit.constprop.1+0x6>
    ac68:	20005000 	.word	0x20005000
    ac6c:	20004020 	.word	0x20004020
    ac70:	402e0000 	.word	0x402e0000
    ac74:	20002c5c 	.word	0x20002c5c
    ac78:	20004000 	.word	0x20004000

0000ac7c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    ac80:	4cbc      	ldr	r4, [pc, #752]	; (af74 <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    ac82:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    ac84:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    ac88:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    ac8c:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    ac90:	d05e      	beq.n	ad50 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ac92:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ac96:	2b00      	cmp	r3, #0
    ac98:	d055      	beq.n	ad46 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ac9a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    ac9e:	f8df 92fc 	ldr.w	r9, [pc, #764]	; af9c <isr+0x320>
    aca2:	4eb5      	ldr	r6, [pc, #724]	; (af78 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    aca4:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aca6:	46da      	mov	sl, fp
    aca8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    acaa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    acac:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    acb0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    acb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    acb8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    acbc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    acc0:	049f      	lsls	r7, r3, #18
    acc2:	d5f5      	bpl.n	acb0 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    acc4:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    acc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    accc:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    acd0:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    acd4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    acd8:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    acdc:	d1fa      	bne.n	acd4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    acde:	b281      	uxth	r1, r0
    ace0:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    ace4:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    ace8:	42b9      	cmp	r1, r7
    acea:	f200 80a5 	bhi.w	ae38 <isr+0x1bc>
    acee:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    acf2:	f080 81eb 	bcs.w	b0cc <isr+0x450>
    acf6:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    acfa:	f000 816a 	beq.w	afd2 <isr+0x356>
    acfe:	f200 80e4 	bhi.w	aeca <isr+0x24e>
    ad02:	2980      	cmp	r1, #128	; 0x80
    ad04:	f000 8158 	beq.w	afb8 <isr+0x33c>
    ad08:	2982      	cmp	r1, #130	; 0x82
    ad0a:	f040 80d6 	bne.w	aeba <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    ad0e:	b292      	uxth	r2, r2
    ad10:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    ad14:	2907      	cmp	r1, #7
    ad16:	f200 80d0 	bhi.w	aeba <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    ad1a:	0089      	lsls	r1, r1, #2
    ad1c:	4897      	ldr	r0, [pc, #604]	; (af7c <isr+0x300>)
		reply_buffer[0] = 0;
    ad1e:	4f98      	ldr	r7, [pc, #608]	; (af80 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    ad20:	4408      	add	r0, r1
    ad22:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ad24:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    ad26:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    ad28:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ad2a:	f140 820e 	bpl.w	b14a <isr+0x4ce>
    ad2e:	03ca      	lsls	r2, r1, #15
    ad30:	d501      	bpl.n	ad36 <isr+0xba>
			reply_buffer[0] = 1;
    ad32:	2301      	movs	r3, #1
    ad34:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    ad36:	2102      	movs	r1, #2
    ad38:	4891      	ldr	r0, [pc, #580]	; (af80 <isr+0x304>)
    ad3a:	f7ff ff4d 	bl	abd8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ad3e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ad42:	2b00      	cmp	r3, #0
    ad44:	d1b0      	bne.n	aca8 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    ad46:	4a8b      	ldr	r2, [pc, #556]	; (af74 <isr+0x2f8>)
    ad48:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    ad4c:	2b00      	cmp	r3, #0
    ad4e:	d150      	bne.n	adf2 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    ad50:	f018 0f40 	tst.w	r8, #64	; 0x40
    ad54:	d018      	beq.n	ad88 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ad56:	4b87      	ldr	r3, [pc, #540]	; (af74 <isr+0x2f8>)
    ad58:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ad5c:	461a      	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ad5e:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    ad62:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    ad66:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ad6a:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    ad6e:	4b81      	ldr	r3, [pc, #516]	; (af74 <isr+0x2f8>)
    ad70:	2c00      	cmp	r4, #0
    ad72:	d1fa      	bne.n	ad6a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    ad74:	f04f 32ff 	mov.w	r2, #4294967295
    ad78:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    ad7c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    ad80:	f000 fd34 	bl	b7ec <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    ad84:	4b7f      	ldr	r3, [pc, #508]	; (af84 <isr+0x308>)
    ad86:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    ad88:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    ad8c:	d003      	beq.n	ad96 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    ad8e:	4b7e      	ldr	r3, [pc, #504]	; (af88 <isr+0x30c>)
    ad90:	681b      	ldr	r3, [r3, #0]
    ad92:	b103      	cbz	r3, ad96 <isr+0x11a>
    ad94:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    ad96:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    ad9a:	d003      	beq.n	ada4 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    ad9c:	4b7b      	ldr	r3, [pc, #492]	; (af8c <isr+0x310>)
    ad9e:	681b      	ldr	r3, [r3, #0]
    ada0:	b103      	cbz	r3, ada4 <isr+0x128>
    ada2:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    ada4:	f018 0f04 	tst.w	r8, #4
    ada8:	d008      	beq.n	adbc <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    adaa:	4b72      	ldr	r3, [pc, #456]	; (af74 <isr+0x2f8>)
    adac:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    adb0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    adb4:	d03d      	beq.n	ae32 <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    adb6:	4b76      	ldr	r3, [pc, #472]	; (af90 <isr+0x314>)
    adb8:	2201      	movs	r2, #1
    adba:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    adbc:	4b6d      	ldr	r3, [pc, #436]	; (af74 <isr+0x2f8>)
    adbe:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    adc2:	0612      	lsls	r2, r2, #24
    adc4:	d512      	bpl.n	adec <isr+0x170>
    adc6:	f018 0f80 	tst.w	r8, #128	; 0x80
    adca:	d00f      	beq.n	adec <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    adcc:	4971      	ldr	r1, [pc, #452]	; (af94 <isr+0x318>)
    adce:	780a      	ldrb	r2, [r1, #0]
    add0:	b162      	cbz	r2, adec <isr+0x170>
			if (--usb_reboot_timer == 0) {
    add2:	3a01      	subs	r2, #1
    add4:	b2d2      	uxtb	r2, r2
    add6:	700a      	strb	r2, [r1, #0]
    add8:	b942      	cbnz	r2, adec <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    adda:	496f      	ldr	r1, [pc, #444]	; (af98 <isr+0x31c>)
    addc:	780a      	ldrb	r2, [r1, #0]
    adde:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    ade2:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    ade4:	2a00      	cmp	r2, #0
    ade6:	f000 8232 	beq.w	b24e <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    adea:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    adec:	b003      	add	sp, #12
    adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    adf2:	496a      	ldr	r1, [pc, #424]	; (af9c <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    adf4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    adf8:	6808      	ldr	r0, [r1, #0]
    adfa:	4203      	tst	r3, r0
    adfc:	f040 81eb 	bne.w	b1d6 <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    ae00:	4a60      	ldr	r2, [pc, #384]	; (af84 <isr+0x308>)
    ae02:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    ae04:	401c      	ands	r4, r3
    ae06:	d0a3      	beq.n	ad50 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    ae08:	0763      	lsls	r3, r4, #29
    ae0a:	f100 822f 	bmi.w	b26c <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    ae0e:	0367      	lsls	r7, r4, #13
    ae10:	f100 8228 	bmi.w	b264 <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    ae14:	0726      	lsls	r6, r4, #28
    ae16:	f100 8231 	bmi.w	b27c <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    ae1a:	0325      	lsls	r5, r4, #12
    ae1c:	f100 822a 	bmi.w	b274 <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    ae20:	06e0      	lsls	r0, r4, #27
    ae22:	f100 821b 	bmi.w	b25c <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    ae26:	02e1      	lsls	r1, r4, #11
    ae28:	d592      	bpl.n	ad50 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    ae2a:	485d      	ldr	r0, [pc, #372]	; (afa0 <isr+0x324>)
    ae2c:	f7ff feb8 	bl	aba0 <run_callbacks>
    ae30:	e78e      	b.n	ad50 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    ae32:	4a57      	ldr	r2, [pc, #348]	; (af90 <isr+0x314>)
    ae34:	7013      	strb	r3, [r2, #0]
    ae36:	e7c1      	b.n	adbc <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    ae38:	f242 0721 	movw	r7, #8225	; 0x2021
    ae3c:	42b9      	cmp	r1, r7
    ae3e:	d038      	beq.n	aeb2 <isr+0x236>
    ae40:	d86f      	bhi.n	af22 <isr+0x2a6>
    ae42:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    ae46:	f000 8133 	beq.w	b0b0 <isr+0x434>
    ae4a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    ae4e:	d134      	bne.n	aeba <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    ae50:	f3c0 4007 	ubfx	r0, r0, #16, #8
    ae54:	4a53      	ldr	r2, [pc, #332]	; (afa4 <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ae56:	4954      	ldr	r1, [pc, #336]	; (afa8 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    ae58:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ae5a:	4f54      	ldr	r7, [pc, #336]	; (afac <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ae5c:	4a54      	ldr	r2, [pc, #336]	; (afb0 <isr+0x334>)
    ae5e:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ae60:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ae64:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ae68:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    ae6c:	f000 fcc0 	bl	b7f0 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ae70:	4a50      	ldr	r2, [pc, #320]	; (afb4 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ae72:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ae74:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ae76:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ae78:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ae7a:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ae7c:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    ae7e:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ae82:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    ae84:	f041 1101 	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ae88:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    ae8a:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ae8e:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
    ae92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    ae96:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ae9a:	4a40      	ldr	r2, [pc, #256]	; (af9c <isr+0x320>)
    ae9c:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    ae9e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    aea2:	2b00      	cmp	r3, #0
    aea4:	d1fb      	bne.n	ae9e <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aea6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aeaa:	2b00      	cmp	r3, #0
    aeac:	f47f aefc 	bne.w	aca8 <isr+0x2c>
    aeb0:	e749      	b.n	ad46 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    aeb2:	0c11      	lsrs	r1, r2, #16
    aeb4:	2907      	cmp	r1, #7
    aeb6:	f000 814c 	beq.w	b152 <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    aeba:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aebe:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aec2:	2b00      	cmp	r3, #0
    aec4:	f47f aef0 	bne.w	aca8 <isr+0x2c>
    aec8:	e73d      	b.n	ad46 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    aeca:	f240 3702 	movw	r7, #770	; 0x302
    aece:	42b9      	cmp	r1, r7
    aed0:	f000 80bb 	beq.w	b04a <isr+0x3ce>
    aed4:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    aed8:	d1ef      	bne.n	aeba <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aeda:	4a36      	ldr	r2, [pc, #216]	; (afb4 <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aedc:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aede:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aee0:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aee2:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aee4:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    aee6:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aeea:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    aeec:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aef0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    aef2:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aef6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    aefa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    aefe:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    af02:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    af06:	2b00      	cmp	r3, #0
    af08:	d1fb      	bne.n	af02 <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af0a:	0c03      	lsrs	r3, r0, #16
    af0c:	065b      	lsls	r3, r3, #25
    af0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    af12:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    af16:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    af1a:	2b00      	cmp	r3, #0
    af1c:	f47f aec4 	bne.w	aca8 <isr+0x2c>
    af20:	e711      	b.n	ad46 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    af22:	f242 2321 	movw	r3, #8737	; 0x2221
    af26:	4299      	cmp	r1, r3
    af28:	f000 8086 	beq.w	b038 <isr+0x3bc>
    af2c:	f242 3321 	movw	r3, #8993	; 0x2321
    af30:	4299      	cmp	r1, r3
    af32:	d1c2      	bne.n	aeba <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    af34:	4b1f      	ldr	r3, [pc, #124]	; (afb4 <isr+0x338>)
    af36:	2101      	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af38:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    af3a:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    af3c:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af3e:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af40:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    af44:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af46:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    af4a:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    af4c:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    af4e:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    af52:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    af56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    af5a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    af5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    af62:	2b00      	cmp	r3, #0
    af64:	d1fb      	bne.n	af5e <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    af66:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    af6a:	2b00      	cmp	r3, #0
    af6c:	f47f ae9c 	bne.w	aca8 <isr+0x2c>
    af70:	e6e9      	b.n	ad46 <isr+0xca>
    af72:	bf00      	nop
    af74:	402e0000 	.word	0x402e0000
    af78:	20005000 	.word	0x20005000
    af7c:	402e01c0 	.word	0x402e01c0
    af80:	20002c70 	.word	0x20002c70
    af84:	20002c4c 	.word	0x20002c4c
    af88:	20002c48 	.word	0x20002c48
    af8c:	20002c54 	.word	0x20002c54
    af90:	20002c58 	.word	0x20002c58
    af94:	20002c60 	.word	0x20002c60
    af98:	20002c50 	.word	0x20002c50
    af9c:	20002c5c 	.word	0x20002c5c
    afa0:	20005240 	.word	0x20005240
    afa4:	20002c80 	.word	0x20002c80
    afa8:	000200c8 	.word	0x000200c8
    afac:	00cc0002 	.word	0x00cc0002
    afb0:	00c80002 	.word	0x00c80002
    afb4:	20004020 	.word	0x20004020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    afb8:	4aba      	ldr	r2, [pc, #744]	; (b2a4 <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    afba:	2102      	movs	r1, #2
    afbc:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    afbe:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    afc0:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    afc2:	f7ff fe09 	bl	abd8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    afc6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    afca:	2b00      	cmp	r3, #0
    afcc:	f47f ae6c 	bne.w	aca8 <isr+0x2c>
    afd0:	e6b9      	b.n	ad46 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    afd2:	b292      	uxth	r2, r2
    afd4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    afd8:	2b07      	cmp	r3, #7
    afda:	f63f af6e 	bhi.w	aeba <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    afde:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    afe2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    afe6:	4ab0      	ldr	r2, [pc, #704]	; (b2a8 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    afe8:	f04f 0101 	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    afec:	441a      	add	r2, r3
    afee:	6813      	ldr	r3, [r2, #0]
    aff0:	bf14      	ite	ne
    aff2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    aff6:	f023 0301 	biceq.w	r3, r3, #1
    affa:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    affc:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    affe:	4bab      	ldr	r3, [pc, #684]	; (b2ac <isr+0x630>)
    b000:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b002:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b004:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b006:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b00a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b00c:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b010:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b012:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b014:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b018:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b01c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b020:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b024:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b028:	2b00      	cmp	r3, #0
    b02a:	d1fb      	bne.n	b024 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b02c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b030:	2b00      	cmp	r3, #0
    b032:	f47f ae39 	bne.w	aca8 <isr+0x2c>
    b036:	e686      	b.n	ad46 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b038:	4b9d      	ldr	r3, [pc, #628]	; (b2b0 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    b03a:	f3c0 4007 	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b03e:	4a9d      	ldr	r2, [pc, #628]	; (b2b4 <isr+0x638>)
    b040:	6819      	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b042:	4b9d      	ldr	r3, [pc, #628]	; (b2b8 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b044:	6011      	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b046:	7018      	strb	r0, [r3, #0]
    b048:	e774      	b.n	af34 <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b04a:	b292      	uxth	r2, r2
    b04c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b050:	2b07      	cmp	r3, #7
    b052:	f63f af32 	bhi.w	aeba <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b056:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b05a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b05e:	4a92      	ldr	r2, [pc, #584]	; (b2a8 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b060:	f04f 0101 	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b064:	441a      	add	r2, r3
    b066:	6813      	ldr	r3, [r2, #0]
    b068:	bf14      	ite	ne
    b06a:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b06e:	f043 0301 	orreq.w	r3, r3, #1
    b072:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b074:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b076:	4b8d      	ldr	r3, [pc, #564]	; (b2ac <isr+0x630>)
    b078:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b07a:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b07c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b07e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b082:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b084:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b088:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b08a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b08c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b090:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b098:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b09c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d1fb      	bne.n	b09c <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b0a4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	f47f adfd 	bne.w	aca8 <isr+0x2c>
    b0ae:	e64a      	b.n	ad46 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b0b0:	4a82      	ldr	r2, [pc, #520]	; (b2bc <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b0b2:	2101      	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b0b4:	4b7b      	ldr	r3, [pc, #492]	; (b2a4 <isr+0x628>)
    b0b6:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b0b8:	4618      	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b0ba:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b0bc:	f7ff fd8c 	bl	abd8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b0c0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	f47f adef 	bne.w	aca8 <isr+0x2c>
    b0ca:	e63c      	b.n	ad46 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b0cc:	4b7c      	ldr	r3, [pc, #496]	; (b2c0 <isr+0x644>)
    b0ce:	6859      	ldr	r1, [r3, #4]
    b0d0:	2900      	cmp	r1, #0
    b0d2:	f43f aef2 	beq.w	aeba <isr+0x23e>
    b0d6:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b0d8:	fa1f fe82 	uxth.w	lr, r2
    b0dc:	e004      	b.n	b0e8 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b0de:	330c      	adds	r3, #12
    b0e0:	6859      	ldr	r1, [r3, #4]
    b0e2:	2900      	cmp	r1, #0
    b0e4:	f43f aee9 	beq.w	aeba <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b0e8:	881f      	ldrh	r7, [r3, #0]
    b0ea:	4287      	cmp	r7, r0
    b0ec:	d1f7      	bne.n	b0de <isr+0x462>
    b0ee:	885f      	ldrh	r7, [r3, #2]
    b0f0:	4577      	cmp	r7, lr
    b0f2:	d1f4      	bne.n	b0de <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    b0f4:	0a07      	lsrs	r7, r0, #8
    b0f6:	2f03      	cmp	r7, #3
    b0f8:	f000 8106 	beq.w	b308 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    b0fc:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    b0fe:	0c12      	lsrs	r2, r2, #16
    b100:	4293      	cmp	r3, r2
    b102:	bf28      	it	cs
    b104:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    b106:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    b10a:	f000 80bb 	beq.w	b284 <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    b10e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    b112:	f000 8089 	beq.w	b228 <isr+0x5ac>
    b116:	4f6b      	ldr	r7, [pc, #428]	; (b2c4 <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b118:	461a      	mov	r2, r3
    b11a:	9301      	str	r3, [sp, #4]
    b11c:	4638      	mov	r0, r7
    b11e:	f7fe ffc1 	bl	a0a4 <memcpy>
    b122:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b124:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b128:	441f      	add	r7, r3
	asm("dsb");
    b12a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b12e:	4966      	ldr	r1, [pc, #408]	; (b2c8 <isr+0x64c>)
    b130:	600a      	str	r2, [r1, #0]
		location += 32;
    b132:	3220      	adds	r2, #32
	} while (location < end_addr);
    b134:	4297      	cmp	r7, r2
    b136:	d8fa      	bhi.n	b12e <isr+0x4b2>
	asm("dsb");
    b138:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b13c:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b140:	4860      	ldr	r0, [pc, #384]	; (b2c4 <isr+0x648>)
    b142:	4619      	mov	r1, r3
    b144:	f7ff fd48 	bl	abd8 <endpoint0_transmit.constprop.1>
    b148:	e5f9      	b.n	ad3e <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b14a:	07cb      	lsls	r3, r1, #31
    b14c:	f57f adf3 	bpl.w	ad36 <isr+0xba>
    b150:	e5ef      	b.n	ad32 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b152:	4f5e      	ldr	r7, [pc, #376]	; (b2cc <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b154:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    b158:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b15a:	495d      	ldr	r1, [pc, #372]	; (b2d0 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b15c:	4b5d      	ldr	r3, [pc, #372]	; (b2d4 <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b15e:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b160:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b164:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b166:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    b16a:	495b      	ldr	r1, [pc, #364]	; (b2d8 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b16c:	607a      	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b16e:	ea40 020e 	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b172:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b176:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    b17a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b17c:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b180:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b184:	f501 4280 	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b188:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b18a:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b18c:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b190:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b192:	619a      	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    b194:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b198:	2b00      	cmp	r3, #0
    b19a:	d1fb      	bne.n	b194 <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    b19c:	4a43      	ldr	r2, [pc, #268]	; (b2ac <isr+0x630>)
    b19e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1a0:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b1a4:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b1a6:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b1a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1ac:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b1ae:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b1b2:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b1b4:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b1b8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    b1ba:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b1be:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    b1c2:	4303      	orrs	r3, r0
    b1c4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b1c8:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    b1cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d1fb      	bne.n	b1cc <isr+0x550>
    b1d4:	e5b3      	b.n	ad3e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    b1d6:	4c3d      	ldr	r4, [pc, #244]	; (b2cc <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b1d8:	f242 0021 	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    b1dc:	2500      	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b1de:	8824      	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    b1e0:	600d      	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b1e2:	4284      	cmp	r4, r0
    b1e4:	f47f ae0c 	bne.w	ae00 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b1e8:	493b      	ldr	r1, [pc, #236]	; (b2d8 <isr+0x65c>)
    b1ea:	4c3c      	ldr	r4, [pc, #240]	; (b2dc <isr+0x660>)
    b1ec:	c903      	ldmia	r1, {r0, r1}
    b1ee:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    b1f0:	2886      	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b1f2:	6020      	str	r0, [r4, #0]
    b1f4:	80a1      	strh	r1, [r4, #4]
    b1f6:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    b1f8:	f47f ae02 	bne.w	ae00 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    b1fc:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    b1fe:	4838      	ldr	r0, [pc, #224]	; (b2e0 <isr+0x664>)
    b200:	7801      	ldrb	r1, [r0, #0]
    b202:	f041 0104 	orr.w	r1, r1, #4
    b206:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b208:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b20c:	0608      	lsls	r0, r1, #24
    b20e:	d406      	bmi.n	b21e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b210:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b214:	2080      	movs	r0, #128	; 0x80
    b216:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b21a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    b21e:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b220:	4a30      	ldr	r2, [pc, #192]	; (b2e4 <isr+0x668>)
    b222:	2150      	movs	r1, #80	; 0x50
    b224:	7011      	strb	r1, [r2, #0]
    b226:	e5eb      	b.n	ae00 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    b228:	482f      	ldr	r0, [pc, #188]	; (b2e8 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b22a:	461a      	mov	r2, r3
    b22c:	4f25      	ldr	r7, [pc, #148]	; (b2c4 <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    b22e:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    b232:	492e      	ldr	r1, [pc, #184]	; (b2ec <isr+0x670>)
    b234:	482e      	ldr	r0, [pc, #184]	; (b2f0 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    b236:	9301      	str	r3, [sp, #4]
    b238:	f1be 0f00 	cmp.w	lr, #0
    b23c:	bf08      	it	eq
    b23e:	4601      	moveq	r1, r0
    b240:	4638      	mov	r0, r7
    b242:	f7fe ff2f 	bl	a0a4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b246:	2207      	movs	r2, #7
    b248:	9b01      	ldr	r3, [sp, #4]
    b24a:	707a      	strb	r2, [r7, #1]
    b24c:	e76a      	b.n	b124 <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    b24e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b256:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    b25a:	e5c6      	b.n	adea <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b25c:	4825      	ldr	r0, [pc, #148]	; (b2f4 <isr+0x678>)
    b25e:	f7ff fc9f 	bl	aba0 <run_callbacks>
    b262:	e5e0      	b.n	ae26 <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b264:	4824      	ldr	r0, [pc, #144]	; (b2f8 <isr+0x67c>)
    b266:	f7ff fc9b 	bl	aba0 <run_callbacks>
    b26a:	e5d3      	b.n	ae14 <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b26c:	4823      	ldr	r0, [pc, #140]	; (b2fc <isr+0x680>)
    b26e:	f7ff fc97 	bl	aba0 <run_callbacks>
    b272:	e5cc      	b.n	ae0e <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b274:	4822      	ldr	r0, [pc, #136]	; (b300 <isr+0x684>)
    b276:	f7ff fc93 	bl	aba0 <run_callbacks>
    b27a:	e5d1      	b.n	ae20 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b27c:	4821      	ldr	r0, [pc, #132]	; (b304 <isr+0x688>)
    b27e:	f7ff fc8f 	bl	aba0 <run_callbacks>
    b282:	e5ca      	b.n	ae1a <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    b284:	4818      	ldr	r0, [pc, #96]	; (b2e8 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b286:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    b288:	4919      	ldr	r1, [pc, #100]	; (b2f0 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b28a:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    b28c:	4817      	ldr	r0, [pc, #92]	; (b2ec <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    b28e:	9301      	str	r3, [sp, #4]
    b290:	2f00      	cmp	r7, #0
    b292:	bf08      	it	eq
    b294:	4601      	moveq	r1, r0
    b296:	480b      	ldr	r0, [pc, #44]	; (b2c4 <isr+0x648>)
    b298:	f7fe ff04 	bl	a0a4 <memcpy>
    b29c:	4f09      	ldr	r7, [pc, #36]	; (b2c4 <isr+0x648>)
    b29e:	9b01      	ldr	r3, [sp, #4]
    b2a0:	e740      	b.n	b124 <isr+0x4a8>
    b2a2:	bf00      	nop
    b2a4:	20002c70 	.word	0x20002c70
    b2a8:	402e01c0 	.word	0x402e01c0
    b2ac:	20004020 	.word	0x20004020
    b2b0:	20002c14 	.word	0x20002c14
    b2b4:	20005288 	.word	0x20005288
    b2b8:	20002dc8 	.word	0x20002dc8
    b2bc:	20002c80 	.word	0x20002c80
    b2c0:	20001ad4 	.word	0x20001ad4
    b2c4:	20200000 	.word	0x20200000
    b2c8:	e000ef70 	.word	0xe000ef70
    b2cc:	20002c68 	.word	0x20002c68
    b2d0:	00070080 	.word	0x00070080
    b2d4:	20004000 	.word	0x20004000
    b2d8:	20002c78 	.word	0x20002c78
    b2dc:	20005280 	.word	0x20005280
    b2e0:	20002c50 	.word	0x20002c50
    b2e4:	20002c60 	.word	0x20002c60
    b2e8:	20002c58 	.word	0x20002c58
    b2ec:	600017a0 	.word	0x600017a0
    b2f0:	600017e4 	.word	0x600017e4
    b2f4:	20005200 	.word	0x20005200
    b2f8:	20005140 	.word	0x20005140
    b2fc:	20005100 	.word	0x20005100
    b300:	200051c0 	.word	0x200051c0
    b304:	20005180 	.word	0x20005180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    b308:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    b30a:	780b      	ldrb	r3, [r1, #0]
    b30c:	4293      	cmp	r3, r2
    b30e:	bf28      	it	cs
    b310:	4613      	movcs	r3, r2
    b312:	e6fc      	b.n	b10e <isr+0x492>

0000b314 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b314:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b316:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    b31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b31e:	bf14      	ite	ne
    b320:	2700      	movne	r7, #0
    b322:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b326:	2a02      	cmp	r2, #2
    b328:	d901      	bls.n	b32e <usb_config_rx+0x1a>
    b32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b32e:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    b332:	f8df 9040 	ldr.w	r9, [pc, #64]	; b374 <usb_config_rx+0x60>
    b336:	460d      	mov	r5, r1
    b338:	4604      	mov	r4, r0
    b33a:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b33e:	2100      	movs	r1, #0
    b340:	2240      	movs	r2, #64	; 0x40
    b342:	4698      	mov	r8, r3
    b344:	4630      	mov	r0, r6
    b346:	f001 fe53 	bl	cff0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b34a:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    b34c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    b350:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    b354:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b358:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    b35a:	f1b8 0f00 	cmp.w	r8, #0
    b35e:	d0e4      	beq.n	b32a <usb_config_rx+0x16>
    b360:	4b03      	ldr	r3, [pc, #12]	; (b370 <usb_config_rx+0x5c>)
    b362:	40a0      	lsls	r0, r4
    b364:	681c      	ldr	r4, [r3, #0]
    b366:	4320      	orrs	r0, r4
    b368:	6018      	str	r0, [r3, #0]
    b36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b36e:	bf00      	nop
    b370:	20002c4c 	.word	0x20002c4c
    b374:	20005000 	.word	0x20005000

0000b378 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b378:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b37a:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    b37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b382:	bf14      	ite	ne
    b384:	2700      	movne	r7, #0
    b386:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b38a:	2a02      	cmp	r2, #2
    b38c:	d901      	bls.n	b392 <usb_config_tx+0x1a>
    b38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b392:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b394:	01c5      	lsls	r5, r0, #7
    b396:	f8df 9044 	ldr.w	r9, [pc, #68]	; b3dc <usb_config_tx+0x64>
    b39a:	4688      	mov	r8, r1
    b39c:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b39e:	2100      	movs	r1, #0
    b3a0:	4604      	mov	r4, r0
    b3a2:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b3a4:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b3a8:	4650      	mov	r0, sl
    b3aa:	f001 fe21 	bl	cff0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b3ae:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    b3b0:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    b3b4:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    b3b8:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b3bc:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b3c0:	2e00      	cmp	r6, #0
    b3c2:	d0e4      	beq.n	b38e <usb_config_tx+0x16>
    b3c4:	f104 0010 	add.w	r0, r4, #16
    b3c8:	4b03      	ldr	r3, [pc, #12]	; (b3d8 <usb_config_tx+0x60>)
    b3ca:	4082      	lsls	r2, r0
    b3cc:	6818      	ldr	r0, [r3, #0]
    b3ce:	4302      	orrs	r2, r0
    b3d0:	601a      	str	r2, [r3, #0]
    b3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3d6:	bf00      	nop
    b3d8:	20002c4c 	.word	0x20002c4c
    b3dc:	20005000 	.word	0x20005000

0000b3e0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b3e0:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    b3e2:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    b3e4:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b3e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    b3ea:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b3ec:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    b3ee:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    b3f0:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    b3f4:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    b3f8:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b3fc:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    b400:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    b402:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b404:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    b406:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    b408:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    b40a:	bcf0      	pop	{r4, r5, r6, r7}
    b40c:	4770      	bx	lr
    b40e:	bf00      	nop

0000b410 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b410:	1e83      	subs	r3, r0, #2
    b412:	2b02      	cmp	r3, #2
    b414:	d900      	bls.n	b418 <usb_transmit+0x8>
    b416:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    b418:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    b41a:	4b06      	ldr	r3, [pc, #24]	; (b434 <usb_transmit+0x24>)
    b41c:	f100 0410 	add.w	r4, r0, #16
    b420:	2501      	movs	r5, #1
    b422:	460a      	mov	r2, r1
    b424:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    b428:	fa05 f104 	lsl.w	r1, r5, r4
}
    b42c:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    b42e:	f7ff bb89 	b.w	ab44 <schedule_transfer>
    b432:	bf00      	nop
    b434:	20005040 	.word	0x20005040

0000b438 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b438:	1e83      	subs	r3, r0, #2
    b43a:	2b02      	cmp	r3, #2
    b43c:	d900      	bls.n	b440 <usb_receive+0x8>
    b43e:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    b440:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b442:	4b05      	ldr	r3, [pc, #20]	; (b458 <usb_receive+0x20>)
    b444:	2401      	movs	r4, #1
    b446:	460a      	mov	r2, r1
    b448:	fa04 f100 	lsl.w	r1, r4, r0
    b44c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    b450:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b454:	f7ff bb76 	b.w	ab44 <schedule_transfer>
    b458:	20005000 	.word	0x20005000

0000b45c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b45c:	6840      	ldr	r0, [r0, #4]
#endif
}
    b45e:	4770      	bx	lr

0000b460 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b460:	4a12      	ldr	r2, [pc, #72]	; (b4ac <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b462:	4b13      	ldr	r3, [pc, #76]	; (b4b0 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b464:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    b468:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b46c:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b46e:	b510      	push	{r4, lr}
    b470:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b472:	d802      	bhi.n	b47a <usb_init_serialnumber+0x1a>
    b474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b478:	0040      	lsls	r0, r0, #1
    b47a:	4c0e      	ldr	r4, [pc, #56]	; (b4b4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b47c:	a901      	add	r1, sp, #4
    b47e:	220a      	movs	r2, #10
    b480:	f001 f826 	bl	c4d0 <ultoa>
    b484:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b486:	2300      	movs	r3, #0
    b488:	4620      	mov	r0, r4
		char c = buf[i];
    b48a:	f811 2b01 	ldrb.w	r2, [r1], #1
    b48e:	3301      	adds	r3, #1
		if (!c) break;
    b490:	b13a      	cbz	r2, b4a2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b492:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b494:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b498:	d1f7      	bne.n	b48a <usb_init_serialnumber+0x2a>
    b49a:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b49c:	7023      	strb	r3, [r4, #0]
}
    b49e:	b004      	add	sp, #16
    b4a0:	bd10      	pop	{r4, pc}
    b4a2:	005b      	lsls	r3, r3, #1
    b4a4:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b4a6:	7023      	strb	r3, [r4, #0]
}
    b4a8:	b004      	add	sp, #16
    b4aa:	bd10      	pop	{r4, pc}
    b4ac:	401f4400 	.word	0x401f4400
    b4b0:	0098967f 	.word	0x0098967f
    b4b4:	20001e8c 	.word	0x20001e8c

0000b4b8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b4ba:	4914      	ldr	r1, [pc, #80]	; (b50c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b4bc:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b4c0:	4d13      	ldr	r5, [pc, #76]	; (b510 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    b4c2:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b4c4:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b4c8:	4e12      	ldr	r6, [pc, #72]	; (b514 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b4ca:	4a13      	ldr	r2, [pc, #76]	; (b518 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b4cc:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    b4d0:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b4d2:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b4d4:	4628      	mov	r0, r5
    b4d6:	8832      	ldrh	r2, [r6, #0]
    b4d8:	f7ff ff82 	bl	b3e0 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    b4dc:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b4de:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b4e2:	4421      	add	r1, r4
	asm("dsb");
    b4e4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    b4e8:	4a0c      	ldr	r2, [pc, #48]	; (b51c <rx_queue_transfer+0x64>)
    b4ea:	6013      	str	r3, [r2, #0]
		location += 32;
    b4ec:	3320      	adds	r3, #32
	} while (location < end_addr);
    b4ee:	4299      	cmp	r1, r3
    b4f0:	d8fb      	bhi.n	b4ea <rx_queue_transfer+0x32>
	asm("dsb");
    b4f2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b4f6:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b4fa:	2003      	movs	r0, #3
    b4fc:	4629      	mov	r1, r5
    b4fe:	f7ff ff9b 	bl	b438 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b502:	4b07      	ldr	r3, [pc, #28]	; (b520 <rx_queue_transfer+0x68>)
    b504:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b508:	601a      	str	r2, [r3, #0]
    b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b50c:	20200060 	.word	0x20200060
    b510:	20002ca0 	.word	0x20002ca0
    b514:	20002dae 	.word	0x20002dae
    b518:	e000e18c 	.word	0xe000e18c
    b51c:	e000ef5c 	.word	0xe000ef5c
    b520:	e000e10c 	.word	0xe000e10c

0000b524 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b524:	4a24      	ldr	r2, [pc, #144]	; (b5b8 <rx_event+0x94>)
    b526:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b52c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    b530:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    b532:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b534:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    b536:	2c00      	cmp	r4, #0
    b538:	dd38      	ble.n	b5ac <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    b53a:	4920      	ldr	r1, [pc, #128]	; (b5bc <rx_event+0x98>)
		if (head != rx_tail) {
    b53c:	4a20      	ldr	r2, [pc, #128]	; (b5c0 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    b53e:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    b540:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    b542:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    b544:	481f      	ldr	r0, [pc, #124]	; (b5c4 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    b546:	4e20      	ldr	r6, [pc, #128]	; (b5c8 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    b548:	4293      	cmp	r3, r2
    b54a:	d007      	beq.n	b55c <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    b54c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    b550:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    b554:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    b558:	4294      	cmp	r4, r2
    b55a:	d912      	bls.n	b582 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    b55c:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    b55e:	2200      	movs	r2, #0
    b560:	4f1a      	ldr	r7, [pc, #104]	; (b5cc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    b562:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    b564:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    b568:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    b56c:	4e18      	ldr	r6, [pc, #96]	; (b5d0 <rx_event+0xac>)
    b56e:	bf94      	ite	ls
    b570:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    b572:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    b574:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    b576:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    b578:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    b57a:	4414      	add	r4, r2
    b57c:	6034      	str	r4, [r6, #0]
    b57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b582:	4b14      	ldr	r3, [pc, #80]	; (b5d4 <rx_event+0xb0>)
    b584:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    b588:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    b58a:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b58c:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    b590:	4418      	add	r0, r3
    b592:	f7fe fd87 	bl	a0a4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    b596:	4a0e      	ldr	r2, [pc, #56]	; (b5d0 <rx_event+0xac>)
				rx_queue_transfer(i);
    b598:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    b59a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    b59e:	6813      	ldr	r3, [r2, #0]
    b5a0:	441c      	add	r4, r3
    b5a2:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    b5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    b5a8:	f7ff bf86 	b.w	b4b8 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    b5ac:	4628      	mov	r0, r5
	}
}
    b5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    b5b2:	f7ff bf81 	b.w	b4b8 <rx_queue_transfer>
    b5b6:	bf00      	nop
    b5b8:	20002dae 	.word	0x20002dae
    b5bc:	20002dc4 	.word	0x20002dc4
    b5c0:	20002da0 	.word	0x20002da0
    b5c4:	20002da4 	.word	0x20002da4
    b5c8:	20002db0 	.word	0x20002db0
    b5cc:	20002c84 	.word	0x20002c84
    b5d0:	20002dc0 	.word	0x20002dc0
    b5d4:	20200060 	.word	0x20200060

0000b5d8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    b5d8:	4b1e      	ldr	r3, [pc, #120]	; (b654 <usb_serial_flush_callback+0x7c>)
    b5da:	781a      	ldrb	r2, [r3, #0]
    b5dc:	b95a      	cbnz	r2, b5f6 <usb_serial_flush_callback+0x1e>
    b5de:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    b5e2:	4a1d      	ldr	r2, [pc, #116]	; (b658 <usb_serial_flush_callback+0x80>)
    b5e4:	7812      	ldrb	r2, [r2, #0]
    b5e6:	b132      	cbz	r2, b5f6 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    b5ec:	4d1b      	ldr	r5, [pc, #108]	; (b65c <usb_serial_flush_callback+0x84>)
    b5ee:	882a      	ldrh	r2, [r5, #0]
    b5f0:	b912      	cbnz	r2, b5f8 <usb_serial_flush_callback+0x20>
    b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5f6:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b5f8:	4e19      	ldr	r6, [pc, #100]	; (b660 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    b5fa:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b5fe:	4f19      	ldr	r7, [pc, #100]	; (b664 <usb_serial_flush_callback+0x8c>)
    b600:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b602:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b604:	4c18      	ldr	r4, [pc, #96]	; (b668 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b606:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b60a:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b60e:	4638      	mov	r0, r7
    b610:	4621      	mov	r1, r4
    b612:	f7ff fee5 	bl	b3e0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    b616:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b61a:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    b61e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b622:	4b12      	ldr	r3, [pc, #72]	; (b66c <usb_serial_flush_callback+0x94>)
    b624:	6019      	str	r1, [r3, #0]
		location += 32;
    b626:	3120      	adds	r1, #32
	} while (location < end_addr);
    b628:	428a      	cmp	r2, r1
    b62a:	d8fb      	bhi.n	b624 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    b62c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b630:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b634:	2004      	movs	r0, #4
    b636:	4639      	mov	r1, r7
    b638:	f7ff feea 	bl	b410 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b63c:	7833      	ldrb	r3, [r6, #0]
    b63e:	4a08      	ldr	r2, [pc, #32]	; (b660 <usb_serial_flush_callback+0x88>)
    b640:	3301      	adds	r3, #1
    b642:	b2db      	uxtb	r3, r3
    b644:	2b03      	cmp	r3, #3
    b646:	bf88      	it	hi
    b648:	2300      	movhi	r3, #0
    b64a:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    b64c:	2300      	movs	r3, #0
    b64e:	802b      	strh	r3, [r5, #0]
    b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b654:	20002c96 	.word	0x20002c96
    b658:	20002c80 	.word	0x20002c80
    b65c:	20002dc6 	.word	0x20002dc6
    b660:	20002c97 	.word	0x20002c97
    b664:	20002de0 	.word	0x20002de0
    b668:	20201060 	.word	0x20201060
    b66c:	e000ef70 	.word	0xe000ef70

0000b670 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b674:	b085      	sub	sp, #20
    b676:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    b678:	9101      	str	r1, [sp, #4]
    b67a:	2900      	cmp	r1, #0
    b67c:	f000 80a2 	beq.w	b7c4 <usb_serial_write.part.1+0x154>
    b680:	2300      	movs	r3, #0
    b682:	f8df 815c 	ldr.w	r8, [pc, #348]	; b7e0 <usb_serial_write.part.1+0x170>
    b686:	f8df 914c 	ldr.w	r9, [pc, #332]	; b7d4 <usb_serial_write.part.1+0x164>
    b68a:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    b68c:	4e4e      	ldr	r6, [pc, #312]	; (b7c8 <usb_serial_write.part.1+0x158>)
    b68e:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    b692:	f8df a150 	ldr.w	sl, [pc, #336]	; b7e4 <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    b696:	f8df b150 	ldr.w	fp, [pc, #336]	; b7e8 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    b69a:	4a4c      	ldr	r2, [pc, #304]	; (b7cc <usb_serial_write.part.1+0x15c>)
    b69c:	7814      	ldrb	r4, [r2, #0]
    b69e:	4a4c      	ldr	r2, [pc, #304]	; (b7d0 <usb_serial_write.part.1+0x160>)
    b6a0:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d16e      	bne.n	b786 <usb_serial_write.part.1+0x116>
    b6a8:	461d      	mov	r5, r3
    b6aa:	461c      	mov	r4, r3
    b6ac:	e014      	b.n	b6d8 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    b6ae:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    b6b2:	b904      	cbnz	r4, b6b6 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    b6b4:	6835      	ldr	r5, [r6, #0]
    b6b6:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    b6b8:	2b00      	cmp	r3, #0
    b6ba:	d15e      	bne.n	b77a <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    b6bc:	6833      	ldr	r3, [r6, #0]
    b6be:	1b5b      	subs	r3, r3, r5
    b6c0:	2b78      	cmp	r3, #120	; 0x78
    b6c2:	d879      	bhi.n	b7b8 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    b6c4:	f89a 3000 	ldrb.w	r3, [sl]
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d056      	beq.n	b77a <usb_serial_write.part.1+0x10a>
			yield();
    b6cc:	f000 feb0 	bl	c430 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    b6d0:	f8b8 3000 	ldrh.w	r3, [r8]
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	d154      	bne.n	b782 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    b6d8:	4638      	mov	r0, r7
    b6da:	f7ff febf 	bl	b45c <usb_transfer_status>
			if (!(status & 0x80)) {
    b6de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    b6e2:	4a3c      	ldr	r2, [pc, #240]	; (b7d4 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    b6e4:	d1e3      	bne.n	b6ae <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    b6e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    b6ea:	4a38      	ldr	r2, [pc, #224]	; (b7cc <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    b6ec:	f889 0000 	strb.w	r0, [r9]
    b6f0:	7814      	ldrb	r4, [r2, #0]
    b6f2:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    b6f4:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b6f8:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    b6fa:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b6fc:	4936      	ldr	r1, [pc, #216]	; (b7d8 <usb_serial_write.part.1+0x168>)
    b6fe:	4420      	add	r0, r4
		if (size >= tx_available) {
    b700:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b702:	4408      	add	r0, r1
		if (size >= tx_available) {
    b704:	d343      	bcc.n	b78e <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b706:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    b708:	9902      	ldr	r1, [sp, #8]
    b70a:	f7fe fccb 	bl	a0a4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    b70e:	2300      	movs	r3, #0
    b710:	4621      	mov	r1, r4
    b712:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b716:	4638      	mov	r0, r7
    b718:	f7ff fe62 	bl	b3e0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b71c:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b720:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    b724:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b728:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    b72c:	3320      	adds	r3, #32
	} while (location < end_addr);
    b72e:	429c      	cmp	r4, r3
    b730:	d8fa      	bhi.n	b728 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    b732:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b736:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    b73a:	2004      	movs	r0, #4
    b73c:	4639      	mov	r1, r7
    b73e:	f7ff fe67 	bl	b410 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    b742:	4b22      	ldr	r3, [pc, #136]	; (b7cc <usb_serial_write.part.1+0x15c>)
    b744:	4a21      	ldr	r2, [pc, #132]	; (b7cc <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    b746:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    b748:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    b74a:	4824      	ldr	r0, [pc, #144]	; (b7dc <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    b74c:	3301      	adds	r3, #1
    b74e:	b2db      	uxtb	r3, r3
    b750:	2b03      	cmp	r3, #3
    b752:	bf88      	it	hi
    b754:	2300      	movhi	r3, #0
    b756:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    b758:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    b75c:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    b75e:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    b762:	4413      	add	r3, r2
    b764:	9300      	str	r3, [sp, #0]
			data += tx_available;
    b766:	9b02      	ldr	r3, [sp, #8]
    b768:	4413      	add	r3, r2
    b76a:	9302      	str	r3, [sp, #8]
    b76c:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    b76e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    b772:	9901      	ldr	r1, [sp, #4]
    b774:	1a8a      	subs	r2, r1, r2
    b776:	9201      	str	r2, [sp, #4]
    b778:	d18f      	bne.n	b69a <usb_serial_write.part.1+0x2a>
    b77a:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    b77c:	b005      	add	sp, #20
    b77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b782:	4a12      	ldr	r2, [pc, #72]	; (b7cc <usb_serial_write.part.1+0x15c>)
    b784:	7814      	ldrb	r4, [r2, #0]
    b786:	461a      	mov	r2, r3
    b788:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    b78c:	e7b4      	b.n	b6f8 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    b78e:	9c01      	ldr	r4, [sp, #4]
    b790:	9902      	ldr	r1, [sp, #8]
    b792:	4622      	mov	r2, r4
    b794:	9303      	str	r3, [sp, #12]
    b796:	f7fe fc85 	bl	a0a4 <memcpy>
			tx_available -= size;
    b79a:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    b79c:	4a0f      	ldr	r2, [pc, #60]	; (b7dc <usb_serial_write.part.1+0x16c>)
    b79e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    b7a2:	1b1b      	subs	r3, r3, r4
    b7a4:	f8a8 3000 	strh.w	r3, [r8]
    b7a8:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    b7aa:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    b7ae:	4618      	mov	r0, r3
    b7b0:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    b7b2:	b005      	add	sp, #20
    b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    b7b8:	2301      	movs	r3, #1
				return sent;
    b7ba:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    b7bc:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    b7be:	b005      	add	sp, #20
    b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    b7c4:	9801      	ldr	r0, [sp, #4]
    b7c6:	e7d9      	b.n	b77c <usb_serial_write.part.1+0x10c>
    b7c8:	20002c14 	.word	0x20002c14
    b7cc:	20002c97 	.word	0x20002c97
    b7d0:	20002de0 	.word	0x20002de0
    b7d4:	20002dc5 	.word	0x20002dc5
    b7d8:	20201060 	.word	0x20201060
    b7dc:	402e0000 	.word	0x402e0000
    b7e0:	20002dc6 	.word	0x20002dc6
    b7e4:	20002c80 	.word	0x20002c80
    b7e8:	e000ef70 	.word	0xe000ef70

0000b7ec <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    b7ec:	4770      	bx	lr
    b7ee:	bf00      	nop

0000b7f0 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    b7f0:	4b31      	ldr	r3, [pc, #196]	; (b8b8 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    b7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    b7f6:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    b7f8:	4f30      	ldr	r7, [pc, #192]	; (b8bc <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d054      	beq.n	b8a8 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    b7fe:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    b802:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b8f0 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    b806:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    b808:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b80c:	2100      	movs	r1, #0
    b80e:	2280      	movs	r2, #128	; 0x80
    b810:	482b      	ldr	r0, [pc, #172]	; (b8c0 <usb_serial_configure+0xd0>)
	tx_head = 0;
    b812:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    b814:	4e2b      	ldr	r6, [pc, #172]	; (b8c4 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b816:	f001 fbeb 	bl	cff0 <memset>
	tx_head = 0;
    b81a:	4c2b      	ldr	r4, [pc, #172]	; (b8c8 <usb_serial_configure+0xd8>)
	tx_available = 0;
    b81c:	4b2b      	ldr	r3, [pc, #172]	; (b8cc <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b81e:	4629      	mov	r1, r5
    b820:	f44f 7280 	mov.w	r2, #256	; 0x100
    b824:	482a      	ldr	r0, [pc, #168]	; (b8d0 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    b826:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b828:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    b82a:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b82c:	f001 fbe0 	bl	cff0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    b830:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b832:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    b834:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b836:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    b838:	60b5      	str	r5, [r6, #8]
    b83a:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    b83c:	4925      	ldr	r1, [pc, #148]	; (b8d4 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    b83e:	4e26      	ldr	r6, [pc, #152]	; (b8d8 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    b840:	4826      	ldr	r0, [pc, #152]	; (b8dc <usb_serial_configure+0xec>)
	rx_available = 0;
    b842:	f8df e0b0 	ldr.w	lr, [pc, #176]	; b8f4 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    b846:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b848:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    b84a:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b84c:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    b84e:	6035      	str	r5, [r6, #0]
    b850:	6075      	str	r5, [r6, #4]
    b852:	60b5      	str	r5, [r6, #8]
    b854:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    b856:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b85a:	f7ff fd8d 	bl	b378 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    b85e:	f8b8 1000 	ldrh.w	r1, [r8]
    b862:	462a      	mov	r2, r5
    b864:	4b1e      	ldr	r3, [pc, #120]	; (b8e0 <usb_serial_configure+0xf0>)
    b866:	2003      	movs	r0, #3
    b868:	f7ff fd54 	bl	b314 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    b86c:	462b      	mov	r3, r5
    b86e:	8839      	ldrh	r1, [r7, #0]
    b870:	2201      	movs	r2, #1
    b872:	2004      	movs	r0, #4
    b874:	f7ff fd80 	bl	b378 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b878:	4620      	mov	r0, r4
    b87a:	3401      	adds	r4, #1
    b87c:	f7ff fe1c 	bl	b4b8 <rx_queue_transfer>
    b880:	2c08      	cmp	r4, #8
    b882:	d1f9      	bne.n	b878 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    b884:	4b17      	ldr	r3, [pc, #92]	; (b8e4 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    b886:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    b888:	4817      	ldr	r0, [pc, #92]	; (b8e8 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    b88a:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    b88c:	4c17      	ldr	r4, [pc, #92]	; (b8ec <usb_serial_configure+0xfc>)
    b88e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    b890:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    b894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    b898:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b89c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    b8a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    b8a8:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    b8aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; b8f0 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    b8ae:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    b8b0:	f8a8 3000 	strh.w	r3, [r8]
    b8b4:	e7aa      	b.n	b80c <usb_serial_configure+0x1c>
    b8b6:	bf00      	nop
    b8b8:	20002c58 	.word	0x20002c58
    b8bc:	20002c94 	.word	0x20002c94
    b8c0:	20002de0 	.word	0x20002de0
    b8c4:	20002db0 	.word	0x20002db0
    b8c8:	20002c97 	.word	0x20002c97
    b8cc:	20002dc6 	.word	0x20002dc6
    b8d0:	20002ca0 	.word	0x20002ca0
    b8d4:	20002dc4 	.word	0x20002dc4
    b8d8:	20002c84 	.word	0x20002c84
    b8dc:	20002da0 	.word	0x20002da0
    b8e0:	0000b525 	.word	0x0000b525
    b8e4:	402e0000 	.word	0x402e0000
    b8e8:	20002c48 	.word	0x20002c48
    b8ec:	0000b5d9 	.word	0x0000b5d9
    b8f0:	20002dae 	.word	0x20002dae
    b8f4:	20002dc0 	.word	0x20002dc0

0000b8f8 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    b8f8:	4b31      	ldr	r3, [pc, #196]	; (b9c0 <usb_serial_read+0xc8>)
    b8fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    b8fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    b902:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    b904:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    b906:	4b2f      	ldr	r3, [pc, #188]	; (b9c4 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    b908:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    b90a:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    b90c:	2900      	cmp	r1, #0
    b90e:	d053      	beq.n	b9b8 <usb_serial_read+0xc0>
    b910:	4b2d      	ldr	r3, [pc, #180]	; (b9c8 <usb_serial_read+0xd0>)
    b912:	b2e4      	uxtb	r4, r4
    b914:	781b      	ldrb	r3, [r3, #0]
    b916:	429c      	cmp	r4, r3
    b918:	d050      	beq.n	b9bc <usb_serial_read+0xc4>
    b91a:	4682      	mov	sl, r0
    b91c:	2700      	movs	r7, #0
    b91e:	f8df b0c0 	ldr.w	fp, [pc, #192]	; b9e0 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    b922:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    b924:	4b29      	ldr	r3, [pc, #164]	; (b9cc <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    b926:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b92a:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    b92c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    b92e:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    b930:	4b27      	ldr	r3, [pc, #156]	; (b9d0 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    b932:	bf28      	it	cs
    b934:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    b936:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    b938:	4b24      	ldr	r3, [pc, #144]	; (b9cc <usb_serial_read+0xd4>)
    b93a:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    b93e:	4b25      	ldr	r3, [pc, #148]	; (b9d4 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b940:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    b944:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b948:	4b23      	ldr	r3, [pc, #140]	; (b9d8 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    b94a:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b94e:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    b950:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b952:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    b954:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    b956:	d219      	bcs.n	b98c <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b958:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    b95c:	4642      	mov	r2, r8
    b95e:	4419      	add	r1, r3
    b960:	f7fe fba0 	bl	a0a4 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    b964:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    b966:	f8db 1000 	ldr.w	r1, [fp]
    b96a:	4648      	mov	r0, r9
			rx_index[i] += len;
    b96c:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    b970:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    b974:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    b976:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    b97a:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b97e:	4b17      	ldr	r3, [pc, #92]	; (b9dc <usb_serial_read+0xe4>)
    b980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b984:	601a      	str	r2, [r3, #0]
	return count;
}
    b986:	b003      	add	sp, #12
    b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b98c:	f7fe fb8a 	bl	a0a4 <memcpy>
			p += avail;
			rx_available -= avail;
    b990:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    b994:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    b996:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    b998:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    b99a:	44b2      	add	sl, r6
			rx_available -= avail;
    b99c:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    b9a0:	4a08      	ldr	r2, [pc, #32]	; (b9c4 <usb_serial_read+0xcc>)
    b9a2:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    b9a4:	f7ff fd88 	bl	b4b8 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    b9a8:	45b9      	cmp	r9, r7
    b9aa:	d903      	bls.n	b9b4 <usb_serial_read+0xbc>
    b9ac:	4b06      	ldr	r3, [pc, #24]	; (b9c8 <usb_serial_read+0xd0>)
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	429c      	cmp	r4, r3
    b9b2:	d1b6      	bne.n	b922 <usb_serial_read+0x2a>
    b9b4:	4638      	mov	r0, r7
    b9b6:	e7e2      	b.n	b97e <usb_serial_read+0x86>
    b9b8:	4608      	mov	r0, r1
    b9ba:	e7e0      	b.n	b97e <usb_serial_read+0x86>
    b9bc:	2000      	movs	r0, #0
    b9be:	e7de      	b.n	b97e <usb_serial_read+0x86>
    b9c0:	e000e18c 	.word	0xe000e18c
    b9c4:	20002da0 	.word	0x20002da0
    b9c8:	20002dc4 	.word	0x20002dc4
    b9cc:	20002c84 	.word	0x20002c84
    b9d0:	20002da4 	.word	0x20002da4
    b9d4:	20002db0 	.word	0x20002db0
    b9d8:	20200060 	.word	0x20200060
    b9dc:	e000e10c 	.word	0xe000e10c
    b9e0:	20002dc0 	.word	0x20002dc0

0000b9e4 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    b9e4:	4b0b      	ldr	r3, [pc, #44]	; (ba14 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    b9e6:	4a0c      	ldr	r2, [pc, #48]	; (ba18 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    b9e8:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    b9ea:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    b9ec:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    b9ee:	4293      	cmp	r3, r2
    b9f0:	d00d      	beq.n	ba0e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    b9f2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    b9f4:	4809      	ldr	r0, [pc, #36]	; (ba1c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b9f6:	4a0a      	ldr	r2, [pc, #40]	; (ba20 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    b9f8:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b9fa:	490a      	ldr	r1, [pc, #40]	; (ba24 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    b9fc:	bf28      	it	cs
    b9fe:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ba00:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ba02:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    ba06:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    ba0a:	5c58      	ldrb	r0, [r3, r1]
    ba0c:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    ba0e:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    ba12:	4770      	bx	lr
    ba14:	20002da0 	.word	0x20002da0
    ba18:	20002dc4 	.word	0x20002dc4
    ba1c:	20002da4 	.word	0x20002da4
    ba20:	20200060 	.word	0x20200060
    ba24:	20002c84 	.word	0x20002c84

0000ba28 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    ba28:	4b01      	ldr	r3, [pc, #4]	; (ba30 <usb_serial_available+0x8>)
    ba2a:	6818      	ldr	r0, [r3, #0]
}
    ba2c:	4770      	bx	lr
    ba2e:	bf00      	nop
    ba30:	20002dc0 	.word	0x20002dc0

0000ba34 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    ba34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    ba38:	4e15      	ldr	r6, [pc, #84]	; (ba90 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    ba3a:	4d16      	ldr	r5, [pc, #88]	; (ba94 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    ba3c:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    ba3e:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    ba40:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    ba42:	429c      	cmp	r4, r3
    ba44:	d021      	beq.n	ba8a <usb_serial_flush_input+0x56>
    ba46:	f8df 9054 	ldr.w	r9, [pc, #84]	; ba9c <usb_serial_flush_input+0x68>
    ba4a:	f8df b054 	ldr.w	fp, [pc, #84]	; baa0 <usb_serial_flush_input+0x6c>
    ba4e:	f8df 8054 	ldr.w	r8, [pc, #84]	; baa4 <usb_serial_flush_input+0x70>
    ba52:	4f11      	ldr	r7, [pc, #68]	; (ba98 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    ba54:	3401      	adds	r4, #1
    ba56:	2c08      	cmp	r4, #8
    ba58:	fa5f fa84 	uxtb.w	sl, r4
    ba5c:	d901      	bls.n	ba62 <usb_serial_flush_input+0x2e>
    ba5e:	2400      	movs	r4, #0
    ba60:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    ba62:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    ba66:	f8db 2000 	ldr.w	r2, [fp]
    ba6a:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    ba6e:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    ba70:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    ba74:	1a5b      	subs	r3, r3, r1
    ba76:	1ad3      	subs	r3, r2, r3
    ba78:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    ba7c:	f7ff fd1c 	bl	b4b8 <rx_queue_transfer>
		rx_tail = tail;
    ba80:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    ba84:	782b      	ldrb	r3, [r5, #0]
    ba86:	429c      	cmp	r4, r3
    ba88:	d1e4      	bne.n	ba54 <usb_serial_flush_input+0x20>
    ba8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba8e:	bf00      	nop
    ba90:	20002da0 	.word	0x20002da0
    ba94:	20002dc4 	.word	0x20002dc4
    ba98:	20002c84 	.word	0x20002c84
    ba9c:	20002da4 	.word	0x20002da4
    baa0:	20002dc0 	.word	0x20002dc0
    baa4:	20002db0 	.word	0x20002db0

0000baa8 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    baa8:	b500      	push	{lr}
    baaa:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    baac:	2101      	movs	r1, #1
    baae:	f10d 0007 	add.w	r0, sp, #7
    bab2:	f7ff ff21 	bl	b8f8 <usb_serial_read>
    bab6:	b120      	cbz	r0, bac2 <usb_serial_getchar+0x1a>
    bab8:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    babc:	b003      	add	sp, #12
    babe:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    bac2:	f04f 30ff 	mov.w	r0, #4294967295
    bac6:	e7f9      	b.n	babc <usb_serial_getchar+0x14>

0000bac8 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    bac8:	4b09      	ldr	r3, [pc, #36]	; (baf0 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    baca:	b500      	push	{lr}
    bacc:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    bace:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    bad0:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    bad4:	b923      	cbnz	r3, bae0 <usb_serial_putchar+0x18>
    bad6:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    bada:	b003      	add	sp, #12
    badc:	f85d fb04 	ldr.w	pc, [sp], #4
    bae0:	2101      	movs	r1, #1
    bae2:	f10d 0007 	add.w	r0, sp, #7
    bae6:	f7ff fdc3 	bl	b670 <usb_serial_write.part.1>
    baea:	b003      	add	sp, #12
    baec:	f85d fb04 	ldr.w	pc, [sp], #4
    baf0:	20002c80 	.word	0x20002c80

0000baf4 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    baf4:	4b04      	ldr	r3, [pc, #16]	; (bb08 <usb_serial_write+0x14>)
    baf6:	781b      	ldrb	r3, [r3, #0]
    baf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    bafc:	b10b      	cbz	r3, bb02 <usb_serial_write+0xe>
    bafe:	f7ff bdb7 	b.w	b670 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bb02:	4610      	mov	r0, r2
    bb04:	4770      	bx	lr
    bb06:	bf00      	nop
    bb08:	20002c80 	.word	0x20002c80

0000bb0c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    bb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    bb10:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    bb12:	f8df 8040 	ldr.w	r8, [pc, #64]	; bb54 <usb_serial_write_buffer_free+0x48>
    bb16:	2301      	movs	r3, #1
    bb18:	4d0c      	ldr	r5, [pc, #48]	; (bb4c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    bb1a:	4627      	mov	r7, r4
    bb1c:	4e0c      	ldr	r6, [pc, #48]	; (bb50 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    bb1e:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    bb22:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    bb24:	4628      	mov	r0, r5
    bb26:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    bb28:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    bb2a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    bb2e:	d005      	beq.n	bb3c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    bb30:	f7ff fc94 	bl	b45c <usb_transfer_status>
    bb34:	0603      	lsls	r3, r0, #24
    bb36:	bf58      	it	pl
    bb38:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    bb3c:	2c04      	cmp	r4, #4
    bb3e:	d1f0      	bne.n	bb22 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    bb40:	2300      	movs	r3, #0
	return sum;
}
    bb42:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    bb44:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb4c:	20002de0 	.word	0x20002de0
    bb50:	20002c97 	.word	0x20002c97
    bb54:	20002c96 	.word	0x20002c96

0000bb58 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    bb5c:	4b1f      	ldr	r3, [pc, #124]	; (bbdc <usb_serial_flush_output+0x84>)
    bb5e:	781b      	ldrb	r3, [r3, #0]
    bb60:	b113      	cbz	r3, bb68 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    bb62:	4d1f      	ldr	r5, [pc, #124]	; (bbe0 <usb_serial_flush_output+0x88>)
    bb64:	882a      	ldrh	r2, [r5, #0]
    bb66:	b90a      	cbnz	r2, bb6c <usb_serial_flush_output+0x14>
    bb68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    bb6c:	f8df 8084 	ldr.w	r8, [pc, #132]	; bbf4 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    bb70:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    bb74:	4e1b      	ldr	r6, [pc, #108]	; (bbe4 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    bb76:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    bb7a:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bb7e:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    bb80:	4c19      	ldr	r4, [pc, #100]	; (bbe8 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bb82:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    bb84:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    bb88:	4f18      	ldr	r7, [pc, #96]	; (bbec <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    bb8a:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bb8e:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    bb90:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    bb94:	4621      	mov	r1, r4
    bb96:	f7ff fc23 	bl	b3e0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    bb9a:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bb9e:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    bba2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    bba6:	4b12      	ldr	r3, [pc, #72]	; (bbf0 <usb_serial_flush_output+0x98>)
    bba8:	6019      	str	r1, [r3, #0]
		location += 32;
    bbaa:	3120      	adds	r1, #32
	} while (location < end_addr);
    bbac:	428a      	cmp	r2, r1
    bbae:	d8fb      	bhi.n	bba8 <usb_serial_flush_output+0x50>
	asm("dsb");
    bbb0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    bbb4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    bbb8:	2004      	movs	r0, #4
    bbba:	4631      	mov	r1, r6
    bbbc:	f7ff fc28 	bl	b410 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    bbc0:	f898 3000 	ldrb.w	r3, [r8]
    bbc4:	4a0b      	ldr	r2, [pc, #44]	; (bbf4 <usb_serial_flush_output+0x9c>)
    bbc6:	3301      	adds	r3, #1
    bbc8:	b2db      	uxtb	r3, r3
    bbca:	2b03      	cmp	r3, #3
    bbcc:	bf88      	it	hi
    bbce:	2300      	movhi	r3, #0
    bbd0:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    bbd2:	2300      	movs	r3, #0
    bbd4:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    bbd6:	703b      	strb	r3, [r7, #0]
    bbd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bbdc:	20002c80 	.word	0x20002c80
    bbe0:	20002dc6 	.word	0x20002dc6
    bbe4:	20002de0 	.word	0x20002de0
    bbe8:	20201060 	.word	0x20201060
    bbec:	20002c96 	.word	0x20002c96
    bbf0:	e000ef70 	.word	0xe000ef70
    bbf4:	20002c97 	.word	0x20002c97

0000bbf8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    bbf8:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bbfa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bbfe:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    bc00:	7f43      	ldrb	r3, [r0, #29]
    bc02:	b933      	cbnz	r3, bc12 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    bc04:	7f01      	ldrb	r1, [r0, #28]
    bc06:	2901      	cmp	r1, #1
    bc08:	d008      	beq.n	bc1c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    bc0a:	2903      	cmp	r1, #3
    bc0c:	d010      	beq.n	bc30 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    bc0e:	2301      	movs	r3, #1
    bc10:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bc12:	b902      	cbnz	r2, bc16 <EventResponder::triggerEventNotImmediate()+0x1e>
    bc14:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    bc16:	f85d 4b04 	ldr.w	r4, [sp], #4
    bc1a:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    bc1c:	4c11      	ldr	r4, [pc, #68]	; (bc64 <EventResponder::triggerEventNotImmediate()+0x6c>)
    bc1e:	6821      	ldr	r1, [r4, #0]
    bc20:	b1a1      	cbz	r1, bc4c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    bc22:	4911      	ldr	r1, [pc, #68]	; (bc68 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    bc24:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    bc26:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    bc28:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    bc2a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    bc2c:	6158      	str	r0, [r3, #20]
    bc2e:	e7ee      	b.n	bc0e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    bc30:	4c0e      	ldr	r4, [pc, #56]	; (bc6c <EventResponder::triggerEventNotImmediate()+0x74>)
    bc32:	6821      	ldr	r1, [r4, #0]
    bc34:	b181      	cbz	r1, bc58 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    bc36:	490e      	ldr	r1, [pc, #56]	; (bc70 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    bc38:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    bc3a:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    bc3c:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    bc3e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    bc40:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    bc42:	4b0c      	ldr	r3, [pc, #48]	; (bc74 <EventResponder::triggerEventNotImmediate()+0x7c>)
    bc44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    bc48:	6019      	str	r1, [r3, #0]
    bc4a:	e7e0      	b.n	bc0e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    bc4c:	4b06      	ldr	r3, [pc, #24]	; (bc68 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    bc4e:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    bc50:	6181      	str	r1, [r0, #24]
				firstYield = this;
    bc52:	6020      	str	r0, [r4, #0]
				lastYield = this;
    bc54:	6018      	str	r0, [r3, #0]
    bc56:	e7da      	b.n	bc0e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    bc58:	4b05      	ldr	r3, [pc, #20]	; (bc70 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    bc5a:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    bc5c:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    bc5e:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    bc60:	6018      	str	r0, [r3, #0]
    bc62:	e7ee      	b.n	bc42 <EventResponder::triggerEventNotImmediate()+0x4a>
    bc64:	20002e70 	.word	0x20002e70
    bc68:	20002e6c 	.word	0x20002e6c
    bc6c:	20002e60 	.word	0x20002e60
    bc70:	20002e64 	.word	0x20002e64
    bc74:	e000ed04 	.word	0xe000ed04

0000bc78 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    bc78:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bc7a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    bc7e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bc80:	4c0c      	ldr	r4, [pc, #48]	; (bcb4 <EventResponder::runFromInterrupt()+0x3c>)
    bc82:	6823      	ldr	r3, [r4, #0]
		if (first) {
    bc84:	b18b      	cbz	r3, bcaa <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bc86:	4e0c      	ldr	r6, [pc, #48]	; (bcb8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    bc88:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    bc8a:	695a      	ldr	r2, [r3, #20]
    bc8c:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    bc8e:	b17a      	cbz	r2, bcb0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    bc90:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bc92:	b901      	cbnz	r1, bc96 <EventResponder::runFromInterrupt()+0x1e>
    bc94:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    bc96:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    bc98:	4618      	mov	r0, r3
    bc9a:	689b      	ldr	r3, [r3, #8]
    bc9c:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bc9e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    bca2:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bca4:	6823      	ldr	r3, [r4, #0]
		if (first) {
    bca6:	2b00      	cmp	r3, #0
    bca8:	d1ef      	bne.n	bc8a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bcaa:	b901      	cbnz	r1, bcae <EventResponder::runFromInterrupt()+0x36>
    bcac:	b662      	cpsie	i
    bcae:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bcb0:	6032      	str	r2, [r6, #0]
    bcb2:	e7ee      	b.n	bc92 <EventResponder::runFromInterrupt()+0x1a>
    bcb4:	20002e60 	.word	0x20002e60
    bcb8:	20002e64 	.word	0x20002e64

0000bcbc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    bcbc:	f7ff bfdc 	b.w	bc78 <EventResponder::runFromInterrupt()>

0000bcc0 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    bcc0:	4a18      	ldr	r2, [pc, #96]	; (bd24 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    bcc2:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    bcc4:	6814      	ldr	r4, [r2, #0]
    bcc6:	2c00      	cmp	r4, #0
    bcc8:	d028      	beq.n	bd1c <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    bcca:	6803      	ldr	r3, [r0, #0]
    bccc:	6821      	ldr	r1, [r4, #0]
    bcce:	428b      	cmp	r3, r1
    bcd0:	d20f      	bcs.n	bcf2 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    bcd2:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    bcd4:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    bcd6:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    bcd8:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    bcda:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    bcdc:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    bcde:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    bce0:	2302      	movs	r3, #2
}
    bce2:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    bce4:	7503      	strb	r3, [r0, #20]
}
    bce6:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    bce8:	6003      	str	r3, [r0, #0]
    bcea:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    bcec:	6811      	ldr	r1, [r2, #0]
    bcee:	428b      	cmp	r3, r1
    bcf0:	d308      	bcc.n	bd04 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    bcf2:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    bcf4:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    bcf6:	2a00      	cmp	r2, #0
    bcf8:	d1f6      	bne.n	bce8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    bcfa:	6082      	str	r2, [r0, #8]
		_prev = timer;
    bcfc:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    bcfe:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    bd00:	60a0      	str	r0, [r4, #8]
    bd02:	e7ed      	b.n	bce0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    bd04:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    bd06:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    bd08:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    bd0a:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    bd0c:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    bd0e:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    bd10:	68c1      	ldr	r1, [r0, #12]
    bd12:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    bd14:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    bd16:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    bd18:	bc30      	pop	{r4, r5}
    bd1a:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    bd1c:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    bd1e:	60c4      	str	r4, [r0, #12]
		listActive = this;
    bd20:	6010      	str	r0, [r2, #0]
    bd22:	e7dd      	b.n	bce0 <MillisTimer::addToActiveList()+0x20>
    bd24:	20002e68 	.word	0x20002e68

0000bd28 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    bd2a:	4e22      	ldr	r6, [pc, #136]	; (bdb4 <MillisTimer::runFromTimer()+0x8c>)
    bd2c:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    bd2e:	b32c      	cbz	r4, bd7c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    bd30:	6823      	ldr	r3, [r4, #0]
    bd32:	2b00      	cmp	r3, #0
    bd34:	d13a      	bne.n	bdac <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    bd36:	461d      	mov	r5, r3
    bd38:	4f1f      	ldr	r7, [pc, #124]	; (bdb8 <MillisTimer::runFromTimer()+0x90>)
    bd3a:	e004      	b.n	bd46 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    bd3c:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    bd3e:	b1ec      	cbz	r4, bd7c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    bd40:	6823      	ldr	r3, [r4, #0]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d132      	bne.n	bdac <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    bd46:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    bd48:	b103      	cbz	r3, bd4c <MillisTimer::runFromTimer()+0x24>
    bd4a:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    bd4c:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    bd4e:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    bd50:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    bd52:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    bd54:	681b      	ldr	r3, [r3, #0]
    bd56:	42bb      	cmp	r3, r7
    bd58:	d121      	bne.n	bd9e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    bd5a:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    bd5c:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    bd5e:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    bd60:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    bd62:	d020      	beq.n	bda6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    bd64:	f7ff ff48 	bl	bbf8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    bd68:	6863      	ldr	r3, [r4, #4]
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d0e6      	beq.n	bd3c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    bd6e:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    bd70:	4620      	mov	r0, r4
    bd72:	f7ff ffa5 	bl	bcc0 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    bd76:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    bd78:	2c00      	cmp	r4, #0
    bd7a:	d1e1      	bne.n	bd40 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bd7c:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    bd80:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    bd82:	4a0e      	ldr	r2, [pc, #56]	; (bdbc <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    bd84:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    bd86:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    bd88:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    bd8a:	b903      	cbnz	r3, bd8e <MillisTimer::runFromTimer()+0x66>
    bd8c:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    bd8e:	b128      	cbz	r0, bd9c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    bd90:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    bd92:	f7ff ff95 	bl	bcc0 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    bd96:	4620      	mov	r0, r4
    bd98:	2800      	cmp	r0, #0
    bd9a:	d1f9      	bne.n	bd90 <MillisTimer::runFromTimer()+0x68>
    bd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    bd9e:	4622      	mov	r2, r4
    bda0:	2100      	movs	r1, #0
    bda2:	4798      	blx	r3
    bda4:	e7e0      	b.n	bd68 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    bda6:	6883      	ldr	r3, [r0, #8]
    bda8:	4798      	blx	r3
    bdaa:	e7dd      	b.n	bd68 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    bdac:	3b01      	subs	r3, #1
    bdae:	6023      	str	r3, [r4, #0]
			break;
    bdb0:	e7e4      	b.n	bd7c <MillisTimer::runFromTimer()+0x54>
    bdb2:	bf00      	nop
    bdb4:	20002e68 	.word	0x20002e68
    bdb8:	00009c95 	.word	0x00009c95
    bdbc:	20002e78 	.word	0x20002e78

0000bdc0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bdc0:	4a04      	ldr	r2, [pc, #16]	; (bdd4 <systick_isr+0x14>)
    bdc2:	4b05      	ldr	r3, [pc, #20]	; (bdd8 <systick_isr+0x18>)
    bdc4:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    bdc6:	4a05      	ldr	r2, [pc, #20]	; (bddc <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bdc8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    bdca:	6813      	ldr	r3, [r2, #0]
    bdcc:	3301      	adds	r3, #1
    bdce:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    bdd0:	f7ff bfaa 	b.w	bd28 <MillisTimer::runFromTimer()>
    bdd4:	e0001004 	.word	0xe0001004
    bdd8:	20002c0c 	.word	0x20002c0c
    bddc:	20002c14 	.word	0x20002c14

0000bde0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    bde0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    bde2:	f7f4 f97d 	bl	e0 <setup>
	while (1) {
		loop();
    bde6:	f7f4 fab7 	bl	358 <loop>
		yield();
    bdea:	f000 fb21 	bl	c430 <yield>
    bdee:	e7fa      	b.n	bde6 <main+0x6>

0000bdf0 <operator new(unsigned int)>:
    bdf0:	f000 bd8a 	b.w	c908 <malloc>

0000bdf4 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    bdf4:	f000 bd88 	b.w	c908 <malloc>

0000bdf8 <operator delete[](void*)>:
	free(ptr);
}

void operator delete[](void * ptr)
{
	free(ptr);
    bdf8:	f000 bd8e 	b.w	c918 <free>

0000bdfc <operator delete(void*, unsigned int)>:
    bdfc:	f000 bd8c 	b.w	c918 <free>

0000be00 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    be02:	460e      	mov	r6, r1
    be04:	b171      	cbz	r1, be24 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    be06:	b17a      	cbz	r2, be28 <Print::write(unsigned char const*, unsigned int)+0x28>
    be08:	4607      	mov	r7, r0
    be0a:	4614      	mov	r4, r2
    be0c:	2500      	movs	r5, #0
    be0e:	683b      	ldr	r3, [r7, #0]
    be10:	4638      	mov	r0, r7
    be12:	f816 1b01 	ldrb.w	r1, [r6], #1
    be16:	681b      	ldr	r3, [r3, #0]
    be18:	4798      	blx	r3
    be1a:	3c01      	subs	r4, #1
    be1c:	4405      	add	r5, r0
    be1e:	d1f6      	bne.n	be0e <Print::write(unsigned char const*, unsigned int)+0xe>
    be20:	4628      	mov	r0, r5
    be22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    be24:	4608      	mov	r0, r1
    be26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be28:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    be2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000be2c <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    be2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    be30:	688c      	ldr	r4, [r1, #8]
    be32:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    be34:	b1ec      	cbz	r4, be72 <Print::print(String const&)+0x46>
    be36:	2500      	movs	r5, #0
    be38:	4606      	mov	r6, r0
    be3a:	4689      	mov	r9, r1
    be3c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    be3e:	462b      	mov	r3, r5
    be40:	2221      	movs	r2, #33	; 0x21
    be42:	a901      	add	r1, sp, #4
    be44:	4648      	mov	r0, r9
    be46:	f000 fa97 	bl	c378 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    be4a:	2c20      	cmp	r4, #32
    be4c:	4623      	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    be4e:	6830      	ldr	r0, [r6, #0]
    be50:	bf28      	it	cs
    be52:	2320      	movcs	r3, #32
    be54:	a901      	add	r1, sp, #4
    be56:	f8d0 8004 	ldr.w	r8, [r0, #4]
    be5a:	4630      	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    be5c:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    be5e:	461a      	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    be60:	441d      	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    be62:	47c0      	blx	r8
    be64:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    be66:	2c00      	cmp	r4, #0
    be68:	d1e9      	bne.n	be3e <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    be6a:	4638      	mov	r0, r7
    be6c:	b00b      	add	sp, #44	; 0x2c
    be6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    be72:	4627      	mov	r7, r4
    be74:	e7f9      	b.n	be6a <Print::print(String const&)+0x3e>
    be76:	bf00      	nop

0000be78 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    be78:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    be7a:	4c06      	ldr	r4, [pc, #24]	; (be94 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    be7c:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    be7e:	6803      	ldr	r3, [r0, #0]
    be80:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    be82:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    be84:	a901      	add	r1, sp, #4
    be86:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    be88:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    be8c:	4798      	blx	r3
}
    be8e:	b002      	add	sp, #8
    be90:	bd10      	pop	{r4, pc}
    be92:	bf00      	nop
    be94:	20001b40 	.word	0x20001b40

0000be98 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    be98:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    be9a:	b510      	push	{r4, lr}
    be9c:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    be9e:	685b      	ldr	r3, [r3, #4]
    bea0:	4798      	blx	r3
	return len;
}
    bea2:	4620      	mov	r0, r4
    bea4:	bd10      	pop	{r4, pc}
    bea6:	bf00      	nop

0000bea8 <Print::printf(__FlashStringHelper const*, ...)>:
	return vdprintf((int)this, format, ap);
#endif
}

int Print::printf(const __FlashStringHelper *format, ...)
{
    bea8:	b40e      	push	{r1, r2, r3}
    beaa:	b500      	push	{lr}
    beac:	b082      	sub	sp, #8
    beae:	ab03      	add	r3, sp, #12
    beb0:	f853 1b04 	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;
#else
	return vdprintf((int)this, (const char *)format, ap);
    beb4:	461a      	mov	r2, r3
}

int Print::printf(const __FlashStringHelper *format, ...)
{
	va_list ap;
	va_start(ap, format);
    beb6:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;
#else
	return vdprintf((int)this, (const char *)format, ap);
    beb8:	f001 ff14 	bl	dce4 <vdprintf>
#endif
}
    bebc:	b002      	add	sp, #8
    bebe:	f85d eb04 	ldr.w	lr, [sp], #4
    bec2:	b003      	add	sp, #12
    bec4:	4770      	bx	lr
    bec6:	bf00      	nop

0000bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    beca:	4606      	mov	r6, r0
    becc:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    bece:	2a00      	cmp	r2, #0
    bed0:	d033      	beq.n	bf3a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    bed2:	2a01      	cmp	r2, #1
    bed4:	bf08      	it	eq
    bed6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    bed8:	b351      	cbz	r1, bf30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    beda:	2521      	movs	r5, #33	; 0x21
    bedc:	e000      	b.n	bee0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    bede:	b2fd      	uxtb	r5, r7
    bee0:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    bee2:	fbb1 f4f2 	udiv	r4, r1, r2
    bee6:	fb02 1114 	mls	r1, r2, r4, r1
    beea:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    beec:	2909      	cmp	r1, #9
    beee:	f100 0137 	add.w	r1, r0, #55	; 0x37
    bef2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    bef6:	bf88      	it	hi
    bef8:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    befa:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    befc:	ac0a      	add	r4, sp, #40	; 0x28
    befe:	bf98      	it	ls
    bf00:	b2c0      	uxtbls	r0, r0
    bf02:	442c      	add	r4, r5
    bf04:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    bf08:	2900      	cmp	r1, #0
    bf0a:	d1e8      	bne.n	bede <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    bf0c:	b133      	cbz	r3, bf1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    bf0e:	3d01      	subs	r5, #1
		buf[i] = '-';
    bf10:	ab0a      	add	r3, sp, #40	; 0x28
    bf12:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    bf14:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    bf16:	442b      	add	r3, r5
    bf18:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    bf1c:	6833      	ldr	r3, [r6, #0]
    bf1e:	a901      	add	r1, sp, #4
    bf20:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    bf24:	4630      	mov	r0, r6
    bf26:	4429      	add	r1, r5
    bf28:	685b      	ldr	r3, [r3, #4]
    bf2a:	4798      	blx	r3
}
    bf2c:	b00b      	add	sp, #44	; 0x2c
    bf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    bf30:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    bf32:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    bf34:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    bf38:	e7e8      	b.n	bf0c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    bf3a:	6803      	ldr	r3, [r0, #0]
    bf3c:	b2c9      	uxtb	r1, r1
    bf3e:	681b      	ldr	r3, [r3, #0]
    bf40:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    bf42:	b00b      	add	sp, #44	; 0x2c
    bf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf46:	bf00      	nop

0000bf48 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    bf48:	2900      	cmp	r1, #0
    bf4a:	db03      	blt.n	bf54 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    bf4c:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    bf4e:	220a      	movs	r2, #10
    bf50:	f7ff bfba 	b.w	bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    bf54:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    bf56:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    bf58:	220a      	movs	r2, #10
    bf5a:	f7ff bfb5 	b.w	bec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    bf5e:	bf00      	nop

0000bf60 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    bf60:	b570      	push	{r4, r5, r6, lr}
    bf62:	4d0a      	ldr	r5, [pc, #40]	; (bf8c <Stream::timedRead()+0x2c>)
    bf64:	4604      	mov	r4, r0
    bf66:	682e      	ldr	r6, [r5, #0]
    bf68:	e006      	b.n	bf78 <Stream::timedRead()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    bf6a:	f000 fa61 	bl	c430 <yield>
    bf6e:	682b      	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    bf70:	68a2      	ldr	r2, [r4, #8]
    bf72:	1b9b      	subs	r3, r3, r6
    bf74:	4293      	cmp	r3, r2
    bf76:	d206      	bcs.n	bf86 <Stream::timedRead()+0x26>
    c = read();
    bf78:	6823      	ldr	r3, [r4, #0]
    bf7a:	4620      	mov	r0, r4
    bf7c:	695b      	ldr	r3, [r3, #20]
    bf7e:	4798      	blx	r3
    if (c >= 0) return c;
    bf80:	2800      	cmp	r0, #0
    bf82:	dbf2      	blt.n	bf6a <Stream::timedRead()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    bf84:	bd70      	pop	{r4, r5, r6, pc}
  do {
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    bf86:	f04f 30ff 	mov.w	r0, #4294967295
}
    bf8a:	bd70      	pop	{r4, r5, r6, pc}
    bf8c:	20002c14 	.word	0x20002c14

0000bf90 <Stream::readString(unsigned int)>:
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}

String Stream::readString(size_t max)
{
    bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf92:	4616      	mov	r6, r2
    bf94:	460f      	mov	r7, r1
	String str;
    bf96:	2100      	movs	r1, #0
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}

String Stream::readString(size_t max)
{
    bf98:	4605      	mov	r5, r0
	String str;
    bf9a:	f000 f86f 	bl	c07c <String::String(char const*)>
	size_t length = 0;
	while (length < max) {
    bf9e:	b186      	cbz	r6, bfc2 <Stream::readString(unsigned int)+0x32>
    bfa0:	2400      	movs	r4, #0
    bfa2:	e004      	b.n	bfae <Stream::readString(unsigned int)+0x1e>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0) break;
    bfa4:	d00d      	beq.n	bfc2 <Stream::readString(unsigned int)+0x32>
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    bfa6:	f000 f979 	bl	c29c <String::append(char)>

String Stream::readString(size_t max)
{
	String str;
	size_t length = 0;
	while (length < max) {
    bfaa:	42a6      	cmp	r6, r4
    bfac:	d009      	beq.n	bfc2 <Stream::readString(unsigned int)+0x32>
		int c = timedRead();
    bfae:	4638      	mov	r0, r7
			setReadError();
			break;	// timeout
		}
		if (c == 0) break;
		str += (char)c;
		length++;
    bfb0:	3401      	adds	r4, #1
String Stream::readString(size_t max)
{
	String str;
	size_t length = 0;
	while (length < max) {
		int c = timedRead();
    bfb2:	f7ff ffd5 	bl	bf60 <Stream::timedRead()>
		if (c < 0) {
    bfb6:	1e01      	subs	r1, r0, #0
    bfb8:	4628      	mov	r0, r5
    bfba:	b2c9      	uxtb	r1, r1
    bfbc:	daf2      	bge.n	bfa4 <Stream::readString(unsigned int)+0x14>
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    bfbe:	2301      	movs	r3, #1
    bfc0:	733b      	strb	r3, [r7, #12]
		if (c == 0) break;
		str += (char)c;
		length++;
	}
	return str;
}
    bfc2:	4628      	mov	r0, r5
    bfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfc6:	bf00      	nop

0000bfc8 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    bfc8:	f7ff bd34 	b.w	ba34 <usb_serial_flush_input>

0000bfcc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    bfcc:	f7ff bd0a 	b.w	b9e4 <usb_serial_peekchar>

0000bfd0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    bfd0:	f7ff bd6a 	b.w	baa8 <usb_serial_getchar>

0000bfd4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    bfd4:	f7ff bd28 	b.w	ba28 <usb_serial_available>

0000bfd8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    bfd8:	f7ff bdbe 	b.w	bb58 <usb_serial_flush_output>

0000bfdc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    bfdc:	f7ff bd96 	b.w	bb0c <usb_serial_write_buffer_free>

0000bfe0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bfe0:	4608      	mov	r0, r1
    bfe2:	4611      	mov	r1, r2
    bfe4:	f7ff bd86 	b.w	baf4 <usb_serial_write>

0000bfe8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bfe8:	4608      	mov	r0, r1
    bfea:	f7ff bd6d 	b.w	bac8 <usb_serial_putchar>
    bfee:	bf00      	nop

0000bff0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    bff0:	4b01      	ldr	r3, [pc, #4]	; (bff8 <serialEvent()+0x8>)
    bff2:	2200      	movs	r2, #0
    bff4:	701a      	strb	r2, [r3, #0]
    bff6:	4770      	bx	lr
    bff8:	20001ea2 	.word	0x20001ea2

0000bffc <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    bffc:	b510      	push	{r4, lr}
    bffe:	4604      	mov	r4, r0
{
	free(buffer);
    c000:	6800      	ldr	r0, [r0, #0]
    c002:	f000 fc89 	bl	c918 <free>
}
    c006:	4620      	mov	r0, r4
    c008:	bd10      	pop	{r4, pc}
    c00a:	bf00      	nop

0000c00c <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    c00c:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    c00e:	6843      	ldr	r3, [r0, #4]
    c010:	428b      	cmp	r3, r1
    c012:	d301      	bcc.n	c018 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c014:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    c016:	bd38      	pop	{r3, r4, r5, pc}
    c018:	460d      	mov	r5, r1
    c01a:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    c01c:	3101      	adds	r1, #1
    c01e:	6800      	ldr	r0, [r0, #0]
    c020:	f001 f838 	bl	d094 <realloc>
	if (newbuffer) {
    c024:	2800      	cmp	r0, #0
    c026:	d0f6      	beq.n	c016 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c028:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    c02a:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c02e:	2b00      	cmp	r3, #0
    c030:	d1f0      	bne.n	c014 <String::reserve(unsigned int)+0x8>
    c032:	7003      	strb	r3, [r0, #0]
    c034:	e7ee      	b.n	c014 <String::reserve(unsigned int)+0x8>
    c036:	bf00      	nop

0000c038 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c03a:	4604      	mov	r4, r0
	if (length == 0) {
    c03c:	4615      	mov	r5, r2
    c03e:	b932      	cbnz	r2, c04e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    c040:	6803      	ldr	r3, [r0, #0]
    c042:	b103      	cbz	r3, c046 <String::copy(char const*, unsigned int)+0xe>
    c044:	701a      	strb	r2, [r3, #0]
		len = 0;
    c046:	2300      	movs	r3, #0
    c048:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c04a:	4620      	mov	r0, r4
    c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c04e:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    c050:	4611      	mov	r1, r2
    c052:	f7ff ffdb 	bl	c00c <String::reserve(unsigned int)>
    c056:	4607      	mov	r7, r0
    c058:	b948      	cbnz	r0, c06e <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    c05a:	6820      	ldr	r0, [r4, #0]
    c05c:	b110      	cbz	r0, c064 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    c05e:	f000 fc5b 	bl	c918 <free>
			buffer = NULL;
    c062:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    c064:	2300      	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c066:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    c068:	6063      	str	r3, [r4, #4]
    c06a:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    c06e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    c070:	4631      	mov	r1, r6
    c072:	6820      	ldr	r0, [r4, #0]
    c074:	f001 fbf2 	bl	d85c <strcpy>
	return *this;
    c078:	e7e7      	b.n	c04a <String::copy(char const*, unsigned int)+0x12>
    c07a:	bf00      	nop

0000c07c <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    c07c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c07e:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    c080:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c082:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c084:	6043      	str	r3, [r0, #4]
	len = 0;
    c086:	6083      	str	r3, [r0, #8]
	flags = 0;
    c088:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    c08a:	b141      	cbz	r1, c09e <String::String(char const*)+0x22>
    c08c:	460d      	mov	r5, r1
    c08e:	4608      	mov	r0, r1
    c090:	f001 fc56 	bl	d940 <strlen>
    c094:	4602      	mov	r2, r0
    c096:	4629      	mov	r1, r5
    c098:	4620      	mov	r0, r4
    c09a:	f7ff ffcd 	bl	c038 <String::copy(char const*, unsigned int)>
}
    c09e:	4620      	mov	r0, r4
    c0a0:	bd38      	pop	{r3, r4, r5, pc}
    c0a2:	bf00      	nop

0000c0a4 <String::String(__FlashStringHelper const*)>:

String::String(const __FlashStringHelper *pgmstr)
    c0a4:	b538      	push	{r3, r4, r5, lr}
    c0a6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c0a8:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    c0aa:	460d      	mov	r5, r1
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    c0ac:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c0ae:	6023      	str	r3, [r4, #0]
	capacity = 0;
    c0b0:	6063      	str	r3, [r4, #4]
	len = 0;
    c0b2:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c0b4:	7323      	strb	r3, [r4, #12]
    c0b6:	f001 fc43 	bl	d940 <strlen>
    c0ba:	4629      	mov	r1, r5
    c0bc:	4602      	mov	r2, r0
    c0be:	4620      	mov	r0, r4
    c0c0:	f7ff ffba 	bl	c038 <String::copy(char const*, unsigned int)>

String::String(const __FlashStringHelper *pgmstr)
{
	init();
	*this = pgmstr;
}
    c0c4:	4620      	mov	r0, r4
    c0c6:	bd38      	pop	{r3, r4, r5, pc}

0000c0c8 <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c0c8:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c0ca:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    c0cc:	b510      	push	{r4, lr}
    c0ce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c0d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c0d2:	6043      	str	r3, [r0, #4]
	len = 0;
    c0d4:	6083      	str	r3, [r0, #8]
	flags = 0;
    c0d6:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c0d8:	d003      	beq.n	c0e2 <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    c0da:	688a      	ldr	r2, [r1, #8]
    c0dc:	6809      	ldr	r1, [r1, #0]
    c0de:	f7ff ffab 	bl	c038 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    c0e2:	4620      	mov	r0, r4
    c0e4:	bd10      	pop	{r4, pc}
    c0e6:	bf00      	nop

0000c0e8 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    c0e8:	b538      	push	{r3, r4, r5, lr}
    c0ea:	460c      	mov	r4, r1
    c0ec:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    c0ee:	4608      	mov	r0, r1
    c0f0:	f001 fc26 	bl	d940 <strlen>
    c0f4:	4621      	mov	r1, r4
    c0f6:	4602      	mov	r2, r0
    c0f8:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    c0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    c0fe:	f7ff bf9b 	b.w	c038 <String::copy(char const*, unsigned int)>
    c102:	bf00      	nop

0000c104 <String::String(unsigned char)>:
{
	init();
	*this = c;
}

String::String(unsigned char c)
    c104:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c106:	2300      	movs	r3, #0
{
	init();
	*this = c;
}

String::String(unsigned char c)
    c108:	4604      	mov	r4, r0
    c10a:	b082      	sub	sp, #8
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c10c:	220a      	movs	r2, #10
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c10e:	6023      	str	r3, [r4, #0]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c110:	4608      	mov	r0, r1
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c112:	6063      	str	r3, [r4, #4]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c114:	a901      	add	r1, sp, #4

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
    c116:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c118:	7323      	strb	r3, [r4, #12]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    c11a:	f001 fdbb 	bl	dc94 <utoa>
    c11e:	a901      	add	r1, sp, #4
    c120:	4620      	mov	r0, r4
    c122:	f7ff ffe1 	bl	c0e8 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    c126:	4620      	mov	r0, r4
    c128:	b002      	add	sp, #8
    c12a:	bd10      	pop	{r4, pc}

0000c12c <String::String(int, unsigned char)>:

String::String(const int value, unsigned char base)
    c12c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c12e:	2300      	movs	r3, #0
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    c130:	4604      	mov	r4, r0
    c132:	b086      	sub	sp, #24
{
	init();
	char buf[18];
	itoa(value, buf, base);
    c134:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c136:	6023      	str	r3, [r4, #0]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    c138:	a901      	add	r1, sp, #4
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c13a:	6063      	str	r3, [r4, #4]
	len = 0;
    c13c:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c13e:	7323      	strb	r3, [r4, #12]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    c140:	f000 fbc6 	bl	c8d0 <itoa>
    c144:	a901      	add	r1, sp, #4
    c146:	4620      	mov	r0, r4
    c148:	f7ff ffce 	bl	c0e8 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    c14c:	4620      	mov	r0, r4
    c14e:	b006      	add	sp, #24
    c150:	bd10      	pop	{r4, pc}
    c152:	bf00      	nop

0000c154 <String::String(unsigned long, unsigned char)>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    c154:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c156:	2300      	movs	r3, #0
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    c158:	4604      	mov	r4, r0
    c15a:	b08a      	sub	sp, #40	; 0x28
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    c15c:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c15e:	6023      	str	r3, [r4, #0]

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    c160:	a901      	add	r1, sp, #4
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c162:	6063      	str	r3, [r4, #4]
	len = 0;
    c164:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c166:	7323      	strb	r3, [r4, #12]

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    c168:	f000 f9b2 	bl	c4d0 <ultoa>
    c16c:	a901      	add	r1, sp, #4
    c16e:	4620      	mov	r0, r4
    c170:	f7ff ffba 	bl	c0e8 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    c174:	4620      	mov	r0, r4
    c176:	b00a      	add	sp, #40	; 0x28
    c178:	bd10      	pop	{r4, pc}
    c17a:	bf00      	nop

0000c17c <String::move(String&)>:
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    c17c:	b538      	push	{r3, r4, r5, lr}
    c17e:	4605      	mov	r5, r0
	if (buffer) {
    c180:	6800      	ldr	r0, [r0, #0]
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    c182:	460c      	mov	r4, r1
	if (buffer) {
    c184:	b128      	cbz	r0, c192 <String::move(String&)+0x16>
		if (capacity >= rhs.len) {
    c186:	686a      	ldr	r2, [r5, #4]
    c188:	688b      	ldr	r3, [r1, #8]
    c18a:	429a      	cmp	r2, r3
    c18c:	d20b      	bcs.n	c1a6 <String::move(String&)+0x2a>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    c18e:	f000 fbc3 	bl	c918 <free>
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
    c192:	2300      	movs	r3, #0
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    c194:	6820      	ldr	r0, [r4, #0]
	capacity = rhs.capacity;
    c196:	6861      	ldr	r1, [r4, #4]
	len = rhs.len;
    c198:	68a2      	ldr	r2, [r4, #8]
    c19a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	rhs.buffer = NULL;
    c19e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    c1a0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    c1a2:	60a3      	str	r3, [r4, #8]
    c1a4:	bd38      	pop	{r3, r4, r5, pc}

void String::move(String &rhs)
{
	if (buffer) {
		if (capacity >= rhs.len) {
			strcpy(buffer, rhs.buffer);
    c1a6:	6809      	ldr	r1, [r1, #0]
    c1a8:	f001 fb58 	bl	d85c <strcpy>
			len = rhs.len;
    c1ac:	68a2      	ldr	r2, [r4, #8]
			rhs.len = 0;
    c1ae:	2300      	movs	r3, #0
void String::move(String &rhs)
{
	if (buffer) {
		if (capacity >= rhs.len) {
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
    c1b0:	60aa      	str	r2, [r5, #8]
			rhs.len = 0;
    c1b2:	60a3      	str	r3, [r4, #8]
			return;
    c1b4:	bd38      	pop	{r3, r4, r5, pc}
    c1b6:	bf00      	nop

0000c1b8 <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c1b8:	4281      	cmp	r1, r0
    c1ba:	d003      	beq.n	c1c4 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    c1bc:	688a      	ldr	r2, [r1, #8]
    c1be:	6809      	ldr	r1, [r1, #0]
    c1c0:	f7ff bf3a 	b.w	c038 <String::copy(char const*, unsigned int)>
}
    c1c4:	4770      	bx	lr
    c1c6:	bf00      	nop

0000c1c8 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
    c1c8:	4288      	cmp	r0, r1
	return copy(rhs.buffer, rhs.len);
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    c1ca:	b510      	push	{r4, lr}
    c1cc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    c1ce:	d001      	beq.n	c1d4 <String::operator=(String&&)+0xc>
    c1d0:	f7ff ffd4 	bl	c17c <String::move(String&)>
	return *this;
}
    c1d4:	4620      	mov	r0, r4
    c1d6:	bd10      	pop	{r4, pc}

0000c1d8 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    c1d8:	b510      	push	{r4, lr}
    c1da:	4604      	mov	r4, r0
	if (cstr) {
    c1dc:	b119      	cbz	r1, c1e6 <String::operator=(char const*)+0xe>
    c1de:	f7ff ff83 	bl	c0e8 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    c1e2:	4620      	mov	r0, r4
    c1e4:	bd10      	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    c1e6:	60a1      	str	r1, [r4, #8]
	}
	return *this;
}
    c1e8:	4620      	mov	r0, r4
    c1ea:	bd10      	pop	{r4, pc}

0000c1ec <String::operator=(__FlashStringHelper const*)>:

String & String::operator = (const __FlashStringHelper *pgmstr)
{
    c1ec:	b538      	push	{r3, r4, r5, lr}
    c1ee:	4604      	mov	r4, r0
    c1f0:	460d      	mov	r5, r1
    c1f2:	4608      	mov	r0, r1
    c1f4:	f001 fba4 	bl	d940 <strlen>
    c1f8:	4629      	mov	r1, r5
    c1fa:	4602      	mov	r2, r0
    c1fc:	4620      	mov	r0, r4
    c1fe:	f7ff ff1b 	bl	c038 <String::copy(char const*, unsigned int)>
	copy(pgmstr);
	return *this;
}
    c202:	4620      	mov	r0, r4
    c204:	bd38      	pop	{r3, r4, r5, pc}
    c206:	bf00      	nop

0000c208 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c20c:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c20e:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c210:	4604      	mov	r4, r0
    c212:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c214:	42bb      	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    c216:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c218:	d80a      	bhi.n	c230 <String::append(char const*, unsigned int)+0x28>
    c21a:	185a      	adds	r2, r3, r1
    c21c:	4297      	cmp	r7, r2
    c21e:	d207      	bcs.n	c230 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    c220:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    c224:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c228:	b935      	cbnz	r5, c238 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    c22a:	4620      	mov	r0, r4
    c22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    c230:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c234:	2d00      	cmp	r5, #0
    c236:	d0f8      	beq.n	c22a <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    c238:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c23a:	4620      	mov	r0, r4
    c23c:	4631      	mov	r1, r6
    c23e:	f7ff fee5 	bl	c00c <String::reserve(unsigned int)>
    c242:	2800      	cmp	r0, #0
    c244:	d0f1      	beq.n	c22a <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    c246:	f1b8 0f00 	cmp.w	r8, #0
    c24a:	d00e      	beq.n	c26a <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    c24c:	6823      	ldr	r3, [r4, #0]
    c24e:	462a      	mov	r2, r5
    c250:	68a0      	ldr	r0, [r4, #8]
    c252:	eb03 0109 	add.w	r1, r3, r9
    c256:	4418      	add	r0, r3
    c258:	f7fd ff24 	bl	a0a4 <memcpy>
		buffer[newlen] = 0;
    c25c:	6823      	ldr	r3, [r4, #0]
    c25e:	2200      	movs	r2, #0
    c260:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    c262:	60a6      	str	r6, [r4, #8]
	return *this;
}
    c264:	4620      	mov	r0, r4
    c266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    c26a:	6820      	ldr	r0, [r4, #0]
    c26c:	4639      	mov	r1, r7
    c26e:	68a3      	ldr	r3, [r4, #8]
    c270:	4418      	add	r0, r3
    c272:	f001 faf3 	bl	d85c <strcpy>
    c276:	e7f4      	b.n	c262 <String::append(char const*, unsigned int)+0x5a>

0000c278 <String::append(String const&)>:
/*  Append                                   */
/*********************************************/

String & String::append(const String &s)
{
	return append(s.buffer, s.len);
    c278:	688a      	ldr	r2, [r1, #8]
    c27a:	6809      	ldr	r1, [r1, #0]
    c27c:	f7ff bfc4 	b.w	c208 <String::append(char const*, unsigned int)>

0000c280 <String::append(char const*)>:
	len = newlen;
	return *this;
}

String & String::append(const char *cstr)
{
    c280:	b538      	push	{r3, r4, r5, lr}
    c282:	4605      	mov	r5, r0
	if (cstr) append(cstr, strlen(cstr));
    c284:	b141      	cbz	r1, c298 <String::append(char const*)+0x18>
    c286:	460c      	mov	r4, r1
    c288:	4608      	mov	r0, r1
    c28a:	f001 fb59 	bl	d940 <strlen>
    c28e:	4602      	mov	r2, r0
    c290:	4621      	mov	r1, r4
    c292:	4628      	mov	r0, r5
    c294:	f7ff ffb8 	bl	c208 <String::append(char const*, unsigned int)>
	return *this;
}
    c298:	4628      	mov	r0, r5
    c29a:	bd38      	pop	{r3, r4, r5, pc}

0000c29c <String::append(char)>:

String & String::append(char c)
{
    c29c:	b510      	push	{r4, lr}
    c29e:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    c2a0:	2300      	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    c2a2:	4604      	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    c2a4:	2201      	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    c2a6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    c2aa:	a901      	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    c2ac:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    c2b0:	f7ff ffaa 	bl	c208 <String::append(char const*, unsigned int)>
	return *this;
}
    c2b4:	4620      	mov	r0, r4
    c2b6:	b002      	add	sp, #8
    c2b8:	bd10      	pop	{r4, pc}
    c2ba:	bf00      	nop

0000c2bc <String::append(int)>:

String & String::append(int num)
{
    c2bc:	b510      	push	{r4, lr}
    c2be:	b084      	sub	sp, #16
    c2c0:	4604      	mov	r4, r0
	char buf[12];
	ltoa((long)num, buf, 10);
    c2c2:	220a      	movs	r2, #10
    c2c4:	4608      	mov	r0, r1
    c2c6:	a901      	add	r1, sp, #4
    c2c8:	f000 f92a 	bl	c520 <ltoa>
	append(buf, strlen(buf));
    c2cc:	a801      	add	r0, sp, #4
    c2ce:	f001 fb37 	bl	d940 <strlen>
    c2d2:	a901      	add	r1, sp, #4
    c2d4:	4602      	mov	r2, r0
    c2d6:	4620      	mov	r0, r4
    c2d8:	f7ff ff96 	bl	c208 <String::append(char const*, unsigned int)>
	return *this;
}
    c2dc:	4620      	mov	r0, r4
    c2de:	b004      	add	sp, #16
    c2e0:	bd10      	pop	{r4, pc}
    c2e2:	bf00      	nop

0000c2e4 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    c2e4:	b510      	push	{r4, lr}
    c2e6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    c2e8:	688a      	ldr	r2, [r1, #8]
    c2ea:	6809      	ldr	r1, [r1, #0]
    c2ec:	f7ff ff8c 	bl	c208 <String::append(char const*, unsigned int)>
	return a;
}
    c2f0:	4620      	mov	r0, r4
    c2f2:	bd10      	pop	{r4, pc}

0000c2f4 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    c2f4:	b538      	push	{r3, r4, r5, lr}
    c2f6:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    c2f8:	b141      	cbz	r1, c30c <operator+(StringSumHelper const&, char const*)+0x18>
    c2fa:	460c      	mov	r4, r1
    c2fc:	4608      	mov	r0, r1
    c2fe:	f001 fb1f 	bl	d940 <strlen>
    c302:	4602      	mov	r2, r0
    c304:	4621      	mov	r1, r4
    c306:	4628      	mov	r0, r5
    c308:	f7ff ff7e 	bl	c208 <String::append(char const*, unsigned int)>
	return a;
}
    c30c:	4628      	mov	r0, r5
    c30e:	bd38      	pop	{r3, r4, r5, pc}

0000c310 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c310:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    c312:	b508      	push	{r3, lr}
    c314:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c316:	b92a      	cbnz	r2, c324 <String::equals(char const*) const+0x14>
    c318:	b171      	cbz	r1, c338 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    c31a:	7818      	ldrb	r0, [r3, #0]
    c31c:	fab0 f080 	clz	r0, r0
    c320:	0940      	lsrs	r0, r0, #5
    c322:	bd08      	pop	{r3, pc}
    c324:	b131      	cbz	r1, c334 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    c326:	6800      	ldr	r0, [r0, #0]
    c328:	f001 f92e 	bl	d588 <strcmp>
    c32c:	fab0 f080 	clz	r0, r0
    c330:	0940      	lsrs	r0, r0, #5
}
    c332:	bd08      	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    c334:	6803      	ldr	r3, [r0, #0]
    c336:	e7f0      	b.n	c31a <String::equals(char const*) const+0xa>
    c338:	2001      	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c33a:	bd08      	pop	{r3, pc}

0000c33c <String::charAt(unsigned int) const>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    c33c:	6883      	ldr	r3, [r0, #8]
    c33e:	4299      	cmp	r1, r3
    c340:	d203      	bcs.n	c34a <String::charAt(unsigned int) const+0xe>
    c342:	6800      	ldr	r0, [r0, #0]
    c344:	b110      	cbz	r0, c34c <String::charAt(unsigned int) const+0x10>
	return buffer[index];
    c346:	5c40      	ldrb	r0, [r0, r1]
    c348:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    c34a:	2000      	movs	r0, #0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
    c34c:	4770      	bx	lr
    c34e:	bf00      	nop

0000c350 <String::setCharAt(unsigned int, char)>:

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
    c350:	6883      	ldr	r3, [r0, #8]
    c352:	428b      	cmp	r3, r1
    c354:	d901      	bls.n	c35a <String::setCharAt(unsigned int, char)+0xa>
    c356:	6803      	ldr	r3, [r0, #0]
    c358:	545a      	strb	r2, [r3, r1]
    c35a:	4770      	bx	lr

0000c35c <String::operator[](unsigned int)>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    c35c:	6883      	ldr	r3, [r0, #8]
    c35e:	428b      	cmp	r3, r1
    c360:	d903      	bls.n	c36a <String::operator[](unsigned int)+0xe>
    c362:	6800      	ldr	r0, [r0, #0]
    c364:	b108      	cbz	r0, c36a <String::operator[](unsigned int)+0xe>
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    c366:	4408      	add	r0, r1
}
    c368:	4770      	bx	lr

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    c36a:	4b02      	ldr	r3, [pc, #8]	; (c374 <String::operator[](unsigned int)+0x18>)
    c36c:	2200      	movs	r2, #0
		return dummy_writable_char;
    c36e:	4618      	mov	r0, r3

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    c370:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    c372:	4770      	bx	lr
    c374:	20002e7c 	.word	0x20002e7c

0000c378 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    c378:	b1ba      	cbz	r2, c3aa <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    c37a:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    c37c:	fab1 f481 	clz	r4, r1
    c380:	0964      	lsrs	r4, r4, #5
    c382:	b97c      	cbnz	r4, c3a4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    c384:	6886      	ldr	r6, [r0, #8]
    c386:	429e      	cmp	r6, r3
    c388:	d90d      	bls.n	c3a6 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    c38a:	1af6      	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    c38c:	3a01      	subs	r2, #1
    c38e:	460d      	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    c390:	6801      	ldr	r1, [r0, #0]
    c392:	4296      	cmp	r6, r2
    c394:	4628      	mov	r0, r5
    c396:	4419      	add	r1, r3
    c398:	bf28      	it	cs
    c39a:	4616      	movcs	r6, r2
    c39c:	4632      	mov	r2, r6
    c39e:	f001 fb3d 	bl	da1c <strncpy>
	buf[n] = 0;
    c3a2:	55ac      	strb	r4, [r5, r6]
    c3a4:	bd70      	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    c3a6:	700c      	strb	r4, [r1, #0]
		return;
    c3a8:	bd70      	pop	{r4, r5, r6, pc}
    c3aa:	4770      	bx	lr

0000c3ac <String::substring(unsigned int, unsigned int) const>:
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    c3ac:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    c3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3b0:	4604      	mov	r4, r0
    c3b2:	460e      	mov	r6, r1
	if (left > right) {
    c3b4:	d902      	bls.n	c3bc <String::substring(unsigned int, unsigned int) const+0x10>
    c3b6:	4611      	mov	r1, r2
    c3b8:	461a      	mov	r2, r3
    c3ba:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c3bc:	2100      	movs	r1, #0
	capacity = 0;
	len = 0;
    c3be:	60a1      	str	r1, [r4, #8]
	flags = 0;
    c3c0:	7321      	strb	r1, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    c3c2:	68b0      	ldr	r0, [r6, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c3c4:	6021      	str	r1, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    c3c6:	4282      	cmp	r2, r0
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    c3c8:	6061      	str	r1, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    c3ca:	d80e      	bhi.n	c3ea <String::substring(unsigned int, unsigned int) const+0x3e>
    c3cc:	4283      	cmp	r3, r0
    c3ce:	bf28      	it	cs
    c3d0:	4603      	movcs	r3, r0
    c3d2:	461d      	mov	r5, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    c3d4:	6833      	ldr	r3, [r6, #0]
    c3d6:	5d5f      	ldrb	r7, [r3, r5]
	buffer[right] = '\0';	
    c3d8:	5559      	strb	r1, [r3, r5]
	out = buffer + left;  // pointer arithmetic
    c3da:	6833      	ldr	r3, [r6, #0]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    c3dc:	1899      	adds	r1, r3, r2
    c3de:	d006      	beq.n	c3ee <String::substring(unsigned int, unsigned int) const+0x42>
    c3e0:	4620      	mov	r0, r4
    c3e2:	f7ff fe81 	bl	c0e8 <String::operator=(char const*) [clone .part.3]>
    c3e6:	6833      	ldr	r3, [r6, #0]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    c3e8:	555f      	strb	r7, [r3, r5]
	return out;
}
    c3ea:	4620      	mov	r0, r4
    c3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    c3ee:	60a1      	str	r1, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    c3f0:	555f      	strb	r7, [r3, r5]
    c3f2:	e7fa      	b.n	c3ea <String::substring(unsigned int, unsigned int) const+0x3e>

0000c3f4 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    c3f4:	b510      	push	{r4, lr}
    c3f6:	4604      	mov	r4, r0
	return substring(left, len);
    c3f8:	688b      	ldr	r3, [r1, #8]
    c3fa:	f7ff ffd7 	bl	c3ac <String::substring(unsigned int, unsigned int) const>
}
    c3fe:	4620      	mov	r0, r4
    c400:	bd10      	pop	{r4, pc}
    c402:	bf00      	nop

0000c404 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    c404:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    c406:	6804      	ldr	r4, [r0, #0]
	}
	return *this;
}

String & String::toLowerCase(void)
{
    c408:	4605      	mov	r5, r0
	if (!buffer) return *this;
    c40a:	b144      	cbz	r4, c41e <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    c40c:	7820      	ldrb	r0, [r4, #0]
    c40e:	b130      	cbz	r0, c41e <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    c410:	f001 fbf2 	bl	dbf8 <tolower>
    c414:	7020      	strb	r0, [r4, #0]
}

String & String::toLowerCase(void)
{
	if (!buffer) return *this;
	for (char *p = buffer; *p; p++) {
    c416:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    c41a:	2800      	cmp	r0, #0
    c41c:	d1f8      	bne.n	c410 <String::toLowerCase()+0xc>
		*p = tolower(*p);
	}
	return *this;
}
    c41e:	4628      	mov	r0, r5
    c420:	bd38      	pop	{r3, r4, r5, pc}
    c422:	bf00      	nop

0000c424 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    c424:	6800      	ldr	r0, [r0, #0]
    c426:	b108      	cbz	r0, c42c <String::toInt() const+0x8>
    c428:	f000 ba02 	b.w	c830 <atol>
	return 0;
}
    c42c:	4770      	bx	lr
    c42e:	bf00      	nop

0000c430 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c430:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    c432:	4c21      	ldr	r4, [pc, #132]	; (c4b8 <yield+0x88>)
    c434:	7823      	ldrb	r3, [r4, #0]
    c436:	b983      	cbnz	r3, c45a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c438:	4b20      	ldr	r3, [pc, #128]	; (c4bc <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    c43a:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c43c:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    c43e:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c440:	bb1b      	cbnz	r3, c48a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    c442:	4b1f      	ldr	r3, [pc, #124]	; (c4c0 <yield+0x90>)
    c444:	781b      	ldrb	r3, [r3, #0]
    c446:	2b00      	cmp	r3, #0
    c448:	d129      	bne.n	c49e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    c44a:	4b1e      	ldr	r3, [pc, #120]	; (c4c4 <yield+0x94>)

	running = 0;
    c44c:	2100      	movs	r1, #0
    c44e:	681a      	ldr	r2, [r3, #0]
    c450:	7021      	strb	r1, [r4, #0]
    c452:	b112      	cbz	r2, c45a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c454:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c458:	b102      	cbz	r2, c45c <yield+0x2c>
    c45a:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c45c:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    c460:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    c462:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    c464:	b1f2      	cbz	r2, c4a4 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    c466:	4c18      	ldr	r4, [pc, #96]	; (c4c8 <yield+0x98>)
    c468:	7821      	ldrb	r1, [r4, #0]
    c46a:	b9d9      	cbnz	r1, c4a4 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    c46c:	2601      	movs	r6, #1
		firstYield = first->_next;
    c46e:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    c470:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    c472:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    c474:	b1d5      	cbz	r5, c4ac <yield+0x7c>
			firstYield->_prev = nullptr;
    c476:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c478:	b900      	cbnz	r0, c47c <yield+0x4c>
    c47a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    c47c:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c47e:	6893      	ldr	r3, [r2, #8]
    c480:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    c482:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    c484:	4798      	blx	r3
		runningFromYield = false;
    c486:	7025      	strb	r5, [r4, #0]
    c488:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    c48a:	f7ff facd 	bl	ba28 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    c48e:	2800      	cmp	r0, #0
    c490:	d0d7      	beq.n	c442 <yield+0x12>
    c492:	f7ff fdad 	bl	bff0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    c496:	4b0a      	ldr	r3, [pc, #40]	; (c4c0 <yield+0x90>)
    c498:	781b      	ldrb	r3, [r3, #0]
    c49a:	2b00      	cmp	r3, #0
    c49c:	d0d5      	beq.n	c44a <yield+0x1a>
    c49e:	f000 f9ad 	bl	c7fc <HardwareSerial::processSerialEvents()>
    c4a2:	e7d2      	b.n	c44a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d1d8      	bne.n	c45a <yield+0x2a>
    c4a8:	b662      	cpsie	i
    c4aa:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    c4ac:	4b07      	ldr	r3, [pc, #28]	; (c4cc <yield+0x9c>)
    c4ae:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c4b0:	2800      	cmp	r0, #0
    c4b2:	d1e3      	bne.n	c47c <yield+0x4c>
    c4b4:	e7e1      	b.n	c47a <yield+0x4a>
    c4b6:	bf00      	nop
    c4b8:	20002e7d 	.word	0x20002e7d
    c4bc:	20001ea2 	.word	0x20001ea2
    c4c0:	20002e9c 	.word	0x20002e9c
    c4c4:	20002e70 	.word	0x20002e70
    c4c8:	20002e74 	.word	0x20002e74
    c4cc:	20002e6c 	.word	0x20002e6c

0000c4d0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c4d0:	b4f0      	push	{r4, r5, r6, r7}
    c4d2:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    c4d4:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c4d6:	4637      	mov	r7, r6
    c4d8:	e000      	b.n	c4dc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    c4da:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    c4dc:	fbb0 f3f2 	udiv	r3, r0, r2
    c4e0:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c4e4:	f100 0437 	add.w	r4, r0, #55	; 0x37
    c4e8:	2809      	cmp	r0, #9
    c4ea:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c4ee:	b2e4      	uxtb	r4, r4
    c4f0:	bf98      	it	ls
    c4f2:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    c4f4:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c4f6:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	d1ed      	bne.n	c4da <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    c4fe:	194a      	adds	r2, r1, r5
    c500:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    c502:	b14d      	cbz	r5, c518 <ultoa+0x48>
    c504:	3301      	adds	r3, #1
		t = buf[j];
    c506:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    c50a:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c50c:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    c50e:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c510:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    c512:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c516:	dbf5      	blt.n	c504 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    c518:	4608      	mov	r0, r1
    c51a:	bcf0      	pop	{r4, r5, r6, r7}
    c51c:	4770      	bx	lr
    c51e:	bf00      	nop

0000c520 <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
    c520:	b510      	push	{r4, lr}
	if (val >= 0) {
    c522:	1e04      	subs	r4, r0, #0
    c524:	db03      	blt.n	c52e <ltoa+0xe>
	} else {
		buf[0] = '-';
		ultoa(-val, buf + 1, radix);
		return buf;
	}
}
    c526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
    c52a:	f7ff bfd1 	b.w	c4d0 <ultoa>
	} else {
		buf[0] = '-';
    c52e:	232d      	movs	r3, #45	; 0x2d
    c530:	4620      	mov	r0, r4
    c532:	460c      	mov	r4, r1
		ultoa(-val, buf + 1, radix);
    c534:	4240      	negs	r0, r0
char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
	} else {
		buf[0] = '-';
    c536:	f801 3b01 	strb.w	r3, [r1], #1
		ultoa(-val, buf + 1, radix);
    c53a:	f7ff ffc9 	bl	c4d0 <ultoa>
		return buf;
	}
}
    c53e:	4620      	mov	r0, r4
    c540:	bd10      	pop	{r4, pc}
    c542:	bf00      	nop

0000c544 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c544:	48a4      	ldr	r0, [pc, #656]	; (c7d8 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c546:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c54a:	4ba4      	ldr	r3, [pc, #656]	; (c7dc <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c54c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    c54e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    c552:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c554:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c556:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c558:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c55c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c560:	4c9f      	ldr	r4, [pc, #636]	; (c7e0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c562:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c566:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c568:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c56c:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c56e:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c570:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c574:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c578:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c57c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c580:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c584:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    c588:	b280      	uxth	r0, r0
    c58a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    c58e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    c592:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c596:	4b91      	ldr	r3, [pc, #580]	; (c7dc <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    c598:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c59a:	2500      	movs	r5, #0
    c59c:	0140      	lsls	r0, r0, #5
    c59e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c5a0:	2904      	cmp	r1, #4
    c5a2:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c5a4:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c5a8:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    c5aa:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c5ac:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c5ae:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c5b0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c5b2:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c5b4:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c5b6:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c5b8:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c5ba:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c5bc:	d1e9      	bne.n	c592 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c5be:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c5c2:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c5c6:	4b87      	ldr	r3, [pc, #540]	; (c7e4 <pwm_init+0x2a0>)
    c5c8:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c5cc:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c5ce:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c5d0:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c5d4:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c5d6:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c5da:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c5de:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c5e2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    c5e6:	b280      	uxth	r0, r0
    c5e8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    c5ec:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c5f0:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c5f4:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c5f8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c5fc:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c600:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    c604:	b280      	uxth	r0, r0
    c606:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    c60a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    c60e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c612:	4b74      	ldr	r3, [pc, #464]	; (c7e4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    c614:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c616:	2500      	movs	r5, #0
    c618:	0140      	lsls	r0, r0, #5
    c61a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c61c:	2904      	cmp	r1, #4
    c61e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c620:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c622:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c626:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c628:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c62a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c62c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c62e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c630:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c632:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c634:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c636:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c638:	d1e9      	bne.n	c60e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c63a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c63e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c642:	4b69      	ldr	r3, [pc, #420]	; (c7e8 <pwm_init+0x2a4>)
    c644:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c648:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c64a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c64c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c650:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c652:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c656:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c65a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c65e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    c662:	b280      	uxth	r0, r0
    c664:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    c668:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c66c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c670:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c674:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c678:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c67c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    c680:	b280      	uxth	r0, r0
    c682:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    c686:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    c68a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c68e:	4b56      	ldr	r3, [pc, #344]	; (c7e8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    c690:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c692:	2500      	movs	r5, #0
    c694:	0140      	lsls	r0, r0, #5
    c696:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c698:	2904      	cmp	r1, #4
    c69a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c69c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c69e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c6a2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c6a4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c6a6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c6a8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c6aa:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c6ac:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c6ae:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c6b0:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c6b2:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c6b4:	d1e9      	bne.n	c68a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c6b6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c6ba:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c6be:	4b4b      	ldr	r3, [pc, #300]	; (c7ec <pwm_init+0x2a8>)
    c6c0:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c6c4:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c6c6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c6c8:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c6cc:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c6ce:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c6d2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c6d6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c6da:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    c6de:	b280      	uxth	r0, r0
    c6e0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    c6e4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c6e8:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c6ec:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c6f0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c6f4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c6f8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    c6fc:	b280      	uxth	r0, r0
    c6fe:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    c702:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    c706:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c70a:	4b38      	ldr	r3, [pc, #224]	; (c7ec <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    c70c:	3101      	adds	r1, #1
    c70e:	0140      	lsls	r0, r0, #5
    c710:	461c      	mov	r4, r3
    c712:	2904      	cmp	r1, #4
    c714:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c716:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c718:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c71c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c71e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c720:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c722:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c724:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    c726:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c728:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c72a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c72c:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c72e:	d1ea      	bne.n	c706 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c730:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c734:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c736:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c738:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c73c:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c73e:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c742:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c744:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c748:	433b      	orrs	r3, r7
    c74a:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c74e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    c752:	b29b      	uxth	r3, r3
    c754:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    c758:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c75c:	0150      	lsls	r0, r2, #5
    c75e:	4b24      	ldr	r3, [pc, #144]	; (c7f0 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c760:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c762:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c764:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    c766:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    c768:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c76a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c76c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c76e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c772:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    c774:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c776:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c778:	d1f0      	bne.n	c75c <pwm_init+0x218>
    c77a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c77c:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c77e:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c782:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c786:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c788:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c78c:	0150      	lsls	r0, r2, #5
    c78e:	4b19      	ldr	r3, [pc, #100]	; (c7f4 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c790:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c792:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c794:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    c796:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    c798:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c79a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c79c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c79e:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c7a0:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    c7a2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c7a4:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c7a6:	d1f1      	bne.n	c78c <pwm_init+0x248>
    c7a8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c7aa:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c7ac:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c7b0:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c7b4:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c7b6:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c7ba:	0150      	lsls	r0, r2, #5
    c7bc:	4b0e      	ldr	r3, [pc, #56]	; (c7f8 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c7be:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c7c0:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c7c2:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    c7c4:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    c7c6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c7c8:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c7ca:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c7cc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c7ce:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    c7d0:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c7d2:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c7d4:	d1f1      	bne.n	c7ba <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    c7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7d8:	400fc000 	.word	0x400fc000
    c7dc:	403dc000 	.word	0x403dc000
    c7e0:	fc030000 	.word	0xfc030000
    c7e4:	403e0000 	.word	0x403e0000
    c7e8:	403e4000 	.word	0x403e4000
    c7ec:	403e8000 	.word	0x403e8000
    c7f0:	401dc000 	.word	0x401dc000
    c7f4:	401e0000 	.word	0x401e0000
    c7f8:	401e4000 	.word	0x401e4000

0000c7fc <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    c7fc:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    c7fe:	4b07      	ldr	r3, [pc, #28]	; (c81c <HardwareSerial::processSerialEvents()+0x20>)
    c800:	781c      	ldrb	r4, [r3, #0]
    c802:	b14c      	cbz	r4, c818 <HardwareSerial::processSerialEvents()+0x1c>
    c804:	4d06      	ldr	r5, [pc, #24]	; (c820 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    c806:	f855 3f04 	ldr.w	r3, [r5, #4]!
    c80a:	2b00      	cmp	r3, #0
    c80c:	d0fb      	beq.n	c806 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    c80e:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    c810:	1e63      	subs	r3, r4, #1
    c812:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    c816:	d1f6      	bne.n	c806 <HardwareSerial::processSerialEvents()+0xa>
    c818:	bd38      	pop	{r3, r4, r5, pc}
    c81a:	bf00      	nop
    c81c:	20002e9c 	.word	0x20002e9c
    c820:	20002e7c 	.word	0x20002e7c

0000c824 <__aeabi_atexit>:
    c824:	460b      	mov	r3, r1
    c826:	4601      	mov	r1, r0
    c828:	4618      	mov	r0, r3
    c82a:	f000 b805 	b.w	c838 <__cxa_atexit>
    c82e:	bf00      	nop

0000c830 <atol>:
    c830:	220a      	movs	r2, #10
    c832:	2100      	movs	r1, #0
    c834:	f001 b9c2 	b.w	dbbc <strtol>

0000c838 <__cxa_atexit>:
    c838:	4613      	mov	r3, r2
    c83a:	460a      	mov	r2, r1
    c83c:	4601      	mov	r1, r0
    c83e:	2002      	movs	r0, #2
    c840:	f001 ba80 	b.w	dd44 <__register_exitproc>

0000c844 <__errno>:
    c844:	4b01      	ldr	r3, [pc, #4]	; (c84c <__errno+0x8>)
    c846:	6818      	ldr	r0, [r3, #0]
    c848:	4770      	bx	lr
    c84a:	bf00      	nop
    c84c:	200022e0 	.word	0x200022e0

0000c850 <__libc_init_array>:
    c850:	b570      	push	{r4, r5, r6, lr}
    c852:	4e0f      	ldr	r6, [pc, #60]	; (c890 <__libc_init_array+0x40>)
    c854:	4d0f      	ldr	r5, [pc, #60]	; (c894 <__libc_init_array+0x44>)
    c856:	1b76      	subs	r6, r6, r5
    c858:	10b6      	asrs	r6, r6, #2
    c85a:	bf18      	it	ne
    c85c:	2400      	movne	r4, #0
    c85e:	d005      	beq.n	c86c <__libc_init_array+0x1c>
    c860:	3401      	adds	r4, #1
    c862:	f855 3b04 	ldr.w	r3, [r5], #4
    c866:	4798      	blx	r3
    c868:	42a6      	cmp	r6, r4
    c86a:	d1f9      	bne.n	c860 <__libc_init_array+0x10>
    c86c:	4e0a      	ldr	r6, [pc, #40]	; (c898 <__libc_init_array+0x48>)
    c86e:	4d0b      	ldr	r5, [pc, #44]	; (c89c <__libc_init_array+0x4c>)
    c870:	1b76      	subs	r6, r6, r5
    c872:	f004 fb5d 	bl	10f30 <___init_veneer>
    c876:	10b6      	asrs	r6, r6, #2
    c878:	bf18      	it	ne
    c87a:	2400      	movne	r4, #0
    c87c:	d006      	beq.n	c88c <__libc_init_array+0x3c>
    c87e:	3401      	adds	r4, #1
    c880:	f855 3b04 	ldr.w	r3, [r5], #4
    c884:	4798      	blx	r3
    c886:	42a6      	cmp	r6, r4
    c888:	d1f9      	bne.n	c87e <__libc_init_array+0x2e>
    c88a:	bd70      	pop	{r4, r5, r6, pc}
    c88c:	bd70      	pop	{r4, r5, r6, pc}
    c88e:	bf00      	nop
    c890:	60001888 	.word	0x60001888
    c894:	60001888 	.word	0x60001888
    c898:	600018a0 	.word	0x600018a0
    c89c:	60001888 	.word	0x60001888

0000c8a0 <__itoa>:
    c8a0:	1e93      	subs	r3, r2, #2
    c8a2:	2b22      	cmp	r3, #34	; 0x22
    c8a4:	d810      	bhi.n	c8c8 <__itoa+0x28>
    c8a6:	2a0a      	cmp	r2, #10
    c8a8:	b510      	push	{r4, lr}
    c8aa:	d006      	beq.n	c8ba <__itoa+0x1a>
    c8ac:	2300      	movs	r3, #0
    c8ae:	460c      	mov	r4, r1
    c8b0:	4419      	add	r1, r3
    c8b2:	f001 f9af 	bl	dc14 <__utoa>
    c8b6:	4620      	mov	r0, r4
    c8b8:	bd10      	pop	{r4, pc}
    c8ba:	2800      	cmp	r0, #0
    c8bc:	daf6      	bge.n	c8ac <__itoa+0xc>
    c8be:	232d      	movs	r3, #45	; 0x2d
    c8c0:	700b      	strb	r3, [r1, #0]
    c8c2:	4240      	negs	r0, r0
    c8c4:	2301      	movs	r3, #1
    c8c6:	e7f2      	b.n	c8ae <__itoa+0xe>
    c8c8:	2000      	movs	r0, #0
    c8ca:	7008      	strb	r0, [r1, #0]
    c8cc:	4770      	bx	lr
    c8ce:	bf00      	nop

0000c8d0 <itoa>:
    c8d0:	f7ff bfe6 	b.w	c8a0 <__itoa>

0000c8d4 <__get_current_locale>:
    c8d4:	4a03      	ldr	r2, [pc, #12]	; (c8e4 <__get_current_locale+0x10>)
    c8d6:	4b04      	ldr	r3, [pc, #16]	; (c8e8 <__get_current_locale+0x14>)
    c8d8:	6812      	ldr	r2, [r2, #0]
    c8da:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c8dc:	2800      	cmp	r0, #0
    c8de:	bf08      	it	eq
    c8e0:	4618      	moveq	r0, r3
    c8e2:	4770      	bx	lr
    c8e4:	200022e0 	.word	0x200022e0
    c8e8:	200022e4 	.word	0x200022e4

0000c8ec <__locale_ctype_ptr_l>:
    c8ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    c8f0:	4770      	bx	lr
    c8f2:	bf00      	nop

0000c8f4 <__locale_ctype_ptr>:
    c8f4:	b508      	push	{r3, lr}
    c8f6:	4b03      	ldr	r3, [pc, #12]	; (c904 <__locale_ctype_ptr+0x10>)
    c8f8:	6818      	ldr	r0, [r3, #0]
    c8fa:	f7ff ffeb 	bl	c8d4 <__get_current_locale>
    c8fe:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    c902:	bd08      	pop	{r3, pc}
    c904:	200022e0 	.word	0x200022e0

0000c908 <malloc>:
    c908:	4b02      	ldr	r3, [pc, #8]	; (c914 <malloc+0xc>)
    c90a:	4601      	mov	r1, r0
    c90c:	6818      	ldr	r0, [r3, #0]
    c90e:	f000 b80b 	b.w	c928 <_malloc_r>
    c912:	bf00      	nop
    c914:	200022e0 	.word	0x200022e0

0000c918 <free>:
    c918:	4b02      	ldr	r3, [pc, #8]	; (c924 <free+0xc>)
    c91a:	4601      	mov	r1, r0
    c91c:	6818      	ldr	r0, [r3, #0]
    c91e:	f001 bab1 	b.w	de84 <_free_r>
    c922:	bf00      	nop
    c924:	200022e0 	.word	0x200022e0

0000c928 <_malloc_r>:
    c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c92c:	f101 050b 	add.w	r5, r1, #11
    c930:	2d16      	cmp	r5, #22
    c932:	b083      	sub	sp, #12
    c934:	4606      	mov	r6, r0
    c936:	f240 809f 	bls.w	ca78 <_malloc_r+0x150>
    c93a:	f035 0507 	bics.w	r5, r5, #7
    c93e:	f100 80bf 	bmi.w	cac0 <_malloc_r+0x198>
    c942:	42a9      	cmp	r1, r5
    c944:	f200 80bc 	bhi.w	cac0 <_malloc_r+0x198>
    c948:	f000 fba0 	bl	d08c <__malloc_lock>
    c94c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    c950:	f0c0 829c 	bcc.w	ce8c <_malloc_r+0x564>
    c954:	0a6b      	lsrs	r3, r5, #9
    c956:	f000 80ba 	beq.w	cace <_malloc_r+0x1a6>
    c95a:	2b04      	cmp	r3, #4
    c95c:	f200 8183 	bhi.w	cc66 <_malloc_r+0x33e>
    c960:	09a8      	lsrs	r0, r5, #6
    c962:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    c966:	ea4f 034e 	mov.w	r3, lr, lsl #1
    c96a:	3038      	adds	r0, #56	; 0x38
    c96c:	4fc4      	ldr	r7, [pc, #784]	; (cc80 <_malloc_r+0x358>)
    c96e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    c972:	f1a3 0108 	sub.w	r1, r3, #8
    c976:	685c      	ldr	r4, [r3, #4]
    c978:	42a1      	cmp	r1, r4
    c97a:	d107      	bne.n	c98c <_malloc_r+0x64>
    c97c:	e0ac      	b.n	cad8 <_malloc_r+0x1b0>
    c97e:	2a00      	cmp	r2, #0
    c980:	f280 80ac 	bge.w	cadc <_malloc_r+0x1b4>
    c984:	68e4      	ldr	r4, [r4, #12]
    c986:	42a1      	cmp	r1, r4
    c988:	f000 80a6 	beq.w	cad8 <_malloc_r+0x1b0>
    c98c:	6863      	ldr	r3, [r4, #4]
    c98e:	f023 0303 	bic.w	r3, r3, #3
    c992:	1b5a      	subs	r2, r3, r5
    c994:	2a0f      	cmp	r2, #15
    c996:	ddf2      	ble.n	c97e <_malloc_r+0x56>
    c998:	49b9      	ldr	r1, [pc, #740]	; (cc80 <_malloc_r+0x358>)
    c99a:	693c      	ldr	r4, [r7, #16]
    c99c:	f101 0e08 	add.w	lr, r1, #8
    c9a0:	4574      	cmp	r4, lr
    c9a2:	f000 81b3 	beq.w	cd0c <_malloc_r+0x3e4>
    c9a6:	6863      	ldr	r3, [r4, #4]
    c9a8:	f023 0303 	bic.w	r3, r3, #3
    c9ac:	1b5a      	subs	r2, r3, r5
    c9ae:	2a0f      	cmp	r2, #15
    c9b0:	f300 8199 	bgt.w	cce6 <_malloc_r+0x3be>
    c9b4:	2a00      	cmp	r2, #0
    c9b6:	f8c1 e014 	str.w	lr, [r1, #20]
    c9ba:	f8c1 e010 	str.w	lr, [r1, #16]
    c9be:	f280 809e 	bge.w	cafe <_malloc_r+0x1d6>
    c9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c9c6:	f080 8167 	bcs.w	cc98 <_malloc_r+0x370>
    c9ca:	08db      	lsrs	r3, r3, #3
    c9cc:	f103 0c01 	add.w	ip, r3, #1
    c9d0:	2201      	movs	r2, #1
    c9d2:	109b      	asrs	r3, r3, #2
    c9d4:	fa02 f303 	lsl.w	r3, r2, r3
    c9d8:	684a      	ldr	r2, [r1, #4]
    c9da:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    c9de:	f8c4 8008 	str.w	r8, [r4, #8]
    c9e2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    c9e6:	431a      	orrs	r2, r3
    c9e8:	f1a9 0308 	sub.w	r3, r9, #8
    c9ec:	60e3      	str	r3, [r4, #12]
    c9ee:	604a      	str	r2, [r1, #4]
    c9f0:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    c9f4:	f8c8 400c 	str.w	r4, [r8, #12]
    c9f8:	1083      	asrs	r3, r0, #2
    c9fa:	2401      	movs	r4, #1
    c9fc:	409c      	lsls	r4, r3
    c9fe:	4294      	cmp	r4, r2
    ca00:	f200 808a 	bhi.w	cb18 <_malloc_r+0x1f0>
    ca04:	4214      	tst	r4, r2
    ca06:	d106      	bne.n	ca16 <_malloc_r+0xee>
    ca08:	f020 0003 	bic.w	r0, r0, #3
    ca0c:	0064      	lsls	r4, r4, #1
    ca0e:	4214      	tst	r4, r2
    ca10:	f100 0004 	add.w	r0, r0, #4
    ca14:	d0fa      	beq.n	ca0c <_malloc_r+0xe4>
    ca16:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ca1a:	46cc      	mov	ip, r9
    ca1c:	4680      	mov	r8, r0
    ca1e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    ca22:	458c      	cmp	ip, r1
    ca24:	d107      	bne.n	ca36 <_malloc_r+0x10e>
    ca26:	e173      	b.n	cd10 <_malloc_r+0x3e8>
    ca28:	2a00      	cmp	r2, #0
    ca2a:	f280 8181 	bge.w	cd30 <_malloc_r+0x408>
    ca2e:	68c9      	ldr	r1, [r1, #12]
    ca30:	458c      	cmp	ip, r1
    ca32:	f000 816d 	beq.w	cd10 <_malloc_r+0x3e8>
    ca36:	684b      	ldr	r3, [r1, #4]
    ca38:	f023 0303 	bic.w	r3, r3, #3
    ca3c:	1b5a      	subs	r2, r3, r5
    ca3e:	2a0f      	cmp	r2, #15
    ca40:	ddf2      	ble.n	ca28 <_malloc_r+0x100>
    ca42:	460c      	mov	r4, r1
    ca44:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    ca48:	f854 8f08 	ldr.w	r8, [r4, #8]!
    ca4c:	194b      	adds	r3, r1, r5
    ca4e:	f045 0501 	orr.w	r5, r5, #1
    ca52:	604d      	str	r5, [r1, #4]
    ca54:	f042 0101 	orr.w	r1, r2, #1
    ca58:	f8c8 c00c 	str.w	ip, [r8, #12]
    ca5c:	4630      	mov	r0, r6
    ca5e:	f8cc 8008 	str.w	r8, [ip, #8]
    ca62:	617b      	str	r3, [r7, #20]
    ca64:	613b      	str	r3, [r7, #16]
    ca66:	f8c3 e00c 	str.w	lr, [r3, #12]
    ca6a:	f8c3 e008 	str.w	lr, [r3, #8]
    ca6e:	6059      	str	r1, [r3, #4]
    ca70:	509a      	str	r2, [r3, r2]
    ca72:	f000 fb0d 	bl	d090 <__malloc_unlock>
    ca76:	e01f      	b.n	cab8 <_malloc_r+0x190>
    ca78:	2910      	cmp	r1, #16
    ca7a:	d821      	bhi.n	cac0 <_malloc_r+0x198>
    ca7c:	f000 fb06 	bl	d08c <__malloc_lock>
    ca80:	2510      	movs	r5, #16
    ca82:	2306      	movs	r3, #6
    ca84:	2002      	movs	r0, #2
    ca86:	4f7e      	ldr	r7, [pc, #504]	; (cc80 <_malloc_r+0x358>)
    ca88:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    ca8c:	f1a3 0208 	sub.w	r2, r3, #8
    ca90:	685c      	ldr	r4, [r3, #4]
    ca92:	4294      	cmp	r4, r2
    ca94:	f000 8145 	beq.w	cd22 <_malloc_r+0x3fa>
    ca98:	6863      	ldr	r3, [r4, #4]
    ca9a:	68e1      	ldr	r1, [r4, #12]
    ca9c:	68a5      	ldr	r5, [r4, #8]
    ca9e:	f023 0303 	bic.w	r3, r3, #3
    caa2:	4423      	add	r3, r4
    caa4:	4630      	mov	r0, r6
    caa6:	685a      	ldr	r2, [r3, #4]
    caa8:	60e9      	str	r1, [r5, #12]
    caaa:	f042 0201 	orr.w	r2, r2, #1
    caae:	608d      	str	r5, [r1, #8]
    cab0:	605a      	str	r2, [r3, #4]
    cab2:	f000 faed 	bl	d090 <__malloc_unlock>
    cab6:	3408      	adds	r4, #8
    cab8:	4620      	mov	r0, r4
    caba:	b003      	add	sp, #12
    cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cac0:	2400      	movs	r4, #0
    cac2:	230c      	movs	r3, #12
    cac4:	4620      	mov	r0, r4
    cac6:	6033      	str	r3, [r6, #0]
    cac8:	b003      	add	sp, #12
    caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cace:	2380      	movs	r3, #128	; 0x80
    cad0:	f04f 0e40 	mov.w	lr, #64	; 0x40
    cad4:	203f      	movs	r0, #63	; 0x3f
    cad6:	e749      	b.n	c96c <_malloc_r+0x44>
    cad8:	4670      	mov	r0, lr
    cada:	e75d      	b.n	c998 <_malloc_r+0x70>
    cadc:	4423      	add	r3, r4
    cade:	68e1      	ldr	r1, [r4, #12]
    cae0:	685a      	ldr	r2, [r3, #4]
    cae2:	68a5      	ldr	r5, [r4, #8]
    cae4:	f042 0201 	orr.w	r2, r2, #1
    cae8:	60e9      	str	r1, [r5, #12]
    caea:	4630      	mov	r0, r6
    caec:	608d      	str	r5, [r1, #8]
    caee:	605a      	str	r2, [r3, #4]
    caf0:	f000 face 	bl	d090 <__malloc_unlock>
    caf4:	3408      	adds	r4, #8
    caf6:	4620      	mov	r0, r4
    caf8:	b003      	add	sp, #12
    cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cafe:	4423      	add	r3, r4
    cb00:	4630      	mov	r0, r6
    cb02:	685a      	ldr	r2, [r3, #4]
    cb04:	f042 0201 	orr.w	r2, r2, #1
    cb08:	605a      	str	r2, [r3, #4]
    cb0a:	f000 fac1 	bl	d090 <__malloc_unlock>
    cb0e:	3408      	adds	r4, #8
    cb10:	4620      	mov	r0, r4
    cb12:	b003      	add	sp, #12
    cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb18:	68bc      	ldr	r4, [r7, #8]
    cb1a:	6863      	ldr	r3, [r4, #4]
    cb1c:	f023 0803 	bic.w	r8, r3, #3
    cb20:	45a8      	cmp	r8, r5
    cb22:	d304      	bcc.n	cb2e <_malloc_r+0x206>
    cb24:	ebc5 0308 	rsb	r3, r5, r8
    cb28:	2b0f      	cmp	r3, #15
    cb2a:	f300 808c 	bgt.w	cc46 <_malloc_r+0x31e>
    cb2e:	4b55      	ldr	r3, [pc, #340]	; (cc84 <_malloc_r+0x35c>)
    cb30:	f8df 9160 	ldr.w	r9, [pc, #352]	; cc94 <_malloc_r+0x36c>
    cb34:	681a      	ldr	r2, [r3, #0]
    cb36:	f8d9 3000 	ldr.w	r3, [r9]
    cb3a:	3301      	adds	r3, #1
    cb3c:	442a      	add	r2, r5
    cb3e:	eb04 0a08 	add.w	sl, r4, r8
    cb42:	f000 8160 	beq.w	ce06 <_malloc_r+0x4de>
    cb46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    cb4a:	320f      	adds	r2, #15
    cb4c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    cb50:	f022 020f 	bic.w	r2, r2, #15
    cb54:	4611      	mov	r1, r2
    cb56:	4630      	mov	r0, r6
    cb58:	9201      	str	r2, [sp, #4]
    cb5a:	f000 fc93 	bl	d484 <_sbrk_r>
    cb5e:	f1b0 3fff 	cmp.w	r0, #4294967295
    cb62:	4683      	mov	fp, r0
    cb64:	9a01      	ldr	r2, [sp, #4]
    cb66:	f000 8158 	beq.w	ce1a <_malloc_r+0x4f2>
    cb6a:	4582      	cmp	sl, r0
    cb6c:	f200 80fc 	bhi.w	cd68 <_malloc_r+0x440>
    cb70:	4b45      	ldr	r3, [pc, #276]	; (cc88 <_malloc_r+0x360>)
    cb72:	6819      	ldr	r1, [r3, #0]
    cb74:	45da      	cmp	sl, fp
    cb76:	4411      	add	r1, r2
    cb78:	6019      	str	r1, [r3, #0]
    cb7a:	f000 8153 	beq.w	ce24 <_malloc_r+0x4fc>
    cb7e:	f8d9 0000 	ldr.w	r0, [r9]
    cb82:	f8df e110 	ldr.w	lr, [pc, #272]	; cc94 <_malloc_r+0x36c>
    cb86:	3001      	adds	r0, #1
    cb88:	bf1b      	ittet	ne
    cb8a:	ebca 0a0b 	rsbne	sl, sl, fp
    cb8e:	4451      	addne	r1, sl
    cb90:	f8ce b000 	streq.w	fp, [lr]
    cb94:	6019      	strne	r1, [r3, #0]
    cb96:	f01b 0107 	ands.w	r1, fp, #7
    cb9a:	f000 8117 	beq.w	cdcc <_malloc_r+0x4a4>
    cb9e:	f1c1 0008 	rsb	r0, r1, #8
    cba2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    cba6:	4483      	add	fp, r0
    cba8:	3108      	adds	r1, #8
    cbaa:	445a      	add	r2, fp
    cbac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cbb0:	ebc2 0901 	rsb	r9, r2, r1
    cbb4:	4649      	mov	r1, r9
    cbb6:	4630      	mov	r0, r6
    cbb8:	9301      	str	r3, [sp, #4]
    cbba:	f000 fc63 	bl	d484 <_sbrk_r>
    cbbe:	1c43      	adds	r3, r0, #1
    cbc0:	9b01      	ldr	r3, [sp, #4]
    cbc2:	f000 813f 	beq.w	ce44 <_malloc_r+0x51c>
    cbc6:	ebcb 0200 	rsb	r2, fp, r0
    cbca:	444a      	add	r2, r9
    cbcc:	f042 0201 	orr.w	r2, r2, #1
    cbd0:	6819      	ldr	r1, [r3, #0]
    cbd2:	f8c7 b008 	str.w	fp, [r7, #8]
    cbd6:	4449      	add	r1, r9
    cbd8:	42bc      	cmp	r4, r7
    cbda:	f8cb 2004 	str.w	r2, [fp, #4]
    cbde:	6019      	str	r1, [r3, #0]
    cbe0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; cc88 <_malloc_r+0x360>
    cbe4:	d016      	beq.n	cc14 <_malloc_r+0x2ec>
    cbe6:	f1b8 0f0f 	cmp.w	r8, #15
    cbea:	f240 80fd 	bls.w	cde8 <_malloc_r+0x4c0>
    cbee:	6862      	ldr	r2, [r4, #4]
    cbf0:	f1a8 030c 	sub.w	r3, r8, #12
    cbf4:	f023 0307 	bic.w	r3, r3, #7
    cbf8:	18e0      	adds	r0, r4, r3
    cbfa:	f002 0201 	and.w	r2, r2, #1
    cbfe:	f04f 0e05 	mov.w	lr, #5
    cc02:	431a      	orrs	r2, r3
    cc04:	2b0f      	cmp	r3, #15
    cc06:	6062      	str	r2, [r4, #4]
    cc08:	f8c0 e004 	str.w	lr, [r0, #4]
    cc0c:	f8c0 e008 	str.w	lr, [r0, #8]
    cc10:	f200 811c 	bhi.w	ce4c <_malloc_r+0x524>
    cc14:	4b1d      	ldr	r3, [pc, #116]	; (cc8c <_malloc_r+0x364>)
    cc16:	68bc      	ldr	r4, [r7, #8]
    cc18:	681a      	ldr	r2, [r3, #0]
    cc1a:	4291      	cmp	r1, r2
    cc1c:	bf88      	it	hi
    cc1e:	6019      	strhi	r1, [r3, #0]
    cc20:	4b1b      	ldr	r3, [pc, #108]	; (cc90 <_malloc_r+0x368>)
    cc22:	681a      	ldr	r2, [r3, #0]
    cc24:	4291      	cmp	r1, r2
    cc26:	6862      	ldr	r2, [r4, #4]
    cc28:	bf88      	it	hi
    cc2a:	6019      	strhi	r1, [r3, #0]
    cc2c:	f022 0203 	bic.w	r2, r2, #3
    cc30:	4295      	cmp	r5, r2
    cc32:	eba2 0305 	sub.w	r3, r2, r5
    cc36:	d801      	bhi.n	cc3c <_malloc_r+0x314>
    cc38:	2b0f      	cmp	r3, #15
    cc3a:	dc04      	bgt.n	cc46 <_malloc_r+0x31e>
    cc3c:	4630      	mov	r0, r6
    cc3e:	f000 fa27 	bl	d090 <__malloc_unlock>
    cc42:	2400      	movs	r4, #0
    cc44:	e738      	b.n	cab8 <_malloc_r+0x190>
    cc46:	1962      	adds	r2, r4, r5
    cc48:	f043 0301 	orr.w	r3, r3, #1
    cc4c:	f045 0501 	orr.w	r5, r5, #1
    cc50:	6065      	str	r5, [r4, #4]
    cc52:	4630      	mov	r0, r6
    cc54:	60ba      	str	r2, [r7, #8]
    cc56:	6053      	str	r3, [r2, #4]
    cc58:	f000 fa1a 	bl	d090 <__malloc_unlock>
    cc5c:	3408      	adds	r4, #8
    cc5e:	4620      	mov	r0, r4
    cc60:	b003      	add	sp, #12
    cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc66:	2b14      	cmp	r3, #20
    cc68:	d971      	bls.n	cd4e <_malloc_r+0x426>
    cc6a:	2b54      	cmp	r3, #84	; 0x54
    cc6c:	f200 80a4 	bhi.w	cdb8 <_malloc_r+0x490>
    cc70:	0b28      	lsrs	r0, r5, #12
    cc72:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    cc76:	ea4f 034e 	mov.w	r3, lr, lsl #1
    cc7a:	306e      	adds	r0, #110	; 0x6e
    cc7c:	e676      	b.n	c96c <_malloc_r+0x44>
    cc7e:	bf00      	nop
    cc80:	20002450 	.word	0x20002450
    cc84:	20002ea8 	.word	0x20002ea8
    cc88:	20002eac 	.word	0x20002eac
    cc8c:	20002ea4 	.word	0x20002ea4
    cc90:	20002ea0 	.word	0x20002ea0
    cc94:	2000285c 	.word	0x2000285c
    cc98:	0a5a      	lsrs	r2, r3, #9
    cc9a:	2a04      	cmp	r2, #4
    cc9c:	d95e      	bls.n	cd5c <_malloc_r+0x434>
    cc9e:	2a14      	cmp	r2, #20
    cca0:	f200 80b3 	bhi.w	ce0a <_malloc_r+0x4e2>
    cca4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    cca8:	0049      	lsls	r1, r1, #1
    ccaa:	325b      	adds	r2, #91	; 0x5b
    ccac:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    ccb0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    ccb4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; ce94 <_malloc_r+0x56c>
    ccb8:	f1ac 0c08 	sub.w	ip, ip, #8
    ccbc:	458c      	cmp	ip, r1
    ccbe:	f000 8088 	beq.w	cdd2 <_malloc_r+0x4aa>
    ccc2:	684a      	ldr	r2, [r1, #4]
    ccc4:	f022 0203 	bic.w	r2, r2, #3
    ccc8:	4293      	cmp	r3, r2
    ccca:	d202      	bcs.n	ccd2 <_malloc_r+0x3aa>
    cccc:	6889      	ldr	r1, [r1, #8]
    ccce:	458c      	cmp	ip, r1
    ccd0:	d1f7      	bne.n	ccc2 <_malloc_r+0x39a>
    ccd2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    ccd6:	687a      	ldr	r2, [r7, #4]
    ccd8:	f8c4 c00c 	str.w	ip, [r4, #12]
    ccdc:	60a1      	str	r1, [r4, #8]
    ccde:	f8cc 4008 	str.w	r4, [ip, #8]
    cce2:	60cc      	str	r4, [r1, #12]
    cce4:	e688      	b.n	c9f8 <_malloc_r+0xd0>
    cce6:	1963      	adds	r3, r4, r5
    cce8:	f042 0701 	orr.w	r7, r2, #1
    ccec:	f045 0501 	orr.w	r5, r5, #1
    ccf0:	6065      	str	r5, [r4, #4]
    ccf2:	4630      	mov	r0, r6
    ccf4:	614b      	str	r3, [r1, #20]
    ccf6:	610b      	str	r3, [r1, #16]
    ccf8:	f8c3 e00c 	str.w	lr, [r3, #12]
    ccfc:	f8c3 e008 	str.w	lr, [r3, #8]
    cd00:	605f      	str	r7, [r3, #4]
    cd02:	509a      	str	r2, [r3, r2]
    cd04:	3408      	adds	r4, #8
    cd06:	f000 f9c3 	bl	d090 <__malloc_unlock>
    cd0a:	e6d5      	b.n	cab8 <_malloc_r+0x190>
    cd0c:	684a      	ldr	r2, [r1, #4]
    cd0e:	e673      	b.n	c9f8 <_malloc_r+0xd0>
    cd10:	f108 0801 	add.w	r8, r8, #1
    cd14:	f018 0f03 	tst.w	r8, #3
    cd18:	f10c 0c08 	add.w	ip, ip, #8
    cd1c:	f47f ae7f 	bne.w	ca1e <_malloc_r+0xf6>
    cd20:	e030      	b.n	cd84 <_malloc_r+0x45c>
    cd22:	68dc      	ldr	r4, [r3, #12]
    cd24:	42a3      	cmp	r3, r4
    cd26:	bf08      	it	eq
    cd28:	3002      	addeq	r0, #2
    cd2a:	f43f ae35 	beq.w	c998 <_malloc_r+0x70>
    cd2e:	e6b3      	b.n	ca98 <_malloc_r+0x170>
    cd30:	440b      	add	r3, r1
    cd32:	460c      	mov	r4, r1
    cd34:	685a      	ldr	r2, [r3, #4]
    cd36:	68c9      	ldr	r1, [r1, #12]
    cd38:	f854 5f08 	ldr.w	r5, [r4, #8]!
    cd3c:	f042 0201 	orr.w	r2, r2, #1
    cd40:	605a      	str	r2, [r3, #4]
    cd42:	4630      	mov	r0, r6
    cd44:	60e9      	str	r1, [r5, #12]
    cd46:	608d      	str	r5, [r1, #8]
    cd48:	f000 f9a2 	bl	d090 <__malloc_unlock>
    cd4c:	e6b4      	b.n	cab8 <_malloc_r+0x190>
    cd4e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    cd52:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    cd56:	ea4f 034e 	mov.w	r3, lr, lsl #1
    cd5a:	e607      	b.n	c96c <_malloc_r+0x44>
    cd5c:	099a      	lsrs	r2, r3, #6
    cd5e:	f102 0139 	add.w	r1, r2, #57	; 0x39
    cd62:	0049      	lsls	r1, r1, #1
    cd64:	3238      	adds	r2, #56	; 0x38
    cd66:	e7a1      	b.n	ccac <_malloc_r+0x384>
    cd68:	42bc      	cmp	r4, r7
    cd6a:	4b4a      	ldr	r3, [pc, #296]	; (ce94 <_malloc_r+0x56c>)
    cd6c:	f43f af00 	beq.w	cb70 <_malloc_r+0x248>
    cd70:	689c      	ldr	r4, [r3, #8]
    cd72:	6862      	ldr	r2, [r4, #4]
    cd74:	f022 0203 	bic.w	r2, r2, #3
    cd78:	e75a      	b.n	cc30 <_malloc_r+0x308>
    cd7a:	f859 3908 	ldr.w	r3, [r9], #-8
    cd7e:	4599      	cmp	r9, r3
    cd80:	f040 8082 	bne.w	ce88 <_malloc_r+0x560>
    cd84:	f010 0f03 	tst.w	r0, #3
    cd88:	f100 30ff 	add.w	r0, r0, #4294967295
    cd8c:	d1f5      	bne.n	cd7a <_malloc_r+0x452>
    cd8e:	687b      	ldr	r3, [r7, #4]
    cd90:	ea23 0304 	bic.w	r3, r3, r4
    cd94:	607b      	str	r3, [r7, #4]
    cd96:	0064      	lsls	r4, r4, #1
    cd98:	429c      	cmp	r4, r3
    cd9a:	f63f aebd 	bhi.w	cb18 <_malloc_r+0x1f0>
    cd9e:	2c00      	cmp	r4, #0
    cda0:	f43f aeba 	beq.w	cb18 <_malloc_r+0x1f0>
    cda4:	421c      	tst	r4, r3
    cda6:	4640      	mov	r0, r8
    cda8:	f47f ae35 	bne.w	ca16 <_malloc_r+0xee>
    cdac:	0064      	lsls	r4, r4, #1
    cdae:	421c      	tst	r4, r3
    cdb0:	f100 0004 	add.w	r0, r0, #4
    cdb4:	d0fa      	beq.n	cdac <_malloc_r+0x484>
    cdb6:	e62e      	b.n	ca16 <_malloc_r+0xee>
    cdb8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    cdbc:	d818      	bhi.n	cdf0 <_malloc_r+0x4c8>
    cdbe:	0be8      	lsrs	r0, r5, #15
    cdc0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    cdc4:	ea4f 034e 	mov.w	r3, lr, lsl #1
    cdc8:	3077      	adds	r0, #119	; 0x77
    cdca:	e5cf      	b.n	c96c <_malloc_r+0x44>
    cdcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    cdd0:	e6eb      	b.n	cbaa <_malloc_r+0x282>
    cdd2:	2101      	movs	r1, #1
    cdd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cdd8:	1092      	asrs	r2, r2, #2
    cdda:	fa01 f202 	lsl.w	r2, r1, r2
    cdde:	431a      	orrs	r2, r3
    cde0:	f8c8 2004 	str.w	r2, [r8, #4]
    cde4:	4661      	mov	r1, ip
    cde6:	e777      	b.n	ccd8 <_malloc_r+0x3b0>
    cde8:	2301      	movs	r3, #1
    cdea:	f8cb 3004 	str.w	r3, [fp, #4]
    cdee:	e725      	b.n	cc3c <_malloc_r+0x314>
    cdf0:	f240 5254 	movw	r2, #1364	; 0x554
    cdf4:	4293      	cmp	r3, r2
    cdf6:	d820      	bhi.n	ce3a <_malloc_r+0x512>
    cdf8:	0ca8      	lsrs	r0, r5, #18
    cdfa:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    cdfe:	ea4f 034e 	mov.w	r3, lr, lsl #1
    ce02:	307c      	adds	r0, #124	; 0x7c
    ce04:	e5b2      	b.n	c96c <_malloc_r+0x44>
    ce06:	3210      	adds	r2, #16
    ce08:	e6a4      	b.n	cb54 <_malloc_r+0x22c>
    ce0a:	2a54      	cmp	r2, #84	; 0x54
    ce0c:	d826      	bhi.n	ce5c <_malloc_r+0x534>
    ce0e:	0b1a      	lsrs	r2, r3, #12
    ce10:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    ce14:	0049      	lsls	r1, r1, #1
    ce16:	326e      	adds	r2, #110	; 0x6e
    ce18:	e748      	b.n	ccac <_malloc_r+0x384>
    ce1a:	68bc      	ldr	r4, [r7, #8]
    ce1c:	6862      	ldr	r2, [r4, #4]
    ce1e:	f022 0203 	bic.w	r2, r2, #3
    ce22:	e705      	b.n	cc30 <_malloc_r+0x308>
    ce24:	f3ca 000b 	ubfx	r0, sl, #0, #12
    ce28:	2800      	cmp	r0, #0
    ce2a:	f47f aea8 	bne.w	cb7e <_malloc_r+0x256>
    ce2e:	4442      	add	r2, r8
    ce30:	68bb      	ldr	r3, [r7, #8]
    ce32:	f042 0201 	orr.w	r2, r2, #1
    ce36:	605a      	str	r2, [r3, #4]
    ce38:	e6ec      	b.n	cc14 <_malloc_r+0x2ec>
    ce3a:	23fe      	movs	r3, #254	; 0xfe
    ce3c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    ce40:	207e      	movs	r0, #126	; 0x7e
    ce42:	e593      	b.n	c96c <_malloc_r+0x44>
    ce44:	2201      	movs	r2, #1
    ce46:	f04f 0900 	mov.w	r9, #0
    ce4a:	e6c1      	b.n	cbd0 <_malloc_r+0x2a8>
    ce4c:	f104 0108 	add.w	r1, r4, #8
    ce50:	4630      	mov	r0, r6
    ce52:	f001 f817 	bl	de84 <_free_r>
    ce56:	f8d9 1000 	ldr.w	r1, [r9]
    ce5a:	e6db      	b.n	cc14 <_malloc_r+0x2ec>
    ce5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    ce60:	d805      	bhi.n	ce6e <_malloc_r+0x546>
    ce62:	0bda      	lsrs	r2, r3, #15
    ce64:	f102 0178 	add.w	r1, r2, #120	; 0x78
    ce68:	0049      	lsls	r1, r1, #1
    ce6a:	3277      	adds	r2, #119	; 0x77
    ce6c:	e71e      	b.n	ccac <_malloc_r+0x384>
    ce6e:	f240 5154 	movw	r1, #1364	; 0x554
    ce72:	428a      	cmp	r2, r1
    ce74:	d805      	bhi.n	ce82 <_malloc_r+0x55a>
    ce76:	0c9a      	lsrs	r2, r3, #18
    ce78:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    ce7c:	0049      	lsls	r1, r1, #1
    ce7e:	327c      	adds	r2, #124	; 0x7c
    ce80:	e714      	b.n	ccac <_malloc_r+0x384>
    ce82:	21fe      	movs	r1, #254	; 0xfe
    ce84:	227e      	movs	r2, #126	; 0x7e
    ce86:	e711      	b.n	ccac <_malloc_r+0x384>
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	e784      	b.n	cd96 <_malloc_r+0x46e>
    ce8c:	08e8      	lsrs	r0, r5, #3
    ce8e:	1c43      	adds	r3, r0, #1
    ce90:	005b      	lsls	r3, r3, #1
    ce92:	e5f8      	b.n	ca86 <_malloc_r+0x15e>
    ce94:	20002450 	.word	0x20002450

0000ce98 <__ascii_mbtowc>:
    ce98:	b082      	sub	sp, #8
    ce9a:	b149      	cbz	r1, ceb0 <__ascii_mbtowc+0x18>
    ce9c:	b15a      	cbz	r2, ceb6 <__ascii_mbtowc+0x1e>
    ce9e:	b16b      	cbz	r3, cebc <__ascii_mbtowc+0x24>
    cea0:	7813      	ldrb	r3, [r2, #0]
    cea2:	600b      	str	r3, [r1, #0]
    cea4:	7812      	ldrb	r2, [r2, #0]
    cea6:	1c10      	adds	r0, r2, #0
    cea8:	bf18      	it	ne
    ceaa:	2001      	movne	r0, #1
    ceac:	b002      	add	sp, #8
    ceae:	4770      	bx	lr
    ceb0:	a901      	add	r1, sp, #4
    ceb2:	2a00      	cmp	r2, #0
    ceb4:	d1f3      	bne.n	ce9e <__ascii_mbtowc+0x6>
    ceb6:	4610      	mov	r0, r2
    ceb8:	b002      	add	sp, #8
    ceba:	4770      	bx	lr
    cebc:	f06f 0001 	mvn.w	r0, #1
    cec0:	e7f4      	b.n	ceac <__ascii_mbtowc+0x14>
    cec2:	bf00      	nop

0000cec4 <memcmp>:
    cec4:	2a03      	cmp	r2, #3
    cec6:	b470      	push	{r4, r5, r6}
    cec8:	d926      	bls.n	cf18 <memcmp+0x54>
    ceca:	ea40 0301 	orr.w	r3, r0, r1
    cece:	079b      	lsls	r3, r3, #30
    ced0:	d011      	beq.n	cef6 <memcmp+0x32>
    ced2:	7804      	ldrb	r4, [r0, #0]
    ced4:	780d      	ldrb	r5, [r1, #0]
    ced6:	42ac      	cmp	r4, r5
    ced8:	d122      	bne.n	cf20 <memcmp+0x5c>
    ceda:	4402      	add	r2, r0
    cedc:	1c43      	adds	r3, r0, #1
    cede:	e005      	b.n	ceec <memcmp+0x28>
    cee0:	f813 4b01 	ldrb.w	r4, [r3], #1
    cee4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    cee8:	42ac      	cmp	r4, r5
    ceea:	d119      	bne.n	cf20 <memcmp+0x5c>
    ceec:	4293      	cmp	r3, r2
    ceee:	d1f7      	bne.n	cee0 <memcmp+0x1c>
    cef0:	2000      	movs	r0, #0
    cef2:	bc70      	pop	{r4, r5, r6}
    cef4:	4770      	bx	lr
    cef6:	460c      	mov	r4, r1
    cef8:	4603      	mov	r3, r0
    cefa:	681e      	ldr	r6, [r3, #0]
    cefc:	6825      	ldr	r5, [r4, #0]
    cefe:	42ae      	cmp	r6, r5
    cf00:	4618      	mov	r0, r3
    cf02:	4621      	mov	r1, r4
    cf04:	f103 0304 	add.w	r3, r3, #4
    cf08:	f104 0404 	add.w	r4, r4, #4
    cf0c:	d1e1      	bne.n	ced2 <memcmp+0xe>
    cf0e:	3a04      	subs	r2, #4
    cf10:	2a03      	cmp	r2, #3
    cf12:	4618      	mov	r0, r3
    cf14:	4621      	mov	r1, r4
    cf16:	d8f0      	bhi.n	cefa <memcmp+0x36>
    cf18:	2a00      	cmp	r2, #0
    cf1a:	d1da      	bne.n	ced2 <memcmp+0xe>
    cf1c:	4610      	mov	r0, r2
    cf1e:	e7e8      	b.n	cef2 <memcmp+0x2e>
    cf20:	1b60      	subs	r0, r4, r5
    cf22:	bc70      	pop	{r4, r5, r6}
    cf24:	4770      	bx	lr
    cf26:	bf00      	nop

0000cf28 <memmove>:
    cf28:	4288      	cmp	r0, r1
    cf2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf2c:	d90d      	bls.n	cf4a <memmove+0x22>
    cf2e:	188b      	adds	r3, r1, r2
    cf30:	4298      	cmp	r0, r3
    cf32:	d20a      	bcs.n	cf4a <memmove+0x22>
    cf34:	1881      	adds	r1, r0, r2
    cf36:	2a00      	cmp	r2, #0
    cf38:	d051      	beq.n	cfde <memmove+0xb6>
    cf3a:	1a9a      	subs	r2, r3, r2
    cf3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    cf40:	f801 4d01 	strb.w	r4, [r1, #-1]!
    cf44:	4293      	cmp	r3, r2
    cf46:	d1f9      	bne.n	cf3c <memmove+0x14>
    cf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf4a:	2a0f      	cmp	r2, #15
    cf4c:	d948      	bls.n	cfe0 <memmove+0xb8>
    cf4e:	ea41 0300 	orr.w	r3, r1, r0
    cf52:	079b      	lsls	r3, r3, #30
    cf54:	d146      	bne.n	cfe4 <memmove+0xbc>
    cf56:	f100 0410 	add.w	r4, r0, #16
    cf5a:	f101 0310 	add.w	r3, r1, #16
    cf5e:	4615      	mov	r5, r2
    cf60:	f853 6c10 	ldr.w	r6, [r3, #-16]
    cf64:	f844 6c10 	str.w	r6, [r4, #-16]
    cf68:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    cf6c:	f844 6c0c 	str.w	r6, [r4, #-12]
    cf70:	f853 6c08 	ldr.w	r6, [r3, #-8]
    cf74:	f844 6c08 	str.w	r6, [r4, #-8]
    cf78:	3d10      	subs	r5, #16
    cf7a:	f853 6c04 	ldr.w	r6, [r3, #-4]
    cf7e:	f844 6c04 	str.w	r6, [r4, #-4]
    cf82:	2d0f      	cmp	r5, #15
    cf84:	f103 0310 	add.w	r3, r3, #16
    cf88:	f104 0410 	add.w	r4, r4, #16
    cf8c:	d8e8      	bhi.n	cf60 <memmove+0x38>
    cf8e:	f1a2 0310 	sub.w	r3, r2, #16
    cf92:	f023 030f 	bic.w	r3, r3, #15
    cf96:	f002 0e0f 	and.w	lr, r2, #15
    cf9a:	3310      	adds	r3, #16
    cf9c:	f1be 0f03 	cmp.w	lr, #3
    cfa0:	4419      	add	r1, r3
    cfa2:	4403      	add	r3, r0
    cfa4:	d921      	bls.n	cfea <memmove+0xc2>
    cfa6:	1f1e      	subs	r6, r3, #4
    cfa8:	460d      	mov	r5, r1
    cfaa:	4674      	mov	r4, lr
    cfac:	3c04      	subs	r4, #4
    cfae:	f855 7b04 	ldr.w	r7, [r5], #4
    cfb2:	f846 7f04 	str.w	r7, [r6, #4]!
    cfb6:	2c03      	cmp	r4, #3
    cfb8:	d8f8      	bhi.n	cfac <memmove+0x84>
    cfba:	f1ae 0404 	sub.w	r4, lr, #4
    cfbe:	f024 0403 	bic.w	r4, r4, #3
    cfc2:	3404      	adds	r4, #4
    cfc4:	4423      	add	r3, r4
    cfc6:	4421      	add	r1, r4
    cfc8:	f002 0203 	and.w	r2, r2, #3
    cfcc:	b162      	cbz	r2, cfe8 <memmove+0xc0>
    cfce:	3b01      	subs	r3, #1
    cfd0:	440a      	add	r2, r1
    cfd2:	f811 4b01 	ldrb.w	r4, [r1], #1
    cfd6:	f803 4f01 	strb.w	r4, [r3, #1]!
    cfda:	428a      	cmp	r2, r1
    cfdc:	d1f9      	bne.n	cfd2 <memmove+0xaa>
    cfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfe0:	4603      	mov	r3, r0
    cfe2:	e7f3      	b.n	cfcc <memmove+0xa4>
    cfe4:	4603      	mov	r3, r0
    cfe6:	e7f2      	b.n	cfce <memmove+0xa6>
    cfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfea:	4672      	mov	r2, lr
    cfec:	e7ee      	b.n	cfcc <memmove+0xa4>
    cfee:	bf00      	nop

0000cff0 <memset>:
    cff0:	b470      	push	{r4, r5, r6}
    cff2:	0784      	lsls	r4, r0, #30
    cff4:	d046      	beq.n	d084 <memset+0x94>
    cff6:	1e54      	subs	r4, r2, #1
    cff8:	2a00      	cmp	r2, #0
    cffa:	d041      	beq.n	d080 <memset+0x90>
    cffc:	b2cd      	uxtb	r5, r1
    cffe:	4603      	mov	r3, r0
    d000:	e002      	b.n	d008 <memset+0x18>
    d002:	1e62      	subs	r2, r4, #1
    d004:	b3e4      	cbz	r4, d080 <memset+0x90>
    d006:	4614      	mov	r4, r2
    d008:	f803 5b01 	strb.w	r5, [r3], #1
    d00c:	079a      	lsls	r2, r3, #30
    d00e:	d1f8      	bne.n	d002 <memset+0x12>
    d010:	2c03      	cmp	r4, #3
    d012:	d92e      	bls.n	d072 <memset+0x82>
    d014:	b2cd      	uxtb	r5, r1
    d016:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d01a:	2c0f      	cmp	r4, #15
    d01c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d020:	d919      	bls.n	d056 <memset+0x66>
    d022:	f103 0210 	add.w	r2, r3, #16
    d026:	4626      	mov	r6, r4
    d028:	3e10      	subs	r6, #16
    d02a:	2e0f      	cmp	r6, #15
    d02c:	f842 5c10 	str.w	r5, [r2, #-16]
    d030:	f842 5c0c 	str.w	r5, [r2, #-12]
    d034:	f842 5c08 	str.w	r5, [r2, #-8]
    d038:	f842 5c04 	str.w	r5, [r2, #-4]
    d03c:	f102 0210 	add.w	r2, r2, #16
    d040:	d8f2      	bhi.n	d028 <memset+0x38>
    d042:	f1a4 0210 	sub.w	r2, r4, #16
    d046:	f022 020f 	bic.w	r2, r2, #15
    d04a:	f004 040f 	and.w	r4, r4, #15
    d04e:	3210      	adds	r2, #16
    d050:	2c03      	cmp	r4, #3
    d052:	4413      	add	r3, r2
    d054:	d90d      	bls.n	d072 <memset+0x82>
    d056:	461e      	mov	r6, r3
    d058:	4622      	mov	r2, r4
    d05a:	3a04      	subs	r2, #4
    d05c:	2a03      	cmp	r2, #3
    d05e:	f846 5b04 	str.w	r5, [r6], #4
    d062:	d8fa      	bhi.n	d05a <memset+0x6a>
    d064:	1f22      	subs	r2, r4, #4
    d066:	f022 0203 	bic.w	r2, r2, #3
    d06a:	3204      	adds	r2, #4
    d06c:	4413      	add	r3, r2
    d06e:	f004 0403 	and.w	r4, r4, #3
    d072:	b12c      	cbz	r4, d080 <memset+0x90>
    d074:	b2c9      	uxtb	r1, r1
    d076:	441c      	add	r4, r3
    d078:	f803 1b01 	strb.w	r1, [r3], #1
    d07c:	42a3      	cmp	r3, r4
    d07e:	d1fb      	bne.n	d078 <memset+0x88>
    d080:	bc70      	pop	{r4, r5, r6}
    d082:	4770      	bx	lr
    d084:	4614      	mov	r4, r2
    d086:	4603      	mov	r3, r0
    d088:	e7c2      	b.n	d010 <memset+0x20>
    d08a:	bf00      	nop

0000d08c <__malloc_lock>:
    d08c:	4770      	bx	lr
    d08e:	bf00      	nop

0000d090 <__malloc_unlock>:
    d090:	4770      	bx	lr
    d092:	bf00      	nop

0000d094 <realloc>:
    d094:	4b02      	ldr	r3, [pc, #8]	; (d0a0 <realloc+0xc>)
    d096:	460a      	mov	r2, r1
    d098:	4601      	mov	r1, r0
    d09a:	6818      	ldr	r0, [r3, #0]
    d09c:	f000 b802 	b.w	d0a4 <_realloc_r>
    d0a0:	200022e0 	.word	0x200022e0

0000d0a4 <_realloc_r>:
    d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0a8:	4617      	mov	r7, r2
    d0aa:	b083      	sub	sp, #12
    d0ac:	2900      	cmp	r1, #0
    d0ae:	f000 80c1 	beq.w	d234 <_realloc_r+0x190>
    d0b2:	460e      	mov	r6, r1
    d0b4:	4681      	mov	r9, r0
    d0b6:	f107 050b 	add.w	r5, r7, #11
    d0ba:	f7ff ffe7 	bl	d08c <__malloc_lock>
    d0be:	f856 ec04 	ldr.w	lr, [r6, #-4]
    d0c2:	2d16      	cmp	r5, #22
    d0c4:	f02e 0403 	bic.w	r4, lr, #3
    d0c8:	f1a6 0808 	sub.w	r8, r6, #8
    d0cc:	d840      	bhi.n	d150 <_realloc_r+0xac>
    d0ce:	2210      	movs	r2, #16
    d0d0:	4615      	mov	r5, r2
    d0d2:	42af      	cmp	r7, r5
    d0d4:	d841      	bhi.n	d15a <_realloc_r+0xb6>
    d0d6:	4294      	cmp	r4, r2
    d0d8:	da75      	bge.n	d1c6 <_realloc_r+0x122>
    d0da:	4bc9      	ldr	r3, [pc, #804]	; (d400 <_realloc_r+0x35c>)
    d0dc:	6899      	ldr	r1, [r3, #8]
    d0de:	eb08 0004 	add.w	r0, r8, r4
    d0e2:	4288      	cmp	r0, r1
    d0e4:	6841      	ldr	r1, [r0, #4]
    d0e6:	f000 80d9 	beq.w	d29c <_realloc_r+0x1f8>
    d0ea:	f021 0301 	bic.w	r3, r1, #1
    d0ee:	4403      	add	r3, r0
    d0f0:	685b      	ldr	r3, [r3, #4]
    d0f2:	07db      	lsls	r3, r3, #31
    d0f4:	d57d      	bpl.n	d1f2 <_realloc_r+0x14e>
    d0f6:	f01e 0f01 	tst.w	lr, #1
    d0fa:	d035      	beq.n	d168 <_realloc_r+0xc4>
    d0fc:	4639      	mov	r1, r7
    d0fe:	4648      	mov	r0, r9
    d100:	f7ff fc12 	bl	c928 <_malloc_r>
    d104:	4607      	mov	r7, r0
    d106:	b1e0      	cbz	r0, d142 <_realloc_r+0x9e>
    d108:	f856 3c04 	ldr.w	r3, [r6, #-4]
    d10c:	f023 0301 	bic.w	r3, r3, #1
    d110:	4443      	add	r3, r8
    d112:	f1a0 0208 	sub.w	r2, r0, #8
    d116:	429a      	cmp	r2, r3
    d118:	f000 8144 	beq.w	d3a4 <_realloc_r+0x300>
    d11c:	1f22      	subs	r2, r4, #4
    d11e:	2a24      	cmp	r2, #36	; 0x24
    d120:	f200 8131 	bhi.w	d386 <_realloc_r+0x2e2>
    d124:	2a13      	cmp	r2, #19
    d126:	f200 8104 	bhi.w	d332 <_realloc_r+0x28e>
    d12a:	4603      	mov	r3, r0
    d12c:	4632      	mov	r2, r6
    d12e:	6811      	ldr	r1, [r2, #0]
    d130:	6019      	str	r1, [r3, #0]
    d132:	6851      	ldr	r1, [r2, #4]
    d134:	6059      	str	r1, [r3, #4]
    d136:	6892      	ldr	r2, [r2, #8]
    d138:	609a      	str	r2, [r3, #8]
    d13a:	4631      	mov	r1, r6
    d13c:	4648      	mov	r0, r9
    d13e:	f000 fea1 	bl	de84 <_free_r>
    d142:	4648      	mov	r0, r9
    d144:	f7ff ffa4 	bl	d090 <__malloc_unlock>
    d148:	4638      	mov	r0, r7
    d14a:	b003      	add	sp, #12
    d14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d150:	f025 0507 	bic.w	r5, r5, #7
    d154:	2d00      	cmp	r5, #0
    d156:	462a      	mov	r2, r5
    d158:	dabb      	bge.n	d0d2 <_realloc_r+0x2e>
    d15a:	230c      	movs	r3, #12
    d15c:	2000      	movs	r0, #0
    d15e:	f8c9 3000 	str.w	r3, [r9]
    d162:	b003      	add	sp, #12
    d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d168:	f856 3c08 	ldr.w	r3, [r6, #-8]
    d16c:	ebc3 0a08 	rsb	sl, r3, r8
    d170:	f8da 3004 	ldr.w	r3, [sl, #4]
    d174:	f023 0c03 	bic.w	ip, r3, #3
    d178:	eb04 030c 	add.w	r3, r4, ip
    d17c:	4293      	cmp	r3, r2
    d17e:	dbbd      	blt.n	d0fc <_realloc_r+0x58>
    d180:	4657      	mov	r7, sl
    d182:	f8da 100c 	ldr.w	r1, [sl, #12]
    d186:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d18a:	1f22      	subs	r2, r4, #4
    d18c:	2a24      	cmp	r2, #36	; 0x24
    d18e:	60c1      	str	r1, [r0, #12]
    d190:	6088      	str	r0, [r1, #8]
    d192:	f200 8117 	bhi.w	d3c4 <_realloc_r+0x320>
    d196:	2a13      	cmp	r2, #19
    d198:	f240 8112 	bls.w	d3c0 <_realloc_r+0x31c>
    d19c:	6831      	ldr	r1, [r6, #0]
    d19e:	f8ca 1008 	str.w	r1, [sl, #8]
    d1a2:	6871      	ldr	r1, [r6, #4]
    d1a4:	f8ca 100c 	str.w	r1, [sl, #12]
    d1a8:	2a1b      	cmp	r2, #27
    d1aa:	f200 812b 	bhi.w	d404 <_realloc_r+0x360>
    d1ae:	3608      	adds	r6, #8
    d1b0:	f10a 0210 	add.w	r2, sl, #16
    d1b4:	6831      	ldr	r1, [r6, #0]
    d1b6:	6011      	str	r1, [r2, #0]
    d1b8:	6871      	ldr	r1, [r6, #4]
    d1ba:	6051      	str	r1, [r2, #4]
    d1bc:	68b1      	ldr	r1, [r6, #8]
    d1be:	6091      	str	r1, [r2, #8]
    d1c0:	463e      	mov	r6, r7
    d1c2:	461c      	mov	r4, r3
    d1c4:	46d0      	mov	r8, sl
    d1c6:	1b63      	subs	r3, r4, r5
    d1c8:	2b0f      	cmp	r3, #15
    d1ca:	d81d      	bhi.n	d208 <_realloc_r+0x164>
    d1cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d1d0:	f003 0301 	and.w	r3, r3, #1
    d1d4:	4323      	orrs	r3, r4
    d1d6:	4444      	add	r4, r8
    d1d8:	f8c8 3004 	str.w	r3, [r8, #4]
    d1dc:	6863      	ldr	r3, [r4, #4]
    d1de:	f043 0301 	orr.w	r3, r3, #1
    d1e2:	6063      	str	r3, [r4, #4]
    d1e4:	4648      	mov	r0, r9
    d1e6:	f7ff ff53 	bl	d090 <__malloc_unlock>
    d1ea:	4630      	mov	r0, r6
    d1ec:	b003      	add	sp, #12
    d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1f2:	f021 0103 	bic.w	r1, r1, #3
    d1f6:	4421      	add	r1, r4
    d1f8:	4291      	cmp	r1, r2
    d1fa:	db21      	blt.n	d240 <_realloc_r+0x19c>
    d1fc:	68c3      	ldr	r3, [r0, #12]
    d1fe:	6882      	ldr	r2, [r0, #8]
    d200:	460c      	mov	r4, r1
    d202:	60d3      	str	r3, [r2, #12]
    d204:	609a      	str	r2, [r3, #8]
    d206:	e7de      	b.n	d1c6 <_realloc_r+0x122>
    d208:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d20c:	eb08 0105 	add.w	r1, r8, r5
    d210:	f002 0201 	and.w	r2, r2, #1
    d214:	4315      	orrs	r5, r2
    d216:	f043 0201 	orr.w	r2, r3, #1
    d21a:	440b      	add	r3, r1
    d21c:	f8c8 5004 	str.w	r5, [r8, #4]
    d220:	604a      	str	r2, [r1, #4]
    d222:	685a      	ldr	r2, [r3, #4]
    d224:	f042 0201 	orr.w	r2, r2, #1
    d228:	3108      	adds	r1, #8
    d22a:	605a      	str	r2, [r3, #4]
    d22c:	4648      	mov	r0, r9
    d22e:	f000 fe29 	bl	de84 <_free_r>
    d232:	e7d7      	b.n	d1e4 <_realloc_r+0x140>
    d234:	4611      	mov	r1, r2
    d236:	b003      	add	sp, #12
    d238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d23c:	f7ff bb74 	b.w	c928 <_malloc_r>
    d240:	f01e 0f01 	tst.w	lr, #1
    d244:	f47f af5a 	bne.w	d0fc <_realloc_r+0x58>
    d248:	f856 3c08 	ldr.w	r3, [r6, #-8]
    d24c:	ebc3 0a08 	rsb	sl, r3, r8
    d250:	f8da 3004 	ldr.w	r3, [sl, #4]
    d254:	f023 0c03 	bic.w	ip, r3, #3
    d258:	eb01 0e0c 	add.w	lr, r1, ip
    d25c:	4596      	cmp	lr, r2
    d25e:	db8b      	blt.n	d178 <_realloc_r+0xd4>
    d260:	68c3      	ldr	r3, [r0, #12]
    d262:	6882      	ldr	r2, [r0, #8]
    d264:	4657      	mov	r7, sl
    d266:	60d3      	str	r3, [r2, #12]
    d268:	609a      	str	r2, [r3, #8]
    d26a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    d26e:	f8da 300c 	ldr.w	r3, [sl, #12]
    d272:	60cb      	str	r3, [r1, #12]
    d274:	1f22      	subs	r2, r4, #4
    d276:	2a24      	cmp	r2, #36	; 0x24
    d278:	6099      	str	r1, [r3, #8]
    d27a:	f200 8099 	bhi.w	d3b0 <_realloc_r+0x30c>
    d27e:	2a13      	cmp	r2, #19
    d280:	d962      	bls.n	d348 <_realloc_r+0x2a4>
    d282:	6833      	ldr	r3, [r6, #0]
    d284:	f8ca 3008 	str.w	r3, [sl, #8]
    d288:	6873      	ldr	r3, [r6, #4]
    d28a:	f8ca 300c 	str.w	r3, [sl, #12]
    d28e:	2a1b      	cmp	r2, #27
    d290:	f200 80a0 	bhi.w	d3d4 <_realloc_r+0x330>
    d294:	3608      	adds	r6, #8
    d296:	f10a 0310 	add.w	r3, sl, #16
    d29a:	e056      	b.n	d34a <_realloc_r+0x2a6>
    d29c:	f021 0b03 	bic.w	fp, r1, #3
    d2a0:	44a3      	add	fp, r4
    d2a2:	f105 0010 	add.w	r0, r5, #16
    d2a6:	4583      	cmp	fp, r0
    d2a8:	da59      	bge.n	d35e <_realloc_r+0x2ba>
    d2aa:	f01e 0f01 	tst.w	lr, #1
    d2ae:	f47f af25 	bne.w	d0fc <_realloc_r+0x58>
    d2b2:	f856 1c08 	ldr.w	r1, [r6, #-8]
    d2b6:	ebc1 0a08 	rsb	sl, r1, r8
    d2ba:	f8da 1004 	ldr.w	r1, [sl, #4]
    d2be:	f021 0c03 	bic.w	ip, r1, #3
    d2c2:	44e3      	add	fp, ip
    d2c4:	4558      	cmp	r0, fp
    d2c6:	f73f af57 	bgt.w	d178 <_realloc_r+0xd4>
    d2ca:	4657      	mov	r7, sl
    d2cc:	f8da 100c 	ldr.w	r1, [sl, #12]
    d2d0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d2d4:	1f22      	subs	r2, r4, #4
    d2d6:	2a24      	cmp	r2, #36	; 0x24
    d2d8:	60c1      	str	r1, [r0, #12]
    d2da:	6088      	str	r0, [r1, #8]
    d2dc:	f200 80b4 	bhi.w	d448 <_realloc_r+0x3a4>
    d2e0:	2a13      	cmp	r2, #19
    d2e2:	f240 80a5 	bls.w	d430 <_realloc_r+0x38c>
    d2e6:	6831      	ldr	r1, [r6, #0]
    d2e8:	f8ca 1008 	str.w	r1, [sl, #8]
    d2ec:	6871      	ldr	r1, [r6, #4]
    d2ee:	f8ca 100c 	str.w	r1, [sl, #12]
    d2f2:	2a1b      	cmp	r2, #27
    d2f4:	f200 80af 	bhi.w	d456 <_realloc_r+0x3b2>
    d2f8:	3608      	adds	r6, #8
    d2fa:	f10a 0210 	add.w	r2, sl, #16
    d2fe:	6831      	ldr	r1, [r6, #0]
    d300:	6011      	str	r1, [r2, #0]
    d302:	6871      	ldr	r1, [r6, #4]
    d304:	6051      	str	r1, [r2, #4]
    d306:	68b1      	ldr	r1, [r6, #8]
    d308:	6091      	str	r1, [r2, #8]
    d30a:	eb0a 0105 	add.w	r1, sl, r5
    d30e:	ebc5 020b 	rsb	r2, r5, fp
    d312:	f042 0201 	orr.w	r2, r2, #1
    d316:	6099      	str	r1, [r3, #8]
    d318:	604a      	str	r2, [r1, #4]
    d31a:	f8da 3004 	ldr.w	r3, [sl, #4]
    d31e:	f003 0301 	and.w	r3, r3, #1
    d322:	431d      	orrs	r5, r3
    d324:	4648      	mov	r0, r9
    d326:	f8ca 5004 	str.w	r5, [sl, #4]
    d32a:	f7ff feb1 	bl	d090 <__malloc_unlock>
    d32e:	4638      	mov	r0, r7
    d330:	e75c      	b.n	d1ec <_realloc_r+0x148>
    d332:	6833      	ldr	r3, [r6, #0]
    d334:	6003      	str	r3, [r0, #0]
    d336:	6873      	ldr	r3, [r6, #4]
    d338:	6043      	str	r3, [r0, #4]
    d33a:	2a1b      	cmp	r2, #27
    d33c:	d827      	bhi.n	d38e <_realloc_r+0x2ea>
    d33e:	f100 0308 	add.w	r3, r0, #8
    d342:	f106 0208 	add.w	r2, r6, #8
    d346:	e6f2      	b.n	d12e <_realloc_r+0x8a>
    d348:	463b      	mov	r3, r7
    d34a:	6832      	ldr	r2, [r6, #0]
    d34c:	601a      	str	r2, [r3, #0]
    d34e:	6872      	ldr	r2, [r6, #4]
    d350:	605a      	str	r2, [r3, #4]
    d352:	68b2      	ldr	r2, [r6, #8]
    d354:	609a      	str	r2, [r3, #8]
    d356:	463e      	mov	r6, r7
    d358:	4674      	mov	r4, lr
    d35a:	46d0      	mov	r8, sl
    d35c:	e733      	b.n	d1c6 <_realloc_r+0x122>
    d35e:	eb08 0105 	add.w	r1, r8, r5
    d362:	ebc5 0b0b 	rsb	fp, r5, fp
    d366:	f04b 0201 	orr.w	r2, fp, #1
    d36a:	6099      	str	r1, [r3, #8]
    d36c:	604a      	str	r2, [r1, #4]
    d36e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    d372:	f003 0301 	and.w	r3, r3, #1
    d376:	431d      	orrs	r5, r3
    d378:	4648      	mov	r0, r9
    d37a:	f846 5c04 	str.w	r5, [r6, #-4]
    d37e:	f7ff fe87 	bl	d090 <__malloc_unlock>
    d382:	4630      	mov	r0, r6
    d384:	e732      	b.n	d1ec <_realloc_r+0x148>
    d386:	4631      	mov	r1, r6
    d388:	f7ff fdce 	bl	cf28 <memmove>
    d38c:	e6d5      	b.n	d13a <_realloc_r+0x96>
    d38e:	68b3      	ldr	r3, [r6, #8]
    d390:	6083      	str	r3, [r0, #8]
    d392:	68f3      	ldr	r3, [r6, #12]
    d394:	60c3      	str	r3, [r0, #12]
    d396:	2a24      	cmp	r2, #36	; 0x24
    d398:	d028      	beq.n	d3ec <_realloc_r+0x348>
    d39a:	f100 0310 	add.w	r3, r0, #16
    d39e:	f106 0210 	add.w	r2, r6, #16
    d3a2:	e6c4      	b.n	d12e <_realloc_r+0x8a>
    d3a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d3a8:	f023 0303 	bic.w	r3, r3, #3
    d3ac:	441c      	add	r4, r3
    d3ae:	e70a      	b.n	d1c6 <_realloc_r+0x122>
    d3b0:	4631      	mov	r1, r6
    d3b2:	4638      	mov	r0, r7
    d3b4:	4674      	mov	r4, lr
    d3b6:	46d0      	mov	r8, sl
    d3b8:	f7ff fdb6 	bl	cf28 <memmove>
    d3bc:	463e      	mov	r6, r7
    d3be:	e702      	b.n	d1c6 <_realloc_r+0x122>
    d3c0:	463a      	mov	r2, r7
    d3c2:	e6f7      	b.n	d1b4 <_realloc_r+0x110>
    d3c4:	4631      	mov	r1, r6
    d3c6:	4638      	mov	r0, r7
    d3c8:	461c      	mov	r4, r3
    d3ca:	46d0      	mov	r8, sl
    d3cc:	f7ff fdac 	bl	cf28 <memmove>
    d3d0:	463e      	mov	r6, r7
    d3d2:	e6f8      	b.n	d1c6 <_realloc_r+0x122>
    d3d4:	68b3      	ldr	r3, [r6, #8]
    d3d6:	f8ca 3010 	str.w	r3, [sl, #16]
    d3da:	68f3      	ldr	r3, [r6, #12]
    d3dc:	f8ca 3014 	str.w	r3, [sl, #20]
    d3e0:	2a24      	cmp	r2, #36	; 0x24
    d3e2:	d01b      	beq.n	d41c <_realloc_r+0x378>
    d3e4:	3610      	adds	r6, #16
    d3e6:	f10a 0318 	add.w	r3, sl, #24
    d3ea:	e7ae      	b.n	d34a <_realloc_r+0x2a6>
    d3ec:	6933      	ldr	r3, [r6, #16]
    d3ee:	6103      	str	r3, [r0, #16]
    d3f0:	6973      	ldr	r3, [r6, #20]
    d3f2:	6143      	str	r3, [r0, #20]
    d3f4:	f106 0218 	add.w	r2, r6, #24
    d3f8:	f100 0318 	add.w	r3, r0, #24
    d3fc:	e697      	b.n	d12e <_realloc_r+0x8a>
    d3fe:	bf00      	nop
    d400:	20002450 	.word	0x20002450
    d404:	68b1      	ldr	r1, [r6, #8]
    d406:	f8ca 1010 	str.w	r1, [sl, #16]
    d40a:	68f1      	ldr	r1, [r6, #12]
    d40c:	f8ca 1014 	str.w	r1, [sl, #20]
    d410:	2a24      	cmp	r2, #36	; 0x24
    d412:	d00f      	beq.n	d434 <_realloc_r+0x390>
    d414:	3610      	adds	r6, #16
    d416:	f10a 0218 	add.w	r2, sl, #24
    d41a:	e6cb      	b.n	d1b4 <_realloc_r+0x110>
    d41c:	6933      	ldr	r3, [r6, #16]
    d41e:	f8ca 3018 	str.w	r3, [sl, #24]
    d422:	6973      	ldr	r3, [r6, #20]
    d424:	f8ca 301c 	str.w	r3, [sl, #28]
    d428:	3618      	adds	r6, #24
    d42a:	f10a 0320 	add.w	r3, sl, #32
    d42e:	e78c      	b.n	d34a <_realloc_r+0x2a6>
    d430:	463a      	mov	r2, r7
    d432:	e764      	b.n	d2fe <_realloc_r+0x25a>
    d434:	6932      	ldr	r2, [r6, #16]
    d436:	f8ca 2018 	str.w	r2, [sl, #24]
    d43a:	6972      	ldr	r2, [r6, #20]
    d43c:	f8ca 201c 	str.w	r2, [sl, #28]
    d440:	3618      	adds	r6, #24
    d442:	f10a 0220 	add.w	r2, sl, #32
    d446:	e6b5      	b.n	d1b4 <_realloc_r+0x110>
    d448:	4631      	mov	r1, r6
    d44a:	4638      	mov	r0, r7
    d44c:	9301      	str	r3, [sp, #4]
    d44e:	f7ff fd6b 	bl	cf28 <memmove>
    d452:	9b01      	ldr	r3, [sp, #4]
    d454:	e759      	b.n	d30a <_realloc_r+0x266>
    d456:	68b1      	ldr	r1, [r6, #8]
    d458:	f8ca 1010 	str.w	r1, [sl, #16]
    d45c:	68f1      	ldr	r1, [r6, #12]
    d45e:	f8ca 1014 	str.w	r1, [sl, #20]
    d462:	2a24      	cmp	r2, #36	; 0x24
    d464:	d003      	beq.n	d46e <_realloc_r+0x3ca>
    d466:	3610      	adds	r6, #16
    d468:	f10a 0218 	add.w	r2, sl, #24
    d46c:	e747      	b.n	d2fe <_realloc_r+0x25a>
    d46e:	6932      	ldr	r2, [r6, #16]
    d470:	f8ca 2018 	str.w	r2, [sl, #24]
    d474:	6972      	ldr	r2, [r6, #20]
    d476:	f8ca 201c 	str.w	r2, [sl, #28]
    d47a:	3618      	adds	r6, #24
    d47c:	f10a 0220 	add.w	r2, sl, #32
    d480:	e73d      	b.n	d2fe <_realloc_r+0x25a>
    d482:	bf00      	nop

0000d484 <_sbrk_r>:
    d484:	b538      	push	{r3, r4, r5, lr}
    d486:	4c07      	ldr	r4, [pc, #28]	; (d4a4 <_sbrk_r+0x20>)
    d488:	2300      	movs	r3, #0
    d48a:	4605      	mov	r5, r0
    d48c:	4608      	mov	r0, r1
    d48e:	6023      	str	r3, [r4, #0]
    d490:	f7fd fb2e 	bl	aaf0 <_sbrk>
    d494:	1c43      	adds	r3, r0, #1
    d496:	d000      	beq.n	d49a <_sbrk_r+0x16>
    d498:	bd38      	pop	{r3, r4, r5, pc}
    d49a:	6823      	ldr	r3, [r4, #0]
    d49c:	2b00      	cmp	r3, #0
    d49e:	d0fb      	beq.n	d498 <_sbrk_r+0x14>
    d4a0:	602b      	str	r3, [r5, #0]
    d4a2:	bd38      	pop	{r3, r4, r5, pc}
    d4a4:	2000528c 	.word	0x2000528c

0000d4a8 <strchr>:
    d4a8:	b470      	push	{r4, r5, r6}
    d4aa:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    d4ae:	d034      	beq.n	d51a <strchr+0x72>
    d4b0:	0785      	lsls	r5, r0, #30
    d4b2:	d00f      	beq.n	d4d4 <strchr+0x2c>
    d4b4:	7803      	ldrb	r3, [r0, #0]
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d05a      	beq.n	d570 <strchr+0xc8>
    d4ba:	429c      	cmp	r4, r3
    d4bc:	d02b      	beq.n	d516 <strchr+0x6e>
    d4be:	1c43      	adds	r3, r0, #1
    d4c0:	e005      	b.n	d4ce <strchr+0x26>
    d4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
    d4c6:	2a00      	cmp	r2, #0
    d4c8:	d04f      	beq.n	d56a <strchr+0xc2>
    d4ca:	4294      	cmp	r4, r2
    d4cc:	d023      	beq.n	d516 <strchr+0x6e>
    d4ce:	079a      	lsls	r2, r3, #30
    d4d0:	4618      	mov	r0, r3
    d4d2:	d1f6      	bne.n	d4c2 <strchr+0x1a>
    d4d4:	020e      	lsls	r6, r1, #8
    d4d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    d4da:	4326      	orrs	r6, r4
    d4dc:	6803      	ldr	r3, [r0, #0]
    d4de:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    d4e2:	e001      	b.n	d4e8 <strchr+0x40>
    d4e4:	f850 3f04 	ldr.w	r3, [r0, #4]!
    d4e8:	ea86 0503 	eor.w	r5, r6, r3
    d4ec:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
    d4f0:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
    d4f4:	ea22 0205 	bic.w	r2, r2, r5
    d4f8:	ea21 0303 	bic.w	r3, r1, r3
    d4fc:	4313      	orrs	r3, r2
    d4fe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    d502:	d0ef      	beq.n	d4e4 <strchr+0x3c>
    d504:	7803      	ldrb	r3, [r0, #0]
    d506:	b923      	cbnz	r3, d512 <strchr+0x6a>
    d508:	e032      	b.n	d570 <strchr+0xc8>
    d50a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    d50e:	2b00      	cmp	r3, #0
    d510:	d02e      	beq.n	d570 <strchr+0xc8>
    d512:	429c      	cmp	r4, r3
    d514:	d1f9      	bne.n	d50a <strchr+0x62>
    d516:	bc70      	pop	{r4, r5, r6}
    d518:	4770      	bx	lr
    d51a:	0784      	lsls	r4, r0, #30
    d51c:	d00b      	beq.n	d536 <strchr+0x8e>
    d51e:	7803      	ldrb	r3, [r0, #0]
    d520:	2b00      	cmp	r3, #0
    d522:	d0f8      	beq.n	d516 <strchr+0x6e>
    d524:	1c43      	adds	r3, r0, #1
    d526:	e003      	b.n	d530 <strchr+0x88>
    d528:	7802      	ldrb	r2, [r0, #0]
    d52a:	3301      	adds	r3, #1
    d52c:	2a00      	cmp	r2, #0
    d52e:	d0f2      	beq.n	d516 <strchr+0x6e>
    d530:	0799      	lsls	r1, r3, #30
    d532:	4618      	mov	r0, r3
    d534:	d1f8      	bne.n	d528 <strchr+0x80>
    d536:	6802      	ldr	r2, [r0, #0]
    d538:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    d53c:	ea23 0302 	bic.w	r3, r3, r2
    d540:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    d544:	d108      	bne.n	d558 <strchr+0xb0>
    d546:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d54a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    d54e:	ea23 0302 	bic.w	r3, r3, r2
    d552:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    d556:	d0f6      	beq.n	d546 <strchr+0x9e>
    d558:	7803      	ldrb	r3, [r0, #0]
    d55a:	2b00      	cmp	r3, #0
    d55c:	d0db      	beq.n	d516 <strchr+0x6e>
    d55e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    d562:	2b00      	cmp	r3, #0
    d564:	d1fb      	bne.n	d55e <strchr+0xb6>
    d566:	bc70      	pop	{r4, r5, r6}
    d568:	4770      	bx	lr
    d56a:	4610      	mov	r0, r2
    d56c:	bc70      	pop	{r4, r5, r6}
    d56e:	4770      	bx	lr
    d570:	4618      	mov	r0, r3
    d572:	bc70      	pop	{r4, r5, r6}
    d574:	4770      	bx	lr
    d576:	bf00      	nop
	...
    d580:	eba2 0003 	sub.w	r0, r2, r3
    d584:	4770      	bx	lr
    d586:	bf00      	nop

0000d588 <strcmp>:
    d588:	7802      	ldrb	r2, [r0, #0]
    d58a:	780b      	ldrb	r3, [r1, #0]
    d58c:	2a01      	cmp	r2, #1
    d58e:	bf28      	it	cs
    d590:	429a      	cmpcs	r2, r3
    d592:	d1f5      	bne.n	d580 <strchr+0xd8>
    d594:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    d598:	ea40 0401 	orr.w	r4, r0, r1
    d59c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d5a0:	f06f 0c00 	mvn.w	ip, #0
    d5a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    d5a8:	b312      	cbz	r2, d5f0 <strcmp+0x68>
    d5aa:	ea80 0401 	eor.w	r4, r0, r1
    d5ae:	f014 0f07 	tst.w	r4, #7
    d5b2:	d16a      	bne.n	d68a <strcmp+0x102>
    d5b4:	f000 0407 	and.w	r4, r0, #7
    d5b8:	f020 0007 	bic.w	r0, r0, #7
    d5bc:	f004 0503 	and.w	r5, r4, #3
    d5c0:	f021 0107 	bic.w	r1, r1, #7
    d5c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d5c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    d5cc:	f014 0f04 	tst.w	r4, #4
    d5d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    d5d4:	fa0c f405 	lsl.w	r4, ip, r5
    d5d8:	ea62 0204 	orn	r2, r2, r4
    d5dc:	ea66 0604 	orn	r6, r6, r4
    d5e0:	d00a      	beq.n	d5f8 <strcmp+0x70>
    d5e2:	ea63 0304 	orn	r3, r3, r4
    d5e6:	4662      	mov	r2, ip
    d5e8:	ea67 0704 	orn	r7, r7, r4
    d5ec:	4666      	mov	r6, ip
    d5ee:	e003      	b.n	d5f8 <strcmp+0x70>
    d5f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    d5f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    d5f8:	fa82 f54c 	uadd8	r5, r2, ip
    d5fc:	ea82 0406 	eor.w	r4, r2, r6
    d600:	faa4 f48c 	sel	r4, r4, ip
    d604:	bb6c      	cbnz	r4, d662 <strcmp+0xda>
    d606:	fa83 f54c 	uadd8	r5, r3, ip
    d60a:	ea83 0507 	eor.w	r5, r3, r7
    d60e:	faa5 f58c 	sel	r5, r5, ip
    d612:	b995      	cbnz	r5, d63a <strcmp+0xb2>
    d614:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    d618:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    d61c:	fa82 f54c 	uadd8	r5, r2, ip
    d620:	ea82 0406 	eor.w	r4, r2, r6
    d624:	faa4 f48c 	sel	r4, r4, ip
    d628:	fa83 f54c 	uadd8	r5, r3, ip
    d62c:	ea83 0507 	eor.w	r5, r3, r7
    d630:	faa5 f58c 	sel	r5, r5, ip
    d634:	4325      	orrs	r5, r4
    d636:	d0db      	beq.n	d5f0 <strcmp+0x68>
    d638:	b99c      	cbnz	r4, d662 <strcmp+0xda>
    d63a:	ba2d      	rev	r5, r5
    d63c:	fab5 f485 	clz	r4, r5
    d640:	f024 0407 	bic.w	r4, r4, #7
    d644:	fa27 f104 	lsr.w	r1, r7, r4
    d648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d64c:	fa23 f304 	lsr.w	r3, r3, r4
    d650:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    d654:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d658:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d65c:	eba0 0001 	sub.w	r0, r0, r1
    d660:	4770      	bx	lr
    d662:	ba24      	rev	r4, r4
    d664:	fab4 f484 	clz	r4, r4
    d668:	f024 0407 	bic.w	r4, r4, #7
    d66c:	fa26 f104 	lsr.w	r1, r6, r4
    d670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d674:	fa22 f204 	lsr.w	r2, r2, r4
    d678:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d67c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d680:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d684:	eba0 0001 	sub.w	r0, r0, r1
    d688:	4770      	bx	lr
    d68a:	f014 0f03 	tst.w	r4, #3
    d68e:	d13c      	bne.n	d70a <strcmp+0x182>
    d690:	f010 0403 	ands.w	r4, r0, #3
    d694:	d128      	bne.n	d6e8 <strcmp+0x160>
    d696:	f850 2b08 	ldr.w	r2, [r0], #8
    d69a:	f851 3b08 	ldr.w	r3, [r1], #8
    d69e:	fa82 f54c 	uadd8	r5, r2, ip
    d6a2:	ea82 0503 	eor.w	r5, r2, r3
    d6a6:	faa5 f58c 	sel	r5, r5, ip
    d6aa:	b95d      	cbnz	r5, d6c4 <strcmp+0x13c>
    d6ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
    d6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d6b4:	fa82 f54c 	uadd8	r5, r2, ip
    d6b8:	ea82 0503 	eor.w	r5, r2, r3
    d6bc:	faa5 f58c 	sel	r5, r5, ip
    d6c0:	2d00      	cmp	r5, #0
    d6c2:	d0e8      	beq.n	d696 <strcmp+0x10e>
    d6c4:	ba2d      	rev	r5, r5
    d6c6:	fab5 f485 	clz	r4, r5
    d6ca:	f024 0407 	bic.w	r4, r4, #7
    d6ce:	fa23 f104 	lsr.w	r1, r3, r4
    d6d2:	fa22 f204 	lsr.w	r2, r2, r4
    d6d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d6da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d6de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d6e2:	eba0 0001 	sub.w	r0, r0, r1
    d6e6:	4770      	bx	lr
    d6e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    d6ec:	f020 0003 	bic.w	r0, r0, #3
    d6f0:	f850 2b08 	ldr.w	r2, [r0], #8
    d6f4:	f021 0103 	bic.w	r1, r1, #3
    d6f8:	f851 3b08 	ldr.w	r3, [r1], #8
    d6fc:	fa0c f404 	lsl.w	r4, ip, r4
    d700:	ea62 0204 	orn	r2, r2, r4
    d704:	ea63 0304 	orn	r3, r3, r4
    d708:	e7c9      	b.n	d69e <strcmp+0x116>
    d70a:	f010 0403 	ands.w	r4, r0, #3
    d70e:	d01a      	beq.n	d746 <strcmp+0x1be>
    d710:	eba1 0104 	sub.w	r1, r1, r4
    d714:	f020 0003 	bic.w	r0, r0, #3
    d718:	07e4      	lsls	r4, r4, #31
    d71a:	f850 2b04 	ldr.w	r2, [r0], #4
    d71e:	d006      	beq.n	d72e <strcmp+0x1a6>
    d720:	d20f      	bcs.n	d742 <strcmp+0x1ba>
    d722:	788b      	ldrb	r3, [r1, #2]
    d724:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    d728:	1ae4      	subs	r4, r4, r3
    d72a:	d106      	bne.n	d73a <strcmp+0x1b2>
    d72c:	b12b      	cbz	r3, d73a <strcmp+0x1b2>
    d72e:	78cb      	ldrb	r3, [r1, #3]
    d730:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    d734:	1ae4      	subs	r4, r4, r3
    d736:	d100      	bne.n	d73a <strcmp+0x1b2>
    d738:	b91b      	cbnz	r3, d742 <strcmp+0x1ba>
    d73a:	4620      	mov	r0, r4
    d73c:	f85d 4b10 	ldr.w	r4, [sp], #16
    d740:	4770      	bx	lr
    d742:	f101 0104 	add.w	r1, r1, #4
    d746:	f850 2b04 	ldr.w	r2, [r0], #4
    d74a:	07cc      	lsls	r4, r1, #31
    d74c:	f021 0103 	bic.w	r1, r1, #3
    d750:	f851 3b04 	ldr.w	r3, [r1], #4
    d754:	d848      	bhi.n	d7e8 <strcmp+0x260>
    d756:	d224      	bcs.n	d7a2 <strcmp+0x21a>
    d758:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    d75c:	fa82 f54c 	uadd8	r5, r2, ip
    d760:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    d764:	faa5 f58c 	sel	r5, r5, ip
    d768:	d10a      	bne.n	d780 <strcmp+0x1f8>
    d76a:	b965      	cbnz	r5, d786 <strcmp+0x1fe>
    d76c:	f851 3b04 	ldr.w	r3, [r1], #4
    d770:	ea84 0402 	eor.w	r4, r4, r2
    d774:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    d778:	d10e      	bne.n	d798 <strcmp+0x210>
    d77a:	f850 2b04 	ldr.w	r2, [r0], #4
    d77e:	e7eb      	b.n	d758 <strcmp+0x1d0>
    d780:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d784:	e055      	b.n	d832 <strcmp+0x2aa>
    d786:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    d78a:	d14d      	bne.n	d828 <strcmp+0x2a0>
    d78c:	7808      	ldrb	r0, [r1, #0]
    d78e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d792:	f1c0 0000 	rsb	r0, r0, #0
    d796:	4770      	bx	lr
    d798:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d79c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    d7a0:	e047      	b.n	d832 <strcmp+0x2aa>
    d7a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    d7a6:	fa82 f54c 	uadd8	r5, r2, ip
    d7aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    d7ae:	faa5 f58c 	sel	r5, r5, ip
    d7b2:	d10a      	bne.n	d7ca <strcmp+0x242>
    d7b4:	b965      	cbnz	r5, d7d0 <strcmp+0x248>
    d7b6:	f851 3b04 	ldr.w	r3, [r1], #4
    d7ba:	ea84 0402 	eor.w	r4, r4, r2
    d7be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    d7c2:	d10c      	bne.n	d7de <strcmp+0x256>
    d7c4:	f850 2b04 	ldr.w	r2, [r0], #4
    d7c8:	e7eb      	b.n	d7a2 <strcmp+0x21a>
    d7ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
    d7ce:	e030      	b.n	d832 <strcmp+0x2aa>
    d7d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    d7d4:	d128      	bne.n	d828 <strcmp+0x2a0>
    d7d6:	880b      	ldrh	r3, [r1, #0]
    d7d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d7dc:	e029      	b.n	d832 <strcmp+0x2aa>
    d7de:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d7e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    d7e6:	e024      	b.n	d832 <strcmp+0x2aa>
    d7e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    d7ec:	fa82 f54c 	uadd8	r5, r2, ip
    d7f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    d7f4:	faa5 f58c 	sel	r5, r5, ip
    d7f8:	d10a      	bne.n	d810 <strcmp+0x288>
    d7fa:	b965      	cbnz	r5, d816 <strcmp+0x28e>
    d7fc:	f851 3b04 	ldr.w	r3, [r1], #4
    d800:	ea84 0402 	eor.w	r4, r4, r2
    d804:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    d808:	d109      	bne.n	d81e <strcmp+0x296>
    d80a:	f850 2b04 	ldr.w	r2, [r0], #4
    d80e:	e7eb      	b.n	d7e8 <strcmp+0x260>
    d810:	ea4f 6313 	mov.w	r3, r3, lsr #24
    d814:	e00d      	b.n	d832 <strcmp+0x2aa>
    d816:	f015 0fff 	tst.w	r5, #255	; 0xff
    d81a:	d105      	bne.n	d828 <strcmp+0x2a0>
    d81c:	680b      	ldr	r3, [r1, #0]
    d81e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    d822:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d826:	e004      	b.n	d832 <strcmp+0x2aa>
    d828:	f04f 0000 	mov.w	r0, #0
    d82c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d830:	4770      	bx	lr
    d832:	ba12      	rev	r2, r2
    d834:	ba1b      	rev	r3, r3
    d836:	fa82 f44c 	uadd8	r4, r2, ip
    d83a:	ea82 0403 	eor.w	r4, r2, r3
    d83e:	faa4 f58c 	sel	r5, r4, ip
    d842:	fab5 f485 	clz	r4, r5
    d846:	fa02 f204 	lsl.w	r2, r2, r4
    d84a:	fa03 f304 	lsl.w	r3, r3, r4
    d84e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    d852:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d856:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    d85a:	4770      	bx	lr

0000d85c <strcpy>:
    d85c:	ea80 0201 	eor.w	r2, r0, r1
    d860:	4684      	mov	ip, r0
    d862:	f012 0f03 	tst.w	r2, #3
    d866:	d14f      	bne.n	d908 <strcpy+0xac>
    d868:	f011 0f03 	tst.w	r1, #3
    d86c:	d132      	bne.n	d8d4 <strcpy+0x78>
    d86e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    d872:	f011 0f04 	tst.w	r1, #4
    d876:	f851 3b04 	ldr.w	r3, [r1], #4
    d87a:	d00b      	beq.n	d894 <strcpy+0x38>
    d87c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    d880:	439a      	bics	r2, r3
    d882:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d886:	bf04      	itt	eq
    d888:	f84c 3b04 	streq.w	r3, [ip], #4
    d88c:	f851 3b04 	ldreq.w	r3, [r1], #4
    d890:	d116      	bne.n	d8c0 <strcpy+0x64>
    d892:	bf00      	nop
    d894:	f851 4b04 	ldr.w	r4, [r1], #4
    d898:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    d89c:	439a      	bics	r2, r3
    d89e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d8a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    d8a6:	d10b      	bne.n	d8c0 <strcpy+0x64>
    d8a8:	f84c 3b04 	str.w	r3, [ip], #4
    d8ac:	43a2      	bics	r2, r4
    d8ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d8b2:	bf04      	itt	eq
    d8b4:	f851 3b04 	ldreq.w	r3, [r1], #4
    d8b8:	f84c 4b04 	streq.w	r4, [ip], #4
    d8bc:	d0ea      	beq.n	d894 <strcpy+0x38>
    d8be:	4623      	mov	r3, r4
    d8c0:	f80c 3b01 	strb.w	r3, [ip], #1
    d8c4:	f013 0fff 	tst.w	r3, #255	; 0xff
    d8c8:	ea4f 2333 	mov.w	r3, r3, ror #8
    d8cc:	d1f8      	bne.n	d8c0 <strcpy+0x64>
    d8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    d8d2:	4770      	bx	lr
    d8d4:	f011 0f01 	tst.w	r1, #1
    d8d8:	d006      	beq.n	d8e8 <strcpy+0x8c>
    d8da:	f811 2b01 	ldrb.w	r2, [r1], #1
    d8de:	f80c 2b01 	strb.w	r2, [ip], #1
    d8e2:	2a00      	cmp	r2, #0
    d8e4:	bf08      	it	eq
    d8e6:	4770      	bxeq	lr
    d8e8:	f011 0f02 	tst.w	r1, #2
    d8ec:	d0bf      	beq.n	d86e <strcpy+0x12>
    d8ee:	f831 2b02 	ldrh.w	r2, [r1], #2
    d8f2:	f012 0fff 	tst.w	r2, #255	; 0xff
    d8f6:	bf16      	itet	ne
    d8f8:	f82c 2b02 	strhne.w	r2, [ip], #2
    d8fc:	f88c 2000 	strbeq.w	r2, [ip]
    d900:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    d904:	d1b3      	bne.n	d86e <strcpy+0x12>
    d906:	4770      	bx	lr
    d908:	f811 2b01 	ldrb.w	r2, [r1], #1
    d90c:	f80c 2b01 	strb.w	r2, [ip], #1
    d910:	2a00      	cmp	r2, #0
    d912:	d1f9      	bne.n	d908 <strcpy+0xac>
    d914:	4770      	bx	lr
    d916:	bf00      	nop
	...

0000d940 <strlen>:
    d940:	f890 f000 	pld	[r0]
    d944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    d948:	f020 0107 	bic.w	r1, r0, #7
    d94c:	f06f 0c00 	mvn.w	ip, #0
    d950:	f010 0407 	ands.w	r4, r0, #7
    d954:	f891 f020 	pld	[r1, #32]
    d958:	f040 8049 	bne.w	d9ee <strlen+0xae>
    d95c:	f04f 0400 	mov.w	r4, #0
    d960:	f06f 0007 	mvn.w	r0, #7
    d964:	e9d1 2300 	ldrd	r2, r3, [r1]
    d968:	f891 f040 	pld	[r1, #64]	; 0x40
    d96c:	f100 0008 	add.w	r0, r0, #8
    d970:	fa82 f24c 	uadd8	r2, r2, ip
    d974:	faa4 f28c 	sel	r2, r4, ip
    d978:	fa83 f34c 	uadd8	r3, r3, ip
    d97c:	faa2 f38c 	sel	r3, r2, ip
    d980:	bb4b      	cbnz	r3, d9d6 <strlen+0x96>
    d982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d986:	fa82 f24c 	uadd8	r2, r2, ip
    d98a:	f100 0008 	add.w	r0, r0, #8
    d98e:	faa4 f28c 	sel	r2, r4, ip
    d992:	fa83 f34c 	uadd8	r3, r3, ip
    d996:	faa2 f38c 	sel	r3, r2, ip
    d99a:	b9e3      	cbnz	r3, d9d6 <strlen+0x96>
    d99c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d9a0:	fa82 f24c 	uadd8	r2, r2, ip
    d9a4:	f100 0008 	add.w	r0, r0, #8
    d9a8:	faa4 f28c 	sel	r2, r4, ip
    d9ac:	fa83 f34c 	uadd8	r3, r3, ip
    d9b0:	faa2 f38c 	sel	r3, r2, ip
    d9b4:	b97b      	cbnz	r3, d9d6 <strlen+0x96>
    d9b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d9ba:	f101 0120 	add.w	r1, r1, #32
    d9be:	fa82 f24c 	uadd8	r2, r2, ip
    d9c2:	f100 0008 	add.w	r0, r0, #8
    d9c6:	faa4 f28c 	sel	r2, r4, ip
    d9ca:	fa83 f34c 	uadd8	r3, r3, ip
    d9ce:	faa2 f38c 	sel	r3, r2, ip
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	d0c6      	beq.n	d964 <strlen+0x24>
    d9d6:	2a00      	cmp	r2, #0
    d9d8:	bf04      	itt	eq
    d9da:	3004      	addeq	r0, #4
    d9dc:	461a      	moveq	r2, r3
    d9de:	ba12      	rev	r2, r2
    d9e0:	fab2 f282 	clz	r2, r2
    d9e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d9e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d9ec:	4770      	bx	lr
    d9ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    d9f2:	f004 0503 	and.w	r5, r4, #3
    d9f6:	f1c4 0000 	rsb	r0, r4, #0
    d9fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d9fe:	f014 0f04 	tst.w	r4, #4
    da02:	f891 f040 	pld	[r1, #64]	; 0x40
    da06:	fa0c f505 	lsl.w	r5, ip, r5
    da0a:	ea62 0205 	orn	r2, r2, r5
    da0e:	bf1c      	itt	ne
    da10:	ea63 0305 	ornne	r3, r3, r5
    da14:	4662      	movne	r2, ip
    da16:	f04f 0400 	mov.w	r4, #0
    da1a:	e7a9      	b.n	d970 <strlen+0x30>

0000da1c <strncpy>:
    da1c:	ea40 0301 	orr.w	r3, r0, r1
    da20:	079b      	lsls	r3, r3, #30
    da22:	b470      	push	{r4, r5, r6}
    da24:	d12b      	bne.n	da7e <strncpy+0x62>
    da26:	2a03      	cmp	r2, #3
    da28:	d929      	bls.n	da7e <strncpy+0x62>
    da2a:	460c      	mov	r4, r1
    da2c:	4603      	mov	r3, r0
    da2e:	4621      	mov	r1, r4
    da30:	f854 6b04 	ldr.w	r6, [r4], #4
    da34:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    da38:	ea25 0506 	bic.w	r5, r5, r6
    da3c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    da40:	d106      	bne.n	da50 <strncpy+0x34>
    da42:	3a04      	subs	r2, #4
    da44:	2a03      	cmp	r2, #3
    da46:	f843 6b04 	str.w	r6, [r3], #4
    da4a:	4621      	mov	r1, r4
    da4c:	d8ef      	bhi.n	da2e <strncpy+0x12>
    da4e:	b1a2      	cbz	r2, da7a <strncpy+0x5e>
    da50:	780c      	ldrb	r4, [r1, #0]
    da52:	701c      	strb	r4, [r3, #0]
    da54:	3a01      	subs	r2, #1
    da56:	3301      	adds	r3, #1
    da58:	3101      	adds	r1, #1
    da5a:	b13c      	cbz	r4, da6c <strncpy+0x50>
    da5c:	b16a      	cbz	r2, da7a <strncpy+0x5e>
    da5e:	f811 4b01 	ldrb.w	r4, [r1], #1
    da62:	f803 4b01 	strb.w	r4, [r3], #1
    da66:	3a01      	subs	r2, #1
    da68:	2c00      	cmp	r4, #0
    da6a:	d1f7      	bne.n	da5c <strncpy+0x40>
    da6c:	b12a      	cbz	r2, da7a <strncpy+0x5e>
    da6e:	441a      	add	r2, r3
    da70:	2100      	movs	r1, #0
    da72:	f803 1b01 	strb.w	r1, [r3], #1
    da76:	429a      	cmp	r2, r3
    da78:	d1fb      	bne.n	da72 <strncpy+0x56>
    da7a:	bc70      	pop	{r4, r5, r6}
    da7c:	4770      	bx	lr
    da7e:	4603      	mov	r3, r0
    da80:	e7e5      	b.n	da4e <strncpy+0x32>
    da82:	bf00      	nop

0000da84 <_strtol_l.isra.0>:
    da84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da88:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    da8c:	460f      	mov	r7, r1
    da8e:	4680      	mov	r8, r0
    da90:	4616      	mov	r6, r2
    da92:	461d      	mov	r5, r3
    da94:	468b      	mov	fp, r1
    da96:	e000      	b.n	da9a <_strtol_l.isra.0+0x16>
    da98:	46a3      	mov	fp, r4
    da9a:	465c      	mov	r4, fp
    da9c:	4648      	mov	r0, r9
    da9e:	f814 ab01 	ldrb.w	sl, [r4], #1
    daa2:	f7fe ff23 	bl	c8ec <__locale_ctype_ptr_l>
    daa6:	4450      	add	r0, sl
    daa8:	7841      	ldrb	r1, [r0, #1]
    daaa:	f001 0108 	and.w	r1, r1, #8
    daae:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    dab2:	2900      	cmp	r1, #0
    dab4:	d1f0      	bne.n	da98 <_strtol_l.isra.0+0x14>
    dab6:	4652      	mov	r2, sl
    dab8:	2a2d      	cmp	r2, #45	; 0x2d
    daba:	d061      	beq.n	db80 <_strtol_l.isra.0+0xfc>
    dabc:	2a2b      	cmp	r2, #43	; 0x2b
    dabe:	bf04      	itt	eq
    dac0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    dac4:	f10b 0402 	addeq.w	r4, fp, #2
    dac8:	2d00      	cmp	r5, #0
    daca:	d043      	beq.n	db54 <_strtol_l.isra.0+0xd0>
    dacc:	2d10      	cmp	r5, #16
    dace:	d065      	beq.n	db9c <_strtol_l.isra.0+0x118>
    dad0:	46a9      	mov	r9, r5
    dad2:	f1bc 0f00 	cmp.w	ip, #0
    dad6:	bf0c      	ite	eq
    dad8:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    dadc:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    dae0:	2100      	movs	r1, #0
    dae2:	fbba fef9 	udiv	lr, sl, r9
    dae6:	4608      	mov	r0, r1
    dae8:	fb09 aa1e 	mls	sl, r9, lr, sl
    daec:	e005      	b.n	dafa <_strtol_l.isra.0+0x76>
    daee:	d029      	beq.n	db44 <_strtol_l.isra.0+0xc0>
    daf0:	fb09 3000 	mla	r0, r9, r0, r3
    daf4:	2101      	movs	r1, #1
    daf6:	f814 2b01 	ldrb.w	r2, [r4], #1
    dafa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    dafe:	2b09      	cmp	r3, #9
    db00:	d905      	bls.n	db0e <_strtol_l.isra.0+0x8a>
    db02:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    db06:	2b19      	cmp	r3, #25
    db08:	d80a      	bhi.n	db20 <_strtol_l.isra.0+0x9c>
    db0a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    db0e:	429d      	cmp	r5, r3
    db10:	dd0e      	ble.n	db30 <_strtol_l.isra.0+0xac>
    db12:	1c4a      	adds	r2, r1, #1
    db14:	d0ef      	beq.n	daf6 <_strtol_l.isra.0+0x72>
    db16:	4586      	cmp	lr, r0
    db18:	d2e9      	bcs.n	daee <_strtol_l.isra.0+0x6a>
    db1a:	f04f 31ff 	mov.w	r1, #4294967295
    db1e:	e7ea      	b.n	daf6 <_strtol_l.isra.0+0x72>
    db20:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    db24:	2b19      	cmp	r3, #25
    db26:	d803      	bhi.n	db30 <_strtol_l.isra.0+0xac>
    db28:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    db2c:	429d      	cmp	r5, r3
    db2e:	dcf0      	bgt.n	db12 <_strtol_l.isra.0+0x8e>
    db30:	1c4b      	adds	r3, r1, #1
    db32:	d015      	beq.n	db60 <_strtol_l.isra.0+0xdc>
    db34:	f1bc 0f00 	cmp.w	ip, #0
    db38:	d110      	bne.n	db5c <_strtol_l.isra.0+0xd8>
    db3a:	b14e      	cbz	r6, db50 <_strtol_l.isra.0+0xcc>
    db3c:	b9e1      	cbnz	r1, db78 <_strtol_l.isra.0+0xf4>
    db3e:	6037      	str	r7, [r6, #0]
    db40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db44:	459a      	cmp	sl, r3
    db46:	dad3      	bge.n	daf0 <_strtol_l.isra.0+0x6c>
    db48:	4670      	mov	r0, lr
    db4a:	f04f 31ff 	mov.w	r1, #4294967295
    db4e:	e7d2      	b.n	daf6 <_strtol_l.isra.0+0x72>
    db50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db54:	2a30      	cmp	r2, #48	; 0x30
    db56:	d01a      	beq.n	db8e <_strtol_l.isra.0+0x10a>
    db58:	250a      	movs	r5, #10
    db5a:	e7b9      	b.n	dad0 <_strtol_l.isra.0+0x4c>
    db5c:	4240      	negs	r0, r0
    db5e:	e7ec      	b.n	db3a <_strtol_l.isra.0+0xb6>
    db60:	f1bc 0f00 	cmp.w	ip, #0
    db64:	f04f 0322 	mov.w	r3, #34	; 0x22
    db68:	bf0c      	ite	eq
    db6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    db6e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    db72:	f8c8 3000 	str.w	r3, [r8]
    db76:	b1f6      	cbz	r6, dbb6 <_strtol_l.isra.0+0x132>
    db78:	1e67      	subs	r7, r4, #1
    db7a:	6037      	str	r7, [r6, #0]
    db7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db80:	f10b 0402 	add.w	r4, fp, #2
    db84:	f89b 2001 	ldrb.w	r2, [fp, #1]
    db88:	f04f 0c01 	mov.w	ip, #1
    db8c:	e79c      	b.n	dac8 <_strtol_l.isra.0+0x44>
    db8e:	7823      	ldrb	r3, [r4, #0]
    db90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    db94:	2b58      	cmp	r3, #88	; 0x58
    db96:	d008      	beq.n	dbaa <_strtol_l.isra.0+0x126>
    db98:	2508      	movs	r5, #8
    db9a:	e799      	b.n	dad0 <_strtol_l.isra.0+0x4c>
    db9c:	2a30      	cmp	r2, #48	; 0x30
    db9e:	d197      	bne.n	dad0 <_strtol_l.isra.0+0x4c>
    dba0:	7823      	ldrb	r3, [r4, #0]
    dba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    dba6:	2b58      	cmp	r3, #88	; 0x58
    dba8:	d192      	bne.n	dad0 <_strtol_l.isra.0+0x4c>
    dbaa:	f04f 0910 	mov.w	r9, #16
    dbae:	7862      	ldrb	r2, [r4, #1]
    dbb0:	464d      	mov	r5, r9
    dbb2:	3402      	adds	r4, #2
    dbb4:	e78d      	b.n	dad2 <_strtol_l.isra.0+0x4e>
    dbb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbba:	bf00      	nop

0000dbbc <strtol>:
    dbbc:	b530      	push	{r4, r5, lr}
    dbbe:	4c08      	ldr	r4, [pc, #32]	; (dbe0 <strtol+0x24>)
    dbc0:	4b08      	ldr	r3, [pc, #32]	; (dbe4 <strtol+0x28>)
    dbc2:	6825      	ldr	r5, [r4, #0]
    dbc4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    dbc6:	b083      	sub	sp, #12
    dbc8:	2c00      	cmp	r4, #0
    dbca:	bf08      	it	eq
    dbcc:	461c      	moveq	r4, r3
    dbce:	9400      	str	r4, [sp, #0]
    dbd0:	4613      	mov	r3, r2
    dbd2:	460a      	mov	r2, r1
    dbd4:	4601      	mov	r1, r0
    dbd6:	4628      	mov	r0, r5
    dbd8:	f7ff ff54 	bl	da84 <_strtol_l.isra.0>
    dbdc:	b003      	add	sp, #12
    dbde:	bd30      	pop	{r4, r5, pc}
    dbe0:	200022e0 	.word	0x200022e0
    dbe4:	200022e4 	.word	0x200022e4

0000dbe8 <sbrk>:
    dbe8:	4b02      	ldr	r3, [pc, #8]	; (dbf4 <sbrk+0xc>)
    dbea:	4601      	mov	r1, r0
    dbec:	6818      	ldr	r0, [r3, #0]
    dbee:	f7ff bc49 	b.w	d484 <_sbrk_r>
    dbf2:	bf00      	nop
    dbf4:	200022e0 	.word	0x200022e0

0000dbf8 <tolower>:
    dbf8:	b510      	push	{r4, lr}
    dbfa:	4604      	mov	r4, r0
    dbfc:	f7fe fe7a 	bl	c8f4 <__locale_ctype_ptr>
    dc00:	4420      	add	r0, r4
    dc02:	7843      	ldrb	r3, [r0, #1]
    dc04:	f003 0303 	and.w	r3, r3, #3
    dc08:	2b01      	cmp	r3, #1
    dc0a:	bf0c      	ite	eq
    dc0c:	f104 0020 	addeq.w	r0, r4, #32
    dc10:	4620      	movne	r0, r4
    dc12:	bd10      	pop	{r4, pc}

0000dc14 <__utoa>:
    dc14:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc16:	f8df e078 	ldr.w	lr, [pc, #120]	; dc90 <__utoa+0x7c>
    dc1a:	4616      	mov	r6, r2
    dc1c:	4604      	mov	r4, r0
    dc1e:	460f      	mov	r7, r1
    dc20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    dc24:	b08b      	sub	sp, #44	; 0x2c
    dc26:	466d      	mov	r5, sp
    dc28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dc2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    dc2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dc30:	e89e 0003 	ldmia.w	lr, {r0, r1}
    dc34:	1eb3      	subs	r3, r6, #2
    dc36:	f845 0b04 	str.w	r0, [r5], #4
    dc3a:	2b22      	cmp	r3, #34	; 0x22
    dc3c:	7029      	strb	r1, [r5, #0]
    dc3e:	d822      	bhi.n	dc86 <__utoa+0x72>
    dc40:	1e7d      	subs	r5, r7, #1
    dc42:	4628      	mov	r0, r5
    dc44:	2200      	movs	r2, #0
    dc46:	e000      	b.n	dc4a <__utoa+0x36>
    dc48:	461a      	mov	r2, r3
    dc4a:	fbb4 f1f6 	udiv	r1, r4, r6
    dc4e:	ab0a      	add	r3, sp, #40	; 0x28
    dc50:	fb06 4411 	mls	r4, r6, r1, r4
    dc54:	4423      	add	r3, r4
    dc56:	460c      	mov	r4, r1
    dc58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    dc5c:	f800 3f01 	strb.w	r3, [r0, #1]!
    dc60:	1c53      	adds	r3, r2, #1
    dc62:	2900      	cmp	r1, #0
    dc64:	d1f0      	bne.n	dc48 <__utoa+0x34>
    dc66:	54f9      	strb	r1, [r7, r3]
    dc68:	18bb      	adds	r3, r7, r2
    dc6a:	b14a      	cbz	r2, dc80 <__utoa+0x6c>
    dc6c:	7819      	ldrb	r1, [r3, #0]
    dc6e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    dc72:	7029      	strb	r1, [r5, #0]
    dc74:	3401      	adds	r4, #1
    dc76:	1b11      	subs	r1, r2, r4
    dc78:	428c      	cmp	r4, r1
    dc7a:	f803 0901 	strb.w	r0, [r3], #-1
    dc7e:	dbf5      	blt.n	dc6c <__utoa+0x58>
    dc80:	4638      	mov	r0, r7
    dc82:	b00b      	add	sp, #44	; 0x2c
    dc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc86:	2000      	movs	r0, #0
    dc88:	7038      	strb	r0, [r7, #0]
    dc8a:	b00b      	add	sp, #44	; 0x2c
    dc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc8e:	bf00      	nop
    dc90:	20001b7c 	.word	0x20001b7c

0000dc94 <utoa>:
    dc94:	f7ff bfbe 	b.w	dc14 <__utoa>

0000dc98 <_vdprintf_r>:
    dc98:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc9a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    dc9e:	ad04      	add	r5, sp, #16
    dca0:	9300      	str	r3, [sp, #0]
    dca2:	460f      	mov	r7, r1
    dca4:	4613      	mov	r3, r2
    dca6:	f44f 7400 	mov.w	r4, #512	; 0x200
    dcaa:	aa03      	add	r2, sp, #12
    dcac:	4629      	mov	r1, r5
    dcae:	9403      	str	r4, [sp, #12]
    dcb0:	4606      	mov	r6, r0
    dcb2:	f000 fd3f 	bl	e734 <_vasnprintf_r>
    dcb6:	b188      	cbz	r0, dcdc <_vdprintf_r+0x44>
    dcb8:	4604      	mov	r4, r0
    dcba:	4602      	mov	r2, r0
    dcbc:	4639      	mov	r1, r7
    dcbe:	9b03      	ldr	r3, [sp, #12]
    dcc0:	4630      	mov	r0, r6
    dcc2:	f000 f829 	bl	dd18 <_write_r>
    dcc6:	42ac      	cmp	r4, r5
    dcc8:	9003      	str	r0, [sp, #12]
    dcca:	d004      	beq.n	dcd6 <_vdprintf_r+0x3e>
    dccc:	4630      	mov	r0, r6
    dcce:	4621      	mov	r1, r4
    dcd0:	f000 f8d8 	bl	de84 <_free_r>
    dcd4:	9803      	ldr	r0, [sp, #12]
    dcd6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    dcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcdc:	f04f 30ff 	mov.w	r0, #4294967295
    dce0:	e7f9      	b.n	dcd6 <_vdprintf_r+0x3e>
    dce2:	bf00      	nop

0000dce4 <vdprintf>:
    dce4:	b410      	push	{r4}
    dce6:	4c04      	ldr	r4, [pc, #16]	; (dcf8 <vdprintf+0x14>)
    dce8:	4613      	mov	r3, r2
    dcea:	460a      	mov	r2, r1
    dcec:	4601      	mov	r1, r0
    dcee:	6820      	ldr	r0, [r4, #0]
    dcf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    dcf4:	f7ff bfd0 	b.w	dc98 <_vdprintf_r>
    dcf8:	200022e0 	.word	0x200022e0

0000dcfc <__ascii_wctomb>:
    dcfc:	b121      	cbz	r1, dd08 <__ascii_wctomb+0xc>
    dcfe:	2aff      	cmp	r2, #255	; 0xff
    dd00:	d804      	bhi.n	dd0c <__ascii_wctomb+0x10>
    dd02:	700a      	strb	r2, [r1, #0]
    dd04:	2001      	movs	r0, #1
    dd06:	4770      	bx	lr
    dd08:	4608      	mov	r0, r1
    dd0a:	4770      	bx	lr
    dd0c:	238a      	movs	r3, #138	; 0x8a
    dd0e:	6003      	str	r3, [r0, #0]
    dd10:	f04f 30ff 	mov.w	r0, #4294967295
    dd14:	4770      	bx	lr
    dd16:	bf00      	nop

0000dd18 <_write_r>:
    dd18:	b570      	push	{r4, r5, r6, lr}
    dd1a:	460d      	mov	r5, r1
    dd1c:	4c08      	ldr	r4, [pc, #32]	; (dd40 <_write_r+0x28>)
    dd1e:	4611      	mov	r1, r2
    dd20:	4606      	mov	r6, r0
    dd22:	461a      	mov	r2, r3
    dd24:	4628      	mov	r0, r5
    dd26:	2300      	movs	r3, #0
    dd28:	6023      	str	r3, [r4, #0]
    dd2a:	f7fe f8b5 	bl	be98 <_write>
    dd2e:	1c43      	adds	r3, r0, #1
    dd30:	d000      	beq.n	dd34 <_write_r+0x1c>
    dd32:	bd70      	pop	{r4, r5, r6, pc}
    dd34:	6823      	ldr	r3, [r4, #0]
    dd36:	2b00      	cmp	r3, #0
    dd38:	d0fb      	beq.n	dd32 <_write_r+0x1a>
    dd3a:	6033      	str	r3, [r6, #0]
    dd3c:	bd70      	pop	{r4, r5, r6, pc}
    dd3e:	bf00      	nop
    dd40:	2000528c 	.word	0x2000528c

0000dd44 <__register_exitproc>:
    dd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd48:	4c25      	ldr	r4, [pc, #148]	; (dde0 <__register_exitproc+0x9c>)
    dd4a:	6825      	ldr	r5, [r4, #0]
    dd4c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    dd50:	4606      	mov	r6, r0
    dd52:	4688      	mov	r8, r1
    dd54:	4692      	mov	sl, r2
    dd56:	4699      	mov	r9, r3
    dd58:	b3c4      	cbz	r4, ddcc <__register_exitproc+0x88>
    dd5a:	6860      	ldr	r0, [r4, #4]
    dd5c:	281f      	cmp	r0, #31
    dd5e:	dc17      	bgt.n	dd90 <__register_exitproc+0x4c>
    dd60:	1c43      	adds	r3, r0, #1
    dd62:	b176      	cbz	r6, dd82 <__register_exitproc+0x3e>
    dd64:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    dd68:	2201      	movs	r2, #1
    dd6a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    dd6e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    dd72:	4082      	lsls	r2, r0
    dd74:	4311      	orrs	r1, r2
    dd76:	2e02      	cmp	r6, #2
    dd78:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    dd7c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    dd80:	d01e      	beq.n	ddc0 <__register_exitproc+0x7c>
    dd82:	3002      	adds	r0, #2
    dd84:	6063      	str	r3, [r4, #4]
    dd86:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    dd8a:	2000      	movs	r0, #0
    dd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd90:	4b14      	ldr	r3, [pc, #80]	; (dde4 <__register_exitproc+0xa0>)
    dd92:	b303      	cbz	r3, ddd6 <__register_exitproc+0x92>
    dd94:	f44f 70c8 	mov.w	r0, #400	; 0x190
    dd98:	f7fe fdb6 	bl	c908 <malloc>
    dd9c:	4604      	mov	r4, r0
    dd9e:	b1d0      	cbz	r0, ddd6 <__register_exitproc+0x92>
    dda0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    dda4:	2700      	movs	r7, #0
    dda6:	e880 0088 	stmia.w	r0, {r3, r7}
    ddaa:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    ddae:	4638      	mov	r0, r7
    ddb0:	2301      	movs	r3, #1
    ddb2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    ddb6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    ddba:	2e00      	cmp	r6, #0
    ddbc:	d0e1      	beq.n	dd82 <__register_exitproc+0x3e>
    ddbe:	e7d1      	b.n	dd64 <__register_exitproc+0x20>
    ddc0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    ddc4:	430a      	orrs	r2, r1
    ddc6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    ddca:	e7da      	b.n	dd82 <__register_exitproc+0x3e>
    ddcc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    ddd0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    ddd4:	e7c1      	b.n	dd5a <__register_exitproc+0x16>
    ddd6:	f04f 30ff 	mov.w	r0, #4294967295
    ddda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ddde:	bf00      	nop
    dde0:	20001b6c 	.word	0x20001b6c
    dde4:	0000c909 	.word	0x0000c909

0000dde8 <_malloc_trim_r>:
    dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddea:	4f23      	ldr	r7, [pc, #140]	; (de78 <_malloc_trim_r+0x90>)
    ddec:	460c      	mov	r4, r1
    ddee:	4606      	mov	r6, r0
    ddf0:	f7ff f94c 	bl	d08c <__malloc_lock>
    ddf4:	68bb      	ldr	r3, [r7, #8]
    ddf6:	685d      	ldr	r5, [r3, #4]
    ddf8:	f025 0503 	bic.w	r5, r5, #3
    ddfc:	1b29      	subs	r1, r5, r4
    ddfe:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    de02:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    de06:	f021 010f 	bic.w	r1, r1, #15
    de0a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    de0e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    de12:	db07      	blt.n	de24 <_malloc_trim_r+0x3c>
    de14:	2100      	movs	r1, #0
    de16:	4630      	mov	r0, r6
    de18:	f7ff fb34 	bl	d484 <_sbrk_r>
    de1c:	68bb      	ldr	r3, [r7, #8]
    de1e:	442b      	add	r3, r5
    de20:	4298      	cmp	r0, r3
    de22:	d004      	beq.n	de2e <_malloc_trim_r+0x46>
    de24:	4630      	mov	r0, r6
    de26:	f7ff f933 	bl	d090 <__malloc_unlock>
    de2a:	2000      	movs	r0, #0
    de2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de2e:	4261      	negs	r1, r4
    de30:	4630      	mov	r0, r6
    de32:	f7ff fb27 	bl	d484 <_sbrk_r>
    de36:	3001      	adds	r0, #1
    de38:	d00d      	beq.n	de56 <_malloc_trim_r+0x6e>
    de3a:	4b10      	ldr	r3, [pc, #64]	; (de7c <_malloc_trim_r+0x94>)
    de3c:	68ba      	ldr	r2, [r7, #8]
    de3e:	6819      	ldr	r1, [r3, #0]
    de40:	1b2d      	subs	r5, r5, r4
    de42:	f045 0501 	orr.w	r5, r5, #1
    de46:	4630      	mov	r0, r6
    de48:	1b09      	subs	r1, r1, r4
    de4a:	6055      	str	r5, [r2, #4]
    de4c:	6019      	str	r1, [r3, #0]
    de4e:	f7ff f91f 	bl	d090 <__malloc_unlock>
    de52:	2001      	movs	r0, #1
    de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de56:	2100      	movs	r1, #0
    de58:	4630      	mov	r0, r6
    de5a:	f7ff fb13 	bl	d484 <_sbrk_r>
    de5e:	68ba      	ldr	r2, [r7, #8]
    de60:	1a83      	subs	r3, r0, r2
    de62:	2b0f      	cmp	r3, #15
    de64:	ddde      	ble.n	de24 <_malloc_trim_r+0x3c>
    de66:	4c06      	ldr	r4, [pc, #24]	; (de80 <_malloc_trim_r+0x98>)
    de68:	4904      	ldr	r1, [pc, #16]	; (de7c <_malloc_trim_r+0x94>)
    de6a:	6824      	ldr	r4, [r4, #0]
    de6c:	f043 0301 	orr.w	r3, r3, #1
    de70:	1b00      	subs	r0, r0, r4
    de72:	6053      	str	r3, [r2, #4]
    de74:	6008      	str	r0, [r1, #0]
    de76:	e7d5      	b.n	de24 <_malloc_trim_r+0x3c>
    de78:	20002450 	.word	0x20002450
    de7c:	20002eac 	.word	0x20002eac
    de80:	2000285c 	.word	0x2000285c

0000de84 <_free_r>:
    de84:	2900      	cmp	r1, #0
    de86:	d045      	beq.n	df14 <_free_r+0x90>
    de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de8c:	460d      	mov	r5, r1
    de8e:	4680      	mov	r8, r0
    de90:	f7ff f8fc 	bl	d08c <__malloc_lock>
    de94:	f855 7c04 	ldr.w	r7, [r5, #-4]
    de98:	496a      	ldr	r1, [pc, #424]	; (e044 <_free_r+0x1c0>)
    de9a:	f027 0301 	bic.w	r3, r7, #1
    de9e:	f1a5 0408 	sub.w	r4, r5, #8
    dea2:	18e2      	adds	r2, r4, r3
    dea4:	688e      	ldr	r6, [r1, #8]
    dea6:	6850      	ldr	r0, [r2, #4]
    dea8:	42b2      	cmp	r2, r6
    deaa:	f020 0003 	bic.w	r0, r0, #3
    deae:	d062      	beq.n	df76 <_free_r+0xf2>
    deb0:	07fe      	lsls	r6, r7, #31
    deb2:	6050      	str	r0, [r2, #4]
    deb4:	d40b      	bmi.n	dece <_free_r+0x4a>
    deb6:	f855 7c08 	ldr.w	r7, [r5, #-8]
    deba:	1be4      	subs	r4, r4, r7
    debc:	f101 0e08 	add.w	lr, r1, #8
    dec0:	68a5      	ldr	r5, [r4, #8]
    dec2:	4575      	cmp	r5, lr
    dec4:	443b      	add	r3, r7
    dec6:	d06f      	beq.n	dfa8 <_free_r+0x124>
    dec8:	68e7      	ldr	r7, [r4, #12]
    deca:	60ef      	str	r7, [r5, #12]
    decc:	60bd      	str	r5, [r7, #8]
    dece:	1815      	adds	r5, r2, r0
    ded0:	686d      	ldr	r5, [r5, #4]
    ded2:	07ed      	lsls	r5, r5, #31
    ded4:	d542      	bpl.n	df5c <_free_r+0xd8>
    ded6:	f043 0201 	orr.w	r2, r3, #1
    deda:	6062      	str	r2, [r4, #4]
    dedc:	50e3      	str	r3, [r4, r3]
    dede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    dee2:	d218      	bcs.n	df16 <_free_r+0x92>
    dee4:	08db      	lsrs	r3, r3, #3
    dee6:	1c5a      	adds	r2, r3, #1
    dee8:	684d      	ldr	r5, [r1, #4]
    deea:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    deee:	60a7      	str	r7, [r4, #8]
    def0:	2001      	movs	r0, #1
    def2:	109b      	asrs	r3, r3, #2
    def4:	fa00 f303 	lsl.w	r3, r0, r3
    def8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    defc:	431d      	orrs	r5, r3
    defe:	3808      	subs	r0, #8
    df00:	60e0      	str	r0, [r4, #12]
    df02:	604d      	str	r5, [r1, #4]
    df04:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    df08:	60fc      	str	r4, [r7, #12]
    df0a:	4640      	mov	r0, r8
    df0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df10:	f7ff b8be 	b.w	d090 <__malloc_unlock>
    df14:	4770      	bx	lr
    df16:	0a5a      	lsrs	r2, r3, #9
    df18:	2a04      	cmp	r2, #4
    df1a:	d853      	bhi.n	dfc4 <_free_r+0x140>
    df1c:	099a      	lsrs	r2, r3, #6
    df1e:	f102 0739 	add.w	r7, r2, #57	; 0x39
    df22:	007f      	lsls	r7, r7, #1
    df24:	f102 0538 	add.w	r5, r2, #56	; 0x38
    df28:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    df2c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    df30:	4944      	ldr	r1, [pc, #272]	; (e044 <_free_r+0x1c0>)
    df32:	3808      	subs	r0, #8
    df34:	4290      	cmp	r0, r2
    df36:	d04d      	beq.n	dfd4 <_free_r+0x150>
    df38:	6851      	ldr	r1, [r2, #4]
    df3a:	f021 0103 	bic.w	r1, r1, #3
    df3e:	428b      	cmp	r3, r1
    df40:	d202      	bcs.n	df48 <_free_r+0xc4>
    df42:	6892      	ldr	r2, [r2, #8]
    df44:	4290      	cmp	r0, r2
    df46:	d1f7      	bne.n	df38 <_free_r+0xb4>
    df48:	68d0      	ldr	r0, [r2, #12]
    df4a:	60e0      	str	r0, [r4, #12]
    df4c:	60a2      	str	r2, [r4, #8]
    df4e:	6084      	str	r4, [r0, #8]
    df50:	60d4      	str	r4, [r2, #12]
    df52:	4640      	mov	r0, r8
    df54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df58:	f7ff b89a 	b.w	d090 <__malloc_unlock>
    df5c:	6895      	ldr	r5, [r2, #8]
    df5e:	4f3a      	ldr	r7, [pc, #232]	; (e048 <_free_r+0x1c4>)
    df60:	42bd      	cmp	r5, r7
    df62:	4403      	add	r3, r0
    df64:	d03f      	beq.n	dfe6 <_free_r+0x162>
    df66:	68d0      	ldr	r0, [r2, #12]
    df68:	60e8      	str	r0, [r5, #12]
    df6a:	f043 0201 	orr.w	r2, r3, #1
    df6e:	6085      	str	r5, [r0, #8]
    df70:	6062      	str	r2, [r4, #4]
    df72:	50e3      	str	r3, [r4, r3]
    df74:	e7b3      	b.n	dede <_free_r+0x5a>
    df76:	07ff      	lsls	r7, r7, #31
    df78:	4403      	add	r3, r0
    df7a:	d407      	bmi.n	df8c <_free_r+0x108>
    df7c:	f855 2c08 	ldr.w	r2, [r5, #-8]
    df80:	1aa4      	subs	r4, r4, r2
    df82:	4413      	add	r3, r2
    df84:	68a0      	ldr	r0, [r4, #8]
    df86:	68e2      	ldr	r2, [r4, #12]
    df88:	60c2      	str	r2, [r0, #12]
    df8a:	6090      	str	r0, [r2, #8]
    df8c:	4a2f      	ldr	r2, [pc, #188]	; (e04c <_free_r+0x1c8>)
    df8e:	6812      	ldr	r2, [r2, #0]
    df90:	f043 0001 	orr.w	r0, r3, #1
    df94:	4293      	cmp	r3, r2
    df96:	6060      	str	r0, [r4, #4]
    df98:	608c      	str	r4, [r1, #8]
    df9a:	d3b6      	bcc.n	df0a <_free_r+0x86>
    df9c:	4b2c      	ldr	r3, [pc, #176]	; (e050 <_free_r+0x1cc>)
    df9e:	4640      	mov	r0, r8
    dfa0:	6819      	ldr	r1, [r3, #0]
    dfa2:	f7ff ff21 	bl	dde8 <_malloc_trim_r>
    dfa6:	e7b0      	b.n	df0a <_free_r+0x86>
    dfa8:	1811      	adds	r1, r2, r0
    dfaa:	6849      	ldr	r1, [r1, #4]
    dfac:	07c9      	lsls	r1, r1, #31
    dfae:	d444      	bmi.n	e03a <_free_r+0x1b6>
    dfb0:	6891      	ldr	r1, [r2, #8]
    dfb2:	68d2      	ldr	r2, [r2, #12]
    dfb4:	60ca      	str	r2, [r1, #12]
    dfb6:	4403      	add	r3, r0
    dfb8:	f043 0001 	orr.w	r0, r3, #1
    dfbc:	6091      	str	r1, [r2, #8]
    dfbe:	6060      	str	r0, [r4, #4]
    dfc0:	50e3      	str	r3, [r4, r3]
    dfc2:	e7a2      	b.n	df0a <_free_r+0x86>
    dfc4:	2a14      	cmp	r2, #20
    dfc6:	d817      	bhi.n	dff8 <_free_r+0x174>
    dfc8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    dfcc:	007f      	lsls	r7, r7, #1
    dfce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    dfd2:	e7a9      	b.n	df28 <_free_r+0xa4>
    dfd4:	10aa      	asrs	r2, r5, #2
    dfd6:	684b      	ldr	r3, [r1, #4]
    dfd8:	2501      	movs	r5, #1
    dfda:	fa05 f202 	lsl.w	r2, r5, r2
    dfde:	4313      	orrs	r3, r2
    dfe0:	604b      	str	r3, [r1, #4]
    dfe2:	4602      	mov	r2, r0
    dfe4:	e7b1      	b.n	df4a <_free_r+0xc6>
    dfe6:	f043 0201 	orr.w	r2, r3, #1
    dfea:	614c      	str	r4, [r1, #20]
    dfec:	610c      	str	r4, [r1, #16]
    dfee:	60e5      	str	r5, [r4, #12]
    dff0:	60a5      	str	r5, [r4, #8]
    dff2:	6062      	str	r2, [r4, #4]
    dff4:	50e3      	str	r3, [r4, r3]
    dff6:	e788      	b.n	df0a <_free_r+0x86>
    dff8:	2a54      	cmp	r2, #84	; 0x54
    dffa:	d806      	bhi.n	e00a <_free_r+0x186>
    dffc:	0b1a      	lsrs	r2, r3, #12
    dffe:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    e002:	007f      	lsls	r7, r7, #1
    e004:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    e008:	e78e      	b.n	df28 <_free_r+0xa4>
    e00a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    e00e:	d806      	bhi.n	e01e <_free_r+0x19a>
    e010:	0bda      	lsrs	r2, r3, #15
    e012:	f102 0778 	add.w	r7, r2, #120	; 0x78
    e016:	007f      	lsls	r7, r7, #1
    e018:	f102 0577 	add.w	r5, r2, #119	; 0x77
    e01c:	e784      	b.n	df28 <_free_r+0xa4>
    e01e:	f240 5054 	movw	r0, #1364	; 0x554
    e022:	4282      	cmp	r2, r0
    e024:	d806      	bhi.n	e034 <_free_r+0x1b0>
    e026:	0c9a      	lsrs	r2, r3, #18
    e028:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    e02c:	007f      	lsls	r7, r7, #1
    e02e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    e032:	e779      	b.n	df28 <_free_r+0xa4>
    e034:	27fe      	movs	r7, #254	; 0xfe
    e036:	257e      	movs	r5, #126	; 0x7e
    e038:	e776      	b.n	df28 <_free_r+0xa4>
    e03a:	f043 0201 	orr.w	r2, r3, #1
    e03e:	6062      	str	r2, [r4, #4]
    e040:	50e3      	str	r3, [r4, r3]
    e042:	e762      	b.n	df0a <_free_r+0x86>
    e044:	20002450 	.word	0x20002450
    e048:	20002458 	.word	0x20002458
    e04c:	20002858 	.word	0x20002858
    e050:	20002ea8 	.word	0x20002ea8

0000e054 <_localeconv_r>:
    e054:	4a04      	ldr	r2, [pc, #16]	; (e068 <_localeconv_r+0x14>)
    e056:	4b05      	ldr	r3, [pc, #20]	; (e06c <_localeconv_r+0x18>)
    e058:	6812      	ldr	r2, [r2, #0]
    e05a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    e05c:	2800      	cmp	r0, #0
    e05e:	bf08      	it	eq
    e060:	4618      	moveq	r0, r3
    e062:	30f0      	adds	r0, #240	; 0xf0
    e064:	4770      	bx	lr
    e066:	bf00      	nop
    e068:	200022e0 	.word	0x200022e0
    e06c:	200022e4 	.word	0x200022e4

0000e070 <memchr>:
    e070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e074:	2a10      	cmp	r2, #16
    e076:	db2b      	blt.n	e0d0 <memchr+0x60>
    e078:	f010 0f07 	tst.w	r0, #7
    e07c:	d008      	beq.n	e090 <memchr+0x20>
    e07e:	f810 3b01 	ldrb.w	r3, [r0], #1
    e082:	3a01      	subs	r2, #1
    e084:	428b      	cmp	r3, r1
    e086:	d02d      	beq.n	e0e4 <memchr+0x74>
    e088:	f010 0f07 	tst.w	r0, #7
    e08c:	b342      	cbz	r2, e0e0 <memchr+0x70>
    e08e:	d1f6      	bne.n	e07e <memchr+0xe>
    e090:	b4f0      	push	{r4, r5, r6, r7}
    e092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e09a:	f022 0407 	bic.w	r4, r2, #7
    e09e:	f07f 0700 	mvns.w	r7, #0
    e0a2:	2300      	movs	r3, #0
    e0a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e0a8:	3c08      	subs	r4, #8
    e0aa:	ea85 0501 	eor.w	r5, r5, r1
    e0ae:	ea86 0601 	eor.w	r6, r6, r1
    e0b2:	fa85 f547 	uadd8	r5, r5, r7
    e0b6:	faa3 f587 	sel	r5, r3, r7
    e0ba:	fa86 f647 	uadd8	r6, r6, r7
    e0be:	faa5 f687 	sel	r6, r5, r7
    e0c2:	b98e      	cbnz	r6, e0e8 <memchr+0x78>
    e0c4:	d1ee      	bne.n	e0a4 <memchr+0x34>
    e0c6:	bcf0      	pop	{r4, r5, r6, r7}
    e0c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e0cc:	f002 0207 	and.w	r2, r2, #7
    e0d0:	b132      	cbz	r2, e0e0 <memchr+0x70>
    e0d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    e0d6:	3a01      	subs	r2, #1
    e0d8:	ea83 0301 	eor.w	r3, r3, r1
    e0dc:	b113      	cbz	r3, e0e4 <memchr+0x74>
    e0de:	d1f8      	bne.n	e0d2 <memchr+0x62>
    e0e0:	2000      	movs	r0, #0
    e0e2:	4770      	bx	lr
    e0e4:	3801      	subs	r0, #1
    e0e6:	4770      	bx	lr
    e0e8:	2d00      	cmp	r5, #0
    e0ea:	bf06      	itte	eq
    e0ec:	4635      	moveq	r5, r6
    e0ee:	3803      	subeq	r0, #3
    e0f0:	3807      	subne	r0, #7
    e0f2:	f015 0f01 	tst.w	r5, #1
    e0f6:	d107      	bne.n	e108 <memchr+0x98>
    e0f8:	3001      	adds	r0, #1
    e0fa:	f415 7f80 	tst.w	r5, #256	; 0x100
    e0fe:	bf02      	ittt	eq
    e100:	3001      	addeq	r0, #1
    e102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e106:	3001      	addeq	r0, #1
    e108:	bcf0      	pop	{r4, r5, r6, r7}
    e10a:	3801      	subs	r0, #1
    e10c:	4770      	bx	lr
    e10e:	bf00      	nop

0000e110 <_Balloc>:
    e110:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e112:	b570      	push	{r4, r5, r6, lr}
    e114:	4605      	mov	r5, r0
    e116:	460c      	mov	r4, r1
    e118:	b14b      	cbz	r3, e12e <_Balloc+0x1e>
    e11a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e11e:	b180      	cbz	r0, e142 <_Balloc+0x32>
    e120:	6802      	ldr	r2, [r0, #0]
    e122:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e126:	2300      	movs	r3, #0
    e128:	6103      	str	r3, [r0, #16]
    e12a:	60c3      	str	r3, [r0, #12]
    e12c:	bd70      	pop	{r4, r5, r6, pc}
    e12e:	2221      	movs	r2, #33	; 0x21
    e130:	2104      	movs	r1, #4
    e132:	f000 fb2f 	bl	e794 <_calloc_r>
    e136:	64e8      	str	r0, [r5, #76]	; 0x4c
    e138:	4603      	mov	r3, r0
    e13a:	2800      	cmp	r0, #0
    e13c:	d1ed      	bne.n	e11a <_Balloc+0xa>
    e13e:	2000      	movs	r0, #0
    e140:	bd70      	pop	{r4, r5, r6, pc}
    e142:	2101      	movs	r1, #1
    e144:	fa01 f604 	lsl.w	r6, r1, r4
    e148:	1d72      	adds	r2, r6, #5
    e14a:	4628      	mov	r0, r5
    e14c:	0092      	lsls	r2, r2, #2
    e14e:	f000 fb21 	bl	e794 <_calloc_r>
    e152:	2800      	cmp	r0, #0
    e154:	d0f3      	beq.n	e13e <_Balloc+0x2e>
    e156:	6044      	str	r4, [r0, #4]
    e158:	6086      	str	r6, [r0, #8]
    e15a:	e7e4      	b.n	e126 <_Balloc+0x16>

0000e15c <_Bfree>:
    e15c:	b131      	cbz	r1, e16c <_Bfree+0x10>
    e15e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e160:	684a      	ldr	r2, [r1, #4]
    e162:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e166:	6008      	str	r0, [r1, #0]
    e168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e16c:	4770      	bx	lr
    e16e:	bf00      	nop

0000e170 <__multadd>:
    e170:	b5f0      	push	{r4, r5, r6, r7, lr}
    e172:	690c      	ldr	r4, [r1, #16]
    e174:	b083      	sub	sp, #12
    e176:	460d      	mov	r5, r1
    e178:	4606      	mov	r6, r0
    e17a:	f101 0e14 	add.w	lr, r1, #20
    e17e:	2700      	movs	r7, #0
    e180:	f8de 0000 	ldr.w	r0, [lr]
    e184:	b281      	uxth	r1, r0
    e186:	fb02 3101 	mla	r1, r2, r1, r3
    e18a:	0c0b      	lsrs	r3, r1, #16
    e18c:	0c00      	lsrs	r0, r0, #16
    e18e:	fb02 3300 	mla	r3, r2, r0, r3
    e192:	b289      	uxth	r1, r1
    e194:	3701      	adds	r7, #1
    e196:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    e19a:	42bc      	cmp	r4, r7
    e19c:	f84e 1b04 	str.w	r1, [lr], #4
    e1a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    e1a4:	dcec      	bgt.n	e180 <__multadd+0x10>
    e1a6:	b13b      	cbz	r3, e1b8 <__multadd+0x48>
    e1a8:	68aa      	ldr	r2, [r5, #8]
    e1aa:	4294      	cmp	r4, r2
    e1ac:	da07      	bge.n	e1be <__multadd+0x4e>
    e1ae:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    e1b2:	3401      	adds	r4, #1
    e1b4:	6153      	str	r3, [r2, #20]
    e1b6:	612c      	str	r4, [r5, #16]
    e1b8:	4628      	mov	r0, r5
    e1ba:	b003      	add	sp, #12
    e1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1be:	6869      	ldr	r1, [r5, #4]
    e1c0:	9301      	str	r3, [sp, #4]
    e1c2:	3101      	adds	r1, #1
    e1c4:	4630      	mov	r0, r6
    e1c6:	f7ff ffa3 	bl	e110 <_Balloc>
    e1ca:	692a      	ldr	r2, [r5, #16]
    e1cc:	3202      	adds	r2, #2
    e1ce:	f105 010c 	add.w	r1, r5, #12
    e1d2:	4607      	mov	r7, r0
    e1d4:	0092      	lsls	r2, r2, #2
    e1d6:	300c      	adds	r0, #12
    e1d8:	f7fb ff64 	bl	a0a4 <memcpy>
    e1dc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    e1de:	6869      	ldr	r1, [r5, #4]
    e1e0:	9b01      	ldr	r3, [sp, #4]
    e1e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    e1e6:	6028      	str	r0, [r5, #0]
    e1e8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    e1ec:	463d      	mov	r5, r7
    e1ee:	e7de      	b.n	e1ae <__multadd+0x3e>

0000e1f0 <__hi0bits>:
    e1f0:	0c03      	lsrs	r3, r0, #16
    e1f2:	041b      	lsls	r3, r3, #16
    e1f4:	b9b3      	cbnz	r3, e224 <__hi0bits+0x34>
    e1f6:	0400      	lsls	r0, r0, #16
    e1f8:	2310      	movs	r3, #16
    e1fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    e1fe:	bf04      	itt	eq
    e200:	0200      	lsleq	r0, r0, #8
    e202:	3308      	addeq	r3, #8
    e204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    e208:	bf04      	itt	eq
    e20a:	0100      	lsleq	r0, r0, #4
    e20c:	3304      	addeq	r3, #4
    e20e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    e212:	bf04      	itt	eq
    e214:	0080      	lsleq	r0, r0, #2
    e216:	3302      	addeq	r3, #2
    e218:	2800      	cmp	r0, #0
    e21a:	db07      	blt.n	e22c <__hi0bits+0x3c>
    e21c:	0042      	lsls	r2, r0, #1
    e21e:	d403      	bmi.n	e228 <__hi0bits+0x38>
    e220:	2020      	movs	r0, #32
    e222:	4770      	bx	lr
    e224:	2300      	movs	r3, #0
    e226:	e7e8      	b.n	e1fa <__hi0bits+0xa>
    e228:	1c58      	adds	r0, r3, #1
    e22a:	4770      	bx	lr
    e22c:	4618      	mov	r0, r3
    e22e:	4770      	bx	lr

0000e230 <__lo0bits>:
    e230:	6803      	ldr	r3, [r0, #0]
    e232:	f013 0207 	ands.w	r2, r3, #7
    e236:	d007      	beq.n	e248 <__lo0bits+0x18>
    e238:	07d9      	lsls	r1, r3, #31
    e23a:	d420      	bmi.n	e27e <__lo0bits+0x4e>
    e23c:	079a      	lsls	r2, r3, #30
    e23e:	d420      	bmi.n	e282 <__lo0bits+0x52>
    e240:	089b      	lsrs	r3, r3, #2
    e242:	6003      	str	r3, [r0, #0]
    e244:	2002      	movs	r0, #2
    e246:	4770      	bx	lr
    e248:	b299      	uxth	r1, r3
    e24a:	b909      	cbnz	r1, e250 <__lo0bits+0x20>
    e24c:	0c1b      	lsrs	r3, r3, #16
    e24e:	2210      	movs	r2, #16
    e250:	f013 0fff 	tst.w	r3, #255	; 0xff
    e254:	bf04      	itt	eq
    e256:	0a1b      	lsreq	r3, r3, #8
    e258:	3208      	addeq	r2, #8
    e25a:	0719      	lsls	r1, r3, #28
    e25c:	bf04      	itt	eq
    e25e:	091b      	lsreq	r3, r3, #4
    e260:	3204      	addeq	r2, #4
    e262:	0799      	lsls	r1, r3, #30
    e264:	bf04      	itt	eq
    e266:	089b      	lsreq	r3, r3, #2
    e268:	3202      	addeq	r2, #2
    e26a:	07d9      	lsls	r1, r3, #31
    e26c:	d404      	bmi.n	e278 <__lo0bits+0x48>
    e26e:	085b      	lsrs	r3, r3, #1
    e270:	d101      	bne.n	e276 <__lo0bits+0x46>
    e272:	2020      	movs	r0, #32
    e274:	4770      	bx	lr
    e276:	3201      	adds	r2, #1
    e278:	6003      	str	r3, [r0, #0]
    e27a:	4610      	mov	r0, r2
    e27c:	4770      	bx	lr
    e27e:	2000      	movs	r0, #0
    e280:	4770      	bx	lr
    e282:	085b      	lsrs	r3, r3, #1
    e284:	6003      	str	r3, [r0, #0]
    e286:	2001      	movs	r0, #1
    e288:	4770      	bx	lr
    e28a:	bf00      	nop

0000e28c <__i2b>:
    e28c:	b510      	push	{r4, lr}
    e28e:	460c      	mov	r4, r1
    e290:	2101      	movs	r1, #1
    e292:	f7ff ff3d 	bl	e110 <_Balloc>
    e296:	2201      	movs	r2, #1
    e298:	6144      	str	r4, [r0, #20]
    e29a:	6102      	str	r2, [r0, #16]
    e29c:	bd10      	pop	{r4, pc}
    e29e:	bf00      	nop

0000e2a0 <__multiply>:
    e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2a4:	690d      	ldr	r5, [r1, #16]
    e2a6:	6917      	ldr	r7, [r2, #16]
    e2a8:	42bd      	cmp	r5, r7
    e2aa:	b083      	sub	sp, #12
    e2ac:	460c      	mov	r4, r1
    e2ae:	4616      	mov	r6, r2
    e2b0:	da04      	bge.n	e2bc <__multiply+0x1c>
    e2b2:	462a      	mov	r2, r5
    e2b4:	4634      	mov	r4, r6
    e2b6:	463d      	mov	r5, r7
    e2b8:	460e      	mov	r6, r1
    e2ba:	4617      	mov	r7, r2
    e2bc:	68a3      	ldr	r3, [r4, #8]
    e2be:	6861      	ldr	r1, [r4, #4]
    e2c0:	eb05 0807 	add.w	r8, r5, r7
    e2c4:	4598      	cmp	r8, r3
    e2c6:	bfc8      	it	gt
    e2c8:	3101      	addgt	r1, #1
    e2ca:	f7ff ff21 	bl	e110 <_Balloc>
    e2ce:	f100 0c14 	add.w	ip, r0, #20
    e2d2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    e2d6:	45cc      	cmp	ip, r9
    e2d8:	9000      	str	r0, [sp, #0]
    e2da:	d205      	bcs.n	e2e8 <__multiply+0x48>
    e2dc:	4663      	mov	r3, ip
    e2de:	2100      	movs	r1, #0
    e2e0:	f843 1b04 	str.w	r1, [r3], #4
    e2e4:	4599      	cmp	r9, r3
    e2e6:	d8fb      	bhi.n	e2e0 <__multiply+0x40>
    e2e8:	f106 0214 	add.w	r2, r6, #20
    e2ec:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    e2f0:	f104 0314 	add.w	r3, r4, #20
    e2f4:	4552      	cmp	r2, sl
    e2f6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    e2fa:	d254      	bcs.n	e3a6 <__multiply+0x106>
    e2fc:	f8cd 9004 	str.w	r9, [sp, #4]
    e300:	4699      	mov	r9, r3
    e302:	f852 3b04 	ldr.w	r3, [r2], #4
    e306:	fa1f fb83 	uxth.w	fp, r3
    e30a:	f1bb 0f00 	cmp.w	fp, #0
    e30e:	d020      	beq.n	e352 <__multiply+0xb2>
    e310:	2000      	movs	r0, #0
    e312:	464f      	mov	r7, r9
    e314:	4666      	mov	r6, ip
    e316:	4605      	mov	r5, r0
    e318:	e000      	b.n	e31c <__multiply+0x7c>
    e31a:	461e      	mov	r6, r3
    e31c:	f857 4b04 	ldr.w	r4, [r7], #4
    e320:	6830      	ldr	r0, [r6, #0]
    e322:	b2a1      	uxth	r1, r4
    e324:	b283      	uxth	r3, r0
    e326:	fb0b 3101 	mla	r1, fp, r1, r3
    e32a:	0c24      	lsrs	r4, r4, #16
    e32c:	0c00      	lsrs	r0, r0, #16
    e32e:	194b      	adds	r3, r1, r5
    e330:	fb0b 0004 	mla	r0, fp, r4, r0
    e334:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    e338:	b299      	uxth	r1, r3
    e33a:	4633      	mov	r3, r6
    e33c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    e340:	45be      	cmp	lr, r7
    e342:	ea4f 4510 	mov.w	r5, r0, lsr #16
    e346:	f843 1b04 	str.w	r1, [r3], #4
    e34a:	d8e6      	bhi.n	e31a <__multiply+0x7a>
    e34c:	6075      	str	r5, [r6, #4]
    e34e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    e352:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    e356:	d020      	beq.n	e39a <__multiply+0xfa>
    e358:	f8dc 3000 	ldr.w	r3, [ip]
    e35c:	4667      	mov	r7, ip
    e35e:	4618      	mov	r0, r3
    e360:	464d      	mov	r5, r9
    e362:	2100      	movs	r1, #0
    e364:	e000      	b.n	e368 <__multiply+0xc8>
    e366:	4637      	mov	r7, r6
    e368:	882c      	ldrh	r4, [r5, #0]
    e36a:	0c00      	lsrs	r0, r0, #16
    e36c:	fb0b 0004 	mla	r0, fp, r4, r0
    e370:	4401      	add	r1, r0
    e372:	b29c      	uxth	r4, r3
    e374:	463e      	mov	r6, r7
    e376:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    e37a:	f846 3b04 	str.w	r3, [r6], #4
    e37e:	6878      	ldr	r0, [r7, #4]
    e380:	f855 4b04 	ldr.w	r4, [r5], #4
    e384:	b283      	uxth	r3, r0
    e386:	0c24      	lsrs	r4, r4, #16
    e388:	fb0b 3404 	mla	r4, fp, r4, r3
    e38c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    e390:	45ae      	cmp	lr, r5
    e392:	ea4f 4113 	mov.w	r1, r3, lsr #16
    e396:	d8e6      	bhi.n	e366 <__multiply+0xc6>
    e398:	607b      	str	r3, [r7, #4]
    e39a:	4592      	cmp	sl, r2
    e39c:	f10c 0c04 	add.w	ip, ip, #4
    e3a0:	d8af      	bhi.n	e302 <__multiply+0x62>
    e3a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    e3a6:	f1b8 0f00 	cmp.w	r8, #0
    e3aa:	dd0b      	ble.n	e3c4 <__multiply+0x124>
    e3ac:	f859 3c04 	ldr.w	r3, [r9, #-4]
    e3b0:	f1a9 0904 	sub.w	r9, r9, #4
    e3b4:	b11b      	cbz	r3, e3be <__multiply+0x11e>
    e3b6:	e005      	b.n	e3c4 <__multiply+0x124>
    e3b8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    e3bc:	b913      	cbnz	r3, e3c4 <__multiply+0x124>
    e3be:	f1b8 0801 	subs.w	r8, r8, #1
    e3c2:	d1f9      	bne.n	e3b8 <__multiply+0x118>
    e3c4:	9800      	ldr	r0, [sp, #0]
    e3c6:	f8c0 8010 	str.w	r8, [r0, #16]
    e3ca:	b003      	add	sp, #12
    e3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e3d0 <__pow5mult>:
    e3d0:	f012 0303 	ands.w	r3, r2, #3
    e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3d8:	4614      	mov	r4, r2
    e3da:	4607      	mov	r7, r0
    e3dc:	d12e      	bne.n	e43c <__pow5mult+0x6c>
    e3de:	460e      	mov	r6, r1
    e3e0:	10a4      	asrs	r4, r4, #2
    e3e2:	d01c      	beq.n	e41e <__pow5mult+0x4e>
    e3e4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    e3e6:	b395      	cbz	r5, e44e <__pow5mult+0x7e>
    e3e8:	07e3      	lsls	r3, r4, #31
    e3ea:	f04f 0800 	mov.w	r8, #0
    e3ee:	d406      	bmi.n	e3fe <__pow5mult+0x2e>
    e3f0:	1064      	asrs	r4, r4, #1
    e3f2:	d014      	beq.n	e41e <__pow5mult+0x4e>
    e3f4:	6828      	ldr	r0, [r5, #0]
    e3f6:	b1a8      	cbz	r0, e424 <__pow5mult+0x54>
    e3f8:	4605      	mov	r5, r0
    e3fa:	07e3      	lsls	r3, r4, #31
    e3fc:	d5f8      	bpl.n	e3f0 <__pow5mult+0x20>
    e3fe:	462a      	mov	r2, r5
    e400:	4631      	mov	r1, r6
    e402:	4638      	mov	r0, r7
    e404:	f7ff ff4c 	bl	e2a0 <__multiply>
    e408:	b1b6      	cbz	r6, e438 <__pow5mult+0x68>
    e40a:	6872      	ldr	r2, [r6, #4]
    e40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e40e:	1064      	asrs	r4, r4, #1
    e410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e414:	6031      	str	r1, [r6, #0]
    e416:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e41a:	4606      	mov	r6, r0
    e41c:	d1ea      	bne.n	e3f4 <__pow5mult+0x24>
    e41e:	4630      	mov	r0, r6
    e420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e424:	462a      	mov	r2, r5
    e426:	4629      	mov	r1, r5
    e428:	4638      	mov	r0, r7
    e42a:	f7ff ff39 	bl	e2a0 <__multiply>
    e42e:	6028      	str	r0, [r5, #0]
    e430:	f8c0 8000 	str.w	r8, [r0]
    e434:	4605      	mov	r5, r0
    e436:	e7e0      	b.n	e3fa <__pow5mult+0x2a>
    e438:	4606      	mov	r6, r0
    e43a:	e7d9      	b.n	e3f0 <__pow5mult+0x20>
    e43c:	1e5a      	subs	r2, r3, #1
    e43e:	4d0b      	ldr	r5, [pc, #44]	; (e46c <__pow5mult+0x9c>)
    e440:	2300      	movs	r3, #0
    e442:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    e446:	f7ff fe93 	bl	e170 <__multadd>
    e44a:	4606      	mov	r6, r0
    e44c:	e7c8      	b.n	e3e0 <__pow5mult+0x10>
    e44e:	2101      	movs	r1, #1
    e450:	4638      	mov	r0, r7
    e452:	f7ff fe5d 	bl	e110 <_Balloc>
    e456:	f240 2171 	movw	r1, #625	; 0x271
    e45a:	2201      	movs	r2, #1
    e45c:	2300      	movs	r3, #0
    e45e:	6141      	str	r1, [r0, #20]
    e460:	6102      	str	r2, [r0, #16]
    e462:	4605      	mov	r5, r0
    e464:	64b8      	str	r0, [r7, #72]	; 0x48
    e466:	6003      	str	r3, [r0, #0]
    e468:	e7be      	b.n	e3e8 <__pow5mult+0x18>
    e46a:	bf00      	nop
    e46c:	20001d98 	.word	0x20001d98

0000e470 <__lshift>:
    e470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e474:	4691      	mov	r9, r2
    e476:	690a      	ldr	r2, [r1, #16]
    e478:	688b      	ldr	r3, [r1, #8]
    e47a:	ea4f 1469 	mov.w	r4, r9, asr #5
    e47e:	eb04 0802 	add.w	r8, r4, r2
    e482:	f108 0501 	add.w	r5, r8, #1
    e486:	429d      	cmp	r5, r3
    e488:	460e      	mov	r6, r1
    e48a:	4682      	mov	sl, r0
    e48c:	6849      	ldr	r1, [r1, #4]
    e48e:	dd04      	ble.n	e49a <__lshift+0x2a>
    e490:	005b      	lsls	r3, r3, #1
    e492:	429d      	cmp	r5, r3
    e494:	f101 0101 	add.w	r1, r1, #1
    e498:	dcfa      	bgt.n	e490 <__lshift+0x20>
    e49a:	4650      	mov	r0, sl
    e49c:	f7ff fe38 	bl	e110 <_Balloc>
    e4a0:	2c00      	cmp	r4, #0
    e4a2:	f100 0214 	add.w	r2, r0, #20
    e4a6:	dd38      	ble.n	e51a <__lshift+0xaa>
    e4a8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    e4ac:	2100      	movs	r1, #0
    e4ae:	f842 1b04 	str.w	r1, [r2], #4
    e4b2:	4293      	cmp	r3, r2
    e4b4:	d1fb      	bne.n	e4ae <__lshift+0x3e>
    e4b6:	6934      	ldr	r4, [r6, #16]
    e4b8:	f106 0114 	add.w	r1, r6, #20
    e4bc:	f019 091f 	ands.w	r9, r9, #31
    e4c0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    e4c4:	d021      	beq.n	e50a <__lshift+0x9a>
    e4c6:	f1c9 0220 	rsb	r2, r9, #32
    e4ca:	2400      	movs	r4, #0
    e4cc:	680f      	ldr	r7, [r1, #0]
    e4ce:	fa07 fc09 	lsl.w	ip, r7, r9
    e4d2:	ea4c 0404 	orr.w	r4, ip, r4
    e4d6:	469c      	mov	ip, r3
    e4d8:	f843 4b04 	str.w	r4, [r3], #4
    e4dc:	f851 4b04 	ldr.w	r4, [r1], #4
    e4e0:	458e      	cmp	lr, r1
    e4e2:	fa24 f402 	lsr.w	r4, r4, r2
    e4e6:	d8f1      	bhi.n	e4cc <__lshift+0x5c>
    e4e8:	f8cc 4004 	str.w	r4, [ip, #4]
    e4ec:	b10c      	cbz	r4, e4f2 <__lshift+0x82>
    e4ee:	f108 0502 	add.w	r5, r8, #2
    e4f2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    e4f6:	6872      	ldr	r2, [r6, #4]
    e4f8:	3d01      	subs	r5, #1
    e4fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e4fe:	6105      	str	r5, [r0, #16]
    e500:	6031      	str	r1, [r6, #0]
    e502:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e50a:	3b04      	subs	r3, #4
    e50c:	f851 2b04 	ldr.w	r2, [r1], #4
    e510:	f843 2f04 	str.w	r2, [r3, #4]!
    e514:	458e      	cmp	lr, r1
    e516:	d8f9      	bhi.n	e50c <__lshift+0x9c>
    e518:	e7eb      	b.n	e4f2 <__lshift+0x82>
    e51a:	4613      	mov	r3, r2
    e51c:	e7cb      	b.n	e4b6 <__lshift+0x46>
    e51e:	bf00      	nop

0000e520 <__mcmp>:
    e520:	6902      	ldr	r2, [r0, #16]
    e522:	690b      	ldr	r3, [r1, #16]
    e524:	1ad2      	subs	r2, r2, r3
    e526:	d113      	bne.n	e550 <__mcmp+0x30>
    e528:	009b      	lsls	r3, r3, #2
    e52a:	3014      	adds	r0, #20
    e52c:	3114      	adds	r1, #20
    e52e:	4419      	add	r1, r3
    e530:	b410      	push	{r4}
    e532:	4403      	add	r3, r0
    e534:	e001      	b.n	e53a <__mcmp+0x1a>
    e536:	4298      	cmp	r0, r3
    e538:	d20c      	bcs.n	e554 <__mcmp+0x34>
    e53a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    e53e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    e542:	4294      	cmp	r4, r2
    e544:	d0f7      	beq.n	e536 <__mcmp+0x16>
    e546:	d309      	bcc.n	e55c <__mcmp+0x3c>
    e548:	2001      	movs	r0, #1
    e54a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e54e:	4770      	bx	lr
    e550:	4610      	mov	r0, r2
    e552:	4770      	bx	lr
    e554:	2000      	movs	r0, #0
    e556:	f85d 4b04 	ldr.w	r4, [sp], #4
    e55a:	4770      	bx	lr
    e55c:	f04f 30ff 	mov.w	r0, #4294967295
    e560:	e7f3      	b.n	e54a <__mcmp+0x2a>
    e562:	bf00      	nop

0000e564 <__mdiff>:
    e564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e568:	690b      	ldr	r3, [r1, #16]
    e56a:	460f      	mov	r7, r1
    e56c:	6911      	ldr	r1, [r2, #16]
    e56e:	1a5b      	subs	r3, r3, r1
    e570:	2b00      	cmp	r3, #0
    e572:	4690      	mov	r8, r2
    e574:	d117      	bne.n	e5a6 <__mdiff+0x42>
    e576:	0089      	lsls	r1, r1, #2
    e578:	f107 0214 	add.w	r2, r7, #20
    e57c:	f108 0514 	add.w	r5, r8, #20
    e580:	1853      	adds	r3, r2, r1
    e582:	4429      	add	r1, r5
    e584:	e001      	b.n	e58a <__mdiff+0x26>
    e586:	429a      	cmp	r2, r3
    e588:	d25e      	bcs.n	e648 <__mdiff+0xe4>
    e58a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    e58e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    e592:	42a6      	cmp	r6, r4
    e594:	d0f7      	beq.n	e586 <__mdiff+0x22>
    e596:	d260      	bcs.n	e65a <__mdiff+0xf6>
    e598:	463b      	mov	r3, r7
    e59a:	4614      	mov	r4, r2
    e59c:	4647      	mov	r7, r8
    e59e:	f04f 0901 	mov.w	r9, #1
    e5a2:	4698      	mov	r8, r3
    e5a4:	e006      	b.n	e5b4 <__mdiff+0x50>
    e5a6:	db5d      	blt.n	e664 <__mdiff+0x100>
    e5a8:	f107 0514 	add.w	r5, r7, #20
    e5ac:	f102 0414 	add.w	r4, r2, #20
    e5b0:	f04f 0900 	mov.w	r9, #0
    e5b4:	6879      	ldr	r1, [r7, #4]
    e5b6:	f7ff fdab 	bl	e110 <_Balloc>
    e5ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e5be:	693e      	ldr	r6, [r7, #16]
    e5c0:	f8c0 900c 	str.w	r9, [r0, #12]
    e5c4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    e5c8:	46a6      	mov	lr, r4
    e5ca:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    e5ce:	f100 0414 	add.w	r4, r0, #20
    e5d2:	2300      	movs	r3, #0
    e5d4:	f85e 1b04 	ldr.w	r1, [lr], #4
    e5d8:	f855 8b04 	ldr.w	r8, [r5], #4
    e5dc:	b28a      	uxth	r2, r1
    e5de:	fa13 f388 	uxtah	r3, r3, r8
    e5e2:	0c09      	lsrs	r1, r1, #16
    e5e4:	1a9a      	subs	r2, r3, r2
    e5e6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    e5ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
    e5ee:	b292      	uxth	r2, r2
    e5f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e5f4:	45f4      	cmp	ip, lr
    e5f6:	f844 2b04 	str.w	r2, [r4], #4
    e5fa:	ea4f 4323 	mov.w	r3, r3, asr #16
    e5fe:	d8e9      	bhi.n	e5d4 <__mdiff+0x70>
    e600:	42af      	cmp	r7, r5
    e602:	d917      	bls.n	e634 <__mdiff+0xd0>
    e604:	46a4      	mov	ip, r4
    e606:	4629      	mov	r1, r5
    e608:	f851 eb04 	ldr.w	lr, [r1], #4
    e60c:	fa13 f28e 	uxtah	r2, r3, lr
    e610:	1413      	asrs	r3, r2, #16
    e612:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    e616:	b292      	uxth	r2, r2
    e618:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e61c:	428f      	cmp	r7, r1
    e61e:	f84c 2b04 	str.w	r2, [ip], #4
    e622:	ea4f 4323 	mov.w	r3, r3, asr #16
    e626:	d8ef      	bhi.n	e608 <__mdiff+0xa4>
    e628:	43ed      	mvns	r5, r5
    e62a:	443d      	add	r5, r7
    e62c:	f025 0503 	bic.w	r5, r5, #3
    e630:	3504      	adds	r5, #4
    e632:	442c      	add	r4, r5
    e634:	3c04      	subs	r4, #4
    e636:	b922      	cbnz	r2, e642 <__mdiff+0xde>
    e638:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    e63c:	3e01      	subs	r6, #1
    e63e:	2b00      	cmp	r3, #0
    e640:	d0fa      	beq.n	e638 <__mdiff+0xd4>
    e642:	6106      	str	r6, [r0, #16]
    e644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e648:	2100      	movs	r1, #0
    e64a:	f7ff fd61 	bl	e110 <_Balloc>
    e64e:	2201      	movs	r2, #1
    e650:	2300      	movs	r3, #0
    e652:	6102      	str	r2, [r0, #16]
    e654:	6143      	str	r3, [r0, #20]
    e656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e65a:	462c      	mov	r4, r5
    e65c:	f04f 0900 	mov.w	r9, #0
    e660:	4615      	mov	r5, r2
    e662:	e7a7      	b.n	e5b4 <__mdiff+0x50>
    e664:	463b      	mov	r3, r7
    e666:	f107 0414 	add.w	r4, r7, #20
    e66a:	f108 0514 	add.w	r5, r8, #20
    e66e:	4647      	mov	r7, r8
    e670:	f04f 0901 	mov.w	r9, #1
    e674:	4698      	mov	r8, r3
    e676:	e79d      	b.n	e5b4 <__mdiff+0x50>

0000e678 <__d2b>:
    e678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e67c:	ec57 6b10 	vmov	r6, r7, d0
    e680:	b083      	sub	sp, #12
    e682:	4688      	mov	r8, r1
    e684:	2101      	movs	r1, #1
    e686:	463c      	mov	r4, r7
    e688:	f3c7 550a 	ubfx	r5, r7, #20, #11
    e68c:	4617      	mov	r7, r2
    e68e:	f7ff fd3f 	bl	e110 <_Balloc>
    e692:	f3c4 0413 	ubfx	r4, r4, #0, #20
    e696:	4681      	mov	r9, r0
    e698:	b10d      	cbz	r5, e69e <__d2b+0x26>
    e69a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    e69e:	9401      	str	r4, [sp, #4]
    e6a0:	b31e      	cbz	r6, e6ea <__d2b+0x72>
    e6a2:	a802      	add	r0, sp, #8
    e6a4:	f840 6d08 	str.w	r6, [r0, #-8]!
    e6a8:	f7ff fdc2 	bl	e230 <__lo0bits>
    e6ac:	2800      	cmp	r0, #0
    e6ae:	d134      	bne.n	e71a <__d2b+0xa2>
    e6b0:	e89d 000c 	ldmia.w	sp, {r2, r3}
    e6b4:	f8c9 2014 	str.w	r2, [r9, #20]
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	bf0c      	ite	eq
    e6bc:	2101      	moveq	r1, #1
    e6be:	2102      	movne	r1, #2
    e6c0:	f8c9 3018 	str.w	r3, [r9, #24]
    e6c4:	f8c9 1010 	str.w	r1, [r9, #16]
    e6c8:	b9dd      	cbnz	r5, e702 <__d2b+0x8a>
    e6ca:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    e6ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    e6d2:	f8c8 0000 	str.w	r0, [r8]
    e6d6:	6918      	ldr	r0, [r3, #16]
    e6d8:	f7ff fd8a 	bl	e1f0 <__hi0bits>
    e6dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    e6e0:	6038      	str	r0, [r7, #0]
    e6e2:	4648      	mov	r0, r9
    e6e4:	b003      	add	sp, #12
    e6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e6ea:	a801      	add	r0, sp, #4
    e6ec:	f7ff fda0 	bl	e230 <__lo0bits>
    e6f0:	9b01      	ldr	r3, [sp, #4]
    e6f2:	f8c9 3014 	str.w	r3, [r9, #20]
    e6f6:	2101      	movs	r1, #1
    e6f8:	3020      	adds	r0, #32
    e6fa:	f8c9 1010 	str.w	r1, [r9, #16]
    e6fe:	2d00      	cmp	r5, #0
    e700:	d0e3      	beq.n	e6ca <__d2b+0x52>
    e702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    e706:	4405      	add	r5, r0
    e708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    e70c:	f8c8 5000 	str.w	r5, [r8]
    e710:	6038      	str	r0, [r7, #0]
    e712:	4648      	mov	r0, r9
    e714:	b003      	add	sp, #12
    e716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e71a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    e71e:	f1c0 0120 	rsb	r1, r0, #32
    e722:	fa03 f101 	lsl.w	r1, r3, r1
    e726:	430a      	orrs	r2, r1
    e728:	40c3      	lsrs	r3, r0
    e72a:	9301      	str	r3, [sp, #4]
    e72c:	f8c9 2014 	str.w	r2, [r9, #20]
    e730:	e7c2      	b.n	e6b8 <__d2b+0x40>
    e732:	bf00      	nop

0000e734 <_vasnprintf_r>:
    e734:	b570      	push	{r4, r5, r6, lr}
    e736:	4615      	mov	r5, r2
    e738:	b09a      	sub	sp, #104	; 0x68
    e73a:	6814      	ldr	r4, [r2, #0]
    e73c:	b109      	cbz	r1, e742 <_vasnprintf_r+0xe>
    e73e:	2c00      	cmp	r4, #0
    e740:	d11a      	bne.n	e778 <_vasnprintf_r+0x44>
    e742:	2400      	movs	r4, #0
    e744:	f44f 7222 	mov.w	r2, #648	; 0x288
    e748:	f8ad 200c 	strh.w	r2, [sp, #12]
    e74c:	9400      	str	r4, [sp, #0]
    e74e:	9404      	str	r4, [sp, #16]
    e750:	461a      	mov	r2, r3
    e752:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e756:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e758:	9402      	str	r4, [sp, #8]
    e75a:	4669      	mov	r1, sp
    e75c:	9405      	str	r4, [sp, #20]
    e75e:	f8ad 600e 	strh.w	r6, [sp, #14]
    e762:	f000 ff21 	bl	f5a8 <_svfprintf_r>
    e766:	2800      	cmp	r0, #0
    e768:	db11      	blt.n	e78e <_vasnprintf_r+0x5a>
    e76a:	9b00      	ldr	r3, [sp, #0]
    e76c:	6028      	str	r0, [r5, #0]
    e76e:	2200      	movs	r2, #0
    e770:	701a      	strb	r2, [r3, #0]
    e772:	9804      	ldr	r0, [sp, #16]
    e774:	b01a      	add	sp, #104	; 0x68
    e776:	bd70      	pop	{r4, r5, r6, pc}
    e778:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    e77c:	9100      	str	r1, [sp, #0]
    e77e:	9104      	str	r1, [sp, #16]
    e780:	f8ad 200c 	strh.w	r2, [sp, #12]
    e784:	dae4      	bge.n	e750 <_vasnprintf_r+0x1c>
    e786:	238b      	movs	r3, #139	; 0x8b
    e788:	6003      	str	r3, [r0, #0]
    e78a:	2000      	movs	r0, #0
    e78c:	e7f2      	b.n	e774 <_vasnprintf_r+0x40>
    e78e:	2000      	movs	r0, #0
    e790:	e7f0      	b.n	e774 <_vasnprintf_r+0x40>
    e792:	bf00      	nop

0000e794 <_calloc_r>:
    e794:	b510      	push	{r4, lr}
    e796:	fb02 f101 	mul.w	r1, r2, r1
    e79a:	f7fe f8c5 	bl	c928 <_malloc_r>
    e79e:	4604      	mov	r4, r0
    e7a0:	b1d8      	cbz	r0, e7da <_calloc_r+0x46>
    e7a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e7a6:	f022 0203 	bic.w	r2, r2, #3
    e7aa:	3a04      	subs	r2, #4
    e7ac:	2a24      	cmp	r2, #36	; 0x24
    e7ae:	d818      	bhi.n	e7e2 <_calloc_r+0x4e>
    e7b0:	2a13      	cmp	r2, #19
    e7b2:	d914      	bls.n	e7de <_calloc_r+0x4a>
    e7b4:	2300      	movs	r3, #0
    e7b6:	2a1b      	cmp	r2, #27
    e7b8:	6003      	str	r3, [r0, #0]
    e7ba:	6043      	str	r3, [r0, #4]
    e7bc:	d916      	bls.n	e7ec <_calloc_r+0x58>
    e7be:	2a24      	cmp	r2, #36	; 0x24
    e7c0:	6083      	str	r3, [r0, #8]
    e7c2:	60c3      	str	r3, [r0, #12]
    e7c4:	bf11      	iteee	ne
    e7c6:	f100 0210 	addne.w	r2, r0, #16
    e7ca:	6103      	streq	r3, [r0, #16]
    e7cc:	6143      	streq	r3, [r0, #20]
    e7ce:	f100 0218 	addeq.w	r2, r0, #24
    e7d2:	2300      	movs	r3, #0
    e7d4:	6013      	str	r3, [r2, #0]
    e7d6:	6053      	str	r3, [r2, #4]
    e7d8:	6093      	str	r3, [r2, #8]
    e7da:	4620      	mov	r0, r4
    e7dc:	bd10      	pop	{r4, pc}
    e7de:	4602      	mov	r2, r0
    e7e0:	e7f7      	b.n	e7d2 <_calloc_r+0x3e>
    e7e2:	2100      	movs	r1, #0
    e7e4:	f7fe fc04 	bl	cff0 <memset>
    e7e8:	4620      	mov	r0, r4
    e7ea:	bd10      	pop	{r4, pc}
    e7ec:	f100 0208 	add.w	r2, r0, #8
    e7f0:	e7ef      	b.n	e7d2 <_calloc_r+0x3e>
    e7f2:	bf00      	nop

0000e7f4 <quorem>:
    e7f4:	6902      	ldr	r2, [r0, #16]
    e7f6:	690b      	ldr	r3, [r1, #16]
    e7f8:	4293      	cmp	r3, r2
    e7fa:	f300 808d 	bgt.w	e918 <quorem+0x124>
    e7fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e802:	f103 38ff 	add.w	r8, r3, #4294967295
    e806:	f101 0714 	add.w	r7, r1, #20
    e80a:	f100 0b14 	add.w	fp, r0, #20
    e80e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    e812:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    e816:	ea4f 0488 	mov.w	r4, r8, lsl #2
    e81a:	b083      	sub	sp, #12
    e81c:	3201      	adds	r2, #1
    e81e:	fbb3 f9f2 	udiv	r9, r3, r2
    e822:	eb0b 0304 	add.w	r3, fp, r4
    e826:	9400      	str	r4, [sp, #0]
    e828:	eb07 0a04 	add.w	sl, r7, r4
    e82c:	9301      	str	r3, [sp, #4]
    e82e:	f1b9 0f00 	cmp.w	r9, #0
    e832:	d039      	beq.n	e8a8 <quorem+0xb4>
    e834:	2500      	movs	r5, #0
    e836:	46bc      	mov	ip, r7
    e838:	46de      	mov	lr, fp
    e83a:	462b      	mov	r3, r5
    e83c:	f85c 6b04 	ldr.w	r6, [ip], #4
    e840:	f8de 2000 	ldr.w	r2, [lr]
    e844:	b2b4      	uxth	r4, r6
    e846:	fb09 5504 	mla	r5, r9, r4, r5
    e84a:	0c36      	lsrs	r6, r6, #16
    e84c:	0c2c      	lsrs	r4, r5, #16
    e84e:	fb09 4406 	mla	r4, r9, r6, r4
    e852:	b2ad      	uxth	r5, r5
    e854:	1b5b      	subs	r3, r3, r5
    e856:	b2a6      	uxth	r6, r4
    e858:	fa13 f382 	uxtah	r3, r3, r2
    e85c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    e860:	eb06 4623 	add.w	r6, r6, r3, asr #16
    e864:	b29b      	uxth	r3, r3
    e866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e86a:	45e2      	cmp	sl, ip
    e86c:	f84e 3b04 	str.w	r3, [lr], #4
    e870:	ea4f 4514 	mov.w	r5, r4, lsr #16
    e874:	ea4f 4326 	mov.w	r3, r6, asr #16
    e878:	d2e0      	bcs.n	e83c <quorem+0x48>
    e87a:	9b00      	ldr	r3, [sp, #0]
    e87c:	f85b 3003 	ldr.w	r3, [fp, r3]
    e880:	b993      	cbnz	r3, e8a8 <quorem+0xb4>
    e882:	9c01      	ldr	r4, [sp, #4]
    e884:	1f23      	subs	r3, r4, #4
    e886:	459b      	cmp	fp, r3
    e888:	d20c      	bcs.n	e8a4 <quorem+0xb0>
    e88a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e88e:	b94b      	cbnz	r3, e8a4 <quorem+0xb0>
    e890:	f1a4 0308 	sub.w	r3, r4, #8
    e894:	e002      	b.n	e89c <quorem+0xa8>
    e896:	681a      	ldr	r2, [r3, #0]
    e898:	3b04      	subs	r3, #4
    e89a:	b91a      	cbnz	r2, e8a4 <quorem+0xb0>
    e89c:	459b      	cmp	fp, r3
    e89e:	f108 38ff 	add.w	r8, r8, #4294967295
    e8a2:	d3f8      	bcc.n	e896 <quorem+0xa2>
    e8a4:	f8c0 8010 	str.w	r8, [r0, #16]
    e8a8:	4604      	mov	r4, r0
    e8aa:	f7ff fe39 	bl	e520 <__mcmp>
    e8ae:	2800      	cmp	r0, #0
    e8b0:	db2e      	blt.n	e910 <quorem+0x11c>
    e8b2:	f109 0901 	add.w	r9, r9, #1
    e8b6:	465d      	mov	r5, fp
    e8b8:	2300      	movs	r3, #0
    e8ba:	f857 1b04 	ldr.w	r1, [r7], #4
    e8be:	6828      	ldr	r0, [r5, #0]
    e8c0:	b28a      	uxth	r2, r1
    e8c2:	1a9a      	subs	r2, r3, r2
    e8c4:	0c09      	lsrs	r1, r1, #16
    e8c6:	fa12 f280 	uxtah	r2, r2, r0
    e8ca:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    e8ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
    e8d2:	b291      	uxth	r1, r2
    e8d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    e8d8:	45ba      	cmp	sl, r7
    e8da:	f845 1b04 	str.w	r1, [r5], #4
    e8de:	ea4f 4323 	mov.w	r3, r3, asr #16
    e8e2:	d2ea      	bcs.n	e8ba <quorem+0xc6>
    e8e4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    e8e8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    e8ec:	b982      	cbnz	r2, e910 <quorem+0x11c>
    e8ee:	1f1a      	subs	r2, r3, #4
    e8f0:	4593      	cmp	fp, r2
    e8f2:	d20b      	bcs.n	e90c <quorem+0x118>
    e8f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
    e8f8:	b942      	cbnz	r2, e90c <quorem+0x118>
    e8fa:	3b08      	subs	r3, #8
    e8fc:	e002      	b.n	e904 <quorem+0x110>
    e8fe:	681a      	ldr	r2, [r3, #0]
    e900:	3b04      	subs	r3, #4
    e902:	b91a      	cbnz	r2, e90c <quorem+0x118>
    e904:	459b      	cmp	fp, r3
    e906:	f108 38ff 	add.w	r8, r8, #4294967295
    e90a:	d3f8      	bcc.n	e8fe <quorem+0x10a>
    e90c:	f8c4 8010 	str.w	r8, [r4, #16]
    e910:	4648      	mov	r0, r9
    e912:	b003      	add	sp, #12
    e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e918:	2000      	movs	r0, #0
    e91a:	4770      	bx	lr
    e91c:	0000      	movs	r0, r0
	...

0000e920 <_dtoa_r>:
    e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e924:	ec57 6b10 	vmov	r6, r7, d0
    e928:	b093      	sub	sp, #76	; 0x4c
    e92a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    e92c:	9101      	str	r1, [sp, #4]
    e92e:	4604      	mov	r4, r0
    e930:	4690      	mov	r8, r2
    e932:	9304      	str	r3, [sp, #16]
    e934:	ee10 aa10 	vmov	sl, s0
    e938:	46bb      	mov	fp, r7
    e93a:	b14d      	cbz	r5, e950 <_dtoa_r+0x30>
    e93c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e93e:	606a      	str	r2, [r5, #4]
    e940:	2301      	movs	r3, #1
    e942:	4093      	lsls	r3, r2
    e944:	60ab      	str	r3, [r5, #8]
    e946:	4629      	mov	r1, r5
    e948:	f7ff fc08 	bl	e15c <_Bfree>
    e94c:	2300      	movs	r3, #0
    e94e:	6423      	str	r3, [r4, #64]	; 0x40
    e950:	f1bb 0f00 	cmp.w	fp, #0
    e954:	465e      	mov	r6, fp
    e956:	db34      	blt.n	e9c2 <_dtoa_r+0xa2>
    e958:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e95a:	2300      	movs	r3, #0
    e95c:	6013      	str	r3, [r2, #0]
    e95e:	4bc4      	ldr	r3, [pc, #784]	; (ec70 <_dtoa_r+0x350>)
    e960:	461a      	mov	r2, r3
    e962:	4033      	ands	r3, r6
    e964:	4293      	cmp	r3, r2
    e966:	d015      	beq.n	e994 <_dtoa_r+0x74>
    e968:	ec4b ab17 	vmov	d7, sl, fp
    e96c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    e970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e974:	e9cd ab02 	strd	sl, fp, [sp, #8]
    e978:	d12a      	bne.n	e9d0 <_dtoa_r+0xb0>
    e97a:	9a04      	ldr	r2, [sp, #16]
    e97c:	2301      	movs	r3, #1
    e97e:	6013      	str	r3, [r2, #0]
    e980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e982:	2b00      	cmp	r3, #0
    e984:	f000 80b7 	beq.w	eaf6 <_dtoa_r+0x1d6>
    e988:	48ba      	ldr	r0, [pc, #744]	; (ec74 <_dtoa_r+0x354>)
    e98a:	6018      	str	r0, [r3, #0]
    e98c:	3801      	subs	r0, #1
    e98e:	b013      	add	sp, #76	; 0x4c
    e990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e994:	9a04      	ldr	r2, [sp, #16]
    e996:	f242 730f 	movw	r3, #9999	; 0x270f
    e99a:	6013      	str	r3, [r2, #0]
    e99c:	f1ba 0f00 	cmp.w	sl, #0
    e9a0:	f000 8092 	beq.w	eac8 <_dtoa_r+0x1a8>
    e9a4:	48b4      	ldr	r0, [pc, #720]	; (ec78 <_dtoa_r+0x358>)
    e9a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e9a8:	2b00      	cmp	r3, #0
    e9aa:	d0f0      	beq.n	e98e <_dtoa_r+0x6e>
    e9ac:	78c3      	ldrb	r3, [r0, #3]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	f000 80a3 	beq.w	eafa <_dtoa_r+0x1da>
    e9b4:	f100 0308 	add.w	r3, r0, #8
    e9b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e9ba:	6013      	str	r3, [r2, #0]
    e9bc:	b013      	add	sp, #76	; 0x4c
    e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e9c4:	2301      	movs	r3, #1
    e9c6:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    e9ca:	6013      	str	r3, [r2, #0]
    e9cc:	46b3      	mov	fp, r6
    e9ce:	e7c6      	b.n	e95e <_dtoa_r+0x3e>
    e9d0:	a911      	add	r1, sp, #68	; 0x44
    e9d2:	aa10      	add	r2, sp, #64	; 0x40
    e9d4:	ed9d 0b02 	vldr	d0, [sp, #8]
    e9d8:	4620      	mov	r0, r4
    e9da:	f7ff fe4d 	bl	e678 <__d2b>
    e9de:	0d31      	lsrs	r1, r6, #20
    e9e0:	9007      	str	r0, [sp, #28]
    e9e2:	d17a      	bne.n	eada <_dtoa_r+0x1ba>
    e9e4:	9810      	ldr	r0, [sp, #64]	; 0x40
    e9e6:	9911      	ldr	r1, [sp, #68]	; 0x44
    e9e8:	4401      	add	r1, r0
    e9ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
    e9ee:	2b20      	cmp	r3, #32
    e9f0:	f340 8241 	ble.w	ee76 <_dtoa_r+0x556>
    e9f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    e9f8:	f201 4212 	addw	r2, r1, #1042	; 0x412
    e9fc:	409e      	lsls	r6, r3
    e9fe:	fa2a f302 	lsr.w	r3, sl, r2
    ea02:	4333      	orrs	r3, r6
    ea04:	ee07 3a90 	vmov	s15, r3
    ea08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    ea0c:	2501      	movs	r5, #1
    ea0e:	ec53 2b17 	vmov	r2, r3, d7
    ea12:	3901      	subs	r1, #1
    ea14:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    ea18:	950a      	str	r5, [sp, #40]	; 0x28
    ea1a:	ec43 2b17 	vmov	d7, r2, r3
    ea1e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    ea22:	ed9f 4b8d 	vldr	d4, [pc, #564]	; ec58 <_dtoa_r+0x338>
    ea26:	ee37 6b46 	vsub.f64	d6, d7, d6
    ea2a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; ec60 <_dtoa_r+0x340>
    ea2e:	ed9f 5b8e 	vldr	d5, [pc, #568]	; ec68 <_dtoa_r+0x348>
    ea32:	eea6 7b04 	vfma.f64	d7, d6, d4
    ea36:	ee06 1a90 	vmov	s13, r1
    ea3a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    ea3e:	eea6 7b05 	vfma.f64	d7, d6, d5
    ea42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ea46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    ea4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ea4e:	edcd 6a02 	vstr	s13, [sp, #8]
    ea52:	f100 811c 	bmi.w	ec8e <_dtoa_r+0x36e>
    ea56:	9d02      	ldr	r5, [sp, #8]
    ea58:	2d16      	cmp	r5, #22
    ea5a:	f200 8115 	bhi.w	ec88 <_dtoa_r+0x368>
    ea5e:	4b87      	ldr	r3, [pc, #540]	; (ec7c <_dtoa_r+0x35c>)
    ea60:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    ea64:	ed93 7b00 	vldr	d7, [r3]
    ea68:	ec4b ab16 	vmov	d6, sl, fp
    ea6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    ea70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ea74:	f340 8206 	ble.w	ee84 <_dtoa_r+0x564>
    ea78:	1e6b      	subs	r3, r5, #1
    ea7a:	9302      	str	r3, [sp, #8]
    ea7c:	2300      	movs	r3, #0
    ea7e:	930c      	str	r3, [sp, #48]	; 0x30
    ea80:	1a41      	subs	r1, r0, r1
    ea82:	f1b1 0901 	subs.w	r9, r1, #1
    ea86:	f100 8117 	bmi.w	ecb8 <_dtoa_r+0x398>
    ea8a:	2300      	movs	r3, #0
    ea8c:	9306      	str	r3, [sp, #24]
    ea8e:	9b02      	ldr	r3, [sp, #8]
    ea90:	2b00      	cmp	r3, #0
    ea92:	f2c0 8108 	blt.w	eca6 <_dtoa_r+0x386>
    ea96:	4499      	add	r9, r3
    ea98:	930b      	str	r3, [sp, #44]	; 0x2c
    ea9a:	2300      	movs	r3, #0
    ea9c:	9305      	str	r3, [sp, #20]
    ea9e:	9b01      	ldr	r3, [sp, #4]
    eaa0:	2b09      	cmp	r3, #9
    eaa2:	d82c      	bhi.n	eafe <_dtoa_r+0x1de>
    eaa4:	2b05      	cmp	r3, #5
    eaa6:	f340 855f 	ble.w	f568 <_dtoa_r+0xc48>
    eaaa:	3b04      	subs	r3, #4
    eaac:	9301      	str	r3, [sp, #4]
    eaae:	2300      	movs	r3, #0
    eab0:	930e      	str	r3, [sp, #56]	; 0x38
    eab2:	9b01      	ldr	r3, [sp, #4]
    eab4:	3b02      	subs	r3, #2
    eab6:	2b03      	cmp	r3, #3
    eab8:	f200 855f 	bhi.w	f57a <_dtoa_r+0xc5a>
    eabc:	e8df f013 	tbh	[pc, r3, lsl #1]
    eac0:	01e502a9 	.word	0x01e502a9
    eac4:	03c802b5 	.word	0x03c802b5
    eac8:	4b6b      	ldr	r3, [pc, #428]	; (ec78 <_dtoa_r+0x358>)
    eaca:	4a6d      	ldr	r2, [pc, #436]	; (ec80 <_dtoa_r+0x360>)
    eacc:	f3c6 0013 	ubfx	r0, r6, #0, #20
    ead0:	2800      	cmp	r0, #0
    ead2:	bf14      	ite	ne
    ead4:	4618      	movne	r0, r3
    ead6:	4610      	moveq	r0, r2
    ead8:	e765      	b.n	e9a6 <_dtoa_r+0x86>
    eada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eade:	f3c3 0013 	ubfx	r0, r3, #0, #20
    eae2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    eae6:	2500      	movs	r5, #0
    eae8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    eaec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    eaf0:	9810      	ldr	r0, [sp, #64]	; 0x40
    eaf2:	950a      	str	r5, [sp, #40]	; 0x28
    eaf4:	e791      	b.n	ea1a <_dtoa_r+0xfa>
    eaf6:	4863      	ldr	r0, [pc, #396]	; (ec84 <_dtoa_r+0x364>)
    eaf8:	e749      	b.n	e98e <_dtoa_r+0x6e>
    eafa:	1cc3      	adds	r3, r0, #3
    eafc:	e75c      	b.n	e9b8 <_dtoa_r+0x98>
    eafe:	2100      	movs	r1, #0
    eb00:	6461      	str	r1, [r4, #68]	; 0x44
    eb02:	4620      	mov	r0, r4
    eb04:	4688      	mov	r8, r1
    eb06:	9101      	str	r1, [sp, #4]
    eb08:	f7ff fb02 	bl	e110 <_Balloc>
    eb0c:	f04f 37ff 	mov.w	r7, #4294967295
    eb10:	2301      	movs	r3, #1
    eb12:	9008      	str	r0, [sp, #32]
    eb14:	6420      	str	r0, [r4, #64]	; 0x40
    eb16:	970d      	str	r7, [sp, #52]	; 0x34
    eb18:	9309      	str	r3, [sp, #36]	; 0x24
    eb1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb1c:	2b00      	cmp	r3, #0
    eb1e:	db7a      	blt.n	ec16 <_dtoa_r+0x2f6>
    eb20:	9a02      	ldr	r2, [sp, #8]
    eb22:	2a0e      	cmp	r2, #14
    eb24:	dc77      	bgt.n	ec16 <_dtoa_r+0x2f6>
    eb26:	4b55      	ldr	r3, [pc, #340]	; (ec7c <_dtoa_r+0x35c>)
    eb28:	f1b8 0f00 	cmp.w	r8, #0
    eb2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    eb30:	ed93 4b00 	vldr	d4, [r3]
    eb34:	f2c0 8284 	blt.w	f040 <_dtoa_r+0x720>
    eb38:	eeb1 2b44 	vneg.f64	d2, d4
    eb3c:	ec4b ab17 	vmov	d7, sl, fp
    eb40:	ee87 6b04 	vdiv.f64	d6, d7, d4
    eb44:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    eb48:	9a08      	ldr	r2, [sp, #32]
    eb4a:	ee16 3a10 	vmov	r3, s12
    eb4e:	2f01      	cmp	r7, #1
    eb50:	f103 0330 	add.w	r3, r3, #48	; 0x30
    eb54:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    eb58:	f102 0b01 	add.w	fp, r2, #1
    eb5c:	7013      	strb	r3, [r2, #0]
    eb5e:	eea2 7b05 	vfma.f64	d7, d2, d5
    eb62:	d022      	beq.n	ebaa <_dtoa_r+0x28a>
    eb64:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    eb68:	ee27 7b03 	vmul.f64	d7, d7, d3
    eb6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    eb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb74:	d03a      	beq.n	ebec <_dtoa_r+0x2cc>
    eb76:	9a08      	ldr	r2, [sp, #32]
    eb78:	e006      	b.n	eb88 <_dtoa_r+0x268>
    eb7a:	ee27 7b03 	vmul.f64	d7, d7, d3
    eb7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
    eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb86:	d031      	beq.n	ebec <_dtoa_r+0x2cc>
    eb88:	ee87 6b04 	vdiv.f64	d6, d7, d4
    eb8c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    eb90:	ee16 3a10 	vmov	r3, s12
    eb94:	3330      	adds	r3, #48	; 0x30
    eb96:	f80b 3b01 	strb.w	r3, [fp], #1
    eb9a:	ebc2 030b 	rsb	r3, r2, fp
    eb9e:	42bb      	cmp	r3, r7
    eba0:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    eba4:	eea2 7b05 	vfma.f64	d7, d2, d5
    eba8:	d1e7      	bne.n	eb7a <_dtoa_r+0x25a>
    ebaa:	ee37 7b07 	vadd.f64	d7, d7, d7
    ebae:	eeb4 4bc7 	vcmpe.f64	d4, d7
    ebb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebb6:	d408      	bmi.n	ebca <_dtoa_r+0x2aa>
    ebb8:	eeb4 4b47 	vcmp.f64	d4, d7
    ebbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebc0:	d114      	bne.n	ebec <_dtoa_r+0x2cc>
    ebc2:	ee16 3a10 	vmov	r3, s12
    ebc6:	07db      	lsls	r3, r3, #31
    ebc8:	d510      	bpl.n	ebec <_dtoa_r+0x2cc>
    ebca:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    ebce:	9a08      	ldr	r2, [sp, #32]
    ebd0:	f10b 33ff 	add.w	r3, fp, #4294967295
    ebd4:	e004      	b.n	ebe0 <_dtoa_r+0x2c0>
    ebd6:	429a      	cmp	r2, r3
    ebd8:	f000 83e5 	beq.w	f3a6 <_dtoa_r+0xa86>
    ebdc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    ebe0:	2839      	cmp	r0, #57	; 0x39
    ebe2:	f103 0b01 	add.w	fp, r3, #1
    ebe6:	d0f6      	beq.n	ebd6 <_dtoa_r+0x2b6>
    ebe8:	3001      	adds	r0, #1
    ebea:	7018      	strb	r0, [r3, #0]
    ebec:	9907      	ldr	r1, [sp, #28]
    ebee:	4620      	mov	r0, r4
    ebf0:	f7ff fab4 	bl	e15c <_Bfree>
    ebf4:	2200      	movs	r2, #0
    ebf6:	9b02      	ldr	r3, [sp, #8]
    ebf8:	f88b 2000 	strb.w	r2, [fp]
    ebfc:	9a04      	ldr	r2, [sp, #16]
    ebfe:	3301      	adds	r3, #1
    ec00:	6013      	str	r3, [r2, #0]
    ec02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ec04:	2b00      	cmp	r3, #0
    ec06:	f000 8366 	beq.w	f2d6 <_dtoa_r+0x9b6>
    ec0a:	9808      	ldr	r0, [sp, #32]
    ec0c:	f8c3 b000 	str.w	fp, [r3]
    ec10:	b013      	add	sp, #76	; 0x4c
    ec12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ec18:	2a00      	cmp	r2, #0
    ec1a:	d053      	beq.n	ecc4 <_dtoa_r+0x3a4>
    ec1c:	9a01      	ldr	r2, [sp, #4]
    ec1e:	2a01      	cmp	r2, #1
    ec20:	f340 822e 	ble.w	f080 <_dtoa_r+0x760>
    ec24:	9905      	ldr	r1, [sp, #20]
    ec26:	1e7a      	subs	r2, r7, #1
    ec28:	4291      	cmp	r1, r2
    ec2a:	f2c0 8357 	blt.w	f2dc <_dtoa_r+0x9bc>
    ec2e:	1a8b      	subs	r3, r1, r2
    ec30:	930e      	str	r3, [sp, #56]	; 0x38
    ec32:	2f00      	cmp	r7, #0
    ec34:	9b06      	ldr	r3, [sp, #24]
    ec36:	f2c0 8424 	blt.w	f482 <_dtoa_r+0xb62>
    ec3a:	930a      	str	r3, [sp, #40]	; 0x28
    ec3c:	463b      	mov	r3, r7
    ec3e:	9a06      	ldr	r2, [sp, #24]
    ec40:	2101      	movs	r1, #1
    ec42:	441a      	add	r2, r3
    ec44:	4620      	mov	r0, r4
    ec46:	9206      	str	r2, [sp, #24]
    ec48:	4499      	add	r9, r3
    ec4a:	f7ff fb1f 	bl	e28c <__i2b>
    ec4e:	4606      	mov	r6, r0
    ec50:	e03d      	b.n	ecce <_dtoa_r+0x3ae>
    ec52:	bf00      	nop
    ec54:	f3af 8000 	nop.w
    ec58:	636f4361 	.word	0x636f4361
    ec5c:	3fd287a7 	.word	0x3fd287a7
    ec60:	8b60c8b3 	.word	0x8b60c8b3
    ec64:	3fc68a28 	.word	0x3fc68a28
    ec68:	509f79fb 	.word	0x509f79fb
    ec6c:	3fd34413 	.word	0x3fd34413
    ec70:	7ff00000 	.word	0x7ff00000
    ec74:	20001745 	.word	0x20001745
    ec78:	20001db0 	.word	0x20001db0
    ec7c:	20001ca8 	.word	0x20001ca8
    ec80:	20001da4 	.word	0x20001da4
    ec84:	20001744 	.word	0x20001744
    ec88:	2301      	movs	r3, #1
    ec8a:	930c      	str	r3, [sp, #48]	; 0x30
    ec8c:	e6f8      	b.n	ea80 <_dtoa_r+0x160>
    ec8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    ec92:	eeb4 7b46 	vcmp.f64	d7, d6
    ec96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ec9a:	f43f aedc 	beq.w	ea56 <_dtoa_r+0x136>
    ec9e:	9b02      	ldr	r3, [sp, #8]
    eca0:	3b01      	subs	r3, #1
    eca2:	9302      	str	r3, [sp, #8]
    eca4:	e6d7      	b.n	ea56 <_dtoa_r+0x136>
    eca6:	9a06      	ldr	r2, [sp, #24]
    eca8:	9b02      	ldr	r3, [sp, #8]
    ecaa:	1ad2      	subs	r2, r2, r3
    ecac:	425b      	negs	r3, r3
    ecae:	9305      	str	r3, [sp, #20]
    ecb0:	2300      	movs	r3, #0
    ecb2:	9206      	str	r2, [sp, #24]
    ecb4:	930b      	str	r3, [sp, #44]	; 0x2c
    ecb6:	e6f2      	b.n	ea9e <_dtoa_r+0x17e>
    ecb8:	f1c9 0300 	rsb	r3, r9, #0
    ecbc:	9306      	str	r3, [sp, #24]
    ecbe:	f04f 0900 	mov.w	r9, #0
    ecc2:	e6e4      	b.n	ea8e <_dtoa_r+0x16e>
    ecc4:	9b05      	ldr	r3, [sp, #20]
    ecc6:	930e      	str	r3, [sp, #56]	; 0x38
    ecc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ecca:	9b06      	ldr	r3, [sp, #24]
    eccc:	930a      	str	r3, [sp, #40]	; 0x28
    ecce:	990a      	ldr	r1, [sp, #40]	; 0x28
    ecd0:	460b      	mov	r3, r1
    ecd2:	b161      	cbz	r1, ecee <_dtoa_r+0x3ce>
    ecd4:	f1b9 0f00 	cmp.w	r9, #0
    ecd8:	dd09      	ble.n	ecee <_dtoa_r+0x3ce>
    ecda:	4549      	cmp	r1, r9
    ecdc:	9a06      	ldr	r2, [sp, #24]
    ecde:	bfa8      	it	ge
    ece0:	464b      	movge	r3, r9
    ece2:	1ad2      	subs	r2, r2, r3
    ece4:	9206      	str	r2, [sp, #24]
    ece6:	1aca      	subs	r2, r1, r3
    ece8:	920a      	str	r2, [sp, #40]	; 0x28
    ecea:	ebc3 0909 	rsb	r9, r3, r9
    ecee:	9b05      	ldr	r3, [sp, #20]
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	f340 8280 	ble.w	f1f6 <_dtoa_r+0x8d6>
    ecf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ecf8:	2a00      	cmp	r2, #0
    ecfa:	f000 819a 	beq.w	f032 <_dtoa_r+0x712>
    ecfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ed00:	2a00      	cmp	r2, #0
    ed02:	f000 8196 	beq.w	f032 <_dtoa_r+0x712>
    ed06:	4631      	mov	r1, r6
    ed08:	4620      	mov	r0, r4
    ed0a:	f7ff fb61 	bl	e3d0 <__pow5mult>
    ed0e:	9a07      	ldr	r2, [sp, #28]
    ed10:	4601      	mov	r1, r0
    ed12:	4606      	mov	r6, r0
    ed14:	4620      	mov	r0, r4
    ed16:	f7ff fac3 	bl	e2a0 <__multiply>
    ed1a:	9907      	ldr	r1, [sp, #28]
    ed1c:	4605      	mov	r5, r0
    ed1e:	4620      	mov	r0, r4
    ed20:	f7ff fa1c 	bl	e15c <_Bfree>
    ed24:	9b05      	ldr	r3, [sp, #20]
    ed26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ed28:	1a9b      	subs	r3, r3, r2
    ed2a:	9305      	str	r3, [sp, #20]
    ed2c:	f040 8180 	bne.w	f030 <_dtoa_r+0x710>
    ed30:	2101      	movs	r1, #1
    ed32:	4620      	mov	r0, r4
    ed34:	f7ff faaa 	bl	e28c <__i2b>
    ed38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ed3a:	9005      	str	r0, [sp, #20]
    ed3c:	2b00      	cmp	r3, #0
    ed3e:	f000 81ac 	beq.w	f09a <_dtoa_r+0x77a>
    ed42:	4601      	mov	r1, r0
    ed44:	461a      	mov	r2, r3
    ed46:	4620      	mov	r0, r4
    ed48:	f7ff fb42 	bl	e3d0 <__pow5mult>
    ed4c:	9b01      	ldr	r3, [sp, #4]
    ed4e:	9005      	str	r0, [sp, #20]
    ed50:	2b01      	cmp	r3, #1
    ed52:	f340 8280 	ble.w	f256 <_dtoa_r+0x936>
    ed56:	2300      	movs	r3, #0
    ed58:	9307      	str	r3, [sp, #28]
    ed5a:	9a05      	ldr	r2, [sp, #20]
    ed5c:	6913      	ldr	r3, [r2, #16]
    ed5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ed62:	6918      	ldr	r0, [r3, #16]
    ed64:	f7ff fa44 	bl	e1f0 <__hi0bits>
    ed68:	f1c0 0020 	rsb	r0, r0, #32
    ed6c:	4448      	add	r0, r9
    ed6e:	f010 001f 	ands.w	r0, r0, #31
    ed72:	f000 8190 	beq.w	f096 <_dtoa_r+0x776>
    ed76:	f1c0 0320 	rsb	r3, r0, #32
    ed7a:	2b04      	cmp	r3, #4
    ed7c:	f340 83f8 	ble.w	f570 <_dtoa_r+0xc50>
    ed80:	f1c0 001c 	rsb	r0, r0, #28
    ed84:	9b06      	ldr	r3, [sp, #24]
    ed86:	4403      	add	r3, r0
    ed88:	9306      	str	r3, [sp, #24]
    ed8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed8c:	4403      	add	r3, r0
    ed8e:	930a      	str	r3, [sp, #40]	; 0x28
    ed90:	4481      	add	r9, r0
    ed92:	9b06      	ldr	r3, [sp, #24]
    ed94:	2b00      	cmp	r3, #0
    ed96:	dd05      	ble.n	eda4 <_dtoa_r+0x484>
    ed98:	4629      	mov	r1, r5
    ed9a:	461a      	mov	r2, r3
    ed9c:	4620      	mov	r0, r4
    ed9e:	f7ff fb67 	bl	e470 <__lshift>
    eda2:	4605      	mov	r5, r0
    eda4:	f1b9 0f00 	cmp.w	r9, #0
    eda8:	dd05      	ble.n	edb6 <_dtoa_r+0x496>
    edaa:	464a      	mov	r2, r9
    edac:	9905      	ldr	r1, [sp, #20]
    edae:	4620      	mov	r0, r4
    edb0:	f7ff fb5e 	bl	e470 <__lshift>
    edb4:	9005      	str	r0, [sp, #20]
    edb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    edb8:	2b00      	cmp	r3, #0
    edba:	f040 8201 	bne.w	f1c0 <_dtoa_r+0x8a0>
    edbe:	2f00      	cmp	r7, #0
    edc0:	f340 8220 	ble.w	f204 <_dtoa_r+0x8e4>
    edc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edc6:	2b00      	cmp	r3, #0
    edc8:	f040 817b 	bne.w	f0c2 <_dtoa_r+0x7a2>
    edcc:	f8dd b020 	ldr.w	fp, [sp, #32]
    edd0:	f8dd a014 	ldr.w	sl, [sp, #20]
    edd4:	46d8      	mov	r8, fp
    edd6:	e002      	b.n	edde <_dtoa_r+0x4be>
    edd8:	f7ff f9ca 	bl	e170 <__multadd>
    eddc:	4605      	mov	r5, r0
    edde:	4651      	mov	r1, sl
    ede0:	4628      	mov	r0, r5
    ede2:	f7ff fd07 	bl	e7f4 <quorem>
    ede6:	f100 0930 	add.w	r9, r0, #48	; 0x30
    edea:	f808 9b01 	strb.w	r9, [r8], #1
    edee:	ebcb 0308 	rsb	r3, fp, r8
    edf2:	42bb      	cmp	r3, r7
    edf4:	f04f 020a 	mov.w	r2, #10
    edf8:	f04f 0300 	mov.w	r3, #0
    edfc:	4629      	mov	r1, r5
    edfe:	4620      	mov	r0, r4
    ee00:	dbea      	blt.n	edd8 <_dtoa_r+0x4b8>
    ee02:	9b08      	ldr	r3, [sp, #32]
    ee04:	2f01      	cmp	r7, #1
    ee06:	bfac      	ite	ge
    ee08:	19db      	addge	r3, r3, r7
    ee0a:	3301      	addlt	r3, #1
    ee0c:	469b      	mov	fp, r3
    ee0e:	f04f 0a00 	mov.w	sl, #0
    ee12:	4629      	mov	r1, r5
    ee14:	2201      	movs	r2, #1
    ee16:	4620      	mov	r0, r4
    ee18:	f7ff fb2a 	bl	e470 <__lshift>
    ee1c:	9905      	ldr	r1, [sp, #20]
    ee1e:	9007      	str	r0, [sp, #28]
    ee20:	f7ff fb7e 	bl	e520 <__mcmp>
    ee24:	2800      	cmp	r0, #0
    ee26:	f340 828c 	ble.w	f342 <_dtoa_r+0xa22>
    ee2a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    ee2e:	9908      	ldr	r1, [sp, #32]
    ee30:	f10b 33ff 	add.w	r3, fp, #4294967295
    ee34:	e004      	b.n	ee40 <_dtoa_r+0x520>
    ee36:	428b      	cmp	r3, r1
    ee38:	f000 8203 	beq.w	f242 <_dtoa_r+0x922>
    ee3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    ee40:	2a39      	cmp	r2, #57	; 0x39
    ee42:	f103 0b01 	add.w	fp, r3, #1
    ee46:	d0f6      	beq.n	ee36 <_dtoa_r+0x516>
    ee48:	3201      	adds	r2, #1
    ee4a:	701a      	strb	r2, [r3, #0]
    ee4c:	9905      	ldr	r1, [sp, #20]
    ee4e:	4620      	mov	r0, r4
    ee50:	f7ff f984 	bl	e15c <_Bfree>
    ee54:	2e00      	cmp	r6, #0
    ee56:	f43f aec9 	beq.w	ebec <_dtoa_r+0x2cc>
    ee5a:	f1ba 0f00 	cmp.w	sl, #0
    ee5e:	d005      	beq.n	ee6c <_dtoa_r+0x54c>
    ee60:	45b2      	cmp	sl, r6
    ee62:	d003      	beq.n	ee6c <_dtoa_r+0x54c>
    ee64:	4651      	mov	r1, sl
    ee66:	4620      	mov	r0, r4
    ee68:	f7ff f978 	bl	e15c <_Bfree>
    ee6c:	4631      	mov	r1, r6
    ee6e:	4620      	mov	r0, r4
    ee70:	f7ff f974 	bl	e15c <_Bfree>
    ee74:	e6ba      	b.n	ebec <_dtoa_r+0x2cc>
    ee76:	f1c3 0320 	rsb	r3, r3, #32
    ee7a:	fa0a f303 	lsl.w	r3, sl, r3
    ee7e:	ee07 3a90 	vmov	s15, r3
    ee82:	e5c1      	b.n	ea08 <_dtoa_r+0xe8>
    ee84:	2300      	movs	r3, #0
    ee86:	930c      	str	r3, [sp, #48]	; 0x30
    ee88:	e5fa      	b.n	ea80 <_dtoa_r+0x160>
    ee8a:	2300      	movs	r3, #0
    ee8c:	9309      	str	r3, [sp, #36]	; 0x24
    ee8e:	9b02      	ldr	r3, [sp, #8]
    ee90:	4443      	add	r3, r8
    ee92:	1c5f      	adds	r7, r3, #1
    ee94:	2f00      	cmp	r7, #0
    ee96:	930d      	str	r3, [sp, #52]	; 0x34
    ee98:	f340 822d 	ble.w	f2f6 <_dtoa_r+0x9d6>
    ee9c:	463e      	mov	r6, r7
    ee9e:	463d      	mov	r5, r7
    eea0:	2100      	movs	r1, #0
    eea2:	2e17      	cmp	r6, #23
    eea4:	6461      	str	r1, [r4, #68]	; 0x44
    eea6:	d90a      	bls.n	eebe <_dtoa_r+0x59e>
    eea8:	2201      	movs	r2, #1
    eeaa:	2304      	movs	r3, #4
    eeac:	005b      	lsls	r3, r3, #1
    eeae:	f103 0014 	add.w	r0, r3, #20
    eeb2:	42b0      	cmp	r0, r6
    eeb4:	4611      	mov	r1, r2
    eeb6:	f102 0201 	add.w	r2, r2, #1
    eeba:	d9f7      	bls.n	eeac <_dtoa_r+0x58c>
    eebc:	6461      	str	r1, [r4, #68]	; 0x44
    eebe:	4620      	mov	r0, r4
    eec0:	f7ff f926 	bl	e110 <_Balloc>
    eec4:	2d0e      	cmp	r5, #14
    eec6:	9008      	str	r0, [sp, #32]
    eec8:	6420      	str	r0, [r4, #64]	; 0x40
    eeca:	f63f ae26 	bhi.w	eb1a <_dtoa_r+0x1fa>
    eece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eed0:	2b00      	cmp	r3, #0
    eed2:	f43f ae22 	beq.w	eb1a <_dtoa_r+0x1fa>
    eed6:	9902      	ldr	r1, [sp, #8]
    eed8:	2900      	cmp	r1, #0
    eeda:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    eede:	f340 8241 	ble.w	f364 <_dtoa_r+0xa44>
    eee2:	4bc6      	ldr	r3, [pc, #792]	; (f1fc <_dtoa_r+0x8dc>)
    eee4:	f001 020f 	and.w	r2, r1, #15
    eee8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    eeec:	110b      	asrs	r3, r1, #4
    eeee:	06de      	lsls	r6, r3, #27
    eef0:	ed92 6b00 	vldr	d6, [r2]
    eef4:	f140 81fb 	bpl.w	f2ee <_dtoa_r+0x9ce>
    eef8:	4ac1      	ldr	r2, [pc, #772]	; (f200 <_dtoa_r+0x8e0>)
    eefa:	ed92 7b08 	vldr	d7, [r2, #32]
    eefe:	ec4b ab14 	vmov	d4, sl, fp
    ef02:	f003 030f 	and.w	r3, r3, #15
    ef06:	2103      	movs	r1, #3
    ef08:	ee84 5b07 	vdiv.f64	d5, d4, d7
    ef0c:	b15b      	cbz	r3, ef26 <_dtoa_r+0x606>
    ef0e:	4abc      	ldr	r2, [pc, #752]	; (f200 <_dtoa_r+0x8e0>)
    ef10:	07dd      	lsls	r5, r3, #31
    ef12:	d504      	bpl.n	ef1e <_dtoa_r+0x5fe>
    ef14:	ed92 7b00 	vldr	d7, [r2]
    ef18:	3101      	adds	r1, #1
    ef1a:	ee26 6b07 	vmul.f64	d6, d6, d7
    ef1e:	105b      	asrs	r3, r3, #1
    ef20:	f102 0208 	add.w	r2, r2, #8
    ef24:	d1f4      	bne.n	ef10 <_dtoa_r+0x5f0>
    ef26:	ee85 4b06 	vdiv.f64	d4, d5, d6
    ef2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef2c:	b13b      	cbz	r3, ef3e <_dtoa_r+0x61e>
    ef2e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    ef32:	eeb4 4bc7 	vcmpe.f64	d4, d7
    ef36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef3a:	f100 82b7 	bmi.w	f4ac <_dtoa_r+0xb8c>
    ef3e:	ee07 1a90 	vmov	s15, r1
    ef42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    ef46:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    ef4a:	eea6 7b04 	vfma.f64	d7, d6, d4
    ef4e:	ec53 2b17 	vmov	r2, r3, d7
    ef52:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    ef56:	2f00      	cmp	r7, #0
    ef58:	f000 81a6 	beq.w	f2a8 <_dtoa_r+0x988>
    ef5c:	9e02      	ldr	r6, [sp, #8]
    ef5e:	4639      	mov	r1, r7
    ef60:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef62:	2800      	cmp	r0, #0
    ef64:	f000 824d 	beq.w	f402 <_dtoa_r+0xae2>
    ef68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    ef6c:	48a3      	ldr	r0, [pc, #652]	; (f1fc <_dtoa_r+0x8dc>)
    ef6e:	9d08      	ldr	r5, [sp, #32]
    ef70:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    ef74:	ed10 6b02 	vldr	d6, [r0, #-8]
    ef78:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    ef7c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    ef80:	ee17 0a10 	vmov	r0, s14
    ef84:	ec43 2b16 	vmov	d6, r2, r3
    ef88:	3030      	adds	r0, #48	; 0x30
    ef8a:	b2c0      	uxtb	r0, r0
    ef8c:	ee35 5b46 	vsub.f64	d5, d5, d6
    ef90:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    ef94:	ee34 7b47 	vsub.f64	d7, d4, d7
    ef98:	eeb4 5bc7 	vcmpe.f64	d5, d7
    ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efa0:	7028      	strb	r0, [r5, #0]
    efa2:	f105 0b01 	add.w	fp, r5, #1
    efa6:	dc32      	bgt.n	f00e <_dtoa_r+0x6ee>
    efa8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    efac:	ee33 6b47 	vsub.f64	d6, d3, d7
    efb0:	eeb4 5bc6 	vcmpe.f64	d5, d6
    efb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efb8:	f300 82ae 	bgt.w	f518 <_dtoa_r+0xbf8>
    efbc:	2901      	cmp	r1, #1
    efbe:	f340 81cd 	ble.w	f35c <_dtoa_r+0xa3c>
    efc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    efc6:	9b08      	ldr	r3, [sp, #32]
    efc8:	4419      	add	r1, r3
    efca:	e00a      	b.n	efe2 <_dtoa_r+0x6c2>
    efcc:	ee33 6b47 	vsub.f64	d6, d3, d7
    efd0:	eeb4 6bc5 	vcmpe.f64	d6, d5
    efd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efd8:	f100 829e 	bmi.w	f518 <_dtoa_r+0xbf8>
    efdc:	458b      	cmp	fp, r1
    efde:	f000 81bd 	beq.w	f35c <_dtoa_r+0xa3c>
    efe2:	ee27 7b04 	vmul.f64	d7, d7, d4
    efe6:	ee25 5b04 	vmul.f64	d5, d5, d4
    efea:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    efee:	ee16 3a10 	vmov	r3, s12
    eff2:	f103 0030 	add.w	r0, r3, #48	; 0x30
    eff6:	b2c0      	uxtb	r0, r0
    eff8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    effc:	ee37 7b46 	vsub.f64	d7, d7, d6
    f000:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f008:	f80b 0b01 	strb.w	r0, [fp], #1
    f00c:	d5de      	bpl.n	efcc <_dtoa_r+0x6ac>
    f00e:	9602      	str	r6, [sp, #8]
    f010:	e5ec      	b.n	ebec <_dtoa_r+0x2cc>
    f012:	2300      	movs	r3, #0
    f014:	9309      	str	r3, [sp, #36]	; 0x24
    f016:	f1b8 0f00 	cmp.w	r8, #0
    f01a:	f340 8170 	ble.w	f2fe <_dtoa_r+0x9de>
    f01e:	4646      	mov	r6, r8
    f020:	4645      	mov	r5, r8
    f022:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    f026:	4647      	mov	r7, r8
    f028:	e73a      	b.n	eea0 <_dtoa_r+0x580>
    f02a:	2301      	movs	r3, #1
    f02c:	9309      	str	r3, [sp, #36]	; 0x24
    f02e:	e7f2      	b.n	f016 <_dtoa_r+0x6f6>
    f030:	9507      	str	r5, [sp, #28]
    f032:	9a05      	ldr	r2, [sp, #20]
    f034:	9907      	ldr	r1, [sp, #28]
    f036:	4620      	mov	r0, r4
    f038:	f7ff f9ca 	bl	e3d0 <__pow5mult>
    f03c:	4605      	mov	r5, r0
    f03e:	e677      	b.n	ed30 <_dtoa_r+0x410>
    f040:	2f00      	cmp	r7, #0
    f042:	f73f ad79 	bgt.w	eb38 <_dtoa_r+0x218>
    f046:	f040 8142 	bne.w	f2ce <_dtoa_r+0x9ae>
    f04a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f04e:	ee24 4b07 	vmul.f64	d4, d4, d7
    f052:	ec4b ab17 	vmov	d7, sl, fp
    f056:	eeb4 4bc7 	vcmpe.f64	d4, d7
    f05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f05e:	463e      	mov	r6, r7
    f060:	9705      	str	r7, [sp, #20]
    f062:	f2c0 80e5 	blt.w	f230 <_dtoa_r+0x910>
    f066:	ea6f 0308 	mvn.w	r3, r8
    f06a:	f8dd b020 	ldr.w	fp, [sp, #32]
    f06e:	9302      	str	r3, [sp, #8]
    f070:	9905      	ldr	r1, [sp, #20]
    f072:	4620      	mov	r0, r4
    f074:	f7ff f872 	bl	e15c <_Bfree>
    f078:	2e00      	cmp	r6, #0
    f07a:	f43f adb7 	beq.w	ebec <_dtoa_r+0x2cc>
    f07e:	e6f5      	b.n	ee6c <_dtoa_r+0x54c>
    f080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f082:	2a00      	cmp	r2, #0
    f084:	f000 8202 	beq.w	f48c <_dtoa_r+0xb6c>
    f088:	9a05      	ldr	r2, [sp, #20]
    f08a:	920e      	str	r2, [sp, #56]	; 0x38
    f08c:	9a06      	ldr	r2, [sp, #24]
    f08e:	920a      	str	r2, [sp, #40]	; 0x28
    f090:	f203 4333 	addw	r3, r3, #1075	; 0x433
    f094:	e5d3      	b.n	ec3e <_dtoa_r+0x31e>
    f096:	201c      	movs	r0, #28
    f098:	e674      	b.n	ed84 <_dtoa_r+0x464>
    f09a:	9b01      	ldr	r3, [sp, #4]
    f09c:	2b01      	cmp	r3, #1
    f09e:	f340 8240 	ble.w	f522 <_dtoa_r+0xc02>
    f0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0a4:	9307      	str	r3, [sp, #28]
    f0a6:	2001      	movs	r0, #1
    f0a8:	e660      	b.n	ed6c <_dtoa_r+0x44c>
    f0aa:	4631      	mov	r1, r6
    f0ac:	2300      	movs	r3, #0
    f0ae:	220a      	movs	r2, #10
    f0b0:	4620      	mov	r0, r4
    f0b2:	f7ff f85d 	bl	e170 <__multadd>
    f0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f0b8:	2b00      	cmp	r3, #0
    f0ba:	4606      	mov	r6, r0
    f0bc:	f340 824d 	ble.w	f55a <_dtoa_r+0xc3a>
    f0c0:	461f      	mov	r7, r3
    f0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0c4:	2b00      	cmp	r3, #0
    f0c6:	dd05      	ble.n	f0d4 <_dtoa_r+0x7b4>
    f0c8:	4631      	mov	r1, r6
    f0ca:	461a      	mov	r2, r3
    f0cc:	4620      	mov	r0, r4
    f0ce:	f7ff f9cf 	bl	e470 <__lshift>
    f0d2:	4606      	mov	r6, r0
    f0d4:	9b07      	ldr	r3, [sp, #28]
    f0d6:	2b00      	cmp	r3, #0
    f0d8:	f040 816e 	bne.w	f3b8 <_dtoa_r+0xa98>
    f0dc:	46b0      	mov	r8, r6
    f0de:	9b08      	ldr	r3, [sp, #32]
    f0e0:	3f01      	subs	r7, #1
    f0e2:	19da      	adds	r2, r3, r7
    f0e4:	9209      	str	r2, [sp, #36]	; 0x24
    f0e6:	f00a 0201 	and.w	r2, sl, #1
    f0ea:	920a      	str	r2, [sp, #40]	; 0x28
    f0ec:	461f      	mov	r7, r3
    f0ee:	f8dd b014 	ldr.w	fp, [sp, #20]
    f0f2:	4628      	mov	r0, r5
    f0f4:	4659      	mov	r1, fp
    f0f6:	f7ff fb7d 	bl	e7f4 <quorem>
    f0fa:	4631      	mov	r1, r6
    f0fc:	4682      	mov	sl, r0
    f0fe:	4628      	mov	r0, r5
    f100:	f7ff fa0e 	bl	e520 <__mcmp>
    f104:	4642      	mov	r2, r8
    f106:	4659      	mov	r1, fp
    f108:	4681      	mov	r9, r0
    f10a:	4620      	mov	r0, r4
    f10c:	f7ff fa2a 	bl	e564 <__mdiff>
    f110:	68c3      	ldr	r3, [r0, #12]
    f112:	4683      	mov	fp, r0
    f114:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    f118:	2b00      	cmp	r3, #0
    f11a:	d149      	bne.n	f1b0 <_dtoa_r+0x890>
    f11c:	4601      	mov	r1, r0
    f11e:	4628      	mov	r0, r5
    f120:	9207      	str	r2, [sp, #28]
    f122:	f7ff f9fd 	bl	e520 <__mcmp>
    f126:	4659      	mov	r1, fp
    f128:	9006      	str	r0, [sp, #24]
    f12a:	4620      	mov	r0, r4
    f12c:	f7ff f816 	bl	e15c <_Bfree>
    f130:	9b06      	ldr	r3, [sp, #24]
    f132:	9a07      	ldr	r2, [sp, #28]
    f134:	b92b      	cbnz	r3, f142 <_dtoa_r+0x822>
    f136:	9901      	ldr	r1, [sp, #4]
    f138:	b919      	cbnz	r1, f142 <_dtoa_r+0x822>
    f13a:	990a      	ldr	r1, [sp, #40]	; 0x28
    f13c:	2900      	cmp	r1, #0
    f13e:	f000 81f5 	beq.w	f52c <_dtoa_r+0xc0c>
    f142:	f1b9 0f00 	cmp.w	r9, #0
    f146:	f2c0 80df 	blt.w	f308 <_dtoa_r+0x9e8>
    f14a:	d105      	bne.n	f158 <_dtoa_r+0x838>
    f14c:	9901      	ldr	r1, [sp, #4]
    f14e:	b919      	cbnz	r1, f158 <_dtoa_r+0x838>
    f150:	990a      	ldr	r1, [sp, #40]	; 0x28
    f152:	2900      	cmp	r1, #0
    f154:	f000 80d8 	beq.w	f308 <_dtoa_r+0x9e8>
    f158:	2b00      	cmp	r3, #0
    f15a:	f300 8141 	bgt.w	f3e0 <_dtoa_r+0xac0>
    f15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f160:	703a      	strb	r2, [r7, #0]
    f162:	f107 0901 	add.w	r9, r7, #1
    f166:	429f      	cmp	r7, r3
    f168:	46cb      	mov	fp, r9
    f16a:	f000 8146 	beq.w	f3fa <_dtoa_r+0xada>
    f16e:	4629      	mov	r1, r5
    f170:	2300      	movs	r3, #0
    f172:	220a      	movs	r2, #10
    f174:	4620      	mov	r0, r4
    f176:	f7fe fffb 	bl	e170 <__multadd>
    f17a:	4546      	cmp	r6, r8
    f17c:	4605      	mov	r5, r0
    f17e:	4631      	mov	r1, r6
    f180:	f04f 0300 	mov.w	r3, #0
    f184:	f04f 020a 	mov.w	r2, #10
    f188:	4620      	mov	r0, r4
    f18a:	d00b      	beq.n	f1a4 <_dtoa_r+0x884>
    f18c:	f7fe fff0 	bl	e170 <__multadd>
    f190:	4641      	mov	r1, r8
    f192:	4606      	mov	r6, r0
    f194:	2300      	movs	r3, #0
    f196:	220a      	movs	r2, #10
    f198:	4620      	mov	r0, r4
    f19a:	f7fe ffe9 	bl	e170 <__multadd>
    f19e:	464f      	mov	r7, r9
    f1a0:	4680      	mov	r8, r0
    f1a2:	e7a4      	b.n	f0ee <_dtoa_r+0x7ce>
    f1a4:	f7fe ffe4 	bl	e170 <__multadd>
    f1a8:	464f      	mov	r7, r9
    f1aa:	4606      	mov	r6, r0
    f1ac:	4680      	mov	r8, r0
    f1ae:	e79e      	b.n	f0ee <_dtoa_r+0x7ce>
    f1b0:	4601      	mov	r1, r0
    f1b2:	4620      	mov	r0, r4
    f1b4:	9206      	str	r2, [sp, #24]
    f1b6:	f7fe ffd1 	bl	e15c <_Bfree>
    f1ba:	2301      	movs	r3, #1
    f1bc:	9a06      	ldr	r2, [sp, #24]
    f1be:	e7c0      	b.n	f142 <_dtoa_r+0x822>
    f1c0:	9905      	ldr	r1, [sp, #20]
    f1c2:	4628      	mov	r0, r5
    f1c4:	f7ff f9ac 	bl	e520 <__mcmp>
    f1c8:	2800      	cmp	r0, #0
    f1ca:	f6bf adf8 	bge.w	edbe <_dtoa_r+0x49e>
    f1ce:	4629      	mov	r1, r5
    f1d0:	9d02      	ldr	r5, [sp, #8]
    f1d2:	2300      	movs	r3, #0
    f1d4:	3d01      	subs	r5, #1
    f1d6:	220a      	movs	r2, #10
    f1d8:	4620      	mov	r0, r4
    f1da:	9502      	str	r5, [sp, #8]
    f1dc:	f7fe ffc8 	bl	e170 <__multadd>
    f1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1e2:	4605      	mov	r5, r0
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	f47f af60 	bne.w	f0aa <_dtoa_r+0x78a>
    f1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1ec:	2b00      	cmp	r3, #0
    f1ee:	f340 81ad 	ble.w	f54c <_dtoa_r+0xc2c>
    f1f2:	461f      	mov	r7, r3
    f1f4:	e5ea      	b.n	edcc <_dtoa_r+0x4ac>
    f1f6:	9d07      	ldr	r5, [sp, #28]
    f1f8:	e59a      	b.n	ed30 <_dtoa_r+0x410>
    f1fa:	bf00      	nop
    f1fc:	20001ca8 	.word	0x20001ca8
    f200:	20001d70 	.word	0x20001d70
    f204:	9b01      	ldr	r3, [sp, #4]
    f206:	2b02      	cmp	r3, #2
    f208:	f77f addc 	ble.w	edc4 <_dtoa_r+0x4a4>
    f20c:	2f00      	cmp	r7, #0
    f20e:	f040 8169 	bne.w	f4e4 <_dtoa_r+0xbc4>
    f212:	463b      	mov	r3, r7
    f214:	9905      	ldr	r1, [sp, #20]
    f216:	2205      	movs	r2, #5
    f218:	4620      	mov	r0, r4
    f21a:	f7fe ffa9 	bl	e170 <__multadd>
    f21e:	4601      	mov	r1, r0
    f220:	9005      	str	r0, [sp, #20]
    f222:	4628      	mov	r0, r5
    f224:	f7ff f97c 	bl	e520 <__mcmp>
    f228:	2800      	cmp	r0, #0
    f22a:	9507      	str	r5, [sp, #28]
    f22c:	f77f af1b 	ble.w	f066 <_dtoa_r+0x746>
    f230:	9a02      	ldr	r2, [sp, #8]
    f232:	9908      	ldr	r1, [sp, #32]
    f234:	2331      	movs	r3, #49	; 0x31
    f236:	3201      	adds	r2, #1
    f238:	9202      	str	r2, [sp, #8]
    f23a:	700b      	strb	r3, [r1, #0]
    f23c:	f101 0b01 	add.w	fp, r1, #1
    f240:	e716      	b.n	f070 <_dtoa_r+0x750>
    f242:	9a02      	ldr	r2, [sp, #8]
    f244:	3201      	adds	r2, #1
    f246:	9202      	str	r2, [sp, #8]
    f248:	9a08      	ldr	r2, [sp, #32]
    f24a:	2331      	movs	r3, #49	; 0x31
    f24c:	7013      	strb	r3, [r2, #0]
    f24e:	e5fd      	b.n	ee4c <_dtoa_r+0x52c>
    f250:	2301      	movs	r3, #1
    f252:	9309      	str	r3, [sp, #36]	; 0x24
    f254:	e61b      	b.n	ee8e <_dtoa_r+0x56e>
    f256:	f1ba 0f00 	cmp.w	sl, #0
    f25a:	f47f ad7c 	bne.w	ed56 <_dtoa_r+0x436>
    f25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
    f262:	2b00      	cmp	r3, #0
    f264:	f040 811b 	bne.w	f49e <_dtoa_r+0xb7e>
    f268:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    f26c:	0d1b      	lsrs	r3, r3, #20
    f26e:	051b      	lsls	r3, r3, #20
    f270:	2b00      	cmp	r3, #0
    f272:	f000 8154 	beq.w	f51e <_dtoa_r+0xbfe>
    f276:	9b06      	ldr	r3, [sp, #24]
    f278:	3301      	adds	r3, #1
    f27a:	9306      	str	r3, [sp, #24]
    f27c:	2301      	movs	r3, #1
    f27e:	f109 0901 	add.w	r9, r9, #1
    f282:	9307      	str	r3, [sp, #28]
    f284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f286:	2001      	movs	r0, #1
    f288:	2b00      	cmp	r3, #0
    f28a:	f43f ad6f 	beq.w	ed6c <_dtoa_r+0x44c>
    f28e:	e564      	b.n	ed5a <_dtoa_r+0x43a>
    f290:	ee07 1a90 	vmov	s15, r1
    f294:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    f298:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f29c:	eea4 7b06 	vfma.f64	d7, d4, d6
    f2a0:	ec53 2b17 	vmov	r2, r3, d7
    f2a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    f2a8:	ec43 2b16 	vmov	d6, r2, r3
    f2ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f2b0:	ee34 7b47 	vsub.f64	d7, d4, d7
    f2b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2bc:	f300 80dd 	bgt.w	f47a <_dtoa_r+0xb5a>
    f2c0:	eeb1 6b46 	vneg.f64	d6, d6
    f2c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    f2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2cc:	d546      	bpl.n	f35c <_dtoa_r+0xa3c>
    f2ce:	2300      	movs	r3, #0
    f2d0:	9305      	str	r3, [sp, #20]
    f2d2:	461e      	mov	r6, r3
    f2d4:	e6c7      	b.n	f066 <_dtoa_r+0x746>
    f2d6:	9808      	ldr	r0, [sp, #32]
    f2d8:	f7ff bb59 	b.w	e98e <_dtoa_r+0x6e>
    f2dc:	9b05      	ldr	r3, [sp, #20]
    f2de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f2e0:	9205      	str	r2, [sp, #20]
    f2e2:	1ad3      	subs	r3, r2, r3
    f2e4:	4419      	add	r1, r3
    f2e6:	2300      	movs	r3, #0
    f2e8:	910b      	str	r1, [sp, #44]	; 0x2c
    f2ea:	930e      	str	r3, [sp, #56]	; 0x38
    f2ec:	e4a1      	b.n	ec32 <_dtoa_r+0x312>
    f2ee:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    f2f2:	2102      	movs	r1, #2
    f2f4:	e60a      	b.n	ef0c <_dtoa_r+0x5ec>
    f2f6:	463d      	mov	r5, r7
    f2f8:	2100      	movs	r1, #0
    f2fa:	6461      	str	r1, [r4, #68]	; 0x44
    f2fc:	e5df      	b.n	eebe <_dtoa_r+0x59e>
    f2fe:	2501      	movs	r5, #1
    f300:	950d      	str	r5, [sp, #52]	; 0x34
    f302:	462f      	mov	r7, r5
    f304:	46a8      	mov	r8, r5
    f306:	e7f7      	b.n	f2f8 <_dtoa_r+0x9d8>
    f308:	2b00      	cmp	r3, #0
    f30a:	4691      	mov	r9, r2
    f30c:	dd11      	ble.n	f332 <_dtoa_r+0xa12>
    f30e:	4629      	mov	r1, r5
    f310:	2201      	movs	r2, #1
    f312:	4620      	mov	r0, r4
    f314:	f7ff f8ac 	bl	e470 <__lshift>
    f318:	9905      	ldr	r1, [sp, #20]
    f31a:	4605      	mov	r5, r0
    f31c:	f7ff f900 	bl	e520 <__mcmp>
    f320:	2800      	cmp	r0, #0
    f322:	f340 810c 	ble.w	f53e <_dtoa_r+0xc1e>
    f326:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    f32a:	f000 80dd 	beq.w	f4e8 <_dtoa_r+0xbc8>
    f32e:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    f332:	46b2      	mov	sl, r6
    f334:	f887 9000 	strb.w	r9, [r7]
    f338:	f107 0b01 	add.w	fp, r7, #1
    f33c:	4646      	mov	r6, r8
    f33e:	9507      	str	r5, [sp, #28]
    f340:	e584      	b.n	ee4c <_dtoa_r+0x52c>
    f342:	d104      	bne.n	f34e <_dtoa_r+0xa2e>
    f344:	f019 0f01 	tst.w	r9, #1
    f348:	d001      	beq.n	f34e <_dtoa_r+0xa2e>
    f34a:	e56e      	b.n	ee2a <_dtoa_r+0x50a>
    f34c:	4693      	mov	fp, r2
    f34e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f352:	2b30      	cmp	r3, #48	; 0x30
    f354:	f10b 32ff 	add.w	r2, fp, #4294967295
    f358:	d0f8      	beq.n	f34c <_dtoa_r+0xa2c>
    f35a:	e577      	b.n	ee4c <_dtoa_r+0x52c>
    f35c:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    f360:	f7ff bbdb 	b.w	eb1a <_dtoa_r+0x1fa>
    f364:	9b02      	ldr	r3, [sp, #8]
    f366:	425b      	negs	r3, r3
    f368:	2b00      	cmp	r3, #0
    f36a:	f000 809b 	beq.w	f4a4 <_dtoa_r+0xb84>
    f36e:	4a8b      	ldr	r2, [pc, #556]	; (f59c <_dtoa_r+0xc7c>)
    f370:	f003 010f 	and.w	r1, r3, #15
    f374:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f378:	ed92 7b00 	vldr	d7, [r2]
    f37c:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    f380:	111b      	asrs	r3, r3, #4
    f382:	ee26 4b07 	vmul.f64	d4, d6, d7
    f386:	f000 80e6 	beq.w	f556 <_dtoa_r+0xc36>
    f38a:	4a85      	ldr	r2, [pc, #532]	; (f5a0 <_dtoa_r+0xc80>)
    f38c:	2102      	movs	r1, #2
    f38e:	07d8      	lsls	r0, r3, #31
    f390:	d504      	bpl.n	f39c <_dtoa_r+0xa7c>
    f392:	ed92 7b00 	vldr	d7, [r2]
    f396:	3101      	adds	r1, #1
    f398:	ee24 4b07 	vmul.f64	d4, d4, d7
    f39c:	105b      	asrs	r3, r3, #1
    f39e:	f102 0208 	add.w	r2, r2, #8
    f3a2:	d1f4      	bne.n	f38e <_dtoa_r+0xa6e>
    f3a4:	e5c1      	b.n	ef2a <_dtoa_r+0x60a>
    f3a6:	9908      	ldr	r1, [sp, #32]
    f3a8:	2230      	movs	r2, #48	; 0x30
    f3aa:	700a      	strb	r2, [r1, #0]
    f3ac:	9a02      	ldr	r2, [sp, #8]
    f3ae:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    f3b2:	3201      	adds	r2, #1
    f3b4:	9202      	str	r2, [sp, #8]
    f3b6:	e417      	b.n	ebe8 <_dtoa_r+0x2c8>
    f3b8:	6871      	ldr	r1, [r6, #4]
    f3ba:	4620      	mov	r0, r4
    f3bc:	f7fe fea8 	bl	e110 <_Balloc>
    f3c0:	6933      	ldr	r3, [r6, #16]
    f3c2:	1c9a      	adds	r2, r3, #2
    f3c4:	4680      	mov	r8, r0
    f3c6:	0092      	lsls	r2, r2, #2
    f3c8:	f106 010c 	add.w	r1, r6, #12
    f3cc:	300c      	adds	r0, #12
    f3ce:	f7fa fe69 	bl	a0a4 <memcpy>
    f3d2:	4641      	mov	r1, r8
    f3d4:	2201      	movs	r2, #1
    f3d6:	4620      	mov	r0, r4
    f3d8:	f7ff f84a 	bl	e470 <__lshift>
    f3dc:	4680      	mov	r8, r0
    f3de:	e67e      	b.n	f0de <_dtoa_r+0x7be>
    f3e0:	2a39      	cmp	r2, #57	; 0x39
    f3e2:	f000 8081 	beq.w	f4e8 <_dtoa_r+0xbc8>
    f3e6:	f102 0901 	add.w	r9, r2, #1
    f3ea:	46b2      	mov	sl, r6
    f3ec:	f887 9000 	strb.w	r9, [r7]
    f3f0:	f107 0b01 	add.w	fp, r7, #1
    f3f4:	4646      	mov	r6, r8
    f3f6:	9507      	str	r5, [sp, #28]
    f3f8:	e528      	b.n	ee4c <_dtoa_r+0x52c>
    f3fa:	46b2      	mov	sl, r6
    f3fc:	4691      	mov	r9, r2
    f3fe:	4646      	mov	r6, r8
    f400:	e507      	b.n	ee12 <_dtoa_r+0x4f2>
    f402:	4866      	ldr	r0, [pc, #408]	; (f59c <_dtoa_r+0xc7c>)
    f404:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    f408:	1e4d      	subs	r5, r1, #1
    f40a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    f40e:	ec43 2b17 	vmov	d7, r2, r3
    f412:	ed90 3b00 	vldr	d3, [r0]
    f416:	ee16 3a10 	vmov	r3, s12
    f41a:	ee23 3b07 	vmul.f64	d3, d3, d7
    f41e:	9808      	ldr	r0, [sp, #32]
    f420:	3330      	adds	r3, #48	; 0x30
    f422:	2901      	cmp	r1, #1
    f424:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    f428:	7003      	strb	r3, [r0, #0]
    f42a:	f100 0b01 	add.w	fp, r0, #1
    f42e:	ee34 7b46 	vsub.f64	d7, d4, d6
    f432:	d014      	beq.n	f45e <_dtoa_r+0xb3e>
    f434:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    f438:	9b08      	ldr	r3, [sp, #32]
    f43a:	4419      	add	r1, r3
    f43c:	465b      	mov	r3, fp
    f43e:	ee27 7b05 	vmul.f64	d7, d7, d5
    f442:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    f446:	ee16 2a10 	vmov	r2, s12
    f44a:	3230      	adds	r2, #48	; 0x30
    f44c:	f803 2b01 	strb.w	r2, [r3], #1
    f450:	4299      	cmp	r1, r3
    f452:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    f456:	ee37 7b46 	vsub.f64	d7, d7, d6
    f45a:	d1f0      	bne.n	f43e <_dtoa_r+0xb1e>
    f45c:	44ab      	add	fp, r5
    f45e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f462:	ee33 5b06 	vadd.f64	d5, d3, d6
    f466:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f46e:	d543      	bpl.n	f4f8 <_dtoa_r+0xbd8>
    f470:	9602      	str	r6, [sp, #8]
    f472:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    f476:	f7ff bbaa 	b.w	ebce <_dtoa_r+0x2ae>
    f47a:	2300      	movs	r3, #0
    f47c:	9305      	str	r3, [sp, #20]
    f47e:	461e      	mov	r6, r3
    f480:	e6d6      	b.n	f230 <_dtoa_r+0x910>
    f482:	1bdb      	subs	r3, r3, r7
    f484:	930a      	str	r3, [sp, #40]	; 0x28
    f486:	2300      	movs	r3, #0
    f488:	f7ff bbd9 	b.w	ec3e <_dtoa_r+0x31e>
    f48c:	9a05      	ldr	r2, [sp, #20]
    f48e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f490:	920e      	str	r2, [sp, #56]	; 0x38
    f492:	9a06      	ldr	r2, [sp, #24]
    f494:	920a      	str	r2, [sp, #40]	; 0x28
    f496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    f49a:	f7ff bbd0 	b.w	ec3e <_dtoa_r+0x31e>
    f49e:	2300      	movs	r3, #0
    f4a0:	9307      	str	r3, [sp, #28]
    f4a2:	e6ef      	b.n	f284 <_dtoa_r+0x964>
    f4a4:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    f4a8:	2102      	movs	r1, #2
    f4aa:	e53e      	b.n	ef2a <_dtoa_r+0x60a>
    f4ac:	2f00      	cmp	r7, #0
    f4ae:	f43f aeef 	beq.w	f290 <_dtoa_r+0x970>
    f4b2:	980d      	ldr	r0, [sp, #52]	; 0x34
    f4b4:	2800      	cmp	r0, #0
    f4b6:	f77f af51 	ble.w	f35c <_dtoa_r+0xa3c>
    f4ba:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    f4be:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f4c2:	3101      	adds	r1, #1
    f4c4:	ee06 1a90 	vmov	s13, r1
    f4c8:	ee24 4b05 	vmul.f64	d4, d4, d5
    f4cc:	9b02      	ldr	r3, [sp, #8]
    f4ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f4d2:	1e5e      	subs	r6, r3, #1
    f4d4:	eea4 7b06 	vfma.f64	d7, d4, d6
    f4d8:	ec53 2b17 	vmov	r2, r3, d7
    f4dc:	4601      	mov	r1, r0
    f4de:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    f4e2:	e53d      	b.n	ef60 <_dtoa_r+0x640>
    f4e4:	9507      	str	r5, [sp, #28]
    f4e6:	e5be      	b.n	f066 <_dtoa_r+0x746>
    f4e8:	2239      	movs	r2, #57	; 0x39
    f4ea:	46b2      	mov	sl, r6
    f4ec:	9507      	str	r5, [sp, #28]
    f4ee:	4646      	mov	r6, r8
    f4f0:	703a      	strb	r2, [r7, #0]
    f4f2:	f107 0b01 	add.w	fp, r7, #1
    f4f6:	e49a      	b.n	ee2e <_dtoa_r+0x50e>
    f4f8:	ee36 6b43 	vsub.f64	d6, d6, d3
    f4fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f504:	dc01      	bgt.n	f50a <_dtoa_r+0xbea>
    f506:	e729      	b.n	f35c <_dtoa_r+0xa3c>
    f508:	4693      	mov	fp, r2
    f50a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f50e:	2b30      	cmp	r3, #48	; 0x30
    f510:	f10b 32ff 	add.w	r2, fp, #4294967295
    f514:	d0f8      	beq.n	f508 <_dtoa_r+0xbe8>
    f516:	e57a      	b.n	f00e <_dtoa_r+0x6ee>
    f518:	9602      	str	r6, [sp, #8]
    f51a:	f7ff bb58 	b.w	ebce <_dtoa_r+0x2ae>
    f51e:	9307      	str	r3, [sp, #28]
    f520:	e6b0      	b.n	f284 <_dtoa_r+0x964>
    f522:	f1ba 0f00 	cmp.w	sl, #0
    f526:	f47f adbc 	bne.w	f0a2 <_dtoa_r+0x782>
    f52a:	e698      	b.n	f25e <_dtoa_r+0x93e>
    f52c:	2a39      	cmp	r2, #57	; 0x39
    f52e:	46cb      	mov	fp, r9
    f530:	4691      	mov	r9, r2
    f532:	d0d9      	beq.n	f4e8 <_dtoa_r+0xbc8>
    f534:	f1bb 0f00 	cmp.w	fp, #0
    f538:	f73f aef9 	bgt.w	f32e <_dtoa_r+0xa0e>
    f53c:	e6f9      	b.n	f332 <_dtoa_r+0xa12>
    f53e:	f47f aef8 	bne.w	f332 <_dtoa_r+0xa12>
    f542:	f019 0f01 	tst.w	r9, #1
    f546:	f43f aef4 	beq.w	f332 <_dtoa_r+0xa12>
    f54a:	e6ec      	b.n	f326 <_dtoa_r+0xa06>
    f54c:	9b01      	ldr	r3, [sp, #4]
    f54e:	2b02      	cmp	r3, #2
    f550:	dc08      	bgt.n	f564 <_dtoa_r+0xc44>
    f552:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f554:	e43a      	b.n	edcc <_dtoa_r+0x4ac>
    f556:	2102      	movs	r1, #2
    f558:	e4e7      	b.n	ef2a <_dtoa_r+0x60a>
    f55a:	9b01      	ldr	r3, [sp, #4]
    f55c:	2b02      	cmp	r3, #2
    f55e:	dc01      	bgt.n	f564 <_dtoa_r+0xc44>
    f560:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f562:	e5ae      	b.n	f0c2 <_dtoa_r+0x7a2>
    f564:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    f566:	e651      	b.n	f20c <_dtoa_r+0x8ec>
    f568:	2301      	movs	r3, #1
    f56a:	930e      	str	r3, [sp, #56]	; 0x38
    f56c:	f7ff baa1 	b.w	eab2 <_dtoa_r+0x192>
    f570:	f43f ac0f 	beq.w	ed92 <_dtoa_r+0x472>
    f574:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f578:	e404      	b.n	ed84 <_dtoa_r+0x464>
    f57a:	2500      	movs	r5, #0
    f57c:	6465      	str	r5, [r4, #68]	; 0x44
    f57e:	4629      	mov	r1, r5
    f580:	4620      	mov	r0, r4
    f582:	f7fe fdc5 	bl	e110 <_Balloc>
    f586:	f04f 37ff 	mov.w	r7, #4294967295
    f58a:	2301      	movs	r3, #1
    f58c:	9008      	str	r0, [sp, #32]
    f58e:	46a8      	mov	r8, r5
    f590:	6420      	str	r0, [r4, #64]	; 0x40
    f592:	970d      	str	r7, [sp, #52]	; 0x34
    f594:	9309      	str	r3, [sp, #36]	; 0x24
    f596:	f7ff bac0 	b.w	eb1a <_dtoa_r+0x1fa>
    f59a:	bf00      	nop
    f59c:	20001ca8 	.word	0x20001ca8
    f5a0:	20001d70 	.word	0x20001d70
    f5a4:	00000000 	.word	0x00000000

0000f5a8 <_svfprintf_r>:
    f5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5ac:	ed2d 8b06 	vpush	{d8-d10}
    f5b0:	b0b9      	sub	sp, #228	; 0xe4
    f5b2:	460c      	mov	r4, r1
    f5b4:	9103      	str	r1, [sp, #12]
    f5b6:	4692      	mov	sl, r2
    f5b8:	9309      	str	r3, [sp, #36]	; 0x24
    f5ba:	9005      	str	r0, [sp, #20]
    f5bc:	f7fe fd4a 	bl	e054 <_localeconv_r>
    f5c0:	6803      	ldr	r3, [r0, #0]
    f5c2:	9310      	str	r3, [sp, #64]	; 0x40
    f5c4:	4618      	mov	r0, r3
    f5c6:	f7fe f9bb 	bl	d940 <strlen>
    f5ca:	89a3      	ldrh	r3, [r4, #12]
    f5cc:	900f      	str	r0, [sp, #60]	; 0x3c
    f5ce:	0619      	lsls	r1, r3, #24
    f5d0:	d503      	bpl.n	f5da <_svfprintf_r+0x32>
    f5d2:	6923      	ldr	r3, [r4, #16]
    f5d4:	2b00      	cmp	r3, #0
    f5d6:	f001 807d 	beq.w	106d4 <_svfprintf_r+0x112c>
    f5da:	2300      	movs	r3, #0
    f5dc:	ed9f 8ba4 	vldr	d8, [pc, #656]	; f870 <_svfprintf_r+0x2c8>
    f5e0:	ed9f 9ba5 	vldr	d9, [pc, #660]	; f878 <_svfprintf_r+0x2d0>
    f5e4:	930d      	str	r3, [sp, #52]	; 0x34
    f5e6:	931d      	str	r3, [sp, #116]	; 0x74
    f5e8:	931c      	str	r3, [sp, #112]	; 0x70
    f5ea:	9311      	str	r3, [sp, #68]	; 0x44
    f5ec:	9306      	str	r3, [sp, #24]
    f5ee:	ab28      	add	r3, sp, #160	; 0xa0
    f5f0:	931b      	str	r3, [sp, #108]	; 0x6c
    f5f2:	4699      	mov	r9, r3
    f5f4:	f89a 3000 	ldrb.w	r3, [sl]
    f5f8:	4654      	mov	r4, sl
    f5fa:	b1eb      	cbz	r3, f638 <_svfprintf_r+0x90>
    f5fc:	2b25      	cmp	r3, #37	; 0x25
    f5fe:	d102      	bne.n	f606 <_svfprintf_r+0x5e>
    f600:	e01a      	b.n	f638 <_svfprintf_r+0x90>
    f602:	2b25      	cmp	r3, #37	; 0x25
    f604:	d003      	beq.n	f60e <_svfprintf_r+0x66>
    f606:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    f60a:	2b00      	cmp	r3, #0
    f60c:	d1f9      	bne.n	f602 <_svfprintf_r+0x5a>
    f60e:	ebca 0504 	rsb	r5, sl, r4
    f612:	b18d      	cbz	r5, f638 <_svfprintf_r+0x90>
    f614:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f616:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    f618:	f8c9 a000 	str.w	sl, [r9]
    f61c:	3301      	adds	r3, #1
    f61e:	442a      	add	r2, r5
    f620:	2b07      	cmp	r3, #7
    f622:	f8c9 5004 	str.w	r5, [r9, #4]
    f626:	921d      	str	r2, [sp, #116]	; 0x74
    f628:	931c      	str	r3, [sp, #112]	; 0x70
    f62a:	f300 80a3 	bgt.w	f774 <_svfprintf_r+0x1cc>
    f62e:	f109 0908 	add.w	r9, r9, #8
    f632:	9b06      	ldr	r3, [sp, #24]
    f634:	442b      	add	r3, r5
    f636:	9306      	str	r3, [sp, #24]
    f638:	7823      	ldrb	r3, [r4, #0]
    f63a:	2b00      	cmp	r3, #0
    f63c:	f000 80a3 	beq.w	f786 <_svfprintf_r+0x1de>
    f640:	2300      	movs	r3, #0
    f642:	461a      	mov	r2, r3
    f644:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    f648:	4619      	mov	r1, r3
    f64a:	9307      	str	r3, [sp, #28]
    f64c:	469b      	mov	fp, r3
    f64e:	f04f 38ff 	mov.w	r8, #4294967295
    f652:	7863      	ldrb	r3, [r4, #1]
    f654:	f104 0a01 	add.w	sl, r4, #1
    f658:	4645      	mov	r5, r8
    f65a:	f10a 0a01 	add.w	sl, sl, #1
    f65e:	f1a3 0020 	sub.w	r0, r3, #32
    f662:	2858      	cmp	r0, #88	; 0x58
    f664:	f200 83f8 	bhi.w	fe58 <_svfprintf_r+0x8b0>
    f668:	e8df f010 	tbh	[pc, r0, lsl #1]
    f66c:	03f60363 	.word	0x03f60363
    f670:	036b03f6 	.word	0x036b03f6
    f674:	03f603f6 	.word	0x03f603f6
    f678:	03f603f6 	.word	0x03f603f6
    f67c:	03f603f6 	.word	0x03f603f6
    f680:	037e0370 	.word	0x037e0370
    f684:	005d03f6 	.word	0x005d03f6
    f688:	03f600df 	.word	0x03f600df
    f68c:	010c00fb 	.word	0x010c00fb
    f690:	010c010c 	.word	0x010c010c
    f694:	010c010c 	.word	0x010c010c
    f698:	010c010c 	.word	0x010c010c
    f69c:	010c010c 	.word	0x010c010c
    f6a0:	03f603f6 	.word	0x03f603f6
    f6a4:	03f603f6 	.word	0x03f603f6
    f6a8:	03f603f6 	.word	0x03f603f6
    f6ac:	03f603f6 	.word	0x03f603f6
    f6b0:	03f603f6 	.word	0x03f603f6
    f6b4:	015e011c 	.word	0x015e011c
    f6b8:	015e03f6 	.word	0x015e03f6
    f6bc:	03f603f6 	.word	0x03f603f6
    f6c0:	03f603f6 	.word	0x03f603f6
    f6c4:	03f602a1 	.word	0x03f602a1
    f6c8:	02a603f6 	.word	0x02a603f6
    f6cc:	03f603f6 	.word	0x03f603f6
    f6d0:	03f603f6 	.word	0x03f603f6
    f6d4:	02d803f6 	.word	0x02d803f6
    f6d8:	03f603f6 	.word	0x03f603f6
    f6dc:	03f60305 	.word	0x03f60305
    f6e0:	03f603f6 	.word	0x03f603f6
    f6e4:	03f603f6 	.word	0x03f603f6
    f6e8:	03f603f6 	.word	0x03f603f6
    f6ec:	03f603f6 	.word	0x03f603f6
    f6f0:	034303f6 	.word	0x034303f6
    f6f4:	015e0356 	.word	0x015e0356
    f6f8:	015e015e 	.word	0x015e015e
    f6fc:	0356035e 	.word	0x0356035e
    f700:	03f603f6 	.word	0x03f603f6
    f704:	03f603a4 	.word	0x03f603a4
    f708:	00a203b1 	.word	0x00a203b1
    f70c:	03c30062 	.word	0x03c30062
    f710:	03c803f6 	.word	0x03c803f6
    f714:	038303f6 	.word	0x038303f6
    f718:	03f603f6 	.word	0x03f603f6
    f71c:	038b      	.short	0x038b
    f71e:	9807      	ldr	r0, [sp, #28]
    f720:	9309      	str	r3, [sp, #36]	; 0x24
    f722:	4240      	negs	r0, r0
    f724:	9007      	str	r0, [sp, #28]
    f726:	f04b 0b04 	orr.w	fp, fp, #4
    f72a:	f89a 3000 	ldrb.w	r3, [sl]
    f72e:	e794      	b.n	f65a <_svfprintf_r+0xb2>
    f730:	46a8      	mov	r8, r5
    f732:	9809      	ldr	r0, [sp, #36]	; 0x24
    f734:	2100      	movs	r1, #0
    f736:	2330      	movs	r3, #48	; 0x30
    f738:	2278      	movs	r2, #120	; 0x78
    f73a:	4588      	cmp	r8, r1
    f73c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    f740:	6804      	ldr	r4, [r0, #0]
    f742:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    f746:	f100 0704 	add.w	r7, r0, #4
    f74a:	f04f 0500 	mov.w	r5, #0
    f74e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    f752:	f04b 0302 	orr.w	r3, fp, #2
    f756:	f2c0 839c 	blt.w	fe92 <_svfprintf_r+0x8ea>
    f75a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    f75e:	f043 0b02 	orr.w	fp, r3, #2
    f762:	ea54 0305 	orrs.w	r3, r4, r5
    f766:	9709      	str	r7, [sp, #36]	; 0x24
    f768:	f000 8369 	beq.w	fe3e <_svfprintf_r+0x896>
    f76c:	460f      	mov	r7, r1
    f76e:	920c      	str	r2, [sp, #48]	; 0x30
    f770:	4843      	ldr	r0, [pc, #268]	; (f880 <_svfprintf_r+0x2d8>)
    f772:	e2ae      	b.n	fcd2 <_svfprintf_r+0x72a>
    f774:	aa1b      	add	r2, sp, #108	; 0x6c
    f776:	9903      	ldr	r1, [sp, #12]
    f778:	9805      	ldr	r0, [sp, #20]
    f77a:	f001 f9cd 	bl	10b18 <__ssprint_r>
    f77e:	b948      	cbnz	r0, f794 <_svfprintf_r+0x1ec>
    f780:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    f784:	e755      	b.n	f632 <_svfprintf_r+0x8a>
    f786:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f788:	b123      	cbz	r3, f794 <_svfprintf_r+0x1ec>
    f78a:	9805      	ldr	r0, [sp, #20]
    f78c:	9903      	ldr	r1, [sp, #12]
    f78e:	aa1b      	add	r2, sp, #108	; 0x6c
    f790:	f001 f9c2 	bl	10b18 <__ssprint_r>
    f794:	9b03      	ldr	r3, [sp, #12]
    f796:	899b      	ldrh	r3, [r3, #12]
    f798:	f013 0f40 	tst.w	r3, #64	; 0x40
    f79c:	9b06      	ldr	r3, [sp, #24]
    f79e:	bf18      	it	ne
    f7a0:	f04f 33ff 	movne.w	r3, #4294967295
    f7a4:	4618      	mov	r0, r3
    f7a6:	b039      	add	sp, #228	; 0xe4
    f7a8:	ecbd 8b06 	vpop	{d8-d10}
    f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7b0:	930c      	str	r3, [sp, #48]	; 0x30
    f7b2:	46a8      	mov	r8, r5
    f7b4:	2a00      	cmp	r2, #0
    f7b6:	f041 819a 	bne.w	10aee <_svfprintf_r+0x1546>
    f7ba:	f01b 0320 	ands.w	r3, fp, #32
    f7be:	f000 8206 	beq.w	fbce <_svfprintf_r+0x626>
    f7c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f7c4:	3707      	adds	r7, #7
    f7c6:	f027 0307 	bic.w	r3, r7, #7
    f7ca:	2700      	movs	r7, #0
    f7cc:	f103 0208 	add.w	r2, r3, #8
    f7d0:	45b8      	cmp	r8, r7
    f7d2:	9209      	str	r2, [sp, #36]	; 0x24
    f7d4:	e9d3 4500 	ldrd	r4, r5, [r3]
    f7d8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    f7dc:	f2c0 865e 	blt.w	1049c <_svfprintf_r+0xef4>
    f7e0:	ea54 0305 	orrs.w	r3, r4, r5
    f7e4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f7e8:	f000 834b 	beq.w	fe82 <_svfprintf_r+0x8da>
    f7ec:	ae28      	add	r6, sp, #160	; 0xa0
    f7ee:	08e2      	lsrs	r2, r4, #3
    f7f0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f7f4:	08e9      	lsrs	r1, r5, #3
    f7f6:	f004 0307 	and.w	r3, r4, #7
    f7fa:	460d      	mov	r5, r1
    f7fc:	4614      	mov	r4, r2
    f7fe:	3330      	adds	r3, #48	; 0x30
    f800:	ea54 0205 	orrs.w	r2, r4, r5
    f804:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f808:	d1f1      	bne.n	f7ee <_svfprintf_r+0x246>
    f80a:	f01b 0f01 	tst.w	fp, #1
    f80e:	f000 8227 	beq.w	fc60 <_svfprintf_r+0x6b8>
    f812:	2b30      	cmp	r3, #48	; 0x30
    f814:	f000 8224 	beq.w	fc60 <_svfprintf_r+0x6b8>
    f818:	2230      	movs	r2, #48	; 0x30
    f81a:	1e73      	subs	r3, r6, #1
    f81c:	f806 2c01 	strb.w	r2, [r6, #-1]
    f820:	aa28      	add	r2, sp, #160	; 0xa0
    f822:	1ad2      	subs	r2, r2, r3
    f824:	9208      	str	r2, [sp, #32]
    f826:	461e      	mov	r6, r3
    f828:	e21d      	b.n	fc66 <_svfprintf_r+0x6be>
    f82a:	f89a 3000 	ldrb.w	r3, [sl]
    f82e:	2b2a      	cmp	r3, #42	; 0x2a
    f830:	f10a 0401 	add.w	r4, sl, #1
    f834:	f001 812f 	beq.w	10a96 <_svfprintf_r+0x14ee>
    f838:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    f83c:	2809      	cmp	r0, #9
    f83e:	bf98      	it	ls
    f840:	2500      	movls	r5, #0
    f842:	f201 80d5 	bhi.w	109f0 <_svfprintf_r+0x1448>
    f846:	f814 3b01 	ldrb.w	r3, [r4], #1
    f84a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    f84e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    f852:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    f856:	2809      	cmp	r0, #9
    f858:	d9f5      	bls.n	f846 <_svfprintf_r+0x29e>
    f85a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    f85e:	46a2      	mov	sl, r4
    f860:	e6fd      	b.n	f65e <_svfprintf_r+0xb6>
    f862:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    f866:	f89a 3000 	ldrb.w	r3, [sl]
    f86a:	e6f6      	b.n	f65a <_svfprintf_r+0xb2>
    f86c:	f3af 8000 	nop.w
	...
    f878:	ffffffff 	.word	0xffffffff
    f87c:	7fefffff 	.word	0x7fefffff
    f880:	20001de8 	.word	0x20001de8
    f884:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    f888:	2300      	movs	r3, #0
    f88a:	461c      	mov	r4, r3
    f88c:	f81a 3b01 	ldrb.w	r3, [sl], #1
    f890:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    f894:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f898:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    f89c:	2809      	cmp	r0, #9
    f89e:	d9f5      	bls.n	f88c <_svfprintf_r+0x2e4>
    f8a0:	9407      	str	r4, [sp, #28]
    f8a2:	e6dc      	b.n	f65e <_svfprintf_r+0xb6>
    f8a4:	930c      	str	r3, [sp, #48]	; 0x30
    f8a6:	46a8      	mov	r8, r5
    f8a8:	2a00      	cmp	r2, #0
    f8aa:	f041 812c 	bne.w	10b06 <_svfprintf_r+0x155e>
    f8ae:	f04b 0b10 	orr.w	fp, fp, #16
    f8b2:	f01b 0f20 	tst.w	fp, #32
    f8b6:	f000 8503 	beq.w	102c0 <_svfprintf_r+0xd18>
    f8ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f8bc:	3707      	adds	r7, #7
    f8be:	f027 0707 	bic.w	r7, r7, #7
    f8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
    f8c6:	f107 0108 	add.w	r1, r7, #8
    f8ca:	9109      	str	r1, [sp, #36]	; 0x24
    f8cc:	4614      	mov	r4, r2
    f8ce:	461d      	mov	r5, r3
    f8d0:	2a00      	cmp	r2, #0
    f8d2:	f173 0300 	sbcs.w	r3, r3, #0
    f8d6:	f2c0 8537 	blt.w	10348 <_svfprintf_r+0xda0>
    f8da:	f1b8 0f00 	cmp.w	r8, #0
    f8de:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    f8e2:	f2c0 81b5 	blt.w	fc50 <_svfprintf_r+0x6a8>
    f8e6:	ea54 0305 	orrs.w	r3, r4, r5
    f8ea:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f8ee:	f000 83f6 	beq.w	100de <_svfprintf_r+0xb36>
    f8f2:	2d00      	cmp	r5, #0
    f8f4:	bf08      	it	eq
    f8f6:	2c0a      	cmpeq	r4, #10
    f8f8:	f0c0 81ae 	bcc.w	fc58 <_svfprintf_r+0x6b0>
    f8fc:	ae28      	add	r6, sp, #160	; 0xa0
    f8fe:	4620      	mov	r0, r4
    f900:	4629      	mov	r1, r5
    f902:	220a      	movs	r2, #10
    f904:	2300      	movs	r3, #0
    f906:	f001 f987 	bl	10c18 <__aeabi_uldivmod>
    f90a:	3230      	adds	r2, #48	; 0x30
    f90c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    f910:	4620      	mov	r0, r4
    f912:	4629      	mov	r1, r5
    f914:	2300      	movs	r3, #0
    f916:	220a      	movs	r2, #10
    f918:	f001 f97e 	bl	10c18 <__aeabi_uldivmod>
    f91c:	4604      	mov	r4, r0
    f91e:	460d      	mov	r5, r1
    f920:	ea54 0305 	orrs.w	r3, r4, r5
    f924:	d1eb      	bne.n	f8fe <_svfprintf_r+0x356>
    f926:	e19b      	b.n	fc60 <_svfprintf_r+0x6b8>
    f928:	930c      	str	r3, [sp, #48]	; 0x30
    f92a:	46a8      	mov	r8, r5
    f92c:	2a00      	cmp	r2, #0
    f92e:	f041 80e6 	bne.w	10afe <_svfprintf_r+0x1556>
    f932:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f934:	f01b 0f08 	tst.w	fp, #8
    f938:	f107 0707 	add.w	r7, r7, #7
    f93c:	f000 8640 	beq.w	105c0 <_svfprintf_r+0x1018>
    f940:	f027 0307 	bic.w	r3, r7, #7
    f944:	ed93 8b00 	vldr	d8, [r3]
    f948:	f103 0208 	add.w	r2, r3, #8
    f94c:	9209      	str	r2, [sp, #36]	; 0x24
    f94e:	eeb0 7bc8 	vabs.f64	d7, d8
    f952:	eeb4 7b49 	vcmp.f64	d7, d9
    f956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f95a:	f340 85bc 	ble.w	104d6 <_svfprintf_r+0xf2e>
    f95e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    f962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f966:	f100 87ca 	bmi.w	108fe <_svfprintf_r+0x1356>
    f96a:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    f96e:	4ea7      	ldr	r6, [pc, #668]	; (fc0c <_svfprintf_r+0x664>)
    f970:	4ba7      	ldr	r3, [pc, #668]	; (fc10 <_svfprintf_r+0x668>)
    f972:	990c      	ldr	r1, [sp, #48]	; 0x30
    f974:	2203      	movs	r2, #3
    f976:	f04f 0800 	mov.w	r8, #0
    f97a:	9204      	str	r2, [sp, #16]
    f97c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f980:	2947      	cmp	r1, #71	; 0x47
    f982:	bfd8      	it	le
    f984:	461e      	movle	r6, r3
    f986:	9208      	str	r2, [sp, #32]
    f988:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    f98c:	b117      	cbz	r7, f994 <_svfprintf_r+0x3ec>
    f98e:	9b04      	ldr	r3, [sp, #16]
    f990:	3301      	adds	r3, #1
    f992:	9304      	str	r3, [sp, #16]
    f994:	f01b 0302 	ands.w	r3, fp, #2
    f998:	930a      	str	r3, [sp, #40]	; 0x28
    f99a:	d002      	beq.n	f9a2 <_svfprintf_r+0x3fa>
    f99c:	9b04      	ldr	r3, [sp, #16]
    f99e:	3302      	adds	r3, #2
    f9a0:	9304      	str	r3, [sp, #16]
    f9a2:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    f9a6:	930b      	str	r3, [sp, #44]	; 0x2c
    f9a8:	f040 8280 	bne.w	feac <_svfprintf_r+0x904>
    f9ac:	9b07      	ldr	r3, [sp, #28]
    f9ae:	9a04      	ldr	r2, [sp, #16]
    f9b0:	1a9c      	subs	r4, r3, r2
    f9b2:	2c00      	cmp	r4, #0
    f9b4:	f340 827a 	ble.w	feac <_svfprintf_r+0x904>
    f9b8:	2c10      	cmp	r4, #16
    f9ba:	991d      	ldr	r1, [sp, #116]	; 0x74
    f9bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    f9be:	4f95      	ldr	r7, [pc, #596]	; (fc14 <_svfprintf_r+0x66c>)
    f9c0:	dd23      	ble.n	fa0a <_svfprintf_r+0x462>
    f9c2:	4648      	mov	r0, r9
    f9c4:	2510      	movs	r5, #16
    f9c6:	46c1      	mov	r9, r8
    f9c8:	46b0      	mov	r8, r6
    f9ca:	9e05      	ldr	r6, [sp, #20]
    f9cc:	e004      	b.n	f9d8 <_svfprintf_r+0x430>
    f9ce:	3c10      	subs	r4, #16
    f9d0:	2c10      	cmp	r4, #16
    f9d2:	f100 0008 	add.w	r0, r0, #8
    f9d6:	dd15      	ble.n	fa04 <_svfprintf_r+0x45c>
    f9d8:	3201      	adds	r2, #1
    f9da:	3110      	adds	r1, #16
    f9dc:	2a07      	cmp	r2, #7
    f9de:	911d      	str	r1, [sp, #116]	; 0x74
    f9e0:	921c      	str	r2, [sp, #112]	; 0x70
    f9e2:	6007      	str	r7, [r0, #0]
    f9e4:	6045      	str	r5, [r0, #4]
    f9e6:	ddf2      	ble.n	f9ce <_svfprintf_r+0x426>
    f9e8:	aa1b      	add	r2, sp, #108	; 0x6c
    f9ea:	9903      	ldr	r1, [sp, #12]
    f9ec:	4630      	mov	r0, r6
    f9ee:	f001 f893 	bl	10b18 <__ssprint_r>
    f9f2:	2800      	cmp	r0, #0
    f9f4:	f47f aece 	bne.w	f794 <_svfprintf_r+0x1ec>
    f9f8:	3c10      	subs	r4, #16
    f9fa:	2c10      	cmp	r4, #16
    f9fc:	991d      	ldr	r1, [sp, #116]	; 0x74
    f9fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fa00:	a828      	add	r0, sp, #160	; 0xa0
    fa02:	dce9      	bgt.n	f9d8 <_svfprintf_r+0x430>
    fa04:	4646      	mov	r6, r8
    fa06:	46c8      	mov	r8, r9
    fa08:	4681      	mov	r9, r0
    fa0a:	3201      	adds	r2, #1
    fa0c:	1863      	adds	r3, r4, r1
    fa0e:	2a07      	cmp	r2, #7
    fa10:	931d      	str	r3, [sp, #116]	; 0x74
    fa12:	921c      	str	r2, [sp, #112]	; 0x70
    fa14:	f8c9 7000 	str.w	r7, [r9]
    fa18:	f8c9 4004 	str.w	r4, [r9, #4]
    fa1c:	f300 83e2 	bgt.w	101e4 <_svfprintf_r+0xc3c>
    fa20:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    fa24:	f109 0908 	add.w	r9, r9, #8
    fa28:	b177      	cbz	r7, fa48 <_svfprintf_r+0x4a0>
    fa2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fa2c:	3201      	adds	r2, #1
    fa2e:	3301      	adds	r3, #1
    fa30:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    fa34:	2101      	movs	r1, #1
    fa36:	2a07      	cmp	r2, #7
    fa38:	931d      	str	r3, [sp, #116]	; 0x74
    fa3a:	921c      	str	r2, [sp, #112]	; 0x70
    fa3c:	e889 0003 	stmia.w	r9, {r0, r1}
    fa40:	f300 835f 	bgt.w	10102 <_svfprintf_r+0xb5a>
    fa44:	f109 0908 	add.w	r9, r9, #8
    fa48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa4a:	b16a      	cbz	r2, fa68 <_svfprintf_r+0x4c0>
    fa4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fa4e:	3201      	adds	r2, #1
    fa50:	3302      	adds	r3, #2
    fa52:	a814      	add	r0, sp, #80	; 0x50
    fa54:	2102      	movs	r1, #2
    fa56:	2a07      	cmp	r2, #7
    fa58:	931d      	str	r3, [sp, #116]	; 0x74
    fa5a:	921c      	str	r2, [sp, #112]	; 0x70
    fa5c:	e889 0003 	stmia.w	r9, {r0, r1}
    fa60:	f300 835b 	bgt.w	1011a <_svfprintf_r+0xb72>
    fa64:	f109 0908 	add.w	r9, r9, #8
    fa68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fa6a:	2a80      	cmp	r2, #128	; 0x80
    fa6c:	f000 827e 	beq.w	ff6c <_svfprintf_r+0x9c4>
    fa70:	9a08      	ldr	r2, [sp, #32]
    fa72:	ebc2 0408 	rsb	r4, r2, r8
    fa76:	2c00      	cmp	r4, #0
    fa78:	dd34      	ble.n	fae4 <_svfprintf_r+0x53c>
    fa7a:	2c10      	cmp	r4, #16
    fa7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fa7e:	4f66      	ldr	r7, [pc, #408]	; (fc18 <_svfprintf_r+0x670>)
    fa80:	dd23      	ble.n	faca <_svfprintf_r+0x522>
    fa82:	4649      	mov	r1, r9
    fa84:	f04f 0810 	mov.w	r8, #16
    fa88:	46b1      	mov	r9, r6
    fa8a:	9d05      	ldr	r5, [sp, #20]
    fa8c:	9e03      	ldr	r6, [sp, #12]
    fa8e:	e004      	b.n	fa9a <_svfprintf_r+0x4f2>
    fa90:	3c10      	subs	r4, #16
    fa92:	2c10      	cmp	r4, #16
    fa94:	f101 0108 	add.w	r1, r1, #8
    fa98:	dd15      	ble.n	fac6 <_svfprintf_r+0x51e>
    fa9a:	3201      	adds	r2, #1
    fa9c:	3310      	adds	r3, #16
    fa9e:	2a07      	cmp	r2, #7
    faa0:	931d      	str	r3, [sp, #116]	; 0x74
    faa2:	921c      	str	r2, [sp, #112]	; 0x70
    faa4:	e881 0180 	stmia.w	r1, {r7, r8}
    faa8:	ddf2      	ble.n	fa90 <_svfprintf_r+0x4e8>
    faaa:	aa1b      	add	r2, sp, #108	; 0x6c
    faac:	4631      	mov	r1, r6
    faae:	4628      	mov	r0, r5
    fab0:	f001 f832 	bl	10b18 <__ssprint_r>
    fab4:	2800      	cmp	r0, #0
    fab6:	f47f ae6d 	bne.w	f794 <_svfprintf_r+0x1ec>
    faba:	3c10      	subs	r4, #16
    fabc:	2c10      	cmp	r4, #16
    fabe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fac2:	a928      	add	r1, sp, #160	; 0xa0
    fac4:	dce9      	bgt.n	fa9a <_svfprintf_r+0x4f2>
    fac6:	464e      	mov	r6, r9
    fac8:	4689      	mov	r9, r1
    faca:	3201      	adds	r2, #1
    facc:	4423      	add	r3, r4
    face:	2a07      	cmp	r2, #7
    fad0:	931d      	str	r3, [sp, #116]	; 0x74
    fad2:	921c      	str	r2, [sp, #112]	; 0x70
    fad4:	f8c9 7000 	str.w	r7, [r9]
    fad8:	f8c9 4004 	str.w	r4, [r9, #4]
    fadc:	f300 8305 	bgt.w	100ea <_svfprintf_r+0xb42>
    fae0:	f109 0908 	add.w	r9, r9, #8
    fae4:	f41b 7f80 	tst.w	fp, #256	; 0x100
    fae8:	f040 81e2 	bne.w	feb0 <_svfprintf_r+0x908>
    faec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    faee:	9808      	ldr	r0, [sp, #32]
    faf0:	f8c9 6000 	str.w	r6, [r9]
    faf4:	3201      	adds	r2, #1
    faf6:	4403      	add	r3, r0
    faf8:	2a07      	cmp	r2, #7
    fafa:	931d      	str	r3, [sp, #116]	; 0x74
    fafc:	f8c9 0004 	str.w	r0, [r9, #4]
    fb00:	921c      	str	r2, [sp, #112]	; 0x70
    fb02:	f300 82c2 	bgt.w	1008a <_svfprintf_r+0xae2>
    fb06:	f109 0908 	add.w	r9, r9, #8
    fb0a:	f01b 0f04 	tst.w	fp, #4
    fb0e:	d03e      	beq.n	fb8e <_svfprintf_r+0x5e6>
    fb10:	9a07      	ldr	r2, [sp, #28]
    fb12:	9904      	ldr	r1, [sp, #16]
    fb14:	1a54      	subs	r4, r2, r1
    fb16:	2c00      	cmp	r4, #0
    fb18:	dd39      	ble.n	fb8e <_svfprintf_r+0x5e6>
    fb1a:	2c10      	cmp	r4, #16
    fb1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fb1e:	4f3d      	ldr	r7, [pc, #244]	; (fc14 <_svfprintf_r+0x66c>)
    fb20:	dd22      	ble.n	fb68 <_svfprintf_r+0x5c0>
    fb22:	2510      	movs	r5, #16
    fb24:	9e05      	ldr	r6, [sp, #20]
    fb26:	f8dd 800c 	ldr.w	r8, [sp, #12]
    fb2a:	e004      	b.n	fb36 <_svfprintf_r+0x58e>
    fb2c:	3c10      	subs	r4, #16
    fb2e:	2c10      	cmp	r4, #16
    fb30:	f109 0908 	add.w	r9, r9, #8
    fb34:	dd18      	ble.n	fb68 <_svfprintf_r+0x5c0>
    fb36:	3201      	adds	r2, #1
    fb38:	3310      	adds	r3, #16
    fb3a:	2a07      	cmp	r2, #7
    fb3c:	931d      	str	r3, [sp, #116]	; 0x74
    fb3e:	921c      	str	r2, [sp, #112]	; 0x70
    fb40:	f8c9 7000 	str.w	r7, [r9]
    fb44:	f8c9 5004 	str.w	r5, [r9, #4]
    fb48:	ddf0      	ble.n	fb2c <_svfprintf_r+0x584>
    fb4a:	aa1b      	add	r2, sp, #108	; 0x6c
    fb4c:	4641      	mov	r1, r8
    fb4e:	4630      	mov	r0, r6
    fb50:	f000 ffe2 	bl	10b18 <__ssprint_r>
    fb54:	2800      	cmp	r0, #0
    fb56:	f47f ae1d 	bne.w	f794 <_svfprintf_r+0x1ec>
    fb5a:	3c10      	subs	r4, #16
    fb5c:	2c10      	cmp	r4, #16
    fb5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fb60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fb62:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    fb66:	dce6      	bgt.n	fb36 <_svfprintf_r+0x58e>
    fb68:	3201      	adds	r2, #1
    fb6a:	4423      	add	r3, r4
    fb6c:	2a07      	cmp	r2, #7
    fb6e:	931d      	str	r3, [sp, #116]	; 0x74
    fb70:	921c      	str	r2, [sp, #112]	; 0x70
    fb72:	f8c9 7000 	str.w	r7, [r9]
    fb76:	f8c9 4004 	str.w	r4, [r9, #4]
    fb7a:	dd08      	ble.n	fb8e <_svfprintf_r+0x5e6>
    fb7c:	aa1b      	add	r2, sp, #108	; 0x6c
    fb7e:	9903      	ldr	r1, [sp, #12]
    fb80:	9805      	ldr	r0, [sp, #20]
    fb82:	f000 ffc9 	bl	10b18 <__ssprint_r>
    fb86:	2800      	cmp	r0, #0
    fb88:	f47f ae04 	bne.w	f794 <_svfprintf_r+0x1ec>
    fb8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fb8e:	9a06      	ldr	r2, [sp, #24]
    fb90:	9907      	ldr	r1, [sp, #28]
    fb92:	9804      	ldr	r0, [sp, #16]
    fb94:	4281      	cmp	r1, r0
    fb96:	bfac      	ite	ge
    fb98:	1852      	addge	r2, r2, r1
    fb9a:	1812      	addlt	r2, r2, r0
    fb9c:	9206      	str	r2, [sp, #24]
    fb9e:	2b00      	cmp	r3, #0
    fba0:	f040 827f 	bne.w	100a2 <_svfprintf_r+0xafa>
    fba4:	2300      	movs	r3, #0
    fba6:	931c      	str	r3, [sp, #112]	; 0x70
    fba8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    fbac:	e522      	b.n	f5f4 <_svfprintf_r+0x4c>
    fbae:	f04b 0b08 	orr.w	fp, fp, #8
    fbb2:	f89a 3000 	ldrb.w	r3, [sl]
    fbb6:	e550      	b.n	f65a <_svfprintf_r+0xb2>
    fbb8:	930c      	str	r3, [sp, #48]	; 0x30
    fbba:	46a8      	mov	r8, r5
    fbbc:	2a00      	cmp	r2, #0
    fbbe:	f040 879a 	bne.w	10af6 <_svfprintf_r+0x154e>
    fbc2:	f04b 0b10 	orr.w	fp, fp, #16
    fbc6:	f01b 0320 	ands.w	r3, fp, #32
    fbca:	f47f adfa 	bne.w	f7c2 <_svfprintf_r+0x21a>
    fbce:	f01b 0210 	ands.w	r2, fp, #16
    fbd2:	f040 8391 	bne.w	102f8 <_svfprintf_r+0xd50>
    fbd6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    fbda:	f000 838d 	beq.w	102f8 <_svfprintf_r+0xd50>
    fbde:	9909      	ldr	r1, [sp, #36]	; 0x24
    fbe0:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    fbe4:	460b      	mov	r3, r1
    fbe6:	f1b8 0f00 	cmp.w	r8, #0
    fbea:	f103 0304 	add.w	r3, r3, #4
    fbee:	880c      	ldrh	r4, [r1, #0]
    fbf0:	f04f 0500 	mov.w	r5, #0
    fbf4:	f2c0 85ab 	blt.w	1074e <_svfprintf_r+0x11a6>
    fbf8:	ea54 0105 	orrs.w	r1, r4, r5
    fbfc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    fc00:	9309      	str	r3, [sp, #36]	; 0x24
    fc02:	f000 813e 	beq.w	fe82 <_svfprintf_r+0x8da>
    fc06:	4617      	mov	r7, r2
    fc08:	e5f0      	b.n	f7ec <_svfprintf_r+0x244>
    fc0a:	bf00      	nop
    fc0c:	20001dc8 	.word	0x20001dc8
    fc10:	20001dc4 	.word	0x20001dc4
    fc14:	20001e04 	.word	0x20001e04
    fc18:	20001db4 	.word	0x20001db4
    fc1c:	930c      	str	r3, [sp, #48]	; 0x30
    fc1e:	46a8      	mov	r8, r5
    fc20:	2a00      	cmp	r2, #0
    fc22:	f040 8759 	bne.w	10ad8 <_svfprintf_r+0x1530>
    fc26:	f04b 0b10 	orr.w	fp, fp, #16
    fc2a:	f01b 0320 	ands.w	r3, fp, #32
    fc2e:	f000 82e7 	beq.w	10200 <_svfprintf_r+0xc58>
    fc32:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fc34:	3707      	adds	r7, #7
    fc36:	f027 0307 	bic.w	r3, r7, #7
    fc3a:	2700      	movs	r7, #0
    fc3c:	f103 0208 	add.w	r2, r3, #8
    fc40:	45b8      	cmp	r8, r7
    fc42:	9209      	str	r2, [sp, #36]	; 0x24
    fc44:	e9d3 4500 	ldrd	r4, r5, [r3]
    fc48:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    fc4c:	f6bf ae4b 	bge.w	f8e6 <_svfprintf_r+0x33e>
    fc50:	ea54 0305 	orrs.w	r3, r4, r5
    fc54:	f47f ae4d 	bne.w	f8f2 <_svfprintf_r+0x34a>
    fc58:	ae38      	add	r6, sp, #224	; 0xe0
    fc5a:	3430      	adds	r4, #48	; 0x30
    fc5c:	f806 4d41 	strb.w	r4, [r6, #-65]!
    fc60:	ab28      	add	r3, sp, #160	; 0xa0
    fc62:	1b9b      	subs	r3, r3, r6
    fc64:	9308      	str	r3, [sp, #32]
    fc66:	9b08      	ldr	r3, [sp, #32]
    fc68:	4543      	cmp	r3, r8
    fc6a:	bfb8      	it	lt
    fc6c:	4643      	movlt	r3, r8
    fc6e:	9304      	str	r3, [sp, #16]
    fc70:	2300      	movs	r3, #0
    fc72:	930e      	str	r3, [sp, #56]	; 0x38
    fc74:	e68a      	b.n	f98c <_svfprintf_r+0x3e4>
    fc76:	930c      	str	r3, [sp, #48]	; 0x30
    fc78:	46a8      	mov	r8, r5
    fc7a:	2a00      	cmp	r2, #0
    fc7c:	f040 8728 	bne.w	10ad0 <_svfprintf_r+0x1528>
    fc80:	f01b 0f20 	tst.w	fp, #32
    fc84:	48c2      	ldr	r0, [pc, #776]	; (ff90 <_svfprintf_r+0x9e8>)
    fc86:	f000 8086 	beq.w	fd96 <_svfprintf_r+0x7ee>
    fc8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fc8c:	3707      	adds	r7, #7
    fc8e:	f027 0307 	bic.w	r3, r7, #7
    fc92:	e9d3 4500 	ldrd	r4, r5, [r3]
    fc96:	f103 0208 	add.w	r2, r3, #8
    fc9a:	9209      	str	r2, [sp, #36]	; 0x24
    fc9c:	f01b 0701 	ands.w	r7, fp, #1
    fca0:	f000 8247 	beq.w	10132 <_svfprintf_r+0xb8a>
    fca4:	ea54 0305 	orrs.w	r3, r4, r5
    fca8:	f000 84a3 	beq.w	105f2 <_svfprintf_r+0x104a>
    fcac:	2700      	movs	r7, #0
    fcae:	2330      	movs	r3, #48	; 0x30
    fcb0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fcb4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    fcb8:	45b8      	cmp	r8, r7
    fcba:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    fcbe:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    fcc2:	f04b 0302 	orr.w	r3, fp, #2
    fcc6:	f2c0 8617 	blt.w	108f8 <_svfprintf_r+0x1350>
    fcca:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    fcce:	f043 0b02 	orr.w	fp, r3, #2
    fcd2:	ae28      	add	r6, sp, #160	; 0xa0
    fcd4:	0923      	lsrs	r3, r4, #4
    fcd6:	f004 010f 	and.w	r1, r4, #15
    fcda:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    fcde:	092a      	lsrs	r2, r5, #4
    fce0:	461c      	mov	r4, r3
    fce2:	4615      	mov	r5, r2
    fce4:	5c43      	ldrb	r3, [r0, r1]
    fce6:	f806 3d01 	strb.w	r3, [r6, #-1]!
    fcea:	ea54 0305 	orrs.w	r3, r4, r5
    fcee:	d1f1      	bne.n	fcd4 <_svfprintf_r+0x72c>
    fcf0:	e7b6      	b.n	fc60 <_svfprintf_r+0x6b8>
    fcf2:	9909      	ldr	r1, [sp, #36]	; 0x24
    fcf4:	930c      	str	r3, [sp, #48]	; 0x30
    fcf6:	680a      	ldr	r2, [r1, #0]
    fcf8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    fcfc:	2300      	movs	r3, #0
    fcfe:	460a      	mov	r2, r1
    fd00:	461f      	mov	r7, r3
    fd02:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    fd06:	3204      	adds	r2, #4
    fd08:	2301      	movs	r3, #1
    fd0a:	9304      	str	r3, [sp, #16]
    fd0c:	46b8      	mov	r8, r7
    fd0e:	970e      	str	r7, [sp, #56]	; 0x38
    fd10:	9209      	str	r2, [sp, #36]	; 0x24
    fd12:	9308      	str	r3, [sp, #32]
    fd14:	ae1e      	add	r6, sp, #120	; 0x78
    fd16:	e63d      	b.n	f994 <_svfprintf_r+0x3ec>
    fd18:	930c      	str	r3, [sp, #48]	; 0x30
    fd1a:	46a8      	mov	r8, r5
    fd1c:	2a00      	cmp	r2, #0
    fd1e:	f43f adc8 	beq.w	f8b2 <_svfprintf_r+0x30a>
    fd22:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    fd26:	e5c4      	b.n	f8b2 <_svfprintf_r+0x30a>
    fd28:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    fd2c:	f89a 3000 	ldrb.w	r3, [sl]
    fd30:	e493      	b.n	f65a <_svfprintf_r+0xb2>
    fd32:	f89a 3000 	ldrb.w	r3, [sl]
    fd36:	2900      	cmp	r1, #0
    fd38:	f47f ac8f 	bne.w	f65a <_svfprintf_r+0xb2>
    fd3c:	2201      	movs	r2, #1
    fd3e:	2120      	movs	r1, #32
    fd40:	e48b      	b.n	f65a <_svfprintf_r+0xb2>
    fd42:	f04b 0b01 	orr.w	fp, fp, #1
    fd46:	f89a 3000 	ldrb.w	r3, [sl]
    fd4a:	e486      	b.n	f65a <_svfprintf_r+0xb2>
    fd4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fd4e:	6823      	ldr	r3, [r4, #0]
    fd50:	9307      	str	r3, [sp, #28]
    fd52:	4618      	mov	r0, r3
    fd54:	2800      	cmp	r0, #0
    fd56:	4623      	mov	r3, r4
    fd58:	f103 0304 	add.w	r3, r3, #4
    fd5c:	f6ff acdf 	blt.w	f71e <_svfprintf_r+0x176>
    fd60:	9309      	str	r3, [sp, #36]	; 0x24
    fd62:	f89a 3000 	ldrb.w	r3, [sl]
    fd66:	e478      	b.n	f65a <_svfprintf_r+0xb2>
    fd68:	f89a 3000 	ldrb.w	r3, [sl]
    fd6c:	2201      	movs	r2, #1
    fd6e:	212b      	movs	r1, #43	; 0x2b
    fd70:	e473      	b.n	f65a <_svfprintf_r+0xb2>
    fd72:	930c      	str	r3, [sp, #48]	; 0x30
    fd74:	46a8      	mov	r8, r5
    fd76:	2a00      	cmp	r2, #0
    fd78:	f43f af57 	beq.w	fc2a <_svfprintf_r+0x682>
    fd7c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    fd80:	e753      	b.n	fc2a <_svfprintf_r+0x682>
    fd82:	930c      	str	r3, [sp, #48]	; 0x30
    fd84:	46a8      	mov	r8, r5
    fd86:	2a00      	cmp	r2, #0
    fd88:	f040 86aa 	bne.w	10ae0 <_svfprintf_r+0x1538>
    fd8c:	f01b 0f20 	tst.w	fp, #32
    fd90:	4880      	ldr	r0, [pc, #512]	; (ff94 <_svfprintf_r+0x9ec>)
    fd92:	f47f af7a 	bne.w	fc8a <_svfprintf_r+0x6e2>
    fd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fd98:	f01b 0f10 	tst.w	fp, #16
    fd9c:	4613      	mov	r3, r2
    fd9e:	f040 82c1 	bne.w	10324 <_svfprintf_r+0xd7c>
    fda2:	f01b 0f40 	tst.w	fp, #64	; 0x40
    fda6:	f000 82bd 	beq.w	10324 <_svfprintf_r+0xd7c>
    fdaa:	3304      	adds	r3, #4
    fdac:	8814      	ldrh	r4, [r2, #0]
    fdae:	9309      	str	r3, [sp, #36]	; 0x24
    fdb0:	2500      	movs	r5, #0
    fdb2:	e773      	b.n	fc9c <_svfprintf_r+0x6f4>
    fdb4:	f89a 3000 	ldrb.w	r3, [sl]
    fdb8:	2b6c      	cmp	r3, #108	; 0x6c
    fdba:	bf03      	ittte	eq
    fdbc:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    fdc0:	f04b 0b20 	orreq.w	fp, fp, #32
    fdc4:	f10a 0a01 	addeq.w	sl, sl, #1
    fdc8:	f04b 0b10 	orrne.w	fp, fp, #16
    fdcc:	e445      	b.n	f65a <_svfprintf_r+0xb2>
    fdce:	2a00      	cmp	r2, #0
    fdd0:	f040 866f 	bne.w	10ab2 <_svfprintf_r+0x150a>
    fdd4:	f01b 0f20 	tst.w	fp, #32
    fdd8:	f000 8366 	beq.w	104a8 <_svfprintf_r+0xf00>
    fddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fdde:	9906      	ldr	r1, [sp, #24]
    fde0:	6813      	ldr	r3, [r2, #0]
    fde2:	17cd      	asrs	r5, r1, #31
    fde4:	4608      	mov	r0, r1
    fde6:	3204      	adds	r2, #4
    fde8:	4629      	mov	r1, r5
    fdea:	9209      	str	r2, [sp, #36]	; 0x24
    fdec:	e9c3 0100 	strd	r0, r1, [r3]
    fdf0:	e400      	b.n	f5f4 <_svfprintf_r+0x4c>
    fdf2:	f04b 0b20 	orr.w	fp, fp, #32
    fdf6:	f89a 3000 	ldrb.w	r3, [sl]
    fdfa:	e42e      	b.n	f65a <_svfprintf_r+0xb2>
    fdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fdfe:	930c      	str	r3, [sp, #48]	; 0x30
    fe00:	6816      	ldr	r6, [r2, #0]
    fe02:	2400      	movs	r4, #0
    fe04:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    fe08:	1d17      	adds	r7, r2, #4
    fe0a:	2e00      	cmp	r6, #0
    fe0c:	f000 8565 	beq.w	108da <_svfprintf_r+0x1332>
    fe10:	2d00      	cmp	r5, #0
    fe12:	f2c0 84a2 	blt.w	1075a <_svfprintf_r+0x11b2>
    fe16:	462a      	mov	r2, r5
    fe18:	4621      	mov	r1, r4
    fe1a:	4630      	mov	r0, r6
    fe1c:	f7fe f928 	bl	e070 <memchr>
    fe20:	2800      	cmp	r0, #0
    fe22:	f000 85cc 	beq.w	109be <_svfprintf_r+0x1416>
    fe26:	1b83      	subs	r3, r0, r6
    fe28:	9308      	str	r3, [sp, #32]
    fe2a:	46a0      	mov	r8, r4
    fe2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fe30:	9709      	str	r7, [sp, #36]	; 0x24
    fe32:	9304      	str	r3, [sp, #16]
    fe34:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    fe38:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    fe3c:	e5a6      	b.n	f98c <_svfprintf_r+0x3e4>
    fe3e:	4855      	ldr	r0, [pc, #340]	; (ff94 <_svfprintf_r+0x9ec>)
    fe40:	920c      	str	r2, [sp, #48]	; 0x30
    fe42:	f1b8 0f00 	cmp.w	r8, #0
    fe46:	f040 8184 	bne.w	10152 <_svfprintf_r+0xbaa>
    fe4a:	4647      	mov	r7, r8
    fe4c:	f04f 0800 	mov.w	r8, #0
    fe50:	f8cd 8020 	str.w	r8, [sp, #32]
    fe54:	ae28      	add	r6, sp, #160	; 0xa0
    fe56:	e706      	b.n	fc66 <_svfprintf_r+0x6be>
    fe58:	930c      	str	r3, [sp, #48]	; 0x30
    fe5a:	2a00      	cmp	r2, #0
    fe5c:	f040 862d 	bne.w	10aba <_svfprintf_r+0x1512>
    fe60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fe62:	2a00      	cmp	r2, #0
    fe64:	f43f ac8f 	beq.w	f786 <_svfprintf_r+0x1de>
    fe68:	2300      	movs	r3, #0
    fe6a:	2101      	movs	r1, #1
    fe6c:	461f      	mov	r7, r3
    fe6e:	9104      	str	r1, [sp, #16]
    fe70:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    fe74:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    fe78:	4698      	mov	r8, r3
    fe7a:	930e      	str	r3, [sp, #56]	; 0x38
    fe7c:	9108      	str	r1, [sp, #32]
    fe7e:	ae1e      	add	r6, sp, #120	; 0x78
    fe80:	e588      	b.n	f994 <_svfprintf_r+0x3ec>
    fe82:	f1b8 0f00 	cmp.w	r8, #0
    fe86:	f000 858b 	beq.w	109a0 <_svfprintf_r+0x13f8>
    fe8a:	2700      	movs	r7, #0
    fe8c:	2400      	movs	r4, #0
    fe8e:	2500      	movs	r5, #0
    fe90:	e4ac      	b.n	f7ec <_svfprintf_r+0x244>
    fe92:	4840      	ldr	r0, [pc, #256]	; (ff94 <_svfprintf_r+0x9ec>)
    fe94:	920c      	str	r2, [sp, #48]	; 0x30
    fe96:	469b      	mov	fp, r3
    fe98:	ea54 0305 	orrs.w	r3, r4, r5
    fe9c:	9709      	str	r7, [sp, #36]	; 0x24
    fe9e:	f04f 0700 	mov.w	r7, #0
    fea2:	f47f af16 	bne.w	fcd2 <_svfprintf_r+0x72a>
    fea6:	2400      	movs	r4, #0
    fea8:	2500      	movs	r5, #0
    feaa:	e712      	b.n	fcd2 <_svfprintf_r+0x72a>
    feac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    feae:	e5bb      	b.n	fa28 <_svfprintf_r+0x480>
    feb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    feb2:	2a65      	cmp	r2, #101	; 0x65
    feb4:	f340 80a1 	ble.w	fffa <_svfprintf_r+0xa52>
    feb8:	eeb5 8b40 	vcmp.f64	d8, #0.0
    febc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fec0:	f040 8149 	bne.w	10156 <_svfprintf_r+0xbae>
    fec4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fec6:	4934      	ldr	r1, [pc, #208]	; (ff98 <_svfprintf_r+0x9f0>)
    fec8:	f8c9 1000 	str.w	r1, [r9]
    fecc:	3201      	adds	r2, #1
    fece:	3301      	adds	r3, #1
    fed0:	2101      	movs	r1, #1
    fed2:	2a07      	cmp	r2, #7
    fed4:	931d      	str	r3, [sp, #116]	; 0x74
    fed6:	921c      	str	r2, [sp, #112]	; 0x70
    fed8:	f8c9 1004 	str.w	r1, [r9, #4]
    fedc:	f300 8392 	bgt.w	10604 <_svfprintf_r+0x105c>
    fee0:	f109 0908 	add.w	r9, r9, #8
    fee4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fee6:	990d      	ldr	r1, [sp, #52]	; 0x34
    fee8:	428a      	cmp	r2, r1
    feea:	db03      	blt.n	fef4 <_svfprintf_r+0x94c>
    feec:	f01b 0f01 	tst.w	fp, #1
    fef0:	f43f ae0b 	beq.w	fb0a <_svfprintf_r+0x562>
    fef4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    fef6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    fef8:	9910      	ldr	r1, [sp, #64]	; 0x40
    fefa:	f8c9 1000 	str.w	r1, [r9]
    fefe:	3201      	adds	r2, #1
    ff00:	4403      	add	r3, r0
    ff02:	2a07      	cmp	r2, #7
    ff04:	931d      	str	r3, [sp, #116]	; 0x74
    ff06:	f8c9 0004 	str.w	r0, [r9, #4]
    ff0a:	921c      	str	r2, [sp, #112]	; 0x70
    ff0c:	f300 83d6 	bgt.w	106bc <_svfprintf_r+0x1114>
    ff10:	f109 0908 	add.w	r9, r9, #8
    ff14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ff16:	1e54      	subs	r4, r2, #1
    ff18:	2c00      	cmp	r4, #0
    ff1a:	f77f adf6 	ble.w	fb0a <_svfprintf_r+0x562>
    ff1e:	2c10      	cmp	r4, #16
    ff20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ff22:	4f1e      	ldr	r7, [pc, #120]	; (ff9c <_svfprintf_r+0x9f4>)
    ff24:	f340 81dc 	ble.w	102e0 <_svfprintf_r+0xd38>
    ff28:	2510      	movs	r5, #16
    ff2a:	9e05      	ldr	r6, [sp, #20]
    ff2c:	f8dd 800c 	ldr.w	r8, [sp, #12]
    ff30:	e005      	b.n	ff3e <_svfprintf_r+0x996>
    ff32:	f109 0908 	add.w	r9, r9, #8
    ff36:	3c10      	subs	r4, #16
    ff38:	2c10      	cmp	r4, #16
    ff3a:	f340 81d1 	ble.w	102e0 <_svfprintf_r+0xd38>
    ff3e:	3201      	adds	r2, #1
    ff40:	3310      	adds	r3, #16
    ff42:	2a07      	cmp	r2, #7
    ff44:	931d      	str	r3, [sp, #116]	; 0x74
    ff46:	921c      	str	r2, [sp, #112]	; 0x70
    ff48:	f8c9 7000 	str.w	r7, [r9]
    ff4c:	f8c9 5004 	str.w	r5, [r9, #4]
    ff50:	ddef      	ble.n	ff32 <_svfprintf_r+0x98a>
    ff52:	aa1b      	add	r2, sp, #108	; 0x6c
    ff54:	4641      	mov	r1, r8
    ff56:	4630      	mov	r0, r6
    ff58:	f000 fdde 	bl	10b18 <__ssprint_r>
    ff5c:	2800      	cmp	r0, #0
    ff5e:	f47f ac19 	bne.w	f794 <_svfprintf_r+0x1ec>
    ff62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ff64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ff66:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ff6a:	e7e4      	b.n	ff36 <_svfprintf_r+0x98e>
    ff6c:	9a07      	ldr	r2, [sp, #28]
    ff6e:	9904      	ldr	r1, [sp, #16]
    ff70:	1a54      	subs	r4, r2, r1
    ff72:	2c00      	cmp	r4, #0
    ff74:	f77f ad7c 	ble.w	fa70 <_svfprintf_r+0x4c8>
    ff78:	2c10      	cmp	r4, #16
    ff7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ff7c:	4f07      	ldr	r7, [pc, #28]	; (ff9c <_svfprintf_r+0x9f4>)
    ff7e:	dd2e      	ble.n	ffde <_svfprintf_r+0xa36>
    ff80:	4649      	mov	r1, r9
    ff82:	2510      	movs	r5, #16
    ff84:	46c1      	mov	r9, r8
    ff86:	4618      	mov	r0, r3
    ff88:	46b0      	mov	r8, r6
    ff8a:	9e05      	ldr	r6, [sp, #20]
    ff8c:	e00d      	b.n	ffaa <_svfprintf_r+0xa02>
    ff8e:	bf00      	nop
    ff90:	20001dd4 	.word	0x20001dd4
    ff94:	20001de8 	.word	0x20001de8
    ff98:	20001744 	.word	0x20001744
    ff9c:	20001db4 	.word	0x20001db4
    ffa0:	3c10      	subs	r4, #16
    ffa2:	2c10      	cmp	r4, #16
    ffa4:	f101 0108 	add.w	r1, r1, #8
    ffa8:	dd15      	ble.n	ffd6 <_svfprintf_r+0xa2e>
    ffaa:	3201      	adds	r2, #1
    ffac:	3010      	adds	r0, #16
    ffae:	2a07      	cmp	r2, #7
    ffb0:	901d      	str	r0, [sp, #116]	; 0x74
    ffb2:	921c      	str	r2, [sp, #112]	; 0x70
    ffb4:	600f      	str	r7, [r1, #0]
    ffb6:	604d      	str	r5, [r1, #4]
    ffb8:	ddf2      	ble.n	ffa0 <_svfprintf_r+0x9f8>
    ffba:	aa1b      	add	r2, sp, #108	; 0x6c
    ffbc:	9903      	ldr	r1, [sp, #12]
    ffbe:	4630      	mov	r0, r6
    ffc0:	f000 fdaa 	bl	10b18 <__ssprint_r>
    ffc4:	2800      	cmp	r0, #0
    ffc6:	f47f abe5 	bne.w	f794 <_svfprintf_r+0x1ec>
    ffca:	3c10      	subs	r4, #16
    ffcc:	2c10      	cmp	r4, #16
    ffce:	981d      	ldr	r0, [sp, #116]	; 0x74
    ffd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ffd2:	a928      	add	r1, sp, #160	; 0xa0
    ffd4:	dce9      	bgt.n	ffaa <_svfprintf_r+0xa02>
    ffd6:	4646      	mov	r6, r8
    ffd8:	4603      	mov	r3, r0
    ffda:	46c8      	mov	r8, r9
    ffdc:	4689      	mov	r9, r1
    ffde:	3201      	adds	r2, #1
    ffe0:	4423      	add	r3, r4
    ffe2:	2a07      	cmp	r2, #7
    ffe4:	931d      	str	r3, [sp, #116]	; 0x74
    ffe6:	921c      	str	r2, [sp, #112]	; 0x70
    ffe8:	f8c9 7000 	str.w	r7, [r9]
    ffec:	f8c9 4004 	str.w	r4, [r9, #4]
    fff0:	f300 8246 	bgt.w	10480 <_svfprintf_r+0xed8>
    fff4:	f109 0908 	add.w	r9, r9, #8
    fff8:	e53a      	b.n	fa70 <_svfprintf_r+0x4c8>
    fffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    fffc:	f8c9 6000 	str.w	r6, [r9]
   10000:	2a01      	cmp	r2, #1
   10002:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10004:	f103 0301 	add.w	r3, r3, #1
   10008:	f102 0201 	add.w	r2, r2, #1
   1000c:	f04f 0101 	mov.w	r1, #1
   10010:	931d      	str	r3, [sp, #116]	; 0x74
   10012:	921c      	str	r2, [sp, #112]	; 0x70
   10014:	f8c9 1004 	str.w	r1, [r9, #4]
   10018:	f340 8210 	ble.w	1043c <_svfprintf_r+0xe94>
   1001c:	2a07      	cmp	r2, #7
   1001e:	f300 8215 	bgt.w	1044c <_svfprintf_r+0xea4>
   10022:	f109 0908 	add.w	r9, r9, #8
   10026:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10028:	9910      	ldr	r1, [sp, #64]	; 0x40
   1002a:	f8c9 1000 	str.w	r1, [r9]
   1002e:	3201      	adds	r2, #1
   10030:	4403      	add	r3, r0
   10032:	2a07      	cmp	r2, #7
   10034:	931d      	str	r3, [sp, #116]	; 0x74
   10036:	921c      	str	r2, [sp, #112]	; 0x70
   10038:	f8c9 0004 	str.w	r0, [r9, #4]
   1003c:	f300 8213 	bgt.w	10466 <_svfprintf_r+0xebe>
   10040:	f109 0908 	add.w	r9, r9, #8
   10044:	eeb5 8b40 	vcmp.f64	d8, #0.0
   10048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1004c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1004e:	f000 80f5 	beq.w	1023c <_svfprintf_r+0xc94>
   10052:	3901      	subs	r1, #1
   10054:	3201      	adds	r2, #1
   10056:	3601      	adds	r6, #1
   10058:	440b      	add	r3, r1
   1005a:	2a07      	cmp	r2, #7
   1005c:	f8c9 6000 	str.w	r6, [r9]
   10060:	921c      	str	r2, [sp, #112]	; 0x70
   10062:	931d      	str	r3, [sp, #116]	; 0x74
   10064:	f8c9 1004 	str.w	r1, [r9, #4]
   10068:	f300 811d 	bgt.w	102a6 <_svfprintf_r+0xcfe>
   1006c:	f109 0908 	add.w	r9, r9, #8
   10070:	9811      	ldr	r0, [sp, #68]	; 0x44
   10072:	f8c9 0004 	str.w	r0, [r9, #4]
   10076:	3201      	adds	r2, #1
   10078:	4403      	add	r3, r0
   1007a:	a917      	add	r1, sp, #92	; 0x5c
   1007c:	2a07      	cmp	r2, #7
   1007e:	931d      	str	r3, [sp, #116]	; 0x74
   10080:	921c      	str	r2, [sp, #112]	; 0x70
   10082:	f8c9 1000 	str.w	r1, [r9]
   10086:	f77f ad3e 	ble.w	fb06 <_svfprintf_r+0x55e>
   1008a:	aa1b      	add	r2, sp, #108	; 0x6c
   1008c:	9903      	ldr	r1, [sp, #12]
   1008e:	9805      	ldr	r0, [sp, #20]
   10090:	f000 fd42 	bl	10b18 <__ssprint_r>
   10094:	2800      	cmp	r0, #0
   10096:	f47f ab7d 	bne.w	f794 <_svfprintf_r+0x1ec>
   1009a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1009c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   100a0:	e533      	b.n	fb0a <_svfprintf_r+0x562>
   100a2:	aa1b      	add	r2, sp, #108	; 0x6c
   100a4:	9903      	ldr	r1, [sp, #12]
   100a6:	9805      	ldr	r0, [sp, #20]
   100a8:	f000 fd36 	bl	10b18 <__ssprint_r>
   100ac:	2800      	cmp	r0, #0
   100ae:	f43f ad79 	beq.w	fba4 <_svfprintf_r+0x5fc>
   100b2:	f7ff bb6f 	b.w	f794 <_svfprintf_r+0x1ec>
   100b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   100b8:	f1b8 0f00 	cmp.w	r8, #0
   100bc:	680c      	ldr	r4, [r1, #0]
   100be:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   100c2:	f101 0704 	add.w	r7, r1, #4
   100c6:	f04f 0500 	mov.w	r5, #0
   100ca:	f2c0 8371 	blt.w	107b0 <_svfprintf_r+0x1208>
   100ce:	ea54 0205 	orrs.w	r2, r4, r5
   100d2:	9709      	str	r7, [sp, #36]	; 0x24
   100d4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   100d8:	461f      	mov	r7, r3
   100da:	f47f ac0a 	bne.w	f8f2 <_svfprintf_r+0x34a>
   100de:	f1b8 0f00 	cmp.w	r8, #0
   100e2:	f43f aeb3 	beq.w	fe4c <_svfprintf_r+0x8a4>
   100e6:	2400      	movs	r4, #0
   100e8:	e5b6      	b.n	fc58 <_svfprintf_r+0x6b0>
   100ea:	aa1b      	add	r2, sp, #108	; 0x6c
   100ec:	9903      	ldr	r1, [sp, #12]
   100ee:	9805      	ldr	r0, [sp, #20]
   100f0:	f000 fd12 	bl	10b18 <__ssprint_r>
   100f4:	2800      	cmp	r0, #0
   100f6:	f47f ab4d 	bne.w	f794 <_svfprintf_r+0x1ec>
   100fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   100fc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10100:	e4f0      	b.n	fae4 <_svfprintf_r+0x53c>
   10102:	aa1b      	add	r2, sp, #108	; 0x6c
   10104:	9903      	ldr	r1, [sp, #12]
   10106:	9805      	ldr	r0, [sp, #20]
   10108:	f000 fd06 	bl	10b18 <__ssprint_r>
   1010c:	2800      	cmp	r0, #0
   1010e:	f47f ab41 	bne.w	f794 <_svfprintf_r+0x1ec>
   10112:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10114:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10118:	e496      	b.n	fa48 <_svfprintf_r+0x4a0>
   1011a:	aa1b      	add	r2, sp, #108	; 0x6c
   1011c:	9903      	ldr	r1, [sp, #12]
   1011e:	9805      	ldr	r0, [sp, #20]
   10120:	f000 fcfa 	bl	10b18 <__ssprint_r>
   10124:	2800      	cmp	r0, #0
   10126:	f47f ab35 	bne.w	f794 <_svfprintf_r+0x1ec>
   1012a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1012c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10130:	e49a      	b.n	fa68 <_svfprintf_r+0x4c0>
   10132:	f1b8 0f00 	cmp.w	r8, #0
   10136:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   1013a:	f2c0 826f 	blt.w	1061c <_svfprintf_r+0x1074>
   1013e:	ea54 0305 	orrs.w	r3, r4, r5
   10142:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10146:	f47f adc4 	bne.w	fcd2 <_svfprintf_r+0x72a>
   1014a:	f1b8 0f00 	cmp.w	r8, #0
   1014e:	f43f ae7c 	beq.w	fe4a <_svfprintf_r+0x8a2>
   10152:	2700      	movs	r7, #0
   10154:	e6a7      	b.n	fea6 <_svfprintf_r+0x8fe>
   10156:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10158:	2c00      	cmp	r4, #0
   1015a:	f340 8261 	ble.w	10620 <_svfprintf_r+0x1078>
   1015e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10160:	990d      	ldr	r1, [sp, #52]	; 0x34
   10162:	428a      	cmp	r2, r1
   10164:	bfa8      	it	ge
   10166:	460a      	movge	r2, r1
   10168:	2a00      	cmp	r2, #0
   1016a:	4614      	mov	r4, r2
   1016c:	dd0d      	ble.n	1018a <_svfprintf_r+0xbe2>
   1016e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10170:	f8c9 6000 	str.w	r6, [r9]
   10174:	3201      	adds	r2, #1
   10176:	4423      	add	r3, r4
   10178:	2a07      	cmp	r2, #7
   1017a:	931d      	str	r3, [sp, #116]	; 0x74
   1017c:	f8c9 4004 	str.w	r4, [r9, #4]
   10180:	921c      	str	r2, [sp, #112]	; 0x70
   10182:	f300 8372 	bgt.w	1086a <_svfprintf_r+0x12c2>
   10186:	f109 0908 	add.w	r9, r9, #8
   1018a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1018c:	2c00      	cmp	r4, #0
   1018e:	bfa8      	it	ge
   10190:	1b12      	subge	r2, r2, r4
   10192:	2a00      	cmp	r2, #0
   10194:	4614      	mov	r4, r2
   10196:	f340 80f1 	ble.w	1037c <_svfprintf_r+0xdd4>
   1019a:	2c10      	cmp	r4, #16
   1019c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1019e:	4fc1      	ldr	r7, [pc, #772]	; (104a4 <_svfprintf_r+0xefc>)
   101a0:	f340 8219 	ble.w	105d6 <_svfprintf_r+0x102e>
   101a4:	4649      	mov	r1, r9
   101a6:	2510      	movs	r5, #16
   101a8:	46b1      	mov	r9, r6
   101aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
   101ae:	9e03      	ldr	r6, [sp, #12]
   101b0:	e004      	b.n	101bc <_svfprintf_r+0xc14>
   101b2:	3108      	adds	r1, #8
   101b4:	3c10      	subs	r4, #16
   101b6:	2c10      	cmp	r4, #16
   101b8:	f340 820b 	ble.w	105d2 <_svfprintf_r+0x102a>
   101bc:	3201      	adds	r2, #1
   101be:	3310      	adds	r3, #16
   101c0:	2a07      	cmp	r2, #7
   101c2:	931d      	str	r3, [sp, #116]	; 0x74
   101c4:	921c      	str	r2, [sp, #112]	; 0x70
   101c6:	600f      	str	r7, [r1, #0]
   101c8:	604d      	str	r5, [r1, #4]
   101ca:	ddf2      	ble.n	101b2 <_svfprintf_r+0xc0a>
   101cc:	aa1b      	add	r2, sp, #108	; 0x6c
   101ce:	4631      	mov	r1, r6
   101d0:	4640      	mov	r0, r8
   101d2:	f000 fca1 	bl	10b18 <__ssprint_r>
   101d6:	2800      	cmp	r0, #0
   101d8:	f47f aadc 	bne.w	f794 <_svfprintf_r+0x1ec>
   101dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   101de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   101e0:	a928      	add	r1, sp, #160	; 0xa0
   101e2:	e7e7      	b.n	101b4 <_svfprintf_r+0xc0c>
   101e4:	aa1b      	add	r2, sp, #108	; 0x6c
   101e6:	9903      	ldr	r1, [sp, #12]
   101e8:	9805      	ldr	r0, [sp, #20]
   101ea:	f000 fc95 	bl	10b18 <__ssprint_r>
   101ee:	2800      	cmp	r0, #0
   101f0:	f47f aad0 	bne.w	f794 <_svfprintf_r+0x1ec>
   101f4:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   101f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   101fa:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   101fe:	e413      	b.n	fa28 <_svfprintf_r+0x480>
   10200:	f01b 0210 	ands.w	r2, fp, #16
   10204:	f47f af57 	bne.w	100b6 <_svfprintf_r+0xb0e>
   10208:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1020c:	f43f af53 	beq.w	100b6 <_svfprintf_r+0xb0e>
   10210:	9909      	ldr	r1, [sp, #36]	; 0x24
   10212:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
   10216:	460b      	mov	r3, r1
   10218:	f1b8 0f00 	cmp.w	r8, #0
   1021c:	f103 0304 	add.w	r3, r3, #4
   10220:	880c      	ldrh	r4, [r1, #0]
   10222:	f04f 0500 	mov.w	r5, #0
   10226:	f2c0 8294 	blt.w	10752 <_svfprintf_r+0x11aa>
   1022a:	ea54 0105 	orrs.w	r1, r4, r5
   1022e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10232:	9309      	str	r3, [sp, #36]	; 0x24
   10234:	4617      	mov	r7, r2
   10236:	f47f ab5c 	bne.w	f8f2 <_svfprintf_r+0x34a>
   1023a:	e750      	b.n	100de <_svfprintf_r+0xb36>
   1023c:	1e4c      	subs	r4, r1, #1
   1023e:	2c00      	cmp	r4, #0
   10240:	f77f af16 	ble.w	10070 <_svfprintf_r+0xac8>
   10244:	2c10      	cmp	r4, #16
   10246:	4f97      	ldr	r7, [pc, #604]	; (104a4 <_svfprintf_r+0xefc>)
   10248:	dd22      	ble.n	10290 <_svfprintf_r+0xce8>
   1024a:	2510      	movs	r5, #16
   1024c:	9e05      	ldr	r6, [sp, #20]
   1024e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   10252:	e004      	b.n	1025e <_svfprintf_r+0xcb6>
   10254:	3c10      	subs	r4, #16
   10256:	2c10      	cmp	r4, #16
   10258:	f109 0908 	add.w	r9, r9, #8
   1025c:	dd18      	ble.n	10290 <_svfprintf_r+0xce8>
   1025e:	3201      	adds	r2, #1
   10260:	3310      	adds	r3, #16
   10262:	2a07      	cmp	r2, #7
   10264:	931d      	str	r3, [sp, #116]	; 0x74
   10266:	921c      	str	r2, [sp, #112]	; 0x70
   10268:	f8c9 7000 	str.w	r7, [r9]
   1026c:	f8c9 5004 	str.w	r5, [r9, #4]
   10270:	ddf0      	ble.n	10254 <_svfprintf_r+0xcac>
   10272:	aa1b      	add	r2, sp, #108	; 0x6c
   10274:	4641      	mov	r1, r8
   10276:	4630      	mov	r0, r6
   10278:	f000 fc4e 	bl	10b18 <__ssprint_r>
   1027c:	2800      	cmp	r0, #0
   1027e:	f47f aa89 	bne.w	f794 <_svfprintf_r+0x1ec>
   10282:	3c10      	subs	r4, #16
   10284:	2c10      	cmp	r4, #16
   10286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10288:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1028a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1028e:	dce6      	bgt.n	1025e <_svfprintf_r+0xcb6>
   10290:	3201      	adds	r2, #1
   10292:	4423      	add	r3, r4
   10294:	2a07      	cmp	r2, #7
   10296:	931d      	str	r3, [sp, #116]	; 0x74
   10298:	921c      	str	r2, [sp, #112]	; 0x70
   1029a:	f8c9 7000 	str.w	r7, [r9]
   1029e:	f8c9 4004 	str.w	r4, [r9, #4]
   102a2:	f77f aee3 	ble.w	1006c <_svfprintf_r+0xac4>
   102a6:	aa1b      	add	r2, sp, #108	; 0x6c
   102a8:	9903      	ldr	r1, [sp, #12]
   102aa:	9805      	ldr	r0, [sp, #20]
   102ac:	f000 fc34 	bl	10b18 <__ssprint_r>
   102b0:	2800      	cmp	r0, #0
   102b2:	f47f aa6f 	bne.w	f794 <_svfprintf_r+0x1ec>
   102b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   102b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   102ba:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   102be:	e6d7      	b.n	10070 <_svfprintf_r+0xac8>
   102c0:	f01b 0f10 	tst.w	fp, #16
   102c4:	d133      	bne.n	1032e <_svfprintf_r+0xd86>
   102c6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   102ca:	d030      	beq.n	1032e <_svfprintf_r+0xd86>
   102cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   102ce:	f9b1 4000 	ldrsh.w	r4, [r1]
   102d2:	3104      	adds	r1, #4
   102d4:	17e5      	asrs	r5, r4, #31
   102d6:	4622      	mov	r2, r4
   102d8:	462b      	mov	r3, r5
   102da:	9109      	str	r1, [sp, #36]	; 0x24
   102dc:	f7ff baf8 	b.w	f8d0 <_svfprintf_r+0x328>
   102e0:	3201      	adds	r2, #1
   102e2:	4423      	add	r3, r4
   102e4:	2a07      	cmp	r2, #7
   102e6:	931d      	str	r3, [sp, #116]	; 0x74
   102e8:	921c      	str	r2, [sp, #112]	; 0x70
   102ea:	f8c9 7000 	str.w	r7, [r9]
   102ee:	f8c9 4004 	str.w	r4, [r9, #4]
   102f2:	f77f ac08 	ble.w	fb06 <_svfprintf_r+0x55e>
   102f6:	e6c8      	b.n	1008a <_svfprintf_r+0xae2>
   102f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   102fa:	f1b8 0f00 	cmp.w	r8, #0
   102fe:	680c      	ldr	r4, [r1, #0]
   10300:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   10304:	f101 0704 	add.w	r7, r1, #4
   10308:	f04f 0500 	mov.w	r5, #0
   1030c:	f2c0 80c5 	blt.w	1049a <_svfprintf_r+0xef2>
   10310:	ea54 0205 	orrs.w	r2, r4, r5
   10314:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10318:	9709      	str	r7, [sp, #36]	; 0x24
   1031a:	f43f adb2 	beq.w	fe82 <_svfprintf_r+0x8da>
   1031e:	461f      	mov	r7, r3
   10320:	f7ff ba64 	b.w	f7ec <_svfprintf_r+0x244>
   10324:	681c      	ldr	r4, [r3, #0]
   10326:	3304      	adds	r3, #4
   10328:	9309      	str	r3, [sp, #36]	; 0x24
   1032a:	2500      	movs	r5, #0
   1032c:	e4b6      	b.n	fc9c <_svfprintf_r+0x6f4>
   1032e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10330:	6814      	ldr	r4, [r2, #0]
   10332:	4613      	mov	r3, r2
   10334:	3304      	adds	r3, #4
   10336:	17e5      	asrs	r5, r4, #31
   10338:	4622      	mov	r2, r4
   1033a:	9309      	str	r3, [sp, #36]	; 0x24
   1033c:	2a00      	cmp	r2, #0
   1033e:	462b      	mov	r3, r5
   10340:	f173 0300 	sbcs.w	r3, r3, #0
   10344:	f6bf aac9 	bge.w	f8da <_svfprintf_r+0x332>
   10348:	4264      	negs	r4, r4
   1034a:	f04f 072d 	mov.w	r7, #45	; 0x2d
   1034e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   10352:	f1b8 0f00 	cmp.w	r8, #0
   10356:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   1035a:	f6ff aaca 	blt.w	f8f2 <_svfprintf_r+0x34a>
   1035e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10362:	f7ff bac6 	b.w	f8f2 <_svfprintf_r+0x34a>
   10366:	aa1b      	add	r2, sp, #108	; 0x6c
   10368:	9903      	ldr	r1, [sp, #12]
   1036a:	9805      	ldr	r0, [sp, #20]
   1036c:	f000 fbd4 	bl	10b18 <__ssprint_r>
   10370:	2800      	cmp	r0, #0
   10372:	f47f aa0f 	bne.w	f794 <_svfprintf_r+0x1ec>
   10376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10378:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1037c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1037e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10380:	4431      	add	r1, r6
   10382:	460d      	mov	r5, r1
   10384:	990d      	ldr	r1, [sp, #52]	; 0x34
   10386:	428a      	cmp	r2, r1
   10388:	db47      	blt.n	1041a <_svfprintf_r+0xe72>
   1038a:	f01b 0f01 	tst.w	fp, #1
   1038e:	d144      	bne.n	1041a <_svfprintf_r+0xe72>
   10390:	980d      	ldr	r0, [sp, #52]	; 0x34
   10392:	4406      	add	r6, r0
   10394:	1b74      	subs	r4, r6, r5
   10396:	1a82      	subs	r2, r0, r2
   10398:	4294      	cmp	r4, r2
   1039a:	bfa8      	it	ge
   1039c:	4614      	movge	r4, r2
   1039e:	2c00      	cmp	r4, #0
   103a0:	4626      	mov	r6, r4
   103a2:	dd0d      	ble.n	103c0 <_svfprintf_r+0xe18>
   103a4:	991c      	ldr	r1, [sp, #112]	; 0x70
   103a6:	f8c9 5000 	str.w	r5, [r9]
   103aa:	3101      	adds	r1, #1
   103ac:	4423      	add	r3, r4
   103ae:	2907      	cmp	r1, #7
   103b0:	931d      	str	r3, [sp, #116]	; 0x74
   103b2:	f8c9 4004 	str.w	r4, [r9, #4]
   103b6:	911c      	str	r1, [sp, #112]	; 0x70
   103b8:	f300 8280 	bgt.w	108bc <_svfprintf_r+0x1314>
   103bc:	f109 0908 	add.w	r9, r9, #8
   103c0:	2e00      	cmp	r6, #0
   103c2:	bfac      	ite	ge
   103c4:	1b94      	subge	r4, r2, r6
   103c6:	4614      	movlt	r4, r2
   103c8:	2c00      	cmp	r4, #0
   103ca:	f77f ab9e 	ble.w	fb0a <_svfprintf_r+0x562>
   103ce:	2c10      	cmp	r4, #16
   103d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   103d2:	4f34      	ldr	r7, [pc, #208]	; (104a4 <_svfprintf_r+0xefc>)
   103d4:	dd84      	ble.n	102e0 <_svfprintf_r+0xd38>
   103d6:	2510      	movs	r5, #16
   103d8:	9e05      	ldr	r6, [sp, #20]
   103da:	f8dd 800c 	ldr.w	r8, [sp, #12]
   103de:	e005      	b.n	103ec <_svfprintf_r+0xe44>
   103e0:	f109 0908 	add.w	r9, r9, #8
   103e4:	3c10      	subs	r4, #16
   103e6:	2c10      	cmp	r4, #16
   103e8:	f77f af7a 	ble.w	102e0 <_svfprintf_r+0xd38>
   103ec:	3201      	adds	r2, #1
   103ee:	3310      	adds	r3, #16
   103f0:	2a07      	cmp	r2, #7
   103f2:	931d      	str	r3, [sp, #116]	; 0x74
   103f4:	921c      	str	r2, [sp, #112]	; 0x70
   103f6:	f8c9 7000 	str.w	r7, [r9]
   103fa:	f8c9 5004 	str.w	r5, [r9, #4]
   103fe:	ddef      	ble.n	103e0 <_svfprintf_r+0xe38>
   10400:	aa1b      	add	r2, sp, #108	; 0x6c
   10402:	4641      	mov	r1, r8
   10404:	4630      	mov	r0, r6
   10406:	f000 fb87 	bl	10b18 <__ssprint_r>
   1040a:	2800      	cmp	r0, #0
   1040c:	f47f a9c2 	bne.w	f794 <_svfprintf_r+0x1ec>
   10410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10412:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10414:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10418:	e7e4      	b.n	103e4 <_svfprintf_r+0xe3c>
   1041a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1041c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1041e:	9810      	ldr	r0, [sp, #64]	; 0x40
   10420:	f8c9 0000 	str.w	r0, [r9]
   10424:	3101      	adds	r1, #1
   10426:	4423      	add	r3, r4
   10428:	2907      	cmp	r1, #7
   1042a:	931d      	str	r3, [sp, #116]	; 0x74
   1042c:	f8c9 4004 	str.w	r4, [r9, #4]
   10430:	911c      	str	r1, [sp, #112]	; 0x70
   10432:	f300 8226 	bgt.w	10882 <_svfprintf_r+0x12da>
   10436:	f109 0908 	add.w	r9, r9, #8
   1043a:	e7a9      	b.n	10390 <_svfprintf_r+0xde8>
   1043c:	f01b 0f01 	tst.w	fp, #1
   10440:	f47f adec 	bne.w	1001c <_svfprintf_r+0xa74>
   10444:	2a07      	cmp	r2, #7
   10446:	f77f ae11 	ble.w	1006c <_svfprintf_r+0xac4>
   1044a:	e72c      	b.n	102a6 <_svfprintf_r+0xcfe>
   1044c:	aa1b      	add	r2, sp, #108	; 0x6c
   1044e:	9903      	ldr	r1, [sp, #12]
   10450:	9805      	ldr	r0, [sp, #20]
   10452:	f000 fb61 	bl	10b18 <__ssprint_r>
   10456:	2800      	cmp	r0, #0
   10458:	f47f a99c 	bne.w	f794 <_svfprintf_r+0x1ec>
   1045c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1045e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10460:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10464:	e5df      	b.n	10026 <_svfprintf_r+0xa7e>
   10466:	aa1b      	add	r2, sp, #108	; 0x6c
   10468:	9903      	ldr	r1, [sp, #12]
   1046a:	9805      	ldr	r0, [sp, #20]
   1046c:	f000 fb54 	bl	10b18 <__ssprint_r>
   10470:	2800      	cmp	r0, #0
   10472:	f47f a98f 	bne.w	f794 <_svfprintf_r+0x1ec>
   10476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10478:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1047a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1047e:	e5e1      	b.n	10044 <_svfprintf_r+0xa9c>
   10480:	aa1b      	add	r2, sp, #108	; 0x6c
   10482:	9903      	ldr	r1, [sp, #12]
   10484:	9805      	ldr	r0, [sp, #20]
   10486:	f000 fb47 	bl	10b18 <__ssprint_r>
   1048a:	2800      	cmp	r0, #0
   1048c:	f47f a982 	bne.w	f794 <_svfprintf_r+0x1ec>
   10490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10492:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10496:	f7ff baeb 	b.w	fa70 <_svfprintf_r+0x4c8>
   1049a:	9709      	str	r7, [sp, #36]	; 0x24
   1049c:	2700      	movs	r7, #0
   1049e:	f7ff b9a5 	b.w	f7ec <_svfprintf_r+0x244>
   104a2:	bf00      	nop
   104a4:	20001db4 	.word	0x20001db4
   104a8:	f01b 0f10 	tst.w	fp, #16
   104ac:	d10b      	bne.n	104c6 <_svfprintf_r+0xf1e>
   104ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
   104b2:	d008      	beq.n	104c6 <_svfprintf_r+0xf1e>
   104b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   104b6:	6813      	ldr	r3, [r2, #0]
   104b8:	3204      	adds	r2, #4
   104ba:	9209      	str	r2, [sp, #36]	; 0x24
   104bc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   104c0:	801a      	strh	r2, [r3, #0]
   104c2:	f7ff b897 	b.w	f5f4 <_svfprintf_r+0x4c>
   104c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   104c8:	6813      	ldr	r3, [r2, #0]
   104ca:	3204      	adds	r2, #4
   104cc:	9209      	str	r2, [sp, #36]	; 0x24
   104ce:	9a06      	ldr	r2, [sp, #24]
   104d0:	601a      	str	r2, [r3, #0]
   104d2:	f7ff b88f 	b.w	f5f4 <_svfprintf_r+0x4c>
   104d6:	eeb4 8b48 	vcmp.f64	d8, d8
   104da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104de:	f180 829e 	bvs.w	10a1e <_svfprintf_r+0x1476>
   104e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   104e4:	f1b8 3fff 	cmp.w	r8, #4294967295
   104e8:	f023 0520 	bic.w	r5, r3, #32
   104ec:	f000 8225 	beq.w	1093a <_svfprintf_r+0x1392>
   104f0:	2d47      	cmp	r5, #71	; 0x47
   104f2:	f000 8126 	beq.w	10742 <_svfprintf_r+0x119a>
   104f6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   104fa:	930a      	str	r3, [sp, #40]	; 0x28
   104fc:	ee18 3a90 	vmov	r3, s17
   10500:	2b00      	cmp	r3, #0
   10502:	f2c0 821d 	blt.w	10940 <_svfprintf_r+0x1398>
   10506:	eeb0 ab48 	vmov.f64	d10, d8
   1050a:	2700      	movs	r7, #0
   1050c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1050e:	2b66      	cmp	r3, #102	; 0x66
   10510:	f000 8202 	beq.w	10918 <_svfprintf_r+0x1370>
   10514:	2b46      	cmp	r3, #70	; 0x46
   10516:	f000 80ec 	beq.w	106f2 <_svfprintf_r+0x114a>
   1051a:	eeb0 0b4a 	vmov.f64	d0, d10
   1051e:	2d45      	cmp	r5, #69	; 0x45
   10520:	bf0c      	ite	eq
   10522:	f108 0401 	addeq.w	r4, r8, #1
   10526:	4644      	movne	r4, r8
   10528:	aa19      	add	r2, sp, #100	; 0x64
   1052a:	ab16      	add	r3, sp, #88	; 0x58
   1052c:	9201      	str	r2, [sp, #4]
   1052e:	9300      	str	r3, [sp, #0]
   10530:	4622      	mov	r2, r4
   10532:	ab15      	add	r3, sp, #84	; 0x54
   10534:	2102      	movs	r1, #2
   10536:	9805      	ldr	r0, [sp, #20]
   10538:	f7fe f9f2 	bl	e920 <_dtoa_r>
   1053c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1053e:	2b67      	cmp	r3, #103	; 0x67
   10540:	4606      	mov	r6, r0
   10542:	f040 820e 	bne.w	10962 <_svfprintf_r+0x13ba>
   10546:	f01b 0f01 	tst.w	fp, #1
   1054a:	f000 8266 	beq.w	10a1a <_svfprintf_r+0x1472>
   1054e:	1931      	adds	r1, r6, r4
   10550:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10558:	f000 8185 	beq.w	10866 <_svfprintf_r+0x12be>
   1055c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1055e:	4299      	cmp	r1, r3
   10560:	d906      	bls.n	10570 <_svfprintf_r+0xfc8>
   10562:	2030      	movs	r0, #48	; 0x30
   10564:	1c5a      	adds	r2, r3, #1
   10566:	9219      	str	r2, [sp, #100]	; 0x64
   10568:	7018      	strb	r0, [r3, #0]
   1056a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1056c:	4299      	cmp	r1, r3
   1056e:	d8f9      	bhi.n	10564 <_svfprintf_r+0xfbc>
   10570:	1b9b      	subs	r3, r3, r6
   10572:	2d47      	cmp	r5, #71	; 0x47
   10574:	930d      	str	r3, [sp, #52]	; 0x34
   10576:	f000 811f 	beq.w	107b8 <_svfprintf_r+0x1210>
   1057a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1057c:	2b65      	cmp	r3, #101	; 0x65
   1057e:	f340 81ff 	ble.w	10980 <_svfprintf_r+0x13d8>
   10582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10584:	2b66      	cmp	r3, #102	; 0x66
   10586:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10588:	f000 81fc 	beq.w	10984 <_svfprintf_r+0x13dc>
   1058c:	930e      	str	r3, [sp, #56]	; 0x38
   1058e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10590:	990d      	ldr	r1, [sp, #52]	; 0x34
   10592:	428a      	cmp	r2, r1
   10594:	f2c0 81d8 	blt.w	10948 <_svfprintf_r+0x13a0>
   10598:	f01b 0f01 	tst.w	fp, #1
   1059c:	f040 8234 	bne.w	10a08 <_svfprintf_r+0x1460>
   105a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   105a4:	9208      	str	r2, [sp, #32]
   105a6:	2267      	movs	r2, #103	; 0x67
   105a8:	920c      	str	r2, [sp, #48]	; 0x30
   105aa:	2f00      	cmp	r7, #0
   105ac:	f040 80f6 	bne.w	1079c <_svfprintf_r+0x11f4>
   105b0:	46b8      	mov	r8, r7
   105b2:	9304      	str	r3, [sp, #16]
   105b4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   105b8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   105bc:	f7ff b9e6 	b.w	f98c <_svfprintf_r+0x3e4>
   105c0:	f027 0707 	bic.w	r7, r7, #7
   105c4:	f107 0308 	add.w	r3, r7, #8
   105c8:	ed97 8b00 	vldr	d8, [r7]
   105cc:	9309      	str	r3, [sp, #36]	; 0x24
   105ce:	f7ff b9be 	b.w	f94e <_svfprintf_r+0x3a6>
   105d2:	464e      	mov	r6, r9
   105d4:	4689      	mov	r9, r1
   105d6:	3201      	adds	r2, #1
   105d8:	4423      	add	r3, r4
   105da:	2a07      	cmp	r2, #7
   105dc:	931d      	str	r3, [sp, #116]	; 0x74
   105de:	921c      	str	r2, [sp, #112]	; 0x70
   105e0:	f8c9 7000 	str.w	r7, [r9]
   105e4:	f8c9 4004 	str.w	r4, [r9, #4]
   105e8:	f73f aebd 	bgt.w	10366 <_svfprintf_r+0xdbe>
   105ec:	f109 0908 	add.w	r9, r9, #8
   105f0:	e6c4      	b.n	1037c <_svfprintf_r+0xdd4>
   105f2:	2700      	movs	r7, #0
   105f4:	45b8      	cmp	r8, r7
   105f6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   105fa:	f6ff ac54 	blt.w	fea6 <_svfprintf_r+0x8fe>
   105fe:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10602:	e41e      	b.n	fe42 <_svfprintf_r+0x89a>
   10604:	aa1b      	add	r2, sp, #108	; 0x6c
   10606:	9903      	ldr	r1, [sp, #12]
   10608:	9805      	ldr	r0, [sp, #20]
   1060a:	f000 fa85 	bl	10b18 <__ssprint_r>
   1060e:	2800      	cmp	r0, #0
   10610:	f47f a8c0 	bne.w	f794 <_svfprintf_r+0x1ec>
   10614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10616:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1061a:	e463      	b.n	fee4 <_svfprintf_r+0x93c>
   1061c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1061e:	e43b      	b.n	fe98 <_svfprintf_r+0x8f0>
   10620:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10622:	49b9      	ldr	r1, [pc, #740]	; (10908 <_svfprintf_r+0x1360>)
   10624:	f8c9 1000 	str.w	r1, [r9]
   10628:	3201      	adds	r2, #1
   1062a:	3301      	adds	r3, #1
   1062c:	2101      	movs	r1, #1
   1062e:	2a07      	cmp	r2, #7
   10630:	931d      	str	r3, [sp, #116]	; 0x74
   10632:	921c      	str	r2, [sp, #112]	; 0x70
   10634:	f8c9 1004 	str.w	r1, [r9, #4]
   10638:	dc76      	bgt.n	10728 <_svfprintf_r+0x1180>
   1063a:	f109 0908 	add.w	r9, r9, #8
   1063e:	b92c      	cbnz	r4, 1064c <_svfprintf_r+0x10a4>
   10640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10642:	b91a      	cbnz	r2, 1064c <_svfprintf_r+0x10a4>
   10644:	f01b 0f01 	tst.w	fp, #1
   10648:	f43f aa5f 	beq.w	fb0a <_svfprintf_r+0x562>
   1064c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1064e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10650:	9910      	ldr	r1, [sp, #64]	; 0x40
   10652:	f8c9 1000 	str.w	r1, [r9]
   10656:	3201      	adds	r2, #1
   10658:	4403      	add	r3, r0
   1065a:	2a07      	cmp	r2, #7
   1065c:	931d      	str	r3, [sp, #116]	; 0x74
   1065e:	f8c9 0004 	str.w	r0, [r9, #4]
   10662:	921c      	str	r2, [sp, #112]	; 0x70
   10664:	f300 81b6 	bgt.w	109d4 <_svfprintf_r+0x142c>
   10668:	f109 0908 	add.w	r9, r9, #8
   1066c:	4264      	negs	r4, r4
   1066e:	2c00      	cmp	r4, #0
   10670:	f340 8087 	ble.w	10782 <_svfprintf_r+0x11da>
   10674:	2c10      	cmp	r4, #16
   10676:	4fa5      	ldr	r7, [pc, #660]	; (1090c <_svfprintf_r+0x1364>)
   10678:	f340 8112 	ble.w	108a0 <_svfprintf_r+0x12f8>
   1067c:	4649      	mov	r1, r9
   1067e:	2510      	movs	r5, #16
   10680:	46b1      	mov	r9, r6
   10682:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10686:	9e03      	ldr	r6, [sp, #12]
   10688:	e004      	b.n	10694 <_svfprintf_r+0x10ec>
   1068a:	3108      	adds	r1, #8
   1068c:	3c10      	subs	r4, #16
   1068e:	2c10      	cmp	r4, #16
   10690:	f340 8104 	ble.w	1089c <_svfprintf_r+0x12f4>
   10694:	3201      	adds	r2, #1
   10696:	3310      	adds	r3, #16
   10698:	2a07      	cmp	r2, #7
   1069a:	931d      	str	r3, [sp, #116]	; 0x74
   1069c:	921c      	str	r2, [sp, #112]	; 0x70
   1069e:	600f      	str	r7, [r1, #0]
   106a0:	604d      	str	r5, [r1, #4]
   106a2:	ddf2      	ble.n	1068a <_svfprintf_r+0x10e2>
   106a4:	aa1b      	add	r2, sp, #108	; 0x6c
   106a6:	4631      	mov	r1, r6
   106a8:	4640      	mov	r0, r8
   106aa:	f000 fa35 	bl	10b18 <__ssprint_r>
   106ae:	2800      	cmp	r0, #0
   106b0:	f47f a870 	bne.w	f794 <_svfprintf_r+0x1ec>
   106b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   106b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   106b8:	a928      	add	r1, sp, #160	; 0xa0
   106ba:	e7e7      	b.n	1068c <_svfprintf_r+0x10e4>
   106bc:	aa1b      	add	r2, sp, #108	; 0x6c
   106be:	9903      	ldr	r1, [sp, #12]
   106c0:	9805      	ldr	r0, [sp, #20]
   106c2:	f000 fa29 	bl	10b18 <__ssprint_r>
   106c6:	2800      	cmp	r0, #0
   106c8:	f47f a864 	bne.w	f794 <_svfprintf_r+0x1ec>
   106cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   106ce:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   106d2:	e41f      	b.n	ff14 <_svfprintf_r+0x96c>
   106d4:	2140      	movs	r1, #64	; 0x40
   106d6:	9805      	ldr	r0, [sp, #20]
   106d8:	f7fc f926 	bl	c928 <_malloc_r>
   106dc:	9a03      	ldr	r2, [sp, #12]
   106de:	6010      	str	r0, [r2, #0]
   106e0:	6110      	str	r0, [r2, #16]
   106e2:	2800      	cmp	r0, #0
   106e4:	f000 81ed 	beq.w	10ac2 <_svfprintf_r+0x151a>
   106e8:	9a03      	ldr	r2, [sp, #12]
   106ea:	2340      	movs	r3, #64	; 0x40
   106ec:	6153      	str	r3, [r2, #20]
   106ee:	f7fe bf74 	b.w	f5da <_svfprintf_r+0x32>
   106f2:	aa19      	add	r2, sp, #100	; 0x64
   106f4:	ab16      	add	r3, sp, #88	; 0x58
   106f6:	9201      	str	r2, [sp, #4]
   106f8:	9300      	str	r3, [sp, #0]
   106fa:	4642      	mov	r2, r8
   106fc:	ab15      	add	r3, sp, #84	; 0x54
   106fe:	2103      	movs	r1, #3
   10700:	eeb0 0b4a 	vmov.f64	d0, d10
   10704:	9805      	ldr	r0, [sp, #20]
   10706:	f7fe f90b 	bl	e920 <_dtoa_r>
   1070a:	4644      	mov	r4, r8
   1070c:	4606      	mov	r6, r0
   1070e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10710:	2b46      	cmp	r3, #70	; 0x46
   10712:	eb06 0104 	add.w	r1, r6, r4
   10716:	f47f af1b 	bne.w	10550 <_svfprintf_r+0xfa8>
   1071a:	7833      	ldrb	r3, [r6, #0]
   1071c:	2b30      	cmp	r3, #48	; 0x30
   1071e:	f000 818d 	beq.w	10a3c <_svfprintf_r+0x1494>
   10722:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10724:	4421      	add	r1, r4
   10726:	e713      	b.n	10550 <_svfprintf_r+0xfa8>
   10728:	aa1b      	add	r2, sp, #108	; 0x6c
   1072a:	9903      	ldr	r1, [sp, #12]
   1072c:	9805      	ldr	r0, [sp, #20]
   1072e:	f000 f9f3 	bl	10b18 <__ssprint_r>
   10732:	2800      	cmp	r0, #0
   10734:	f47f a82e 	bne.w	f794 <_svfprintf_r+0x1ec>
   10738:	9c15      	ldr	r4, [sp, #84]	; 0x54
   1073a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1073c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10740:	e77d      	b.n	1063e <_svfprintf_r+0x1096>
   10742:	f1b8 0f00 	cmp.w	r8, #0
   10746:	bf08      	it	eq
   10748:	f04f 0801 	moveq.w	r8, #1
   1074c:	e6d3      	b.n	104f6 <_svfprintf_r+0xf4e>
   1074e:	9309      	str	r3, [sp, #36]	; 0x24
   10750:	e6a4      	b.n	1049c <_svfprintf_r+0xef4>
   10752:	9309      	str	r3, [sp, #36]	; 0x24
   10754:	4617      	mov	r7, r2
   10756:	f7ff ba7b 	b.w	fc50 <_svfprintf_r+0x6a8>
   1075a:	4630      	mov	r0, r6
   1075c:	f7fd f8f0 	bl	d940 <strlen>
   10760:	46a0      	mov	r8, r4
   10762:	4603      	mov	r3, r0
   10764:	9008      	str	r0, [sp, #32]
   10766:	f7ff bb61 	b.w	fe2c <_svfprintf_r+0x884>
   1076a:	aa1b      	add	r2, sp, #108	; 0x6c
   1076c:	9903      	ldr	r1, [sp, #12]
   1076e:	9805      	ldr	r0, [sp, #20]
   10770:	f000 f9d2 	bl	10b18 <__ssprint_r>
   10774:	2800      	cmp	r0, #0
   10776:	f47f a80d 	bne.w	f794 <_svfprintf_r+0x1ec>
   1077a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1077c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1077e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10782:	980d      	ldr	r0, [sp, #52]	; 0x34
   10784:	f8c9 6000 	str.w	r6, [r9]
   10788:	3201      	adds	r2, #1
   1078a:	4403      	add	r3, r0
   1078c:	2a07      	cmp	r2, #7
   1078e:	931d      	str	r3, [sp, #116]	; 0x74
   10790:	921c      	str	r2, [sp, #112]	; 0x70
   10792:	f8c9 0004 	str.w	r0, [r9, #4]
   10796:	f77f a9b6 	ble.w	fb06 <_svfprintf_r+0x55e>
   1079a:	e476      	b.n	1008a <_svfprintf_r+0xae2>
   1079c:	272d      	movs	r7, #45	; 0x2d
   1079e:	9304      	str	r3, [sp, #16]
   107a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   107a4:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   107a8:	f04f 0800 	mov.w	r8, #0
   107ac:	f7ff b8ef 	b.w	f98e <_svfprintf_r+0x3e6>
   107b0:	9709      	str	r7, [sp, #36]	; 0x24
   107b2:	461f      	mov	r7, r3
   107b4:	f7ff ba4c 	b.w	fc50 <_svfprintf_r+0x6a8>
   107b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   107ba:	1cda      	adds	r2, r3, #3
   107bc:	db02      	blt.n	107c4 <_svfprintf_r+0x121c>
   107be:	4598      	cmp	r8, r3
   107c0:	f6bf aee4 	bge.w	1058c <_svfprintf_r+0xfe4>
   107c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   107c6:	3a02      	subs	r2, #2
   107c8:	920c      	str	r2, [sp, #48]	; 0x30
   107ca:	3b01      	subs	r3, #1
   107cc:	2b00      	cmp	r3, #0
   107ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   107d2:	9315      	str	r3, [sp, #84]	; 0x54
   107d4:	bfb8      	it	lt
   107d6:	425b      	neglt	r3, r3
   107d8:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
   107dc:	bfb4      	ite	lt
   107de:	222d      	movlt	r2, #45	; 0x2d
   107e0:	222b      	movge	r2, #43	; 0x2b
   107e2:	2b09      	cmp	r3, #9
   107e4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   107e8:	f340 8106 	ble.w	109f8 <_svfprintf_r+0x1450>
   107ec:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
   107f0:	4604      	mov	r4, r0
   107f2:	4a47      	ldr	r2, [pc, #284]	; (10910 <_svfprintf_r+0x1368>)
   107f4:	fb82 2103 	smull	r2, r1, r2, r3
   107f8:	17da      	asrs	r2, r3, #31
   107fa:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   107fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   10802:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   10806:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1080a:	2a09      	cmp	r2, #9
   1080c:	4613      	mov	r3, r2
   1080e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   10812:	dcee      	bgt.n	107f2 <_svfprintf_r+0x124a>
   10814:	4621      	mov	r1, r4
   10816:	3330      	adds	r3, #48	; 0x30
   10818:	b2da      	uxtb	r2, r3
   1081a:	f801 2d01 	strb.w	r2, [r1, #-1]!
   1081e:	4288      	cmp	r0, r1
   10820:	f240 8162 	bls.w	10ae8 <_svfprintf_r+0x1540>
   10824:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
   10828:	4623      	mov	r3, r4
   1082a:	e001      	b.n	10830 <_svfprintf_r+0x1288>
   1082c:	f813 2b01 	ldrb.w	r2, [r3], #1
   10830:	f801 2b01 	strb.w	r2, [r1], #1
   10834:	4298      	cmp	r0, r3
   10836:	d1f9      	bne.n	1082c <_svfprintf_r+0x1284>
   10838:	1c43      	adds	r3, r0, #1
   1083a:	1b1b      	subs	r3, r3, r4
   1083c:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
   10840:	4413      	add	r3, r2
   10842:	aa17      	add	r2, sp, #92	; 0x5c
   10844:	1a9b      	subs	r3, r3, r2
   10846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10848:	9311      	str	r3, [sp, #68]	; 0x44
   1084a:	2a01      	cmp	r2, #1
   1084c:	4413      	add	r3, r2
   1084e:	9308      	str	r3, [sp, #32]
   10850:	f340 80ff 	ble.w	10a52 <_svfprintf_r+0x14aa>
   10854:	9b08      	ldr	r3, [sp, #32]
   10856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10858:	4413      	add	r3, r2
   1085a:	2200      	movs	r2, #0
   1085c:	9308      	str	r3, [sp, #32]
   1085e:	920e      	str	r2, [sp, #56]	; 0x38
   10860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10864:	e6a1      	b.n	105aa <_svfprintf_r+0x1002>
   10866:	460b      	mov	r3, r1
   10868:	e682      	b.n	10570 <_svfprintf_r+0xfc8>
   1086a:	aa1b      	add	r2, sp, #108	; 0x6c
   1086c:	9903      	ldr	r1, [sp, #12]
   1086e:	9805      	ldr	r0, [sp, #20]
   10870:	f000 f952 	bl	10b18 <__ssprint_r>
   10874:	2800      	cmp	r0, #0
   10876:	f47e af8d 	bne.w	f794 <_svfprintf_r+0x1ec>
   1087a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1087c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   10880:	e483      	b.n	1018a <_svfprintf_r+0xbe2>
   10882:	aa1b      	add	r2, sp, #108	; 0x6c
   10884:	9903      	ldr	r1, [sp, #12]
   10886:	9805      	ldr	r0, [sp, #20]
   10888:	f000 f946 	bl	10b18 <__ssprint_r>
   1088c:	2800      	cmp	r0, #0
   1088e:	f47e af81 	bne.w	f794 <_svfprintf_r+0x1ec>
   10892:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10896:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   1089a:	e579      	b.n	10390 <_svfprintf_r+0xde8>
   1089c:	464e      	mov	r6, r9
   1089e:	4689      	mov	r9, r1
   108a0:	3201      	adds	r2, #1
   108a2:	4423      	add	r3, r4
   108a4:	2a07      	cmp	r2, #7
   108a6:	931d      	str	r3, [sp, #116]	; 0x74
   108a8:	921c      	str	r2, [sp, #112]	; 0x70
   108aa:	f8c9 7000 	str.w	r7, [r9]
   108ae:	f8c9 4004 	str.w	r4, [r9, #4]
   108b2:	f73f af5a 	bgt.w	1076a <_svfprintf_r+0x11c2>
   108b6:	f109 0908 	add.w	r9, r9, #8
   108ba:	e762      	b.n	10782 <_svfprintf_r+0x11da>
   108bc:	aa1b      	add	r2, sp, #108	; 0x6c
   108be:	9903      	ldr	r1, [sp, #12]
   108c0:	9805      	ldr	r0, [sp, #20]
   108c2:	f000 f929 	bl	10b18 <__ssprint_r>
   108c6:	2800      	cmp	r0, #0
   108c8:	f47e af64 	bne.w	f794 <_svfprintf_r+0x1ec>
   108cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   108ce:	990d      	ldr	r1, [sp, #52]	; 0x34
   108d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   108d2:	1a8a      	subs	r2, r1, r2
   108d4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   108d8:	e572      	b.n	103c0 <_svfprintf_r+0xe18>
   108da:	2d06      	cmp	r5, #6
   108dc:	462b      	mov	r3, r5
   108de:	bf28      	it	cs
   108e0:	2306      	movcs	r3, #6
   108e2:	9308      	str	r3, [sp, #32]
   108e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   108e8:	46b0      	mov	r8, r6
   108ea:	9709      	str	r7, [sp, #36]	; 0x24
   108ec:	960e      	str	r6, [sp, #56]	; 0x38
   108ee:	4637      	mov	r7, r6
   108f0:	9304      	str	r3, [sp, #16]
   108f2:	4e08      	ldr	r6, [pc, #32]	; (10914 <_svfprintf_r+0x136c>)
   108f4:	f7ff b84a 	b.w	f98c <_svfprintf_r+0x3e4>
   108f8:	469b      	mov	fp, r3
   108fa:	f7ff b9ea 	b.w	fcd2 <_svfprintf_r+0x72a>
   108fe:	272d      	movs	r7, #45	; 0x2d
   10900:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
   10904:	f7ff b833 	b.w	f96e <_svfprintf_r+0x3c6>
   10908:	20001744 	.word	0x20001744
   1090c:	20001db4 	.word	0x20001db4
   10910:	66666667 	.word	0x66666667
   10914:	20001dfc 	.word	0x20001dfc
   10918:	aa19      	add	r2, sp, #100	; 0x64
   1091a:	ab16      	add	r3, sp, #88	; 0x58
   1091c:	9201      	str	r2, [sp, #4]
   1091e:	9300      	str	r3, [sp, #0]
   10920:	2103      	movs	r1, #3
   10922:	ab15      	add	r3, sp, #84	; 0x54
   10924:	4642      	mov	r2, r8
   10926:	eeb0 0b4a 	vmov.f64	d0, d10
   1092a:	9805      	ldr	r0, [sp, #20]
   1092c:	f7fd fff8 	bl	e920 <_dtoa_r>
   10930:	4644      	mov	r4, r8
   10932:	4606      	mov	r6, r0
   10934:	eb00 0108 	add.w	r1, r0, r8
   10938:	e6ef      	b.n	1071a <_svfprintf_r+0x1172>
   1093a:	f04f 0806 	mov.w	r8, #6
   1093e:	e5da      	b.n	104f6 <_svfprintf_r+0xf4e>
   10940:	eeb1 ab48 	vneg.f64	d10, d8
   10944:	272d      	movs	r7, #45	; 0x2d
   10946:	e5e1      	b.n	1050c <_svfprintf_r+0xf64>
   10948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1094a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1094c:	4413      	add	r3, r2
   1094e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10950:	9308      	str	r3, [sp, #32]
   10952:	2a00      	cmp	r2, #0
   10954:	f340 8086 	ble.w	10a64 <_svfprintf_r+0x14bc>
   10958:	2267      	movs	r2, #103	; 0x67
   1095a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1095e:	920c      	str	r2, [sp, #48]	; 0x30
   10960:	e623      	b.n	105aa <_svfprintf_r+0x1002>
   10962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10964:	2b47      	cmp	r3, #71	; 0x47
   10966:	f47f adf2 	bne.w	1054e <_svfprintf_r+0xfa6>
   1096a:	f01b 0f01 	tst.w	fp, #1
   1096e:	f47f aece 	bne.w	1070e <_svfprintf_r+0x1166>
   10972:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10974:	2d47      	cmp	r5, #71	; 0x47
   10976:	eba3 0306 	sub.w	r3, r3, r6
   1097a:	930d      	str	r3, [sp, #52]	; 0x34
   1097c:	f43f af1c 	beq.w	107b8 <_svfprintf_r+0x1210>
   10980:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10982:	e722      	b.n	107ca <_svfprintf_r+0x1222>
   10984:	2b00      	cmp	r3, #0
   10986:	461a      	mov	r2, r3
   10988:	930e      	str	r3, [sp, #56]	; 0x38
   1098a:	dd73      	ble.n	10a74 <_svfprintf_r+0x14cc>
   1098c:	f1b8 0f00 	cmp.w	r8, #0
   10990:	d14b      	bne.n	10a2a <_svfprintf_r+0x1482>
   10992:	f01b 0f01 	tst.w	fp, #1
   10996:	d148      	bne.n	10a2a <_svfprintf_r+0x1482>
   10998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1099c:	9208      	str	r2, [sp, #32]
   1099e:	e604      	b.n	105aa <_svfprintf_r+0x1002>
   109a0:	f01b 0f01 	tst.w	fp, #1
   109a4:	4647      	mov	r7, r8
   109a6:	d005      	beq.n	109b4 <_svfprintf_r+0x140c>
   109a8:	ae38      	add	r6, sp, #224	; 0xe0
   109aa:	2330      	movs	r3, #48	; 0x30
   109ac:	f806 3d41 	strb.w	r3, [r6, #-65]!
   109b0:	f7ff b956 	b.w	fc60 <_svfprintf_r+0x6b8>
   109b4:	f8cd 8020 	str.w	r8, [sp, #32]
   109b8:	ae28      	add	r6, sp, #160	; 0xa0
   109ba:	f7ff b954 	b.w	fc66 <_svfprintf_r+0x6be>
   109be:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   109c2:	9709      	str	r7, [sp, #36]	; 0x24
   109c4:	9304      	str	r3, [sp, #16]
   109c6:	9508      	str	r5, [sp, #32]
   109c8:	4680      	mov	r8, r0
   109ca:	900e      	str	r0, [sp, #56]	; 0x38
   109cc:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   109d0:	f7fe bfdc 	b.w	f98c <_svfprintf_r+0x3e4>
   109d4:	aa1b      	add	r2, sp, #108	; 0x6c
   109d6:	9903      	ldr	r1, [sp, #12]
   109d8:	9805      	ldr	r0, [sp, #20]
   109da:	f000 f89d 	bl	10b18 <__ssprint_r>
   109de:	2800      	cmp	r0, #0
   109e0:	f47e aed8 	bne.w	f794 <_svfprintf_r+0x1ec>
   109e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
   109e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   109e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   109ea:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
   109ee:	e63d      	b.n	1066c <_svfprintf_r+0x10c4>
   109f0:	46a2      	mov	sl, r4
   109f2:	2500      	movs	r5, #0
   109f4:	f7fe be33 	b.w	f65e <_svfprintf_r+0xb6>
   109f8:	3330      	adds	r3, #48	; 0x30
   109fa:	2230      	movs	r2, #48	; 0x30
   109fc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
   10a00:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
   10a04:	ab18      	add	r3, sp, #96	; 0x60
   10a06:	e71c      	b.n	10842 <_svfprintf_r+0x129a>
   10a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a0c:	4413      	add	r3, r2
   10a0e:	2267      	movs	r2, #103	; 0x67
   10a10:	9308      	str	r3, [sp, #32]
   10a12:	920c      	str	r2, [sp, #48]	; 0x30
   10a14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a18:	e5c7      	b.n	105aa <_svfprintf_r+0x1002>
   10a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10a1c:	e5a8      	b.n	10570 <_svfprintf_r+0xfc8>
   10a1e:	4e3c      	ldr	r6, [pc, #240]	; (10b10 <_svfprintf_r+0x1568>)
   10a20:	4b3c      	ldr	r3, [pc, #240]	; (10b14 <_svfprintf_r+0x156c>)
   10a22:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
   10a26:	f7fe bfa4 	b.w	f972 <_svfprintf_r+0x3ca>
   10a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10a2e:	189d      	adds	r5, r3, r2
   10a30:	eb05 0308 	add.w	r3, r5, r8
   10a34:	9308      	str	r3, [sp, #32]
   10a36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a3a:	e5b6      	b.n	105aa <_svfprintf_r+0x1002>
   10a3c:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a44:	f43f ae6d 	beq.w	10722 <_svfprintf_r+0x117a>
   10a48:	f1c4 0401 	rsb	r4, r4, #1
   10a4c:	9415      	str	r4, [sp, #84]	; 0x54
   10a4e:	4421      	add	r1, r4
   10a50:	e57e      	b.n	10550 <_svfprintf_r+0xfa8>
   10a52:	f01b 0301 	ands.w	r3, fp, #1
   10a56:	f47f aefd 	bne.w	10854 <_svfprintf_r+0x12ac>
   10a5a:	930e      	str	r3, [sp, #56]	; 0x38
   10a5c:	9b08      	ldr	r3, [sp, #32]
   10a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a62:	e5a2      	b.n	105aa <_svfprintf_r+0x1002>
   10a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a66:	9a08      	ldr	r2, [sp, #32]
   10a68:	f1c3 0301 	rsb	r3, r3, #1
   10a6c:	441a      	add	r2, r3
   10a6e:	4613      	mov	r3, r2
   10a70:	9208      	str	r2, [sp, #32]
   10a72:	e771      	b.n	10958 <_svfprintf_r+0x13b0>
   10a74:	f1b8 0f00 	cmp.w	r8, #0
   10a78:	d102      	bne.n	10a80 <_svfprintf_r+0x14d8>
   10a7a:	f01b 0f01 	tst.w	fp, #1
   10a7e:	d007      	beq.n	10a90 <_svfprintf_r+0x14e8>
   10a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10a82:	1c5d      	adds	r5, r3, #1
   10a84:	eb05 0308 	add.w	r3, r5, r8
   10a88:	9308      	str	r3, [sp, #32]
   10a8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a8e:	e58c      	b.n	105aa <_svfprintf_r+0x1002>
   10a90:	2301      	movs	r3, #1
   10a92:	9308      	str	r3, [sp, #32]
   10a94:	e589      	b.n	105aa <_svfprintf_r+0x1002>
   10a96:	9809      	ldr	r0, [sp, #36]	; 0x24
   10a98:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10a9c:	6805      	ldr	r5, [r0, #0]
   10a9e:	3004      	adds	r0, #4
   10aa0:	2d00      	cmp	r5, #0
   10aa2:	9009      	str	r0, [sp, #36]	; 0x24
   10aa4:	46a2      	mov	sl, r4
   10aa6:	f6be add8 	bge.w	f65a <_svfprintf_r+0xb2>
   10aaa:	f04f 35ff 	mov.w	r5, #4294967295
   10aae:	f7fe bdd4 	b.w	f65a <_svfprintf_r+0xb2>
   10ab2:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10ab6:	f7ff b98d 	b.w	fdd4 <_svfprintf_r+0x82c>
   10aba:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10abe:	f7ff b9cf 	b.w	fe60 <_svfprintf_r+0x8b8>
   10ac2:	9a05      	ldr	r2, [sp, #20]
   10ac4:	230c      	movs	r3, #12
   10ac6:	6013      	str	r3, [r2, #0]
   10ac8:	f04f 30ff 	mov.w	r0, #4294967295
   10acc:	f7fe be6b 	b.w	f7a6 <_svfprintf_r+0x1fe>
   10ad0:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10ad4:	f7ff b8d4 	b.w	fc80 <_svfprintf_r+0x6d8>
   10ad8:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10adc:	f7ff b8a3 	b.w	fc26 <_svfprintf_r+0x67e>
   10ae0:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10ae4:	f7ff b952 	b.w	fd8c <_svfprintf_r+0x7e4>
   10ae8:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
   10aec:	e6a9      	b.n	10842 <_svfprintf_r+0x129a>
   10aee:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10af2:	f7fe be62 	b.w	f7ba <_svfprintf_r+0x212>
   10af6:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10afa:	f7ff b862 	b.w	fbc2 <_svfprintf_r+0x61a>
   10afe:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10b02:	f7fe bf16 	b.w	f932 <_svfprintf_r+0x38a>
   10b06:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
   10b0a:	f7fe bed0 	b.w	f8ae <_svfprintf_r+0x306>
   10b0e:	bf00      	nop
   10b10:	20001dd0 	.word	0x20001dd0
   10b14:	20001dcc 	.word	0x20001dcc

00010b18 <__ssprint_r>:
   10b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b1c:	6893      	ldr	r3, [r2, #8]
   10b1e:	b083      	sub	sp, #12
   10b20:	4690      	mov	r8, r2
   10b22:	2b00      	cmp	r3, #0
   10b24:	d072      	beq.n	10c0c <__ssprint_r+0xf4>
   10b26:	4683      	mov	fp, r0
   10b28:	f04f 0900 	mov.w	r9, #0
   10b2c:	6816      	ldr	r6, [r2, #0]
   10b2e:	6808      	ldr	r0, [r1, #0]
   10b30:	688b      	ldr	r3, [r1, #8]
   10b32:	460d      	mov	r5, r1
   10b34:	464c      	mov	r4, r9
   10b36:	2c00      	cmp	r4, #0
   10b38:	d045      	beq.n	10bc6 <__ssprint_r+0xae>
   10b3a:	429c      	cmp	r4, r3
   10b3c:	461f      	mov	r7, r3
   10b3e:	469a      	mov	sl, r3
   10b40:	d346      	bcc.n	10bd0 <__ssprint_r+0xb8>
   10b42:	89ab      	ldrh	r3, [r5, #12]
   10b44:	f413 6f90 	tst.w	r3, #1152	; 0x480
   10b48:	d02d      	beq.n	10ba6 <__ssprint_r+0x8e>
   10b4a:	696f      	ldr	r7, [r5, #20]
   10b4c:	6929      	ldr	r1, [r5, #16]
   10b4e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   10b52:	ebc1 0a00 	rsb	sl, r1, r0
   10b56:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   10b5a:	1c60      	adds	r0, r4, #1
   10b5c:	107f      	asrs	r7, r7, #1
   10b5e:	4450      	add	r0, sl
   10b60:	42b8      	cmp	r0, r7
   10b62:	463a      	mov	r2, r7
   10b64:	bf84      	itt	hi
   10b66:	4607      	movhi	r7, r0
   10b68:	463a      	movhi	r2, r7
   10b6a:	055b      	lsls	r3, r3, #21
   10b6c:	d533      	bpl.n	10bd6 <__ssprint_r+0xbe>
   10b6e:	4611      	mov	r1, r2
   10b70:	4658      	mov	r0, fp
   10b72:	f7fb fed9 	bl	c928 <_malloc_r>
   10b76:	2800      	cmp	r0, #0
   10b78:	d037      	beq.n	10bea <__ssprint_r+0xd2>
   10b7a:	4652      	mov	r2, sl
   10b7c:	6929      	ldr	r1, [r5, #16]
   10b7e:	9001      	str	r0, [sp, #4]
   10b80:	f7f9 fa90 	bl	a0a4 <memcpy>
   10b84:	89aa      	ldrh	r2, [r5, #12]
   10b86:	9b01      	ldr	r3, [sp, #4]
   10b88:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   10b8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10b90:	81aa      	strh	r2, [r5, #12]
   10b92:	ebca 0207 	rsb	r2, sl, r7
   10b96:	eb03 000a 	add.w	r0, r3, sl
   10b9a:	616f      	str	r7, [r5, #20]
   10b9c:	612b      	str	r3, [r5, #16]
   10b9e:	6028      	str	r0, [r5, #0]
   10ba0:	60aa      	str	r2, [r5, #8]
   10ba2:	4627      	mov	r7, r4
   10ba4:	46a2      	mov	sl, r4
   10ba6:	4652      	mov	r2, sl
   10ba8:	4649      	mov	r1, r9
   10baa:	f7fc f9bd 	bl	cf28 <memmove>
   10bae:	f8d8 2008 	ldr.w	r2, [r8, #8]
   10bb2:	68ab      	ldr	r3, [r5, #8]
   10bb4:	6828      	ldr	r0, [r5, #0]
   10bb6:	1bdb      	subs	r3, r3, r7
   10bb8:	4450      	add	r0, sl
   10bba:	1b14      	subs	r4, r2, r4
   10bbc:	60ab      	str	r3, [r5, #8]
   10bbe:	6028      	str	r0, [r5, #0]
   10bc0:	f8c8 4008 	str.w	r4, [r8, #8]
   10bc4:	b314      	cbz	r4, 10c0c <__ssprint_r+0xf4>
   10bc6:	f8d6 9000 	ldr.w	r9, [r6]
   10bca:	6874      	ldr	r4, [r6, #4]
   10bcc:	3608      	adds	r6, #8
   10bce:	e7b2      	b.n	10b36 <__ssprint_r+0x1e>
   10bd0:	4627      	mov	r7, r4
   10bd2:	46a2      	mov	sl, r4
   10bd4:	e7e7      	b.n	10ba6 <__ssprint_r+0x8e>
   10bd6:	4658      	mov	r0, fp
   10bd8:	f7fc fa64 	bl	d0a4 <_realloc_r>
   10bdc:	4603      	mov	r3, r0
   10bde:	2800      	cmp	r0, #0
   10be0:	d1d7      	bne.n	10b92 <__ssprint_r+0x7a>
   10be2:	6929      	ldr	r1, [r5, #16]
   10be4:	4658      	mov	r0, fp
   10be6:	f7fd f94d 	bl	de84 <_free_r>
   10bea:	230c      	movs	r3, #12
   10bec:	f8cb 3000 	str.w	r3, [fp]
   10bf0:	89ab      	ldrh	r3, [r5, #12]
   10bf2:	2200      	movs	r2, #0
   10bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10bf8:	f04f 30ff 	mov.w	r0, #4294967295
   10bfc:	81ab      	strh	r3, [r5, #12]
   10bfe:	f8c8 2008 	str.w	r2, [r8, #8]
   10c02:	f8c8 2004 	str.w	r2, [r8, #4]
   10c06:	b003      	add	sp, #12
   10c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c0c:	2000      	movs	r0, #0
   10c0e:	f8c8 0004 	str.w	r0, [r8, #4]
   10c12:	b003      	add	sp, #12
   10c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010c18 <__aeabi_uldivmod>:
   10c18:	b953      	cbnz	r3, 10c30 <__aeabi_uldivmod+0x18>
   10c1a:	b94a      	cbnz	r2, 10c30 <__aeabi_uldivmod+0x18>
   10c1c:	2900      	cmp	r1, #0
   10c1e:	bf08      	it	eq
   10c20:	2800      	cmpeq	r0, #0
   10c22:	bf1c      	itt	ne
   10c24:	f04f 31ff 	movne.w	r1, #4294967295
   10c28:	f04f 30ff 	movne.w	r0, #4294967295
   10c2c:	f000 b97e 	b.w	10f2c <__aeabi_idiv0>
   10c30:	f1ad 0c08 	sub.w	ip, sp, #8
   10c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10c38:	f000 f806 	bl	10c48 <__udivmoddi4>
   10c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10c44:	b004      	add	sp, #16
   10c46:	4770      	bx	lr

00010c48 <__udivmoddi4>:
   10c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c4c:	468c      	mov	ip, r1
   10c4e:	460e      	mov	r6, r1
   10c50:	4604      	mov	r4, r0
   10c52:	9d08      	ldr	r5, [sp, #32]
   10c54:	2b00      	cmp	r3, #0
   10c56:	d150      	bne.n	10cfa <__udivmoddi4+0xb2>
   10c58:	428a      	cmp	r2, r1
   10c5a:	4617      	mov	r7, r2
   10c5c:	d96c      	bls.n	10d38 <__udivmoddi4+0xf0>
   10c5e:	fab2 fe82 	clz	lr, r2
   10c62:	f1be 0f00 	cmp.w	lr, #0
   10c66:	d00b      	beq.n	10c80 <__udivmoddi4+0x38>
   10c68:	f1ce 0420 	rsb	r4, lr, #32
   10c6c:	fa20 f404 	lsr.w	r4, r0, r4
   10c70:	fa01 f60e 	lsl.w	r6, r1, lr
   10c74:	ea44 0c06 	orr.w	ip, r4, r6
   10c78:	fa02 f70e 	lsl.w	r7, r2, lr
   10c7c:	fa00 f40e 	lsl.w	r4, r0, lr
   10c80:	ea4f 4917 	mov.w	r9, r7, lsr #16
   10c84:	0c22      	lsrs	r2, r4, #16
   10c86:	fbbc f0f9 	udiv	r0, ip, r9
   10c8a:	fa1f f887 	uxth.w	r8, r7
   10c8e:	fb09 c610 	mls	r6, r9, r0, ip
   10c92:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   10c96:	fb00 f308 	mul.w	r3, r0, r8
   10c9a:	42b3      	cmp	r3, r6
   10c9c:	d909      	bls.n	10cb2 <__udivmoddi4+0x6a>
   10c9e:	19f6      	adds	r6, r6, r7
   10ca0:	f100 32ff 	add.w	r2, r0, #4294967295
   10ca4:	f080 8122 	bcs.w	10eec <__udivmoddi4+0x2a4>
   10ca8:	42b3      	cmp	r3, r6
   10caa:	f240 811f 	bls.w	10eec <__udivmoddi4+0x2a4>
   10cae:	3802      	subs	r0, #2
   10cb0:	443e      	add	r6, r7
   10cb2:	1af6      	subs	r6, r6, r3
   10cb4:	b2a2      	uxth	r2, r4
   10cb6:	fbb6 f3f9 	udiv	r3, r6, r9
   10cba:	fb09 6613 	mls	r6, r9, r3, r6
   10cbe:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   10cc2:	fb03 f808 	mul.w	r8, r3, r8
   10cc6:	45a0      	cmp	r8, r4
   10cc8:	d909      	bls.n	10cde <__udivmoddi4+0x96>
   10cca:	19e4      	adds	r4, r4, r7
   10ccc:	f103 32ff 	add.w	r2, r3, #4294967295
   10cd0:	f080 810a 	bcs.w	10ee8 <__udivmoddi4+0x2a0>
   10cd4:	45a0      	cmp	r8, r4
   10cd6:	f240 8107 	bls.w	10ee8 <__udivmoddi4+0x2a0>
   10cda:	3b02      	subs	r3, #2
   10cdc:	443c      	add	r4, r7
   10cde:	ebc8 0404 	rsb	r4, r8, r4
   10ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10ce6:	2100      	movs	r1, #0
   10ce8:	2d00      	cmp	r5, #0
   10cea:	d062      	beq.n	10db2 <__udivmoddi4+0x16a>
   10cec:	fa24 f40e 	lsr.w	r4, r4, lr
   10cf0:	2300      	movs	r3, #0
   10cf2:	602c      	str	r4, [r5, #0]
   10cf4:	606b      	str	r3, [r5, #4]
   10cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10cfa:	428b      	cmp	r3, r1
   10cfc:	d907      	bls.n	10d0e <__udivmoddi4+0xc6>
   10cfe:	2d00      	cmp	r5, #0
   10d00:	d055      	beq.n	10dae <__udivmoddi4+0x166>
   10d02:	2100      	movs	r1, #0
   10d04:	e885 0041 	stmia.w	r5, {r0, r6}
   10d08:	4608      	mov	r0, r1
   10d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d0e:	fab3 f183 	clz	r1, r3
   10d12:	2900      	cmp	r1, #0
   10d14:	f040 8090 	bne.w	10e38 <__udivmoddi4+0x1f0>
   10d18:	42b3      	cmp	r3, r6
   10d1a:	d302      	bcc.n	10d22 <__udivmoddi4+0xda>
   10d1c:	4282      	cmp	r2, r0
   10d1e:	f200 80f8 	bhi.w	10f12 <__udivmoddi4+0x2ca>
   10d22:	1a84      	subs	r4, r0, r2
   10d24:	eb66 0603 	sbc.w	r6, r6, r3
   10d28:	2001      	movs	r0, #1
   10d2a:	46b4      	mov	ip, r6
   10d2c:	2d00      	cmp	r5, #0
   10d2e:	d040      	beq.n	10db2 <__udivmoddi4+0x16a>
   10d30:	e885 1010 	stmia.w	r5, {r4, ip}
   10d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d38:	b912      	cbnz	r2, 10d40 <__udivmoddi4+0xf8>
   10d3a:	2701      	movs	r7, #1
   10d3c:	fbb7 f7f2 	udiv	r7, r7, r2
   10d40:	fab7 fe87 	clz	lr, r7
   10d44:	f1be 0f00 	cmp.w	lr, #0
   10d48:	d135      	bne.n	10db6 <__udivmoddi4+0x16e>
   10d4a:	1bf3      	subs	r3, r6, r7
   10d4c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   10d50:	fa1f fc87 	uxth.w	ip, r7
   10d54:	2101      	movs	r1, #1
   10d56:	fbb3 f0f8 	udiv	r0, r3, r8
   10d5a:	0c22      	lsrs	r2, r4, #16
   10d5c:	fb08 3610 	mls	r6, r8, r0, r3
   10d60:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   10d64:	fb0c f300 	mul.w	r3, ip, r0
   10d68:	42b3      	cmp	r3, r6
   10d6a:	d907      	bls.n	10d7c <__udivmoddi4+0x134>
   10d6c:	19f6      	adds	r6, r6, r7
   10d6e:	f100 32ff 	add.w	r2, r0, #4294967295
   10d72:	d202      	bcs.n	10d7a <__udivmoddi4+0x132>
   10d74:	42b3      	cmp	r3, r6
   10d76:	f200 80ce 	bhi.w	10f16 <__udivmoddi4+0x2ce>
   10d7a:	4610      	mov	r0, r2
   10d7c:	1af6      	subs	r6, r6, r3
   10d7e:	b2a2      	uxth	r2, r4
   10d80:	fbb6 f3f8 	udiv	r3, r6, r8
   10d84:	fb08 6613 	mls	r6, r8, r3, r6
   10d88:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   10d8c:	fb0c fc03 	mul.w	ip, ip, r3
   10d90:	45a4      	cmp	ip, r4
   10d92:	d907      	bls.n	10da4 <__udivmoddi4+0x15c>
   10d94:	19e4      	adds	r4, r4, r7
   10d96:	f103 32ff 	add.w	r2, r3, #4294967295
   10d9a:	d202      	bcs.n	10da2 <__udivmoddi4+0x15a>
   10d9c:	45a4      	cmp	ip, r4
   10d9e:	f200 80b5 	bhi.w	10f0c <__udivmoddi4+0x2c4>
   10da2:	4613      	mov	r3, r2
   10da4:	ebcc 0404 	rsb	r4, ip, r4
   10da8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10dac:	e79c      	b.n	10ce8 <__udivmoddi4+0xa0>
   10dae:	4629      	mov	r1, r5
   10db0:	4628      	mov	r0, r5
   10db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10db6:	f1ce 0120 	rsb	r1, lr, #32
   10dba:	fa06 f30e 	lsl.w	r3, r6, lr
   10dbe:	fa07 f70e 	lsl.w	r7, r7, lr
   10dc2:	fa20 f901 	lsr.w	r9, r0, r1
   10dc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   10dca:	40ce      	lsrs	r6, r1
   10dcc:	ea49 0903 	orr.w	r9, r9, r3
   10dd0:	fbb6 faf8 	udiv	sl, r6, r8
   10dd4:	ea4f 4419 	mov.w	r4, r9, lsr #16
   10dd8:	fb08 661a 	mls	r6, r8, sl, r6
   10ddc:	fa1f fc87 	uxth.w	ip, r7
   10de0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   10de4:	fb0a f20c 	mul.w	r2, sl, ip
   10de8:	429a      	cmp	r2, r3
   10dea:	fa00 f40e 	lsl.w	r4, r0, lr
   10dee:	d90a      	bls.n	10e06 <__udivmoddi4+0x1be>
   10df0:	19db      	adds	r3, r3, r7
   10df2:	f10a 31ff 	add.w	r1, sl, #4294967295
   10df6:	f080 8087 	bcs.w	10f08 <__udivmoddi4+0x2c0>
   10dfa:	429a      	cmp	r2, r3
   10dfc:	f240 8084 	bls.w	10f08 <__udivmoddi4+0x2c0>
   10e00:	f1aa 0a02 	sub.w	sl, sl, #2
   10e04:	443b      	add	r3, r7
   10e06:	1a9b      	subs	r3, r3, r2
   10e08:	fa1f f989 	uxth.w	r9, r9
   10e0c:	fbb3 f1f8 	udiv	r1, r3, r8
   10e10:	fb08 3311 	mls	r3, r8, r1, r3
   10e14:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   10e18:	fb01 f60c 	mul.w	r6, r1, ip
   10e1c:	429e      	cmp	r6, r3
   10e1e:	d907      	bls.n	10e30 <__udivmoddi4+0x1e8>
   10e20:	19db      	adds	r3, r3, r7
   10e22:	f101 32ff 	add.w	r2, r1, #4294967295
   10e26:	d26b      	bcs.n	10f00 <__udivmoddi4+0x2b8>
   10e28:	429e      	cmp	r6, r3
   10e2a:	d969      	bls.n	10f00 <__udivmoddi4+0x2b8>
   10e2c:	3902      	subs	r1, #2
   10e2e:	443b      	add	r3, r7
   10e30:	1b9b      	subs	r3, r3, r6
   10e32:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   10e36:	e78e      	b.n	10d56 <__udivmoddi4+0x10e>
   10e38:	f1c1 0e20 	rsb	lr, r1, #32
   10e3c:	fa22 f40e 	lsr.w	r4, r2, lr
   10e40:	408b      	lsls	r3, r1
   10e42:	4323      	orrs	r3, r4
   10e44:	fa20 f70e 	lsr.w	r7, r0, lr
   10e48:	fa06 f401 	lsl.w	r4, r6, r1
   10e4c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10e50:	fa26 f60e 	lsr.w	r6, r6, lr
   10e54:	433c      	orrs	r4, r7
   10e56:	fbb6 f9fc 	udiv	r9, r6, ip
   10e5a:	0c27      	lsrs	r7, r4, #16
   10e5c:	fb0c 6619 	mls	r6, ip, r9, r6
   10e60:	fa1f f883 	uxth.w	r8, r3
   10e64:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   10e68:	fb09 f708 	mul.w	r7, r9, r8
   10e6c:	42b7      	cmp	r7, r6
   10e6e:	fa02 f201 	lsl.w	r2, r2, r1
   10e72:	fa00 fa01 	lsl.w	sl, r0, r1
   10e76:	d908      	bls.n	10e8a <__udivmoddi4+0x242>
   10e78:	18f6      	adds	r6, r6, r3
   10e7a:	f109 30ff 	add.w	r0, r9, #4294967295
   10e7e:	d241      	bcs.n	10f04 <__udivmoddi4+0x2bc>
   10e80:	42b7      	cmp	r7, r6
   10e82:	d93f      	bls.n	10f04 <__udivmoddi4+0x2bc>
   10e84:	f1a9 0902 	sub.w	r9, r9, #2
   10e88:	441e      	add	r6, r3
   10e8a:	1bf6      	subs	r6, r6, r7
   10e8c:	b2a0      	uxth	r0, r4
   10e8e:	fbb6 f4fc 	udiv	r4, r6, ip
   10e92:	fb0c 6614 	mls	r6, ip, r4, r6
   10e96:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   10e9a:	fb04 f808 	mul.w	r8, r4, r8
   10e9e:	45b8      	cmp	r8, r7
   10ea0:	d907      	bls.n	10eb2 <__udivmoddi4+0x26a>
   10ea2:	18ff      	adds	r7, r7, r3
   10ea4:	f104 30ff 	add.w	r0, r4, #4294967295
   10ea8:	d228      	bcs.n	10efc <__udivmoddi4+0x2b4>
   10eaa:	45b8      	cmp	r8, r7
   10eac:	d926      	bls.n	10efc <__udivmoddi4+0x2b4>
   10eae:	3c02      	subs	r4, #2
   10eb0:	441f      	add	r7, r3
   10eb2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   10eb6:	ebc8 0707 	rsb	r7, r8, r7
   10eba:	fba0 8902 	umull	r8, r9, r0, r2
   10ebe:	454f      	cmp	r7, r9
   10ec0:	4644      	mov	r4, r8
   10ec2:	464e      	mov	r6, r9
   10ec4:	d314      	bcc.n	10ef0 <__udivmoddi4+0x2a8>
   10ec6:	d029      	beq.n	10f1c <__udivmoddi4+0x2d4>
   10ec8:	b365      	cbz	r5, 10f24 <__udivmoddi4+0x2dc>
   10eca:	ebba 0304 	subs.w	r3, sl, r4
   10ece:	eb67 0706 	sbc.w	r7, r7, r6
   10ed2:	fa07 fe0e 	lsl.w	lr, r7, lr
   10ed6:	40cb      	lsrs	r3, r1
   10ed8:	40cf      	lsrs	r7, r1
   10eda:	ea4e 0303 	orr.w	r3, lr, r3
   10ede:	e885 0088 	stmia.w	r5, {r3, r7}
   10ee2:	2100      	movs	r1, #0
   10ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ee8:	4613      	mov	r3, r2
   10eea:	e6f8      	b.n	10cde <__udivmoddi4+0x96>
   10eec:	4610      	mov	r0, r2
   10eee:	e6e0      	b.n	10cb2 <__udivmoddi4+0x6a>
   10ef0:	ebb8 0402 	subs.w	r4, r8, r2
   10ef4:	eb69 0603 	sbc.w	r6, r9, r3
   10ef8:	3801      	subs	r0, #1
   10efa:	e7e5      	b.n	10ec8 <__udivmoddi4+0x280>
   10efc:	4604      	mov	r4, r0
   10efe:	e7d8      	b.n	10eb2 <__udivmoddi4+0x26a>
   10f00:	4611      	mov	r1, r2
   10f02:	e795      	b.n	10e30 <__udivmoddi4+0x1e8>
   10f04:	4681      	mov	r9, r0
   10f06:	e7c0      	b.n	10e8a <__udivmoddi4+0x242>
   10f08:	468a      	mov	sl, r1
   10f0a:	e77c      	b.n	10e06 <__udivmoddi4+0x1be>
   10f0c:	3b02      	subs	r3, #2
   10f0e:	443c      	add	r4, r7
   10f10:	e748      	b.n	10da4 <__udivmoddi4+0x15c>
   10f12:	4608      	mov	r0, r1
   10f14:	e70a      	b.n	10d2c <__udivmoddi4+0xe4>
   10f16:	3802      	subs	r0, #2
   10f18:	443e      	add	r6, r7
   10f1a:	e72f      	b.n	10d7c <__udivmoddi4+0x134>
   10f1c:	45c2      	cmp	sl, r8
   10f1e:	d3e7      	bcc.n	10ef0 <__udivmoddi4+0x2a8>
   10f20:	463e      	mov	r6, r7
   10f22:	e7d1      	b.n	10ec8 <__udivmoddi4+0x280>
   10f24:	4629      	mov	r1, r5
   10f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f2a:	bf00      	nop

00010f2c <__aeabi_idiv0>:
   10f2c:	4770      	bx	lr
   10f2e:	bf00      	nop

00010f30 <___init_veneer>:
   10f30:	f85f f000 	ldr.w	pc, [pc]	; 10f34 <___init_veneer+0x4>
   10f34:	60001835 	.word	0x60001835
	...

Disassembly of section .fini:

00010f40 <_fini>:
   10f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f42:	bf00      	nop
