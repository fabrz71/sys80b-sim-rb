
C:\Users\Fabrizio\AppData\Local\Temp\VMBuilds\sys80b-sim-rb\teensy31\Debug/sys80b-sim-rb.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 3d 85 00 00 f5 84 00 00     ... ....=.......
      10:	f5 84 00 00 f5 84 00 00 f5 84 00 00 f5 84 00 00     ................
      20:	f5 84 00 00 f5 84 00 00 f5 84 00 00 3d 85 00 00     ............=...
      30:	3d 85 00 00 f5 84 00 00 e1 99 00 00 e5 9a 00 00     =...............
      40:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      50:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      60:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      70:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      80:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      90:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      a0:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      b0:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      c0:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      d0:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      e0:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
      f0:	3d 85 00 00 45 a2 00 00 3d 85 00 00 71 a3 00 00     =...E...=...q...
     100:	3d 85 00 00 9d a4 00 00 3d 85 00 00 3d 85 00 00     =.......=...=...
     110:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     120:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     130:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     140:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     150:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     160:	3d 85 00 00 15 8a 00 00 3d 85 00 00 3d 85 00 00     =.......=...=...
     170:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     180:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     190:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     1a0:	3d 85 00 00 3d 85 00 00 3d 85 00 00 3d 85 00 00     =...=...=...=...
     1b0:	3d 85 00 00 3d 85 00 00 3d 85 00 00                 =...=...=...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f008 f9b8 	bl	8544 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #elif F_CPU > 16000000
    #error "MK66FX1M0 does not support this clock speed yet...."
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
     286:	2205      	movs	r2, #5
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 144000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(12); // config PLL for 144 MHz output
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
     28a:	2243      	movs	r2, #67	; 0x43
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash, USB = 72 * 2 / 3
	#if F_BUS == 36000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(2);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
     2a4:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 72000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(2);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2) | SIM_CLKDIV2_USBFRAC;
     2a6:	2105      	movs	r1, #5
     2a8:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2aa:	2220      	movs	r2, #32
     2ac:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ae:	799a      	ldrb	r2, [r3, #6]
     2b0:	f002 020c 	and.w	r2, r2, #12
     2b4:	2a0c      	cmp	r2, #12
     2b6:	d1fa      	bne.n	2ae <ResetHandler+0xf2>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b8:	4b2c      	ldr	r3, [pc, #176]	; (36c <ResetHandler+0x1b0>)
     2ba:	4a2d      	ldr	r2, [pc, #180]	; (370 <ResetHandler+0x1b4>)
     2bc:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2be:	4b2d      	ldr	r3, [pc, #180]	; (374 <ResetHandler+0x1b8>)
     2c0:	4a2d      	ldr	r2, [pc, #180]	; (378 <ResetHandler+0x1bc>)
     2c2:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c4:	2200      	movs	r2, #0
     2c6:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c8:	2207      	movs	r2, #7
     2ca:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ce:	4a2b      	ldr	r2, [pc, #172]	; (37c <ResetHandler+0x1c0>)
     2d0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d4:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d6:	f008 fa53 	bl	8780 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	07da      	lsls	r2, r3, #31
     2e0:	d505      	bpl.n	2ee <ResetHandler+0x132>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e2:	4827      	ldr	r0, [pc, #156]	; (380 <ResetHandler+0x1c4>)
     2e4:	f008 f9ac 	bl	8640 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e8:	4b26      	ldr	r3, [pc, #152]	; (384 <ResetHandler+0x1c8>)
     2ea:	4a27      	ldr	r2, [pc, #156]	; (388 <ResetHandler+0x1cc>)
     2ec:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ee:	4b27      	ldr	r3, [pc, #156]	; (38c <ResetHandler+0x1d0>)
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	065b      	lsls	r3, r3, #25
     2f4:	d509      	bpl.n	30a <ResetHandler+0x14e>
     2f6:	4c23      	ldr	r4, [pc, #140]	; (384 <ResetHandler+0x1c8>)
     2f8:	4b23      	ldr	r3, [pc, #140]	; (388 <ResetHandler+0x1cc>)
     2fa:	6822      	ldr	r2, [r4, #0]
     2fc:	429a      	cmp	r2, r3
     2fe:	d104      	bne.n	30a <ResetHandler+0x14e>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	481f      	ldr	r0, [pc, #124]	; (380 <ResetHandler+0x1c4>)
     302:	f008 f99d 	bl	8640 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     306:	2300      	movs	r3, #0
     308:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     30a:	f00a fdf5 	bl	aef8 <__libc_init_array>

	startup_late_hook();
     30e:	f008 f91f 	bl	8550 <startup_late_hook>
	main();
     312:	f009 fbef 	bl	9af4 <main>
     316:	e7fe      	b.n	316 <ResetHandler+0x15a>
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff91d0 	.word	0x1fff91d0
     33c:	00010d70 	.word	0x00010d70
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff91d0 	.word	0x1fff91d0
     348:	1fff9894 	.word	0x1fff9894
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	40048004 	.word	0x40048004
     370:	000510c0 	.word	0x000510c0
     374:	e000e014 	.word	0xe000e014
     378:	0001193f 	.word	0x0001193f
     37c:	20200000 	.word	0x20200000
     380:	5e6e59df 	.word	0x5e6e59df
     384:	4003e01c 	.word	0x4003e01c
     388:	5a94c3a5 	.word	0x5a94c3a5
     38c:	4007f000 	.word	0x4007f000
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff91d0 	.word	0x1fff91d0
     42c:	00000000 	.word	0x00000000
     430:	00010d6c 	.word	0x00010d6c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff91d4 	.word	0x1fff91d4
     460:	00010d6c 	.word	0x00010d6c
     464:	1fff91d0 	.word	0x1fff91d0
     468:	00000000 	.word	0x00000000

0000046c <setup>:
void updateLedGrid(lg_mode mode);
void sys_test();
void sysio_test();
void _delay(Sys80b* s, uint16_t t);

void setup() { 
     46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    board.begin();
     46e:	4f1b      	ldr	r7, [pc, #108]	; (4dc <setup+0x70>)
    lcdOutputEnabled = false;
     470:	4c1b      	ldr	r4, [pc, #108]	; (4e0 <setup+0x74>)
    ledGridMode = LG_LIGHTS;
    prFreeMem();
#ifndef TEST_PROC
    //Serial.println(F("Game instantiation..."));
    delay(100);
    game = new _GAME_IMPLEM_();
     472:	4e1c      	ldr	r6, [pc, #112]	; (4e4 <setup+0x78>)
void sys_test();
void sysio_test();
void _delay(Sys80b* s, uint16_t t);

void setup() { 
    board.begin();
     474:	4638      	mov	r0, r7
     476:	f005 f859 	bl	552c <Board_Sys80b::begin()>
    lcdOutputEnabled = false;
    serialOutputEnabled = true;
     47a:	491b      	ldr	r1, [pc, #108]	; (4e8 <setup+0x7c>)
    ledGridMode = LG_LIGHTS;
     47c:	4b1b      	ldr	r3, [pc, #108]	; (4ec <setup+0x80>)
     47e:	2202      	movs	r2, #2
void sysio_test();
void _delay(Sys80b* s, uint16_t t);

void setup() { 
    board.begin();
    lcdOutputEnabled = false;
     480:	2500      	movs	r5, #0
    serialOutputEnabled = true;
     482:	2001      	movs	r0, #1
    ledGridMode = LG_LIGHTS;
     484:	701a      	strb	r2, [r3, #0]
void _delay(Sys80b* s, uint16_t t);

void setup() { 
    board.begin();
    lcdOutputEnabled = false;
    serialOutputEnabled = true;
     486:	7008      	strb	r0, [r1, #0]
void sysio_test();
void _delay(Sys80b* s, uint16_t t);

void setup() { 
    board.begin();
    lcdOutputEnabled = false;
     488:	7025      	strb	r5, [r4, #0]
    serialOutputEnabled = true;
    ledGridMode = LG_LIGHTS;
    prFreeMem();
     48a:	f003 fe33 	bl	40f4 <msg::prFreeMem()>
#ifndef TEST_PROC
    //Serial.println(F("Game instantiation..."));
    delay(100);
     48e:	2064      	movs	r0, #100	; 0x64
     490:	f008 f926 	bl	86e0 <delay>
    game = new _GAME_IMPLEM_();
     494:	f640 6004 	movw	r0, #3588	; 0xe04
     498:	f009 fb34 	bl	9b04 <operator new(unsigned int)>
     49c:	4604      	mov	r4, r0
     49e:	f000 fab1 	bl	a04 <BigHouse::BigHouse()>
    sys = game;
     4a2:	4b13      	ldr	r3, [pc, #76]	; (4f0 <setup+0x84>)

public:
	Sys80b();
	virtual ~Sys80b();

	inline void connectHardware(Board_Sys80b &board) { hw = &board; }
     4a4:	f8c4 7280 	str.w	r7, [r4, #640]	; 0x280
    sys->connectHardware(board);
    sys->reset();
     4a8:	4620      	mov	r0, r4
    prFreeMem();
#ifndef TEST_PROC
    //Serial.println(F("Game instantiation..."));
    delay(100);
    game = new _GAME_IMPLEM_();
    sys = game;
     4aa:	601c      	str	r4, [r3, #0]
    ledGridMode = LG_LIGHTS;
    prFreeMem();
#ifndef TEST_PROC
    //Serial.println(F("Game instantiation..."));
    delay(100);
    game = new _GAME_IMPLEM_();
     4ac:	6034      	str	r4, [r6, #0]
    sys = game;
    sys->connectHardware(board);
    sys->reset();
     4ae:	f004 f933 	bl	4718 <Sys80b::reset()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4b2:	210b      	movs	r1, #11
     4b4:	480f      	ldr	r0, [pc, #60]	; (4f4 <setup+0x88>)
     4b6:	f009 f92d 	bl	9714 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     4ba:	480f      	ldr	r0, [pc, #60]	; (4f8 <setup+0x8c>)
     4bc:	f009 fb68 	bl	9b90 <Print::println()>
    Serial.println(F("Starting..."));
    delay(100);
     4c0:	2064      	movs	r0, #100	; 0x64
     4c2:	f008 f90d 	bl	86e0 <delay>
    game->start();
     4c6:	6830      	ldr	r0, [r6, #0]
     4c8:	6803      	ldr	r3, [r0, #0]
     4ca:	69db      	ldr	r3, [r3, #28]
     4cc:	4798      	blx	r3
    sys->reset();
    Serial.println(F("Starting..."));
    delay(100);
    sys->reset();
#endif
    millisRoutineT = 0;
     4ce:	4b0b      	ldr	r3, [pc, #44]	; (4fc <setup+0x90>)
     4d0:	601d      	str	r5, [r3, #0]
    prFreeMem();
}
     4d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(F("Starting..."));
    delay(100);
    sys->reset();
#endif
    millisRoutineT = 0;
    prFreeMem();
     4d6:	f003 be0d 	b.w	40f4 <msg::prFreeMem()>
     4da:	bf00      	nop
     4dc:	1fff91ec 	.word	0x1fff91ec
     4e0:	1fff92d4 	.word	0x1fff92d4
     4e4:	1fff9294 	.word	0x1fff9294
     4e8:	1fff92cc 	.word	0x1fff92cc
     4ec:	1fff9298 	.word	0x1fff9298
     4f0:	1fff9290 	.word	0x1fff9290
     4f4:	0000f488 	.word	0x0000f488
     4f8:	1fff876c 	.word	0x1fff876c
     4fc:	1fff928c 	.word	0x1fff928c

00000500 <checkBoardButtons(unsigned long&)>:
    updateLedGrid(ledGridMode); // LED grid update
    checkBoardButtons(ms);
    game->millisRoutine(ms);
}

void checkBoardButtons(uint32_t& ms) {
     500:	b538      	push	{r3, r4, r5, lr}
    // PRB buttons check
    if (ms % 10 == 0) { // Debounced on-board buttons update
     502:	6801      	ldr	r1, [r0, #0]
     504:	4b10      	ldr	r3, [pc, #64]	; (548 <checkBoardButtons(unsigned long&)+0x48>)
     506:	fba3 2301 	umull	r2, r3, r3, r1
     50a:	08db      	lsrs	r3, r3, #3
     50c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     510:	ebb1 0443 	subs.w	r4, r1, r3, lsl #1
     514:	d000      	beq.n	518 <checkBoardButtons(unsigned long&)+0x18>
     516:	bd38      	pop	{r3, r4, r5, pc}
     518:	4605      	mov	r5, r0
        if (board.readButtonsChange()) {
     51a:	480c      	ldr	r0, [pc, #48]	; (54c <checkBoardButtons(unsigned long&)+0x4c>)
     51c:	f004 ffc8 	bl	54b0 <Board_Sys80b::readButtonsChange()>
     520:	2800      	cmp	r0, #0
     522:	d0f8      	beq.n	516 <checkBoardButtons(unsigned long&)+0x16>
            ButtonID b = board.readButtons();
     524:	4809      	ldr	r0, [pc, #36]	; (54c <checkBoardButtons(unsigned long&)+0x4c>)
     526:	f004 ffa3 	bl	5470 <Board_Sys80b::readButtons()>
     52a:	3801      	subs	r0, #1
     52c:	b2c0      	uxtb	r0, r0
     52e:	2802      	cmp	r0, #2
     530:	bf9c      	itt	ls
     532:	4b07      	ldrls	r3, [pc, #28]	; (550 <checkBoardButtons(unsigned long&)+0x50>)
     534:	5c19      	ldrbls	r1, [r3, r0]
                k = REPLAY_KEY;
                break;
            default:
                k = NO_KEY;
            }
            game->updUserKeyState(k, ms);
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <checkBoardButtons(unsigned long&)+0x54>)

void checkBoardButtons(uint32_t& ms) {
    // PRB buttons check
    if (ms % 10 == 0) { // Debounced on-board buttons update
        if (board.readButtonsChange()) {
            ButtonID b = board.readButtons();
     538:	bf88      	it	hi
     53a:	4621      	movhi	r1, r4
                k = REPLAY_KEY;
                break;
            default:
                k = NO_KEY;
            }
            game->updUserKeyState(k, ms);
     53c:	462a      	mov	r2, r5
     53e:	6818      	ldr	r0, [r3, #0]
        }
    }
}
     540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                k = REPLAY_KEY;
                break;
            default:
                k = NO_KEY;
            }
            game->updUserKeyState(k, ms);
     544:	f004 ba34 	b.w	49b0 <Sys80b::updUserKeyState(UserKey, unsigned long&)>
     548:	cccccccd 	.word	0xcccccccd
     54c:	1fff91ec 	.word	0x1fff91ec
     550:	0000f4bc 	.word	0x0000f4bc
     554:	1fff9294 	.word	0x1fff9294

00000558 <updateLedGrid(lg_mode)>:
        }
    }
}

void updateLedGrid(lg_mode mode) {
     558:	b570      	push	{r4, r5, r6, lr}
    byte s, b = 0;

    s = game->switchGrid.getCurrentStrobe();
     55a:	4e16      	ldr	r6, [pc, #88]	; (5b4 <updateLedGrid(lg_mode)+0x5c>)
     55c:	6833      	ldr	r3, [r6, #0]
            game->updUserKeyState(k, ms);
        }
    }
}

void updateLedGrid(lg_mode mode) {
     55e:	4604      	mov	r4, r0
    byte s, b = 0;

    s = game->switchGrid.getCurrentStrobe();
     560:	f103 0048 	add.w	r0, r3, #72	; 0x48
     564:	f003 ff54 	bl	4410 <SwitchGrid8x8::getCurrentStrobe()>
    switch (mode) {
     568:	2c01      	cmp	r4, #1
}

void updateLedGrid(lg_mode mode) {
    byte s, b = 0;

    s = game->switchGrid.getCurrentStrobe();
     56a:	4605      	mov	r5, r0
    switch (mode) {
     56c:	d00e      	beq.n	58c <updateLedGrid(lg_mode)+0x34>
     56e:	d303      	bcc.n	578 <updateLedGrid(lg_mode)+0x20>
     570:	2c02      	cmp	r4, #2
     572:	d10a      	bne.n	58a <updateLedGrid(lg_mode)+0x32>
            else b = 0;
        }
        else b = game->switchGrid.getCurrentRow();
        break;
    case LG_LIGHTS:
        if (s < 6) b = game->lamps->getStates8(s);
     574:	2805      	cmp	r0, #5
     576:	d911      	bls.n	59c <updateLedGrid(lg_mode)+0x44>
        else b = 0;
     578:	2200      	movs	r2, #0
        break;
        b = 0;
    default:
        return;
    }
    board.ledGrid->setRowReverse(s, b);
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <updateLedGrid(lg_mode)+0x60>)
     57c:	4629      	mov	r1, r5
     57e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
}
     582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        break;
        b = 0;
    default:
        return;
    }
    board.ledGrid->setRowReverse(s, b);
     586:	f005 b9d5 	b.w	5934 <Led8x8::setRowReverse(unsigned char, unsigned char)>
     58a:	bd70      	pop	{r4, r5, r6, pc}
    byte s, b = 0;

    s = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
        if (s == 7) {
     58c:	2d07      	cmp	r5, #7
            if (game->readSlamSwitch()) b = 0xff;
     58e:	6830      	ldr	r0, [r6, #0]
    byte s, b = 0;

    s = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
        if (s == 7) {
     590:	d00b      	beq.n	5aa <updateLedGrid(lg_mode)+0x52>
            if (game->readSlamSwitch()) b = 0xff;
            else b = 0;
        }
        else b = game->switchGrid.getCurrentRow();
     592:	3048      	adds	r0, #72	; 0x48
     594:	f003 ff40 	bl	4418 <SwitchGrid8x8::getCurrentRow()>
     598:	4602      	mov	r2, r0
     59a:	e7ee      	b.n	57a <updateLedGrid(lg_mode)+0x22>
        break;
    case LG_LIGHTS:
        if (s < 6) b = game->lamps->getStates8(s);
     59c:	6833      	ldr	r3, [r6, #0]
     59e:	b281      	uxth	r1, r0
     5a0:	6858      	ldr	r0, [r3, #4]
     5a2:	f001 ff81 	bl	24a8 <BitMappedSet::getStates8(unsigned short)>
     5a6:	4602      	mov	r2, r0
     5a8:	e7e7      	b.n	57a <updateLedGrid(lg_mode)+0x22>

    s = game->switchGrid.getCurrentStrobe();
    switch (mode) {
    case LG_SWITCHES:
        if (s == 7) {
            if (game->readSlamSwitch()) b = 0xff;
     5aa:	f004 f94b 	bl	4844 <Sys80b::readSlamSwitch()>
     5ae:	4240      	negs	r0, r0
     5b0:	b2c2      	uxtb	r2, r0
     5b2:	e7e2      	b.n	57a <updateLedGrid(lg_mode)+0x22>
     5b4:	1fff9294 	.word	0x1fff9294
     5b8:	1fff91ec 	.word	0x1fff91ec

000005bc <millisRoutine(unsigned long&)>:
#endif
}

#ifndef TEST_PROC
void millisRoutine(uint32_t& ms) {
    updateLedGrid(ledGridMode); // LED grid update
     5bc:	4b07      	ldr	r3, [pc, #28]	; (5dc <millisRoutine(unsigned long&)+0x20>)
    outpln("us work time)");
#endif
}

#ifndef TEST_PROC
void millisRoutine(uint32_t& ms) {
     5be:	b510      	push	{r4, lr}
     5c0:	4604      	mov	r4, r0
    updateLedGrid(ledGridMode); // LED grid update
     5c2:	7818      	ldrb	r0, [r3, #0]
     5c4:	f7ff ffc8 	bl	558 <updateLedGrid(lg_mode)>
    checkBoardButtons(ms);
     5c8:	4620      	mov	r0, r4
     5ca:	f7ff ff99 	bl	500 <checkBoardButtons(unsigned long&)>
    game->millisRoutine(ms);
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <millisRoutine(unsigned long&)+0x24>)
     5d0:	4621      	mov	r1, r4
     5d2:	6818      	ldr	r0, [r3, #0]
}
     5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#ifndef TEST_PROC
void millisRoutine(uint32_t& ms) {
    updateLedGrid(ledGridMode); // LED grid update
    checkBoardButtons(ms);
    game->millisRoutine(ms);
     5d8:	f003 b968 	b.w	38ac <Game::millisRoutine(unsigned long&)>
     5dc:	1fff9298 	.word	0x1fff9298
     5e0:	1fff9294 	.word	0x1fff9294

000005e4 <loop>:
    millisRoutineT = 0;
    prFreeMem();
}

// top-most Teensy loop
void loop() {
     5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5e8:	4d36      	ldr	r5, [pc, #216]	; (6c4 <L_445_delayMicroseconds+0xae>)
     5ea:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 6e4 <L_445_delayMicroseconds+0xce>
     5ee:	b08c      	sub	sp, #48	; 0x30
    String s;
     5f0:	a804      	add	r0, sp, #16
     5f2:	2100      	movs	r1, #0
     5f4:	f009 fba2 	bl	9d3c <String::String(char const*)>
     5f8:	682b      	ldr	r3, [r5, #0]
     5fa:	9302      	str	r3, [sp, #8]
  uint32_t t, loopStartT; // [ms]
  uint32_t cumWorkTime, batchPeriod, t1, dt; // [us]
  byte busy_perc; // [%]
  uint32_t loops;

    loops = 0;
     5fc:	2700      	movs	r7, #0
	return ret;
     5fe:	f8dd 9008 	ldr.w	r9, [sp, #8]

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt - 1);
      t = millis();

      if (t != millisRoutineT) {
     602:	4646      	mov	r6, r8

    loops = 0;
    cumWorkTime = 0;
    batchPeriod = BATCH_DELAY * 1000u;
    loopStartT = millis();
    dt = 0;
     604:	4638      	mov	r0, r7
  uint32_t cumWorkTime, batchPeriod, t1, dt; // [us]
  byte busy_perc; // [%]
  uint32_t loops;

    loops = 0;
    cumWorkTime = 0;
     606:	463c      	mov	r4, r7
#elif F_CPU == 120000000
	uint32_t n = usec * 40;
#elif F_CPU == 96000000
	uint32_t n = usec << 5;
#elif F_CPU == 72000000
	uint32_t n = usec * 24;
     608:	f5c0 7379 	rsb	r3, r0, #996	; 0x3e4
     60c:	3303      	adds	r3, #3
     60e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	uint32_t n = usec;
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
     612:	00db      	lsls	r3, r3, #3
     614:	d001      	beq.n	61a <L_445_delayMicroseconds+0x4>

00000616 <L_445_delayMicroseconds>:
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
     616:	3b01      	subs	r3, #1
     618:	d1fd      	bne.n	616 <L_445_delayMicroseconds>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     61a:	682b      	ldr	r3, [r5, #0]
     61c:	9303      	str	r3, [sp, #12]
	return ret;
     61e:	9b03      	ldr	r3, [sp, #12]

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt - 1);
      t = millis();

      if (t != millisRoutineT) {
     620:	f8d8 2000 	ldr.w	r2, [r8]
    loopStartT = millis();
    dt = 0;

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt - 1);
      t = millis();
     624:	9301      	str	r3, [sp, #4]

      if (t != millisRoutineT) {
     626:	429a      	cmp	r2, r3
		millisRoutine(t);
        dt = micros() - t1;
        cumWorkTime += dt;
      }

      loops++;
     628:	f107 0701 	add.w	r7, r7, #1

    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt - 1);
      t = millis();

      if (t != millisRoutineT) {
     62c:	d00d      	beq.n	64a <L_445_delayMicroseconds+0x34>
        t1 = micros();
     62e:	f008 f833 	bl	8698 <micros>
        millisRoutineT = t;
     632:	9b01      	ldr	r3, [sp, #4]
     634:	6033      	str	r3, [r6, #0]
    do { // Batch loop
      delayMicroseconds(BATCH_DELAY - dt - 1);
      t = millis();

      if (t != millisRoutineT) {
        t1 = micros();
     636:	4682      	mov	sl, r0
        millisRoutineT = t;
		millisRoutine(t);
     638:	a801      	add	r0, sp, #4
     63a:	f7ff ffbf 	bl	5bc <millisRoutine(unsigned long&)>
        dt = micros() - t1;
     63e:	f008 f82b 	bl	8698 <micros>
     642:	9b01      	ldr	r3, [sp, #4]
     644:	ebca 0000 	rsb	r0, sl, r0
        cumWorkTime += dt;
     648:	4404      	add	r4, r0
      }

      loops++;
    } while (t - loopStartT < BATCH_DELAY);
     64a:	ebc9 0303 	rsb	r3, r9, r3
     64e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     652:	d3d9      	bcc.n	608 <loop+0x24>
    busy_perc = (byte)((cumWorkTime * 100) / batchPeriod);
	clr();
     654:	f003 fc42 	bl	3edc <msg::clr()>
    s = game->display.toString();
     658:	4b1b      	ldr	r3, [pc, #108]	; (6c8 <L_445_delayMicroseconds+0xb2>)
     65a:	6819      	ldr	r1, [r3, #0]
     65c:	a808      	add	r0, sp, #32
     65e:	310c      	adds	r1, #12
     660:	f004 fb34 	bl	4ccc <Sys80b_Display::toString()>
     664:	a908      	add	r1, sp, #32
     666:	a804      	add	r0, sp, #16
     668:	f009 fbfa 	bl	9e60 <String::operator=(String&&)>
     66c:	a808      	add	r0, sp, #32
     66e:	f009 fb25 	bl	9cbc <String::~String()>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     672:	a904      	add	r1, sp, #16
     674:	4815      	ldr	r0, [pc, #84]	; (6cc <L_445_delayMicroseconds+0xb6>)
     676:	f009 fa65 	bl	9b44 <Print::print(String const&)>
     67a:	4814      	ldr	r0, [pc, #80]	; (6cc <L_445_delayMicroseconds+0xb6>)
     67c:	f009 fa88 	bl	9b90 <Print::println()>
    Serial.println(s);

    outp(busy_perc);
     680:	2364      	movs	r3, #100	; 0x64
     682:	4813      	ldr	r0, [pc, #76]	; (6d0 <L_445_delayMicroseconds+0xba>)
     684:	fb03 f304 	mul.w	r3, r3, r4
     688:	fba0 3003 	umull	r3, r0, r0, r3
     68c:	f3c0 4087 	ubfx	r0, r0, #18, #8
     690:	f003 fc6a 	bl	3f68 <msg::outp(unsigned long)>
	outp("% - ");
     694:	480f      	ldr	r0, [pc, #60]	; (6d4 <L_445_delayMicroseconds+0xbe>)
     696:	f003 fc65 	bl	3f64 <msg::outp(char const*)>
	outp(loops);
     69a:	4638      	mov	r0, r7
     69c:	f003 fc64 	bl	3f68 <msg::outp(unsigned long)>
	outpln(" loops/s");
     6a0:	480d      	ldr	r0, [pc, #52]	; (6d8 <L_445_delayMicroseconds+0xc2>)
     6a2:	f003 fcd3 	bl	404c <msg::outpln(char const*)>
    outp("(");
     6a6:	480d      	ldr	r0, [pc, #52]	; (6dc <L_445_delayMicroseconds+0xc6>)
     6a8:	f003 fc5c 	bl	3f64 <msg::outp(char const*)>
    outp(cumWorkTime);
     6ac:	4620      	mov	r0, r4
     6ae:	f003 fc5b 	bl	3f68 <msg::outp(unsigned long)>
    outpln("us work time)");
     6b2:	480b      	ldr	r0, [pc, #44]	; (6e0 <L_445_delayMicroseconds+0xca>)
     6b4:	f003 fcca 	bl	404c <msg::outpln(char const*)>
    prFreeMem();
}

// top-most Teensy loop
void loop() {
    String s;
     6b8:	a804      	add	r0, sp, #16
     6ba:	f009 faff 	bl	9cbc <String::~String()>
	outpln(" loops/s");
    outp("(");
    outp(cumWorkTime);
    outpln("us work time)");
#endif
}
     6be:	b00c      	add	sp, #48	; 0x30
     6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6c4:	1fff959c 	.word	0x1fff959c
     6c8:	1fff9294 	.word	0x1fff9294
     6cc:	1fff876c 	.word	0x1fff876c
     6d0:	431bde83 	.word	0x431bde83
     6d4:	0000f494 	.word	0x0000f494
     6d8:	0000f49c 	.word	0x0000f49c
     6dc:	0000f4a8 	.word	0x0000f4a8
     6e0:	0000f4ac 	.word	0x0000f4ac
     6e4:	1fff928c 	.word	0x1fff928c

000006e8 <_GLOBAL__sub_I_board>:
    for (j = 0; j < t; j++) {
        m = millis();
        s->_millisRoutine(m);
        delayMicroseconds(500);
    }
     6e8:	b510      	push	{r4, lr}
using namespace msg;

#define BATCH_DELAY 1000    // statistic loop duration (ms)
//#define TEST_PROC

Board_Sys80b board;
     6ea:	4c05      	ldr	r4, [pc, #20]	; (700 <_GLOBAL__sub_I_board+0x18>)
     6ec:	4620      	mov	r0, r4
     6ee:	f004 fe35 	bl	535c <Board_Sys80b::Board_Sys80b()>
     6f2:	4620      	mov	r0, r4
     6f4:	4a03      	ldr	r2, [pc, #12]	; (704 <_GLOBAL__sub_I_board+0x1c>)
     6f6:	4904      	ldr	r1, [pc, #16]	; (708 <_GLOBAL__sub_I_board+0x20>)
    for (j = 0; j < t; j++) {
        m = millis();
        s->_millisRoutine(m);
        delayMicroseconds(500);
    }
     6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
using namespace msg;

#define BATCH_DELAY 1000    // statistic loop duration (ms)
//#define TEST_PROC

Board_Sys80b board;
     6fc:	f00a bbea 	b.w	aed4 <__aeabi_atexit>
     700:	1fff91ec 	.word	0x1fff91ec
     704:	1fff8720 	.word	0x1fff8720
     708:	00005439 	.word	0x00005439

0000070c <BigHouse::onButtonPressed(UserKey)>:
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}

void BigHouse::onButtonPressed(UserKey butt) {
     70c:	4770      	bx	lr
     70e:	bf00      	nop

00000710 <BigHouse::~BigHouse()>:
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     710:	4b96      	ldr	r3, [pc, #600]	; (96c <BigHouse::~BigHouse()+0x25c>)
     712:	f103 022c 	add.w	r2, r3, #44	; 0x2c
     716:	b570      	push	{r4, r5, r6, lr}
	delete& extraball_ls;
     718:	2104      	movs	r1, #4
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     71a:	4604      	mov	r4, r0
     71c:	6003      	str	r3, [r0, #0]
     71e:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
	delete& extraball_ls;
     722:	f500 60aa 	add.w	r0, r0, #1360	; 0x550
     726:	f009 f9f3 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& lastchance_ls;
     72a:	f204 5054 	addw	r0, r4, #1364	; 0x554
     72e:	2104      	movs	r1, #4
     730:	f009 f9ee 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& special_ls;
     734:	f504 60ab 	add.w	r0, r4, #1368	; 0x558
     738:	2104      	movs	r1, #4
     73a:	f009 f9e9 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& wall_ls;
     73e:	f204 505c 	addw	r0, r4, #1372	; 0x55c
     742:	2104      	movs	r1, #4
     744:	f009 f9e4 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& break_ls;
     748:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
     74c:	2104      	movs	r1, #4
     74e:	f009 f9df 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& jail_ls;
     752:	f204 5064 	addw	r0, r4, #1380	; 0x564
     756:	2104      	movs	r1, #4
     758:	f009 f9da 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& multi_ls;
     75c:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
     760:	2104      	movs	r1, #4
     762:	f009 f9d5 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& cellblock_ls;
     766:	f204 506c 	addw	r0, r4, #1388	; 0x56c
     76a:	2104      	movs	r1, #4
     76c:	f009 f9d0 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& lightshow_ls;
     770:	f504 60ae 	add.w	r0, r4, #1392	; 0x570
     774:	2104      	movs	r1, #4
     776:	f009 f9cb 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& droptarget_ls;
     77a:	f204 5074 	addw	r0, r4, #1396	; 0x574
     77e:	2104      	movs	r1, #4
     780:	f009 f9c6 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& show1_ls;
     784:	f504 60af 	add.w	r0, r4, #1400	; 0x578
     788:	2104      	movs	r1, #4
     78a:	f009 f9c1 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& show2_ls;
     78e:	f204 507c 	addw	r0, r4, #1404	; 0x57c
     792:	2104      	movs	r1, #4
     794:	f009 f9bc 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& show3_ls;
     798:	f504 60b0 	add.w	r0, r4, #1408	; 0x580
     79c:	2104      	movs	r1, #4
     79e:	f009 f9b7 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& show4_ls;
     7a2:	f204 5084 	addw	r0, r4, #1412	; 0x584
     7a6:	2104      	movs	r1, #4
     7a8:	f009 f9b2 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& show5_ls;
     7ac:	f504 60b1 	add.w	r0, r4, #1416	; 0x588
     7b0:	2104      	movs	r1, #4
     7b2:	f009 f9ad 	bl	9b10 <operator delete(void*, unsigned int)>
	delete& show6_ls;
     7b6:	2104      	movs	r1, #4
     7b8:	f204 508c 	addw	r0, r4, #1420	; 0x58c
     7bc:	f009 f9a8 	bl	9b10 <operator delete(void*, unsigned int)>
	delete[] lShow_set;
     7c0:	f504 60b2 	add.w	r0, r4, #1424	; 0x590
     7c4:	f009 f9a2 	bl	9b0c <operator delete[](void*)>
//#include "Sys80bIO.h"
#include "Sys80b.h"

//using namespace Sys80bIO;

class Sys80b_Actuator {
     7c8:	f604 50b4 	addw	r0, r4, #3508	; 0xdb4
     7cc:	f009 fa76 	bl	9cbc <String::~String()>
     7d0:	f604 509c 	addw	r0, r4, #3484	; 0xd9c
     7d4:	f009 fa72 	bl	9cbc <String::~String()>
     7d8:	f604 5084 	addw	r0, r4, #3460	; 0xd84
     7dc:	f009 fa6e 	bl	9cbc <String::~String()>
     7e0:	f604 506c 	addw	r0, r4, #3436	; 0xd6c
     7e4:	f009 fa6a 	bl	9cbc <String::~String()>
     7e8:	f604 5054 	addw	r0, r4, #3412	; 0xd54
     7ec:	f009 fa66 	bl	9cbc <String::~String()>
     7f0:	f604 503c 	addw	r0, r4, #3388	; 0xd3c
     7f4:	f009 fa62 	bl	9cbc <String::~String()>
     7f8:	f604 5024 	addw	r0, r4, #3364	; 0xd24
     7fc:	f009 fa5e 	bl	9cbc <String::~String()>
     800:	f604 500c 	addw	r0, r4, #3340	; 0xd0c
     804:	f009 fa5a 	bl	9cbc <String::~String()>
     808:	f604 40f4 	addw	r0, r4, #3316	; 0xcf4
     80c:	f009 fa56 	bl	9cbc <String::~String()>
     810:	f604 40dc 	addw	r0, r4, #3292	; 0xcdc
     814:	f009 fa52 	bl	9cbc <String::~String()>

#include "Arduino.h"
#include "Sys80b.h"
//class Sys80b;

class Sys80b_Sensor {
     818:	f504 604c 	add.w	r0, r4, #3264	; 0xcc0
     81c:	f009 fa4e 	bl	9cbc <String::~String()>
     820:	f604 40a8 	addw	r0, r4, #3240	; 0xca8
     824:	f009 fa4a 	bl	9cbc <String::~String()>
     828:	f504 6049 	add.w	r0, r4, #3216	; 0xc90
     82c:	f009 fa46 	bl	9cbc <String::~String()>
     830:	f604 4078 	addw	r0, r4, #3192	; 0xc78
     834:	f009 fa42 	bl	9cbc <String::~String()>
     838:	f504 6046 	add.w	r0, r4, #3168	; 0xc60
     83c:	f009 fa3e 	bl	9cbc <String::~String()>
     840:	f604 4048 	addw	r0, r4, #3144	; 0xc48
     844:	f009 fa3a 	bl	9cbc <String::~String()>
     848:	f504 6043 	add.w	r0, r4, #3120	; 0xc30
     84c:	f009 fa36 	bl	9cbc <String::~String()>
     850:	f604 4018 	addw	r0, r4, #3096	; 0xc18
     854:	f009 fa32 	bl	9cbc <String::~String()>
     858:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
     85c:	f009 fa2e 	bl	9cbc <String::~String()>
     860:	f604 30e8 	addw	r0, r4, #3048	; 0xbe8
     864:	f009 fa2a 	bl	9cbc <String::~String()>
     868:	f504 603d 	add.w	r0, r4, #3024	; 0xbd0
     86c:	f009 fa26 	bl	9cbc <String::~String()>
     870:	f604 30b8 	addw	r0, r4, #3000	; 0xbb8
     874:	f009 fa22 	bl	9cbc <String::~String()>
     878:	f504 603a 	add.w	r0, r4, #2976	; 0xba0
     87c:	f009 fa1e 	bl	9cbc <String::~String()>
     880:	f604 3088 	addw	r0, r4, #2952	; 0xb88
     884:	f009 fa1a 	bl	9cbc <String::~String()>
     888:	f504 6037 	add.w	r0, r4, #2928	; 0xb70
     88c:	f009 fa16 	bl	9cbc <String::~String()>
     890:	f604 3058 	addw	r0, r4, #2904	; 0xb58
     894:	f009 fa12 	bl	9cbc <String::~String()>
     898:	f504 6034 	add.w	r0, r4, #2880	; 0xb40
     89c:	f009 fa0e 	bl	9cbc <String::~String()>
     8a0:	f604 3028 	addw	r0, r4, #2856	; 0xb28
     8a4:	f009 fa0a 	bl	9cbc <String::~String()>
     8a8:	f504 6031 	add.w	r0, r4, #2832	; 0xb10
     8ac:	f009 fa06 	bl	9cbc <String::~String()>
     8b0:	f604 20f8 	addw	r0, r4, #2808	; 0xaf8
     8b4:	f009 fa02 	bl	9cbc <String::~String()>
     8b8:	f504 602e 	add.w	r0, r4, #2784	; 0xae0
     8bc:	f009 f9fe 	bl	9cbc <String::~String()>
     8c0:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
     8c4:	f009 f9fa 	bl	9cbc <String::~String()>
     8c8:	f504 602b 	add.w	r0, r4, #2736	; 0xab0
     8cc:	f009 f9f6 	bl	9cbc <String::~String()>
     8d0:	f604 2098 	addw	r0, r4, #2712	; 0xa98
     8d4:	f009 f9f2 	bl	9cbc <String::~String()>
     8d8:	f504 6028 	add.w	r0, r4, #2688	; 0xa80
     8dc:	f009 f9ee 	bl	9cbc <String::~String()>
     8e0:	f604 2068 	addw	r0, r4, #2664	; 0xa68
     8e4:	f009 f9ea 	bl	9cbc <String::~String()>
     8e8:	f504 6025 	add.w	r0, r4, #2640	; 0xa50
     8ec:	f009 f9e6 	bl	9cbc <String::~String()>
     8f0:	f604 2038 	addw	r0, r4, #2616	; 0xa38
     8f4:	f009 f9e2 	bl	9cbc <String::~String()>
     8f8:	f504 6022 	add.w	r0, r4, #2592	; 0xa20
     8fc:	f009 f9de 	bl	9cbc <String::~String()>
     900:	f604 2008 	addw	r0, r4, #2568	; 0xa08
     904:	f009 f9da 	bl	9cbc <String::~String()>
     908:	f504 601f 	add.w	r0, r4, #2544	; 0x9f0
     90c:	f009 f9d6 	bl	9cbc <String::~String()>
     910:	f604 10d8 	addw	r0, r4, #2520	; 0x9d8
     914:	f009 f9d2 	bl	9cbc <String::~String()>
     918:	f504 601c 	add.w	r0, r4, #2496	; 0x9c0
     91c:	f009 f9ce 	bl	9cbc <String::~String()>
     920:	f604 10a8 	addw	r0, r4, #2472	; 0x9a8
     924:	f009 f9ca 	bl	9cbc <String::~String()>
     928:	f504 6019 	add.w	r0, r4, #2448	; 0x990
     92c:	f009 f9c6 	bl	9cbc <String::~String()>
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     930:	f504 650b 	add.w	r5, r4, #2224	; 0x8b0
     934:	f604 1078 	addw	r0, r4, #2424	; 0x978
     938:	f504 6615 	add.w	r6, r4, #2384	; 0x950
     93c:	f009 f9be 	bl	9cbc <String::~String()>
     940:	42b5      	cmp	r5, r6
     942:	d005      	beq.n	950 <BigHouse::~BigHouse()+0x240>
     944:	3e10      	subs	r6, #16
     946:	4630      	mov	r0, r6
     948:	f009 f9b8 	bl	9cbc <String::~String()>
     94c:	42b5      	cmp	r5, r6
     94e:	d1f9      	bne.n	944 <BigHouse::~BigHouse()+0x234>
     950:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
     954:	3d10      	subs	r5, #16
     956:	4628      	mov	r0, r5
     958:	f009 f9b0 	bl	9cbc <String::~String()>
     95c:	42ae      	cmp	r6, r5
     95e:	d1f9      	bne.n	954 <BigHouse::~BigHouse()+0x244>
     960:	4620      	mov	r0, r4
     962:	f002 fa87 	bl	2e74 <Game::~Game()>
	delete& show3_ls;
	delete& show4_ls;
	delete& show5_ls;
	delete& show6_ls;
	delete[] lShow_set;
}
     966:	4620      	mov	r0, r4
     968:	bd70      	pop	{r4, r5, r6, pc}
     96a:	bf00      	nop
     96c:	0000fd48 	.word	0x0000fd48

00000970 <non-virtual thunk to BigHouse::~BigHouse()>:
#define DISPATCH3(f,a,b,c) case a: case b: case c: f; break
#define DISPATCH4(f,a,b,c,d) case a: case b: case c: case d: f; break
#define DISPATCH5(f,a,b,c,d,e) case a: case b: case c: case d: case e: f; break

	BigHouse();
	~BigHouse();
     970:	f5a0 7021 	sub.w	r0, r0, #644	; 0x284
     974:	f7ff becc 	b.w	710 <BigHouse::~BigHouse()>

00000978 <BigHouse::~BigHouse()>:
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
	display_tt = tmr.add(dshow_tmr);
}

BigHouse::~BigHouse() {
     978:	b510      	push	{r4, lr}
     97a:	4604      	mov	r4, r0
	delete& show3_ls;
	delete& show4_ls;
	delete& show5_ls;
	delete& show6_ls;
	delete[] lShow_set;
}
     97c:	f7ff fec8 	bl	710 <BigHouse::~BigHouse()>
     980:	4620      	mov	r0, r4
     982:	f640 6104 	movw	r1, #3588	; 0xe04
     986:	f009 f8c3 	bl	9b10 <operator delete(void*, unsigned int)>
     98a:	4620      	mov	r0, r4
     98c:	bd10      	pop	{r4, pc}
     98e:	bf00      	nop

00000990 <non-virtual thunk to BigHouse::~BigHouse()>:
     990:	f5a0 7021 	sub.w	r0, r0, #644	; 0x284
     994:	f7ff bff0 	b.w	978 <BigHouse::~BigHouse()>

00000998 <BigHouse::checkSoundCmd(unsigned long&)>:
		}
	}
	displayShowStep++;
}

void BigHouse::checkSoundCmd(uint32_t& ms) {
     998:	b538      	push	{r3, r4, r5, lr}
     99a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
	//byte snd = soundBuffer.getNextSndOutput(t);
	if (soundBuffer.isEmpty()) return;
     99e:	b37b      	cbz	r3, a00 <L_728_delayMicroseconds+0x16>
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
     9a0:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
     9a4:	f8d0 4260 	ldr.w	r4, [r0, #608]	; 0x260
		if (_firstPtr == _size) _firstPtr = 0;
     9a8:	f8d0 126c 	ldr.w	r1, [r0, #620]	; 0x26c
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
     9ac:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
     9b0:	3201      	adds	r2, #1
		if (_firstPtr == _size) _firstPtr = 0;
     9b2:	428a      	cmp	r2, r1
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
     9b4:	f8c0 2264 	str.w	r2, [r0, #612]	; 0x264
     9b8:	4604      	mov	r4, r0
		if (_firstPtr == _size) _firstPtr = 0;
     9ba:	bf08      	it	eq
     9bc:	2200      	moveq	r2, #0
		_valuesCount--;
     9be:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
		if (_firstPtr == _size) _firstPtr = 0;
     9c2:	bf08      	it	eq
     9c4:	f8c0 2264 	streq.w	r2, [r0, #612]	; 0x264
		_valuesCount--;
     9c8:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
	uint16_t snd = soundBuffer.get();
	// light #4 sound16 update
	setLamp(SND16_LMP, (snd & 0b00010000u) > 0);
     9cc:	f3c5 1200 	ubfx	r2, r5, #4, #1
     9d0:	f890 1514 	ldrb.w	r1, [r0, #1300]	; 0x514
     9d4:	f003 ff32 	bl	483c <Sys80b::setLamp(unsigned char, bool)>
     9d8:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    void setSettingSwitch(byte n, bool s);

    inline void writeDisplayAndSoundReset(bool b) {
        digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    }
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(b); }
     9dc:	43e9      	mvns	r1, r5
     9de:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
     9e2:	b2c9      	uxtb	r1, r1
     9e4:	f005 fb9c 	bl	6120 <PIO::mcpWritePB(unsigned char)>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
     9e8:	23f0      	movs	r3, #240	; 0xf0

000009ea <L_728_delayMicroseconds>:
     9ea:	3b01      	subs	r3, #1
     9ec:	d1fd      	bne.n	9ea <L_728_delayMicroseconds>
     9ee:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
     9f2:	21ff      	movs	r1, #255	; 0xff
     9f4:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
	hw->writeSound(~(byte)(snd & 0xff));
	delayMicroseconds(10);
	hw->writeSound(0xff);
     9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     9fc:	f005 bb90 	b.w	6120 <PIO::mcpWritePB(unsigned char)>
     a00:	bd38      	pop	{r3, r4, r5, pc}
     a02:	bf00      	nop

00000a04 <BigHouse::BigHouse()>:
#include "BigHouse.h"
#include "LightGroup.h"

using namespace msg;

BigHouse::BigHouse() {
     a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a08:	4ed6      	ldr	r6, [pc, #856]	; (d64 <BigHouse::BigHouse()+0x360>)
     a0a:	f8df 8448 	ldr.w	r8, [pc, #1096]	; e54 <BigHouse::BigHouse()+0x450>
     a0e:	f8df b448 	ldr.w	fp, [pc, #1096]	; e58 <BigHouse::BigHouse()+0x454>
     a12:	f8df a448 	ldr.w	sl, [pc, #1096]	; e5c <BigHouse::BigHouse()+0x458>
     a16:	4fd4      	ldr	r7, [pc, #848]	; (d68 <BigHouse::BigHouse()+0x364>)
     a18:	b08b      	sub	sp, #44	; 0x2c
     a1a:	4635      	mov	r5, r6
     a1c:	4604      	mov	r4, r0
     a1e:	f002 fd09 	bl	3434 <Game::Game()>
     a22:	4bd2      	ldr	r3, [pc, #840]	; (d6c <BigHouse::BigHouse()+0x368>)
     a24:	f855 0b24 	ldr.w	r0, [r5], #36
     a28:	4ad1      	ldr	r2, [pc, #836]	; (d70 <BigHouse::BigHouse()+0x36c>)
     a2a:	f8c4 0524 	str.w	r0, [r4, #1316]	; 0x524
     a2e:	f240 21c9 	movw	r1, #713	; 0x2c9
     a32:	f103 002c 	add.w	r0, r3, #44	; 0x2c
     a36:	f04f 0904 	mov.w	r9, #4
     a3a:	6023      	str	r3, [r4, #0]
     a3c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
     a40:	f8c4 0284 	str.w	r0, [r4, #644]	; 0x284
     a44:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
     a48:	f884 9514 	strb.w	r9, [r4, #1300]	; 0x514
     a4c:	49c9      	ldr	r1, [pc, #804]	; (d74 <BigHouse::BigHouse()+0x370>)
     a4e:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
     a52:	f009 f987 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a56:	49c8      	ldr	r1, [pc, #800]	; (d78 <BigHouse::BigHouse()+0x374>)
     a58:	f504 60b8 	add.w	r0, r4, #1472	; 0x5c0
     a5c:	f009 f982 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a60:	49c6      	ldr	r1, [pc, #792]	; (d7c <BigHouse::BigHouse()+0x378>)
     a62:	f504 60ba 	add.w	r0, r4, #1488	; 0x5d0
     a66:	f009 f97d 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a6a:	49c5      	ldr	r1, [pc, #788]	; (d80 <BigHouse::BigHouse()+0x37c>)
     a6c:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
     a70:	f009 f978 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a74:	49c3      	ldr	r1, [pc, #780]	; (d84 <BigHouse::BigHouse()+0x380>)
     a76:	f504 60be 	add.w	r0, r4, #1520	; 0x5f0
     a7a:	f009 f973 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a7e:	49c2      	ldr	r1, [pc, #776]	; (d88 <BigHouse::BigHouse()+0x384>)
     a80:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
     a84:	f009 f96e 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a88:	49c0      	ldr	r1, [pc, #768]	; (d8c <BigHouse::BigHouse()+0x388>)
     a8a:	f504 60c2 	add.w	r0, r4, #1552	; 0x610
     a8e:	f009 f969 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a92:	49bf      	ldr	r1, [pc, #764]	; (d90 <BigHouse::BigHouse()+0x38c>)
     a94:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
     a98:	f009 f964 	bl	9d64 <String::String(__FlashStringHelper const*)>
     a9c:	49bd      	ldr	r1, [pc, #756]	; (d94 <BigHouse::BigHouse()+0x390>)
     a9e:	f504 60c6 	add.w	r0, r4, #1584	; 0x630
     aa2:	f009 f95f 	bl	9d64 <String::String(__FlashStringHelper const*)>
     aa6:	49bc      	ldr	r1, [pc, #752]	; (d98 <BigHouse::BigHouse()+0x394>)
     aa8:	f504 60c8 	add.w	r0, r4, #1600	; 0x640
     aac:	f009 f95a 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ab0:	49ba      	ldr	r1, [pc, #744]	; (d9c <BigHouse::BigHouse()+0x398>)
     ab2:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
     ab6:	f009 f955 	bl	9d64 <String::String(__FlashStringHelper const*)>
     aba:	49b9      	ldr	r1, [pc, #740]	; (da0 <BigHouse::BigHouse()+0x39c>)
     abc:	f504 60cc 	add.w	r0, r4, #1632	; 0x660
     ac0:	f009 f950 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ac4:	49b7      	ldr	r1, [pc, #732]	; (da4 <BigHouse::BigHouse()+0x3a0>)
     ac6:	f504 60ce 	add.w	r0, r4, #1648	; 0x670
     aca:	f009 f94b 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ace:	49b6      	ldr	r1, [pc, #728]	; (da8 <BigHouse::BigHouse()+0x3a4>)
     ad0:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
     ad4:	f009 f946 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ad8:	49b4      	ldr	r1, [pc, #720]	; (dac <BigHouse::BigHouse()+0x3a8>)
     ada:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
     ade:	f009 f941 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ae2:	49b3      	ldr	r1, [pc, #716]	; (db0 <BigHouse::BigHouse()+0x3ac>)
     ae4:	f504 60d4 	add.w	r0, r4, #1696	; 0x6a0
     ae8:	f009 f93c 	bl	9d64 <String::String(__FlashStringHelper const*)>
     aec:	49b1      	ldr	r1, [pc, #708]	; (db4 <BigHouse::BigHouse()+0x3b0>)
     aee:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
     af2:	f009 f937 	bl	9d64 <String::String(__FlashStringHelper const*)>
     af6:	49b0      	ldr	r1, [pc, #704]	; (db8 <BigHouse::BigHouse()+0x3b4>)
     af8:	f504 60d8 	add.w	r0, r4, #1728	; 0x6c0
     afc:	f009 f932 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b00:	49ae      	ldr	r1, [pc, #696]	; (dbc <BigHouse::BigHouse()+0x3b8>)
     b02:	f504 60da 	add.w	r0, r4, #1744	; 0x6d0
     b06:	f009 f92d 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b0a:	49ad      	ldr	r1, [pc, #692]	; (dc0 <BigHouse::BigHouse()+0x3bc>)
     b0c:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
     b10:	f009 f928 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b14:	49ab      	ldr	r1, [pc, #684]	; (dc4 <BigHouse::BigHouse()+0x3c0>)
     b16:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
     b1a:	f009 f923 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b1e:	49aa      	ldr	r1, [pc, #680]	; (dc8 <BigHouse::BigHouse()+0x3c4>)
     b20:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
     b24:	f009 f91e 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b28:	49a8      	ldr	r1, [pc, #672]	; (dcc <BigHouse::BigHouse()+0x3c8>)
     b2a:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
     b2e:	f009 f919 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b32:	49a7      	ldr	r1, [pc, #668]	; (dd0 <BigHouse::BigHouse()+0x3cc>)
     b34:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
     b38:	f009 f914 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b3c:	49a5      	ldr	r1, [pc, #660]	; (dd4 <BigHouse::BigHouse()+0x3d0>)
     b3e:	f504 60e6 	add.w	r0, r4, #1840	; 0x730
     b42:	f009 f90f 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b46:	49a4      	ldr	r1, [pc, #656]	; (dd8 <BigHouse::BigHouse()+0x3d4>)
     b48:	f504 60e8 	add.w	r0, r4, #1856	; 0x740
     b4c:	f009 f90a 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b50:	49a2      	ldr	r1, [pc, #648]	; (ddc <BigHouse::BigHouse()+0x3d8>)
     b52:	f504 60ea 	add.w	r0, r4, #1872	; 0x750
     b56:	f009 f905 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b5a:	4998      	ldr	r1, [pc, #608]	; (dbc <BigHouse::BigHouse()+0x3b8>)
     b5c:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
     b60:	f009 f900 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b64:	499e      	ldr	r1, [pc, #632]	; (de0 <BigHouse::BigHouse()+0x3dc>)
     b66:	f504 60ee 	add.w	r0, r4, #1904	; 0x770
     b6a:	f009 f8fb 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b6e:	499d      	ldr	r1, [pc, #628]	; (de4 <BigHouse::BigHouse()+0x3e0>)
     b70:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
     b74:	f009 f8f6 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b78:	499b      	ldr	r1, [pc, #620]	; (de8 <BigHouse::BigHouse()+0x3e4>)
     b7a:	f504 60f2 	add.w	r0, r4, #1936	; 0x790
     b7e:	f009 f8f1 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b82:	499a      	ldr	r1, [pc, #616]	; (dec <BigHouse::BigHouse()+0x3e8>)
     b84:	f504 60f4 	add.w	r0, r4, #1952	; 0x7a0
     b88:	f009 f8ec 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b8c:	4998      	ldr	r1, [pc, #608]	; (df0 <BigHouse::BigHouse()+0x3ec>)
     b8e:	f504 60f6 	add.w	r0, r4, #1968	; 0x7b0
     b92:	f009 f8e7 	bl	9d64 <String::String(__FlashStringHelper const*)>
     b96:	4997      	ldr	r1, [pc, #604]	; (df4 <BigHouse::BigHouse()+0x3f0>)
     b98:	f504 60f8 	add.w	r0, r4, #1984	; 0x7c0
     b9c:	f009 f8e2 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ba0:	4995      	ldr	r1, [pc, #596]	; (df8 <BigHouse::BigHouse()+0x3f4>)
     ba2:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
     ba6:	f009 f8dd 	bl	9d64 <String::String(__FlashStringHelper const*)>
     baa:	4994      	ldr	r1, [pc, #592]	; (dfc <BigHouse::BigHouse()+0x3f8>)
     bac:	f504 60fc 	add.w	r0, r4, #2016	; 0x7e0
     bb0:	f009 f8d8 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bb4:	4992      	ldr	r1, [pc, #584]	; (e00 <BigHouse::BigHouse()+0x3fc>)
     bb6:	f504 60fe 	add.w	r0, r4, #2032	; 0x7f0
     bba:	f009 f8d3 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bbe:	4991      	ldr	r1, [pc, #580]	; (e04 <BigHouse::BigHouse()+0x400>)
     bc0:	f504 6000 	add.w	r0, r4, #2048	; 0x800
     bc4:	f009 f8ce 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bc8:	498f      	ldr	r1, [pc, #572]	; (e08 <BigHouse::BigHouse()+0x404>)
     bca:	f504 6001 	add.w	r0, r4, #2064	; 0x810
     bce:	f009 f8c9 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bd2:	498e      	ldr	r1, [pc, #568]	; (e0c <BigHouse::BigHouse()+0x408>)
     bd4:	f504 6002 	add.w	r0, r4, #2080	; 0x820
     bd8:	f009 f8c4 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bdc:	498c      	ldr	r1, [pc, #560]	; (e10 <BigHouse::BigHouse()+0x40c>)
     bde:	f504 6003 	add.w	r0, r4, #2096	; 0x830
     be2:	f009 f8bf 	bl	9d64 <String::String(__FlashStringHelper const*)>
     be6:	498b      	ldr	r1, [pc, #556]	; (e14 <BigHouse::BigHouse()+0x410>)
     be8:	f504 6004 	add.w	r0, r4, #2112	; 0x840
     bec:	f009 f8ba 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bf0:	4989      	ldr	r1, [pc, #548]	; (e18 <BigHouse::BigHouse()+0x414>)
     bf2:	f504 6005 	add.w	r0, r4, #2128	; 0x850
     bf6:	f009 f8b5 	bl	9d64 <String::String(__FlashStringHelper const*)>
     bfa:	4988      	ldr	r1, [pc, #544]	; (e1c <BigHouse::BigHouse()+0x418>)
     bfc:	f504 6006 	add.w	r0, r4, #2144	; 0x860
     c00:	f009 f8b0 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c04:	4986      	ldr	r1, [pc, #536]	; (e20 <BigHouse::BigHouse()+0x41c>)
     c06:	f504 6007 	add.w	r0, r4, #2160	; 0x870
     c0a:	f009 f8ab 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c0e:	4985      	ldr	r1, [pc, #532]	; (e24 <BigHouse::BigHouse()+0x420>)
     c10:	f504 6008 	add.w	r0, r4, #2176	; 0x880
     c14:	f009 f8a6 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c18:	4983      	ldr	r1, [pc, #524]	; (e28 <BigHouse::BigHouse()+0x424>)
     c1a:	f504 6009 	add.w	r0, r4, #2192	; 0x890
     c1e:	f009 f8a1 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c22:	4982      	ldr	r1, [pc, #520]	; (e2c <BigHouse::BigHouse()+0x428>)
     c24:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
     c28:	f009 f89c 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c2c:	4980      	ldr	r1, [pc, #512]	; (e30 <BigHouse::BigHouse()+0x42c>)
     c2e:	f504 600b 	add.w	r0, r4, #2224	; 0x8b0
     c32:	f009 f897 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c36:	497f      	ldr	r1, [pc, #508]	; (e34 <BigHouse::BigHouse()+0x430>)
     c38:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
     c3c:	f009 f892 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c40:	4641      	mov	r1, r8
     c42:	f504 600d 	add.w	r0, r4, #2256	; 0x8d0
     c46:	f009 f88d 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c4a:	4659      	mov	r1, fp
     c4c:	f504 600e 	add.w	r0, r4, #2272	; 0x8e0
     c50:	f009 f888 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c54:	4651      	mov	r1, sl
     c56:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
     c5a:	f009 f883 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c5e:	4639      	mov	r1, r7
     c60:	f504 6010 	add.w	r0, r4, #2304	; 0x900
     c64:	f009 f87e 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c68:	4973      	ldr	r1, [pc, #460]	; (e38 <BigHouse::BigHouse()+0x434>)
     c6a:	f504 6011 	add.w	r0, r4, #2320	; 0x910
     c6e:	f009 f879 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c72:	4972      	ldr	r1, [pc, #456]	; (e3c <BigHouse::BigHouse()+0x438>)
     c74:	f504 6012 	add.w	r0, r4, #2336	; 0x920
     c78:	f009 f874 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c7c:	4970      	ldr	r1, [pc, #448]	; (e40 <BigHouse::BigHouse()+0x43c>)
     c7e:	f504 6013 	add.w	r0, r4, #2352	; 0x930
     c82:	f009 f86f 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c86:	496f      	ldr	r1, [pc, #444]	; (e44 <BigHouse::BigHouse()+0x440>)
     c88:	f504 6014 	add.w	r0, r4, #2368	; 0x940
     c8c:	f009 f86a 	bl	9d64 <String::String(__FlashStringHelper const*)>
     c90:	46b4      	mov	ip, r6
     c92:	f504 6e15 	add.w	lr, r4, #2384	; 0x950
     c96:	f85c 0f04 	ldr.w	r0, [ip, #4]!
     c9a:	f8dc 2008 	ldr.w	r2, [ip, #8]
     c9e:	f8dc 1004 	ldr.w	r1, [ip, #4]
     ca2:	f8dc 300c 	ldr.w	r3, [ip, #12]
     ca6:	f8bc c010 	ldrh.w	ip, [ip, #16]
     caa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
     cae:	4633      	mov	r3, r6
     cb0:	f8ae c000 	strh.w	ip, [lr]
     cb4:	f853 1f18 	ldr.w	r1, [r3, #24]!
     cb8:	f8c4 1962 	str.w	r1, [r4, #2402]	; 0x962
     cbc:	f893 e008 	ldrb.w	lr, [r3, #8]
     cc0:	6858      	ldr	r0, [r3, #4]
     cc2:	f884 e96a 	strb.w	lr, [r4, #2410]	; 0x96a
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cc6:	f604 1378 	addw	r3, r4, #2424	; 0x978
     cca:	211a      	movs	r1, #26
     ccc:	f8c4 0966 	str.w	r0, [r4, #2406]	; 0x966
     cd0:	f884 1974 	strb.w	r1, [r4, #2420]	; 0x974
     cd4:	4618      	mov	r0, r3
     cd6:	2100      	movs	r1, #0
		SENSOR(spotTarget4, 73, "cell block spot Target #4");
		SENSOR(topRollover3, 74, "top rollover #3");
		SENSOR(rightOutside, 75, "right outside rollover");
		SENSOR(hole, 76, "hole");
		// constructor
		Sw(Sys80b* sys) : _sys(sys) {};
     cd8:	f8c4 496c 	str.w	r4, [r4, #2412]	; 0x96c
     cdc:	f8c4 4970 	str.w	r4, [r4, #2416]	; 0x970
     ce0:	9305      	str	r3, [sp, #20]
     ce2:	f009 f82b 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     ce6:	4958      	ldr	r1, [pc, #352]	; (e48 <BigHouse::BigHouse()+0x444>)
     ce8:	a806      	add	r0, sp, #24
     cea:	f009 f83b 	bl	9d64 <String::String(__FlashStringHelper const*)>
     cee:	9b05      	ldr	r3, [sp, #20]
     cf0:	a906      	add	r1, sp, #24
     cf2:	4618      	mov	r0, r3
     cf4:	f009 f8b4 	bl	9e60 <String::operator=(String&&)>
     cf8:	a806      	add	r0, sp, #24
     cfa:	f008 ffdf 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     cfe:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     d02:	f8c4 2988 	str.w	r2, [r4, #2440]	; 0x988
     d06:	f504 6319 	add.w	r3, r4, #2448	; 0x990
     d0a:	221e      	movs	r2, #30
     d0c:	f884 298c 	strb.w	r2, [r4, #2444]	; 0x98c
     d10:	4618      	mov	r0, r3
     d12:	2100      	movs	r1, #0
     d14:	9305      	str	r3, [sp, #20]
     d16:	f009 f811 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     d1a:	494c      	ldr	r1, [pc, #304]	; (e4c <BigHouse::BigHouse()+0x448>)
     d1c:	a806      	add	r0, sp, #24
     d1e:	f009 f821 	bl	9d64 <String::String(__FlashStringHelper const*)>
     d22:	9b05      	ldr	r3, [sp, #20]
     d24:	a906      	add	r1, sp, #24
     d26:	4618      	mov	r0, r3
     d28:	f009 f89a 	bl	9e60 <String::operator=(String&&)>
     d2c:	a806      	add	r0, sp, #24
     d2e:	f008 ffc5 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     d32:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     d36:	f8c4 29a0 	str.w	r2, [r4, #2464]	; 0x9a0
     d3a:	f604 13a8 	addw	r3, r4, #2472	; 0x9a8
     d3e:	221f      	movs	r2, #31
     d40:	f884 29a4 	strb.w	r2, [r4, #2468]	; 0x9a4
     d44:	4618      	mov	r0, r3
     d46:	2100      	movs	r1, #0
     d48:	9305      	str	r3, [sp, #20]
     d4a:	f008 fff7 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     d4e:	4940      	ldr	r1, [pc, #256]	; (e50 <BigHouse::BigHouse()+0x44c>)
     d50:	a806      	add	r0, sp, #24
     d52:	f009 f807 	bl	9d64 <String::String(__FlashStringHelper const*)>
     d56:	9b05      	ldr	r3, [sp, #20]
     d58:	a906      	add	r1, sp, #24
     d5a:	4618      	mov	r0, r3
     d5c:	f009 f880 	bl	9e60 <String::operator=(String&&)>
     d60:	a806      	add	r0, sp, #24
     d62:	e07d      	b.n	e60 <BigHouse::BigHouse()+0x45c>
     d64:	0000f4c0 	.word	0x0000f4c0
     d68:	0000f85c 	.word	0x0000f85c
     d6c:	0000fd48 	.word	0x0000fd48
     d70:	0000f524 	.word	0x0000f524
     d74:	0000f530 	.word	0x0000f530
     d78:	0000f53c 	.word	0x0000f53c
     d7c:	0000f548 	.word	0x0000f548
     d80:	0000f558 	.word	0x0000f558
     d84:	0000f564 	.word	0x0000f564
     d88:	0000f570 	.word	0x0000f570
     d8c:	0000f580 	.word	0x0000f580
     d90:	0000f590 	.word	0x0000f590
     d94:	0000f5a0 	.word	0x0000f5a0
     d98:	0000f5b4 	.word	0x0000f5b4
     d9c:	0000f5c8 	.word	0x0000f5c8
     da0:	0000f5d8 	.word	0x0000f5d8
     da4:	0000f5e8 	.word	0x0000f5e8
     da8:	0000f5f0 	.word	0x0000f5f0
     dac:	0000f604 	.word	0x0000f604
     db0:	0000f61c 	.word	0x0000f61c
     db4:	0000f628 	.word	0x0000f628
     db8:	0000f63c 	.word	0x0000f63c
     dbc:	0000f65c 	.word	0x0000f65c
     dc0:	0000f670 	.word	0x0000f670
     dc4:	0000f678 	.word	0x0000f678
     dc8:	0000f690 	.word	0x0000f690
     dcc:	0000f6a4 	.word	0x0000f6a4
     dd0:	0000f6b4 	.word	0x0000f6b4
     dd4:	0000f6c4 	.word	0x0000f6c4
     dd8:	0000f6d4 	.word	0x0000f6d4
     ddc:	0000f6e4 	.word	0x0000f6e4
     de0:	0000f6f8 	.word	0x0000f6f8
     de4:	0000f708 	.word	0x0000f708
     de8:	0000f714 	.word	0x0000f714
     dec:	0000f720 	.word	0x0000f720
     df0:	0000f72c 	.word	0x0000f72c
     df4:	0000f738 	.word	0x0000f738
     df8:	0000f744 	.word	0x0000f744
     dfc:	0000f750 	.word	0x0000f750
     e00:	0000f75c 	.word	0x0000f75c
     e04:	0000f768 	.word	0x0000f768
     e08:	0000f774 	.word	0x0000f774
     e0c:	0000f784 	.word	0x0000f784
     e10:	0000f794 	.word	0x0000f794
     e14:	0000f7a4 	.word	0x0000f7a4
     e18:	0000f7b4 	.word	0x0000f7b4
     e1c:	0000f7c4 	.word	0x0000f7c4
     e20:	0000f7d4 	.word	0x0000f7d4
     e24:	0000f7e4 	.word	0x0000f7e4
     e28:	0000f7f4 	.word	0x0000f7f4
     e2c:	0000f804 	.word	0x0000f804
     e30:	0000f818 	.word	0x0000f818
     e34:	0000faa8 	.word	0x0000faa8
     e38:	0000f86c 	.word	0x0000f86c
     e3c:	0000f878 	.word	0x0000f878
     e40:	0000f890 	.word	0x0000f890
     e44:	0000f898 	.word	0x0000f898
     e48:	0000f8a0 	.word	0x0000f8a0
     e4c:	0000f8b0 	.word	0x0000f8b0
     e50:	0000f8c4 	.word	0x0000f8c4
     e54:	0000f820 	.word	0x0000f820
     e58:	0000f830 	.word	0x0000f830
     e5c:	0000f844 	.word	0x0000f844
     e60:	f008 ff2c 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e64:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     e68:	f8c4 29b8 	str.w	r2, [r4, #2488]	; 0x9b8
     e6c:	f504 631c 	add.w	r3, r4, #2496	; 0x9c0
     e70:	2220      	movs	r2, #32
     e72:	f884 29bc 	strb.w	r2, [r4, #2492]	; 0x9bc
     e76:	4618      	mov	r0, r3
     e78:	2100      	movs	r1, #0
     e7a:	9305      	str	r3, [sp, #20]
     e7c:	f008 ff5e 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     e80:	49ce      	ldr	r1, [pc, #824]	; (11bc <BigHouse::BigHouse()+0x7b8>)
     e82:	a806      	add	r0, sp, #24
     e84:	f008 ff6e 	bl	9d64 <String::String(__FlashStringHelper const*)>
     e88:	9b05      	ldr	r3, [sp, #20]
     e8a:	a906      	add	r1, sp, #24
     e8c:	4618      	mov	r0, r3
     e8e:	f008 ffe7 	bl	9e60 <String::operator=(String&&)>
     e92:	a806      	add	r0, sp, #24
     e94:	f008 ff12 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     e98:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     e9c:	f8c4 29d0 	str.w	r2, [r4, #2512]	; 0x9d0
     ea0:	f604 13d8 	addw	r3, r4, #2520	; 0x9d8
     ea4:	2221      	movs	r2, #33	; 0x21
     ea6:	f884 29d4 	strb.w	r2, [r4, #2516]	; 0x9d4
     eaa:	4618      	mov	r0, r3
     eac:	2100      	movs	r1, #0
     eae:	9305      	str	r3, [sp, #20]
     eb0:	f008 ff44 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     eb4:	49c2      	ldr	r1, [pc, #776]	; (11c0 <BigHouse::BigHouse()+0x7bc>)
     eb6:	a806      	add	r0, sp, #24
     eb8:	f008 ff54 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ebc:	9b05      	ldr	r3, [sp, #20]
     ebe:	a906      	add	r1, sp, #24
     ec0:	4618      	mov	r0, r3
     ec2:	f008 ffcd 	bl	9e60 <String::operator=(String&&)>
     ec6:	a806      	add	r0, sp, #24
     ec8:	f008 fef8 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     ecc:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     ed0:	f8c4 29e8 	str.w	r2, [r4, #2536]	; 0x9e8
     ed4:	f504 631f 	add.w	r3, r4, #2544	; 0x9f0
     ed8:	2222      	movs	r2, #34	; 0x22
     eda:	f884 29ec 	strb.w	r2, [r4, #2540]	; 0x9ec
     ede:	4618      	mov	r0, r3
     ee0:	2100      	movs	r1, #0
     ee2:	9305      	str	r3, [sp, #20]
     ee4:	f008 ff2a 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     ee8:	49b6      	ldr	r1, [pc, #728]	; (11c4 <BigHouse::BigHouse()+0x7c0>)
     eea:	a806      	add	r0, sp, #24
     eec:	f008 ff3a 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ef0:	9b05      	ldr	r3, [sp, #20]
     ef2:	a906      	add	r1, sp, #24
     ef4:	4618      	mov	r0, r3
     ef6:	f008 ffb3 	bl	9e60 <String::operator=(String&&)>
     efa:	a806      	add	r0, sp, #24
     efc:	f008 fede 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f00:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     f04:	f8c4 2a00 	str.w	r2, [r4, #2560]	; 0xa00
     f08:	f604 2308 	addw	r3, r4, #2568	; 0xa08
     f0c:	2223      	movs	r2, #35	; 0x23
     f0e:	f884 2a04 	strb.w	r2, [r4, #2564]	; 0xa04
     f12:	4618      	mov	r0, r3
     f14:	2100      	movs	r1, #0
     f16:	9305      	str	r3, [sp, #20]
     f18:	f008 ff10 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     f1c:	49aa      	ldr	r1, [pc, #680]	; (11c8 <BigHouse::BigHouse()+0x7c4>)
     f1e:	a806      	add	r0, sp, #24
     f20:	f008 ff20 	bl	9d64 <String::String(__FlashStringHelper const*)>
     f24:	9b05      	ldr	r3, [sp, #20]
     f26:	a906      	add	r1, sp, #24
     f28:	4618      	mov	r0, r3
     f2a:	f008 ff99 	bl	9e60 <String::operator=(String&&)>
     f2e:	a806      	add	r0, sp, #24
     f30:	f008 fec4 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f34:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     f38:	f8c4 2a18 	str.w	r2, [r4, #2584]	; 0xa18
     f3c:	f504 6322 	add.w	r3, r4, #2592	; 0xa20
     f40:	2224      	movs	r2, #36	; 0x24
     f42:	f884 2a1c 	strb.w	r2, [r4, #2588]	; 0xa1c
     f46:	4618      	mov	r0, r3
     f48:	2100      	movs	r1, #0
     f4a:	9305      	str	r3, [sp, #20]
     f4c:	f008 fef6 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     f50:	499e      	ldr	r1, [pc, #632]	; (11cc <BigHouse::BigHouse()+0x7c8>)
     f52:	a806      	add	r0, sp, #24
     f54:	f008 ff06 	bl	9d64 <String::String(__FlashStringHelper const*)>
     f58:	9b05      	ldr	r3, [sp, #20]
     f5a:	a906      	add	r1, sp, #24
     f5c:	4618      	mov	r0, r3
     f5e:	f008 ff7f 	bl	9e60 <String::operator=(String&&)>
     f62:	a806      	add	r0, sp, #24
     f64:	f008 feaa 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f68:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     f6c:	f8c4 2a30 	str.w	r2, [r4, #2608]	; 0xa30
     f70:	f604 2338 	addw	r3, r4, #2616	; 0xa38
     f74:	2228      	movs	r2, #40	; 0x28
     f76:	f884 2a34 	strb.w	r2, [r4, #2612]	; 0xa34
     f7a:	4618      	mov	r0, r3
     f7c:	2100      	movs	r1, #0
     f7e:	9305      	str	r3, [sp, #20]
     f80:	f008 fedc 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     f84:	4992      	ldr	r1, [pc, #584]	; (11d0 <BigHouse::BigHouse()+0x7cc>)
     f86:	a806      	add	r0, sp, #24
     f88:	f008 feec 	bl	9d64 <String::String(__FlashStringHelper const*)>
     f8c:	9b05      	ldr	r3, [sp, #20]
     f8e:	a906      	add	r1, sp, #24
     f90:	4618      	mov	r0, r3
     f92:	f008 ff65 	bl	9e60 <String::operator=(String&&)>
     f96:	a806      	add	r0, sp, #24
     f98:	f008 fe90 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     f9c:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     fa0:	f8c4 2a48 	str.w	r2, [r4, #2632]	; 0xa48
     fa4:	f504 6325 	add.w	r3, r4, #2640	; 0xa50
     fa8:	2229      	movs	r2, #41	; 0x29
     faa:	f884 2a4c 	strb.w	r2, [r4, #2636]	; 0xa4c
     fae:	4618      	mov	r0, r3
     fb0:	2100      	movs	r1, #0
     fb2:	9305      	str	r3, [sp, #20]
     fb4:	f008 fec2 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     fb8:	4986      	ldr	r1, [pc, #536]	; (11d4 <BigHouse::BigHouse()+0x7d0>)
     fba:	a806      	add	r0, sp, #24
     fbc:	f008 fed2 	bl	9d64 <String::String(__FlashStringHelper const*)>
     fc0:	9b05      	ldr	r3, [sp, #20]
     fc2:	a906      	add	r1, sp, #24
     fc4:	4618      	mov	r0, r3
     fc6:	f008 ff4b 	bl	9e60 <String::operator=(String&&)>
     fca:	a806      	add	r0, sp, #24
     fcc:	f008 fe76 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
     fd0:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
     fd4:	f8c4 2a60 	str.w	r2, [r4, #2656]	; 0xa60
     fd8:	f604 2368 	addw	r3, r4, #2664	; 0xa68
     fdc:	222a      	movs	r2, #42	; 0x2a
     fde:	f884 2a64 	strb.w	r2, [r4, #2660]	; 0xa64
     fe2:	4618      	mov	r0, r3
     fe4:	2100      	movs	r1, #0
     fe6:	9305      	str	r3, [sp, #20]
     fe8:	f008 fea8 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
     fec:	497a      	ldr	r1, [pc, #488]	; (11d8 <BigHouse::BigHouse()+0x7d4>)
     fee:	a806      	add	r0, sp, #24
     ff0:	f008 feb8 	bl	9d64 <String::String(__FlashStringHelper const*)>
     ff4:	9b05      	ldr	r3, [sp, #20]
     ff6:	a906      	add	r1, sp, #24
     ff8:	4618      	mov	r0, r3
     ffa:	f008 ff31 	bl	9e60 <String::operator=(String&&)>
     ffe:	a806      	add	r0, sp, #24
    1000:	f008 fe5c 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1004:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1008:	f8c4 2a78 	str.w	r2, [r4, #2680]	; 0xa78
    100c:	f504 6328 	add.w	r3, r4, #2688	; 0xa80
    1010:	222b      	movs	r2, #43	; 0x2b
    1012:	f884 2a7c 	strb.w	r2, [r4, #2684]	; 0xa7c
    1016:	4618      	mov	r0, r3
    1018:	2100      	movs	r1, #0
    101a:	9305      	str	r3, [sp, #20]
    101c:	f008 fe8e 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1020:	496e      	ldr	r1, [pc, #440]	; (11dc <BigHouse::BigHouse()+0x7d8>)
    1022:	a806      	add	r0, sp, #24
    1024:	f008 fe9e 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1028:	9b05      	ldr	r3, [sp, #20]
    102a:	a906      	add	r1, sp, #24
    102c:	4618      	mov	r0, r3
    102e:	f008 ff17 	bl	9e60 <String::operator=(String&&)>
    1032:	a806      	add	r0, sp, #24
    1034:	f008 fe42 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1038:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    103c:	f8c4 2a90 	str.w	r2, [r4, #2704]	; 0xa90
    1040:	f604 2398 	addw	r3, r4, #2712	; 0xa98
    1044:	222c      	movs	r2, #44	; 0x2c
    1046:	f884 2a94 	strb.w	r2, [r4, #2708]	; 0xa94
    104a:	4618      	mov	r0, r3
    104c:	2100      	movs	r1, #0
    104e:	9305      	str	r3, [sp, #20]
    1050:	f008 fe74 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1054:	4962      	ldr	r1, [pc, #392]	; (11e0 <BigHouse::BigHouse()+0x7dc>)
    1056:	a806      	add	r0, sp, #24
    1058:	f008 fe84 	bl	9d64 <String::String(__FlashStringHelper const*)>
    105c:	9b05      	ldr	r3, [sp, #20]
    105e:	a906      	add	r1, sp, #24
    1060:	4618      	mov	r0, r3
    1062:	f008 fefd 	bl	9e60 <String::operator=(String&&)>
    1066:	a806      	add	r0, sp, #24
    1068:	f008 fe28 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    106c:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1070:	f8c4 2aa8 	str.w	r2, [r4, #2728]	; 0xaa8
    1074:	f504 632b 	add.w	r3, r4, #2736	; 0xab0
    1078:	222d      	movs	r2, #45	; 0x2d
    107a:	f884 2aac 	strb.w	r2, [r4, #2732]	; 0xaac
    107e:	4618      	mov	r0, r3
    1080:	2100      	movs	r1, #0
    1082:	9305      	str	r3, [sp, #20]
    1084:	f008 fe5a 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1088:	4956      	ldr	r1, [pc, #344]	; (11e4 <BigHouse::BigHouse()+0x7e0>)
    108a:	a806      	add	r0, sp, #24
    108c:	f008 fe6a 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1090:	9b05      	ldr	r3, [sp, #20]
    1092:	a906      	add	r1, sp, #24
    1094:	4618      	mov	r0, r3
    1096:	f008 fee3 	bl	9e60 <String::operator=(String&&)>
    109a:	a806      	add	r0, sp, #24
    109c:	f008 fe0e 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10a0:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    10a4:	f8c4 2ac0 	str.w	r2, [r4, #2752]	; 0xac0
    10a8:	f604 23c8 	addw	r3, r4, #2760	; 0xac8
    10ac:	222e      	movs	r2, #46	; 0x2e
    10ae:	f884 2ac4 	strb.w	r2, [r4, #2756]	; 0xac4
    10b2:	4618      	mov	r0, r3
    10b4:	2100      	movs	r1, #0
    10b6:	9305      	str	r3, [sp, #20]
    10b8:	f008 fe40 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    10bc:	4641      	mov	r1, r8
    10be:	a806      	add	r0, sp, #24
    10c0:	f008 fe50 	bl	9d64 <String::String(__FlashStringHelper const*)>
    10c4:	9b05      	ldr	r3, [sp, #20]
    10c6:	a906      	add	r1, sp, #24
    10c8:	4618      	mov	r0, r3
    10ca:	f008 fec9 	bl	9e60 <String::operator=(String&&)>
    10ce:	a806      	add	r0, sp, #24
    10d0:	f008 fdf4 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    10d4:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    10d8:	f8c4 2ad8 	str.w	r2, [r4, #2776]	; 0xad8
    10dc:	f504 632e 	add.w	r3, r4, #2784	; 0xae0
    10e0:	2232      	movs	r2, #50	; 0x32
    10e2:	f884 2adc 	strb.w	r2, [r4, #2780]	; 0xadc
    10e6:	4618      	mov	r0, r3
    10e8:	2100      	movs	r1, #0
    10ea:	9305      	str	r3, [sp, #20]
    10ec:	f008 fe26 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    10f0:	493d      	ldr	r1, [pc, #244]	; (11e8 <BigHouse::BigHouse()+0x7e4>)
    10f2:	a806      	add	r0, sp, #24
    10f4:	f008 fe36 	bl	9d64 <String::String(__FlashStringHelper const*)>
    10f8:	9b05      	ldr	r3, [sp, #20]
    10fa:	a906      	add	r1, sp, #24
    10fc:	4618      	mov	r0, r3
    10fe:	f008 feaf 	bl	9e60 <String::operator=(String&&)>
    1102:	a806      	add	r0, sp, #24
    1104:	f008 fdda 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1108:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    110c:	f8c4 2af0 	str.w	r2, [r4, #2800]	; 0xaf0
    1110:	f604 23f8 	addw	r3, r4, #2808	; 0xaf8
    1114:	2233      	movs	r2, #51	; 0x33
    1116:	f884 2af4 	strb.w	r2, [r4, #2804]	; 0xaf4
    111a:	4618      	mov	r0, r3
    111c:	2100      	movs	r1, #0
    111e:	9305      	str	r3, [sp, #20]
    1120:	f008 fe0c 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1124:	4931      	ldr	r1, [pc, #196]	; (11ec <BigHouse::BigHouse()+0x7e8>)
    1126:	a806      	add	r0, sp, #24
    1128:	f008 fe1c 	bl	9d64 <String::String(__FlashStringHelper const*)>
    112c:	9b05      	ldr	r3, [sp, #20]
    112e:	a906      	add	r1, sp, #24
    1130:	4618      	mov	r0, r3
    1132:	f008 fe95 	bl	9e60 <String::operator=(String&&)>
    1136:	a806      	add	r0, sp, #24
    1138:	f008 fdc0 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    113c:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1140:	f8c4 2b08 	str.w	r2, [r4, #2824]	; 0xb08
    1144:	f504 6331 	add.w	r3, r4, #2832	; 0xb10
    1148:	2234      	movs	r2, #52	; 0x34
    114a:	f884 2b0c 	strb.w	r2, [r4, #2828]	; 0xb0c
    114e:	4618      	mov	r0, r3
    1150:	2100      	movs	r1, #0
    1152:	9305      	str	r3, [sp, #20]
    1154:	f008 fdf2 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1158:	4925      	ldr	r1, [pc, #148]	; (11f0 <BigHouse::BigHouse()+0x7ec>)
    115a:	a806      	add	r0, sp, #24
    115c:	f008 fe02 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1160:	9b05      	ldr	r3, [sp, #20]
    1162:	a906      	add	r1, sp, #24
    1164:	4618      	mov	r0, r3
    1166:	f008 fe7b 	bl	9e60 <String::operator=(String&&)>
    116a:	a806      	add	r0, sp, #24
    116c:	f008 fda6 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1170:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1174:	f8c4 2b20 	str.w	r2, [r4, #2848]	; 0xb20
    1178:	f604 3328 	addw	r3, r4, #2856	; 0xb28
    117c:	2235      	movs	r2, #53	; 0x35
    117e:	f884 2b24 	strb.w	r2, [r4, #2852]	; 0xb24
    1182:	4618      	mov	r0, r3
    1184:	2100      	movs	r1, #0
    1186:	9305      	str	r3, [sp, #20]
    1188:	f008 fdd8 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    118c:	4919      	ldr	r1, [pc, #100]	; (11f4 <BigHouse::BigHouse()+0x7f0>)
    118e:	a806      	add	r0, sp, #24
    1190:	f008 fde8 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1194:	9b05      	ldr	r3, [sp, #20]
    1196:	a906      	add	r1, sp, #24
    1198:	4618      	mov	r0, r3
    119a:	f008 fe61 	bl	9e60 <String::operator=(String&&)>
    119e:	a806      	add	r0, sp, #24
    11a0:	f008 fd8c 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    11a4:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    11a8:	f8c4 2b38 	str.w	r2, [r4, #2872]	; 0xb38
    11ac:	f504 6334 	add.w	r3, r4, #2880	; 0xb40
    11b0:	2236      	movs	r2, #54	; 0x36
    11b2:	f884 2b3c 	strb.w	r2, [r4, #2876]	; 0xb3c
    11b6:	4618      	mov	r0, r3
    11b8:	2100      	movs	r1, #0
    11ba:	e01d      	b.n	11f8 <BigHouse::BigHouse()+0x7f4>
    11bc:	0000f8d8 	.word	0x0000f8d8
    11c0:	0000f8e8 	.word	0x0000f8e8
    11c4:	0000f8f8 	.word	0x0000f8f8
    11c8:	0000f914 	.word	0x0000f914
    11cc:	0000f924 	.word	0x0000f924
    11d0:	0000f934 	.word	0x0000f934
    11d4:	0000f944 	.word	0x0000f944
    11d8:	0000f958 	.word	0x0000f958
    11dc:	0000f96c 	.word	0x0000f96c
    11e0:	0000f980 	.word	0x0000f980
    11e4:	0000f99c 	.word	0x0000f99c
    11e8:	0000f9b4 	.word	0x0000f9b4
    11ec:	0000f9c4 	.word	0x0000f9c4
    11f0:	0000f9d8 	.word	0x0000f9d8
    11f4:	0000f9ec 	.word	0x0000f9ec
    11f8:	9305      	str	r3, [sp, #20]
    11fa:	f008 fd9f 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    11fe:	49cf      	ldr	r1, [pc, #828]	; (153c <BigHouse::BigHouse()+0xb38>)
    1200:	a806      	add	r0, sp, #24
    1202:	f008 fdaf 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1206:	9b05      	ldr	r3, [sp, #20]
    1208:	a906      	add	r1, sp, #24
    120a:	4618      	mov	r0, r3
    120c:	f008 fe28 	bl	9e60 <String::operator=(String&&)>
    1210:	a806      	add	r0, sp, #24
    1212:	f008 fd53 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1216:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    121a:	f8c4 2b50 	str.w	r2, [r4, #2896]	; 0xb50
    121e:	f604 3358 	addw	r3, r4, #2904	; 0xb58
    1222:	2237      	movs	r2, #55	; 0x37
    1224:	f884 2b54 	strb.w	r2, [r4, #2900]	; 0xb54
    1228:	4618      	mov	r0, r3
    122a:	2100      	movs	r1, #0
    122c:	9305      	str	r3, [sp, #20]
    122e:	f008 fd85 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1232:	49c3      	ldr	r1, [pc, #780]	; (1540 <BigHouse::BigHouse()+0xb3c>)
    1234:	a806      	add	r0, sp, #24
    1236:	f008 fd95 	bl	9d64 <String::String(__FlashStringHelper const*)>
    123a:	9b05      	ldr	r3, [sp, #20]
    123c:	a906      	add	r1, sp, #24
    123e:	4618      	mov	r0, r3
    1240:	f008 fe0e 	bl	9e60 <String::operator=(String&&)>
    1244:	a806      	add	r0, sp, #24
    1246:	f008 fd39 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    124a:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    124e:	f8c4 2b68 	str.w	r2, [r4, #2920]	; 0xb68
    1252:	f504 6337 	add.w	r3, r4, #2928	; 0xb70
    1256:	2238      	movs	r2, #56	; 0x38
    1258:	f884 2b6c 	strb.w	r2, [r4, #2924]	; 0xb6c
    125c:	4618      	mov	r0, r3
    125e:	2100      	movs	r1, #0
    1260:	9305      	str	r3, [sp, #20]
    1262:	f008 fd6b 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1266:	4639      	mov	r1, r7
    1268:	a806      	add	r0, sp, #24
    126a:	f008 fd7b 	bl	9d64 <String::String(__FlashStringHelper const*)>
    126e:	9b05      	ldr	r3, [sp, #20]
    1270:	a906      	add	r1, sp, #24
    1272:	4618      	mov	r0, r3
    1274:	f008 fdf4 	bl	9e60 <String::operator=(String&&)>
    1278:	a806      	add	r0, sp, #24
    127a:	f008 fd1f 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    127e:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1282:	f8c4 2b80 	str.w	r2, [r4, #2944]	; 0xb80
    1286:	f604 3388 	addw	r3, r4, #2952	; 0xb88
    128a:	223c      	movs	r2, #60	; 0x3c
    128c:	f884 2b84 	strb.w	r2, [r4, #2948]	; 0xb84
    1290:	4618      	mov	r0, r3
    1292:	2100      	movs	r1, #0
    1294:	9305      	str	r3, [sp, #20]
    1296:	f008 fd51 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    129a:	49aa      	ldr	r1, [pc, #680]	; (1544 <BigHouse::BigHouse()+0xb40>)
    129c:	a806      	add	r0, sp, #24
    129e:	f008 fd61 	bl	9d64 <String::String(__FlashStringHelper const*)>
    12a2:	9b05      	ldr	r3, [sp, #20]
    12a4:	a906      	add	r1, sp, #24
    12a6:	4618      	mov	r0, r3
    12a8:	f008 fdda 	bl	9e60 <String::operator=(String&&)>
    12ac:	a806      	add	r0, sp, #24
    12ae:	f008 fd05 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    12b2:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    12b6:	f8c4 2b98 	str.w	r2, [r4, #2968]	; 0xb98
    12ba:	f504 633a 	add.w	r3, r4, #2976	; 0xba0
    12be:	223d      	movs	r2, #61	; 0x3d
    12c0:	f884 2b9c 	strb.w	r2, [r4, #2972]	; 0xb9c
    12c4:	4618      	mov	r0, r3
    12c6:	2100      	movs	r1, #0
    12c8:	9305      	str	r3, [sp, #20]
    12ca:	f008 fd37 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    12ce:	499e      	ldr	r1, [pc, #632]	; (1548 <BigHouse::BigHouse()+0xb44>)
    12d0:	a806      	add	r0, sp, #24
    12d2:	f008 fd47 	bl	9d64 <String::String(__FlashStringHelper const*)>
    12d6:	9b05      	ldr	r3, [sp, #20]
    12d8:	a906      	add	r1, sp, #24
    12da:	4618      	mov	r0, r3
    12dc:	f008 fdc0 	bl	9e60 <String::operator=(String&&)>
    12e0:	a806      	add	r0, sp, #24
    12e2:	f008 fceb 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    12e6:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    12ea:	f8c4 2bb0 	str.w	r2, [r4, #2992]	; 0xbb0
    12ee:	f604 33b8 	addw	r3, r4, #3000	; 0xbb8
    12f2:	223e      	movs	r2, #62	; 0x3e
    12f4:	f884 2bb4 	strb.w	r2, [r4, #2996]	; 0xbb4
    12f8:	4618      	mov	r0, r3
    12fa:	2100      	movs	r1, #0
    12fc:	9305      	str	r3, [sp, #20]
    12fe:	f008 fd1d 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1302:	4992      	ldr	r1, [pc, #584]	; (154c <BigHouse::BigHouse()+0xb48>)
    1304:	a806      	add	r0, sp, #24
    1306:	f008 fd2d 	bl	9d64 <String::String(__FlashStringHelper const*)>
    130a:	9b05      	ldr	r3, [sp, #20]
    130c:	a906      	add	r1, sp, #24
    130e:	4618      	mov	r0, r3
    1310:	f008 fda6 	bl	9e60 <String::operator=(String&&)>
    1314:	a806      	add	r0, sp, #24
    1316:	f008 fcd1 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    131a:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    131e:	f8c4 2bc8 	str.w	r2, [r4, #3016]	; 0xbc8
    1322:	f504 633d 	add.w	r3, r4, #3024	; 0xbd0
    1326:	223f      	movs	r2, #63	; 0x3f
    1328:	f884 2bcc 	strb.w	r2, [r4, #3020]	; 0xbcc
    132c:	4618      	mov	r0, r3
    132e:	2100      	movs	r1, #0
    1330:	9305      	str	r3, [sp, #20]
    1332:	f008 fd03 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1336:	4986      	ldr	r1, [pc, #536]	; (1550 <BigHouse::BigHouse()+0xb4c>)
    1338:	a806      	add	r0, sp, #24
    133a:	f008 fd13 	bl	9d64 <String::String(__FlashStringHelper const*)>
    133e:	9b05      	ldr	r3, [sp, #20]
    1340:	a906      	add	r1, sp, #24
    1342:	4618      	mov	r0, r3
    1344:	f008 fd8c 	bl	9e60 <String::operator=(String&&)>
    1348:	a806      	add	r0, sp, #24
    134a:	f008 fcb7 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    134e:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1352:	f8c4 2be0 	str.w	r2, [r4, #3040]	; 0xbe0
    1356:	f604 33e8 	addw	r3, r4, #3048	; 0xbe8
    135a:	2240      	movs	r2, #64	; 0x40
    135c:	f884 2be4 	strb.w	r2, [r4, #3044]	; 0xbe4
    1360:	4618      	mov	r0, r3
    1362:	2100      	movs	r1, #0
    1364:	9305      	str	r3, [sp, #20]
    1366:	f008 fce9 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    136a:	497a      	ldr	r1, [pc, #488]	; (1554 <BigHouse::BigHouse()+0xb50>)
    136c:	a806      	add	r0, sp, #24
    136e:	f008 fcf9 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1372:	9b05      	ldr	r3, [sp, #20]
    1374:	a906      	add	r1, sp, #24
    1376:	4618      	mov	r0, r3
    1378:	f008 fd72 	bl	9e60 <String::operator=(String&&)>
    137c:	a806      	add	r0, sp, #24
    137e:	f008 fc9d 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1382:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1386:	f8c4 2bf8 	str.w	r2, [r4, #3064]	; 0xbf8
    138a:	f504 6340 	add.w	r3, r4, #3072	; 0xc00
    138e:	2241      	movs	r2, #65	; 0x41
    1390:	f884 2bfc 	strb.w	r2, [r4, #3068]	; 0xbfc
    1394:	4618      	mov	r0, r3
    1396:	2100      	movs	r1, #0
    1398:	9305      	str	r3, [sp, #20]
    139a:	f008 fccf 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    139e:	496e      	ldr	r1, [pc, #440]	; (1558 <BigHouse::BigHouse()+0xb54>)
    13a0:	a806      	add	r0, sp, #24
    13a2:	f008 fcdf 	bl	9d64 <String::String(__FlashStringHelper const*)>
    13a6:	9b05      	ldr	r3, [sp, #20]
    13a8:	a906      	add	r1, sp, #24
    13aa:	4618      	mov	r0, r3
    13ac:	f008 fd58 	bl	9e60 <String::operator=(String&&)>
    13b0:	a806      	add	r0, sp, #24
    13b2:	f008 fc83 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    13b6:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    13ba:	f8c4 2c10 	str.w	r2, [r4, #3088]	; 0xc10
    13be:	f604 4318 	addw	r3, r4, #3096	; 0xc18
    13c2:	2242      	movs	r2, #66	; 0x42
    13c4:	f884 2c14 	strb.w	r2, [r4, #3092]	; 0xc14
    13c8:	4618      	mov	r0, r3
    13ca:	2100      	movs	r1, #0
    13cc:	9305      	str	r3, [sp, #20]
    13ce:	f008 fcb5 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    13d2:	4962      	ldr	r1, [pc, #392]	; (155c <BigHouse::BigHouse()+0xb58>)
    13d4:	a806      	add	r0, sp, #24
    13d6:	f008 fcc5 	bl	9d64 <String::String(__FlashStringHelper const*)>
    13da:	9b05      	ldr	r3, [sp, #20]
    13dc:	a906      	add	r1, sp, #24
    13de:	4618      	mov	r0, r3
    13e0:	f008 fd3e 	bl	9e60 <String::operator=(String&&)>
    13e4:	a806      	add	r0, sp, #24
    13e6:	f008 fc69 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    13ea:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    13ee:	f8c4 2c28 	str.w	r2, [r4, #3112]	; 0xc28
    13f2:	f504 6343 	add.w	r3, r4, #3120	; 0xc30
    13f6:	2246      	movs	r2, #70	; 0x46
    13f8:	f884 2c2c 	strb.w	r2, [r4, #3116]	; 0xc2c
    13fc:	4618      	mov	r0, r3
    13fe:	2100      	movs	r1, #0
    1400:	9305      	str	r3, [sp, #20]
    1402:	f008 fc9b 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    1406:	4956      	ldr	r1, [pc, #344]	; (1560 <BigHouse::BigHouse()+0xb5c>)
    1408:	a806      	add	r0, sp, #24
    140a:	f008 fcab 	bl	9d64 <String::String(__FlashStringHelper const*)>
    140e:	9b05      	ldr	r3, [sp, #20]
    1410:	a906      	add	r1, sp, #24
    1412:	4618      	mov	r0, r3
    1414:	f008 fd24 	bl	9e60 <String::operator=(String&&)>
    1418:	a806      	add	r0, sp, #24
    141a:	f008 fc4f 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    141e:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1422:	f8c4 2c40 	str.w	r2, [r4, #3136]	; 0xc40
    1426:	f604 4348 	addw	r3, r4, #3144	; 0xc48
    142a:	2247      	movs	r2, #71	; 0x47
    142c:	f884 2c44 	strb.w	r2, [r4, #3140]	; 0xc44
    1430:	4618      	mov	r0, r3
    1432:	2100      	movs	r1, #0
    1434:	9305      	str	r3, [sp, #20]
    1436:	f008 fc81 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    143a:	494a      	ldr	r1, [pc, #296]	; (1564 <BigHouse::BigHouse()+0xb60>)
    143c:	a806      	add	r0, sp, #24
    143e:	f008 fc91 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1442:	9b05      	ldr	r3, [sp, #20]
    1444:	a906      	add	r1, sp, #24
    1446:	4618      	mov	r0, r3
    1448:	f008 fd0a 	bl	9e60 <String::operator=(String&&)>
    144c:	a806      	add	r0, sp, #24
    144e:	f008 fc35 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1452:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1456:	f8c4 2c58 	str.w	r2, [r4, #3160]	; 0xc58
    145a:	f504 6346 	add.w	r3, r4, #3168	; 0xc60
    145e:	2248      	movs	r2, #72	; 0x48
    1460:	f884 2c5c 	strb.w	r2, [r4, #3164]	; 0xc5c
    1464:	4618      	mov	r0, r3
    1466:	2100      	movs	r1, #0
    1468:	9305      	str	r3, [sp, #20]
    146a:	f008 fc67 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    146e:	493e      	ldr	r1, [pc, #248]	; (1568 <BigHouse::BigHouse()+0xb64>)
    1470:	a806      	add	r0, sp, #24
    1472:	f008 fc77 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1476:	9b05      	ldr	r3, [sp, #20]
    1478:	a906      	add	r1, sp, #24
    147a:	4618      	mov	r0, r3
    147c:	f008 fcf0 	bl	9e60 <String::operator=(String&&)>
    1480:	a806      	add	r0, sp, #24
    1482:	f008 fc1b 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1486:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    148a:	f8c4 2c70 	str.w	r2, [r4, #3184]	; 0xc70
    148e:	f604 4378 	addw	r3, r4, #3192	; 0xc78
    1492:	2249      	movs	r2, #73	; 0x49
    1494:	f884 2c74 	strb.w	r2, [r4, #3188]	; 0xc74
    1498:	4618      	mov	r0, r3
    149a:	2100      	movs	r1, #0
    149c:	9305      	str	r3, [sp, #20]
    149e:	f008 fc4d 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    14a2:	4932      	ldr	r1, [pc, #200]	; (156c <BigHouse::BigHouse()+0xb68>)
    14a4:	a806      	add	r0, sp, #24
    14a6:	f008 fc5d 	bl	9d64 <String::String(__FlashStringHelper const*)>
    14aa:	9b05      	ldr	r3, [sp, #20]
    14ac:	a906      	add	r1, sp, #24
    14ae:	4618      	mov	r0, r3
    14b0:	f008 fcd6 	bl	9e60 <String::operator=(String&&)>
    14b4:	a806      	add	r0, sp, #24
    14b6:	f008 fc01 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    14ba:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    14be:	f8c4 2c88 	str.w	r2, [r4, #3208]	; 0xc88
    14c2:	f504 6349 	add.w	r3, r4, #3216	; 0xc90
    14c6:	224a      	movs	r2, #74	; 0x4a
    14c8:	f884 2c8c 	strb.w	r2, [r4, #3212]	; 0xc8c
    14cc:	4618      	mov	r0, r3
    14ce:	2100      	movs	r1, #0
    14d0:	9305      	str	r3, [sp, #20]
    14d2:	f008 fc33 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    14d6:	4926      	ldr	r1, [pc, #152]	; (1570 <BigHouse::BigHouse()+0xb6c>)
    14d8:	a806      	add	r0, sp, #24
    14da:	f008 fc43 	bl	9d64 <String::String(__FlashStringHelper const*)>
    14de:	9b05      	ldr	r3, [sp, #20]
    14e0:	a906      	add	r1, sp, #24
    14e2:	4618      	mov	r0, r3
    14e4:	f008 fcbc 	bl	9e60 <String::operator=(String&&)>
    14e8:	a806      	add	r0, sp, #24
    14ea:	f008 fbe7 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    14ee:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    14f2:	f8c4 2ca0 	str.w	r2, [r4, #3232]	; 0xca0
    14f6:	f604 43a8 	addw	r3, r4, #3240	; 0xca8
    14fa:	224b      	movs	r2, #75	; 0x4b
    14fc:	f884 2ca4 	strb.w	r2, [r4, #3236]	; 0xca4
    1500:	4618      	mov	r0, r3
    1502:	2100      	movs	r1, #0
    1504:	9305      	str	r3, [sp, #20]
    1506:	f008 fc19 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    150a:	491a      	ldr	r1, [pc, #104]	; (1574 <BigHouse::BigHouse()+0xb70>)
    150c:	a806      	add	r0, sp, #24
    150e:	f008 fc29 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1512:	9b05      	ldr	r3, [sp, #20]
    1514:	a906      	add	r1, sp, #24
    1516:	4618      	mov	r0, r3
    1518:	f008 fca2 	bl	9e60 <String::operator=(String&&)>
    151c:	a806      	add	r0, sp, #24
    151e:	f008 fbcd 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    1522:	f8d4 296c 	ldr.w	r2, [r4, #2412]	; 0x96c
    1526:	f8c4 2cb8 	str.w	r2, [r4, #3256]	; 0xcb8
    152a:	f504 634c 	add.w	r3, r4, #3264	; 0xcc0
    152e:	224c      	movs	r2, #76	; 0x4c
    1530:	f884 2cbc 	strb.w	r2, [r4, #3260]	; 0xcbc
    1534:	4618      	mov	r0, r3
    1536:	2100      	movs	r1, #0
    1538:	e01e      	b.n	1578 <BigHouse::BigHouse()+0xb74>
    153a:	bf00      	nop
    153c:	0000fa00 	.word	0x0000fa00
    1540:	0000fa10 	.word	0x0000fa10
    1544:	0000fa28 	.word	0x0000fa28
    1548:	0000fa38 	.word	0x0000fa38
    154c:	0000fa4c 	.word	0x0000fa4c
    1550:	0000fa60 	.word	0x0000fa60
    1554:	0000fa7c 	.word	0x0000fa7c
    1558:	0000fa8c 	.word	0x0000fa8c
    155c:	0000faa4 	.word	0x0000faa4
    1560:	0000fab0 	.word	0x0000fab0
    1564:	0000fac0 	.word	0x0000fac0
    1568:	0000fad4 	.word	0x0000fad4
    156c:	0000fae8 	.word	0x0000fae8
    1570:	0000fb04 	.word	0x0000fb04
    1574:	0000fb14 	.word	0x0000fb14
    1578:	9305      	str	r3, [sp, #20]
    157a:	f008 fbdf 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    157e:	49d7      	ldr	r1, [pc, #860]	; (18dc <BigHouse::BigHouse()+0xed8>)
    1580:	a806      	add	r0, sp, #24
    1582:	f008 fbef 	bl	9d64 <String::String(__FlashStringHelper const*)>
    1586:	9b05      	ldr	r3, [sp, #20]
    1588:	a906      	add	r1, sp, #24
    158a:	4618      	mov	r0, r3
    158c:	f008 fc68 	bl	9e60 <String::operator=(String&&)>
    1590:	a806      	add	r0, sp, #24
    1592:	f008 fb93 	bl	9cbc <String::~String()>
		ACTUATOR(ballRelease, LAMPS, 2, "ball release");
		ACTUATOR(ramp, LAMPS, 12, "ramp");
		ACTUATOR(ballGate, LAMPS, 13, "ball gate");
		ACTUATOR(auger, LAMPS, 14, "auger motor");
		// constructor
		Act(Sys80b* sys) : _sys(sys) {};
    1596:	f8cd 8000 	str.w	r8, [sp]
    159a:	4621      	mov	r1, r4
    159c:	2302      	movs	r3, #2
    159e:	2201      	movs	r2, #1
    15a0:	f8c4 4cd0 	str.w	r4, [r4, #3280]	; 0xcd0
    15a4:	f604 40d4 	addw	r0, r4, #3284	; 0xcd4
    15a8:	f003 fb00 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    15ac:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    15b0:	f8cd b000 	str.w	fp, [sp]
    15b4:	2303      	movs	r3, #3
    15b6:	2201      	movs	r2, #1
    15b8:	f604 40ec 	addw	r0, r4, #3308	; 0xcec
    15bc:	f003 faf6 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    15c0:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    15c4:	f8cd a000 	str.w	sl, [sp]
    15c8:	464b      	mov	r3, r9
    15ca:	2201      	movs	r2, #1
    15cc:	f604 5004 	addw	r0, r4, #3332	; 0xd04
    15d0:	f003 faec 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    15d4:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    15d8:	9700      	str	r7, [sp, #0]
    15da:	2305      	movs	r3, #5
    15dc:	2201      	movs	r2, #1
    15de:	f604 501c 	addw	r0, r4, #3356	; 0xd1c
    15e2:	f003 fae3 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    15e6:	4bbe      	ldr	r3, [pc, #760]	; (18e0 <BigHouse::BigHouse()+0xedc>)
    15e8:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    15ec:	9300      	str	r3, [sp, #0]
    15ee:	2201      	movs	r2, #1
    15f0:	2306      	movs	r3, #6
    15f2:	f604 5034 	addw	r0, r4, #3380	; 0xd34
    15f6:	f003 fad9 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    15fa:	4bba      	ldr	r3, [pc, #744]	; (18e4 <BigHouse::BigHouse()+0xee0>)
    15fc:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    1600:	9300      	str	r3, [sp, #0]
    1602:	2201      	movs	r2, #1
    1604:	2307      	movs	r3, #7
    1606:	f604 504c 	addw	r0, r4, #3404	; 0xd4c
    160a:	f003 facf 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    160e:	4bb6      	ldr	r3, [pc, #728]	; (18e8 <BigHouse::BigHouse()+0xee4>)
    1610:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    1614:	9300      	str	r3, [sp, #0]
    1616:	2203      	movs	r2, #3
    1618:	2302      	movs	r3, #2
    161a:	f604 5064 	addw	r0, r4, #3428	; 0xd64
    161e:	f003 fac5 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1622:	4bb2      	ldr	r3, [pc, #712]	; (18ec <BigHouse::BigHouse()+0xee8>)
    1624:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    1628:	9300      	str	r3, [sp, #0]
    162a:	2203      	movs	r2, #3
    162c:	230c      	movs	r3, #12
    162e:	f604 507c 	addw	r0, r4, #3452	; 0xd7c
    1632:	f003 fabb 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    1636:	4bae      	ldr	r3, [pc, #696]	; (18f0 <BigHouse::BigHouse()+0xeec>)
    1638:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    163c:	9300      	str	r3, [sp, #0]
    163e:	2203      	movs	r2, #3
    1640:	230d      	movs	r3, #13
    1642:	f604 5094 	addw	r0, r4, #3476	; 0xd94
    1646:	f003 fab1 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    164a:	4baa      	ldr	r3, [pc, #680]	; (18f4 <BigHouse::BigHouse()+0xef0>)
    164c:	f8d4 1cd0 	ldr.w	r1, [r4, #3280]	; 0xcd0
    1650:	9300      	str	r3, [sp, #0]
    1652:	f604 50ac 	addw	r0, r4, #3500	; 0xdac
    1656:	230e      	movs	r3, #14
    1658:	2203      	movs	r2, #3
    165a:	f003 faa7 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    165e:	3664      	adds	r6, #100	; 0x64
    1660:	f604 5ec4 	addw	lr, r4, #3524	; 0xdc4
    1664:	6828      	ldr	r0, [r5, #0]
    1666:	6869      	ldr	r1, [r5, #4]
    1668:	68aa      	ldr	r2, [r5, #8]
    166a:	68eb      	ldr	r3, [r5, #12]
    166c:	4677      	mov	r7, lr
    166e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    1670:	3510      	adds	r5, #16
    1672:	42b5      	cmp	r5, r6
    1674:	46be      	mov	lr, r7
    1676:	d1f5      	bne.n	1664 <BigHouse::BigHouse()+0xc60>
    1678:	2110      	movs	r1, #16
    167a:	489f      	ldr	r0, [pc, #636]	; (18f8 <BigHouse::BigHouse()+0xef4>)
    167c:	f008 f84a 	bl	9714 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1680:	489e      	ldr	r0, [pc, #632]	; (18fc <BigHouse::BigHouse()+0xef8>)
    1682:	f008 fa85 	bl	9b90 <Print::println()>
	Serial.println("BigHouse init...");
	delay(100);
    1686:	2064      	movs	r0, #100	; 0x64
    1688:	f007 f82a 	bl	86e0 <delay>
	_gameName = String(GAME_NAME);
    168c:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
    1690:	a806      	add	r0, sp, #24
    1692:	f008 fb53 	bl	9d3c <String::String(char const*)>
    1696:	a906      	add	r1, sp, #24
    1698:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
    169c:	f008 fbe0 	bl	9e60 <String::operator=(String&&)>
    16a0:	a806      	add	r0, sp, #24
    16a2:	f008 fb0b 	bl	9cbc <String::~String()>
	_gameNum = GAME_NUMBER;
	slamSwitchNormalState = false;
    16a6:	f04f 0800 	mov.w	r8, #0

BigHouse::BigHouse() {
	Serial.println("BigHouse init...");
	delay(100);
	_gameName = String(GAME_NAME);
	_gameNum = GAME_NUMBER;
    16aa:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
    16ae:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    16b2:	2116      	movs	r1, #22
	slamSwitchNormalState = false;
    16b4:	f884 8271 	strb.w	r8, [r4, #625]	; 0x271
    16b8:	4891      	ldr	r0, [pc, #580]	; (1900 <BigHouse::BigHouse()+0xefc>)
    16ba:	f008 f82b 	bl	9714 <usb_serial_write>
    16be:	488f      	ldr	r0, [pc, #572]	; (18fc <BigHouse::BigHouse()+0xef8>)
    16c0:	f008 fa66 	bl	9b90 <Print::println()>
	Serial.println("- light groups init...");
	delay(100);
    16c4:	2064      	movs	r0, #100	; 0x64
    16c6:	f007 f80b 	bl	86e0 <delay>
	extraball_ls = new LightGroup("extraball", 5, 6, 7, -1 );
    16ca:	201c      	movs	r0, #28
    16cc:	f008 fa1a 	bl	9b04 <operator new(unsigned int)>
    16d0:	f04f 35ff 	mov.w	r5, #4294967295
    16d4:	2307      	movs	r3, #7
    16d6:	4606      	mov	r6, r0
    16d8:	9501      	str	r5, [sp, #4]
    16da:	9300      	str	r3, [sp, #0]
    16dc:	2205      	movs	r2, #5
    16de:	2306      	movs	r3, #6
    16e0:	4988      	ldr	r1, [pc, #544]	; (1904 <BigHouse::BigHouse()+0xf00>)
    16e2:	f002 f9b5 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    16e6:	f8c4 6550 	str.w	r6, [r4, #1360]	; 0x550
	lastchance_ls = new LightGroup("lastchance", 8, 9, -1 );
    16ea:	201c      	movs	r0, #28
    16ec:	f008 fa0a 	bl	9b04 <operator new(unsigned int)>
    16f0:	9500      	str	r5, [sp, #0]
    16f2:	4606      	mov	r6, r0
    16f4:	2309      	movs	r3, #9
    16f6:	2208      	movs	r2, #8
    16f8:	4983      	ldr	r1, [pc, #524]	; (1908 <BigHouse::BigHouse()+0xf04>)
    16fa:	f002 f9a9 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    16fe:	f8c4 6554 	str.w	r6, [r4, #1364]	; 0x554
	special_ls = new LightGroup("special", 10, 11, -1 );
    1702:	201c      	movs	r0, #28
    1704:	f008 f9fe 	bl	9b04 <operator new(unsigned int)>
    1708:	9500      	str	r5, [sp, #0]
    170a:	4606      	mov	r6, r0
    170c:	230b      	movs	r3, #11
    170e:	220a      	movs	r2, #10
    1710:	497e      	ldr	r1, [pc, #504]	; (190c <BigHouse::BigHouse()+0xf08>)
    1712:	f002 f99d 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    1716:	f8c4 6558 	str.w	r6, [r4, #1368]	; 0x558
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1 );
    171a:	201c      	movs	r0, #28
    171c:	f008 f9f2 	bl	9b04 <operator new(unsigned int)>
    1720:	2219      	movs	r2, #25
    1722:	2318      	movs	r3, #24
    1724:	4606      	mov	r6, r0
    1726:	9502      	str	r5, [sp, #8]
    1728:	9201      	str	r2, [sp, #4]
    172a:	9300      	str	r3, [sp, #0]
    172c:	2216      	movs	r2, #22
    172e:	2317      	movs	r3, #23
    1730:	4977      	ldr	r1, [pc, #476]	; (1910 <BigHouse::BigHouse()+0xf0c>)
    1732:	f002 f98d 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    1736:	f8c4 655c 	str.w	r6, [r4, #1372]	; 0x55c
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1 );
    173a:	201c      	movs	r0, #28
    173c:	f008 f9e2 	bl	9b04 <operator new(unsigned int)>
    1740:	2321      	movs	r3, #33	; 0x21
    1742:	2720      	movs	r7, #32
    1744:	9302      	str	r3, [sp, #8]
    1746:	231f      	movs	r3, #31
    1748:	4606      	mov	r6, r0
    174a:	9503      	str	r5, [sp, #12]
    174c:	9300      	str	r3, [sp, #0]
    174e:	221d      	movs	r2, #29
    1750:	231e      	movs	r3, #30
    1752:	4970      	ldr	r1, [pc, #448]	; (1914 <BigHouse::BigHouse()+0xf10>)
    1754:	9701      	str	r7, [sp, #4]
    1756:	f002 f97b 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    175a:	f8c4 6560 	str.w	r6, [r4, #1376]	; 0x560
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1 );
    175e:	201c      	movs	r0, #28
    1760:	f008 f9d0 	bl	9b04 <operator new(unsigned int)>
    1764:	2225      	movs	r2, #37	; 0x25
    1766:	2324      	movs	r3, #36	; 0x24
    1768:	4606      	mov	r6, r0
    176a:	9502      	str	r5, [sp, #8]
    176c:	9201      	str	r2, [sp, #4]
    176e:	9300      	str	r3, [sp, #0]
    1770:	2222      	movs	r2, #34	; 0x22
    1772:	2323      	movs	r3, #35	; 0x23
    1774:	4968      	ldr	r1, [pc, #416]	; (1918 <BigHouse::BigHouse()+0xf14>)
    1776:	f002 f96b 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    177a:	f8c4 6564 	str.w	r6, [r4, #1380]	; 0x564
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1 );
    177e:	201c      	movs	r0, #28
    1780:	f008 f9c0 	bl	9b04 <operator new(unsigned int)>
    1784:	2229      	movs	r2, #41	; 0x29
    1786:	2328      	movs	r3, #40	; 0x28
    1788:	4606      	mov	r6, r0
    178a:	9502      	str	r5, [sp, #8]
    178c:	9201      	str	r2, [sp, #4]
    178e:	9300      	str	r3, [sp, #0]
    1790:	2226      	movs	r2, #38	; 0x26
    1792:	2327      	movs	r3, #39	; 0x27
    1794:	4961      	ldr	r1, [pc, #388]	; (191c <BigHouse::BigHouse()+0xf18>)
    1796:	f002 f95b 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    179a:	f8c4 6568 	str.w	r6, [r4, #1384]	; 0x568
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1 );
    179e:	201c      	movs	r0, #28
    17a0:	f008 f9b0 	bl	9b04 <operator new(unsigned int)>
    17a4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    17a8:	f04f 092c 	mov.w	r9, #44	; 0x2c
    17ac:	4606      	mov	r6, r0
    17ae:	9502      	str	r5, [sp, #8]
    17b0:	e88d 0600 	stmia.w	sp, {r9, sl}
    17b4:	232b      	movs	r3, #43	; 0x2b
    17b6:	222a      	movs	r2, #42	; 0x2a
    17b8:	4959      	ldr	r1, [pc, #356]	; (1920 <BigHouse::BigHouse()+0xf1c>)
    17ba:	f002 f949 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    17be:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1 );
    17c2:	201c      	movs	r0, #28
    17c4:	f008 f99e 	bl	9b04 <operator new(unsigned int)>
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1 );
    17c8:	261c      	movs	r6, #28
	wall_ls = new LightGroup("wall", 22, 23, 24, 25, -1 );
	break_ls = new LightGroup("break", 29, 30, 31, 32, 33, -1 );
	jail_ls = new LightGroup("jail", 34, 35, 36, 37, -1 );
	multi_ls = new LightGroup("multi", 38, 39, 40, 41, -1 );
	cellblock_ls = new LightGroup("cellblock", 42, 43, 44, 45, -1 );
	lightshow_ls = new LightGroup("lightshow", 17, 46, -1 );
    17ca:	4683      	mov	fp, r0
    17cc:	9500      	str	r5, [sp, #0]
    17ce:	232e      	movs	r3, #46	; 0x2e
    17d0:	2211      	movs	r2, #17
    17d2:	4954      	ldr	r1, [pc, #336]	; (1924 <BigHouse::BigHouse()+0xf20>)
    17d4:	f002 f93c 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    17d8:	f8c4 b570 	str.w	fp, [r4, #1392]	; 0x570
	droptarget_ls = new LightGroup("droptarget", 26, 27, 28, -1 );
    17dc:	4630      	mov	r0, r6
    17de:	f008 f991 	bl	9b04 <operator new(unsigned int)>
    17e2:	9501      	str	r5, [sp, #4]
    17e4:	4683      	mov	fp, r0
    17e6:	9600      	str	r6, [sp, #0]
    17e8:	231b      	movs	r3, #27
    17ea:	221a      	movs	r2, #26
    17ec:	494e      	ldr	r1, [pc, #312]	; (1928 <BigHouse::BigHouse()+0xf24>)
    17ee:	f002 f92f 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    17f2:	f8c4 b574 	str.w	fp, [r4, #1396]	; 0x574
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1 );
    17f6:	4630      	mov	r0, r6
    17f8:	f008 f984 	bl	9b04 <operator new(unsigned int)>
    17fc:	2315      	movs	r3, #21
    17fe:	4683      	mov	fp, r0
    1800:	9502      	str	r5, [sp, #8]
    1802:	9600      	str	r6, [sp, #0]
    1804:	9301      	str	r3, [sp, #4]
    1806:	221a      	movs	r2, #26
    1808:	231b      	movs	r3, #27
    180a:	4948      	ldr	r1, [pc, #288]	; (192c <BigHouse::BigHouse()+0xf28>)
    180c:	f002 f920 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    1810:	f8c4 b578 	str.w	fp, [r4, #1400]	; 0x578
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1 );
    1814:	4630      	mov	r0, r6
    1816:	f008 f975 	bl	9b04 <operator new(unsigned int)>
    181a:	2209      	movs	r2, #9
    181c:	230b      	movs	r3, #11
    181e:	4683      	mov	fp, r0
    1820:	9502      	str	r5, [sp, #8]
    1822:	9201      	str	r2, [sp, #4]
    1824:	9300      	str	r3, [sp, #0]
    1826:	2208      	movs	r2, #8
    1828:	230a      	movs	r3, #10
    182a:	4941      	ldr	r1, [pc, #260]	; (1930 <BigHouse::BigHouse()+0xf2c>)
    182c:	f002 f910 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    1830:	f8c4 b57c 	str.w	fp, [r4, #1404]	; 0x57c
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1 );
    1834:	4630      	mov	r0, r6
    1836:	f008 f965 	bl	9b04 <operator new(unsigned int)>
    183a:	9502      	str	r5, [sp, #8]
    183c:	4683      	mov	fp, r0
    183e:	f8cd 9000 	str.w	r9, [sp]
    1842:	2314      	movs	r3, #20
    1844:	220f      	movs	r2, #15
    1846:	493b      	ldr	r1, [pc, #236]	; (1934 <BigHouse::BigHouse()+0xf30>)
    1848:	f8cd a004 	str.w	sl, [sp, #4]
    184c:	f002 f900 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    1850:	f8c4 b580 	str.w	fp, [r4, #1408]	; 0x580
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1 );
    1854:	4630      	mov	r0, r6
    1856:	f008 f955 	bl	9b04 <operator new(unsigned int)>
    185a:	231f      	movs	r3, #31
    185c:	4681      	mov	r9, r0
    185e:	9300      	str	r3, [sp, #0]
    1860:	9502      	str	r5, [sp, #8]
    1862:	231e      	movs	r3, #30
    1864:	221d      	movs	r2, #29
    1866:	4934      	ldr	r1, [pc, #208]	; (1938 <BigHouse::BigHouse()+0xf34>)
    1868:	9701      	str	r7, [sp, #4]
    186a:	f002 f8f1 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    186e:	f8c4 9584 	str.w	r9, [r4, #1412]	; 0x584
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1 );
    1872:	4630      	mov	r0, r6
    1874:	f008 f946 	bl	9b04 <operator new(unsigned int)>
    1878:	232b      	movs	r3, #43	; 0x2b
    187a:	2207      	movs	r2, #7
    187c:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
    1880:	4681      	mov	r9, r0
    1882:	2306      	movs	r3, #6
    1884:	2205      	movs	r2, #5
    1886:	492d      	ldr	r1, [pc, #180]	; (193c <BigHouse::BigHouse()+0xf38>)
    1888:	f002 f8e2 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
    188c:	f8c4 9588 	str.w	r9, [r4, #1416]	; 0x588
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1 );
    1890:	4630      	mov	r0, r6
    1892:	f008 f937 	bl	9b04 <operator new(unsigned int)>
    1896:	232a      	movs	r3, #42	; 0x2a
    1898:	2221      	movs	r2, #33	; 0x21
    189a:	9502      	str	r5, [sp, #8]
    189c:	9201      	str	r2, [sp, #4]
    189e:	9300      	str	r3, [sp, #0]
    18a0:	2203      	movs	r2, #3
    18a2:	2311      	movs	r3, #17
    18a4:	4926      	ldr	r1, [pc, #152]	; (1940 <BigHouse::BigHouse()+0xf3c>)
    18a6:	4606      	mov	r6, r0
    18a8:	f002 f8d2 	bl	3a50 <LightGroup::LightGroup(char const*, long, ...)>
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
    18ac:	f504 62af 	add.w	r2, r4, #1400	; 0x578
    18b0:	ca2c      	ldmia	r2, {r2, r3, r5}
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1 );
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1 );
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
    18b2:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
    18b6:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1 );
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1 );
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1 );
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1 );
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1 );
	lShow_set[0] = jail_ls;
    18ba:	f8d4 0564 	ldr.w	r0, [r4, #1380]	; 0x564
	lShow_set[1] = wall_ls;
    18be:	f8d4 155c 	ldr.w	r1, [r4, #1372]	; 0x55c
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
    18c2:	f8c4 35a4 	str.w	r3, [r4, #1444]	; 0x5a4
	lShow_set[6] = show5_ls;
    18c6:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1 );
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1 );
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1 );
	lShow_set[0] = jail_ls;
	lShow_set[1] = wall_ls;
	lShow_set[2] = show1_ls;
    18ca:	f8c4 2598 	str.w	r2, [r4, #1432]	; 0x598
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
	lShow_set[6] = show5_ls;
    18ce:	f8c4 35a8 	str.w	r3, [r4, #1448]	; 0x5a8
	show1_ls = new LightGroup("show1", 26, 27, 28, 21, -1 );
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1 );
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1 );
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1 );
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1 );
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1 );
    18d2:	f8c4 658c 	str.w	r6, [r4, #1420]	; 0x58c
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
	lShow_set[5] = show4_ls;
	lShow_set[6] = show5_ls;
	lShow_set[7] = show6_ls;
    18d6:	f8c4 65ac 	str.w	r6, [r4, #1452]	; 0x5ac
    18da:	e033      	b.n	1944 <BigHouse::BigHouse()+0xf40>
    18dc:	0000faa8 	.word	0x0000faa8
    18e0:	0000f86c 	.word	0x0000f86c
    18e4:	0000f878 	.word	0x0000f878
    18e8:	0000fb2c 	.word	0x0000fb2c
    18ec:	0000fb3c 	.word	0x0000fb3c
    18f0:	0000fb44 	.word	0x0000fb44
    18f4:	0000fb50 	.word	0x0000fb50
    18f8:	0000fb5c 	.word	0x0000fb5c
    18fc:	1fff876c 	.word	0x1fff876c
    1900:	0000fb70 	.word	0x0000fb70
    1904:	0000fb88 	.word	0x0000fb88
    1908:	0000fb94 	.word	0x0000fb94
    190c:	0000fba0 	.word	0x0000fba0
    1910:	0000fba8 	.word	0x0000fba8
    1914:	0000fbb0 	.word	0x0000fbb0
    1918:	0000fbb8 	.word	0x0000fbb8
    191c:	0000fbc0 	.word	0x0000fbc0
    1920:	0000fbc8 	.word	0x0000fbc8
    1924:	0000fbd4 	.word	0x0000fbd4
    1928:	0000fbe0 	.word	0x0000fbe0
    192c:	0000fbec 	.word	0x0000fbec
    1930:	0000fbf4 	.word	0x0000fbf4
    1934:	0000fbfc 	.word	0x0000fbfc
    1938:	0000fc04 	.word	0x0000fc04
    193c:	0000fc0c 	.word	0x0000fc0c
    1940:	0000fc14 	.word	0x0000fc14
	show2_ls = new LightGroup("show2", 8, 10, 11, 9, -1 );
	show3_ls = new LightGroup("show3", 15, 20, 44, 45, -1 );
	show4_ls = new LightGroup("show4", 29, 30, 31, 32, -1 );
	show5_ls = new LightGroup("show5", 5, 6, 7, 43, -1 );
	show6_ls = new LightGroup("show6", 3, 17, 42, 33, -1 );
	lShow_set[0] = jail_ls;
    1944:	f8c4 0590 	str.w	r0, [r4, #1424]	; 0x590
	lShow_set[1] = wall_ls;
    1948:	f8c4 1594 	str.w	r1, [r4, #1428]	; 0x594
	lShow_set[2] = show1_ls;
	lShow_set[3] = show2_ls;
	lShow_set[4] = show3_ls;
    194c:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
    1950:	2110      	movs	r1, #16
    1952:	4833      	ldr	r0, [pc, #204]	; (1a20 <BigHouse::BigHouse()+0x101c>)
    1954:	f007 fede 	bl	9714 <usb_serial_write>
    1958:	4832      	ldr	r0, [pc, #200]	; (1a24 <BigHouse::BigHouse()+0x1020>)
    195a:	f008 f919 	bl	9b90 <Print::println()>
	//for (int i = 0; i < 8; i++) {
	//	Serial.print("Light Show group: ");
	//	Serial.println(lShow_set[i]->nameStr);
	//}
	Serial.println("- timers init...");
	delay(100);
    195e:	2064      	movs	r0, #100	; 0x64
    1960:	f006 febe 	bl	86e0 <delay>
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", true);
    1964:	4638      	mov	r0, r7
    1966:	f008 f8cd 	bl	9b04 <operator new(unsigned int)>
    196a:	f504 7521 	add.w	r5, r4, #644	; 0x284
    196e:	2601      	movs	r6, #1
    1970:	4629      	mov	r1, r5
    1972:	4681      	mov	r9, r0
    1974:	9600      	str	r6, [sp, #0]
    1976:	4b2c      	ldr	r3, [pc, #176]	; (1a28 <BigHouse::BigHouse()+0x1024>)
    1978:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    197c:	f003 fc94 	bl	52a8 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
    1980:	f8c4 9530 	str.w	r9, [r4, #1328]	; 0x530
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
    1984:	4638      	mov	r0, r7
    1986:	f008 f8bd 	bl	9b04 <operator new(unsigned int)>
    198a:	4629      	mov	r1, r5
    198c:	4681      	mov	r9, r0
    198e:	9600      	str	r6, [sp, #0]
    1990:	4b26      	ldr	r3, [pc, #152]	; (1a2c <BigHouse::BigHouse()+0x1028>)
    1992:	22c8      	movs	r2, #200	; 0xc8
    1994:	f003 fc88 	bl	52a8 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
    1998:	f8c4 9534 	str.w	r9, [r4, #1332]	; 0x534
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
    199c:	4638      	mov	r0, r7
    199e:	f008 f8b1 	bl	9b04 <operator new(unsigned int)>
    19a2:	4b23      	ldr	r3, [pc, #140]	; (1a30 <BigHouse::BigHouse()+0x102c>)
    19a4:	f8cd 8000 	str.w	r8, [sp]
    19a8:	4606      	mov	r6, r0
    19aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    19ae:	4629      	mov	r1, r5
    19b0:	f003 fc7a 	bl	52a8 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
	brel_tmr->setPeriodic(false);
    19b4:	4641      	mov	r1, r8
	//}
	Serial.println("- timers init...");
	delay(100);
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", true);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
    19b6:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
	brel_tmr->setPeriodic(false);
    19ba:	4630      	mov	r0, r6
    19bc:	f003 fca8 	bl	5310 <TimerTask::setPeriodic(bool)>
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    19c0:	4638      	mov	r0, r7
    19c2:	f008 f89f 	bl	9b04 <operator new(unsigned int)>
    19c6:	4b1b      	ldr	r3, [pc, #108]	; (1a34 <BigHouse::BigHouse()+0x1030>)
    19c8:	f8cd 8000 	str.w	r8, [sp]
    19cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    19d0:	4606      	mov	r6, r0
    19d2:	4629      	mov	r1, r5
	dropTargets_tt = tmr.add(dropt_tmr);
    19d4:	f504 659a 	add.w	r5, r4, #1232	; 0x4d0
	delay(100);
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", true);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    19d8:	f003 fc66 	bl	52a8 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>
	dropTargets_tt = tmr.add(dropt_tmr);
    19dc:	f8d4 1530 	ldr.w	r1, [r4, #1328]	; 0x530
	delay(100);
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", true);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
    19e0:	f8c4 653c 	str.w	r6, [r4, #1340]	; 0x53c
	dropTargets_tt = tmr.add(dropt_tmr);
    19e4:	4628      	mov	r0, r5
    19e6:	f003 fc3b 	bl	5260 <TimerSet::add(TimerTask*)>
	lightShow_tt = tmr.add(lshow_tmr);
    19ea:	f8d4 1534 	ldr.w	r1, [r4, #1332]	; 0x534
	dropt_tmr = new TimerTask(this, DROPT_LIGHT_TMR1, "Drop targets", true);
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
    19ee:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
	lightShow_tt = tmr.add(lshow_tmr);
    19f2:	4628      	mov	r0, r5
    19f4:	f003 fc34 	bl	5260 <TimerSet::add(TimerTask*)>
	ballRelease_tt = tmr.add(brel_tmr);
    19f8:	f8d4 1538 	ldr.w	r1, [r4, #1336]	; 0x538
	lshow_tmr = new TimerTask(this, 200, "Light show", true);
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
	lightShow_tt = tmr.add(lshow_tmr);
    19fc:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
	ballRelease_tt = tmr.add(brel_tmr);
    1a00:	4628      	mov	r0, r5
    1a02:	f003 fc2d 	bl	5260 <TimerSet::add(TimerTask*)>
	display_tt = tmr.add(dshow_tmr);
    1a06:	f8d4 153c 	ldr.w	r1, [r4, #1340]	; 0x53c
	brel_tmr = new TimerTask(this, SOL_DEF_TIME, "Ball release", false);
	brel_tmr->setPeriodic(false);
	dshow_tmr = new TimerTask(this, 1000, "Display show", false);
	dropTargets_tt = tmr.add(dropt_tmr);
	lightShow_tt = tmr.add(lshow_tmr);
	ballRelease_tt = tmr.add(brel_tmr);
    1a0a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
	display_tt = tmr.add(dshow_tmr);
    1a0e:	4628      	mov	r0, r5
    1a10:	f003 fc26 	bl	5260 <TimerSet::add(TimerTask*)>
    1a14:	f8c4 054c 	str.w	r0, [r4, #1356]	; 0x54c
}
    1a18:	4620      	mov	r0, r4
    1a1a:	b00b      	add	sp, #44	; 0x2c
    1a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a20:	0000fc1c 	.word	0x0000fc1c
    1a24:	1fff876c 	.word	0x1fff876c
    1a28:	0000fc30 	.word	0x0000fc30
    1a2c:	0000fc40 	.word	0x0000fc40
    1a30:	0000fc4c 	.word	0x0000fc4c
    1a34:	0000fc5c 	.word	0x0000fc5c

00001a38 <BigHouse::resetDropTargets()>:
	break_ls->set(0, BLINK_L);
	jailSeq = 0;
	breakSeq = 0;
}

void BigHouse::resetDropTargets() {
    1a38:	b570      	push	{r4, r5, r6, lr}
    1a3a:	4604      	mov	r4, r0
	dropt_tmr->disable();
    1a3c:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    1a40:	f003 fc76 	bl	5330 <TimerTask::disable()>
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetSeq = 0;
    1a44:	2500      	movs	r5, #0
	breakSeq = 0;
}

void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
    1a46:	f8d4 0530 	ldr.w	r0, [r4, #1328]	; 0x530
    1a4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1a4e:	f003 fc5d 	bl	530c <TimerTask::setPeriod(unsigned long)>
	dropTargetSeq = 0;
	droptarget_ls->setAll(OFF_L);
    1a52:	4629      	mov	r1, r5
    1a54:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
}

void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetSeq = 0;
    1a58:	f884 5520 	strb.w	r5, [r4, #1312]	; 0x520
	droptarget_ls->setAll(OFF_L);
    1a5c:	f002 f8b6 	bl	3bcc <LightGroup::setAll(lightState)>
	activateSolenoid(BRESET, 250);
    1a60:	462b      	mov	r3, r5
    1a62:	4620      	mov	r0, r4
    1a64:	22fa      	movs	r2, #250	; 0xfa
    1a66:	2106      	movs	r1, #6
}
    1a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void BigHouse::resetDropTargets() {
	dropt_tmr->disable();
	dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
	dropTargetSeq = 0;
	droptarget_ls->setAll(OFF_L);
	activateSolenoid(BRESET, 250);
    1a6c:	f002 bebe 	b.w	47ec <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>

00001a70 <BigHouse::advanceJail()>:
		wallDown = true;
	}
	return wallDown;
}

void BigHouse::advanceJail() {
    1a70:	b510      	push	{r4, lr}
    1a72:	4604      	mov	r4, r0
	jail_ls->set(jailSeq, ON_L);
    1a74:	f890 151e 	ldrb.w	r1, [r0, #1310]	; 0x51e
    1a78:	f8d0 0564 	ldr.w	r0, [r0, #1380]	; 0x564
    1a7c:	2201      	movs	r2, #1
    1a7e:	f002 f843 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
	if (jailSeq < 4) jail_ls->set(jailSeq++, BLINK_L);
    1a82:	f894 151e 	ldrb.w	r1, [r4, #1310]	; 0x51e
    1a86:	2903      	cmp	r1, #3
    1a88:	d900      	bls.n	1a8c <BigHouse::advanceJail()+0x1c>
    1a8a:	bd10      	pop	{r4, pc}
    1a8c:	1c4b      	adds	r3, r1, #1
    1a8e:	f884 351e 	strb.w	r3, [r4, #1310]	; 0x51e
    1a92:	f8d4 0564 	ldr.w	r0, [r4, #1380]	; 0x564
    1a96:	2202      	movs	r2, #2
}
    1a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return wallDown;
}

void BigHouse::advanceJail() {
	jail_ls->set(jailSeq, ON_L);
	if (jailSeq < 4) jail_ls->set(jailSeq++, BLINK_L);
    1a9c:	f002 b834 	b.w	3b08 <LightGroup::set(unsigned char, lightState)>

00001aa0 <BigHouse::onDropTarget(unsigned char)>:
	prWarning("BigHouse::timerRoutine: unknown taskId");
}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) {
    1aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_3balls) addScore(5000); else addScore(3000);
    1aa2:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
	prWarning("BigHouse::timerRoutine: unknown taskId");
}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) {
    1aa6:	4604      	mov	r4, r0
    1aa8:	460d      	mov	r5, r1
	if (_3balls) addScore(5000); else addScore(3000);
    1aaa:	b1ab      	cbz	r3, 1ad8 <BigHouse::onDropTarget(unsigned char)+0x38>
    1aac:	f241 3188 	movw	r1, #5000	; 0x1388
    1ab0:	f001 fe66 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1ab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1ab8:	4620      	mov	r0, r4
    1aba:	f001 fecd 	bl	3858 <Game::addBonus(unsigned long)>

	if (dropTargetSeq == 0) {
    1abe:	f894 1520 	ldrb.w	r1, [r4, #1312]	; 0x520
    1ac2:	b1b1      	cbz	r1, 1af2 <BigHouse::onDropTarget(unsigned char)+0x52>
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
		dropt_tmr->enable();
	}
	dropTargetSeq |= 1 << n;
    1ac4:	2601      	movs	r6, #1
    1ac6:	fa06 f505 	lsl.w	r5, r6, r5
    1aca:	4329      	orrs	r1, r5
    1acc:	b2c9      	uxtb	r1, r1
	//if (allDropTargetsDown()) {
	if (dropTargetSeq == 0xf) { // all targets down
    1ace:	290f      	cmp	r1, #15
	if (dropTargetSeq == 0) {
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
		dropt_tmr->enable();
	}
	dropTargetSeq |= 1 << n;
    1ad0:	f884 1520 	strb.w	r1, [r4, #1312]	; 0x520
	//if (allDropTargetsDown()) {
	if (dropTargetSeq == 0xf) { // all targets down
    1ad4:	d01f      	beq.n	1b16 <BigHouse::onDropTarget(unsigned char)+0x76>
    1ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

// GAME RULES ======================================================================

void BigHouse::onDropTarget(byte n) {
	if (_3balls) addScore(5000); else addScore(3000);
    1ad8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1adc:	f001 fe50 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1ae4:	4620      	mov	r0, r4
    1ae6:	f001 feb7 	bl	3858 <Game::addBonus(unsigned long)>

	if (dropTargetSeq == 0) {
    1aea:	f894 1520 	ldrb.w	r1, [r4, #1312]	; 0x520
    1aee:	2900      	cmp	r1, #0
    1af0:	d1e8      	bne.n	1ac4 <BigHouse::onDropTarget(unsigned char)+0x24>
		droptarget_ls->set(0, BLINK_L);
    1af2:	2202      	movs	r2, #2
    1af4:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1af8:	f002 f806 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR1);
    1afc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    1b00:	f8d4 0530 	ldr.w	r0, [r4, #1328]	; 0x530
    1b04:	f003 fc02 	bl	530c <TimerTask::setPeriod(unsigned long)>
		dropt_tmr->enable();
    1b08:	f8d4 0530 	ldr.w	r0, [r4, #1328]	; 0x530
    1b0c:	f003 fc04 	bl	5318 <TimerTask::enable()>
    1b10:	f894 1520 	ldrb.w	r1, [r4, #1312]	; 0x520
    1b14:	e7d6      	b.n	1ac4 <BigHouse::onDropTarget(unsigned char)+0x24>
	}
	dropTargetSeq |= 1 << n;
	//if (allDropTargetsDown()) {
	if (dropTargetSeq == 0xf) { // all targets down
		if (droptarget_ls->isActive(2)) { // lights special
    1b16:	2102      	movs	r1, #2
    1b18:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1b1c:	f002 f83a 	bl	3b94 <LightGroup::isActive(unsigned char)>
    1b20:	4605      	mov	r5, r0
    1b22:	b188      	cbz	r0, 1b48 <BigHouse::onDropTarget(unsigned char)+0xa8>
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
    1b24:	f64e 2260 	movw	r2, #60000	; 0xea60
    1b28:	2102      	movs	r1, #2
    1b2a:	f8d4 0558 	ldr.w	r0, [r4, #1368]	; 0x558
    1b2e:	f002 f897 	bl	3c60 <LightGroup::switchTheFirst(lightState, unsigned short)>
			droptarget_ls->set(2, OFF_L);
    1b32:	2200      	movs	r2, #0
    1b34:	2102      	movs	r1, #2
    1b36:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1b3a:	f001 ffe5 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
			addScore(10000);
			droptarget_ls->set(0, OFF_L);
		}
		resetDropTargets();
    1b3e:	4620      	mov	r0, r4
		// .. sounds
	}
}
    1b40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
			addScore(10000);
			droptarget_ls->set(0, OFF_L);
		}
		resetDropTargets();
    1b44:	f7ff bf78 	b.w	1a38 <BigHouse::resetDropTargets()>
	if (dropTargetSeq == 0xf) { // all targets down
		if (droptarget_ls->isActive(2)) { // lights special
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
			droptarget_ls->set(2, OFF_L);
		}
		else if (droptarget_ls->isActive(1)) { // 100000x
    1b48:	4631      	mov	r1, r6
    1b4a:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1b4e:	f002 f821 	bl	3b94 <LightGroup::isActive(unsigned char)>
    1b52:	4607      	mov	r7, r0
    1b54:	b990      	cbnz	r0, 1b7c <BigHouse::onDropTarget(unsigned char)+0xdc>
			addScore(100000);
			droptarget_ls->set(1, OFF_L);
		}
		else if (droptarget_ls->isActive(0)) { // 10000x
    1b56:	4601      	mov	r1, r0
    1b58:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1b5c:	f002 f81a 	bl	3b94 <LightGroup::isActive(unsigned char)>
    1b60:	2800      	cmp	r0, #0
    1b62:	d0ec      	beq.n	1b3e <BigHouse::onDropTarget(unsigned char)+0x9e>
			addScore(10000);
    1b64:	4620      	mov	r0, r4
    1b66:	f242 7110 	movw	r1, #10000	; 0x2710
    1b6a:	f001 fe09 	bl	3780 <Game::addScore(unsigned long)>
			droptarget_ls->set(0, OFF_L);
    1b6e:	463a      	mov	r2, r7
    1b70:	4639      	mov	r1, r7
    1b72:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1b76:	f001 ffc7 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
    1b7a:	e7e0      	b.n	1b3e <BigHouse::onDropTarget(unsigned char)+0x9e>
		if (droptarget_ls->isActive(2)) { // lights special
			special_ls->switchTheFirst(BLINK_L, SPECIAL_TIME);
			droptarget_ls->set(2, OFF_L);
		}
		else if (droptarget_ls->isActive(1)) { // 100000x
			addScore(100000);
    1b7c:	4620      	mov	r0, r4
    1b7e:	4905      	ldr	r1, [pc, #20]	; (1b94 <BigHouse::onDropTarget(unsigned char)+0xf4>)
    1b80:	f001 fdfe 	bl	3780 <Game::addScore(unsigned long)>
			droptarget_ls->set(1, OFF_L);
    1b84:	462a      	mov	r2, r5
    1b86:	4631      	mov	r1, r6
    1b88:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    1b8c:	f001 ffbc 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
    1b90:	e7d5      	b.n	1b3e <BigHouse::onDropTarget(unsigned char)+0x9e>
    1b92:	bf00      	nop
    1b94:	000186a0 	.word	0x000186a0

00001b98 <BigHouse::onJailTarget(unsigned char)>:
		resetDropTargets();
		// .. sounds
	}
}

void BigHouse::onJailTarget(byte n) {
    1b98:	b538      	push	{r3, r4, r5, lr}
	if (_3balls) addScore(3000); else addScore(1000);
    1b9a:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
		resetDropTargets();
		// .. sounds
	}
}

void BigHouse::onJailTarget(byte n) {
    1b9e:	4604      	mov	r4, r0
    1ba0:	460d      	mov	r5, r1
	if (_3balls) addScore(3000); else addScore(1000);
    1ba2:	b1e3      	cbz	r3, 1bde <BigHouse::onJailTarget(unsigned char)+0x46>
    1ba4:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1ba8:	f001 fdea 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1bac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1bb0:	4620      	mov	r0, r4
    1bb2:	f001 fe51 	bl	3858 <Game::addBonus(unsigned long)>
	if (jail_ls->getState(n) == BLINK_L) {
    1bb6:	4629      	mov	r1, r5
    1bb8:	f8d4 0564 	ldr.w	r0, [r4, #1380]	; 0x564
    1bbc:	f001 ffd8 	bl	3b70 <LightGroup::getState(unsigned char)>
    1bc0:	2802      	cmp	r0, #2
    1bc2:	d011      	beq.n	1be8 <BigHouse::onJailTarget(unsigned char)+0x50>
		advanceJail();
		addScore(10000);
	}
	else jail_ls->pulse(n, 100);
    1bc4:	2264      	movs	r2, #100	; 0x64
    1bc6:	4629      	mov	r1, r5
    1bc8:	f8d4 0564 	ldr.w	r0, [r4, #1380]	; 0x564
    1bcc:	f001 ffbc 	bl	3b48 <LightGroup::pulse(unsigned char, unsigned short)>
	if (jailSeq == 4 && breakSeq == 5) {
    1bd0:	f8b4 251e 	ldrh.w	r2, [r4, #1310]	; 0x51e
    1bd4:	f240 5304 	movw	r3, #1284	; 0x504
    1bd8:	429a      	cmp	r2, r3
    1bda:	d013      	beq.n	1c04 <BigHouse::onJailTarget(unsigned char)+0x6c>
    1bdc:	bd38      	pop	{r3, r4, r5, pc}
		// .. sounds
	}
}

void BigHouse::onJailTarget(byte n) {
	if (_3balls) addScore(3000); else addScore(1000);
    1bde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1be2:	f001 fdcd 	bl	3780 <Game::addScore(unsigned long)>
    1be6:	e7e1      	b.n	1bac <BigHouse::onJailTarget(unsigned char)+0x14>
	addBonus(1000);
	if (jail_ls->getState(n) == BLINK_L) {
		advanceJail();
    1be8:	4620      	mov	r0, r4
    1bea:	f7ff ff41 	bl	1a70 <BigHouse::advanceJail()>
		addScore(10000);
    1bee:	f242 7110 	movw	r1, #10000	; 0x2710
    1bf2:	4620      	mov	r0, r4
    1bf4:	f001 fdc4 	bl	3780 <Game::addScore(unsigned long)>
	}
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
    1bf8:	f8b4 251e 	ldrh.w	r2, [r4, #1310]	; 0x51e
    1bfc:	f240 5304 	movw	r3, #1284	; 0x504
    1c00:	429a      	cmp	r2, r3
    1c02:	d1eb      	bne.n	1bdc <BigHouse::onJailTarget(unsigned char)+0x44>

void BigHouse::onLeftKicker() {
	// score
	if (_3balls) addScore(5000); else addScore(3000);
	if (!ballTrap[0]) { // ball already trapped
		extraball_ls->set(1, ON_L);
    1c04:	2201      	movs	r2, #1
    1c06:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    1c0a:	4611      	mov	r1, r2
	else jail_ls->pulse(n, 100);
	if (jailSeq == 4 && breakSeq == 5) {
		extraball_ls->set(1, ON_L);
		// .. soundBuffer
	}
}
    1c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void BigHouse::onLeftKicker() {
	// score
	if (_3balls) addScore(5000); else addScore(3000);
	if (!ballTrap[0]) { // ball already trapped
		extraball_ls->set(1, ON_L);
    1c10:	f001 bf7a 	b.w	3b08 <LightGroup::set(unsigned char, lightState)>

00001c14 <BigHouse::onCellTarget(unsigned char)>:
		extraball_ls->set(1, ON_L);
		// .. soundBuffer
	}
}

void BigHouse::onCellTarget(byte n) {
    1c14:	b538      	push	{r3, r4, r5, lr}
	lightState ls;
	byte gln;

	if (_3balls) addScore(5000); else addScore(3000);
    1c16:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
		extraball_ls->set(1, ON_L);
		// .. soundBuffer
	}
}

void BigHouse::onCellTarget(byte n) {
    1c1a:	4604      	mov	r4, r0
    1c1c:	460d      	mov	r5, r1
	lightState ls;
	byte gln;

	if (_3balls) addScore(5000); else addScore(3000);
    1c1e:	b1cb      	cbz	r3, 1c54 <BigHouse::onCellTarget(unsigned char)+0x40>
    1c20:	f241 3188 	movw	r1, #5000	; 0x1388
    1c24:	f001 fdac 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1c2c:	4620      	mov	r0, r4
    1c2e:	f001 fe13 	bl	3858 <Game::addBonus(unsigned long)>
	ls = cellblock_ls->getState(n);
    1c32:	4629      	mov	r1, r5
    1c34:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1c38:	f001 ff9a 	bl	3b70 <LightGroup::getState(unsigned char)>
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1c3c:	2801      	cmp	r0, #1
    1c3e:	d020      	beq.n	1c82 <BigHouse::onCellTarget(unsigned char)+0x6e>
	else if (ls == BLINK_L) {
    1c40:	2802      	cmp	r0, #2
    1c42:	d00c      	beq.n	1c5e <BigHouse::onCellTarget(unsigned char)+0x4a>
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
    1c44:	4629      	mov	r1, r5
    1c46:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1c4a:	2201      	movs	r2, #1
}
    1c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
    1c50:	f001 bf5a 	b.w	3b08 <LightGroup::set(unsigned char, lightState)>

void BigHouse::onCellTarget(byte n) {
	lightState ls;
	byte gln;

	if (_3balls) addScore(5000); else addScore(3000);
    1c54:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1c58:	f001 fd92 	bl	3780 <Game::addScore(unsigned long)>
    1c5c:	e7e4      	b.n	1c28 <BigHouse::onCellTarget(unsigned char)+0x14>
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
    1c5e:	4629      	mov	r1, r5
    1c60:	2200      	movs	r2, #0
    1c62:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1c66:	f001 ff4f 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		cellBlockSeq |= bit(n);
    1c6a:	f894 351c 	ldrb.w	r3, [r4, #1308]	; 0x51c
    1c6e:	2101      	movs	r1, #1
    1c70:	fa01 f505 	lsl.w	r5, r1, r5
    1c74:	431d      	orrs	r5, r3
    1c76:	b2ed      	uxtb	r5, r5
		if (cellBlockSeq == 0b1111) {
    1c78:	2d0f      	cmp	r5, #15
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
    1c7a:	f884 551c 	strb.w	r5, [r4, #1308]	; 0x51c
		if (cellBlockSeq == 0b1111) {
    1c7e:	d008      	beq.n	1c92 <BigHouse::onCellTarget(unsigned char)+0x7e>
    1c80:	bd38      	pop	{r3, r4, r5, pc}
	byte gln;

	if (_3balls) addScore(5000); else addScore(3000);
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1c82:	4629      	mov	r1, r5
    1c84:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    1c88:	2202      	movs	r2, #2
																 // .. soundBuffer
			cellBlockSeq = 0;
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}
    1c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	byte gln;

	if (_3balls) addScore(5000); else addScore(3000);
	addBonus(1000);
	ls = cellblock_ls->getState(n);
	if (ls == ON_L) cellblock_ls->set(n, BLINK_L);
    1c8e:	f001 bf3b 	b.w	3b08 <LightGroup::set(unsigned char, lightState)>
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
		if (cellBlockSeq == 0b1111) {
			gln = extraball_ls->switchTheFirst(ON_L);
    1c92:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    1c96:	f001 ffb7 	bl	3c08 <LightGroup::switchTheFirst(lightState)>
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
    1c9a:	f894 351b 	ldrb.w	r3, [r4, #1307]	; 0x51b
    1c9e:	b92b      	cbnz	r3, 1cac <BigHouse::onCellTarget(unsigned char)+0x98>
    1ca0:	28ff      	cmp	r0, #255	; 0xff
    1ca2:	d003      	beq.n	1cac <BigHouse::onCellTarget(unsigned char)+0x98>
																 // .. soundBuffer
			cellBlockSeq = 0;
    1ca4:	2300      	movs	r3, #0
    1ca6:	f884 351c 	strb.w	r3, [r4, #1308]	; 0x51c
    1caa:	bd38      	pop	{r3, r4, r5, pc}
	else if (ls == BLINK_L) {
		cellblock_ls->set(n, OFF_L);
		cellBlockSeq |= bit(n);
		if (cellBlockSeq == 0b1111) {
			gln = extraball_ls->switchTheFirst(ON_L);
			if (extraBallGiven || gln == 0xff) addScore(100000); // ?
    1cac:	4902      	ldr	r1, [pc, #8]	; (1cb8 <BigHouse::onCellTarget(unsigned char)+0xa4>)
    1cae:	4620      	mov	r0, r4
    1cb0:	f001 fd66 	bl	3780 <Game::addScore(unsigned long)>
    1cb4:	e7f6      	b.n	1ca4 <BigHouse::onCellTarget(unsigned char)+0x90>
    1cb6:	bf00      	nop
    1cb8:	000186a0 	.word	0x000186a0

00001cbc <BigHouse::onTopRollover(unsigned char)>:
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
    1cbc:	b538      	push	{r3, r4, r5, lr}
	if (_3balls) addScore(3000); else addScore(1000);
    1cbe:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
		}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
    1cc2:	4604      	mov	r4, r0
    1cc4:	460d      	mov	r5, r1
	if (_3balls) addScore(3000); else addScore(1000);
    1cc6:	b353      	cbz	r3, 1d1e <BigHouse::onTopRollover(unsigned char)+0x62>
    1cc8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1ccc:	f001 fd58 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1cd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1cd4:	4620      	mov	r0, r4
    1cd6:	f001 fdbf 	bl	3858 <Game::addBonus(unsigned long)>
	if (n == 1) { // center rollover
    1cda:	2d01      	cmp	r5, #1
    1cdc:	d02a      	beq.n	1d34 <BigHouse::onTopRollover(unsigned char)+0x78>
		if (isLightActive(18)) addScore(100000);
		if (isLightActive(19)) advanceMultiplier();
	}
	if (extraball_ls->isActive(n)) {
    1cde:	4629      	mov	r1, r5
    1ce0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    1ce4:	f001 ff56 	bl	3b94 <LightGroup::isActive(unsigned char)>
    1ce8:	b1c0      	cbz	r0, 1d1c <BigHouse::onTopRollover(unsigned char)+0x60>
		extraball_ls->set(n, OFF_L);
    1cea:	2200      	movs	r2, #0
    1cec:	4629      	mov	r1, r5
    1cee:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    1cf2:	f001 ff09 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		lastchance_ls->setAll(OFF_L);
    1cf6:	2100      	movs	r1, #0
    1cf8:	f8d4 0554 	ldr.w	r0, [r4, #1364]	; 0x554
    1cfc:	f001 ff66 	bl	3bcc <LightGroup::setAll(lightState)>
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
	// .. soundBuffer
}

void BigHouse::awardExtraBall() {
	player[playerOn].ballsLeft++;
    1d00:	f894 3377 	ldrb.w	r3, [r4, #887]	; 0x377
    1d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	extraBallGiven = true;
    1d0c:	2101      	movs	r1, #1
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
	// .. soundBuffer
}

void BigHouse::awardExtraBall() {
	player[playerOn].ballsLeft++;
    1d0e:	f893 2344 	ldrb.w	r2, [r3, #836]	; 0x344
    1d12:	440a      	add	r2, r1
    1d14:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	extraBallGiven = true;
    1d18:	f884 151b 	strb.w	r1, [r4, #1307]	; 0x51b
    1d1c:	bd38      	pop	{r3, r4, r5, pc}
	}
	else cellblock_ls->set(n, ON_L); // when light is STATIC_TEXT
}

void BigHouse::onTopRollover(byte n) {
	if (_3balls) addScore(3000); else addScore(1000);
    1d1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1d22:	f001 fd2d 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1d26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1d2a:	4620      	mov	r0, r4
    1d2c:	f001 fd94 	bl	3858 <Game::addBonus(unsigned long)>
	if (n == 1) { // center rollover
    1d30:	2d01      	cmp	r5, #1
    1d32:	d1d4      	bne.n	1cde <BigHouse::onTopRollover(unsigned char)+0x22>
		if (isLightActive(18)) addScore(100000);
    1d34:	2112      	movs	r1, #18
    1d36:	4620      	mov	r0, r4
    1d38:	f001 fdaa 	bl	3890 <Game::isLightActive(unsigned char)>
    1d3c:	b990      	cbnz	r0, 1d64 <BigHouse::onTopRollover(unsigned char)+0xa8>
		if (isLightActive(19)) advanceMultiplier();
    1d3e:	2113      	movs	r1, #19
    1d40:	4620      	mov	r0, r4
    1d42:	f001 fda5 	bl	3890 <Game::isLightActive(unsigned char)>
    1d46:	2800      	cmp	r0, #0
    1d48:	d0c9      	beq.n	1cde <BigHouse::onTopRollover(unsigned char)+0x22>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1d4a:	f894 1521 	ldrb.w	r1, [r4, #1313]	; 0x521
    1d4e:	2902      	cmp	r1, #2
    1d50:	d8c5      	bhi.n	1cde <BigHouse::onTopRollover(unsigned char)+0x22>
    1d52:	1c4b      	adds	r3, r1, #1
    1d54:	f8d4 0568 	ldr.w	r0, [r4, #1384]	; 0x568
    1d58:	f884 3521 	strb.w	r3, [r4, #1313]	; 0x521
    1d5c:	2201      	movs	r2, #1
    1d5e:	f001 fed3 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
    1d62:	e7bc      	b.n	1cde <BigHouse::onTopRollover(unsigned char)+0x22>

void BigHouse::onTopRollover(byte n) {
	if (_3balls) addScore(3000); else addScore(1000);
	addBonus(1000);
	if (n == 1) { // center rollover
		if (isLightActive(18)) addScore(100000);
    1d64:	4902      	ldr	r1, [pc, #8]	; (1d70 <BigHouse::onTopRollover(unsigned char)+0xb4>)
    1d66:	4620      	mov	r0, r4
    1d68:	f001 fd0a 	bl	3780 <Game::addScore(unsigned long)>
    1d6c:	e7e7      	b.n	1d3e <BigHouse::onTopRollover(unsigned char)+0x82>
    1d6e:	bf00      	nop
    1d70:	000186a0 	.word	0x000186a0

00001d74 <BigHouse::onLeftKicker()>:
	// .. soundBuffer
}

void BigHouse::onLeftKicker() {
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1d74:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
		awardExtraBall();
	}
	// .. soundBuffer
}

void BigHouse::onLeftKicker() {
    1d78:	b510      	push	{r4, lr}
    1d7a:	4604      	mov	r4, r0
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1d7c:	b183      	cbz	r3, 1da0 <BigHouse::onLeftKicker()+0x2c>
    1d7e:	f241 3188 	movw	r1, #5000	; 0x1388
    1d82:	f001 fcfd 	bl	3780 <Game::addScore(unsigned long)>
	if (!ballTrap[0]) { // ball already trapped
    1d86:	f894 3516 	ldrb.w	r3, [r4, #1302]	; 0x516
    1d8a:	b18b      	cbz	r3, 1db0 <BigHouse::onLeftKicker()+0x3c>
		extraball_ls->set(1, ON_L);
	}
	else {
		setLight(15, BLINK_L);
    1d8c:	2300      	movs	r3, #0
    1d8e:	2202      	movs	r2, #2
    1d90:	210f      	movs	r1, #15
    1d92:	4620      	mov	r0, r4
    1d94:	f001 fd6c 	bl	3870 <Game::setLight(unsigned char, lightState, unsigned short)>
		ballTrap[0] = true;
    1d98:	2301      	movs	r3, #1
    1d9a:	f884 3516 	strb.w	r3, [r4, #1302]	; 0x516
    1d9e:	bd10      	pop	{r4, pc}
	// .. soundBuffer
}

void BigHouse::onLeftKicker() {
	// score
	if (_3balls) addScore(5000); else addScore(3000);
    1da0:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1da4:	f001 fcec 	bl	3780 <Game::addScore(unsigned long)>
	if (!ballTrap[0]) { // ball already trapped
    1da8:	f894 3516 	ldrb.w	r3, [r4, #1302]	; 0x516
    1dac:	2b00      	cmp	r3, #0
    1dae:	d1ed      	bne.n	1d8c <BigHouse::onLeftKicker()+0x18>
		extraball_ls->set(1, ON_L);
    1db0:	2201      	movs	r2, #1
    1db2:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    1db6:	4611      	mov	r1, r2
		setLight(15, BLINK_L);
		ballTrap[0] = true;
		// ... soundBuffer
	}
	//startTrapSequence(0);
}
    1db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::onLeftKicker() {
	// score
	if (_3balls) addScore(5000); else addScore(3000);
	if (!ballTrap[0]) { // ball already trapped
		extraball_ls->set(1, ON_L);
    1dbc:	f001 bea4 	b.w	3b08 <LightGroup::set(unsigned char, lightState)>

00001dc0 <BigHouse::onTopHole()>:
	addScore(25000);
	//if (getLight(20) == BLINK_L) startMultiball(); // ???
	//startTrapSequence(2);
}

void BigHouse::onTopHole() { // hole
    1dc0:	b510      	push	{r4, lr}
	addScore(25000);
    1dc2:	f246 11a8 	movw	r1, #25000	; 0x61a8
	addScore(25000);
	//if (getLight(20) == BLINK_L) startMultiball(); // ???
	//startTrapSequence(2);
}

void BigHouse::onTopHole() { // hole
    1dc6:	4604      	mov	r4, r0
	addScore(25000);
    1dc8:	f001 fcda 	bl	3780 <Game::addScore(unsigned long)>
	if (isLightActive(15)) ballTrap[2] = true;
    1dcc:	4620      	mov	r0, r4
    1dce:	210f      	movs	r1, #15
    1dd0:	f001 fd5e 	bl	3890 <Game::isLightActive(unsigned char)>
    1dd4:	b110      	cbz	r0, 1ddc <BigHouse::onTopHole()+0x1c>
    1dd6:	2301      	movs	r3, #1
    1dd8:	f884 3518 	strb.w	r3, [r4, #1304]	; 0x518
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	bf00      	nop

00001de0 <BigHouse::onOutRollover(unsigned char)>:
	addBonus(1000);
	//..
}

void BigHouse::onOutRollover(byte n) {
	if (_3balls) addScore(5000);
    1de0:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
	else addScore(3000);
	addBonus(1000);
	//..
}

void BigHouse::onOutRollover(byte n) {
    1de4:	b510      	push	{r4, lr}
    1de6:	4604      	mov	r4, r0
	if (_3balls) addScore(5000);
    1de8:	b953      	cbnz	r3, 1e00 <BigHouse::onOutRollover(unsigned char)+0x20>
	else addScore(3000);
    1dea:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1dee:	f001 fcc7 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1df2:	4620      	mov	r0, r4
    1df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::onOutRollover(byte n) {
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1dfc:	f001 bd2c 	b.w	3858 <Game::addBonus(unsigned long)>
	addBonus(1000);
	//..
}

void BigHouse::onOutRollover(byte n) {
	if (_3balls) addScore(5000);
    1e00:	f241 3188 	movw	r1, #5000	; 0x1388
    1e04:	f001 fcbc 	bl	3780 <Game::addScore(unsigned long)>
	else addScore(3000);
	addBonus(1000);
    1e08:	4620      	mov	r0, r4
    1e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	//..
}
    1e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::onOutRollover(byte n) {
	if (_3balls) addScore(5000);
	else addScore(3000);
	addBonus(1000);
    1e12:	f001 bd21 	b.w	3858 <Game::addBonus(unsigned long)>
    1e16:	bf00      	nop

00001e18 <BigHouse::onPopBumper()>:
	//..
}

void BigHouse::onPopBumper() {
    1e18:	b510      	push	{r4, lr}
    1e1a:	4604      	mov	r4, r0
	addScore(1000);
    1e1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1e20:	f001 fcae 	bl	3780 <Game::addScore(unsigned long)>
	special_ls->rotateRight();
    1e24:	f8d4 0558 	ldr.w	r0, [r4, #1368]	; 0x558
    1e28:	f001 ff2a 	bl	3c80 <LightGroup::rotateRight()>
	extraball_ls->rotateRight();
    1e2c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
}
    1e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::onPopBumper() {
	addScore(1000);
	special_ls->rotateRight();
	extraball_ls->rotateRight();
    1e34:	f001 bf24 	b.w	3c80 <LightGroup::rotateRight()>

00001e38 <BigHouse::onSwitchEvent(unsigned char, bool)>:
// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1e38:	10cb      	asrs	r3, r1, #3

// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
    1e3a:	b570      	push	{r4, r5, r6, lr}
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1e3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e40:	f001 0107 	and.w	r1, r1, #7
	switch (_mode) {
    1e44:	f890 5506 	ldrb.w	r5, [r0, #1286]	; 0x506
// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1e48:	eb01 0143 	add.w	r1, r1, r3, lsl #1

// EVENT DISPATCHER ROUTINE
// sw = 0..63
// called whenever a switch opens or closes.
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
    1e4c:	4606      	mov	r6, r0
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
    1e4e:	f001 04ff 	and.w	r4, r1, #255	; 0xff
	switch (_mode) {
    1e52:	b37d      	cbz	r5, 1eb4 <BigHouse::onSwitchEvent(unsigned char, bool)+0x7c>
    1e54:	2d01      	cmp	r5, #1
    1e56:	d12c      	bne.n	1eb2 <BigHouse::onSwitchEvent(unsigned char, bool)+0x7a>
			setPinballMode(GAME_MODE);
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
    1e58:	f8b0 3388 	ldrh.w	r3, [r0, #904]	; 0x388
    1e5c:	f8b0 2522 	ldrh.w	r2, [r0, #1314]	; 0x522
    1e60:	4293      	cmp	r3, r2
    1e62:	d306      	bcc.n	1e72 <BigHouse::onSwitchEvent(unsigned char, bool)+0x3a>
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1e64:	f890 1521 	ldrb.w	r1, [r0, #1313]	; 0x521
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
    1e68:	1a9b      	subs	r3, r3, r2
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1e6a:	2902      	cmp	r1, #2
		}
		// ..
		break;
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
    1e6c:	f8a0 3388 	strh.w	r3, [r0, #904]	; 0x388
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1e70:	d927      	bls.n	1ec2 <BigHouse::onSwitchEvent(unsigned char, bool)+0x8a>
	case GAME_MODE:
		if (swCount >= bonusAdvanceSwitches) {
			swCount -= bonusAdvanceSwitches;
			advanceMultiplier();
		}
		switch (sw) {
    1e72:	f1a4 031a 	sub.w	r3, r4, #26
    1e76:	2b32      	cmp	r3, #50	; 0x32
    1e78:	d822      	bhi.n	1ec0 <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    1e7a:	e8df f003 	tbb	[pc, r3]
    1e7e:	2133      	.short	0x2133
    1e80:	81752121 	.word	0x81752121
    1e84:	219e998f 	.word	0x219e998f
    1e88:	21212121 	.word	0x21212121
    1e8c:	99a681a2 	.word	0x99a681a2
    1e90:	2152b49e 	.word	0x2152b49e
    1e94:	81a22121 	.word	0x81a22121
    1e98:	655799a6 	.word	0x655799a6
    1e9c:	21213f6e 	.word	0x21213f6e
    1ea0:	44a681a2 	.word	0x44a681a2
    1ea4:	21216557 	.word	0x21216557
    1ea8:	81a22121 	.word	0x81a22121
    1eac:	b45744a6 	.word	0xb45744a6
    1eb0:	3a          	.byte	0x3a
    1eb1:	00          	.byte	0x00
    1eb2:	bd70      	pop	{r4, r5, r6, pc}
// handles table events depending on pinball mode
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_mode) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
    1eb4:	2c2f      	cmp	r4, #47	; 0x2f
    1eb6:	d103      	bne.n	1ec0 <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    1eb8:	b112      	cbz	r2, 1ec0 <BigHouse::onSwitchEvent(unsigned char, bool)+0x88>
    1eba:	f890 336c 	ldrb.w	r3, [r0, #876]	; 0x36c
    1ebe:	b94b      	cbnz	r3, 1ed4 <BigHouse::onSwitchEvent(unsigned char, bool)+0x9c>
    1ec0:	bd70      	pop	{r4, r5, r6, pc}
	break_ls->set(breakSeq, ON_L);
	if (breakSeq < 5) break_ls->set(breakSeq++, BLINK_L);
}

void BigHouse::advanceMultiplier() {
	if (multiSeq < 3) multi_ls->set(multiSeq++, ON_L);
    1ec2:	1c4b      	adds	r3, r1, #1
    1ec4:	f8d0 0568 	ldr.w	r0, [r0, #1384]	; 0x568
    1ec8:	f886 3521 	strb.w	r3, [r6, #1313]	; 0x521
    1ecc:	462a      	mov	r2, r5
    1ece:	f001 fe1b 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
    1ed2:	e7ce      	b.n	1e72 <BigHouse::onSwitchEvent(unsigned char, bool)+0x3a>
void BigHouse::onSwitchEvent(byte sw, bool st) {
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_mode) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
			credits--;
    1ed4:	3b01      	subs	r3, #1
    1ed6:	f880 336c 	strb.w	r3, [r0, #876]	; 0x36c
			setPinballMode(GAME_MODE);
    1eda:	2101      	movs	r1, #1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sw = (sw >> 3) * 10 + (sw & 7); // format conversion
	switch (_mode) {
	case SHOW_MODE:
		if (sw == REPLAY_SW && st && credits > 0) {
			credits--;
			setPinballMode(GAME_MODE);
    1ee0:	f001 b85c 	b.w	2f9c <Game::setPinballMode(pinballMode)>
	addScore(30);
	special_ls->rotateRight();
}

void BigHouse::onBallOnChain() {
	addScore(5000);
    1ee4:	4630      	mov	r0, r6
    1ee6:	f241 3188 	movw	r1, #5000	; 0x1388
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	addScore(30);
	special_ls->rotateRight();
}

void BigHouse::onBallOnChain() {
	addScore(5000);
    1eee:	f001 bc47 	b.w	3780 <Game::addScore(unsigned long)>
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65);
			DISPATCH1(onRightKicker(), 56);
			DISPATCH1(tilt(), 57);
			DISPATCH1(onOutHole(), 66);
			DISPATCH1(onTopHole(), 76);
    1ef2:	4630      	mov	r0, r6
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65);
			DISPATCH1(onRightKicker(), 56);
			DISPATCH1(tilt(), 57);
			DISPATCH1(onOutHole(), 66);
			DISPATCH1(onTopHole(), 76);
    1ef8:	f7ff bf62 	b.w	1dc0 <BigHouse::onTopHole()>
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65);
			DISPATCH1(onRightKicker(), 56);
			DISPATCH1(tilt(), 57);
    1efc:	4630      	mov	r0, r6
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65);
			DISPATCH1(onRightKicker(), 56);
			DISPATCH1(tilt(), 57);
    1f02:	f001 bcd1 	b.w	38a8 <Game::tilt()>
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onDropTarget((sw - 31) / 10), 31, 41, 51, 61, 71);
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
    1f06:	4b3c      	ldr	r3, [pc, #240]	; (1ff8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1c0>)
    1f08:	f1a4 012b 	sub.w	r1, r4, #43	; 0x2b
    1f0c:	fb83 2301 	smull	r2, r3, r3, r1
    1f10:	17c9      	asrs	r1, r1, #31
    1f12:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
    1f16:	4630      	mov	r0, r6
    1f18:	b2c9      	uxtb	r1, r1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onDropTarget((sw - 31) / 10), 31, 41, 51, 61, 71);
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
    1f1e:	f7ff be79 	b.w	1c14 <BigHouse::onCellTarget(unsigned char)>
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
    1f22:	4630      	mov	r0, r6
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
    1f28:	f7ff bf24 	b.w	1d74 <BigHouse::onLeftKicker()>
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
    1f2c:	4b32      	ldr	r3, [pc, #200]	; (1ff8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1c0>)
    1f2e:	f1a4 0136 	sub.w	r1, r4, #54	; 0x36
    1f32:	fb83 2301 	smull	r2, r3, r3, r1
    1f36:	17c9      	asrs	r1, r1, #31
    1f38:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
    1f3c:	4630      	mov	r0, r6
    1f3e:	b2c9      	uxtb	r1, r1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
    1f44:	f7ff beba 	b.w	1cbc <BigHouse::onTopRollover(unsigned char)>
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65);
    1f48:	f1b4 0137 	subs.w	r1, r4, #55	; 0x37
    1f4c:	4630      	mov	r0, r6
    1f4e:	bf18      	it	ne
    1f50:	2101      	movne	r1, #1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
			DISPATCH1(onLeftKicker(), 46);
			DISPATCH3(onTopRollover((sw - 54) / 10), 54, 64, 74);
			DISPATCH2(onReturnRollover((sw == 55) ? 0 : 1), 55, 65);
    1f56:	f7ff bf43 	b.w	1de0 <BigHouse::onOutRollover(unsigned char)>
	}
	//startTrapSequence(0);
}

void BigHouse::onRightKicker() {
	addScore(25000);
    1f5a:	4630      	mov	r0, r6
    1f5c:	f246 11a8 	movw	r1, #25000	; 0x61a8
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}
	//startTrapSequence(0);
}

void BigHouse::onRightKicker() {
	addScore(25000);
    1f64:	f001 bc0c 	b.w	3780 <Game::addScore(unsigned long)>
	//else //..
	//startTrapSequence(1);
}

void BigHouse::onLeftRollover() {
	addScore(25000);
    1f68:	4630      	mov	r0, r6
    1f6a:	f246 11a8 	movw	r1, #25000	; 0x61a8
    1f6e:	f001 fc07 	bl	3780 <Game::addScore(unsigned long)>
	addBonus(1000);
    1f72:	4630      	mov	r0, r6
    1f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//startTrapSequence(1);
}

void BigHouse::onLeftRollover() {
	addScore(25000);
	addBonus(1000);
    1f7c:	f001 bc6c 	b.w	3858 <Game::addBonus(unsigned long)>
			advanceMultiplier();
		}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onDropTarget((sw - 31) / 10), 31, 41, 51, 61, 71);
    1f80:	4b1d      	ldr	r3, [pc, #116]	; (1ff8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1c0>)
    1f82:	f1a4 011f 	sub.w	r1, r4, #31
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
    1f86:	fb83 2301 	smull	r2, r3, r3, r1
    1f8a:	17c9      	asrs	r1, r1, #31
    1f8c:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
    1f90:	4630      	mov	r0, r6
    1f92:	b2c9      	uxtb	r1, r1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH5(onDropTarget((sw - 31) / 10), 31, 41, 51, 61, 71);
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
    1f98:	f7ff bd82 	b.w	1aa0 <BigHouse::onDropTarget(unsigned char)>
	special_ls->rotateRight();
	extraball_ls->rotateRight();
}

void BigHouse::onRubber() {
	addScore(30);
    1f9c:	4630      	mov	r0, r6
    1f9e:	211e      	movs	r1, #30
    1fa0:	f001 fbee 	bl	3780 <Game::addScore(unsigned long)>
	special_ls->rotateRight();
    1fa4:	f8d6 0558 	ldr.w	r0, [r6, #1368]	; 0x558
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	extraball_ls->rotateRight();
}

void BigHouse::onRubber() {
	addScore(30);
	special_ls->rotateRight();
    1fac:	f001 be68 	b.w	3c80 <LightGroup::rotateRight()>
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onDropTarget((sw - 31) / 10), 31, 41, 51, 61, 71);
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
    1fb0:	4630      	mov	r0, r6
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		switch (sw) {
			DISPATCH1(onBallOnChain(), 26);
			DISPATCH1(onLeftRollover(), 30);
			DISPATCH5(onDropTarget((sw - 31) / 10), 31, 41, 51, 61, 71);
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
    1fb6:	f7ff bf2f 	b.w	1e18 <BigHouse::onPopBumper()>
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
    1fba:	4b0f      	ldr	r3, [pc, #60]	; (1ff8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1c0>)
    1fbc:	f1a4 0122 	sub.w	r1, r4, #34	; 0x22
    1fc0:	e7a4      	b.n	1f0c <BigHouse::onSwitchEvent(unsigned char, bool)+0xd4>
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
    1fc2:	4b0d      	ldr	r3, [pc, #52]	; (1ff8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1c0>)
    1fc4:	f1a4 0128 	sub.w	r1, r4, #40	; 0x28
    1fc8:	e7dd      	b.n	1f86 <BigHouse::onSwitchEvent(unsigned char, bool)+0x14e>
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
    1fca:	4b0b      	ldr	r3, [pc, #44]	; (1ff8 <BigHouse::onSwitchEvent(unsigned char, bool)+0x1c0>)
    1fcc:	f1a4 012a 	sub.w	r1, r4, #42	; 0x2a
    1fd0:	fb83 2301 	smull	r2, r3, r3, r1
    1fd4:	17c9      	asrs	r1, r1, #31
    1fd6:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
    1fda:	4630      	mov	r0, r6
    1fdc:	b2c9      	uxtb	r1, r1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH1(onRubber(), 32);
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
    1fe2:	f7ff bdd9 	b.w	1b98 <BigHouse::onJailTarget(unsigned char)>
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
    1fe6:	f1b4 012d 	subs.w	r1, r4, #45	; 0x2d
    1fea:	4630      	mov	r0, r6
    1fec:	bf18      	it	ne
    1fee:	2101      	movne	r1, #1
		//if (sw == LEFTADV_SW) execMenuCmd(MENU_BACK);
		//else if (sw == RIGHTADV_SW) execMenuCmd(MENU_NEXT);
		//else if (sw == REPLAY_SW) execMenuCmd(MENU_ENTER);
		break;
	}
}
    1ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			DISPATCH3(onPopBumper(), 33, 43, 53);
			DISPATCH2(onCellTarget((sw - 34) / 10), 34, 44);
			DISPATCH2(onCellTarget((sw - 43) / 10), 63, 73);
			DISPATCH4(onDropTarget((sw - 40) / 10), 40, 50, 60, 70);
			DISPATCH4(onJailTarget((sw - 42) / 10), 42, 52, 62, 72);
			DISPATCH2(onOutRollover((sw == 45) ? 0 : 1), 45, 75);
    1ff4:	f7ff bef4 	b.w	1de0 <BigHouse::onOutRollover(unsigned char)>
    1ff8:	66666667 	.word	0x66666667

00001ffc <BigHouse::dropTimerRoutine(unsigned long&)>:
	// ..TODO
}

// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
    1ffc:	b570      	push	{r4, r5, r6, lr}
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
    1ffe:	2102      	movs	r1, #2
	// ..TODO
}

// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
    2000:	4604      	mov	r4, r0
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
    2002:	f8d0 0574 	ldr.w	r0, [r0, #1396]	; 0x574
    2006:	f001 fdc5 	bl	3b94 <LightGroup::isActive(unsigned char)>
    200a:	bb30      	cbnz	r0, 205a <BigHouse::dropTimerRoutine(unsigned long&)+0x5e>
    200c:	4605      	mov	r5, r0
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
    200e:	2101      	movs	r1, #1
    2010:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    2014:	f001 fdbe 	bl	3b94 <LightGroup::isActive(unsigned char)>
    2018:	4606      	mov	r6, r0
    201a:	b950      	cbnz	r0, 2032 <BigHouse::dropTimerRoutine(unsigned long&)+0x36>
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
    201c:	4601      	mov	r1, r0
    201e:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    2022:	f001 fdb7 	bl	3b94 <LightGroup::isActive(unsigned char)>
    2026:	bb30      	cbnz	r0, 2076 <BigHouse::dropTimerRoutine(unsigned long&)+0x7a>
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
    2028:	4818      	ldr	r0, [pc, #96]	; (208c <BigHouse::dropTimerRoutine(unsigned long&)+0x90>)
}
    202a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
    202e:	f002 b85d 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
		droptarget_ls->set(1, OFF_L);
    2032:	462a      	mov	r2, r5
    2034:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    2038:	2101      	movs	r1, #1
    203a:	f001 fd65 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(0, BLINK_L);
    203e:	4629      	mov	r1, r5
    2040:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    2044:	2202      	movs	r2, #2
    2046:	f001 fd5f 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
    204a:	f8d4 0530 	ldr.w	r0, [r4, #1328]	; 0x530
    204e:	f241 3188 	movw	r1, #5000	; 0x1388
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
}
    2052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		droptarget_ls->set(1, BLINK_L);
	}
	else if (droptarget_ls->isActive(1)) { // "100000x" -> "10000x"
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
    2056:	f003 b959 	b.w	530c <TimerTask::setPeriod(unsigned long)>

// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
    205a:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    205e:	2200      	movs	r2, #0
    2060:	2102      	movs	r1, #2
    2062:	f001 fd51 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(1, BLINK_L);
    2066:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    206a:	2202      	movs	r2, #2
    206c:	2101      	movs	r1, #1
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
	}
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
}
    206e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// ================================================================================

void BigHouse::dropTimerRoutine(uint32_t &ms) { 
	if (droptarget_ls->isActive(2)) { // "light special" -> "100000x"
		droptarget_ls->set(2, OFF_L);
		droptarget_ls->set(1, BLINK_L);
    2072:	f001 bd49 	b.w	3b08 <LightGroup::set(unsigned char, lightState)>
		droptarget_ls->set(1, OFF_L);
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
    2076:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    207a:	4632      	mov	r2, r6
    207c:	4631      	mov	r1, r6
    207e:	f001 fd43 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
		resetDropTargets();
    2082:	4620      	mov	r0, r4
	}
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
}
    2084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		droptarget_ls->set(0, BLINK_L);
		dropt_tmr->setPeriod(DROPT_LIGHT_TMR2);
	}
	else if (droptarget_ls->isActive(0)) { // "10000x" -> RESET
		droptarget_ls->set(0, OFF_L);
		resetDropTargets();
    2088:	f7ff bcd6 	b.w	1a38 <BigHouse::resetDropTargets()>
    208c:	0000fc6c 	.word	0x0000fc6c

00002090 <BigHouse::startLightShow()>:
	}
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
}

void BigHouse::startLightShow() {
    2090:	b570      	push	{r4, r5, r6, lr}
    2092:	2111      	movs	r1, #17
    2094:	4606      	mov	r6, r0
    2096:	4813      	ldr	r0, [pc, #76]	; (20e4 <BigHouse::startLightShow()+0x54>)
    2098:	f007 fb3c 	bl	9714 <usb_serial_write>
    209c:	4812      	ldr	r0, [pc, #72]	; (20e8 <BigHouse::startLightShow()+0x58>)
    209e:	f007 fd77 	bl	9b90 <Print::println()>
    20a2:	f206 548c 	addw	r4, r6, #1420	; 0x58c
    20a6:	f206 55ac 	addw	r5, r6, #1452	; 0x5ac
	Serial.println("startLightShow...");
	for (byte i = 0; i<8; i++) {
		lShow_set[i]->setAll(OFF_L);
    20aa:	f854 0f04 	ldr.w	r0, [r4, #4]!
    20ae:	2100      	movs	r1, #0
    20b0:	f001 fd8c 	bl	3bcc <LightGroup::setAll(lightState)>
		lShow_set[i]->set(0, ON_L);
    20b4:	6820      	ldr	r0, [r4, #0]
    20b6:	2201      	movs	r2, #1
    20b8:	2100      	movs	r1, #0
    20ba:	f001 fd25 	bl	3b08 <LightGroup::set(unsigned char, lightState)>
	else prWarning(F("BigHouse::dropTimerRoutine: No special lit."));
}

void BigHouse::startLightShow() {
	Serial.println("startLightShow...");
	for (byte i = 0; i<8; i++) {
    20be:	42ac      	cmp	r4, r5
    20c0:	d1f3      	bne.n	20aa <BigHouse::startLightShow()+0x1a>
		lShow_set[i]->setAll(OFF_L);
		lShow_set[i]->set(0, ON_L);
	}
	lightShowDelay = 200; // ms
    20c2:	21c8      	movs	r1, #200	; 0xc8
	lightShowOrder = false;
    20c4:	2300      	movs	r3, #0
	lshow_tmr->setPeriod(lightShowDelay);
    20c6:	f8d6 0534 	ldr.w	r0, [r6, #1332]	; 0x534
	Serial.println("startLightShow...");
	for (byte i = 0; i<8; i++) {
		lShow_set[i]->setAll(OFF_L);
		lShow_set[i]->set(0, ON_L);
	}
	lightShowDelay = 200; // ms
    20ca:	f8a6 152a 	strh.w	r1, [r6, #1322]	; 0x52a
	lightShowOrder = false;
    20ce:	f886 352e 	strb.w	r3, [r6, #1326]	; 0x52e
	lshow_tmr->setPeriod(lightShowDelay);
    20d2:	f003 f91b 	bl	530c <TimerTask::setPeriod(unsigned long)>
	lshow_tmr->enable();
    20d6:	f8d6 0534 	ldr.w	r0, [r6, #1332]	; 0x534

}
    20da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lShow_set[i]->set(0, ON_L);
	}
	lightShowDelay = 200; // ms
	lightShowOrder = false;
	lshow_tmr->setPeriod(lightShowDelay);
	lshow_tmr->enable();
    20de:	f003 b91b 	b.w	5318 <TimerTask::enable()>
    20e2:	bf00      	nop
    20e4:	0000fc98 	.word	0x0000fc98
    20e8:	1fff876c 	.word	0x1fff876c

000020ec <BigHouse::start()>:
	delete& show5_ls;
	delete& show6_ls;
	delete[] lShow_set;
}

void BigHouse::start() {
    20ec:	b510      	push	{r4, lr}
	setPinballMode(SHOW_MODE);
    20ee:	2100      	movs	r1, #0
	delete& show5_ls;
	delete& show6_ls;
	delete[] lShow_set;
}

void BigHouse::start() {
    20f0:	4604      	mov	r4, r0
	setPinballMode(SHOW_MODE);
    20f2:	f000 ff53 	bl	2f9c <Game::setPinballMode(pinballMode)>
	startLightShow();
    20f6:	4620      	mov	r0, r4
    20f8:	f7ff ffca 	bl	2090 <BigHouse::startLightShow()>
    20fc:	2113      	movs	r1, #19
    20fe:	4807      	ldr	r0, [pc, #28]	; (211c <BigHouse::start()+0x30>)
    2100:	f007 fb08 	bl	9714 <usb_serial_write>
    2104:	4806      	ldr	r0, [pc, #24]	; (2120 <BigHouse::start()+0x34>)
    2106:	f007 fd43 	bl	9b90 <Print::println()>

}

void BigHouse::startDisplayShow() {
	Serial.println("startDisplayShow...");
	displayShowStep = 0;
    210a:	2300      	movs	r3, #0
    210c:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
	dshow_tmr->enable();
    2110:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c

void BigHouse::start() {
	setPinballMode(SHOW_MODE);
	startLightShow();
	startDisplayShow();
}
    2114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BigHouse::startDisplayShow() {
	Serial.println("startDisplayShow...");
	displayShowStep = 0;
	dshow_tmr->enable();
    2118:	f003 b8fe 	b.w	5318 <TimerTask::enable()>
    211c:	0000fcac 	.word	0x0000fcac
    2120:	1fff876c 	.word	0x1fff876c

00002124 <BigHouse::getTopScoreStr(unsigned char)>:

void BigHouse::stopDisplayShow() {
	dshow_tmr->disable();
}

String BigHouse::getTopScoreStr(byte n) {
    2124:	b570      	push	{r4, r5, r6, lr}
    2126:	4614      	mov	r4, r2
    2128:	b084      	sub	sp, #16
	return String("  <" + topScore[n].playerName + "> -  " + topScore[n].scoreString + "  ");
    212a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3

void BigHouse::stopDisplayShow() {
	dshow_tmr->disable();
}

String BigHouse::getTopScoreStr(byte n) {
    212e:	4605      	mov	r5, r0
    2130:	460e      	mov	r6, r1
	return String("  <" + topScore[n].playerName + "> -  " + topScore[n].scoreString + "  ");
    2132:	00a4      	lsls	r4, r4, #2

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2134:	4668      	mov	r0, sp
    2136:	490f      	ldr	r1, [pc, #60]	; (2174 <BigHouse::getTopScoreStr(unsigned char)+0x50>)
    2138:	f007 fe00 	bl	9d3c <String::String(char const*)>
    213c:	1931      	adds	r1, r6, r4
    213e:	f501 7127 	add.w	r1, r1, #668	; 0x29c
    2142:	4668      	mov	r0, sp
    2144:	f007 fefe 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    2148:	490b      	ldr	r1, [pc, #44]	; (2178 <BigHouse::getTopScoreStr(unsigned char)+0x54>)
    214a:	f007 ff03 	bl	9f54 <operator+(StringSumHelper const&, char const*)>
    214e:	1931      	adds	r1, r6, r4
    2150:	f501 7123 	add.w	r1, r1, #652	; 0x28c
    2154:	f007 fef6 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    2158:	4908      	ldr	r1, [pc, #32]	; (217c <BigHouse::getTopScoreStr(unsigned char)+0x58>)
    215a:	f007 fefb 	bl	9f54 <operator+(StringSumHelper const&, char const*)>
    215e:	4601      	mov	r1, r0
    2160:	4628      	mov	r0, r5
    2162:	f007 fe11 	bl	9d88 <String::String(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    2166:	4668      	mov	r0, sp
    2168:	f007 fda8 	bl	9cbc <String::~String()>
}
    216c:	4628      	mov	r0, r5
    216e:	b004      	add	sp, #16
    2170:	bd70      	pop	{r4, r5, r6, pc}
    2172:	bf00      	nop
    2174:	0000fcc0 	.word	0x0000fcc0
    2178:	0000fcc4 	.word	0x0000fcc4
    217c:	0000fccc 	.word	0x0000fccc

00002180 <BigHouse::lightShowCycle(unsigned long&)>:

void BigHouse::lightShowCycle(uint32_t &ms) {
	if (lightShowOrder) for (byte i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
    2180:	f890 352e 	ldrb.w	r3, [r0, #1326]	; 0x52e

String BigHouse::getTopScoreStr(byte n) {
	return String("  <" + topScore[n].playerName + "> -  " + topScore[n].scoreString + "  ");
}

void BigHouse::lightShowCycle(uint32_t &ms) {
    2184:	b570      	push	{r4, r5, r6, lr}
    2186:	4605      	mov	r5, r0
    2188:	f200 548c 	addw	r4, r0, #1420	; 0x58c
    218c:	f200 56ac 	addw	r6, r0, #1452	; 0x5ac
	if (lightShowOrder) for (byte i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
    2190:	b1fb      	cbz	r3, 21d2 <BigHouse::lightShowCycle(unsigned long&)+0x52>
    2192:	f854 0f04 	ldr.w	r0, [r4, #4]!
    2196:	f001 fdb3 	bl	3d00 <LightGroup::rotateLeft()>
    219a:	42b4      	cmp	r4, r6
    219c:	d1f9      	bne.n	2192 <BigHouse::lightShowCycle(unsigned long&)+0x12>
	else for (byte i = 0; i < 8; i++) lShow_set[i]->rotateRight();
	if (lightShowOrder) lightShowDelay += 5; else lightShowDelay -= 5;
    219e:	f895 352e 	ldrb.w	r3, [r5, #1326]	; 0x52e
    21a2:	b31b      	cbz	r3, 21ec <BigHouse::lightShowCycle(unsigned long&)+0x6c>
    21a4:	f8b5 152a 	ldrh.w	r1, [r5, #1322]	; 0x52a
    21a8:	3105      	adds	r1, #5
    21aa:	b289      	uxth	r1, r1
    21ac:	f8a5 152a 	strh.w	r1, [r5, #1322]	; 0x52a
	lshow_tmr->setPeriod((uint32_t)lightShowDelay);
    21b0:	f8d5 0534 	ldr.w	r0, [r5, #1332]	; 0x534
    21b4:	f003 f8aa 	bl	530c <TimerTask::setPeriod(unsigned long)>
	if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
    21b8:	f8b5 352a 	ldrh.w	r3, [r5, #1322]	; 0x52a
    21bc:	3b65      	subs	r3, #101	; 0x65
    21be:	b29b      	uxth	r3, r3
    21c0:	2bc6      	cmp	r3, #198	; 0xc6
    21c2:	d905      	bls.n	21d0 <BigHouse::lightShowCycle(unsigned long&)+0x50>
    21c4:	f895 352e 	ldrb.w	r3, [r5, #1326]	; 0x52e
    21c8:	f083 0301 	eor.w	r3, r3, #1
    21cc:	f885 352e 	strb.w	r3, [r5, #1326]	; 0x52e
    21d0:	bd70      	pop	{r4, r5, r6, pc}
	return String("  <" + topScore[n].playerName + "> -  " + topScore[n].scoreString + "  ");
}

void BigHouse::lightShowCycle(uint32_t &ms) {
	if (lightShowOrder) for (byte i = 0; i < 8; i++) lShow_set[i]->rotateLeft();
	else for (byte i = 0; i < 8; i++) lShow_set[i]->rotateRight();
    21d2:	f854 0f04 	ldr.w	r0, [r4, #4]!
    21d6:	f001 fd53 	bl	3c80 <LightGroup::rotateRight()>
    21da:	42b4      	cmp	r4, r6
    21dc:	d0df      	beq.n	219e <BigHouse::lightShowCycle(unsigned long&)+0x1e>
    21de:	f854 0f04 	ldr.w	r0, [r4, #4]!
    21e2:	f001 fd4d 	bl	3c80 <LightGroup::rotateRight()>
    21e6:	42b4      	cmp	r4, r6
    21e8:	d1f3      	bne.n	21d2 <BigHouse::lightShowCycle(unsigned long&)+0x52>
    21ea:	e7d8      	b.n	219e <BigHouse::lightShowCycle(unsigned long&)+0x1e>
	if (lightShowOrder) lightShowDelay += 5; else lightShowDelay -= 5;
    21ec:	f8b5 152a 	ldrh.w	r1, [r5, #1322]	; 0x52a
    21f0:	3905      	subs	r1, #5
    21f2:	b289      	uxth	r1, r1
    21f4:	f8a5 152a 	strh.w	r1, [r5, #1322]	; 0x52a
    21f8:	e7da      	b.n	21b0 <BigHouse::lightShowCycle(unsigned long&)+0x30>
    21fa:	bf00      	nop

000021fc <BigHouse::displayShowCycle(unsigned long&)>:
	lshow_tmr->setPeriod((uint32_t)lightShowDelay);
	if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
	//lights->print();
}

void BigHouse::displayShowCycle(uint32_t& ms) {
    21fc:	b570      	push	{r4, r5, r6, lr}
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
    21fe:	f890 2528 	ldrb.w	r2, [r0, #1320]	; 0x528
	lshow_tmr->setPeriod((uint32_t)lightShowDelay);
	if (lightShowDelay <= 100 || lightShowDelay >= 300) lightShowOrder = !lightShowOrder;
	//lights->print();
}

void BigHouse::displayShowCycle(uint32_t& ms) {
    2202:	b084      	sub	sp, #16
    2204:	4605      	mov	r5, r0
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
    2206:	b13a      	cbz	r2, 2218 <BigHouse::displayShowCycle(unsigned long&)+0x1c>
		displayScoresAndCredits();
		dshow_tmr->setPeriod(1000u);
	}
	else if (displayShowStep == 3) {
    2208:	2a03      	cmp	r2, #3
    220a:	d027      	beq.n	225c <BigHouse::displayShowCycle(unsigned long&)+0x60>
		display.clear();
		display.setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
    220c:	d80f      	bhi.n	222e <BigHouse::displayShowCycle(unsigned long&)+0x32>
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
			return;
		}
	}
	displayShowStep++;
    220e:	3201      	adds	r2, #1
    2210:	f885 2528 	strb.w	r2, [r5, #1320]	; 0x528
}
    2214:	b004      	add	sp, #16
    2216:	bd70      	pop	{r4, r5, r6, pc}

void BigHouse::displayShowCycle(uint32_t& ms) {
	//Serial.print("displayShowCycle(..) step #");
	//Serial.println(displayShowStep);
	if (displayShowStep == 0) {
		displayScoresAndCredits();
    2218:	f000 ff80 	bl	311c <Game::displayScoresAndCredits()>
		dshow_tmr->setPeriod(1000u);
    221c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2220:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
    2224:	f003 f872 	bl	530c <TimerTask::setPeriod(unsigned long)>
    2228:	f895 2528 	ldrb.w	r2, [r5, #1320]	; 0x528
    222c:	e7ef      	b.n	220e <BigHouse::displayShowCycle(unsigned long&)+0x12>
		display.clear();
		display.setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
    222e:	3a04      	subs	r2, #4
    2230:	b2d2      	uxtb	r2, r2
    2232:	4668      	mov	r0, sp
    2234:	4629      	mov	r1, r5
    2236:	f7ff ff75 	bl	2124 <BigHouse::getTopScoreStr(unsigned char)>
		display.setDynamicFX(1, st , DFX_type::LEFT_INS);
    223a:	2305      	movs	r3, #5
    223c:	466a      	mov	r2, sp
    223e:	2101      	movs	r1, #1
    2240:	f105 000c 	add.w	r0, r5, #12
    2244:	f000 fba8 	bl	2998 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)>
		if (displayShowStep == 3 + TOP_SCORES) {
    2248:	f895 3528 	ldrb.w	r3, [r5, #1320]	; 0x528
    224c:	2b08      	cmp	r3, #8
    224e:	d024      	beq.n	229a <BigHouse::displayShowCycle(unsigned long&)+0x9e>
		display.clear();
		display.setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
    2250:	4668      	mov	r0, sp
    2252:	f007 fd33 	bl	9cbc <String::~String()>
    2256:	f895 2528 	ldrb.w	r2, [r5, #1320]	; 0x528
    225a:	e7d8      	b.n	220e <BigHouse::displayShowCycle(unsigned long&)+0x12>
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	};

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    225c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
	if (displayShowStep == 0) {
		displayScoresAndCredits();
		dshow_tmr->setPeriod(1000u);
	}
	else if (displayShowStep == 3) {
		display.clear();
    2260:	f100 060c 	add.w	r6, r0, #12
    2264:	2400      	movs	r4, #0
    2266:	b14b      	cbz	r3, 227c <BigHouse::displayShowCycle(unsigned long&)+0x80>
    2268:	4621      	mov	r1, r4
    226a:	4630      	mov	r0, r6
    226c:	f000 fc3e 	bl	2aec <ExtTextDisplay::clearLine(unsigned char)>
    2270:	3401      	adds	r4, #1
    2272:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    2276:	b2e4      	uxtb	r4, r4
    2278:	42a3      	cmp	r3, r4
    227a:	d8f5      	bhi.n	2268 <BigHouse::displayShowCycle(unsigned long&)+0x6c>
		bool blinking = false, bool clearBefore = false) {
		putText(line, (const char*)text, pos, blinking, clearBefore);
	}

	inline void setDynamicFX(byte line, const __FlashStringHelper* text, DFX_type effectId) {
		setDynamicFX(line, (const char*)text, effectId);
    227c:	4a0a      	ldr	r2, [pc, #40]	; (22a8 <BigHouse::displayShowCycle(unsigned long&)+0xac>)
    227e:	4630      	mov	r0, r6
    2280:	2305      	movs	r3, #5
    2282:	2100      	movs	r1, #0
    2284:	f000 fb74 	bl	2970 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>
		display.setDynamicFX(0, F("** ESCAPE ARTISTS **"), DFX_type::LEFT_INS);
		dshow_tmr->setPeriod(2500u);
    2288:	f640 11c4 	movw	r1, #2500	; 0x9c4
    228c:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
    2290:	f003 f83c 	bl	530c <TimerTask::setPeriod(unsigned long)>
    2294:	f895 2528 	ldrb.w	r2, [r5, #1320]	; 0x528
    2298:	e7b9      	b.n	220e <BigHouse::displayShowCycle(unsigned long&)+0x12>
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
		display.setDynamicFX(1, st , DFX_type::LEFT_INS);
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
    229a:	2300      	movs	r3, #0
			return;
    229c:	4668      	mov	r0, sp
	}
	else if (displayShowStep >= 4) {
		String st = getTopScoreStr(displayShowStep - 4);
		display.setDynamicFX(1, st , DFX_type::LEFT_INS);
		if (displayShowStep == 3 + TOP_SCORES) {
			displayShowStep = 0;
    229e:	f885 3528 	strb.w	r3, [r5, #1320]	; 0x528
			return;
    22a2:	f007 fd0b 	bl	9cbc <String::~String()>
    22a6:	e7b5      	b.n	2214 <BigHouse::displayShowCycle(unsigned long&)+0x18>
    22a8:	0000fcd0 	.word	0x0000fcd0

000022ac <BigHouse::timerRoutine(int, unsigned long&)>:
	if (ballReady) act.ballRelease.set(true);
	brel_tmr->enable();
	return ballReady;
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
    22ac:	b510      	push	{r4, lr}
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
    22ae:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    22b2:	428b      	cmp	r3, r1
	if (ballReady) act.ballRelease.set(true);
	brel_tmr->enable();
	return ballReady;
}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
    22b4:	b082      	sub	sp, #8
    22b6:	4604      	mov	r4, r0
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
    22b8:	d017      	beq.n	22ea <BigHouse::timerRoutine(int, unsigned long&)+0x3e>
		Serial.println("* drop Targets timer");
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
    22ba:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
    22be:	4299      	cmp	r1, r3
    22c0:	d023      	beq.n	230a <BigHouse::timerRoutine(int, unsigned long&)+0x5e>
		//Serial.println("* light show timer");
		lightShowCycle(ms);
		return;
		}
	if (taskId == ballRelease_tt) {
    22c2:	f8d0 3548 	ldr.w	r3, [r0, #1352]	; 0x548
    22c6:	4299      	cmp	r1, r3
    22c8:	d025      	beq.n	2316 <BigHouse::timerRoutine(int, unsigned long&)+0x6a>
		Serial.println("* ball release timer");
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
    22ca:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
    22ce:	4299      	cmp	r1, r3
    22d0:	d005      	beq.n	22de <BigHouse::timerRoutine(int, unsigned long&)+0x32>
		//Serial.println("* display show timer");
		displayShowCycle(ms);
		return;
	}
	prWarning("BigHouse::timerRoutine: unknown taskId");
    22d2:	4818      	ldr	r0, [pc, #96]	; (2334 <BigHouse::timerRoutine(int, unsigned long&)+0x88>)
}
    22d4:	b002      	add	sp, #8
    22d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (taskId == display_tt) {
		//Serial.println("* display show timer");
		displayShowCycle(ms);
		return;
	}
	prWarning("BigHouse::timerRoutine: unknown taskId");
    22da:	f001 bf09 	b.w	40f0 <msg::prWarning(char const*)>
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
		//Serial.println("* display show timer");
		displayShowCycle(ms);
    22de:	4611      	mov	r1, r2
		return;
	}
	prWarning("BigHouse::timerRoutine: unknown taskId");
}
    22e0:	b002      	add	sp, #8
    22e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		act.ballRelease.set(false);
		return;
	}
	if (taskId == display_tt) {
		//Serial.println("* display show timer");
		displayShowCycle(ms);
    22e6:	f7ff bf89 	b.w	21fc <BigHouse::displayShowCycle(unsigned long&)>
    22ea:	2114      	movs	r1, #20
    22ec:	4812      	ldr	r0, [pc, #72]	; (2338 <BigHouse::timerRoutine(int, unsigned long&)+0x8c>)
    22ee:	9201      	str	r2, [sp, #4]
    22f0:	f007 fa10 	bl	9714 <usb_serial_write>
    22f4:	4811      	ldr	r0, [pc, #68]	; (233c <BigHouse::timerRoutine(int, unsigned long&)+0x90>)
    22f6:	f007 fc4b 	bl	9b90 <Print::println()>

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
		Serial.println("* drop Targets timer");
		dropTimerRoutine(ms);
    22fa:	9a01      	ldr	r2, [sp, #4]
    22fc:	4620      	mov	r0, r4
    22fe:	4611      	mov	r1, r2
		//Serial.println("* display show timer");
		displayShowCycle(ms);
		return;
	}
	prWarning("BigHouse::timerRoutine: unknown taskId");
}
    2300:	b002      	add	sp, #8
    2302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void BigHouse::timerRoutine(int taskId, uint32_t& ms) {
	//Serial.printf("timerRoutine(%i, %u): ", taskId, ms);
	if (taskId == dropTargets_tt) {
		Serial.println("* drop Targets timer");
		dropTimerRoutine(ms);
    2306:	f7ff be79 	b.w	1ffc <BigHouse::dropTimerRoutine(unsigned long&)>
		return;
	};
	if (taskId == lightShow_tt) {
		//Serial.println("* light show timer");
		lightShowCycle(ms);
    230a:	4611      	mov	r1, r2
		//Serial.println("* display show timer");
		displayShowCycle(ms);
		return;
	}
	prWarning("BigHouse::timerRoutine: unknown taskId");
}
    230c:	b002      	add	sp, #8
    230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dropTimerRoutine(ms);
		return;
	};
	if (taskId == lightShow_tt) {
		//Serial.println("* light show timer");
		lightShowCycle(ms);
    2312:	f7ff bf35 	b.w	2180 <BigHouse::lightShowCycle(unsigned long&)>
    2316:	2114      	movs	r1, #20
    2318:	4809      	ldr	r0, [pc, #36]	; (2340 <BigHouse::timerRoutine(int, unsigned long&)+0x94>)
    231a:	f007 f9fb 	bl	9714 <usb_serial_write>
    231e:	4807      	ldr	r0, [pc, #28]	; (233c <BigHouse::timerRoutine(int, unsigned long&)+0x90>)
    2320:	f007 fc36 	bl	9b90 <Print::println()>
		return;
		}
	if (taskId == ballRelease_tt) {
		Serial.println("* ball release timer");
		act.ballRelease.set(false);
    2324:	f604 5064 	addw	r0, r4, #3428	; 0xd64
    2328:	2100      	movs	r1, #0
		//Serial.println("* display show timer");
		displayShowCycle(ms);
		return;
	}
	prWarning("BigHouse::timerRoutine: unknown taskId");
}
    232a:	b002      	add	sp, #8
    232c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lightShowCycle(ms);
		return;
		}
	if (taskId == ballRelease_tt) {
		Serial.println("* ball release timer");
		act.ballRelease.set(false);
    2330:	f002 bc5c 	b.w	4bec <Sys80b_Actuator::set(bool)>
    2334:	0000fd18 	.word	0x0000fd18
    2338:	0000fce8 	.word	0x0000fce8
    233c:	1fff876c 	.word	0x1fff876c
    2340:	0000fd00 	.word	0x0000fd00

00002344 <non-virtual thunk to BigHouse::timerRoutine(int, unsigned long&)>:
	int getGameNumber();
	String getTopScoreStr(byte n);
	bool releaseBall();
	void checkSoundCmd(uint32_t& t);

	void timerRoutine(int taskIdentifer, uint32_t& ms);
    2344:	f5a0 7021 	sub.w	r0, r0, #644	; 0x284
    2348:	f7ff bfb0 	b.w	22ac <BigHouse::timerRoutine(int, unsigned long&)>

0000234c <BitMappedSet::~BitMappedSet()>:
	_change = new byte[_arraySize];
	_protection = new byte[_arraySize];
	reset();
}

BitMappedSet::~BitMappedSet() {
    234c:	b510      	push	{r4, lr}
    234e:	4604      	mov	r4, r0
	delete[] _state;
    2350:	6800      	ldr	r0, [r0, #0]
    2352:	b108      	cbz	r0, 2358 <BitMappedSet::~BitMappedSet()+0xc>
    2354:	f007 fbda 	bl	9b0c <operator delete[](void*)>
	delete[] _change;
    2358:	68a0      	ldr	r0, [r4, #8]
    235a:	b108      	cbz	r0, 2360 <BitMappedSet::~BitMappedSet()+0x14>
    235c:	f007 fbd6 	bl	9b0c <operator delete[](void*)>
	delete[] _protection;
    2360:	6860      	ldr	r0, [r4, #4]
    2362:	b108      	cbz	r0, 2368 <BitMappedSet::~BitMappedSet()+0x1c>
    2364:	f007 fbd2 	bl	9b0c <operator delete[](void*)>
}
    2368:	4620      	mov	r0, r4
    236a:	bd10      	pop	{r4, pc}

0000236c <BitMappedSet::reset()>:

void BitMappedSet::reset() {
    236c:	b510      	push	{r4, lr}
    236e:	4604      	mov	r4, r0
	//Serial.println("BitMappedSet reset...");
	delay(100);
    2370:	2064      	movs	r0, #100	; 0x64
    2372:	f006 f9b5 	bl	86e0 <delay>
	for (uint16_t i = 0; i < _arraySize; i++) {
    2376:	7ba3      	ldrb	r3, [r4, #14]
    2378:	b163      	cbz	r3, 2394 <BitMappedSet::reset()+0x28>
    237a:	2300      	movs	r3, #0
		_state[i] = 0;
    237c:	461a      	mov	r2, r3
    237e:	6821      	ldr	r1, [r4, #0]
    2380:	54ca      	strb	r2, [r1, r3]
		_change[i] = 0;
    2382:	68a1      	ldr	r1, [r4, #8]
    2384:	54ca      	strb	r2, [r1, r3]
		_protection[i] = 0;
    2386:	6861      	ldr	r1, [r4, #4]
    2388:	54ca      	strb	r2, [r1, r3]
}

void BitMappedSet::reset() {
	//Serial.println("BitMappedSet reset...");
	delay(100);
	for (uint16_t i = 0; i < _arraySize; i++) {
    238a:	3301      	adds	r3, #1
    238c:	7ba1      	ldrb	r1, [r4, #14]
    238e:	b29b      	uxth	r3, r3
    2390:	4299      	cmp	r1, r3
    2392:	d8f4      	bhi.n	237e <BitMappedSet::reset()+0x12>
    2394:	bd10      	pop	{r4, pc}
    2396:	bf00      	nop

00002398 <BitMappedSet::BitMappedSet(unsigned short)>:

BitMappedSet::BitMappedSet() {
	BitMappedSet(32u);
}

BitMappedSet::BitMappedSet(uint16_t size) {
    2398:	b538      	push	{r3, r4, r5, lr}
    239a:	4604      	mov	r4, r0
    239c:	460d      	mov	r5, r1
	//Serial.println("BitMappedSet(n) init...");
	delay(100);
    239e:	2064      	movs	r0, #100	; 0x64
    23a0:	f006 f99e 	bl	86e0 <delay>
    23a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    23a8:	4629      	mov	r1, r5
    23aa:	bf28      	it	cs
    23ac:	f44f 6180 	movcs.w	r1, #1024	; 0x400
	if (size > MAX_SIZE) size = MAX_SIZE;
	_size = size;
	_arraySize = (byte)(((size - 1) >> 3) + 1);
    23b0:	1e48      	subs	r0, r1, #1
    23b2:	10c0      	asrs	r0, r0, #3
    23b4:	3001      	adds	r0, #1
    23b6:	b2c0      	uxtb	r0, r0

BitMappedSet::BitMappedSet(uint16_t size) {
	//Serial.println("BitMappedSet(n) init...");
	delay(100);
	if (size > MAX_SIZE) size = MAX_SIZE;
	_size = size;
    23b8:	81a1      	strh	r1, [r4, #12]
	_arraySize = (byte)(((size - 1) >> 3) + 1);
    23ba:	73a0      	strb	r0, [r4, #14]
	//Serial.print("BitMappedSet(");
	//Serial.println(size);
	//Serial.println("): array size : ");
	//Serial.println(_arraySize);
	_state = new byte[_arraySize];
    23bc:	f007 fba4 	bl	9b08 <operator new[](unsigned int)>
    23c0:	6020      	str	r0, [r4, #0]
	_change = new byte[_arraySize];
    23c2:	7ba0      	ldrb	r0, [r4, #14]
    23c4:	f007 fba0 	bl	9b08 <operator new[](unsigned int)>
    23c8:	60a0      	str	r0, [r4, #8]
	_protection = new byte[_arraySize];
    23ca:	7ba0      	ldrb	r0, [r4, #14]
    23cc:	f007 fb9c 	bl	9b08 <operator new[](unsigned int)>
    23d0:	6060      	str	r0, [r4, #4]
	reset();
    23d2:	4620      	mov	r0, r4
    23d4:	f7ff ffca 	bl	236c <BitMappedSet::reset()>
}
    23d8:	4620      	mov	r0, r4
    23da:	bd38      	pop	{r3, r4, r5, pc}

000023dc <BitMappedSet::setState(unsigned short, bool, bool)>:
		_protection[i] = 0;
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
    23dc:	b470      	push	{r4, r5, r6}
	if (n >= _size) return false;
    23de:	8984      	ldrh	r4, [r0, #12]
    23e0:	428c      	cmp	r4, r1
    23e2:	d90c      	bls.n	23fe <BitMappedSet::setState(unsigned short, bool, bool)+0x22>
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
    23e4:	f001 0507 	and.w	r5, r1, #7
    23e8:	2401      	movs	r4, #1
    23ea:	40ac      	lsls	r4, r5
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
    23ec:	10c9      	asrs	r1, r1, #3
	byte bitVal = (byte)1 << (n & 7);
    23ee:	b2e5      	uxtb	r5, r4
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    23f0:	b289      	uxth	r1, r1
    23f2:	b13b      	cbz	r3, 2404 <BitMappedSet::setState(unsigned short, bool, bool)+0x28>
	if (state) {
    23f4:	b162      	cbz	r2, 2410 <BitMappedSet::setState(unsigned short, bool, bool)+0x34>
		if ((_state[byteNum] & bitVal) == 0) {
    23f6:	6802      	ldr	r2, [r0, #0]
    23f8:	5c53      	ldrb	r3, [r2, r1]
    23fa:	421d      	tst	r5, r3
    23fc:	d016      	beq.n	242c <BitMappedSet::setState(unsigned short, bool, bool)+0x50>
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
    23fe:	2000      	movs	r0, #0
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	return false;
}
    2400:	bc70      	pop	{r4, r5, r6}
    2402:	4770      	bx	lr
// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
    2404:	6846      	ldr	r6, [r0, #4]
    2406:	5c76      	ldrb	r6, [r6, r1]
    2408:	4235      	tst	r5, r6
    240a:	d1f8      	bne.n	23fe <BitMappedSet::setState(unsigned short, bool, bool)+0x22>
	if (state) {
    240c:	2a00      	cmp	r2, #0
    240e:	d1f2      	bne.n	23f6 <BitMappedSet::setState(unsigned short, bool, bool)+0x1a>
			_change[byteNum] |= bitVal;
			return true;
		}
	}
	else {
		if ((_state[byteNum] & bitVal) > 0) {
    2410:	6806      	ldr	r6, [r0, #0]
    2412:	5c73      	ldrb	r3, [r6, r1]
    2414:	421d      	tst	r5, r3
    2416:	d00c      	beq.n	2432 <BitMappedSet::setState(unsigned short, bool, bool)+0x56>
			_state[byteNum] &= ~bitVal;
    2418:	ea23 0404 	bic.w	r4, r3, r4
    241c:	5474      	strb	r4, [r6, r1]
			_change[byteNum] |= bitVal;
    241e:	6882      	ldr	r2, [r0, #8]
    2420:	5c53      	ldrb	r3, [r2, r1]
    2422:	431d      	orrs	r5, r3
    2424:	5455      	strb	r5, [r2, r1]
			return true;
    2426:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2428:	bc70      	pop	{r4, r5, r6}
    242a:	4770      	bx	lr
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7);
	if (!forceProtection && ((_protection[byteNum] & bitVal) > 0)) return false; // protected!
	if (state) {
		if ((_state[byteNum] & bitVal) == 0) {
			_state[byteNum] |= bitVal;
    242c:	432b      	orrs	r3, r5
    242e:	5453      	strb	r3, [r2, r1]
    2430:	e7f5      	b.n	241e <BitMappedSet::setState(unsigned short, bool, bool)+0x42>
	}
}

// returns true when state changed
bool BitMappedSet::setState(uint16_t n, bool state, bool forceProtection) {
	if (n >= _size) return false;
    2432:	4610      	mov	r0, r2
    2434:	e7e4      	b.n	2400 <BitMappedSet::setState(unsigned short, bool, bool)+0x24>
    2436:	bf00      	nop

00002438 <BitMappedSet::setProtection(unsigned short, bool)>:
	}
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
    2438:	8983      	ldrh	r3, [r0, #12]
    243a:	428b      	cmp	r3, r1
    243c:	d90d      	bls.n	245a <BitMappedSet::setProtection(unsigned short, bool)+0x22>
		}
	}
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
    243e:	b410      	push	{r4}
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
    2440:	2301      	movs	r3, #1
    2442:	f001 0407 	and.w	r4, r1, #7
	return false;
}

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
    2446:	10c9      	asrs	r1, r1, #3
	byte bitVal = (byte)1 << (n & 7u);
    2448:	40a3      	lsls	r3, r4
	if (protection) _protection[byteNum] |= bitVal;
    244a:	b289      	uxth	r1, r1
    244c:	b932      	cbnz	r2, 245c <BitMappedSet::setProtection(unsigned short, bool)+0x24>
	else _protection[byteNum] &= ~bitVal;
    244e:	6840      	ldr	r0, [r0, #4]
    2450:	5c42      	ldrb	r2, [r0, r1]
    2452:	ea22 0303 	bic.w	r3, r2, r3
    2456:	5443      	strb	r3, [r0, r1]
}
    2458:	bc10      	pop	{r4}
    245a:	4770      	bx	lr

void BitMappedSet::setProtection(uint16_t n, bool protection) {
	if (n >= _size) return;
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
	if (protection) _protection[byteNum] |= bitVal;
    245c:	6842      	ldr	r2, [r0, #4]
    245e:	5c50      	ldrb	r0, [r2, r1]
    2460:	4303      	orrs	r3, r0
    2462:	5453      	strb	r3, [r2, r1]
	else _protection[byteNum] &= ~bitVal;
}
    2464:	bc10      	pop	{r4}
    2466:	e7f8      	b.n	245a <BitMappedSet::setProtection(unsigned short, bool)+0x22>

00002468 <BitMappedSet::isProtected(unsigned short)>:
	byte bitVal = (byte)1 << (n & 7u);
	return ((_state[byteNum] & bitVal) > 0);
}

bool BitMappedSet::isProtected(uint16_t n) {
	if (n >= _size) return false;
    2468:	8983      	ldrh	r3, [r0, #12]
    246a:	428b      	cmp	r3, r1
    246c:	d90c      	bls.n	2488 <BitMappedSet::isProtected(unsigned short)+0x20>
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
	return ((_protection[byteNum] & bitVal) > 0);
    246e:	6842      	ldr	r2, [r0, #4]
    2470:	08cb      	lsrs	r3, r1, #3
    2472:	f001 0107 	and.w	r1, r1, #7
    2476:	5cd2      	ldrb	r2, [r2, r3]
    2478:	2301      	movs	r3, #1
    247a:	fa03 f101 	lsl.w	r1, r3, r1
    247e:	420a      	tst	r2, r1
    2480:	bf14      	ite	ne
    2482:	4618      	movne	r0, r3
    2484:	2000      	moveq	r0, #0
    2486:	4770      	bx	lr
	byte bitVal = (byte)1 << (n & 7u);
	return ((_state[byteNum] & bitVal) > 0);
}

bool BitMappedSet::isProtected(uint16_t n) {
	if (n >= _size) return false;
    2488:	2000      	movs	r0, #0
	uint16_t byteNum = n >> 3;
	byte bitVal = (byte)1 << (n & 7u);
	return ((_protection[byteNum] & bitVal) > 0);
}
    248a:	4770      	bx	lr

0000248c <BitMappedSet::getStates4(unsigned short)>:
	return _size;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    248c:	7b82      	ldrb	r2, [r0, #14]
inline uint16_t BitMappedSet::getSize() {
	return _size;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    248e:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return 0;
    2490:	429a      	cmp	r2, r3
    2492:	d907      	bls.n	24a4 <BitMappedSet::getStates4(unsigned short)+0x18>
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
    2494:	6802      	ldr	r2, [r0, #0]
    2496:	5cd0      	ldrb	r0, [r2, r3]
    2498:	07cb      	lsls	r3, r1, #31
    249a:	bf54      	ite	pl
    249c:	f000 000f 	andpl.w	r0, r0, #15
    24a0:	0900      	lsrmi	r0, r0, #4
    24a2:	4770      	bx	lr
	return _size;
}

byte BitMappedSet::getStates4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    24a4:	2000      	movs	r0, #0
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
}
    24a6:	4770      	bx	lr

000024a8 <BitMappedSet::getStates8(unsigned short)>:

byte BitMappedSet::getStates8(uint16_t group) {
	if (group >= _arraySize) return 0;
    24a8:	7b83      	ldrb	r3, [r0, #14]
    24aa:	428b      	cmp	r3, r1
	return _state[group];
    24ac:	bf86      	itte	hi
    24ae:	6803      	ldrhi	r3, [r0, #0]
    24b0:	5c58      	ldrbhi	r0, [r3, r1]
	if (byteNum >= _arraySize) return 0;
	return ((group & 1u) == 0) ? _state[byteNum] & 0x0f : (_state[byteNum] & 0xf0) >> 4;
}

byte BitMappedSet::getStates8(uint16_t group) {
	if (group >= _arraySize) return 0;
    24b2:	2000      	movls	r0, #0
	return _state[group];
}
    24b4:	4770      	bx	lr
    24b6:	bf00      	nop

000024b8 <BitMappedSet::getChanges4(unsigned short)>:

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    24b8:	7b82      	ldrb	r2, [r0, #14]
	if (group >= _arraySize) return 0;
	return _state[group];
}

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    24ba:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return 0;
    24bc:	429a      	cmp	r2, r3
    24be:	d907      	bls.n	24d0 <BitMappedSet::getChanges4(unsigned short)+0x18>
	return ((group & 1u) == 0) ? _change[byteNum] & 0x0f : (_change[byteNum] & 0xf0) >> 4;
    24c0:	6882      	ldr	r2, [r0, #8]
    24c2:	5cd0      	ldrb	r0, [r2, r3]
    24c4:	07cb      	lsls	r3, r1, #31
    24c6:	bf54      	ite	pl
    24c8:	f000 000f 	andpl.w	r0, r0, #15
    24cc:	0900      	lsrmi	r0, r0, #4
    24ce:	4770      	bx	lr
	return _state[group];
}

byte BitMappedSet::getChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return 0;
    24d0:	2000      	movs	r0, #0
	return ((group & 1u) == 0) ? _change[byteNum] & 0x0f : (_change[byteNum] & 0xf0) >> 4;
}
    24d2:	4770      	bx	lr

000024d4 <BitMappedSet::clearChanges4(unsigned short)>:
	return _change[group];
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return;
    24d4:	7b82      	ldrb	r2, [r0, #14]
	if (group >= _arraySize) return 0;
	return _change[group];
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
    24d6:	104b      	asrs	r3, r1, #1
	if (byteNum >= _arraySize) return;
    24d8:	429a      	cmp	r2, r3
    24da:	d907      	bls.n	24ec <BitMappedSet::clearChanges4(unsigned short)+0x18>
	if ((group & 1u) == 0) _change[byteNum] &= 0xf0;
    24dc:	f011 0f01 	tst.w	r1, #1
    24e0:	6881      	ldr	r1, [r0, #8]
    24e2:	5cca      	ldrb	r2, [r1, r3]
    24e4:	d003      	beq.n	24ee <BitMappedSet::clearChanges4(unsigned short)+0x1a>
	else _change[byteNum] &= 0x0f;
    24e6:	f002 020f 	and.w	r2, r2, #15
    24ea:	54ca      	strb	r2, [r1, r3]
    24ec:	4770      	bx	lr
}

void BitMappedSet::clearChanges4(uint16_t group) {
	uint16_t byteNum = group >> 1;
	if (byteNum >= _arraySize) return;
	if ((group & 1u) == 0) _change[byteNum] &= 0xf0;
    24ee:	f022 020f 	bic.w	r2, r2, #15
    24f2:	54ca      	strb	r2, [r1, r3]
    24f4:	4770      	bx	lr
    24f6:	bf00      	nop

000024f8 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]>:
	blinkParams[line].enabled = true;
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
    24f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
    24fc:	6844      	ldr	r4, [r0, #4]
    24fe:	eb04 1441 	add.w	r4, r4, r1, lsl #5
	blinkParams[line].enabled = true;
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
    2502:	b086      	sub	sp, #24
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
	if (!ln.dfxEnabled) return;
    2504:	7ca3      	ldrb	r3, [r4, #18]
    2506:	2b00      	cmp	r3, #0
    2508:	d038      	beq.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
	byte tLen = ln.text.length();
	byte dWidth = display->getWidth();
    250a:	6805      	ldr	r5, [r0, #0]
	byte i;
	char ch;

	switch (ln.dfxType) {
    250c:	7c63      	ldrb	r3, [r4, #17]
    250e:	f895 8015 	ldrb.w	r8, [r5, #21]
// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
	DFXTextLine& ln = extLine[line];
	if (!ln.dfxEnabled) return;
	byte tLen = ln.text.length();
    2512:	f894 9008 	ldrb.w	r9, [r4, #8]
    2516:	460f      	mov	r7, r1
    2518:	4606      	mov	r6, r0
	byte dWidth = display->getWidth();
	byte i;
	char ch;

	switch (ln.dfxType) {
    251a:	2b09      	cmp	r3, #9
    251c:	f200 8102 	bhi.w	2724 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x22c>
    2520:	e8df f013 	tbh	[pc, r3, lsl #1]
    2524:	000a0067 	.word	0x000a0067
    2528:	007a00df 	.word	0x007a00df
    252c:	007a0096 	.word	0x007a0096
    2530:	00af0096 	.word	0x00af0096
    2534:	002f00c6 	.word	0x002f00c6
	case NONE:
		display->setText(line, ln.dfxStep, ln.text);
		ln.dfxEnabled = false;
		break;
	case BOUNCE_IN: // endless fx
		display->setText(line, ln.dfxStep, ln.text);
    2538:	f894 8018 	ldrb.w	r8, [r4, #24]
    253c:	4621      	mov	r1, r4
    253e:	a802      	add	r0, sp, #8
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}

	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    2540:	f04f 0a00 	mov.w	sl, #0
    2544:	f007 fc20 	bl	9d88 <String::String(String const&)>
    2548:	9b02      	ldr	r3, [sp, #8]
    254a:	f8cd a000 	str.w	sl, [sp]
    254e:	4642      	mov	r2, r8
    2550:	4639      	mov	r1, r7
    2552:	4628      	mov	r0, r5
    2554:	f002 fd2c 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    2558:	a802      	add	r0, sp, #8
    255a:	f007 fbaf 	bl	9cbc <String::~String()>
		if (ln.dfxAux == 0) { // text direction: left
    255e:	7ea3      	ldrb	r3, [r4, #26]
    2560:	2b00      	cmp	r3, #0
    2562:	f000 80ec 	beq.w	273e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x246>
			if (--ln.dfxStep == 0) ln.dfxAux = 1;
		}
		else { // text direction: right
			if (++ln.dfxStep == rows - tLen) ln.dfxAux = 0;
    2566:	8b23      	ldrh	r3, [r4, #24]
    2568:	3301      	adds	r3, #1
    256a:	b29b      	uxth	r3, r3
    256c:	8323      	strh	r3, [r4, #24]
    256e:	7f32      	ldrb	r2, [r6, #28]
    2570:	ebc9 0902 	rsb	r9, r9, r2
    2574:	454b      	cmp	r3, r9
    2576:	d101      	bne.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
    2578:	f884 a01a 	strb.w	sl, [r4, #26]
	default:
		ln.dfxType = NONE;
		ln.dfxEnabled = false;
		return;
	}
}
    257c:	b006      	add	sp, #24
    257e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ch = ln.text.charAt(ln.dfxStep--);
			display->setChar(line, 0, ch);
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
    2582:	f006 f889 	bl	8698 <micros>
    2586:	b2c0      	uxtb	r0, r0
    2588:	fbb0 f3f8 	udiv	r3, r0, r8
    258c:	fb08 0513 	mls	r5, r8, r3, r0
    2590:	b2ed      	uxtb	r5, r5
    2592:	e003      	b.n	259c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0xa4>
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
				break;
			}
			else if (++i == dWidth) i = 0;
    2594:	b2dd      	uxtb	r5, r3
    2596:	45a8      	cmp	r8, r5
    2598:	bf08      	it	eq
    259a:	2500      	moveq	r5, #0
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
    259c:	462a      	mov	r2, r5
    259e:	4639      	mov	r1, r7
    25a0:	6830      	ldr	r0, [r6, #0]
    25a2:	f002 fdcf 	bl	5144 <TextDisplay::getChar(unsigned char, unsigned char)>
    25a6:	2820      	cmp	r0, #32
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
				break;
			}
			else if (++i == dWidth) i = 0;
    25a8:	f105 0301 	add.w	r3, r5, #1
		}
		break;
	case SPRAY:
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
    25ac:	d1f2      	bne.n	2594 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x9c>
				ch = ln.text.charAt(i);
    25ae:	4629      	mov	r1, r5
    25b0:	4620      	mov	r0, r4
    25b2:	f007 fcdd 	bl	9f70 <String::charAt(unsigned int) const>
				display->setChar(line, i, ch);
    25b6:	462a      	mov	r2, r5
    25b8:	4603      	mov	r3, r0
    25ba:	4639      	mov	r1, r7
    25bc:	6830      	ldr	r0, [r6, #0]
    25be:	f002 fdb3 	bl	5128 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
				ln.dfxStep++;
    25c2:	8b23      	ldrh	r3, [r4, #24]
    25c4:	3301      	adds	r3, #1
    25c6:	b29b      	uxth	r3, r3
				break;
			}
			else if (++i == dWidth) i = 0;
		}
		if (ln.dfxStep == dWidth) {
    25c8:	4543      	cmp	r3, r8
		i = (byte)(micros() & 0xff) % dWidth; // pseudo-random index
		while (1) {
			if (display->getChar(line, i) == ' ') {
				ch = ln.text.charAt(i);
				display->setChar(line, i, ch);
				ln.dfxStep++;
    25ca:	8323      	strh	r3, [r4, #24]
				break;
			}
			else if (++i == dWidth) i = 0;
		}
		if (ln.dfxStep == dWidth) {
    25cc:	d1d6      	bne.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
			display->setText(line, ln.text);
    25ce:	6836      	ldr	r6, [r6, #0]
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}

	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    25d0:	2500      	movs	r5, #0
    25d2:	4621      	mov	r1, r4
    25d4:	a802      	add	r0, sp, #8
    25d6:	f007 fbd7 	bl	9d88 <String::String(String const&)>
    25da:	9b02      	ldr	r3, [sp, #8]
    25dc:	9500      	str	r5, [sp, #0]
    25de:	4630      	mov	r0, r6
    25e0:	4639      	mov	r1, r7
    25e2:	462a      	mov	r2, r5
    25e4:	f002 fce4 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    25e8:	a802      	add	r0, sp, #8
    25ea:	f007 fb67 	bl	9cbc <String::~String()>
			ln.dfxEnabled = false; // effect process completed
    25ee:	74a5      	strb	r5, [r4, #18]
    25f0:	e7c4      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
	byte i;
	char ch;

	switch (ln.dfxType) {
	case NONE:
		display->setText(line, ln.dfxStep, ln.text);
    25f2:	f894 8018 	ldrb.w	r8, [r4, #24]
    25f6:	4621      	mov	r1, r4
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}

	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    25f8:	2600      	movs	r6, #0
    25fa:	a802      	add	r0, sp, #8
    25fc:	f007 fbc4 	bl	9d88 <String::String(String const&)>
    2600:	9b02      	ldr	r3, [sp, #8]
    2602:	9600      	str	r6, [sp, #0]
    2604:	4642      	mov	r2, r8
    2606:	4639      	mov	r1, r7
    2608:	4628      	mov	r0, r5
    260a:	f002 fcd1 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    260e:	a802      	add	r0, sp, #8
    2610:	f007 fb54 	bl	9cbc <String::~String()>
		ln.dfxEnabled = false;
    2614:	74a6      	strb	r6, [r4, #18]
    2616:	e7b1      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
		}
		break;
	case LEFT_SCRL:
	case LEFT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
    2618:	4621      	mov	r1, r4
    261a:	a802      	add	r0, sp, #8
    261c:	f007 fbb4 	bl	9d88 <String::String(String const&)>
    2620:	8b23      	ldrh	r3, [r4, #24]
	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
	}

	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
    2622:	9a02      	ldr	r2, [sp, #8]
    2624:	f103 0e01 	add.w	lr, r3, #1
    2628:	2601      	movs	r6, #1
    262a:	f8a4 e018 	strh.w	lr, [r4, #24]
    262e:	b21b      	sxth	r3, r3
    2630:	4639      	mov	r1, r7
    2632:	4628      	mov	r0, r5
    2634:	9600      	str	r6, [sp, #0]
    2636:	f002 fceb 	bl	5010 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    263a:	a802      	add	r0, sp, #8
    263c:	f007 fb3e 	bl	9cbc <String::~String()>
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
    2640:	8b23      	ldrh	r3, [r4, #24]
    2642:	ebc8 0809 	rsb	r8, r8, r9
    2646:	4543      	cmp	r3, r8
    2648:	dd98      	ble.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
		break;
	case RIGHT_SCRL:
	case RIGHT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
    264a:	2300      	movs	r3, #0
    264c:	74a3      	strb	r3, [r4, #18]
    264e:	e795      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
		display->setText(line, ln.text, (short)ln.dfxStep++, true);
		if (ln.dfxStep > tLen - dWidth) ln.dfxEnabled = false;
		break;
	case RIGHT_SCRL:
	case RIGHT_INS:
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
    2650:	4621      	mov	r1, r4
    2652:	a802      	add	r0, sp, #8
    2654:	f007 fb98 	bl	9d88 <String::String(String const&)>
    2658:	8b23      	ldrh	r3, [r4, #24]
    265a:	9a02      	ldr	r2, [sp, #8]
    265c:	f103 3eff 	add.w	lr, r3, #4294967295
    2660:	2601      	movs	r6, #1
    2662:	f8a4 e018 	strh.w	lr, [r4, #24]
    2666:	b21b      	sxth	r3, r3
    2668:	4639      	mov	r1, r7
    266a:	4628      	mov	r0, r5
    266c:	9600      	str	r6, [sp, #0]
    266e:	f002 fccf 	bl	5010 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    2672:	a802      	add	r0, sp, #8
    2674:	f007 fb22 	bl	9cbc <String::~String()>
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
    2678:	8b23      	ldrh	r3, [r4, #24]
    267a:	454b      	cmp	r3, r9
    267c:	f67f af7e 	bls.w	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
    2680:	e7e3      	b.n	264a <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x152>
		break;
	case LEFT_ROT: // endless fx
		if (ln.dfxStep == tLen-1) { // rightmost text character index on display
    2682:	8b23      	ldrh	r3, [r4, #24]
    2684:	f109 39ff 	add.w	r9, r9, #4294967295
    2688:	454b      	cmp	r3, r9
    268a:	d070      	beq.n	276e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x276>
			display->setText(line, ln.text);
			ln.dfxStep = 0;
		}
		else {
			display->scrollLeft(line);
    268c:	4628      	mov	r0, r5
    268e:	f002 fcff 	bl	5090 <TextDisplay::scrollLeft(unsigned char)>
			ch = ln.text.charAt(ln.dfxStep++);
    2692:	8b21      	ldrh	r1, [r4, #24]
    2694:	1c4b      	adds	r3, r1, #1
    2696:	8323      	strh	r3, [r4, #24]
    2698:	4620      	mov	r0, r4
    269a:	f007 fc69 	bl	9f70 <String::charAt(unsigned int) const>
			display->setChar(line, dWidth-1, ch);
    269e:	f108 32ff 	add.w	r2, r8, #4294967295
    26a2:	4603      	mov	r3, r0
    26a4:	b2d2      	uxtb	r2, r2
    26a6:	4639      	mov	r1, r7
    26a8:	6830      	ldr	r0, [r6, #0]
    26aa:	f002 fd3d 	bl	5128 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
    26ae:	e765      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
		}
		break;
	case RIGHT_ROT: // endless fx
		if (ln.dfxStep == 0) { // leftmost text character index on display
    26b0:	f8b4 8018 	ldrh.w	r8, [r4, #24]
    26b4:	f1b8 0f00 	cmp.w	r8, #0
    26b8:	d149      	bne.n	274e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x256>
			display->setText(line, ln.text);
    26ba:	4621      	mov	r1, r4
    26bc:	a802      	add	r0, sp, #8
    26be:	f007 fb63 	bl	9d88 <String::String(String const&)>
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}

	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    26c2:	9b02      	ldr	r3, [sp, #8]
    26c4:	f8cd 8000 	str.w	r8, [sp]
    26c8:	4642      	mov	r2, r8
    26ca:	4639      	mov	r1, r7
    26cc:	4628      	mov	r0, r5
    26ce:	f002 fc6f 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
			ln.dfxStep = tLen - 1;
    26d2:	f109 39ff 	add.w	r9, r9, #4294967295
			display->setChar(line, dWidth-1, ch);
		}
		break;
	case RIGHT_ROT: // endless fx
		if (ln.dfxStep == 0) { // leftmost text character index on display
			display->setText(line, ln.text);
    26d6:	a802      	add	r0, sp, #8
    26d8:	f007 faf0 	bl	9cbc <String::~String()>
			ln.dfxStep = tLen - 1;
    26dc:	f8a4 9018 	strh.w	r9, [r4, #24]
    26e0:	e74c      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
		else { // text direction: right
			if (++ln.dfxStep == rows - tLen) ln.dfxAux = 0;
		}
		break;
	case BOUNCE_OUT: // endless fx
		display->setText(line, ln.text, (short)ln.dfxStep);
    26e2:	4621      	mov	r1, r4
    26e4:	a802      	add	r0, sp, #8
    26e6:	f007 fb4f 	bl	9d88 <String::String(String const&)>
	}

	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
    26ea:	f04f 0e00 	mov.w	lr, #0
    26ee:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    26f2:	9a02      	ldr	r2, [sp, #8]
    26f4:	f8cd e000 	str.w	lr, [sp]
    26f8:	4639      	mov	r1, r7
    26fa:	4628      	mov	r0, r5
    26fc:	f002 fc88 	bl	5010 <TextDisplay::setText(unsigned char, char const*, short, bool)>
    2700:	a802      	add	r0, sp, #8
    2702:	f007 fadb 	bl	9cbc <String::~String()>
		if (ln.dfxAux == 0) { // text direction: left
    2706:	7ea3      	ldrb	r3, [r4, #26]
    2708:	b983      	cbnz	r3, 272c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x234>
			if (++ln.dfxStep == tLen - rows) ln.dfxAux = 1;
    270a:	8b23      	ldrh	r3, [r4, #24]
    270c:	3301      	adds	r3, #1
    270e:	b29b      	uxth	r3, r3
    2710:	8323      	strh	r3, [r4, #24]
    2712:	7f32      	ldrb	r2, [r6, #28]
    2714:	ebc2 0909 	rsb	r9, r2, r9
    2718:	454b      	cmp	r3, r9
    271a:	f47f af2f 	bne.w	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
    271e:	2301      	movs	r3, #1
    2720:	76a3      	strb	r3, [r4, #26]
    2722:	e72b      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
			display->setText(line, ln.text);
			ln.dfxEnabled = false; // effect process completed
		}
		break;
	default:
		ln.dfxType = NONE;
    2724:	2300      	movs	r3, #0
    2726:	7463      	strb	r3, [r4, #17]
		ln.dfxEnabled = false;
    2728:	74a3      	strb	r3, [r4, #18]
    272a:	e727      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
		display->setText(line, ln.text, (short)ln.dfxStep);
		if (ln.dfxAux == 0) { // text direction: left
			if (++ln.dfxStep == tLen - rows) ln.dfxAux = 1;
		}
		else { // text direction: right
			if (--ln.dfxStep == 0) ln.dfxAux = 0;
    272c:	8b23      	ldrh	r3, [r4, #24]
    272e:	3b01      	subs	r3, #1
    2730:	b29b      	uxth	r3, r3
    2732:	8323      	strh	r3, [r4, #24]
    2734:	2b00      	cmp	r3, #0
    2736:	f47f af21 	bne.w	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
    273a:	76a3      	strb	r3, [r4, #26]
    273c:	e71e      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
		ln.dfxEnabled = false;
		break;
	case BOUNCE_IN: // endless fx
		display->setText(line, ln.dfxStep, ln.text);
		if (ln.dfxAux == 0) { // text direction: left
			if (--ln.dfxStep == 0) ln.dfxAux = 1;
    273e:	8b23      	ldrh	r3, [r4, #24]
    2740:	3b01      	subs	r3, #1
    2742:	b29b      	uxth	r3, r3
    2744:	8323      	strh	r3, [r4, #24]
    2746:	2b00      	cmp	r3, #0
    2748:	f47f af18 	bne.w	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
    274c:	e7e7      	b.n	271e <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x226>
		if (ln.dfxStep == 0) { // leftmost text character index on display
			display->setText(line, ln.text);
			ln.dfxStep = tLen - 1;
		}
		else {
			display->scrollRight(line);
    274e:	4628      	mov	r0, r5
    2750:	f002 fcba 	bl	50c8 <TextDisplay::scrollRight(unsigned char)>
			ch = ln.text.charAt(ln.dfxStep--);
    2754:	8b21      	ldrh	r1, [r4, #24]
    2756:	1e4b      	subs	r3, r1, #1
    2758:	8323      	strh	r3, [r4, #24]
    275a:	4620      	mov	r0, r4
    275c:	f007 fc08 	bl	9f70 <String::charAt(unsigned int) const>
			display->setChar(line, 0, ch);
    2760:	4639      	mov	r1, r7
    2762:	4603      	mov	r3, r0
    2764:	2200      	movs	r2, #0
    2766:	6830      	ldr	r0, [r6, #0]
    2768:	f002 fcde 	bl	5128 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>
    276c:	e706      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>
	inline void setText(byte row, const char* text, bool clearBefore) {
		setText(row, 0, text, clearBefore);
	}

	inline void setText(byte row, String text, bool clearBefore = false) {
		setText(row, 0, text.c_str(), clearBefore);
    276e:	2600      	movs	r6, #0
		display->setText(line, ln.text, (short)ln.dfxStep--, true);
		if (ln.dfxStep > tLen) ln.dfxEnabled = false;
		break;
	case LEFT_ROT: // endless fx
		if (ln.dfxStep == tLen-1) { // rightmost text character index on display
			display->setText(line, ln.text);
    2770:	4621      	mov	r1, r4
    2772:	a802      	add	r0, sp, #8
    2774:	f007 fb08 	bl	9d88 <String::String(String const&)>
    2778:	9b02      	ldr	r3, [sp, #8]
    277a:	9600      	str	r6, [sp, #0]
    277c:	4639      	mov	r1, r7
    277e:	4628      	mov	r0, r5
    2780:	4632      	mov	r2, r6
    2782:	f002 fc15 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    2786:	a802      	add	r0, sp, #8
    2788:	f007 fa98 	bl	9cbc <String::~String()>
			ln.dfxStep = 0;
    278c:	8326      	strh	r6, [r4, #24]
    278e:	e6f5      	b.n	257c <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]+0x84>

00002790 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>:
	inputText = text;
	_enableDisplayEffect(line, effectId);
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
    2790:	7f03      	ldrb	r3, [r0, #28]
    2792:	428b      	cmp	r3, r1
    2794:	d800      	bhi.n	2798 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x8>
    2796:	4770      	bx	lr
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
    2798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    279c:	4604      	mov	r4, r0
    279e:	b08d      	sub	sp, #52	; 0x34
    27a0:	460d      	mov	r5, r1
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
    27a2:	4668      	mov	r0, sp
    27a4:	6821      	ldr	r1, [r4, #0]
    27a6:	4617      	mov	r7, r2
    27a8:	f002 fcb6 	bl	5118 <TextDisplay::getSpacesRow()>
	DFXTextLine& ln = extLine[line];
	byte txLen = inputText.length();
	byte columns = display->getWidth();
    27ac:	e894 0042 	ldmia.w	r4, {r1, r6}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
    27b0:	eb06 1645 	add.w	r6, r6, r5, lsl #5
	byte txLen = inputText.length();
	byte columns = display->getWidth();

	//delete &ln.text;
	ln.dfxDelay = STD_DFX_DELAY;
    27b4:	2332      	movs	r3, #50	; 0x32
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
    27b6:	2f01      	cmp	r7, #1
void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
	DFXTextLine& ln = extLine[line];
	byte txLen = inputText.length();
    27b8:	f894 8014 	ldrb.w	r8, [r4, #20]
    27bc:	f891 9015 	ldrb.w	r9, [r1, #21]
	byte columns = display->getWidth();

	//delete &ln.text;
	ln.dfxDelay = STD_DFX_DELAY;
    27c0:	83b3      	strh	r3, [r6, #28]
	ln.dfxType = effectId;
    27c2:	7477      	strb	r7, [r6, #17]

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
    27c4:	d00b      	beq.n	27de <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x4e>
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
	}
	if (effectId == BOUNCE_OUT) {
    27c6:	2f02      	cmp	r7, #2
    27c8:	d014      	beq.n	27f4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x64>
		if (txLen < rows) effectId = BOUNCE_IN;
		else if (txLen == rows) effectId = NONE;
	}

	switch (effectId) {
    27ca:	2f09      	cmp	r7, #9
    27cc:	f200 80bf 	bhi.w	294e <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1be>
    27d0:	e8df f007 	tbb	[pc, r7]
    27d4:	a8bd14b7 	.word	0xa8bd14b7
    27d8:	42278e74 	.word	0x42278e74
    27dc:	68b3      	.short	0x68b3
	ln.dfxDelay = STD_DFX_DELAY;
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
		if (txLen > rows) effectId = BOUNCE_OUT;
    27de:	7f23      	ldrb	r3, [r4, #28]
    27e0:	4598      	cmp	r8, r3
    27e2:	d903      	bls.n	27ec <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x5c>
		ln.dfxStep = 0; // first char position on display
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
		//display->setText(line, ln.text);
		break;
	case BOUNCE_OUT:
		ln.dfxStep = 0; // first char of displayed extended line 
    27e4:	2300      	movs	r3, #0
    27e6:	8333      	strh	r3, [r6, #24]
		ln.dfxAux = 0; // text direction: 0 = left, 1 = right
    27e8:	76b3      	strb	r3, [r6, #26]
		//display->setText(line, ln.text);
		break;
    27ea:	e00b      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
	ln.dfxType = effectId;

	// BOUNCE checks
	if (effectId == BOUNCE_IN) {
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
    27ec:	bf14      	ite	ne
    27ee:	2701      	movne	r7, #1
    27f0:	2700      	moveq	r7, #0
    27f2:	e7ea      	b.n	27ca <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x3a>
    27f4:	7f23      	ldrb	r3, [r4, #28]
	}
	if (effectId == BOUNCE_OUT) {
		if (txLen < rows) effectId = BOUNCE_IN;
    27f6:	4598      	cmp	r8, r3
    27f8:	f080 80a1 	bcs.w	293e <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1ae>
	switch (effectId) {
	case NONE:
		ln.text = inputText;
		break;
	case BOUNCE_IN:
		ln.dfxStep = 0; // first char position on display
    27fc:	2200      	movs	r2, #0
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
    27fe:	2301      	movs	r3, #1
	switch (effectId) {
	case NONE:
		ln.text = inputText;
		break;
	case BOUNCE_IN:
		ln.dfxStep = 0; // first char position on display
    2800:	8332      	strh	r2, [r6, #24]
		ln.dfxAux = 1; // text direction: 0 = left, 1 = right
    2802:	76b3      	strb	r3, [r6, #26]
	default:
		ln.dfxEnabled = false;
		ln.dfxStep = 0; // chars completed
		return;
	}
	ln.dfxEnabled = true;
    2804:	2301      	movs	r3, #1
    2806:	74b3      	strb	r3, [r6, #18]
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
    2808:	7f23      	ldrb	r3, [r4, #28]
    280a:	42ab      	cmp	r3, r5
    280c:	d903      	bls.n	2816 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x86>
    280e:	4629      	mov	r1, r5
    2810:	4620      	mov	r0, r4
    2812:	f7ff fe71 	bl	24f8 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]>
}

void ExtTextDisplay::_enableDisplayEffect(byte line, DFX_type effectId) {
	if (line >= rows) return;
	//String buff;
	String spaces = display->getSpacesRow();
    2816:	4668      	mov	r0, sp
    2818:	f007 fa50 	bl	9cbc <String::~String()>
	}
	ln.dfxEnabled = true;
	//display->clearRow(line);
	DFXStep(line);
	//delete &spaces;
}
    281c:	b00d      	add	sp, #52	; 0x34
    281e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2822:	f104 010c 	add.w	r1, r4, #12
    2826:	a808      	add	r0, sp, #32
    2828:	f007 faae 	bl	9d88 <String::String(String const&)>
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
		ln.dfxStep = 0; // first char of displayed extended line 
		break;
	case RIGHT_INS:
		ln.text = inputText + display->getRowCopy(line);
    282c:	462a      	mov	r2, r5
    282e:	a804      	add	r0, sp, #16
    2830:	6821      	ldr	r1, [r4, #0]
    2832:	f002 fc61 	bl	50f8 <TextDisplay::getRowCopy(unsigned char)>
    2836:	a904      	add	r1, sp, #16
    2838:	a808      	add	r0, sp, #32
    283a:	f007 fb83 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    283e:	4601      	mov	r1, r0
    2840:	4630      	mov	r0, r6
    2842:	f007 fb05 	bl	9e50 <String::operator=(String const&)>
    2846:	a804      	add	r0, sp, #16
    2848:	f007 fa38 	bl	9cbc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    284c:	a808      	add	r0, sp, #32
    284e:	f007 fa35 	bl	9cbc <String::~String()>
		ln.dfxStep = inputText.length(); // first char of displayed extended line 
    2852:	6963      	ldr	r3, [r4, #20]
    2854:	8333      	strh	r3, [r6, #24]
		break;
    2856:	e7d5      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    2858:	af08      	add	r7, sp, #32
    285a:	4638      	mov	r0, r7
    285c:	f1b8 0f00 	cmp.w	r8, #0
    2860:	f000 8082 	beq.w	2968 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1d8>
    2864:	f104 010c 	add.w	r1, r4, #12
    2868:	f007 fa8e 	bl	9d88 <String::String(String const&)>
    286c:	4639      	mov	r1, r7
    286e:	4630      	mov	r0, r6
    2870:	f007 faf6 	bl	9e60 <String::operator=(String&&)>
    2874:	4638      	mov	r0, r7
    2876:	f007 fa21 	bl	9cbc <String::~String()>
		ln.dfxStep = txLen-1; // rightmost text character index on display
    287a:	f108 33ff 	add.w	r3, r8, #4294967295
    287e:	8333      	strh	r3, [r6, #24]
	case RIGHT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    2880:	f1b8 0f00 	cmp.w	r8, #0
    2884:	d06a      	beq.n	295c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x1cc>
    2886:	f104 010c 	add.w	r1, r4, #12
    288a:	4638      	mov	r0, r7
    288c:	f007 fa7c 	bl	9d88 <String::String(String const&)>
    2890:	4639      	mov	r1, r7
    2892:	4630      	mov	r0, r6
    2894:	f007 fae4 	bl	9e60 <String::operator=(String&&)>
    2898:	4638      	mov	r0, r7
    289a:	f007 fa0f 	bl	9cbc <String::~String()>
		ln.dfxStep = 0; // leftmost text character index on display
    289e:	2300      	movs	r3, #0
    28a0:	8333      	strh	r3, [r6, #24]
		break;
    28a2:	e7af      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
	case SPRAY:
		ln.text = inputText; // cuts overwidth lines
    28a4:	f104 010c 	add.w	r1, r4, #12
    28a8:	4630      	mov	r0, r6
    28aa:	f007 fad1 	bl	9e50 <String::operator=(String const&)>
		display->clearRow(line);
    28ae:	4629      	mov	r1, r5
    28b0:	6820      	ldr	r0, [r4, #0]
    28b2:	f002 fb77 	bl	4fa4 <TextDisplay::clearRow(unsigned char)>
		ln.dfxStep = 0; // completed line characters
    28b6:	2300      	movs	r3, #0
    28b8:	8333      	strh	r3, [r6, #24]
		break;
    28ba:	e7a3      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    28bc:	4669      	mov	r1, sp
    28be:	a808      	add	r0, sp, #32
    28c0:	f007 fa62 	bl	9d88 <String::String(String const&)>
	case LEFT_SCRL:
		ln.text = display->getRowCopy(line) + spaces;
		ln.dfxStep = 0; // first char of displayed extended line 
		break;
	case RIGHT_SCRL:
		ln.text = spaces + display->getRowCopy(line);
    28c4:	462a      	mov	r2, r5
    28c6:	a804      	add	r0, sp, #16
    28c8:	6821      	ldr	r1, [r4, #0]
    28ca:	f002 fc15 	bl	50f8 <TextDisplay::getRowCopy(unsigned char)>
    28ce:	a904      	add	r1, sp, #16
    28d0:	a808      	add	r0, sp, #32
    28d2:	f007 fb37 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    28d6:	4601      	mov	r1, r0
    28d8:	4630      	mov	r0, r6
    28da:	f007 fab9 	bl	9e50 <String::operator=(String const&)>
    28de:	a804      	add	r0, sp, #16
    28e0:	f007 f9ec 	bl	9cbc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    28e4:	a808      	add	r0, sp, #32
    28e6:	f007 f9e9 	bl	9cbc <String::~String()>
		ln.dfxStep = columns; // first char of displayed extended line 
    28ea:	f8a6 9018 	strh.w	r9, [r6, #24]
		break;
    28ee:	e789      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
	case LEFT_INS:
		ln.text = display->getRowCopy(line) + inputText;
    28f0:	a804      	add	r0, sp, #16
    28f2:	462a      	mov	r2, r5
    28f4:	f002 fc00 	bl	50f8 <TextDisplay::getRowCopy(unsigned char)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    28f8:	a904      	add	r1, sp, #16
    28fa:	a808      	add	r0, sp, #32
    28fc:	f007 fa44 	bl	9d88 <String::String(String const&)>
    2900:	a808      	add	r0, sp, #32
    2902:	f104 010c 	add.w	r1, r4, #12
    2906:	f007 fb1d 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    290a:	4601      	mov	r1, r0
    290c:	4630      	mov	r0, r6
    290e:	f007 fa9f 	bl	9e50 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    2912:	a808      	add	r0, sp, #32
    2914:	f007 f9d2 	bl	9cbc <String::~String()>
    2918:	a804      	add	r0, sp, #16
    291a:	f007 f9cf 	bl	9cbc <String::~String()>
		ln.dfxStep = 0; // first char of displayed extended line 
    291e:	2300      	movs	r3, #0
    2920:	8333      	strh	r3, [r6, #24]
		break;
    2922:	e76f      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
		ln.dfxStep = 0; // first char of displayed extended line 
		ln.dfxAux = 0; // text direction: 0 = left, 1 = right
		//display->setText(line, ln.text);
		break;
	case LEFT_SCRL:
		ln.text = display->getRowCopy(line) + spaces;
    2924:	a804      	add	r0, sp, #16
    2926:	462a      	mov	r2, r5
    2928:	f002 fbe6 	bl	50f8 <TextDisplay::getRowCopy(unsigned char)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    292c:	a904      	add	r1, sp, #16
    292e:	a808      	add	r0, sp, #32
    2930:	f007 fa2a 	bl	9d88 <String::String(String const&)>
    2934:	4669      	mov	r1, sp
    2936:	a808      	add	r0, sp, #32
    2938:	e7e5      	b.n	2906 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x176>
    293a:	af08      	add	r7, sp, #32
    293c:	e7a0      	b.n	2880 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0xf0>
		if (txLen > rows) effectId = BOUNCE_OUT;
		else if (txLen == rows) effectId = NONE;
	}
	if (effectId == BOUNCE_OUT) {
		if (txLen < rows) effectId = BOUNCE_IN;
		else if (txLen == rows) effectId = NONE;
    293e:	f47f af51 	bne.w	27e4 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x54>
	}

	switch (effectId) {
	case NONE:
		ln.text = inputText;
    2942:	f104 010c 	add.w	r1, r4, #12
    2946:	4630      	mov	r0, r6
    2948:	f007 fa82 	bl	9e50 <String::operator=(String const&)>
		break;
    294c:	e75a      	b.n	2804 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x74>
		ln.text = inputText; // cuts overwidth lines
		display->clearRow(line);
		ln.dfxStep = 0; // completed line characters
		break;
	default:
		ln.dfxEnabled = false;
    294e:	2300      	movs	r3, #0
		ln.dfxStep = 0; // chars completed
		return;
    2950:	4668      	mov	r0, sp
		ln.text = inputText; // cuts overwidth lines
		display->clearRow(line);
		ln.dfxStep = 0; // completed line characters
		break;
	default:
		ln.dfxEnabled = false;
    2952:	74b3      	strb	r3, [r6, #18]
		ln.dfxStep = 0; // chars completed
    2954:	8333      	strh	r3, [r6, #24]
		return;
    2956:	f007 f9b1 	bl	9cbc <String::~String()>
    295a:	e75f      	b.n	281c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x8c>
		break;
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
		ln.dfxStep = txLen-1; // rightmost text character index on display
	case RIGHT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    295c:	462a      	mov	r2, r5
    295e:	6821      	ldr	r1, [r4, #0]
    2960:	4638      	mov	r0, r7
    2962:	f002 fbc9 	bl	50f8 <TextDisplay::getRowCopy(unsigned char)>
    2966:	e793      	b.n	2890 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0x100>
	case RIGHT_INS:
		ln.text = inputText + display->getRowCopy(line);
		ln.dfxStep = inputText.length(); // first char of displayed extended line 
		break;
	case LEFT_ROT:
		ln.text = (txLen > 0) ? inputText : display->getRowCopy(line);
    2968:	462a      	mov	r2, r5
    296a:	f002 fbc5 	bl	50f8 <TextDisplay::getRowCopy(unsigned char)>
    296e:	e77d      	b.n	286c <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)+0xdc>

00002970 <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)>:
		startBlinking(line);
	}
	else stopBlinking(line);
}

void ExtTextDisplay::setDynamicFX(byte line, const char* text, DFX_type effectId) {
    2970:	b570      	push	{r4, r5, r6, lr}
	if (line >= rows) return;
    2972:	7f04      	ldrb	r4, [r0, #28]
    2974:	428c      	cmp	r4, r1
    2976:	d800      	bhi.n	297a <ExtTextDisplay::setDynamicFX(unsigned char, char const*, DFX_type)+0xa>
    2978:	bd70      	pop	{r4, r5, r6, pc}
    297a:	461e      	mov	r6, r3
    297c:	460d      	mov	r5, r1
    297e:	4604      	mov	r4, r0
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
    2980:	4611      	mov	r1, r2
    2982:	300c      	adds	r0, #12
    2984:	f007 fa74 	bl	9e70 <String::operator=(char const*)>
	_enableDisplayEffect(line, effectId);
    2988:	4632      	mov	r2, r6
    298a:	4629      	mov	r1, r5
    298c:	4620      	mov	r0, r4
}
    298e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void ExtTextDisplay::setDynamicFX(byte line, const char* text, DFX_type effectId) {
	if (line >= rows) return;
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
    2992:	f7ff befd 	b.w	2790 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>
    2996:	bf00      	nop

00002998 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)>:
}

 void ExtTextDisplay::setDynamicFX(byte line, String& text, DFX_type effectId) {
    2998:	b570      	push	{r4, r5, r6, lr}
	if (line >= rows) return;
    299a:	7f04      	ldrb	r4, [r0, #28]
    299c:	428c      	cmp	r4, r1
    299e:	d800      	bhi.n	29a2 <ExtTextDisplay::setDynamicFX(unsigned char, String&, DFX_type)+0xa>
    29a0:	bd70      	pop	{r4, r5, r6, pc}
    29a2:	461e      	mov	r6, r3
    29a4:	460d      	mov	r5, r1
    29a6:	4604      	mov	r4, r0
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
    29a8:	4611      	mov	r1, r2
    29aa:	300c      	adds	r0, #12
    29ac:	f007 fa50 	bl	9e50 <String::operator=(String const&)>
	_enableDisplayEffect(line, effectId);
    29b0:	4632      	mov	r2, r6
    29b2:	4629      	mov	r1, r5
    29b4:	4620      	mov	r0, r4
}
    29b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 void ExtTextDisplay::setDynamicFX(byte line, String& text, DFX_type effectId) {
	if (line >= rows) return;
	//if (effectId == NONE) putText(line, text);
	//stopBlinking(line);
	inputText = text;
	_enableDisplayEffect(line, effectId);
    29ba:	f7ff bee9 	b.w	2790 <ExtTextDisplay::_enableDisplayEffect(unsigned char, DFX_type)>
    29be:	bf00      	nop

000029c0 <ExtTextDisplay::update(unsigned long)>:
		ln.dfxEnabled = false;
		return;
	}
}

bool ExtTextDisplay::update(uint32_t t) {
    29c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool changed = false;

	// DFX
	DFXTextLine* ln;
	for (byte i = 0; i < rows; i++) {
    29c4:	7f05      	ldrb	r5, [r0, #28]
    29c6:	2d00      	cmp	r5, #0
    29c8:	d056      	beq.n	2a78 <ExtTextDisplay::update(unsigned long)+0xb8>
    29ca:	2400      	movs	r4, #0
    29cc:	4606      	mov	r6, r0
    29ce:	460f      	mov	r7, r1
    29d0:	4620      	mov	r0, r4
		ln = &extLine[i];
    29d2:	6873      	ldr	r3, [r6, #4]
    29d4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
		if (ln->dfxEnabled) {
    29d8:	7c9a      	ldrb	r2, [r3, #18]
    29da:	b14a      	cbz	r2, 29f0 <ExtTextDisplay::update(unsigned long)+0x30>
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
    29dc:	695a      	ldr	r2, [r3, #20]
    29de:	8b99      	ldrh	r1, [r3, #28]
    29e0:	1aba      	subs	r2, r7, r2
    29e2:	428a      	cmp	r2, r1
    29e4:	d304      	bcc.n	29f0 <ExtTextDisplay::update(unsigned long)+0x30>
				ln->dfxLastStepTime = t;
    29e6:	615f      	str	r7, [r3, #20]
	blinkParams[line].startTime = millis();
}

// private
void ExtTextDisplay::DFXStep(byte line) {
	if (line >= rows) return;
    29e8:	7f35      	ldrb	r5, [r6, #28]
    29ea:	42a5      	cmp	r5, r4
    29ec:	d83d      	bhi.n	2a6a <ExtTextDisplay::update(unsigned long)+0xaa>
		ln = &extLine[i];
		if (ln->dfxEnabled) {
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
				ln->dfxLastStepTime = t;
				DFXStep(i);
				changed = true;
    29ee:	2001      	movs	r0, #1
bool ExtTextDisplay::update(uint32_t t) {
	bool changed = false;

	// DFX
	DFXTextLine* ln;
	for (byte i = 0; i < rows; i++) {
    29f0:	3401      	adds	r4, #1
    29f2:	b2e4      	uxtb	r4, r4
    29f4:	42ac      	cmp	r4, r5
    29f6:	d3ec      	bcc.n	29d2 <ExtTextDisplay::update(unsigned long)+0x12>
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    29f8:	2d00      	cmp	r5, #0
    29fa:	d040      	beq.n	2a7e <ExtTextDisplay::update(unsigned long)+0xbe>
    29fc:	2300      	movs	r3, #0
    29fe:	f8d6 e008 	ldr.w	lr, [r6, #8]
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    2a02:	4698      	mov	r8, r3
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    2a04:	f04f 0c64 	mov.w	ip, #100	; 0x64
    2a08:	e008      	b.n	2a1c <ExtTextDisplay::update(unsigned long)+0x5c>
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    2a0a:	428d      	cmp	r5, r1
    2a0c:	d912      	bls.n	2a34 <ExtTextDisplay::update(unsigned long)+0x74>
    2a0e:	f882 8010 	strb.w	r8, [r2, #16]
    2a12:	7f35      	ldrb	r5, [r6, #28]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    2a14:	3301      	adds	r3, #1
    2a16:	b2db      	uxtb	r3, r3
    2a18:	429d      	cmp	r5, r3
    2a1a:	d924      	bls.n	2a66 <ExtTextDisplay::update(unsigned long)+0xa6>
		bl = &blinkParams[i];
    2a1c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    2a20:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
    2a24:	7c11      	ldrb	r1, [r2, #16]
    2a26:	2900      	cmp	r1, #0
    2a28:	d0f4      	beq.n	2a14 <ExtTextDisplay::update(unsigned long)+0x54>
	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
    2a2a:	6955      	ldr	r5, [r2, #20]
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    2a2c:	8b51      	ldrh	r1, [r2, #26]
	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
    2a2e:	1b7d      	subs	r5, r7, r5
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
    2a30:	2900      	cmp	r1, #0
    2a32:	d1ea      	bne.n	2a0a <ExtTextDisplay::update(unsigned long)+0x4a>
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
    2a34:	8b14      	ldrh	r4, [r2, #24]
					<= bl->dutyCycle);
    2a36:	f892 9012 	ldrb.w	r9, [r2, #18]
    2a3a:	fbb5 f1f4 	udiv	r1, r5, r4
    2a3e:	fb04 5511 	mls	r5, r4, r1, r5
    2a42:	fb0c f505 	mul.w	r5, ip, r5
    2a46:	fbb5 f4f4 	udiv	r4, r5, r4
    2a4a:	454c      	cmp	r4, r9
    2a4c:	bf8c      	ite	hi
    2a4e:	2400      	movhi	r4, #0
    2a50:	2401      	movls	r4, #1
		bl = &blinkParams[i];
		elapsedT = t - bl->startTime;
		if (bl->enabled) {
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
    2a52:	7c51      	ldrb	r1, [r2, #17]
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
    2a54:	7454      	strb	r4, [r2, #17]
    2a56:	7f35      	ldrb	r5, [r6, #28]
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    2a58:	3301      	adds	r3, #1
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
				if (bl->phase != lastState) changed = true;
    2a5a:	42a1      	cmp	r1, r4
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    2a5c:	b2db      	uxtb	r3, r3
			if (bl->duration > 0 && elapsedT > bl->duration) bl->enabled = false;
			else {
				bool lastState = bl->phase;
				bl->phase = (((elapsedT % (uint32_t)bl->period) * (uint32_t)100u / (uint32_t)bl->period)
					<= bl->dutyCycle);
				if (bl->phase != lastState) changed = true;
    2a5e:	bf18      	it	ne
    2a60:	2001      	movne	r0, #1
	}

	// blink
	LineBlinkParams* bl;
	uint32_t elapsedT;
	for (byte i = 0; i < rows; i++) {
    2a62:	429d      	cmp	r5, r3
    2a64:	d8da      	bhi.n	2a1c <ExtTextDisplay::update(unsigned long)+0x5c>
    2a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a6a:	4630      	mov	r0, r6
    2a6c:	4621      	mov	r1, r4
    2a6e:	f7ff fd43 	bl	24f8 <ExtTextDisplay::DFXStep(unsigned char) [clone .part.6]>
    2a72:	7f35      	ldrb	r5, [r6, #28]
		ln = &extLine[i];
		if (ln->dfxEnabled) {
			if ((t - ln->dfxLastStepTime) >= ln->dfxDelay) {
				ln->dfxLastStepTime = t;
				DFXStep(i);
				changed = true;
    2a74:	2001      	movs	r0, #1
    2a76:	e7bb      	b.n	29f0 <ExtTextDisplay::update(unsigned long)+0x30>
		return;
	}
}

bool ExtTextDisplay::update(uint32_t t) {
	bool changed = false;
    2a78:	4628      	mov	r0, r5
			}
		}
	}

	return changed;
}
    2a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a82:	bf00      	nop

00002a84 <ExtTextDisplay::_getVisibleChar(unsigned char, unsigned char)>:

byte ExtTextDisplay::_getVisibleChar(byte row, byte col) {
    2a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a86:	4606      	mov	r6, r0
	byte ch = display->getChar(row, col);
    2a88:	6800      	ldr	r0, [r0, #0]
	}

	return changed;
}

byte ExtTextDisplay::_getVisibleChar(byte row, byte col) {
    2a8a:	460c      	mov	r4, r1
    2a8c:	4617      	mov	r7, r2
	byte ch = display->getChar(row, col);
    2a8e:	f002 fb59 	bl	5144 <TextDisplay::getChar(unsigned char, unsigned char)>
	LineBlinkParams& bl = blinkParams[row];
    2a92:	68b3      	ldr	r3, [r6, #8]
    2a94:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2a98:	eb03 0484 	add.w	r4, r3, r4, lsl #2

	return changed;
}

byte ExtTextDisplay::_getVisibleChar(byte row, byte col) {
	byte ch = display->getChar(row, col);
    2a9c:	4605      	mov	r5, r0
	LineBlinkParams& bl = blinkParams[row];
	return (bl.enabled && (bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
    2a9e:	7c23      	ldrb	r3, [r4, #16]
    2aa0:	b90b      	cbnz	r3, 2aa6 <ExtTextDisplay::_getVisibleChar(unsigned char, unsigned char)+0x22>
    2aa2:	4628      	mov	r0, r5
}
    2aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

byte ExtTextDisplay::_getVisibleChar(byte row, byte col) {
	byte ch = display->getChar(row, col);
	LineBlinkParams& bl = blinkParams[row];
	return (bl.enabled && (bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
    2aa6:	4639      	mov	r1, r7
    2aa8:	4620      	mov	r0, r4
    2aaa:	f007 fa61 	bl	9f70 <String::charAt(unsigned int) const>
    2aae:	2820      	cmp	r0, #32
    2ab0:	d0f7      	beq.n	2aa2 <ExtTextDisplay::_getVisibleChar(unsigned char, unsigned char)+0x1e>
    2ab2:	7c63      	ldrb	r3, [r4, #17]
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	bf14      	ite	ne
    2ab8:	4628      	movne	r0, r5
    2aba:	2020      	moveq	r0, #32
    2abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2abe:	bf00      	nop

00002ac0 <ExtTextDisplay::_clearBlinkMask(unsigned char)>:
}

 void ExtTextDisplay::_clearBlinkMask(byte row) {
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 LineBlinkParams& lbp = blinkParams[row];
    2ac2:	6883      	ldr	r3, [r0, #8]
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
    2ac4:	7f42      	ldrb	r2, [r0, #29]
	LineBlinkParams& bl = blinkParams[row];
	return (bl.enabled && (bl.mask.charAt(col) != ' ') && !bl.phase) ? ' ' : ch;
}

 void ExtTextDisplay::_clearBlinkMask(byte row) {
	 LineBlinkParams& lbp = blinkParams[row];
    2ac6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2aca:	eb03 0681 	add.w	r6, r3, r1, lsl #2
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
    2ace:	b162      	cbz	r2, 2aea <ExtTextDisplay::_clearBlinkMask(unsigned char)+0x2a>
    2ad0:	4605      	mov	r5, r0
    2ad2:	2400      	movs	r4, #0
    2ad4:	2720      	movs	r7, #32
    2ad6:	4621      	mov	r1, r4
    2ad8:	4630      	mov	r0, r6
    2ada:	f007 fa59 	bl	9f90 <String::operator[](unsigned int)>
    2ade:	7007      	strb	r7, [r0, #0]
    2ae0:	3401      	adds	r4, #1
    2ae2:	7f6b      	ldrb	r3, [r5, #29]
    2ae4:	b2e4      	uxtb	r4, r4
    2ae6:	42a3      	cmp	r3, r4
    2ae8:	d8f5      	bhi.n	2ad6 <ExtTextDisplay::_clearBlinkMask(unsigned char)+0x16>
    2aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002aec <ExtTextDisplay::clearLine(unsigned char)>:
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}

void ExtTextDisplay::clearLine(byte line) {
    2aec:	b538      	push	{r3, r4, r5, lr}
    2aee:	4604      	mov	r4, r0
	display->clearRow(line);
    2af0:	6800      	ldr	r0, [r0, #0]
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}

void ExtTextDisplay::clearLine(byte line) {
    2af2:	460d      	mov	r5, r1
	display->clearRow(line);
    2af4:	f002 fa56 	bl	4fa4 <TextDisplay::clearRow(unsigned char)>
	}

	inline void stopDynamicFX(byte line) {
		if (line < rows) extLine[line].dfxEnabled = false;
    2af8:	7f23      	ldrb	r3, [r4, #28]
    2afa:	6860      	ldr	r0, [r4, #4]
	stopDynamicFX(line);
	stopBlinking(line);
	extLine[line].text = "";
    2afc:	490a      	ldr	r1, [pc, #40]	; (2b28 <ExtTextDisplay::clearLine(unsigned char)+0x3c>)
    2afe:	42ab      	cmp	r3, r5
    2b00:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    2b04:	bf84      	itt	hi
    2b06:	2300      	movhi	r3, #0
    2b08:	7483      	strbhi	r3, [r0, #18]
	inline void setBlinkMask(byte line, String& mask) {
		blinkParams[line].mask = mask.substring(0, cols);
	}

	inline void stopBlinking(byte line) {
		blinkParams[line].enabled = false;
    2b0a:	68a3      	ldr	r3, [r4, #8]
    2b0c:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    2b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2b14:	2200      	movs	r2, #0
    2b16:	741a      	strb	r2, [r3, #16]
    2b18:	f007 f9aa 	bl	9e70 <String::operator=(char const*)>
	_clearBlinkMask(line);
    2b1c:	4629      	mov	r1, r5
    2b1e:	4620      	mov	r0, r4
}
    2b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void ExtTextDisplay::clearLine(byte line) {
	display->clearRow(line);
	stopDynamicFX(line);
	stopBlinking(line);
	extLine[line].text = "";
	_clearBlinkMask(line);
    2b24:	f7ff bfcc 	b.w	2ac0 <ExtTextDisplay::_clearBlinkMask(unsigned char)>
    2b28:	0000ff64 	.word	0x0000ff64

00002b2c <ExtTextDisplay::_init(TextDisplay&)>:
#include "ExtTextDisplay.h"

void ExtTextDisplay::_init(TextDisplay& d) {
    2b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	display = &d;
    2b30:	6001      	str	r1, [r0, #0]
    2b32:	7d0c      	ldrb	r4, [r1, #20]
	rows = display->getHeight();
    2b34:	7704      	strb	r4, [r0, #28]
    2b36:	7d4b      	ldrb	r3, [r1, #21]
	cols = display->getWidth();
    2b38:	7743      	strb	r3, [r0, #29]
	extLine = new DFXTextLine[rows];
    2b3a:	2520      	movs	r5, #32
#include "ExtTextDisplay.h"

void ExtTextDisplay::_init(TextDisplay& d) {
    2b3c:	4606      	mov	r6, r0
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    2b3e:	2008      	movs	r0, #8
#include "ExtTextDisplay.h"

void ExtTextDisplay::_init(TextDisplay& d) {
    2b40:	b084      	sub	sp, #16
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    2b42:	fb05 0004 	mla	r0, r5, r4, r0
    2b46:	f006 ffdf 	bl	9b08 <operator new[](unsigned int)>
    2b4a:	f100 0908 	add.w	r9, r0, #8
    2b4e:	6044      	str	r4, [r0, #4]
    2b50:	6005      	str	r5, [r0, #0]
    2b52:	b19c      	cbz	r4, 2b7c <ExtTextDisplay::_init(TextDisplay&)+0x50>
    2b54:	1e67      	subs	r7, r4, #1
		uint32_t startTime = 0; // blink effect start time
		uint16_t period = DEF_BLINK_PERIOD; // blink _period (on+off) [ms]
		uint16_t duration = DEF_BLINK_DURATION; // blink effect duration [ms]: 0 is forever
	};

	struct DFXTextLine {
    2b56:	2500      	movs	r5, #0
    2b58:	464c      	mov	r4, r9
    2b5a:	f04f 0801 	mov.w	r8, #1
    2b5e:	4620      	mov	r0, r4
    2b60:	3f01      	subs	r7, #1
    2b62:	2100      	movs	r1, #0
    2b64:	f007 f8ea 	bl	9d3c <String::String(char const*)>
    2b68:	1c7a      	adds	r2, r7, #1
    2b6a:	f884 8010 	strb.w	r8, [r4, #16]
    2b6e:	7465      	strb	r5, [r4, #17]
    2b70:	74a5      	strb	r5, [r4, #18]
    2b72:	6165      	str	r5, [r4, #20]
    2b74:	8325      	strh	r5, [r4, #24]
    2b76:	f104 0420 	add.w	r4, r4, #32
    2b7a:	d1f0      	bne.n	2b5e <ExtTextDisplay::_init(TextDisplay&)+0x32>
	blinkParams = new LineBlinkParams[rows];
    2b7c:	7f34      	ldrb	r4, [r6, #28]

void ExtTextDisplay::_init(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
    2b7e:	f8c6 9004 	str.w	r9, [r6, #4]
	blinkParams = new LineBlinkParams[rows];
    2b82:	251c      	movs	r5, #28
    2b84:	2008      	movs	r0, #8
    2b86:	fb05 0004 	mla	r0, r5, r4, r0
    2b8a:	f006 ffbd 	bl	9b08 <operator new[](unsigned int)>
    2b8e:	6005      	str	r5, [r0, #0]
    2b90:	f100 0808 	add.w	r8, r0, #8
    2b94:	6044      	str	r4, [r0, #4]
    2b96:	1e65      	subs	r5, r4, #1
    2b98:	b1c4      	cbz	r4, 2bcc <ExtTextDisplay::_init(TextDisplay&)+0xa0>
    2b9a:	4644      	mov	r4, r8
	static const byte LINE_MAX_LEN = 100;
	static const uint16_t STD_DFX_DELAY = 50;
	static const int DEF_BLINK_PERIOD = 500; // [ms]
	static const int DEF_BLINK_DURATION = 0; // [ms]

	struct LineBlinkParams {
    2b9c:	2700      	movs	r7, #0
    2b9e:	f04f 0a01 	mov.w	sl, #1
    2ba2:	f04f 0932 	mov.w	r9, #50	; 0x32
    2ba6:	4620      	mov	r0, r4
    2ba8:	2100      	movs	r1, #0
    2baa:	f007 f8c7 	bl	9d3c <String::String(char const*)>
    2bae:	3d01      	subs	r5, #1
    2bb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    2bb4:	8323      	strh	r3, [r4, #24]
    2bb6:	1c6b      	adds	r3, r5, #1
    2bb8:	7427      	strb	r7, [r4, #16]
    2bba:	f884 a011 	strb.w	sl, [r4, #17]
    2bbe:	f884 9012 	strb.w	r9, [r4, #18]
    2bc2:	6167      	str	r7, [r4, #20]
    2bc4:	8367      	strh	r7, [r4, #26]
    2bc6:	f104 041c 	add.w	r4, r4, #28
    2bca:	d1ec      	bne.n	2ba6 <ExtTextDisplay::_init(TextDisplay&)+0x7a>
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    2bcc:	7f33      	ldrb	r3, [r6, #28]
void ExtTextDisplay::_init(TextDisplay& d) {
	display = &d;
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
    2bce:	f8c6 8008 	str.w	r8, [r6, #8]
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    2bd2:	b383      	cbz	r3, 2c36 <ExtTextDisplay::_init(TextDisplay&)+0x10a>
    2bd4:	2500      	movs	r5, #0
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
    2bd6:	46aa      	mov	sl, r5
		bl->phase = true;
    2bd8:	f04f 0901 	mov.w	r9, #1
		bl->dutyCycle = 50;
    2bdc:	2732      	movs	r7, #50	; 0x32
    2bde:	e001      	b.n	2be4 <ExtTextDisplay::_init(TextDisplay&)+0xb8>
    2be0:	f8d6 8008 	ldr.w	r8, [r6, #8]
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
    2be4:	6831      	ldr	r1, [r6, #0]
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
    2be6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    2bea:	eb08 0483 	add.w	r4, r8, r3, lsl #2
		bl->mask = display->getSpacesRow();
    2bee:	4668      	mov	r0, sp
    2bf0:	f002 fa92 	bl	5118 <TextDisplay::getSpacesRow()>
    2bf4:	4669      	mov	r1, sp
    2bf6:	4620      	mov	r0, r4
    2bf8:	f007 f932 	bl	9e60 <String::operator=(String&&)>
    2bfc:	4668      	mov	r0, sp
    2bfe:	f007 f85d 	bl	9cbc <String::~String()>
		bl->enabled = false;
		bl->phase = true;
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
    2c02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
    2c06:	f884 a010 	strb.w	sl, [r4, #16]
		bl->phase = true;
    2c0a:	f884 9011 	strb.w	r9, [r4, #17]
		bl->dutyCycle = 50;
    2c0e:	74a7      	strb	r7, [r4, #18]
		bl->period = DEF_BLINK_PERIOD;
		bl->duration = DEF_BLINK_DURATION;
    2c10:	f8a4 a01a 	strh.w	sl, [r4, #26]
		bl = &(blinkParams[i]);
		bl->mask = display->getSpacesRow();
		bl->enabled = false;
		bl->phase = true;
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
    2c14:	8323      	strh	r3, [r4, #24]
	rows = display->getHeight();
	cols = display->getWidth();
	extLine = new DFXTextLine[rows];
	blinkParams = new LineBlinkParams[rows];
	LineBlinkParams* bl;
	for (byte i = 0; i < rows; i++) {
    2c16:	3501      	adds	r5, #1
    2c18:	7f33      	ldrb	r3, [r6, #28]
    2c1a:	b2ed      	uxtb	r5, r5
    2c1c:	42ab      	cmp	r3, r5
    2c1e:	d8df      	bhi.n	2be0 <ExtTextDisplay::_init(TextDisplay&)+0xb4>
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	};

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    2c20:	b14b      	cbz	r3, 2c36 <ExtTextDisplay::_init(TextDisplay&)+0x10a>
    2c22:	2400      	movs	r4, #0
    2c24:	4621      	mov	r1, r4
    2c26:	4630      	mov	r0, r6
    2c28:	f7ff ff60 	bl	2aec <ExtTextDisplay::clearLine(unsigned char)>
    2c2c:	3401      	adds	r4, #1
    2c2e:	7f33      	ldrb	r3, [r6, #28]
    2c30:	b2e4      	uxtb	r4, r4
    2c32:	42a3      	cmp	r3, r4
    2c34:	d8f6      	bhi.n	2c24 <ExtTextDisplay::_init(TextDisplay&)+0xf8>
		bl->dutyCycle = 50;
		bl->period = DEF_BLINK_PERIOD;
		bl->duration = DEF_BLINK_DURATION;
	}
	clear();
}
    2c36:	b004      	add	sp, #16
    2c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002c3c <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)>:
 void ExtTextDisplay::_clearBlinkMask(byte row) {
	 LineBlinkParams& lbp = blinkParams[row];
	 for (byte i = 0; i < cols; i++) lbp.mask[i] = ' ';
}

void ExtTextDisplay::_setBlinkMask(byte line, const char* text, byte pos) {
    2c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2c40:	4606      	mov	r6, r0
    2c42:	461c      	mov	r4, r3
    2c44:	4690      	mov	r8, r2
    2c46:	460f      	mov	r7, r1
	char ch;
	_clearBlinkMask(line);
    2c48:	f7ff ff3a 	bl	2ac0 <ExtTextDisplay::_clearBlinkMask(unsigned char)>
	for (byte i = pos; i < cols; i++) {
    2c4c:	7f73      	ldrb	r3, [r6, #29]
    2c4e:	42a3      	cmp	r3, r4
    2c50:	d91b      	bls.n	2c8a <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)+0x4e>
		ch = text[i-pos];
    2c52:	f898 5000 	ldrb.w	r5, [r8]
    2c56:	46a1      	mov	r9, r4
		if (ch == 0) break;
    2c58:	b1bd      	cbz	r5, 2c8a <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)+0x4e>
    2c5a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    2c5e:	00bf      	lsls	r7, r7, #2
    2c60:	e002      	b.n	2c68 <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)+0x2c>

void ExtTextDisplay::_setBlinkMask(byte line, const char* text, byte pos) {
	char ch;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols; i++) {
		ch = text[i-pos];
    2c62:	f818 5003 	ldrb.w	r5, [r8, r3]
		if (ch == 0) break;
    2c66:	b185      	cbz	r5, 2c8a <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)+0x4e>
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    2c68:	68b0      	ldr	r0, [r6, #8]
    2c6a:	4621      	mov	r1, r4
    2c6c:	4438      	add	r0, r7
    2c6e:	f007 f98f 	bl	9f90 <String::operator[](unsigned int)>
    2c72:	2d20      	cmp	r5, #32
    2c74:	bf14      	ite	ne
    2c76:	2378      	movne	r3, #120	; 0x78
    2c78:	2320      	moveq	r3, #32
    2c7a:	7003      	strb	r3, [r0, #0]
}

void ExtTextDisplay::_setBlinkMask(byte line, const char* text, byte pos) {
	char ch;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols; i++) {
    2c7c:	3401      	adds	r4, #1
    2c7e:	7f72      	ldrb	r2, [r6, #29]
    2c80:	b2e4      	uxtb	r4, r4
    2c82:	42a2      	cmp	r2, r4
		ch = text[i-pos];
    2c84:	ebc9 0304 	rsb	r3, r9, r4
}

void ExtTextDisplay::_setBlinkMask(byte line, const char* text, byte pos) {
	char ch;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols; i++) {
    2c88:	d8eb      	bhi.n	2c62 <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)+0x26>
    2c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c8e:	bf00      	nop

00002c90 <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)>:
//	extLine[line].copy(text, LINE_MAX_LEN);
//	setText(line, text);
//}

 void ExtTextDisplay::putText(byte line, const char* text, byte pos,
	bool blinking, bool clearBefore) {
    2c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (line >= rows) return;
    2c94:	7f04      	ldrb	r4, [r0, #28]
//	extLine[line].copy(text, LINE_MAX_LEN);
//	setText(line, text);
//}

 void ExtTextDisplay::putText(byte line, const char* text, byte pos,
	bool blinking, bool clearBefore) {
    2c96:	b085      	sub	sp, #20
	if (line >= rows) return;
    2c98:	428c      	cmp	r4, r1
//	extLine[line].copy(text, LINE_MAX_LEN);
//	setText(line, text);
//}

 void ExtTextDisplay::putText(byte line, const char* text, byte pos,
	bool blinking, bool clearBefore) {
    2c9a:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    2c9e:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	if (line >= rows) return;
    2ca2:	d802      	bhi.n	2caa <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)+0x1a>
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    2ca4:	b005      	add	sp, #20
    2ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2caa:	4604      	mov	r4, r0
//}

 void ExtTextDisplay::putText(byte line, const char* text, byte pos,
	bool blinking, bool clearBefore) {
	if (line >= rows) return;
	extLine[line].text = text;
    2cac:	b20e      	sxth	r6, r1
    2cae:	6840      	ldr	r0, [r0, #4]
    2cb0:	ea4f 1b46 	mov.w	fp, r6, lsl #5
    2cb4:	460d      	mov	r5, r1
    2cb6:	4458      	add	r0, fp
    2cb8:	4611      	mov	r1, r2
    2cba:	4698      	mov	r8, r3
    2cbc:	4617      	mov	r7, r2
    2cbe:	f007 f8d7 	bl	9e70 <String::operator=(char const*)>
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
    2cc2:	e894 0009 	ldmia.w	r4, {r0, r3}

 void ExtTextDisplay::putText(byte line, const char* text, byte pos,
	bool blinking, bool clearBefore) {
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    2cc6:	445b      	add	r3, fp
    2cc8:	f04f 0b00 	mov.w	fp, #0
	extLine[line].dfxStep = pos;
    2ccc:	f8a3 8018 	strh.w	r8, [r3, #24]

 void ExtTextDisplay::putText(byte line, const char* text, byte pos,
	bool blinking, bool clearBefore) {
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    2cd0:	f883 b011 	strb.w	fp, [r3, #17]
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
    2cd4:	f883 b012 	strb.w	fp, [r3, #18]
	display->setText(line, pos, text, clearBefore);
    2cd8:	4642      	mov	r2, r8
    2cda:	f8cd a000 	str.w	sl, [sp]
    2cde:	463b      	mov	r3, r7
    2ce0:	4629      	mov	r1, r5
    2ce2:	f002 f965 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
	if (blinking) {
    2ce6:	f1b9 0f00 	cmp.w	r9, #0
    2cea:	d109      	bne.n	2d00 <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)+0x70>
	inline void setBlinkMask(byte line, String& mask) {
		blinkParams[line].mask = mask.substring(0, cols);
	}

	inline void stopBlinking(byte line) {
		blinkParams[line].enabled = false;
    2cec:	68a3      	ldr	r3, [r4, #8]
    2cee:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    2cf2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    2cf6:	f886 9010 	strb.w	r9, [r6, #16]
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    2cfa:	b005      	add	sp, #20
    2cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
	if (blinking) {
		_setBlinkMask(line, text, pos);
    2d00:	4643      	mov	r3, r8
    2d02:	463a      	mov	r2, r7
    2d04:	4629      	mov	r1, r5
    2d06:	4620      	mov	r0, r4
    2d08:	f7ff ff98 	bl	2c3c <ExtTextDisplay::_setBlinkMask(unsigned char, char const*, unsigned char)>

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    2d0c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    2d10:	68a3      	ldr	r3, [r4, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d12:	4909      	ldr	r1, [pc, #36]	; (2d38 <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)+0xa8>)
    2d14:	00b6      	lsls	r6, r6, #2
    2d16:	4433      	add	r3, r6
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
    2d18:	2232      	movs	r2, #50	; 0x32
    2d1a:	749a      	strb	r2, [r3, #18]
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2d1c:	68a2      	ldr	r2, [r4, #8]
    2d1e:	6809      	ldr	r1, [r1, #0]
    2d20:	9103      	str	r1, [sp, #12]
    2d22:	4416      	add	r6, r2
//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    2d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2d28:	2101      	movs	r1, #1
	return ret;
    2d2a:	9a03      	ldr	r2, [sp, #12]

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    2d2c:	f8a3 b01a 	strh.w	fp, [r3, #26]
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    2d30:	8318      	strh	r0, [r3, #24]
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2d32:	7431      	strb	r1, [r6, #16]
	blinkParams[line].startTime = millis();
    2d34:	6172      	str	r2, [r6, #20]
    2d36:	e7b5      	b.n	2ca4 <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)+0x14>
    2d38:	1fff959c 	.word	0x1fff959c

00002d3c <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)>:
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    2d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char ch;
	byte max = text.length() + pos;
    2d40:	6897      	ldr	r7, [r2, #8]
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    2d42:	4605      	mov	r5, r0
    2d44:	461c      	mov	r4, r3
	char ch;
	byte max = text.length() + pos;
    2d46:	441f      	add	r7, r3
		if (ch == 0) break;
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
	}
}

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
    2d48:	4690      	mov	r8, r2
    2d4a:	460e      	mov	r6, r1
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
    2d4c:	f7ff feb8 	bl	2ac0 <ExtTextDisplay::_clearBlinkMask(unsigned char)>
	for (byte i = pos; i < cols && i < max; i++) {
    2d50:	7f6b      	ldrb	r3, [r5, #29]
    2d52:	42a3      	cmp	r3, r4
    2d54:	d91f      	bls.n	2d96 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
    2d56:	b2ff      	uxtb	r7, r7
    2d58:	42bc      	cmp	r4, r7
    2d5a:	d21c      	bcs.n	2d96 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
    2d5c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    2d60:	00b6      	lsls	r6, r6, #2
    2d62:	46a1      	mov	r9, r4
    2d64:	e001      	b.n	2d6a <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x2e>
    2d66:	42a7      	cmp	r7, r4
    2d68:	d915      	bls.n	2d96 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x5a>
		ch = text.charAt(i - pos);
    2d6a:	ebc9 0104 	rsb	r1, r9, r4
    2d6e:	4640      	mov	r0, r8
    2d70:	f007 f8fe 	bl	9f70 <String::charAt(unsigned int) const>
    2d74:	4682      	mov	sl, r0
		blinkParams[line].mask[i] = (ch == ' ' ? ch : 'x');
    2d76:	68a8      	ldr	r0, [r5, #8]
    2d78:	4621      	mov	r1, r4
    2d7a:	4430      	add	r0, r6
    2d7c:	f007 f908 	bl	9f90 <String::operator[](unsigned int)>
    2d80:	f1ba 0f20 	cmp.w	sl, #32
    2d84:	bf14      	ite	ne
    2d86:	2378      	movne	r3, #120	; 0x78
    2d88:	2320      	moveq	r3, #32
    2d8a:	7003      	strb	r3, [r0, #0]

void ExtTextDisplay::_setBlinkMask(byte line, String& text, byte pos) {
	char ch;
	byte max = text.length() + pos;
	_clearBlinkMask(line);
	for (byte i = pos; i < cols && i < max; i++) {
    2d8c:	3401      	adds	r4, #1
    2d8e:	7f6a      	ldrb	r2, [r5, #29]
    2d90:	b2e4      	uxtb	r4, r4
    2d92:	42a2      	cmp	r2, r4
    2d94:	d8e7      	bhi.n	2d66 <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)+0x2a>
    2d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d9a:	bf00      	nop

00002d9c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>:
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    2d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    2da0:	7f04      	ldrb	r4, [r0, #28]
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    2da2:	b089      	sub	sp, #36	; 0x24
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    2da4:	428c      	cmp	r4, r1
	}
	else stopBlinking(line);
}

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
    2da6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    2daa:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
    2dae:	d802      	bhi.n	2db6 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x1a>
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    2db0:	b009      	add	sp, #36	; 0x24
    2db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2db6:	4604      	mov	r4, r0

 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
    2db8:	b20e      	sxth	r6, r1
    2dba:	6840      	ldr	r0, [r0, #4]
    2dbc:	ea4f 1b46 	mov.w	fp, r6, lsl #5
    2dc0:	460d      	mov	r5, r1
    2dc2:	4458      	add	r0, fp
    2dc4:	4611      	mov	r1, r2
    2dc6:	4698      	mov	r8, r3
    2dc8:	4617      	mov	r7, r2
    2dca:	f007 f841 	bl	9e50 <String::operator=(String const&)>
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
    2dce:	e894 000c 	ldmia.w	r4, {r2, r3}
 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    2dd2:	445b      	add	r3, fp
    2dd4:	f04f 0b00 	mov.w	fp, #0
	extLine[line].dfxStep = pos;
    2dd8:	f8a3 8018 	strh.w	r8, [r3, #24]
 void ExtTextDisplay::putText(byte line, String & text, byte pos,
	bool blinking, bool clearBefore) {
	//putText(line, text.c_str, pos, blinking, clearBefore);
	if (line >= rows) return;
	extLine[line].text = text;
	extLine[line].dfxType = NONE;
    2ddc:	f883 b011 	strb.w	fp, [r3, #17]
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
    2de0:	f883 b012 	strb.w	fp, [r3, #18]
	display->setText(line, pos, text, clearBefore);
    2de4:	4639      	mov	r1, r7
    2de6:	a804      	add	r0, sp, #16
    2de8:	9203      	str	r2, [sp, #12]
    2dea:	f006 ffcd 	bl	9d88 <String::String(String const&)>
	inline void setText(byte row, String srcText, short offset, bool clearBefore = false) {
		setText(row, srcText.c_str(), offset, clearBefore);
	}

	inline void setText(byte row, byte col, String text, bool clearBefore = false) {
		setText(row, col, text.c_str(), clearBefore);
    2dee:	9a03      	ldr	r2, [sp, #12]
    2df0:	9b04      	ldr	r3, [sp, #16]
    2df2:	f8cd a000 	str.w	sl, [sp]
    2df6:	4610      	mov	r0, r2
    2df8:	4629      	mov	r1, r5
    2dfa:	4642      	mov	r2, r8
    2dfc:	f002 f8d8 	bl	4fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>
    2e00:	a804      	add	r0, sp, #16
    2e02:	f006 ff5b 	bl	9cbc <String::~String()>
	if (blinking) {
    2e06:	f1b9 0f00 	cmp.w	r9, #0
    2e0a:	d109      	bne.n	2e20 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x84>
    2e0c:	68a3      	ldr	r3, [r4, #8]
    2e0e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    2e12:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    2e16:	f886 9010 	strb.w	r9, [r6, #16]
		_setBlinkMask(line, text, pos);
		setBlinkParams(line, DEF_BLINK_DURATION, DEF_BLINK_PERIOD, 50);
		startBlinking(line);
	}
	else stopBlinking(line);
}
    2e1a:	b009      	add	sp, #36	; 0x24
    2e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	extLine[line].dfxType = NONE;
	extLine[line].dfxStep = pos;
	extLine[line].dfxEnabled = false;
	display->setText(line, pos, text, clearBefore);
	if (blinking) {
		_setBlinkMask(line, text, pos);
    2e20:	4643      	mov	r3, r8
    2e22:	463a      	mov	r2, r7
    2e24:	4629      	mov	r1, r5
    2e26:	4620      	mov	r0, r4
    2e28:	f7ff ff88 	bl	2d3c <ExtTextDisplay::_setBlinkMask(unsigned char, String&, unsigned char)>

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    2e2c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    2e30:	68a3      	ldr	r3, [r4, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e32:	4a09      	ldr	r2, [pc, #36]	; (2e58 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0xbc>)
    2e34:	00b6      	lsls	r6, r6, #2
    2e36:	4433      	add	r3, r6
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
    2e38:	2132      	movs	r1, #50	; 0x32
    2e3a:	7499      	strb	r1, [r3, #18]
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2e3c:	68a1      	ldr	r1, [r4, #8]
    2e3e:	6812      	ldr	r2, [r2, #0]

//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
    2e40:	f8a3 b01a 	strh.w	fp, [r3, #26]
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2e44:	440e      	add	r6, r1
//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    2e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2e4a:	2101      	movs	r1, #1
//void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration = 0,
//	uint16_t bPeriod = 0, byte bDutyCycle = 0) {
void ExtTextDisplay::setBlinkParams(byte line, uint16_t bDuration,
	uint16_t bPeriod, byte bDutyCycle) {
	blinkParams[line].duration = bDuration;
	if (bPeriod > 0) blinkParams[line].period = bPeriod % 5000;
    2e4c:	8318      	strh	r0, [r3, #24]
	if (bDutyCycle > 0) blinkParams[line].dutyCycle = bDutyCycle % 100;
}

 void ExtTextDisplay::startBlinking(byte line) {
	blinkParams[line].enabled = true;
    2e4e:	7431      	strb	r1, [r6, #16]
    2e50:	9204      	str	r2, [sp, #16]
	return ret;
    2e52:	9b04      	ldr	r3, [sp, #16]
	blinkParams[line].startTime = millis();
    2e54:	6173      	str	r3, [r6, #20]
    2e56:	e7ab      	b.n	2db0 <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)+0x14>
    2e58:	1fff959c 	.word	0x1fff959c

00002e5c <Sys80b::onSwitchEvent(unsigned char, bool)>:
	bool _millisRoutine(uint32_t& ms);
	//virtual void onSwitchEvent(byte sw, bool st) = 0;
	//virtual void onSlamSwitchEvent(bool active) = 0;
	//virtual void onButtonPressed(UserKey key) = 0;
	//virtual void onTestButtonPressed() = 0;
	virtual void onSwitchEvent(byte sw, bool st) {};
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop

00002e60 <Game::start()>:
public:
	Game();
	virtual ~Game();

	void reset();
	virtual void start() {};
    2e60:	4770      	bx	lr
    2e62:	bf00      	nop

00002e64 <Game::timerRoutine(int, unsigned long&)>:
	//void updateAndRenderLamps(uint32_t ms);
	//void onSwitchEvent(byte sw, bool st);
	void millisRoutine(uint32_t& ms);
	inline String getGameName() { return _gameName; } // returns game name
	inline int getGameNumber() { return _gameNum; } //  returns Gottileb game id number
	virtual void timerRoutine(int taskIdentifer, uint32_t& tm) {};
    2e64:	4770      	bx	lr
    2e66:	bf00      	nop

00002e68 <non-virtual thunk to Game::timerRoutine(int, unsigned long&)>:
    2e68:	f5a0 7021 	sub.w	r0, r0, #644	; 0x284
    2e6c:	e7fa      	b.n	2e64 <Game::timerRoutine(int, unsigned long&)>
    2e6e:	bf00      	nop

00002e70 <Game::onSlamSwitchEvent(bool)>:

void Game::tilt() {
	// TODO
}

void Game::onSlamSwitchEvent(bool state) {
    2e70:	4770      	bx	lr
    2e72:	bf00      	nop

00002e74 <Game::~Game()>:
	_gameName = String("<no_name>");
	_gameNum = 0;
	reset();
}

Game::~Game() {
    2e74:	4b30      	ldr	r3, [pc, #192]	; (2f38 <Game::~Game()+0xc4>)
    2e76:	b570      	push	{r4, r5, r6, lr}
	delete lights;
    2e78:	f8d0 438c 	ldr.w	r4, [r0, #908]	; 0x38c
	_gameName = String("<no_name>");
	_gameNum = 0;
	reset();
}

Game::~Game() {
    2e7c:	6003      	str	r3, [r0, #0]
    2e7e:	332c      	adds	r3, #44	; 0x2c
    2e80:	4605      	mov	r5, r0
    2e82:	f8c0 3284 	str.w	r3, [r0, #644]	; 0x284
	delete lights;
    2e86:	b134      	cbz	r4, 2e96 <Game::~Game()+0x22>
    2e88:	4620      	mov	r0, r4
    2e8a:	f000 ffb7 	bl	3dfc <LightSet::~LightSet()>
    2e8e:	4620      	mov	r0, r4
    2e90:	2108      	movs	r1, #8
    2e92:	f006 fe3d 	bl	9b10 <operator delete(void*, unsigned int)>
	_gameName = String("<no_name>");
	_gameNum = 0;
	reset();
}

Game::~Game() {
    2e96:	f205 40f4 	addw	r0, r5, #1268	; 0x4f4
    2e9a:	f006 ff0f 	bl	9cbc <String::~String()>

#include "Arduino.h"
#include "TimerTask.h"
//#define MAX_TASKS 20

class TimerSet {
    2e9e:	f505 609a 	add.w	r0, r5, #1232	; 0x4d0
    2ea2:	f006 ff0b 	bl	9cbc <String::~String()>
    2ea6:	f505 6098 	add.w	r0, r5, #1216	; 0x4c0
    2eaa:	f006 ff07 	bl	9cbc <String::~String()>
    2eae:	f505 6095 	add.w	r0, r5, #1192	; 0x4a8
    2eb2:	f006 ff03 	bl	9cbc <String::~String()>
    2eb6:	f505 6092 	add.w	r0, r5, #1168	; 0x490
    2eba:	f006 feff 	bl	9cbc <String::~String()>
    2ebe:	f505 608f 	add.w	r0, r5, #1144	; 0x478
    2ec2:	f006 fefb 	bl	9cbc <String::~String()>
    2ec6:	f505 608c 	add.w	r0, r5, #1120	; 0x460
    2eca:	f006 fef7 	bl	9cbc <String::~String()>

#include "Arduino.h"
#include "Sys80b.h"
//class Sys80b;

class Sys80b_Sensor {
    2ece:	f205 4044 	addw	r0, r5, #1092	; 0x444
    2ed2:	f006 fef3 	bl	9cbc <String::~String()>
    2ed6:	f205 402c 	addw	r0, r5, #1068	; 0x42c
    2eda:	f006 feef 	bl	9cbc <String::~String()>
    2ede:	f205 4014 	addw	r0, r5, #1044	; 0x414
    2ee2:	f006 feeb 	bl	9cbc <String::~String()>
    2ee6:	f505 707f 	add.w	r0, r5, #1020	; 0x3fc
    2eea:	f006 fee7 	bl	9cbc <String::~String()>
    2eee:	f505 7079 	add.w	r0, r5, #996	; 0x3e4
    2ef2:	f006 fee3 	bl	9cbc <String::~String()>
    2ef6:	f505 7073 	add.w	r0, r5, #972	; 0x3cc
    2efa:	f006 fedf 	bl	9cbc <String::~String()>
    2efe:	f505 706d 	add.w	r0, r5, #948	; 0x3b4
    2f02:	f006 fedb 	bl	9cbc <String::~String()>
    2f06:	f505 7622 	add.w	r6, r5, #648	; 0x288
    2f0a:	f505 7067 	add.w	r0, r5, #924	; 0x39c
    2f0e:	f505 744f 	add.w	r4, r5, #828	; 0x33c
    2f12:	f006 fed3 	bl	9cbc <String::~String()>
    2f16:	42a6      	cmp	r6, r4
    2f18:	d009      	beq.n	2f2e <Game::~Game()+0xba>
    2f1a:	3c24      	subs	r4, #36	; 0x24
enum pinballMode { SHOW_MODE, GAME_MODE, TEST_MODE, BOOKKEEP_MODE };
//enum coinChute { LEFT_CHUTE, CENTER_CHUTE, RIGHT_CHUTE };
//enum gameStage { GAME_INIT, GAME_WAIT_BALLS_IN_HOLE, GAME_NEWBALL, GAME_BONUS_AWARD, GAME_TILT, GAME_END };

// top score entry
struct TopPlay {
    2f1c:	f104 0014 	add.w	r0, r4, #20
    2f20:	f006 fecc 	bl	9cbc <String::~String()>
    2f24:	1d20      	adds	r0, r4, #4
    2f26:	f006 fec9 	bl	9cbc <String::~String()>
    2f2a:	42a6      	cmp	r6, r4
    2f2c:	d1f5      	bne.n	2f1a <Game::~Game()+0xa6>
    2f2e:	4628      	mov	r0, r5
    2f30:	f001 fb14 	bl	455c <Sys80b::~Sys80b()>
	delete lights;
}
    2f34:	4628      	mov	r0, r5
    2f36:	bd70      	pop	{r4, r5, r6, pc}
    2f38:	0000fdc0 	.word	0x0000fdc0

00002f3c <non-virtual thunk to Game::~Game()>:
	byte _players; // 1..MAX_PLAYER
	bool _3balls;

public:
	Game();
	virtual ~Game();
    2f3c:	f5a0 7021 	sub.w	r0, r0, #644	; 0x284
    2f40:	f7ff bf98 	b.w	2e74 <Game::~Game()>

00002f44 <Game::~Game()>:
	_gameName = String("<no_name>");
	_gameNum = 0;
	reset();
}

Game::~Game() {
    2f44:	b510      	push	{r4, lr}
    2f46:	4604      	mov	r4, r0
	delete lights;
}
    2f48:	f7ff ff94 	bl	2e74 <Game::~Game()>
    2f4c:	4620      	mov	r0, r4
    2f4e:	f240 510c 	movw	r1, #1292	; 0x50c
    2f52:	f006 fddd 	bl	9b10 <operator delete(void*, unsigned int)>
    2f56:	4620      	mov	r0, r4
    2f58:	bd10      	pop	{r4, pc}
    2f5a:	bf00      	nop

00002f5c <non-virtual thunk to Game::~Game()>:
    2f5c:	f5a0 7021 	sub.w	r0, r0, #644	; 0x284
    2f60:	f7ff bff0 	b.w	2f44 <Game::~Game()>

00002f64 <NVData_class::~NVData_class()>:
#include "Arduino.h"

#include <SD_t3.h>
#include <SD.h>

struct NVData_class {
    2f64:	b510      	push	{r4, lr}
    2f66:	4604      	mov	r4, r0
    2f68:	3008      	adds	r0, #8
    2f6a:	f003 fdcd 	bl	6b08 <File::~File()>
    2f6e:	4620      	mov	r0, r4
    2f70:	bd10      	pop	{r4, pc}
    2f72:	bf00      	nop

00002f74 <Sys80b::onButtonPressed(UserKey)>:
	virtual void onSlamSwitchEvent(bool active) {};
	virtual void onButtonPressed(UserKey key) { 
    2f74:	b538      	push	{r3, r4, r5, lr}
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2f76:	4c07      	ldr	r4, [pc, #28]	; (2f94 <Sys80b::onButtonPressed(UserKey)+0x20>)
    2f78:	4807      	ldr	r0, [pc, #28]	; (2f98 <Sys80b::onButtonPressed(UserKey)+0x24>)
    2f7a:	460d      	mov	r5, r1
    2f7c:	2111      	movs	r1, #17
    2f7e:	f006 fbc9 	bl	9714 <usb_serial_write>
    2f82:	4629      	mov	r1, r5
    2f84:	4620      	mov	r0, r4
    2f86:	f006 fe69 	bl	9c5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2f8a:	4620      	mov	r0, r4
		Serial.print("onButtonPressed: "); 
		Serial.println(key);
	};
    2f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2f90:	f006 bdfe 	b.w	9b90 <Print::println()>
    2f94:	1fff876c 	.word	0x1fff876c
    2f98:	0000fdfc 	.word	0x0000fdfc

00002f9c <Game::setPinballMode(pinballMode)>:
	p.ballsLeft = getBallsCount();
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void Game::setPinballMode(pinballMode m) {
    2f9c:	b570      	push	{r4, r5, r6, lr}
    2f9e:	b084      	sub	sp, #16
    2fa0:	460c      	mov	r4, r1
    2fa2:	4605      	mov	r5, r0
	String s;
    2fa4:	2100      	movs	r1, #0
    2fa6:	4668      	mov	r0, sp
    2fa8:	f006 fec8 	bl	9d3c <String::String(char const*)>

	msg::clr();
    2fac:	f000 ff96 	bl	3edc <msg::clr()>
	msg::outp(F("Switching mode: "));
    2fb0:	4820      	ldr	r0, [pc, #128]	; (3034 <Game::setPinballMode(pinballMode)+0x98>)
    2fb2:	f000 ffb3 	bl	3f1c <msg::outp(__FlashStringHelper const*)>
	msg::outpln(m);
    2fb6:	4620      	mov	r0, r4
    2fb8:	f001 f84a 	bl	4050 <msg::outpln(unsigned long)>
	_mode = m;
    2fbc:	f885 4506 	strb.w	r4, [r5, #1286]	; 0x506
	//modeStep = 0;
	switch (m) {
    2fc0:	b1ec      	cbz	r4, 2ffe <Game::setPinballMode(pinballMode)+0x62>
    2fc2:	2c01      	cmp	r4, #1
    2fc4:	d116      	bne.n	2ff4 <Game::setPinballMode(pinballMode)+0x58>
		setOnGameRelay(false); // game over
		display.clear();
		_gameOver = true;
		break;
	case GAME_MODE:
		setOnGameRelay(true); // game over
    2fc6:	4621      	mov	r1, r4
    2fc8:	4628      	mov	r0, r5
    2fca:	f001 fcef 	bl	49ac <Sys80b::setOnGameRelay(bool)>
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
	};

	inline void clear() { for (byte i = 0; i < rows; i++) clearLine(i); }
    2fce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
		display.clear();
    2fd2:	f105 060c 	add.w	r6, r5, #12
    2fd6:	2400      	movs	r4, #0
    2fd8:	b14b      	cbz	r3, 2fee <Game::setPinballMode(pinballMode)+0x52>
    2fda:	4621      	mov	r1, r4
    2fdc:	4630      	mov	r0, r6
    2fde:	f7ff fd85 	bl	2aec <ExtTextDisplay::clearLine(unsigned char)>
    2fe2:	3401      	adds	r4, #1
    2fe4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    2fe8:	b2e4      	uxtb	r4, r4
    2fea:	42a3      	cmp	r3, r4
    2fec:	d8f5      	bhi.n	2fda <Game::setPinballMode(pinballMode)+0x3e>
		_gameOver = false;
    2fee:	2300      	movs	r3, #0
    2ff0:	f885 3507 	strb.w	r3, [r5, #1287]	; 0x507
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void Game::setPinballMode(pinballMode m) {
	String s;
    2ff4:	4668      	mov	r0, sp
    2ff6:	f006 fe61 	bl	9cbc <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    2ffa:	b004      	add	sp, #16
    2ffc:	bd70      	pop	{r4, r5, r6, pc}
	msg::outpln(m);
	_mode = m;
	//modeStep = 0;
	switch (m) {
	case SHOW_MODE:
		setOnGameRelay(false); // game over
    2ffe:	4621      	mov	r1, r4
    3000:	4628      	mov	r0, r5
    3002:	f001 fcd3 	bl	49ac <Sys80b::setOnGameRelay(bool)>
    3006:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
		display.clear();
    300a:	f105 060c 	add.w	r6, r5, #12
    300e:	b14b      	cbz	r3, 3024 <Game::setPinballMode(pinballMode)+0x88>
    3010:	4621      	mov	r1, r4
    3012:	4630      	mov	r0, r6
    3014:	f7ff fd6a 	bl	2aec <ExtTextDisplay::clearLine(unsigned char)>
    3018:	3401      	adds	r4, #1
    301a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    301e:	b2e4      	uxtb	r4, r4
    3020:	42a3      	cmp	r3, r4
    3022:	d8f5      	bhi.n	3010 <Game::setPinballMode(pinballMode)+0x74>
		_gameOver = true;
    3024:	2301      	movs	r3, #1
    3026:	f885 3507 	strb.w	r3, [r5, #1287]	; 0x507
	p.awardLevelReached = 0;
	p.topScorer = false;
}

void Game::setPinballMode(pinballMode m) {
	String s;
    302a:	4668      	mov	r0, sp
    302c:	f006 fe46 	bl	9cbc <String::~String()>
		break;
	case BOOKKEEP_MODE:
		// TODO...
		break;
	}
}
    3030:	b004      	add	sp, #16
    3032:	bd70      	pop	{r4, r5, r6, pc}
    3034:	0000fe10 	.word	0x0000fe10

00003038 <Game::onTestButtonPressed()>:
void Game::onSlamSwitchEvent(bool state) {
	if (state) tilt();
}

void Game::onTestButtonPressed() {
	if (_gameOver) setPinballMode(TEST_MODE);
    3038:	f890 3507 	ldrb.w	r3, [r0, #1287]	; 0x507
    303c:	b903      	cbnz	r3, 3040 <Game::onTestButtonPressed()+0x8>
    303e:	4770      	bx	lr
    3040:	2102      	movs	r1, #2
    3042:	f7ff bfab 	b.w	2f9c <Game::setPinballMode(pinballMode)>
    3046:	bf00      	nop

00003048 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)>:

	String crStr = String(credits);
	display.putText(1, crStr, 10 - crStr.length());
}

String Game::getScoreStr(uint32_t scr, byte digits, bool leadingZeros, bool dots) {
    3048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    304c:	b088      	sub	sp, #32
    304e:	4605      	mov	r5, r0
    3050:	4690      	mov	r8, r2
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(const __FlashStringHelper *pgmstr) : String(pgmstr) {}
    3052:	4931      	ldr	r1, [pc, #196]	; (3118 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0xd0>)
    3054:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    3058:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    305c:	a804      	add	r0, sp, #16
    305e:	461f      	mov	r7, r3
    3060:	f006 fe80 	bl	9d64 <String::String(__FlashStringHelper const*)>
	byte ch, i, len;
	String st = F("0000000000") + String(scr);
    3064:	220a      	movs	r2, #10
    3066:	4641      	mov	r1, r8
    3068:	4668      	mov	r0, sp
    306a:	f006 febf 	bl	9dec <String::String(unsigned long, unsigned char)>
    306e:	4669      	mov	r1, sp
    3070:	a804      	add	r0, sp, #16
    3072:	f006 ff67 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    3076:	4601      	mov	r1, r0
    3078:	4628      	mov	r0, r5
    307a:	f006 fe85 	bl	9d88 <String::String(String const&)>
    307e:	4668      	mov	r0, sp
    3080:	f006 fe1c 	bl	9cbc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    3084:	a804      	add	r0, sp, #16
    3086:	f006 fe19 	bl	9cbc <String::~String()>
	if (digits > 10) digits = 10;
	st = st.substring(st.length() - digits);
    308a:	68aa      	ldr	r2, [r5, #8]
    308c:	2f0a      	cmp	r7, #10
    308e:	bf94      	ite	ls
    3090:	1bd2      	subls	r2, r2, r7
    3092:	3a0a      	subhi	r2, #10
    3094:	4629      	mov	r1, r5
    3096:	a804      	add	r0, sp, #16
    3098:	f006 ffc6 	bl	a028 <String::substring(unsigned int) const>
    309c:	a904      	add	r1, sp, #16
    309e:	4628      	mov	r0, r5
    30a0:	f006 fede 	bl	9e60 <String::operator=(String&&)>
    30a4:	a804      	add	r0, sp, #16
    30a6:	f006 fe09 	bl	9cbc <String::~String()>
	len = st.length();
    30aa:	7a2f      	ldrb	r7, [r5, #8]

	// zero clearing
	if (!leadingZeros && len > 2) { // cut leading zeros
    30ac:	b90c      	cbnz	r4, 30b2 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x6a>
    30ae:	2f02      	cmp	r7, #2
    30b0:	d81c      	bhi.n	30ec <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0xa4>
		for (i = 0; i < (len - 2) && st.charAt(i) == '0'; i++) st.setCharAt(i, ' ');
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
    30b2:	b1be      	cbz	r6, 30e4 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x9c>
    30b4:	2f03      	cmp	r7, #3
    30b6:	d915      	bls.n	30e4 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x9c>
    30b8:	1f3e      	subs	r6, r7, #4
    30ba:	2403      	movs	r4, #3
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
    30bc:	4631      	mov	r1, r6
    30be:	4628      	mov	r0, r5
    30c0:	f006 ff56 	bl	9f70 <String::charAt(unsigned int) const>
    30c4:	4603      	mov	r3, r0
			if (ch == ' ') break;
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    30c6:	f060 027f 	orn	r2, r0, #127	; 0x7f
	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
    30ca:	2b20      	cmp	r3, #32
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    30cc:	4631      	mov	r1, r6
    30ce:	b2d2      	uxtb	r2, r2
    30d0:	4628      	mov	r0, r5
    30d2:	f1a6 0603 	sub.w	r6, r6, #3
	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
    30d6:	d005      	beq.n	30e4 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x9c>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
    30d8:	3403      	adds	r4, #3
    30da:	b2e4      	uxtb	r4, r4
			ch = st.charAt(len - i - 1);
			if (ch == ' ') break;
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
    30dc:	f006 ff52 	bl	9f84 <String::setCharAt(unsigned int, char)>
	}

	// dots
	//len = st.length();
	if (dots && len > 3) {
		for (i = 3; i < len; i += 3) {
    30e0:	42a7      	cmp	r7, r4
    30e2:	d8eb      	bhi.n	30bc <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x74>
			st.setCharAt(len - i - 1, (char)(ch | 0x80));
		}
	}

	return st;
}
    30e4:	4628      	mov	r0, r5
    30e6:	b008      	add	sp, #32
    30e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	st = st.substring(st.length() - digits);
	len = st.length();

	// zero clearing
	if (!leadingZeros && len > 2) { // cut leading zeros
		for (i = 0; i < (len - 2) && st.charAt(i) == '0'; i++) st.setCharAt(i, ' ');
    30ec:	f1a7 0802 	sub.w	r8, r7, #2
    30f0:	f1b8 0f00 	cmp.w	r8, #0
    30f4:	dddd      	ble.n	30b2 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x6a>
    30f6:	4621      	mov	r1, r4
    30f8:	4628      	mov	r0, r5
    30fa:	f006 ff39 	bl	9f70 <String::charAt(unsigned int) const>
    30fe:	2830      	cmp	r0, #48	; 0x30
    3100:	d1d7      	bne.n	30b2 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x6a>
    3102:	4621      	mov	r1, r4
    3104:	3401      	adds	r4, #1
    3106:	2220      	movs	r2, #32
    3108:	4628      	mov	r0, r5
    310a:	b2e4      	uxtb	r4, r4
    310c:	f006 ff3a 	bl	9f84 <String::setCharAt(unsigned int, char)>
    3110:	4544      	cmp	r4, r8
    3112:	dace      	bge.n	30b2 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0x6a>
    3114:	e7ef      	b.n	30f6 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)+0xae>
    3116:	bf00      	nop
    3118:	0000fe2c 	.word	0x0000fe2c

0000311c <Game::displayScoresAndCredits()>:
	display.putText(1, crStr, 9);
	//delete& crStr;
}

// TODO
void Game::displayScoresAndCredits() {
    311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3120:	b097      	sub	sp, #92	; 0x5c
    3122:	4605      	mov	r5, r0
	String st[4];
    3124:	2100      	movs	r1, #0
    3126:	a806      	add	r0, sp, #24
    3128:	f006 fe08 	bl	9d3c <String::String(char const*)>
    312c:	2100      	movs	r1, #0
    312e:	a80a      	add	r0, sp, #40	; 0x28
    3130:	f006 fe04 	bl	9d3c <String::String(char const*)>
    3134:	2100      	movs	r1, #0
    3136:	a80e      	add	r0, sp, #56	; 0x38
    3138:	f006 fe00 	bl	9d3c <String::String(char const*)>
    313c:	a812      	add	r0, sp, #72	; 0x48
    313e:	2100      	movs	r1, #0
    3140:	f006 fdfc 	bl	9d3c <String::String(char const*)>
    3144:	462c      	mov	r4, r5
    3146:	ae06      	add	r6, sp, #24
    3148:	f105 0930 	add.w	r9, r5, #48	; 0x30
	//display.putText(0, st[0], 0);
	//display.putText(0, st[1], 12);
	//display.putText(1, st[2], 0);
	//display.putText(1, st[3], 12);

	for (i = 0; i < 4; i++) st[i] = getScoreStr(player[i].score, SCORE_DIGITS, true);
    314c:	f04f 0800 	mov.w	r8, #0
    3150:	2701      	movs	r7, #1
    3152:	2308      	movs	r3, #8
    3154:	f8d4 233c 	ldr.w	r2, [r4, #828]	; 0x33c
    3158:	eb0d 0003 	add.w	r0, sp, r3
    315c:	4629      	mov	r1, r5
    315e:	e88d 0180 	stmia.w	sp, {r7, r8}
    3162:	f7ff ff71 	bl	3048 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)>
    3166:	a902      	add	r1, sp, #8
    3168:	4630      	mov	r0, r6
    316a:	f006 fe79 	bl	9e60 <String::operator=(String&&)>
    316e:	340c      	adds	r4, #12
    3170:	a802      	add	r0, sp, #8
    3172:	f006 fda3 	bl	9cbc <String::~String()>
    3176:	45a1      	cmp	r9, r4
    3178:	f106 0610 	add.w	r6, r6, #16
    317c:	d1e9      	bne.n	3152 <Game::displayScoresAndCredits()+0x36>
    317e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	display.clear();
    3182:	f105 060c 	add.w	r6, r5, #12
    3186:	2400      	movs	r4, #0
    3188:	b14b      	cbz	r3, 319e <Game::displayScoresAndCredits()+0x82>
    318a:	4621      	mov	r1, r4
    318c:	4630      	mov	r0, r6
    318e:	f7ff fcad 	bl	2aec <ExtTextDisplay::clearLine(unsigned char)>
    3192:	3401      	adds	r4, #1
    3194:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    3198:	b2e4      	uxtb	r4, r4
    319a:	42a3      	cmp	r3, r4
    319c:	d8f5      	bhi.n	318a <Game::displayScoresAndCredits()+0x6e>
	display.putText(0, st[0] ,0);
    319e:	2400      	movs	r4, #0
    31a0:	4623      	mov	r3, r4
    31a2:	4621      	mov	r1, r4
    31a4:	aa06      	add	r2, sp, #24
    31a6:	4630      	mov	r0, r6
    31a8:	9401      	str	r4, [sp, #4]
    31aa:	9400      	str	r4, [sp, #0]
    31ac:	f7ff fdf6 	bl	2d9c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	display.putText(0, st[1], 12);
    31b0:	4621      	mov	r1, r4
    31b2:	aa0a      	add	r2, sp, #40	; 0x28
    31b4:	4630      	mov	r0, r6
    31b6:	9401      	str	r4, [sp, #4]
    31b8:	9400      	str	r4, [sp, #0]
    31ba:	230c      	movs	r3, #12
    31bc:	f7ff fdee 	bl	2d9c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	display.putText(1, st[2], 0);
    31c0:	4623      	mov	r3, r4
    31c2:	aa0e      	add	r2, sp, #56	; 0x38
    31c4:	4630      	mov	r0, r6
    31c6:	9401      	str	r4, [sp, #4]
    31c8:	9400      	str	r4, [sp, #0]
    31ca:	2101      	movs	r1, #1
    31cc:	f7ff fde6 	bl	2d9c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	display.putText(1, st[3], 12);
    31d0:	aa12      	add	r2, sp, #72	; 0x48
    31d2:	230c      	movs	r3, #12
    31d4:	4630      	mov	r0, r6
    31d6:	9401      	str	r4, [sp, #4]
    31d8:	9400      	str	r4, [sp, #0]
    31da:	2101      	movs	r1, #1
    31dc:	f7ff fdde 	bl	2d9c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>

	String crStr = String(credits);
    31e0:	f895 136c 	ldrb.w	r1, [r5, #876]	; 0x36c
    31e4:	a802      	add	r0, sp, #8
    31e6:	f006 fded 	bl	9dc4 <String::String(unsigned char)>
	display.putText(1, crStr, 10 - crStr.length());
    31ea:	9b04      	ldr	r3, [sp, #16]
    31ec:	9401      	str	r4, [sp, #4]
    31ee:	f1c3 030a 	rsb	r3, r3, #10
    31f2:	b2db      	uxtb	r3, r3
    31f4:	aa02      	add	r2, sp, #8
    31f6:	2101      	movs	r1, #1
    31f8:	4630      	mov	r0, r6
    31fa:	9400      	str	r4, [sp, #0]
    31fc:	f7ff fdce 	bl	2d9c <ExtTextDisplay::putText(unsigned char, String&, unsigned char, bool, bool)>
	display.putText(0, st[0] ,0);
	display.putText(0, st[1], 12);
	display.putText(1, st[2], 0);
	display.putText(1, st[3], 12);

	String crStr = String(credits);
    3200:	a802      	add	r0, sp, #8
    3202:	f006 fd5b 	bl	9cbc <String::~String()>
	//delete& crStr;
}

// TODO
void Game::displayScoresAndCredits() {
	String st[4];
    3206:	a812      	add	r0, sp, #72	; 0x48
    3208:	f006 fd58 	bl	9cbc <String::~String()>
    320c:	a80e      	add	r0, sp, #56	; 0x38
    320e:	f006 fd55 	bl	9cbc <String::~String()>
    3212:	a80a      	add	r0, sp, #40	; 0x28
    3214:	f006 fd52 	bl	9cbc <String::~String()>
    3218:	a806      	add	r0, sp, #24
    321a:	f006 fd4f 	bl	9cbc <String::~String()>
	display.putText(1, st[2], 0);
	display.putText(1, st[3], 12);

	String crStr = String(credits);
	display.putText(1, crStr, 10 - crStr.length());
}
    321e:	b017      	add	sp, #92	; 0x5c
    3220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003224 <Game::loadHighScores()>:
	}

	return st;
}

void Game::loadHighScores() {
    3224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3228:	b08b      	sub	sp, #44	; 0x2c
    322a:	4680      	mov	r8, r0
	byte i, j;
	String inits = "ABC";
    322c:	4933      	ldr	r1, [pc, #204]	; (32fc <Game::loadHighScores()+0xd8>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    322e:	4f34      	ldr	r7, [pc, #208]	; (3300 <Game::loadHighScores()+0xdc>)
    3230:	a802      	add	r0, sp, #8
    3232:	f006 fd83 	bl	9d3c <String::String(char const*)>
    3236:	2115      	movs	r1, #21
    3238:	4832      	ldr	r0, [pc, #200]	; (3304 <Game::loadHighScores()+0xe0>)
    323a:	f006 fa6b 	bl	9714 <usb_serial_write>
    323e:	4832      	ldr	r0, [pc, #200]	; (3308 <Game::loadHighScores()+0xe4>)
    3240:	f006 fca6 	bl	9b90 <Print::println()>
    3244:	f508 7527 	add.w	r5, r8, #668	; 0x29c
    3248:	2624      	movs	r6, #36	; 0x24
    324a:	2400      	movs	r4, #0

	Serial.println("- loadHighScores()...");
	for (i = 0; i < TOP_SCORES; i++) {
		if (i < 3) {
    324c:	2c02      	cmp	r4, #2
			j = 36 + i * 8;
			topScore[i].score = hw->getStat32(j);
    324e:	4631      	mov	r1, r6
	byte i, j;
	String inits = "ABC";

	Serial.println("- loadHighScores()...");
	for (i = 0; i < TOP_SCORES; i++) {
		if (i < 3) {
    3250:	d846      	bhi.n	32e0 <Game::loadHighScores()+0xbc>
			j = 36 + i * 8;
			topScore[i].score = hw->getStat32(j);
    3252:	f8d8 0280 	ldr.w	r0, [r8, #640]	; 0x280
    3256:	f002 fab1 	bl	57bc <Board_Sys80b::getStat32(unsigned char)>
			//inits = String();
			//inits.append((char)getStat8(j + 4));
			//inits.append((char)getStat8(j + 5));
			//inits.append((char)getStat8(j + 6));
			topScore[i].playerName = inits;
    325a:	a902      	add	r1, sp, #8

	Serial.println("- loadHighScores()...");
	for (i = 0; i < TOP_SCORES; i++) {
		if (i < 3) {
			j = 36 + i * 8;
			topScore[i].score = hw->getStat32(j);
    325c:	f845 0c14 	str.w	r0, [r5, #-20]
			//inits = String();
			//inits.append((char)getStat8(j + 4));
			//inits.append((char)getStat8(j + 5));
			//inits.append((char)getStat8(j + 6));
			topScore[i].playerName = inits;
    3260:	4628      	mov	r0, r5
    3262:	f006 fdf5 	bl	9e50 <String::operator=(String const&)>
		}
		else {
			topScore[i].score = (TOP_SCORES - i) * 500000u;
			topScore[i].playerName = String(F("RAM"));
		}
		topScore[i].scoreString = getScoreStr(topScore[i].score, SCORE_DIGITS, false, true);
    3266:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    326a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    326e:	2101      	movs	r1, #1
    3270:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
    3274:	9101      	str	r1, [sp, #4]
    3276:	2300      	movs	r3, #0
    3278:	f1a5 0910 	sub.w	r9, r5, #16
    327c:	9300      	str	r3, [sp, #0]
    327e:	4641      	mov	r1, r8
    3280:	2308      	movs	r3, #8
    3282:	a806      	add	r0, sp, #24
    3284:	f7ff fee0 	bl	3048 <Game::getScoreStr(unsigned long, unsigned char, bool, bool)>
    3288:	a906      	add	r1, sp, #24
    328a:	4648      	mov	r0, r9
    328c:	f006 fde8 	bl	9e60 <String::operator=(String&&)>
    3290:	a806      	add	r0, sp, #24
    3292:	f006 fd13 	bl	9cbc <String::~String()>
		Serial.printf("%d. <", i);
    3296:	4622      	mov	r2, r4
    3298:	491c      	ldr	r1, [pc, #112]	; (330c <Game::loadHighScores()+0xe8>)
    329a:	481b      	ldr	r0, [pc, #108]	; (3308 <Game::loadHighScores()+0xe4>)
    329c:	f006 fc90 	bl	9bc0 <Print::printf(char const*, ...)>
		Serial.print(topScore[i].playerName);
    32a0:	4629      	mov	r1, r5
    32a2:	4819      	ldr	r0, [pc, #100]	; (3308 <Game::loadHighScores()+0xe4>)
    32a4:	f006 fc4e 	bl	9b44 <Print::print(String const&)>
    32a8:	2105      	movs	r1, #5
    32aa:	4819      	ldr	r0, [pc, #100]	; (3310 <Game::loadHighScores()+0xec>)
    32ac:	f006 fa32 	bl	9714 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    32b0:	4649      	mov	r1, r9
    32b2:	4815      	ldr	r0, [pc, #84]	; (3308 <Game::loadHighScores()+0xe4>)
    32b4:	f006 fc46 	bl	9b44 <Print::print(String const&)>
    32b8:	3401      	adds	r4, #1
    32ba:	4813      	ldr	r0, [pc, #76]	; (3308 <Game::loadHighScores()+0xe4>)
    32bc:	f5a7 27f4 	sub.w	r7, r7, #499712	; 0x7a000
    32c0:	f006 fc66 	bl	9b90 <Print::println()>
    32c4:	3608      	adds	r6, #8
void Game::loadHighScores() {
	byte i, j;
	String inits = "ABC";

	Serial.println("- loadHighScores()...");
	for (i = 0; i < TOP_SCORES; i++) {
    32c6:	2c05      	cmp	r4, #5
    32c8:	f5a7 7790 	sub.w	r7, r7, #288	; 0x120
    32cc:	f105 0524 	add.w	r5, r5, #36	; 0x24
    32d0:	b2f6      	uxtb	r6, r6
    32d2:	d1bb      	bne.n	324c <Game::loadHighScores()+0x28>
	return st;
}

void Game::loadHighScores() {
	byte i, j;
	String inits = "ABC";
    32d4:	a802      	add	r0, sp, #8
    32d6:	f006 fcf1 	bl	9cbc <String::~String()>
		Serial.printf("%d. <", i);
		Serial.print(topScore[i].playerName);
		Serial.print("> -  ");
		Serial.println(topScore[i].scoreString);
	}
}
    32da:	b00b      	add	sp, #44	; 0x2c
    32dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			//inits.append((char)getStat8(j + 5));
			//inits.append((char)getStat8(j + 6));
			topScore[i].playerName = inits;
		}
		else {
			topScore[i].score = (TOP_SCORES - i) * 500000u;
    32e0:	f845 7c14 	str.w	r7, [r5, #-20]
			topScore[i].playerName = String(F("RAM"));
    32e4:	490b      	ldr	r1, [pc, #44]	; (3314 <Game::loadHighScores()+0xf0>)
    32e6:	a806      	add	r0, sp, #24
    32e8:	f006 fd3c 	bl	9d64 <String::String(__FlashStringHelper const*)>
    32ec:	a906      	add	r1, sp, #24
    32ee:	4628      	mov	r0, r5
    32f0:	f006 fdb6 	bl	9e60 <String::operator=(String&&)>
    32f4:	a806      	add	r0, sp, #24
    32f6:	f006 fce1 	bl	9cbc <String::~String()>
    32fa:	e7b4      	b.n	3266 <Game::loadHighScores()+0x42>
    32fc:	0000fe38 	.word	0x0000fe38
    3300:	002625a0 	.word	0x002625a0
    3304:	0000fe3c 	.word	0x0000fe3c
    3308:	1fff876c 	.word	0x1fff876c
    330c:	0000fe58 	.word	0x0000fe58
    3310:	0000fcc4 	.word	0x0000fcc4
    3314:	0000fe54 	.word	0x0000fe54

00003318 <Game::loadAwardScoreLevels()>:
		Serial.print("> -  ");
		Serial.println(topScore[i].scoreString);
	}
}

void Game::loadAwardScoreLevels() {
    3318:	b570      	push	{r4, r5, r6, lr}
    331a:	4606      	mov	r6, r0
    331c:	f500 755e 	add.w	r5, r0, #888	; 0x378
    3320:	2416      	movs	r4, #22
	for (byte i = 0; i < 3; i++) awardLevelScore[i] = hw->getStat32(22 + i * 4);
    3322:	4621      	mov	r1, r4
    3324:	f8d6 0280 	ldr.w	r0, [r6, #640]	; 0x280
    3328:	f002 fa48 	bl	57bc <Board_Sys80b::getStat32(unsigned char)>
    332c:	3404      	adds	r4, #4
    332e:	b2e4      	uxtb	r4, r4
    3330:	2c22      	cmp	r4, #34	; 0x22
    3332:	f845 0f04 	str.w	r0, [r5, #4]!
    3336:	d1f4      	bne.n	3322 <Game::loadAwardScoreLevels()+0xa>
}
    3338:	bd70      	pop	{r4, r5, r6, pc}
    333a:	bf00      	nop

0000333c <Game::loadCoinsPerCredits()>:

void Game::loadCoinsPerCredits() {
    333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	byte i, v;

	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i);
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
    3340:	f8df 9040 	ldr.w	r9, [pc, #64]	; 3384 <Game::loadCoinsPerCredits()+0x48>
			ch_coins[i] = coins_ratio[v];
    3344:	f8df 8040 	ldr.w	r8, [pc, #64]	; 3388 <Game::loadCoinsPerCredits()+0x4c>

void Game::loadAwardScoreLevels() {
	for (byte i = 0; i < 3; i++) awardLevelScore[i] = hw->getStat32(22 + i * 4);
}

void Game::loadCoinsPerCredits() {
    3348:	4606      	mov	r6, r0
    334a:	f500 755c 	add.w	r5, r0, #880	; 0x370
    334e:	2400      	movs	r4, #0
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
			ch_coins[i] = coins_ratio[v];
		}
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
    3350:	2701      	movs	r7, #1

void Game::loadCoinsPerCredits() {
	byte i, v;

	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i);
    3352:	b2e1      	uxtb	r1, r4
    3354:	f8d6 0280 	ldr.w	r0, [r6, #640]	; 0x280
    3358:	f002 fa26 	bl	57a8 <Board_Sys80b::getSettingByte(unsigned char)>
		if (v <= 24) {
    335c:	2818      	cmp	r0, #24
    335e:	d80d      	bhi.n	337c <Game::loadCoinsPerCredits()+0x40>
			ch_credits[i] = credits_ratio[v];
    3360:	f819 2000 	ldrb.w	r2, [r9, r0]
			ch_coins[i] = coins_ratio[v];
    3364:	f818 3000 	ldrb.w	r3, [r8, r0]
	byte i, v;

	for (i = 0; i < 3; i++) {
		v = hw->getSettingByte(i);
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
    3368:	702a      	strb	r2, [r5, #0]
			ch_coins[i] = coins_ratio[v];
    336a:	f805 3c03 	strb.w	r3, [r5, #-3]
    336e:	3401      	adds	r4, #1
}

void Game::loadCoinsPerCredits() {
	byte i, v;

	for (i = 0; i < 3; i++) {
    3370:	2c03      	cmp	r4, #3
    3372:	f105 0501 	add.w	r5, r5, #1
    3376:	d1ec      	bne.n	3352 <Game::loadCoinsPerCredits()+0x16>
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
			ch_coins[i] = 1;
		}
	}
}
    3378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (v <= 24) {
			ch_credits[i] = credits_ratio[v];
			ch_coins[i] = coins_ratio[v];
		}
		else { // unsupported "incentives" modes
			ch_credits[i] = 1;
    337c:	702f      	strb	r7, [r5, #0]
			ch_coins[i] = 1;
    337e:	f805 7c03 	strb.w	r7, [r5, #-3]
    3382:	e7f4      	b.n	336e <Game::loadCoinsPerCredits()+0x32>
    3384:	0000fd9c 	.word	0x0000fd9c
    3388:	0000ff68 	.word	0x0000ff68

0000338c <Game::reset()>:
Game::~Game() {
	delete lights;
}

// pinball generic initialization procedures
void Game::reset() {
    338c:	b538      	push	{r3, r4, r5, lr}
    338e:	210d      	movs	r1, #13
    3390:	4605      	mov	r5, r0
    3392:	4824      	ldr	r0, [pc, #144]	; (3424 <Game::reset()+0x98>)
    3394:	f006 f9be 	bl	9714 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3398:	4823      	ldr	r0, [pc, #140]	; (3428 <Game::reset()+0x9c>)
    339a:	f006 fbf9 	bl	9b90 <Print::println()>
	byte i;

	Serial.println("Game reset...");
	delay(100);
    339e:	2064      	movs	r0, #100	; 0x64
    33a0:	f005 f99e 	bl	86e0 <delay>
//	//for (byte i = 3; i < _size; i++) if (!isSpecialLamp(i)) light[i].state = OFF_L;
//	_activeLightSet->switchOffAllLights();
//}

void Game::setActiveLightSet(LightSet* ls) {
	LightGroup::activeLightSet = ls;
    33a4:	4b21      	ldr	r3, [pc, #132]	; (342c <Game::reset()+0xa0>)
    33a6:	f8d5 238c 	ldr.w	r2, [r5, #908]	; 0x38c
    33aa:	601a      	str	r2, [r3, #0]

	Serial.println("Game reset...");
	delay(100);
	// variables init
	setActiveLightSet(lights);
	_keyPressed = NO_KEY;
    33ac:	2400      	movs	r4, #0
    33ae:	f885 4277 	strb.w	r4, [r5, #631]	; 0x277
	_keyRepeat = false;
    33b2:	f885 4278 	strb.w	r4, [r5, #632]	; 0x278
	//_mode = NORMAL_MODE;
	//_gameOver = true;
	_players = 0;
    33b6:	f885 4508 	strb.w	r4, [r5, #1288]	; 0x508
	credits = 0; // TODO
    33ba:	f885 436c 	strb.w	r4, [r5, #876]	; 0x36c

	for (i = 0; i < 3; i++) coins[i] = 0; // coins reset
    33be:	f885 4373 	strb.w	r4, [r5, #883]	; 0x373
    33c2:	f885 4374 	strb.w	r4, [r5, #884]	; 0x374
    33c6:	f885 4375 	strb.w	r4, [r5, #885]	; 0x375
	for (i = 0; i < MAX_PLAYERS; i++) player[i].score = 0; // scores reset
    33ca:	f8c5 433c 	str.w	r4, [r5, #828]	; 0x33c
    33ce:	f8c5 4348 	str.w	r4, [r5, #840]	; 0x348
    33d2:	f8c5 4354 	str.w	r4, [r5, #852]	; 0x354
    33d6:	f8c5 4360 	str.w	r4, [r5, #864]	; 0x360
	//for (i = 0; i < TOP_SCORES; i++) {
	//	topScore[i].playerName = String("ABC");
	//	topScore[i].scoreString = String("00000000");
	//}
	for (i = 0; i < 3; i++)	lamps->setProtection(i, true); // special lamps
    33da:	2201      	movs	r2, #1
    33dc:	b2a1      	uxth	r1, r4
    33de:	6868      	ldr	r0, [r5, #4]
    33e0:	4414      	add	r4, r2
    33e2:	f7ff f829 	bl	2438 <BitMappedSet::setProtection(unsigned short, bool)>
    33e6:	2c03      	cmp	r4, #3
    33e8:	d1f7      	bne.n	33da <Game::reset()+0x4e>
    33ea:	2115      	movs	r1, #21
    33ec:	4810      	ldr	r0, [pc, #64]	; (3430 <Game::reset()+0xa4>)
    33ee:	f006 f991 	bl	9714 <usb_serial_write>
    33f2:	480d      	ldr	r0, [pc, #52]	; (3428 <Game::reset()+0x9c>)
    33f4:	f006 fbcc 	bl	9b90 <Print::println()>
														   
	//loadStats();
	Serial.println("- loading settings...");
	delay(100);
    33f8:	2064      	movs	r0, #100	; 0x64
    33fa:	f005 f971 	bl	86e0 <delay>
	//_3balls = (getBallsCount() == 3) ? true : false;
	_3balls = true; // TODO
    33fe:	2301      	movs	r3, #1
    3400:	f885 3509 	strb.w	r3, [r5, #1289]	; 0x509
	loadCoinsPerCredits();
    3404:	4628      	mov	r0, r5
    3406:	f7ff ff99 	bl	333c <Game::loadCoinsPerCredits()>
	loadAwardScoreLevels();
    340a:	4628      	mov	r0, r5
    340c:	f7ff ff84 	bl	3318 <Game::loadAwardScoreLevels()>
	loadHighScores();
    3410:	4628      	mov	r0, r5
    3412:	f7ff ff07 	bl	3224 <Game::loadHighScores()>
	//defaultBallsPerPlay = (getSettingSwitch(25) == 1) ? 3 : 5;
	
	//setPeriod(RELAY_Q_SOL, true); // game over
	setPinballMode(SHOW_MODE);
    3416:	4628      	mov	r0, r5
    3418:	2100      	movs	r1, #0
}
    341a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	loadAwardScoreLevels();
	loadHighScores();
	//defaultBallsPerPlay = (getSettingSwitch(25) == 1) ? 3 : 5;
	
	//setPeriod(RELAY_Q_SOL, true); // game over
	setPinballMode(SHOW_MODE);
    341e:	f7ff bdbd 	b.w	2f9c <Game::setPinballMode(pinballMode)>
    3422:	bf00      	nop
    3424:	0000fe60 	.word	0x0000fe60
    3428:	1fff876c 	.word	0x1fff876c
    342c:	1fff92c8 	.word	0x1fff92c8
    3430:	0000fe70 	.word	0x0000fe70

00003434 <Game::Game()>:
#include "LightSet.h"
#include "msg.h"

//using namespace nvData;

Game::Game() {
    3434:	b570      	push	{r4, r5, r6, lr}
    3436:	4604      	mov	r4, r0
    3438:	b086      	sub	sp, #24
    343a:	f001 f927 	bl	468c <Sys80b::Sys80b()>

// Abstract class to be implemented by any
// object with a timer task function implementation.
class TimerTaskExecutor {
public:
    TimerTaskExecutor() {
    343e:	4bb0      	ldr	r3, [pc, #704]	; (3700 <Game::Game()+0x2cc>)
    3440:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
    3444:	2119      	movs	r1, #25
    3446:	48af      	ldr	r0, [pc, #700]	; (3704 <Game::Game()+0x2d0>)
    3448:	f006 f964 	bl	9714 <usb_serial_write>
    344c:	48ae      	ldr	r0, [pc, #696]	; (3708 <Game::Game()+0x2d4>)
    344e:	f006 fb9f 	bl	9b90 <Print::println()>
        Serial.println("TimerTaskExecutor init...");
        delay(100);
    3452:	2064      	movs	r0, #100	; 0x64
    3454:	f005 f944 	bl	86e0 <delay>
    3458:	4bac      	ldr	r3, [pc, #688]	; (370c <Game::Game()+0x2d8>)
    345a:	6023      	str	r3, [r4, #0]
    345c:	332c      	adds	r3, #44	; 0x2c
    345e:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
    3462:	f504 7523 	add.w	r5, r4, #652	; 0x28c
    3466:	f504 7650 	add.w	r6, r4, #832	; 0x340
enum pinballMode { SHOW_MODE, GAME_MODE, TEST_MODE, BOOKKEEP_MODE };
//enum coinChute { LEFT_CHUTE, CENTER_CHUTE, RIGHT_CHUTE };
//enum gameStage { GAME_INIT, GAME_WAIT_BALLS_IN_HOLE, GAME_NEWBALL, GAME_BONUS_AWARD, GAME_TILT, GAME_END };

// top score entry
struct TopPlay {
    346a:	2100      	movs	r1, #0
    346c:	4628      	mov	r0, r5
    346e:	f006 fc65 	bl	9d3c <String::String(char const*)>
    3472:	f105 0010 	add.w	r0, r5, #16
    3476:	2100      	movs	r1, #0
    3478:	3524      	adds	r5, #36	; 0x24
    347a:	f006 fc5f 	bl	9d3c <String::String(char const*)>
    347e:	42ae      	cmp	r6, r5
    3480:	d1f3      	bne.n	346a <Game::Game()+0x36>
    3482:	2230      	movs	r2, #48	; 0x30
    3484:	2100      	movs	r1, #0
    3486:	f504 704f 	add.w	r0, r4, #828	; 0x33c
    348a:	f008 f8d1 	bl	b630 <memset>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    348e:	f504 7567 	add.w	r5, r4, #924	; 0x39c
    3492:	2306      	movs	r3, #6
    3494:	f884 3398 	strb.w	r3, [r4, #920]	; 0x398
		SENSOR(rightCoin, RIGHTCOIN_SW, "Right coin");
		SENSOR(centerCoin, CENTERCOIN_SW, "Right coin");
		SENSOR(replay, REPLAY_SW, "Replay button");
		SENSOR(tilt, REPLAY_SW, "Tilt (cabinet)");
		// constructor
		StdSw(Sys80b* sys) : _sys(sys) {
    3498:	f8c4 4390 	str.w	r4, [r4, #912]	; 0x390
    349c:	f8c4 4394 	str.w	r4, [r4, #916]	; 0x394
    34a0:	4628      	mov	r0, r5
    34a2:	2100      	movs	r1, #0
    34a4:	f006 fc4a 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    34a8:	a802      	add	r0, sp, #8
    34aa:	4999      	ldr	r1, [pc, #612]	; (3710 <Game::Game()+0x2dc>)
    34ac:	f006 fc5a 	bl	9d64 <String::String(__FlashStringHelper const*)>
    34b0:	a902      	add	r1, sp, #8
    34b2:	4628      	mov	r0, r5
    34b4:	f006 fcd4 	bl	9e60 <String::operator=(String&&)>
    34b8:	a802      	add	r0, sp, #8
    34ba:	f006 fbff 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    34be:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    34c2:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
    34c6:	f504 756d 	add.w	r5, r4, #948	; 0x3b4
    34ca:	2307      	movs	r3, #7
    34cc:	f884 33b0 	strb.w	r3, [r4, #944]	; 0x3b0
    34d0:	4628      	mov	r0, r5
    34d2:	2100      	movs	r1, #0
    34d4:	f006 fc32 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    34d8:	a802      	add	r0, sp, #8
    34da:	498e      	ldr	r1, [pc, #568]	; (3714 <Game::Game()+0x2e0>)
    34dc:	f006 fc42 	bl	9d64 <String::String(__FlashStringHelper const*)>
    34e0:	a902      	add	r1, sp, #8
    34e2:	4628      	mov	r0, r5
    34e4:	f006 fcbc 	bl	9e60 <String::operator=(String&&)>
    34e8:	a802      	add	r0, sp, #8
    34ea:	f006 fbe7 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    34ee:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    34f2:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
    34f6:	f504 7573 	add.w	r5, r4, #972	; 0x3cc
    34fa:	2310      	movs	r3, #16
    34fc:	f884 33c8 	strb.w	r3, [r4, #968]	; 0x3c8
    3500:	4628      	mov	r0, r5
    3502:	2100      	movs	r1, #0
    3504:	f006 fc1a 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    3508:	a802      	add	r0, sp, #8
    350a:	4983      	ldr	r1, [pc, #524]	; (3718 <Game::Game()+0x2e4>)
    350c:	f006 fc2a 	bl	9d64 <String::String(__FlashStringHelper const*)>
    3510:	a902      	add	r1, sp, #8
    3512:	4628      	mov	r0, r5
    3514:	f006 fca4 	bl	9e60 <String::operator=(String&&)>
    3518:	a802      	add	r0, sp, #8
    351a:	f006 fbcf 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    351e:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    3522:	f8c4 33dc 	str.w	r3, [r4, #988]	; 0x3dc
    3526:	f504 7579 	add.w	r5, r4, #996	; 0x3e4
    352a:	2311      	movs	r3, #17
    352c:	f884 33e0 	strb.w	r3, [r4, #992]	; 0x3e0
    3530:	4628      	mov	r0, r5
    3532:	2100      	movs	r1, #0
    3534:	f006 fc02 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    3538:	a802      	add	r0, sp, #8
    353a:	4978      	ldr	r1, [pc, #480]	; (371c <Game::Game()+0x2e8>)
    353c:	f006 fc12 	bl	9d64 <String::String(__FlashStringHelper const*)>
    3540:	a902      	add	r1, sp, #8
    3542:	4628      	mov	r0, r5
    3544:	f006 fc8c 	bl	9e60 <String::operator=(String&&)>
    3548:	a802      	add	r0, sp, #8
    354a:	f006 fbb7 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    354e:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    3552:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
    3556:	f504 757f 	add.w	r5, r4, #1020	; 0x3fc
    355a:	231b      	movs	r3, #27
    355c:	f884 33f8 	strb.w	r3, [r4, #1016]	; 0x3f8
    3560:	4628      	mov	r0, r5
    3562:	2100      	movs	r1, #0
    3564:	f006 fbea 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    3568:	a802      	add	r0, sp, #8
    356a:	496d      	ldr	r1, [pc, #436]	; (3720 <Game::Game()+0x2ec>)
    356c:	f006 fbfa 	bl	9d64 <String::String(__FlashStringHelper const*)>
    3570:	a902      	add	r1, sp, #8
    3572:	4628      	mov	r0, r5
    3574:	f006 fc74 	bl	9e60 <String::operator=(String&&)>
    3578:	a802      	add	r0, sp, #8
    357a:	f006 fb9f 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    357e:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    3582:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    3586:	f204 4514 	addw	r5, r4, #1044	; 0x414
    358a:	2325      	movs	r3, #37	; 0x25
    358c:	f884 3410 	strb.w	r3, [r4, #1040]	; 0x410
    3590:	4628      	mov	r0, r5
    3592:	2100      	movs	r1, #0
    3594:	f006 fbd2 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    3598:	a802      	add	r0, sp, #8
    359a:	4961      	ldr	r1, [pc, #388]	; (3720 <Game::Game()+0x2ec>)
    359c:	f006 fbe2 	bl	9d64 <String::String(__FlashStringHelper const*)>
    35a0:	a902      	add	r1, sp, #8
    35a2:	4628      	mov	r0, r5
    35a4:	f006 fc5c 	bl	9e60 <String::operator=(String&&)>
    35a8:	a802      	add	r0, sp, #8
    35aa:	f006 fb87 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    35ae:	f204 452c 	addw	r5, r4, #1068	; 0x42c
    35b2:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    35b6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    35ba:	262f      	movs	r6, #47	; 0x2f
    35bc:	f884 6428 	strb.w	r6, [r4, #1064]	; 0x428
    35c0:	4628      	mov	r0, r5
    35c2:	2100      	movs	r1, #0
    35c4:	f006 fbba 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    35c8:	a802      	add	r0, sp, #8
    35ca:	4956      	ldr	r1, [pc, #344]	; (3724 <Game::Game()+0x2f0>)
    35cc:	f006 fbca 	bl	9d64 <String::String(__FlashStringHelper const*)>
    35d0:	a902      	add	r1, sp, #8
    35d2:	4628      	mov	r0, r5
    35d4:	f006 fc44 	bl	9e60 <String::operator=(String&&)>
    35d8:	a802      	add	r0, sp, #8
    35da:	f006 fb6f 	bl	9cbc <String::~String()>
	String descr;
	Sys80b_Sensor(Sys80b* refSystem, byte n, const char* descrText) : _sys(refSystem), num(n) {
		descr = String(descrText);
	};
	Sys80b_Sensor(Sys80b* refSystem, byte n, const __FlashStringHelper* descrText) :
		_sys(refSystem), num(n) {
    35de:	f204 4544 	addw	r5, r4, #1092	; 0x444
    35e2:	f8d4 3390 	ldr.w	r3, [r4, #912]	; 0x390
    35e6:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    35ea:	f884 6440 	strb.w	r6, [r4, #1088]	; 0x440
    35ee:	4628      	mov	r0, r5
    35f0:	2100      	movs	r1, #0
    35f2:	f006 fba3 	bl	9d3c <String::String(char const*)>
		descr = String(descrText);
    35f6:	a802      	add	r0, sp, #8
    35f8:	494b      	ldr	r1, [pc, #300]	; (3728 <Game::Game()+0x2f4>)
    35fa:	f006 fbb3 	bl	9d64 <String::String(__FlashStringHelper const*)>
    35fe:	a902      	add	r1, sp, #8
    3600:	4628      	mov	r0, r5
    3602:	f006 fc2d 	bl	9e60 <String::operator=(String&&)>
    3606:	a802      	add	r0, sp, #8
    3608:	f006 fb58 	bl	9cbc <String::~String()>
    360c:	210d      	movs	r1, #13
    360e:	4847      	ldr	r0, [pc, #284]	; (372c <Game::Game()+0x2f8>)
    3610:	f006 f880 	bl	9714 <usb_serial_write>
    3614:	483c      	ldr	r0, [pc, #240]	; (3708 <Game::Game()+0x2d4>)
    3616:	f006 fabb 	bl	9b90 <Print::println()>
			Serial.println("StdSw init...");
			delay(500);
    361a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    361e:	f005 f85f 	bl	86e0 <delay>
		ACTUATOR(knocker, SOLENOIDS, KNOCKER_SOL, "knocker");
		ACTUATOR(outhole, SOLENOIDS, OUTHOLE_SOL, "outhole");
		ACTUATOR(relay_Q, LAMPS, Q_LAMP, "Q relay");
		ACTUATOR(relay_T, LAMPS, T_LAMP, "T relay");
		// constructor
		StdAct(Sys80b* sys) : _sys(sys) {
    3622:	2301      	movs	r3, #1
    3624:	4a42      	ldr	r2, [pc, #264]	; (3730 <Game::Game()+0x2fc>)
    3626:	f8c4 4454 	str.w	r4, [r4, #1108]	; 0x454
    362a:	4621      	mov	r1, r4
    362c:	9200      	str	r2, [sp, #0]
    362e:	f504 608b 	add.w	r0, r4, #1112	; 0x458
    3632:	461a      	mov	r2, r3
    3634:	f001 faba 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    3638:	4b3e      	ldr	r3, [pc, #248]	; (3734 <Game::Game()+0x300>)
    363a:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
    363e:	9300      	str	r3, [sp, #0]
    3640:	2201      	movs	r2, #1
    3642:	2308      	movs	r3, #8
    3644:	f504 608e 	add.w	r0, r4, #1136	; 0x470
    3648:	f001 fab0 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    364c:	4b3a      	ldr	r3, [pc, #232]	; (3738 <Game::Game()+0x304>)
    364e:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
    3652:	9300      	str	r3, [sp, #0]
    3654:	2201      	movs	r2, #1
    3656:	2309      	movs	r3, #9
    3658:	f504 6091 	add.w	r0, r4, #1160	; 0x488
    365c:	f001 faa6 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    3660:	4b36      	ldr	r3, [pc, #216]	; (373c <Game::Game()+0x308>)
    3662:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
    3666:	9300      	str	r3, [sp, #0]
    3668:	2203      	movs	r2, #3
    366a:	2300      	movs	r3, #0
    366c:	f504 6094 	add.w	r0, r4, #1184	; 0x4a0
    3670:	f001 fa9c 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    3674:	4b32      	ldr	r3, [pc, #200]	; (3740 <Game::Game()+0x30c>)
    3676:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
    367a:	9300      	str	r3, [sp, #0]
    367c:	2203      	movs	r2, #3
    367e:	2301      	movs	r3, #1
    3680:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
    3684:	f001 fa92 	bl	4bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>
    3688:	210e      	movs	r1, #14
    368a:	482e      	ldr	r0, [pc, #184]	; (3744 <Game::Game()+0x310>)
    368c:	f006 f842 	bl	9714 <usb_serial_write>
    3690:	481d      	ldr	r0, [pc, #116]	; (3708 <Game::Game()+0x2d4>)
    3692:	f006 fa7d 	bl	9b90 <Print::println()>
			Serial.println("StdAct init...");
			delay(500);
    3696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    369a:	f005 f821 	bl	86e0 <delay>
    369e:	f204 45f4 	addw	r5, r4, #1268	; 0x4f4
    36a2:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
    36a6:	f001 fd5b 	bl	5160 <TimerSet::TimerSet()>
    36aa:	4628      	mov	r0, r5
    36ac:	2100      	movs	r1, #0
    36ae:	f006 fb45 	bl	9d3c <String::String(char const*)>
    36b2:	210c      	movs	r1, #12
    36b4:	4824      	ldr	r0, [pc, #144]	; (3748 <Game::Game()+0x314>)
    36b6:	f006 f82d 	bl	9714 <usb_serial_write>
    36ba:	4813      	ldr	r0, [pc, #76]	; (3708 <Game::Game()+0x2d4>)
    36bc:	f006 fa68 	bl	9b90 <Print::println()>
	Serial.println("Game init...");
	delay(100);
    36c0:	2064      	movs	r0, #100	; 0x64
    36c2:	f005 f80d 	bl	86e0 <delay>
	lights = new LightSet(LAMPS_COUNT);
    36c6:	2008      	movs	r0, #8
    36c8:	f006 fa1c 	bl	9b04 <operator new(unsigned int)>
    36cc:	2130      	movs	r1, #48	; 0x30
    36ce:	4606      	mov	r6, r0
    36d0:	f000 fb54 	bl	3d7c <LightSet::LightSet(int)>
    36d4:	f8c4 638c 	str.w	r6, [r4, #908]	; 0x38c
	_gameName = String("<no_name>");
    36d8:	a802      	add	r0, sp, #8
    36da:	491c      	ldr	r1, [pc, #112]	; (374c <Game::Game()+0x318>)
    36dc:	f006 fb2e 	bl	9d3c <String::String(char const*)>
    36e0:	a902      	add	r1, sp, #8
    36e2:	4628      	mov	r0, r5
    36e4:	f006 fbbc 	bl	9e60 <String::operator=(String&&)>
    36e8:	a802      	add	r0, sp, #8
    36ea:	f006 fae7 	bl	9cbc <String::~String()>
	_gameNum = 0;
    36ee:	2300      	movs	r3, #0
	reset();
    36f0:	4620      	mov	r0, r4
Game::Game() {
	Serial.println("Game init...");
	delay(100);
	lights = new LightSet(LAMPS_COUNT);
	_gameName = String("<no_name>");
	_gameNum = 0;
    36f2:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
	reset();
    36f6:	f7ff fe49 	bl	338c <Game::reset()>
}
    36fa:	4620      	mov	r0, r4
    36fc:	b006      	add	sp, #24
    36fe:	bd70      	pop	{r4, r5, r6, pc}
    3700:	0000fd90 	.word	0x0000fd90
    3704:	0000fe88 	.word	0x0000fe88
    3708:	1fff876c 	.word	0x1fff876c
    370c:	0000fdc0 	.word	0x0000fdc0
    3710:	0000fea4 	.word	0x0000fea4
    3714:	0000feb8 	.word	0x0000feb8
    3718:	0000fec4 	.word	0x0000fec4
    371c:	0000fedc 	.word	0x0000fedc
    3720:	0000fee8 	.word	0x0000fee8
    3724:	0000fef4 	.word	0x0000fef4
    3728:	0000ff04 	.word	0x0000ff04
    372c:	0000ff14 	.word	0x0000ff14
    3730:	0000faa8 	.word	0x0000faa8
    3734:	0000f890 	.word	0x0000f890
    3738:	0000f898 	.word	0x0000f898
    373c:	0000ff24 	.word	0x0000ff24
    3740:	0000ff2c 	.word	0x0000ff2c
    3744:	0000ff34 	.word	0x0000ff34
    3748:	0000ff44 	.word	0x0000ff44
    374c:	0000ff54 	.word	0x0000ff54

00003750 <Game::addCredits(unsigned char)>:
		addCredits(ch_credits[cch]);
		coins[cch] = 0;
	}
}

void Game::addCredits(byte increment) {
    3750:	b538      	push	{r3, r4, r5, lr}
    3752:	4604      	mov	r4, r0
    3754:	460d      	mov	r5, r1
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    3756:	f8d0 0280 	ldr.w	r0, [r0, #640]	; 0x280
    375a:	2101      	movs	r1, #1
    375c:	f002 f824 	bl	57a8 <Board_Sys80b::getSettingByte(unsigned char)>
	//prevcr = credits;
	credits += increment;
    3760:	f894 136c 	ldrb.w	r1, [r4, #876]	; 0x36c
	}
}

void Game::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    3764:	4a05      	ldr	r2, [pc, #20]	; (377c <Game::addCredits(unsigned char)+0x2c>)
    3766:	f3c0 1087 	ubfx	r0, r0, #6, #8
	//prevcr = credits;
	credits += increment;
    376a:	186b      	adds	r3, r5, r1
	}
}

void Game::addCredits(byte increment) {
	//byte prevcr;
	byte  maxcr = max_credits[(hw->getSettingByte(1) >> 6) & 3];
    376c:	5c12      	ldrb	r2, [r2, r0]
	//prevcr = credits;
	credits += increment;
    376e:	b2d9      	uxtb	r1, r3
    3770:	4291      	cmp	r1, r2
    3772:	bf28      	it	cs
    3774:	4611      	movcs	r1, r2
    3776:	f884 136c 	strb.w	r1, [r4, #876]	; 0x36c
    377a:	bd38      	pop	{r3, r4, r5, pc}
    377c:	0000fdf8 	.word	0x0000fdf8

00003780 <Game::addScore(unsigned long)>:
	player[playerOn].ballsLeft++;
	activateSolenoid(KNOCKER_SOL, 250); // knocker
	//stdAct.knocker.activate(250);
}

void Game::addScore(uint32_t sc) {
    3780:	b570      	push	{r4, r5, r6, lr}
	byte lev;

	player[playerOn].score += sc;
    3782:	f890 3377 	ldrb.w	r3, [r0, #887]	; 0x377
    3786:	005d      	lsls	r5, r3, #1
    3788:	18ea      	adds	r2, r5, r3
    378a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	player[playerOn].ballsLeft++;
	activateSolenoid(KNOCKER_SOL, 250); // knocker
	//stdAct.knocker.activate(250);
}

void Game::addScore(uint32_t sc) {
    378e:	4604      	mov	r4, r0
	byte lev;

	player[playerOn].score += sc;
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
    3790:	f892 6345 	ldrb.w	r6, [r2, #837]	; 0x345
}

void Game::addScore(uint32_t sc) {
	byte lev;

	player[playerOn].score += sc;
    3794:	f8d2 033c 	ldr.w	r0, [r2, #828]	; 0x33c
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
    3798:	2e02      	cmp	r6, #2
}

void Game::addScore(uint32_t sc) {
	byte lev;

	player[playerOn].score += sc;
    379a:	4401      	add	r1, r0
    379c:	f8c2 133c 	str.w	r1, [r2, #828]	; 0x33c
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
    37a0:	d805      	bhi.n	37ae <Game::addScore(unsigned long)+0x2e>
    37a2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    37a6:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
    37aa:	4281      	cmp	r1, r0
    37ac:	d227      	bcs.n	37fe <Game::addScore(unsigned long)+0x7e>
			addCredits(1);
			setSolenoid(KNOCKER_SOL, true); // kicker
		}
	}
	// update for top score
	if (!player[playerOn].topScorer && player[playerOn].score >= topScore[0].score) {
    37ae:	442b      	add	r3, r5
    37b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    37b4:	f893 2346 	ldrb.w	r2, [r3, #838]	; 0x346
    37b8:	b92a      	cbnz	r2, 37c6 <Game::addScore(unsigned long)+0x46>
    37ba:	f8d3 133c 	ldr.w	r1, [r3, #828]	; 0x33c
    37be:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    37c2:	4291      	cmp	r1, r2
    37c4:	d200      	bcs.n	37c8 <Game::addScore(unsigned long)+0x48>
    37c6:	bd70      	pop	{r4, r5, r6, pc}
		player[playerOn].topScorer = true;
    37c8:	2601      	movs	r6, #1
    37ca:	f883 6346 	strb.w	r6, [r3, #838]	; 0x346
		addCredits(hw->getSettingSwitch(23) * 2 + hw->getSettingSwitch(24));
    37ce:	2117      	movs	r1, #23
    37d0:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    37d4:	f002 f80e 	bl	57f4 <Board_Sys80b::getSettingSwitch(unsigned char)>
    37d8:	2118      	movs	r1, #24
    37da:	4605      	mov	r5, r0
    37dc:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    37e0:	f002 f808 	bl	57f4 <Board_Sys80b::getSettingSwitch(unsigned char)>
    37e4:	eb00 0145 	add.w	r1, r0, r5, lsl #1
    37e8:	b2c9      	uxtb	r1, r1
    37ea:	4620      	mov	r0, r4
    37ec:	f7ff ffb0 	bl	3750 <Game::addCredits(unsigned char)>
		setSolenoid(KNOCKER_SOL, true); // kicker
    37f0:	4632      	mov	r2, r6
    37f2:	4620      	mov	r0, r4
    37f4:	2108      	movs	r1, #8
	}
}
    37f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}
	// update for top score
	if (!player[playerOn].topScorer && player[playerOn].score >= topScore[0].score) {
		player[playerOn].topScorer = true;
		addCredits(hw->getSettingSwitch(23) * 2 + hw->getSettingSwitch(24));
		setSolenoid(KNOCKER_SOL, true); // kicker
    37fa:	f000 bfe1 	b.w	47c0 <Sys80b::setSolenoid(unsigned char, bool)>

	player[playerOn].score += sc;
	// update for Score Level award
	lev = player[playerOn].awardLevelReached;
	if (lev < 3 && player[playerOn].score >= awardLevelScore[lev]) {
		player[playerOn].awardLevelReached++;
    37fe:	3601      	adds	r6, #1
    3800:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
		if (hw->getSettingSwitch(29) == 1) addExtraBall();
    3804:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    3808:	211d      	movs	r1, #29
    380a:	f001 fff3 	bl	57f4 <Board_Sys80b::getSettingSwitch(unsigned char)>
    380e:	2801      	cmp	r0, #1
    3810:	d00c      	beq.n	382c <Game::addScore(unsigned long)+0xac>
		else {
			addCredits(1);
    3812:	2101      	movs	r1, #1
    3814:	4620      	mov	r0, r4
    3816:	f7ff ff9b 	bl	3750 <Game::addCredits(unsigned char)>
			setSolenoid(KNOCKER_SOL, true); // kicker
    381a:	2201      	movs	r2, #1
    381c:	2108      	movs	r1, #8
    381e:	4620      	mov	r0, r4
    3820:	f000 ffce 	bl	47c0 <Sys80b::setSolenoid(unsigned char, bool)>
    3824:	f894 3377 	ldrb.w	r3, [r4, #887]	; 0x377
    3828:	005d      	lsls	r5, r3, #1
    382a:	e7c0      	b.n	37ae <Game::addScore(unsigned long)+0x2e>
//	displayScoresAndCredits();
//	//setSound(_);
//}

void Game::addExtraBall() {
	player[playerOn].ballsLeft++;
    382c:	f894 2377 	ldrb.w	r2, [r4, #887]	; 0x377
    3830:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3834:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    3838:	2300      	movs	r3, #0
//	displayScoresAndCredits();
//	//setSound(_);
//}

void Game::addExtraBall() {
	player[playerOn].ballsLeft++;
    383a:	f892 1344 	ldrb.w	r1, [r2, #836]	; 0x344
    383e:	3101      	adds	r1, #1
    3840:	f882 1344 	strb.w	r1, [r2, #836]	; 0x344
	activateSolenoid(KNOCKER_SOL, 250); // knocker
    3844:	4620      	mov	r0, r4
    3846:	22fa      	movs	r2, #250	; 0xfa
    3848:	2108      	movs	r1, #8
    384a:	f000 ffcf 	bl	47ec <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>
    384e:	f894 3377 	ldrb.w	r3, [r4, #887]	; 0x377
    3852:	005d      	lsls	r5, r3, #1
    3854:	e7ab      	b.n	37ae <Game::addScore(unsigned long)+0x2e>
    3856:	bf00      	nop

00003858 <Game::addBonus(unsigned long)>:
		setSolenoid(KNOCKER_SOL, true); // kicker
	}
}

void Game::addBonus(uint32_t sc) {
	player[playerOn].bonus += sc;
    3858:	f890 3377 	ldrb.w	r3, [r0, #887]	; 0x377
    385c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3860:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3864:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
    3868:	4419      	add	r1, r3
    386a:	f8c0 1340 	str.w	r1, [r0, #832]	; 0x340
    386e:	4770      	bx	lr

00003870 <Game::setLight(unsigned char, lightState, unsigned short)>:

LightSet* Game::getActiveLightSet() {
	return LightGroup::activeLightSet;
}

void Game::setLight(byte n, lightState s, uint16_t blinkPeriod) {
    3870:	b538      	push	{r3, r4, r5, lr}
	LightGroup::activeLightSet->getLight(n)->set(s, blinkPeriod);
    3872:	4806      	ldr	r0, [pc, #24]	; (388c <Game::setLight(unsigned char, lightState, unsigned short)+0x1c>)

LightSet* Game::getActiveLightSet() {
	return LightGroup::activeLightSet;
}

void Game::setLight(byte n, lightState s, uint16_t blinkPeriod) {
    3874:	4614      	mov	r4, r2
    3876:	461d      	mov	r5, r3
	LightGroup::activeLightSet->getLight(n)->set(s, blinkPeriod);
    3878:	6800      	ldr	r0, [r0, #0]
    387a:	f000 fac7 	bl	3e0c <LightSet::getLight(int)>
    387e:	462a      	mov	r2, r5
    3880:	4621      	mov	r1, r4
}
    3882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
LightSet* Game::getActiveLightSet() {
	return LightGroup::activeLightSet;
}

void Game::setLight(byte n, lightState s, uint16_t blinkPeriod) {
	LightGroup::activeLightSet->getLight(n)->set(s, blinkPeriod);
    3886:	f000 b891 	b.w	39ac <Light::set(lightState, unsigned short)>
    388a:	bf00      	nop
    388c:	1fff92c8 	.word	0x1fff92c8

00003890 <Game::isLightActive(unsigned char)>:

bool Game::isLightOn(byte n) {
	return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
}

bool Game::isLightActive(byte n) {
    3890:	b508      	push	{r3, lr}
	return LightGroup::activeLightSet->getLight(n)->isActive();
    3892:	4b04      	ldr	r3, [pc, #16]	; (38a4 <Game::isLightActive(unsigned char)+0x14>)
    3894:	6818      	ldr	r0, [r3, #0]
    3896:	f000 fab9 	bl	3e0c <LightSet::getLight(int)>
}
    389a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool Game::isLightOn(byte n) {
	return (LightGroup::activeLightSet->getLight(n)->state == ON_L);
}

bool Game::isLightActive(byte n) {
	return LightGroup::activeLightSet->getLight(n)->isActive();
    389e:	f000 b8d1 	b.w	3a44 <Light::isActive()>
    38a2:	bf00      	nop
    38a4:	1fff92c8 	.word	0x1fff92c8

000038a8 <Game::tilt()>:

void Game::switchOffAllLights() {
	LightGroup::activeLightSet->switchOffAllLights();
}

void Game::tilt() {
    38a8:	4770      	bx	lr
    38aa:	bf00      	nop

000038ac <Game::millisRoutine(unsigned long&)>:
//	_activeLightSet->renderToLamps(lamps, cl, cl + 3);
//		
//	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
//}

void Game::millisRoutine(uint32_t& ms) {
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	460d      	mov	r5, r1

	tmr.update();
	
	// updates all non-steady mode lights state
	/* if (currentLampGroup == 0) */ LightGroup::activeLightSet->update(ms);
    38b0:	4e0a      	ldr	r6, [pc, #40]	; (38dc <Game::millisRoutine(unsigned long&)+0x30>)
//	_activeLightSet->renderToLamps(lamps, cl, cl + 3);
//		
//	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
//}

void Game::millisRoutine(uint32_t& ms) {
    38b2:	4604      	mov	r4, r0

	tmr.update();
    38b4:	f500 609a 	add.w	r0, r0, #1232	; 0x4d0
    38b8:	f001 fcd4 	bl	5264 <TimerSet::update()>
	
	// updates all non-steady mode lights state
	/* if (currentLampGroup == 0) */ LightGroup::activeLightSet->update(ms);
    38bc:	6829      	ldr	r1, [r5, #0]
    38be:	6830      	ldr	r0, [r6, #0]
    38c0:	f000 faf0 	bl	3ea4 <LightSet::update(unsigned long)>
	
	// PERCHE' NON FUNZIONA ?!
	//byte cl = currentLampGroup << 2;
	//LightGroup::activeLightSet->renderToLamps(lamps, cl, cl + 3);
	LightGroup::activeLightSet->renderToLamps(lamps);
    38c4:	2300      	movs	r3, #0
    38c6:	6830      	ldr	r0, [r6, #0]
    38c8:	6861      	ldr	r1, [r4, #4]
    38ca:	461a      	mov	r2, r3
    38cc:	f000 fabe 	bl	3e4c <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)>

	//display.update(ms);
	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
    38d0:	4629      	mov	r1, r5
    38d2:	4620      	mov	r0, r4
}
    38d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//byte cl = currentLampGroup << 2;
	//LightGroup::activeLightSet->renderToLamps(lamps, cl, cl + 3);
	LightGroup::activeLightSet->renderToLamps(lamps);

	//display.update(ms);
	Sys80b::_millisRoutine(ms); // may call onSwitchEvent(..)
    38d8:	f001 b90e 	b.w	4af8 <Sys80b::_millisRoutine(unsigned long&)>
    38dc:	1fff92c8 	.word	0x1fff92c8

000038e0 <_GLOBAL__sub_I__ZN4GameC2Ev>:
}
    38e0:	b510      	push	{r4, lr}
protected:
    bool _createSettingsFile(uint16_t size);
    void _err();
};

static NVData_class NVData;
    38e2:	4c05      	ldr	r4, [pc, #20]	; (38f8 <_GLOBAL__sub_I__ZN4GameC2Ev+0x18>)
    38e4:	4620      	mov	r0, r4
    38e6:	f002 f857 	bl	5998 <NVData_class::NVData_class()>
    38ea:	4620      	mov	r0, r4
    38ec:	4a03      	ldr	r2, [pc, #12]	; (38fc <_GLOBAL__sub_I__ZN4GameC2Ev+0x1c>)
    38ee:	4904      	ldr	r1, [pc, #16]	; (3900 <_GLOBAL__sub_I__ZN4GameC2Ev+0x20>)
    38f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38f4:	f007 baee 	b.w	aed4 <__aeabi_atexit>
    38f8:	1fff929c 	.word	0x1fff929c
    38fc:	1fff8720 	.word	0x1fff8720
    3900:	00002f65 	.word	0x00002f65

00003904 <Light::Light()>:

#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
    3904:	2200      	movs	r2, #0
*/

#include "Light.h"

// constructor with default property values
Light::Light() {
    3906:	b410      	push	{r4}
	on = false;
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
    3908:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
	blinkDutyCycle = 50;
    390c:	2132      	movs	r1, #50	; 0x32
// constructor with default property values
Light::Light() {
	on = false;
	impulse = false;
	state = OFF_L;
	blinkPeriod = 500;
    390e:	8044      	strh	r4, [r0, #2]
	blinkDutyCycle = 50;
    3910:	7101      	strb	r1, [r0, #4]

#include "Light.h"

// constructor with default property values
Light::Light() {
	on = false;
    3912:	7002      	strb	r2, [r0, #0]
	impulse = false;
    3914:	7382      	strb	r2, [r0, #14]
	state = OFF_L;
    3916:	7042      	strb	r2, [r0, #1]
	blinkPeriod = 500;
	blinkDutyCycle = 50;
	activePeriod = 0;
    3918:	8182      	strh	r2, [r0, #12]
	//updated = true;
	//_changed = false;
}
    391a:	bc10      	pop	{r4}
    391c:	4770      	bx	lr
    391e:	bf00      	nop

00003920 <Light::copy(Light*)>:
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
	on = from->on;
	state = from->state;
    3920:	784a      	ldrb	r2, [r1, #1]
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
    3922:	884b      	ldrh	r3, [r1, #2]
	activationTime = from.activationTime;
	activePeriod = from.activePeriod;
}

// convenient funcion for copying a Light state into another
void Light::copy(Light *from) {
    3924:	b470      	push	{r4, r5, r6}
	on = from->on;
    3926:	780c      	ldrb	r4, [r1, #0]
    3928:	7004      	strb	r4, [r0, #0]
	state = from->state;
    392a:	7042      	strb	r2, [r0, #1]
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
    392c:	8043      	strh	r3, [r0, #2]
	blinkDutyCycle = from->blinkDutyCycle;
    392e:	790b      	ldrb	r3, [r1, #4]
    3930:	7103      	strb	r3, [r0, #4]
	activationTime = from->activationTime;
    3932:	688e      	ldr	r6, [r1, #8]
	activePeriod = from->activePeriod;
    3934:	898d      	ldrh	r5, [r1, #12]
	impulse = from->impulse;
    3936:	7b8c      	ldrb	r4, [r1, #14]
	pulseTime = from->pulseTime;
    3938:	690a      	ldr	r2, [r1, #16]
	pulsePeriod = from->pulsePeriod;
    393a:	8a8b      	ldrh	r3, [r1, #20]
    393c:	8283      	strh	r3, [r0, #20]
	on = from->on;
	state = from->state;
	//printf("%d %d\n", blinkPeriod, from.blinkPeriod);
	blinkPeriod = from->blinkPeriod;
	blinkDutyCycle = from->blinkDutyCycle;
	activationTime = from->activationTime;
    393e:	6086      	str	r6, [r0, #8]
	activePeriod = from->activePeriod;
    3940:	8185      	strh	r5, [r0, #12]
	impulse = from->impulse;
    3942:	7384      	strb	r4, [r0, #14]
	pulseTime = from->pulseTime;
    3944:	6102      	str	r2, [r0, #16]
	pulsePeriod = from->pulsePeriod;
}
    3946:	bc70      	pop	{r4, r5, r6}
    3948:	4770      	bx	lr
    394a:	bf00      	nop

0000394c <Light::set(lightState, unsigned short, unsigned char)>:
// blinkP: blink _period (on + off) [milliseconds]
void Light::set(lightState st, uint16_t blinkP) {
	set(st, blinkP, 50);
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC) {
    394c:	b410      	push	{r4}
	switch (st) {
    394e:	2901      	cmp	r1, #1
// blinkP: blink _period (on + off) [milliseconds]
void Light::set(lightState st, uint16_t blinkP) {
	set(st, blinkP, 50);
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC) {
    3950:	b083      	sub	sp, #12
	switch (st) {
    3952:	d01e      	beq.n	3992 <Light::set(lightState, unsigned short, unsigned char)+0x46>
    3954:	d319      	bcc.n	398a <Light::set(lightState, unsigned short, unsigned char)+0x3e>
    3956:	2902      	cmp	r1, #2
    3958:	d10f      	bne.n	397a <Light::set(lightState, unsigned short, unsigned char)+0x2e>
		break;
	case ON_L:
		on = true;
		break;
	case BLINK_L:
		on = true;
    395a:	2401      	movs	r4, #1
    395c:	7004      	strb	r4, [r0, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    395e:	4c0e      	ldr	r4, [pc, #56]	; (3998 <Light::set(lightState, unsigned short, unsigned char)+0x4c>)
		break;
	default:
		return;
	}
	state = st;
    3960:	7041      	strb	r1, [r0, #1]
    3962:	6821      	ldr	r1, [r4, #0]
    3964:	9101      	str	r1, [sp, #4]
	return ret;
    3966:	9901      	ldr	r1, [sp, #4]
	if (on) activationTime = millis();
    3968:	6081      	str	r1, [r0, #8]
	if (blinkP == 0) blinkPeriod = DEF_BLNK_PERIOD;
    396a:	b94a      	cbnz	r2, 3980 <Light::set(lightState, unsigned short, unsigned char)+0x34>
    396c:	22c8      	movs	r2, #200	; 0xc8
    396e:	8042      	strh	r2, [r0, #2]
	else blinkPeriod = blinkP;
	if (blinkDutyC == 0) blinkDutyCycle = 50;
    3970:	b94b      	cbnz	r3, 3986 <Light::set(lightState, unsigned short, unsigned char)+0x3a>
    3972:	2332      	movs	r3, #50	; 0x32
    3974:	7103      	strb	r3, [r0, #4]
	else blinkDutyCycle = blinkDutyC;
	activePeriod = 0; // unlimited state time (default)
    3976:	2300      	movs	r3, #0
    3978:	8183      	strh	r3, [r0, #12]
}
    397a:	b003      	add	sp, #12
    397c:	bc10      	pop	{r4}
    397e:	4770      	bx	lr
		return;
	}
	state = st;
	if (on) activationTime = millis();
	if (blinkP == 0) blinkPeriod = DEF_BLNK_PERIOD;
	else blinkPeriod = blinkP;
    3980:	8042      	strh	r2, [r0, #2]
	if (blinkDutyC == 0) blinkDutyCycle = 50;
    3982:	2b00      	cmp	r3, #0
    3984:	d0f5      	beq.n	3972 <Light::set(lightState, unsigned short, unsigned char)+0x26>
	else blinkDutyCycle = blinkDutyC;
    3986:	7103      	strb	r3, [r0, #4]
    3988:	e7f5      	b.n	3976 <Light::set(lightState, unsigned short, unsigned char)+0x2a>
}

void Light::set(lightState st, uint16_t blinkP, byte blinkDutyC) {
	switch (st) {
	case OFF_L:
		on = false;
    398a:	2100      	movs	r1, #0
    398c:	7001      	strb	r1, [r0, #0]
		on = true;
		break;
	default:
		return;
	}
	state = st;
    398e:	7041      	strb	r1, [r0, #1]
    3990:	e7eb      	b.n	396a <Light::set(lightState, unsigned short, unsigned char)+0x1e>
	switch (st) {
	case OFF_L:
		on = false;
		break;
	case ON_L:
		on = true;
    3992:	7001      	strb	r1, [r0, #0]
		break;
    3994:	e7e3      	b.n	395e <Light::set(lightState, unsigned short, unsigned char)+0x12>
    3996:	bf00      	nop
    3998:	1fff959c 	.word	0x1fff959c

0000399c <Light::set(lightState)>:
	activePeriod = 0; // (ms)
}

// define the state of the light
void Light::set(lightState st) {
	set(st, (st == BLINK_L) ? DEF_BLNK_PERIOD : 0, 50);
    399c:	2902      	cmp	r1, #2
    399e:	bf0c      	ite	eq
    39a0:	22c8      	moveq	r2, #200	; 0xc8
    39a2:	2200      	movne	r2, #0
    39a4:	2332      	movs	r3, #50	; 0x32
    39a6:	f7ff bfd1 	b.w	394c <Light::set(lightState, unsigned short, unsigned char)>
    39aa:	bf00      	nop

000039ac <Light::set(lightState, unsigned short)>:

// define the state of the light
// st: light state
// blinkP: blink _period (on + off) [milliseconds]
void Light::set(lightState st, uint16_t blinkP) {
	set(st, blinkP, 50);
    39ac:	2332      	movs	r3, #50	; 0x32
    39ae:	f7ff bfcd 	b.w	394c <Light::set(lightState, unsigned short, unsigned char)>
    39b2:	bf00      	nop

000039b4 <Light::pulse(unsigned short)>:
void Light::invert() {
	if (state == ON_L) state = OFF_L;
	else if (state == OFF_L) state = ON_L;
}

void Light::pulse(uint16_t pulseP) {
    39b4:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39b6:	4a07      	ldr	r2, [pc, #28]	; (39d4 <Light::pulse(unsigned short)+0x20>)
	pulsePeriod = pulseP;
	impulse = true;
	pulseTime = millis();
	on = !on;
    39b8:	7803      	ldrb	r3, [r0, #0]
    39ba:	6812      	ldr	r2, [r2, #0]
	if (state == ON_L) state = OFF_L;
	else if (state == OFF_L) state = ON_L;
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
    39bc:	8281      	strh	r1, [r0, #20]
void Light::invert() {
	if (state == ON_L) state = OFF_L;
	else if (state == OFF_L) state = ON_L;
}

void Light::pulse(uint16_t pulseP) {
    39be:	b083      	sub	sp, #12
	pulsePeriod = pulseP;
	impulse = true;
    39c0:	2401      	movs	r4, #1
    39c2:	9201      	str	r2, [sp, #4]
	return ret;
    39c4:	9a01      	ldr	r2, [sp, #4]
    39c6:	7384      	strb	r4, [r0, #14]
	pulseTime = millis();
	on = !on;
    39c8:	4063      	eors	r3, r4
}

void Light::pulse(uint16_t pulseP) {
	pulsePeriod = pulseP;
	impulse = true;
	pulseTime = millis();
    39ca:	6102      	str	r2, [r0, #16]
	on = !on;
    39cc:	7003      	strb	r3, [r0, #0]
}
    39ce:	b003      	add	sp, #12
    39d0:	bc10      	pop	{r4}
    39d2:	4770      	bx	lr
    39d4:	1fff959c 	.word	0x1fff959c

000039d8 <Light::update(unsigned long)>:
// return true when light changes its on/off state
bool Light::update(uint32_t ms) {
	bool prevState = on;

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
    39d8:	7843      	ldrb	r3, [r0, #1]
    39da:	2b02      	cmp	r3, #2
	pulseTime = millis();
	on = !on;
}

// return true when light changes its on/off state
bool Light::update(uint32_t ms) {
    39dc:	b470      	push	{r4, r5, r6}
	bool prevState = on;
    39de:	7804      	ldrb	r4, [r0, #0]

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
    39e0:	d01c      	beq.n	3a1c <Light::update(unsigned long)+0x44>
    39e2:	4623      	mov	r3, r4
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
	}

	// pulse state
	if (impulse) {
    39e4:	7b82      	ldrb	r2, [r0, #14]
    39e6:	b122      	cbz	r2, 39f2 <Light::update(unsigned long)+0x1a>
		if ((ms - pulseTime) > pulsePeriod) {
    39e8:	6902      	ldr	r2, [r0, #16]
    39ea:	8a85      	ldrh	r5, [r0, #20]
    39ec:	1a8a      	subs	r2, r1, r2
    39ee:	42aa      	cmp	r2, r5
    39f0:	d80e      	bhi.n	3a10 <Light::update(unsigned long)+0x38>
			on = !on;
		}
	}

	// checks light active time
	if (on) {
    39f2:	b14b      	cbz	r3, 3a08 <Light::update(unsigned long)+0x30>
		if (activePeriod > 0 && (ms - activationTime) >= (uint32_t)activePeriod) {
    39f4:	8982      	ldrh	r2, [r0, #12]
    39f6:	b13a      	cbz	r2, 3a08 <Light::update(unsigned long)+0x30>
    39f8:	6885      	ldr	r5, [r0, #8]
    39fa:	1b49      	subs	r1, r1, r5
    39fc:	4291      	cmp	r1, r2
    39fe:	d303      	bcc.n	3a08 <Light::update(unsigned long)+0x30>
			activePeriod = 0; // resets previous active-time setting
    3a00:	2300      	movs	r3, #0
    3a02:	8183      	strh	r3, [r0, #12]
			state = OFF_L;
    3a04:	7043      	strb	r3, [r0, #1]
			on = false;
    3a06:	7003      	strb	r3, [r0, #0]
		}
	}

	return (on != prevState);
}
    3a08:	ea84 0003 	eor.w	r0, r4, r3
    3a0c:	bc70      	pop	{r4, r5, r6}
    3a0e:	4770      	bx	lr

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
			on = !on;
    3a10:	f083 0301 	eor.w	r3, r3, #1
	}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
    3a14:	2200      	movs	r2, #0
			on = !on;
    3a16:	7003      	strb	r3, [r0, #0]
	}

	// pulse state
	if (impulse) {
		if ((ms - pulseTime) > pulsePeriod) {
			impulse = false;
    3a18:	7382      	strb	r2, [r0, #14]
    3a1a:	e7ea      	b.n	39f2 <Light::update(unsigned long)+0x1a>

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
		uint32_t t; // blink ON time
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
    3a1c:	6882      	ldr	r2, [r0, #8]
	bool prevState = on;

	// blink mode (ON/STATIC_TEXT iteration)
	if (state == BLINK_L) {
		uint32_t t; // blink ON time
		t = (ms - activationTime) % (uint32_t)blinkPeriod;
    3a1e:	8845      	ldrh	r5, [r0, #2]
		on = ((t * 100 / blinkPeriod) < blinkDutyCycle);
    3a20:	7906      	ldrb	r6, [r0, #4]
    3a22:	1a8a      	subs	r2, r1, r2
    3a24:	fbb2 f3f5 	udiv	r3, r2, r5
    3a28:	fb05 2313 	mls	r3, r5, r3, r2
    3a2c:	2264      	movs	r2, #100	; 0x64
    3a2e:	fb02 f203 	mul.w	r2, r2, r3
    3a32:	fbb2 f3f5 	udiv	r3, r2, r5
    3a36:	42b3      	cmp	r3, r6
    3a38:	bf2c      	ite	cs
    3a3a:	2300      	movcs	r3, #0
    3a3c:	2301      	movcc	r3, #1
    3a3e:	7003      	strb	r3, [r0, #0]
    3a40:	e7d0      	b.n	39e4 <Light::update(unsigned long)+0xc>
    3a42:	bf00      	nop

00003a44 <Light::isActive()>:

	return (on != prevState);
}

bool Light::isActive() {
    return (state != OFF_L); 
    3a44:	7840      	ldrb	r0, [r0, #1]
}
    3a46:	3000      	adds	r0, #0
    3a48:	bf18      	it	ne
    3a4a:	2001      	movne	r0, #1
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop

00003a50 <LightGroup::LightGroup(char const*, long, ...)>:
	nameStr = "";
	_tmpLight = new Light();
	_size = 0;
}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
    3a50:	b40c      	push	{r2, r3}
    3a52:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a54:	4604      	mov	r4, r0
    3a56:	b085      	sub	sp, #20
    3a58:	460d      	mov	r5, r1
    3a5a:	2100      	movs	r1, #0
    3a5c:	f006 f96e 	bl	9d3c <String::String(char const*)>
	_size = 0; 
    3a60:	2300      	movs	r3, #0
    3a62:	7523      	strb	r3, [r4, #20]
	_tmpLight = new Light();
    3a64:	2018      	movs	r0, #24
    3a66:	f006 f84d 	bl	9b04 <operator new(unsigned int)>
    3a6a:	4607      	mov	r7, r0
    3a6c:	f7ff ff4a 	bl	3904 <Light::Light()>
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
    3a70:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	_size = 0;
}

LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
	_tmpLight = new Light();
    3a72:	61a7      	str	r7, [r4, #24]
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
    3a74:	1c73      	adds	r3, r6, #1
    3a76:	7d20      	ldrb	r0, [r4, #20]
    3a78:	d007      	beq.n	3a8a <LightGroup::LightGroup(char const*, long, ...)+0x3a>
    3a7a:	ab0a      	add	r3, sp, #40	; 0x28
    3a7c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3a80:	3001      	adds	r0, #1
    3a82:	3201      	adds	r2, #1
    3a84:	b2c0      	uxtb	r0, r0
    3a86:	d1f9      	bne.n	3a7c <LightGroup::LightGroup(char const*, long, ...)+0x2c>
    3a88:	7520      	strb	r0, [r4, #20]
	lightNum = new byte[_size];
    3a8a:	f006 f83d 	bl	9b08 <operator new[](unsigned int)>
	ip = &lNumber;
	for (byte i = 0; i < _size; i++) lightNum[i] = (byte)*(ip+i);
    3a8e:	7d23      	ldrb	r3, [r4, #20]
LightGroup::LightGroup(const char* setName, int32_t lNumber ...) {
	_size = 0; 
	_tmpLight = new Light();
	int32_t* ip = &lNumber;
	while (*(ip++) != -1) _size++;
	lightNum = new byte[_size];
    3a90:	6120      	str	r0, [r4, #16]
	ip = &lNumber;
	for (byte i = 0; i < _size; i++) lightNum[i] = (byte)*(ip+i);
    3a92:	b15b      	cbz	r3, 3aac <LightGroup::LightGroup(char const*, long, ...)+0x5c>
    3a94:	2300      	movs	r3, #0
    3a96:	e003      	b.n	3aa0 <LightGroup::LightGroup(char const*, long, ...)+0x50>
    3a98:	aa0a      	add	r2, sp, #40	; 0x28
    3a9a:	6920      	ldr	r0, [r4, #16]
    3a9c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    3aa0:	54c6      	strb	r6, [r0, r3]
    3aa2:	3301      	adds	r3, #1
    3aa4:	7d22      	ldrb	r2, [r4, #20]
    3aa6:	b2db      	uxtb	r3, r3
    3aa8:	429a      	cmp	r2, r3
    3aaa:	d8f5      	bhi.n	3a98 <LightGroup::LightGroup(char const*, long, ...)+0x48>
	nameStr = String(setName);
    3aac:	4629      	mov	r1, r5
    3aae:	4668      	mov	r0, sp
    3ab0:	f006 f944 	bl	9d3c <String::String(char const*)>
    3ab4:	4669      	mov	r1, sp
    3ab6:	4620      	mov	r0, r4
    3ab8:	f006 f9d2 	bl	9e60 <String::operator=(String&&)>
    3abc:	4668      	mov	r0, sp
    3abe:	f006 f8fd 	bl	9cbc <String::~String()>
	//Serial.printf("new light group (size:%i) '", _size);
	//Serial.print(nameStr);
	//Serial.print("':[");
	//for (int i = 0; i < _size; i++) Serial.printf("%i,",lightNum[i]);
	//Serial.println("]");
}
    3ac2:	4620      	mov	r0, r4
    3ac4:	b005      	add	sp, #20
    3ac6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3aca:	b002      	add	sp, #8
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop

00003ad0 <LightGroup::light(unsigned char)>:
	//Serial.println("]");
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
	 if (activeLightSet == nullptr) {
    3ad0:	4b0a      	ldr	r3, [pc, #40]	; (3afc <LightGroup::light(unsigned char)+0x2c>)
	//for (int i = 0; i < _size; i++) Serial.printf("%i,", lightNum[i]);
	//Serial.println("]");
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
    3ad2:	b510      	push	{r4, lr}
	 if (activeLightSet == nullptr) {
    3ad4:	681c      	ldr	r4, [r3, #0]
    3ad6:	b13c      	cbz	r4, 3ae8 <LightGroup::light(unsigned char)+0x18>
		 prWarning(F("WARNING: LightGroup::light: undefined light set"));
		 return nullptr;
	 }
	 Light* l = LightGroup::activeLightSet->getLight(lightNum[n]);
    3ad8:	6903      	ldr	r3, [r0, #16]
    3ada:	4620      	mov	r0, r4
    3adc:	5c59      	ldrb	r1, [r3, r1]
    3ade:	f000 f995 	bl	3e0c <LightSet::getLight(int)>
	 if (l == nullptr) {
    3ae2:	4604      	mov	r4, r0
    3ae4:	b128      	cbz	r0, 3af2 <LightGroup::light(unsigned char)+0x22>
		 prWarning(F("WARNING: LightGroup::light: null light!"));
		 return nullptr;
	 }
	 return l;
}
    3ae6:	bd10      	pop	{r4, pc}
}

// returns nullptr if no light context is defined in <activeLightSet>
 Light* LightGroup::light(byte n) {
	 if (activeLightSet == nullptr) {
		 prWarning(F("WARNING: LightGroup::light: undefined light set"));
    3ae8:	4805      	ldr	r0, [pc, #20]	; (3b00 <LightGroup::light(unsigned char)+0x30>)
    3aea:	f000 faff 	bl	40ec <msg::prWarning(__FlashStringHelper const*)>
		 return nullptr;
    3aee:	4620      	mov	r0, r4
    3af0:	bd10      	pop	{r4, pc}
	 }
	 Light* l = LightGroup::activeLightSet->getLight(lightNum[n]);
	 if (l == nullptr) {
		 prWarning(F("WARNING: LightGroup::light: null light!"));
    3af2:	4804      	ldr	r0, [pc, #16]	; (3b04 <LightGroup::light(unsigned char)+0x34>)
    3af4:	f000 fafa 	bl	40ec <msg::prWarning(__FlashStringHelper const*)>
		 return nullptr;
    3af8:	4620      	mov	r0, r4
    3afa:	bd10      	pop	{r4, pc}
    3afc:	1fff92c8 	.word	0x1fff92c8
    3b00:	0000ff84 	.word	0x0000ff84
    3b04:	0000ffb4 	.word	0x0000ffb4

00003b08 <LightGroup::set(unsigned char, lightState)>:
	 }
	 return l;
}

void LightGroup::set(byte n, lightState st) {
    3b08:	b538      	push	{r3, r4, r5, lr}
	if (activeLightSet == nullptr) {
    3b0a:	4b0c      	ldr	r3, [pc, #48]	; (3b3c <LightGroup::set(unsigned char, lightState)+0x34>)
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	b17b      	cbz	r3, 3b30 <LightGroup::set(unsigned char, lightState)+0x28>
		prWarning(F("LightGroup::set: undefined light set!"));
		return;
	}
	if (n >= _size) {
    3b10:	7d03      	ldrb	r3, [r0, #20]
    3b12:	428b      	cmp	r3, r1
    3b14:	d907      	bls.n	3b26 <LightGroup::set(unsigned char, lightState)+0x1e>
    3b16:	4614      	mov	r4, r2
		prWarning(F("LightGroup::set: illegal light number"));
		return;
	}
	light(n)->set(st);
    3b18:	f7ff ffda 	bl	3ad0 <LightGroup::light(unsigned char)>
    3b1c:	4621      	mov	r1, r4
}
    3b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	if (n >= _size) {
		prWarning(F("LightGroup::set: illegal light number"));
		return;
	}
	light(n)->set(st);
    3b22:	f7ff bf3b 	b.w	399c <Light::set(lightState)>
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::set: undefined light set!"));
		return;
	}
	if (n >= _size) {
		prWarning(F("LightGroup::set: illegal light number"));
    3b26:	4806      	ldr	r0, [pc, #24]	; (3b40 <LightGroup::set(unsigned char, lightState)+0x38>)
		return;
	}
	light(n)->set(st);
}
    3b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::set: undefined light set!"));
		return;
	}
	if (n >= _size) {
		prWarning(F("LightGroup::set: illegal light number"));
    3b2c:	f000 bade 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
	 return l;
}

void LightGroup::set(byte n, lightState st) {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::set: undefined light set!"));
    3b30:	4804      	ldr	r0, [pc, #16]	; (3b44 <LightGroup::set(unsigned char, lightState)+0x3c>)
	if (n >= _size) {
		prWarning(F("LightGroup::set: illegal light number"));
		return;
	}
	light(n)->set(st);
}
    3b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 return l;
}

void LightGroup::set(byte n, lightState st) {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::set: undefined light set!"));
    3b36:	f000 bad9 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
    3b3a:	bf00      	nop
    3b3c:	1fff92c8 	.word	0x1fff92c8
    3b40:	00010004 	.word	0x00010004
    3b44:	0000ffdc 	.word	0x0000ffdc

00003b48 <LightGroup::pulse(unsigned char, unsigned short)>:
	}
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
    3b48:	4b07      	ldr	r3, [pc, #28]	; (3b68 <LightGroup::pulse(unsigned char, unsigned short)+0x20>)
    3b4a:	681b      	ldr	r3, [r3, #0]
    3b4c:	b143      	cbz	r3, 3b60 <LightGroup::pulse(unsigned char, unsigned short)+0x18>
		return;
	}
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
    3b4e:	b510      	push	{r4, lr}
    3b50:	4614      	mov	r4, r2
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::pulse: undefined light set!"));
		return;
	}
	light(n)->pulse(tm);
    3b52:	f7ff ffbd 	bl	3ad0 <LightGroup::light(unsigned char)>
    3b56:	4621      	mov	r1, r4
}
    3b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::pulse: undefined light set!"));
		return;
	}
	light(n)->pulse(tm);
    3b5c:	f7ff bf2a 	b.w	39b4 <Light::pulse(unsigned short)>
	light(n)->invert();
}

void LightGroup::pulse(byte n, uint16_t tm) {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::pulse: undefined light set!"));
    3b60:	4802      	ldr	r0, [pc, #8]	; (3b6c <LightGroup::pulse(unsigned char, unsigned short)+0x24>)
    3b62:	f000 bac3 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
    3b66:	bf00      	nop
    3b68:	1fff92c8 	.word	0x1fff92c8
    3b6c:	00010058 	.word	0x00010058

00003b70 <LightGroup::getState(unsigned char)>:
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3b70:	4b07      	ldr	r3, [pc, #28]	; (3b90 <LightGroup::getState(unsigned char)+0x20>)
    3b72:	681b      	ldr	r3, [r3, #0]
    3b74:	b14b      	cbz	r3, 3b8a <LightGroup::getState(unsigned char)+0x1a>
		return;
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
    3b76:	b510      	push	{r4, lr}
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3b78:	7d03      	ldrb	r3, [r0, #20]
    3b7a:	428b      	cmp	r3, r1
    3b7c:	d801      	bhi.n	3b82 <LightGroup::getState(unsigned char)+0x12>
    3b7e:	2000      	movs	r0, #0
	return light(n)->state;
}
    3b80:	bd10      	pop	{r4, pc}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
	return light(n)->state;
    3b82:	f7ff ffa5 	bl	3ad0 <LightGroup::light(unsigned char)>
    3b86:	7840      	ldrb	r0, [r0, #1]
    3b88:	bd10      	pop	{r4, pc}
	}
	light(n)->pulse(tm);
}

lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
    3b8a:	4618      	mov	r0, r3
	return light(n)->state;
}
    3b8c:	4770      	bx	lr
    3b8e:	bf00      	nop
    3b90:	1fff92c8 	.word	0x1fff92c8

00003b94 <LightGroup::isActive(unsigned char)>:

bool LightGroup::isActive(byte n) {
	if (activeLightSet == nullptr) {
    3b94:	4b0a      	ldr	r3, [pc, #40]	; (3bc0 <LightGroup::isActive(unsigned char)+0x2c>)
    3b96:	681b      	ldr	r3, [r3, #0]
lightState LightGroup::getState(byte n) {
	if (activeLightSet == nullptr || n >= _size) return OFF_L;
	return light(n)->state;
}

bool LightGroup::isActive(byte n) {
    3b98:	b510      	push	{r4, lr}
	if (activeLightSet == nullptr) {
    3b9a:	b16b      	cbz	r3, 3bb8 <LightGroup::isActive(unsigned char)+0x24>
		prWarning(F("LightGroup::isActive: undefined light set!"));
		return false;
	}
	if (n >= _size) {
    3b9c:	7d03      	ldrb	r3, [r0, #20]
    3b9e:	428b      	cmp	r3, r1
    3ba0:	d905      	bls.n	3bae <LightGroup::isActive(unsigned char)+0x1a>
		prWarning(F("LightGroup::isActive: illegal light number"));
		return false;
	}
	return light(n)->isActive();
    3ba2:	f7ff ff95 	bl	3ad0 <LightGroup::light(unsigned char)>
}
    3ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (n >= _size) {
		prWarning(F("LightGroup::isActive: illegal light number"));
		return false;
	}
	return light(n)->isActive();
    3baa:	f7ff bf4b 	b.w	3a44 <Light::isActive()>
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::isActive: undefined light set!"));
		return false;
	}
	if (n >= _size) {
		prWarning(F("LightGroup::isActive: illegal light number"));
    3bae:	4805      	ldr	r0, [pc, #20]	; (3bc4 <LightGroup::isActive(unsigned char)+0x30>)
    3bb0:	f000 fa9c 	bl	40ec <msg::prWarning(__FlashStringHelper const*)>
		return false;
	}
	return light(n)->isActive();
}
    3bb4:	2000      	movs	r0, #0
    3bb6:	bd10      	pop	{r4, pc}
	return light(n)->state;
}

bool LightGroup::isActive(byte n) {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::isActive: undefined light set!"));
    3bb8:	4803      	ldr	r0, [pc, #12]	; (3bc8 <LightGroup::isActive(unsigned char)+0x34>)
    3bba:	f000 fa97 	bl	40ec <msg::prWarning(__FlashStringHelper const*)>
		return false;
    3bbe:	e7f9      	b.n	3bb4 <LightGroup::isActive(unsigned char)+0x20>
    3bc0:	1fff92c8 	.word	0x1fff92c8
    3bc4:	000100ac 	.word	0x000100ac
    3bc8:	00010080 	.word	0x00010080

00003bcc <LightGroup::setAll(lightState)>:
	}
	return light(n)->isActive();
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
    3bcc:	4b0c      	ldr	r3, [pc, #48]	; (3c00 <LightGroup::setAll(lightState)+0x34>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	b193      	cbz	r3, 3bf8 <LightGroup::setAll(lightState)+0x2c>
		prWarning(F("LightGroup::setAll: undefined light set!"));
		return;
	}
	for (int i = 0; i < _size; i++) light(i)->set(st);
    3bd2:	7d03      	ldrb	r3, [r0, #20]
    3bd4:	b17b      	cbz	r3, 3bf6 <LightGroup::setAll(lightState)+0x2a>
		return false;
	}
	return light(n)->isActive();
}

void LightGroup::setAll(lightState st) {
    3bd6:	b570      	push	{r4, r5, r6, lr}
    3bd8:	460e      	mov	r6, r1
    3bda:	4605      	mov	r5, r0
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::setAll: undefined light set!"));
		return;
	}
	for (int i = 0; i < _size; i++) light(i)->set(st);
    3bdc:	2400      	movs	r4, #0
    3bde:	b2e1      	uxtb	r1, r4
    3be0:	4628      	mov	r0, r5
    3be2:	f7ff ff75 	bl	3ad0 <LightGroup::light(unsigned char)>
    3be6:	4631      	mov	r1, r6
    3be8:	f7ff fed8 	bl	399c <Light::set(lightState)>
    3bec:	7d2b      	ldrb	r3, [r5, #20]
    3bee:	3401      	adds	r4, #1
    3bf0:	42a3      	cmp	r3, r4
    3bf2:	dcf4      	bgt.n	3bde <LightGroup::setAll(lightState)+0x12>
    3bf4:	bd70      	pop	{r4, r5, r6, pc}
    3bf6:	4770      	bx	lr
	return light(n)->isActive();
}

void LightGroup::setAll(lightState st) {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::setAll: undefined light set!"));
    3bf8:	4802      	ldr	r0, [pc, #8]	; (3c04 <LightGroup::setAll(lightState)+0x38>)
    3bfa:	f000 ba77 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
    3bfe:	bf00      	nop
    3c00:	1fff92c8 	.word	0x1fff92c8
    3c04:	000100d8 	.word	0x000100d8

00003c08 <LightGroup::switchTheFirst(lightState)>:
// to the given state.
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
	byte i;

	if (activeLightSet == nullptr) {
    3c08:	4b13      	ldr	r3, [pc, #76]	; (3c58 <LightGroup::switchTheFirst(lightState)+0x50>)
    3c0a:	681b      	ldr	r3, [r3, #0]
}

// switch the first light of the group of a different state than st
// to the given state.
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
    3c0c:	b570      	push	{r4, r5, r6, lr}
	byte i;

	if (activeLightSet == nullptr) {
    3c0e:	b1eb      	cbz	r3, 3c4c <LightGroup::switchTheFirst(lightState)+0x44>
    3c10:	4605      	mov	r5, r0
		prWarning(F("LightGroup::switchTheFirst: undefined light set!"));
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3c12:	7d00      	ldrb	r0, [r0, #20]
    3c14:	b1c8      	cbz	r0, 3c4a <LightGroup::switchTheFirst(lightState)+0x42>
    3c16:	460e      	mov	r6, r1
    3c18:	2400      	movs	r4, #0
    3c1a:	e003      	b.n	3c24 <LightGroup::switchTheFirst(lightState)+0x1c>
    3c1c:	7d2b      	ldrb	r3, [r5, #20]
    3c1e:	b2d4      	uxtb	r4, r2
    3c20:	42a3      	cmp	r3, r4
    3c22:	d911      	bls.n	3c48 <LightGroup::switchTheFirst(lightState)+0x40>
		if (light(i)->state != st) {
    3c24:	4621      	mov	r1, r4
    3c26:	4628      	mov	r0, r5
    3c28:	f7ff ff52 	bl	3ad0 <LightGroup::light(unsigned char)>
    3c2c:	7843      	ldrb	r3, [r0, #1]
    3c2e:	42b3      	cmp	r3, r6

	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::switchTheFirst: undefined light set!"));
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3c30:	f104 0201 	add.w	r2, r4, #1
		if (light(i)->state != st) {
    3c34:	d0f2      	beq.n	3c1c <LightGroup::switchTheFirst(lightState)+0x14>
			light(i)->set(st);
    3c36:	4621      	mov	r1, r4
    3c38:	4628      	mov	r0, r5
    3c3a:	f7ff ff49 	bl	3ad0 <LightGroup::light(unsigned char)>
    3c3e:	4631      	mov	r1, r6
    3c40:	f7ff feac 	bl	399c <Light::set(lightState)>
			break;
    3c44:	4620      	mov	r0, r4
    3c46:	bd70      	pop	{r4, r5, r6, pc}

	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::switchTheFirst: undefined light set!"));
		return 0xff;
	}
	for (i = 0; i < _size; i++) {
    3c48:	4620      	mov	r0, r4
			light(i)->set(st);
			break;
		}
	}
	return i;
}
    3c4a:	bd70      	pop	{r4, r5, r6, pc}
// returns: the order number of light switched; 0xFF else
byte LightGroup::switchTheFirst(lightState st) {
	byte i;

	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::switchTheFirst: undefined light set!"));
    3c4c:	4803      	ldr	r0, [pc, #12]	; (3c5c <LightGroup::switchTheFirst(lightState)+0x54>)
    3c4e:	f000 fa4d 	bl	40ec <msg::prWarning(__FlashStringHelper const*)>
		return 0xff;
    3c52:	20ff      	movs	r0, #255	; 0xff
    3c54:	bd70      	pop	{r4, r5, r6, pc}
    3c56:	bf00      	nop
    3c58:	1fff92c8 	.word	0x1fff92c8
    3c5c:	00010104 	.word	0x00010104

00003c60 <LightGroup::switchTheFirst(lightState, unsigned short)>:
		}
	}
	return i;
}

byte LightGroup::switchTheFirst(lightState st, uint16_t maxP) {
    3c60:	b570      	push	{r4, r5, r6, lr}
    3c62:	4615      	mov	r5, r2
    3c64:	4606      	mov	r6, r0
	byte gl;
	gl = switchTheFirst(st);
    3c66:	f7ff ffcf 	bl	3c08 <LightGroup::switchTheFirst(lightState)>
    3c6a:	4604      	mov	r4, r0
	if (maxP > 0 && gl != 0xff) light(gl)->activePeriod = maxP;
    3c6c:	b135      	cbz	r5, 3c7c <LightGroup::switchTheFirst(lightState, unsigned short)+0x1c>
    3c6e:	28ff      	cmp	r0, #255	; 0xff
    3c70:	d004      	beq.n	3c7c <LightGroup::switchTheFirst(lightState, unsigned short)+0x1c>
    3c72:	4630      	mov	r0, r6
    3c74:	4621      	mov	r1, r4
    3c76:	f7ff ff2b 	bl	3ad0 <LightGroup::light(unsigned char)>
    3c7a:	8185      	strh	r5, [r0, #12]
	return gl;
}
    3c7c:	4620      	mov	r0, r4
    3c7e:	bd70      	pop	{r4, r5, r6, pc}

00003c80 <LightGroup::rotateRight()>:
		for (int i = _size - 1; i > 0; i--) light(i + 1)->copy(light(i));
	}
	light(0)->reset();
}

void LightGroup::rotateRight() {
    3c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
    3c82:	4b1c      	ldr	r3, [pc, #112]	; (3cf4 <LightGroup::rotateRight()+0x74>)
    3c84:	681b      	ldr	r3, [r3, #0]
    3c86:	b37b      	cbz	r3, 3ce8 <LightGroup::rotateRight()+0x68>
		prWarning(F("LightGroup::rotateRight: undefined light set!"));
		return;
	}
	if (_size <= 1) {
    3c88:	7d01      	ldrb	r1, [r0, #20]
    3c8a:	2901      	cmp	r1, #1
    3c8c:	4606      	mov	r6, r0
    3c8e:	d926      	bls.n	3cde <LightGroup::rotateRight()+0x5e>
		prWarning(F("LightGroup::rotateRight: group size <= 1"));
		return;
	}
	//Serial.print("rotateRight on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(_size - 1));
    3c90:	3901      	subs	r1, #1
    3c92:	b2c9      	uxtb	r1, r1
    3c94:	6984      	ldr	r4, [r0, #24]
    3c96:	f7ff ff1b 	bl	3ad0 <LightGroup::light(unsigned char)>
    3c9a:	4601      	mov	r1, r0
    3c9c:	4620      	mov	r0, r4
    3c9e:	f7ff fe3f 	bl	3920 <Light::copy(Light*)>
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
    3ca2:	7d34      	ldrb	r4, [r6, #20]
    3ca4:	3c02      	subs	r4, #2
    3ca6:	d411      	bmi.n	3ccc <LightGroup::rotateRight()+0x4c>
    3ca8:	b2e5      	uxtb	r5, r4
    3caa:	1c69      	adds	r1, r5, #1
    3cac:	b2c9      	uxtb	r1, r1
    3cae:	4630      	mov	r0, r6
    3cb0:	f7ff ff0e 	bl	3ad0 <LightGroup::light(unsigned char)>
    3cb4:	4629      	mov	r1, r5
    3cb6:	4607      	mov	r7, r0
    3cb8:	4630      	mov	r0, r6
    3cba:	f7ff ff09 	bl	3ad0 <LightGroup::light(unsigned char)>
    3cbe:	3c01      	subs	r4, #1
    3cc0:	4601      	mov	r1, r0
    3cc2:	4638      	mov	r0, r7
    3cc4:	f7ff fe2c 	bl	3920 <Light::copy(Light*)>
    3cc8:	1c63      	adds	r3, r4, #1
    3cca:	d1ed      	bne.n	3ca8 <LightGroup::rotateRight()+0x28>
	light(0)->copy(_tmpLight);
    3ccc:	2100      	movs	r1, #0
    3cce:	4630      	mov	r0, r6
    3cd0:	f7ff fefe 	bl	3ad0 <LightGroup::light(unsigned char)>
    3cd4:	69b1      	ldr	r1, [r6, #24]
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	}
	//Serial.print("rotateRight on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
    3cda:	f7ff be21 	b.w	3920 <Light::copy(Light*)>
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::rotateRight: undefined light set!"));
		return;
	}
	if (_size <= 1) {
		prWarning(F("LightGroup::rotateRight: group size <= 1"));
    3cde:	4806      	ldr	r0, [pc, #24]	; (3cf8 <LightGroup::rotateRight()+0x78>)
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::rotateRight: undefined light set!"));
		return;
	}
	if (_size <= 1) {
		prWarning(F("LightGroup::rotateRight: group size <= 1"));
    3ce4:	f000 ba02 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
	light(0)->reset();
}

void LightGroup::rotateRight() {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::rotateRight: undefined light set!"));
    3ce8:	4804      	ldr	r0, [pc, #16]	; (3cfc <LightGroup::rotateRight()+0x7c>)
	_tmpLight->copy(light(_size - 1));
	for (int i = _size - 2; i >= 0; i--) light(i + 1)->copy(light(i));
	light(0)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	light(0)->reset();
}

void LightGroup::rotateRight() {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::rotateRight: undefined light set!"));
    3cee:	f000 b9fd 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
    3cf2:	bf00      	nop
    3cf4:	1fff92c8 	.word	0x1fff92c8
    3cf8:	000101f8 	.word	0x000101f8
    3cfc:	000101c8 	.word	0x000101c8

00003d00 <LightGroup::rotateLeft()>:
	for (int i = 0; i < _size - 1; i++)
		light(i)->copy(light(i + 1));
	light(_size - 1)->reset();
}

void LightGroup::rotateLeft() {
    3d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (activeLightSet == nullptr) {
    3d02:	4b1c      	ldr	r3, [pc, #112]	; (3d74 <LightGroup::rotateLeft()+0x74>)
    3d04:	681b      	ldr	r3, [r3, #0]
    3d06:	b383      	cbz	r3, 3d6a <LightGroup::rotateLeft()+0x6a>
		prWarning(F("LightGroup::rotateLeft: undefined light set!"));
		return;
	}
	if (_size <= 1) return;
    3d08:	7d03      	ldrb	r3, [r0, #20]
    3d0a:	2b01      	cmp	r3, #1
    3d0c:	4606      	mov	r6, r0
    3d0e:	d92b      	bls.n	3d68 <LightGroup::rotateLeft()+0x68>
	//Serial.print("rotateLeft on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(0));
    3d10:	2100      	movs	r1, #0
    3d12:	6984      	ldr	r4, [r0, #24]
    3d14:	f7ff fedc 	bl	3ad0 <LightGroup::light(unsigned char)>
    3d18:	4601      	mov	r1, r0
    3d1a:	4620      	mov	r0, r4
    3d1c:	f7ff fe00 	bl	3920 <Light::copy(Light*)>
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
    3d20:	7d31      	ldrb	r1, [r6, #20]
    3d22:	2901      	cmp	r1, #1
    3d24:	bfd8      	it	le
    3d26:	f101 31ff 	addle.w	r1, r1, #4294967295
    3d2a:	dd14      	ble.n	3d56 <LightGroup::rotateLeft()+0x56>
    3d2c:	2500      	movs	r5, #0
    3d2e:	b2ec      	uxtb	r4, r5
    3d30:	4621      	mov	r1, r4
    3d32:	4630      	mov	r0, r6
    3d34:	f7ff fecc 	bl	3ad0 <LightGroup::light(unsigned char)>
    3d38:	1c61      	adds	r1, r4, #1
    3d3a:	4607      	mov	r7, r0
    3d3c:	b2c9      	uxtb	r1, r1
    3d3e:	4630      	mov	r0, r6
    3d40:	f7ff fec6 	bl	3ad0 <LightGroup::light(unsigned char)>
    3d44:	4601      	mov	r1, r0
    3d46:	4638      	mov	r0, r7
    3d48:	f7ff fdea 	bl	3920 <Light::copy(Light*)>
    3d4c:	7d31      	ldrb	r1, [r6, #20]
    3d4e:	3501      	adds	r5, #1
    3d50:	3901      	subs	r1, #1
    3d52:	42a9      	cmp	r1, r5
    3d54:	dceb      	bgt.n	3d2e <LightGroup::rotateLeft()+0x2e>
	light(_size - 1)->copy(_tmpLight);
    3d56:	b2c9      	uxtb	r1, r1
    3d58:	4630      	mov	r0, r6
    3d5a:	f7ff feb9 	bl	3ad0 <LightGroup::light(unsigned char)>
    3d5e:	69b1      	ldr	r1, [r6, #24]
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (_size <= 1) return;
	//Serial.print("rotateLeft on group ");
	//Serial.print(toString());
	_tmpLight->copy(light(0));
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
	light(_size - 1)->copy(_tmpLight);
    3d64:	f7ff bddc 	b.w	3920 <Light::copy(Light*)>
    3d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	light(_size - 1)->reset();
}

void LightGroup::rotateLeft() {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::rotateLeft: undefined light set!"));
    3d6a:	4803      	ldr	r0, [pc, #12]	; (3d78 <LightGroup::rotateLeft()+0x78>)
	_tmpLight->copy(light(0));
	for (int i = 0; i < _size - 1; i++) light(i)->copy(light(i + 1));
	light(_size - 1)->copy(_tmpLight);
	//Serial.print(" -> ");
	//Serial.println(toString());
}
    3d6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	light(_size - 1)->reset();
}

void LightGroup::rotateLeft() {
	if (activeLightSet == nullptr) {
		prWarning(F("LightGroup::rotateLeft: undefined light set!"));
    3d70:	f000 b9bc 	b.w	40ec <msg::prWarning(__FlashStringHelper const*)>
    3d74:	1fff92c8 	.word	0x1fff92c8
    3d78:	00010278 	.word	0x00010278

00003d7c <LightSet::LightSet(int)>:

//LightSet::LightSet() {
//	_size = 0;
//}

LightSet::LightSet(int ls_size) {
    3d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d80:	460e      	mov	r6, r1
    3d82:	4607      	mov	r7, r0
    3d84:	2110      	movs	r1, #16
    3d86:	481b      	ldr	r0, [pc, #108]	; (3df4 <LightSet::LightSet(int)+0x78>)
    3d88:	f005 fcc4 	bl	9714 <usb_serial_write>
    3d8c:	481a      	ldr	r0, [pc, #104]	; (3df8 <LightSet::LightSet(int)+0x7c>)
    3d8e:	f005 feff 	bl	9b90 <Print::println()>
	Serial.println("Lightset init...");
	delay(100);
    3d92:	2064      	movs	r0, #100	; 0x64
    3d94:	f004 fca4 	bl	86e0 <delay>
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    3d98:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    3d9c:	dc17      	bgt.n	3dce <LightSet::LightSet(int)+0x52>
	lightArray = new Light[ls_size];
    3d9e:	f1b6 6faa 	cmp.w	r6, #89128960	; 0x5500000
    3da2:	d91d      	bls.n	3de0 <LightSet::LightSet(int)+0x64>
    3da4:	f04f 30ff 	mov.w	r0, #4294967295
    3da8:	f005 feae 	bl	9b08 <operator new[](unsigned int)>
    3dac:	1e74      	subs	r4, r6, #1
    3dae:	4680      	mov	r8, r0
    3db0:	4645      	mov	r5, r8
    3db2:	4628      	mov	r0, r5
    3db4:	3c01      	subs	r4, #1
    3db6:	f7ff fda5 	bl	3904 <Light::Light()>
    3dba:	1c63      	adds	r3, r4, #1
    3dbc:	f105 0518 	add.w	r5, r5, #24
    3dc0:	d1f7      	bne.n	3db2 <LightSet::LightSet(int)+0x36>
    3dc2:	f8c7 8000 	str.w	r8, [r7]
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
    3dc6:	607e      	str	r6, [r7, #4]
}
    3dc8:	4638      	mov	r0, r7
    3dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

LightSet::LightSet(int ls_size) {
	Serial.println("Lightset init...");
	delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
	lightArray = new Light[ls_size];
    3dce:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    3dd2:	f005 fe99 	bl	9b08 <operator new[](unsigned int)>
    3dd6:	24ff      	movs	r4, #255	; 0xff
    3dd8:	4680      	mov	r8, r0
//}

LightSet::LightSet(int ls_size) {
	Serial.println("Lightset init...");
	delay(100);
	if (ls_size > MAX_COUNT) ls_size = MAX_COUNT;
    3dda:	f44f 7680 	mov.w	r6, #256	; 0x100
    3dde:	e7e7      	b.n	3db0 <LightSet::LightSet(int)+0x34>
	lightArray = new Light[ls_size];
    3de0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    3de4:	00c0      	lsls	r0, r0, #3
    3de6:	f005 fe8f 	bl	9b08 <operator new[](unsigned int)>
    3dea:	1e74      	subs	r4, r6, #1
    3dec:	1c62      	adds	r2, r4, #1
    3dee:	4680      	mov	r8, r0
    3df0:	d0e7      	beq.n	3dc2 <LightSet::LightSet(int)+0x46>
    3df2:	e7dd      	b.n	3db0 <LightSet::LightSet(int)+0x34>
    3df4:	000102b4 	.word	0x000102b4
    3df8:	1fff876c 	.word	0x1fff876c

00003dfc <LightSet::~LightSet()>:
	lightArray = larray;
	//lightChanges = new BitMappedSet(ls_size);
	_size = ls_size;
}

LightSet::~LightSet() {
    3dfc:	b510      	push	{r4, lr}
    3dfe:	4604      	mov	r4, r0
	delete[] lightArray;
    3e00:	6800      	ldr	r0, [r0, #0]
    3e02:	b108      	cbz	r0, 3e08 <LightSet::~LightSet()+0xc>
    3e04:	f005 fe82 	bl	9b0c <operator delete[](void*)>
	//delete lightChanges;
}
    3e08:	4620      	mov	r0, r4
    3e0a:	bd10      	pop	{r4, pc}

00003e0c <LightSet::getLight(int)>:
	return _size;
}

 //returns nullptr is <light> is too big
 Light* LightSet::getLight(int n) {
	 if (n >= _size) {
    3e0c:	6843      	ldr	r3, [r0, #4]
    3e0e:	428b      	cmp	r3, r1
    3e10:	dd05      	ble.n	3e1e <LightSet::getLight(int)+0x12>
		 String s = String(F("WARNING: LightSet::getLight(): invalid light number "));
		 s += n;
		 prWarning(s);
		 return nullptr;
	 }
	 return (n >= _size) ? nullptr : &lightArray[n];
    3e12:	6800      	ldr	r0, [r0, #0]
    3e14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3e18:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3e1c:	4770      	bx	lr
 int LightSet::getSize() {
	return _size;
}

 //returns nullptr is <light> is too big
 Light* LightSet::getLight(int n) {
    3e1e:	b510      	push	{r4, lr}
    3e20:	b084      	sub	sp, #16
    3e22:	460c      	mov	r4, r1
	 if (n >= _size) {
		 String s = String(F("WARNING: LightSet::getLight(): invalid light number "));
    3e24:	4668      	mov	r0, sp
    3e26:	4908      	ldr	r1, [pc, #32]	; (3e48 <LightSet::getLight(int)+0x3c>)
    3e28:	f005 ff9c 	bl	9d64 <String::String(__FlashStringHelper const*)>
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
	String & operator += (unsigned char c)		{return append((int)c);}
	String & operator += (int num)			{return append(num);}
    3e2c:	4621      	mov	r1, r4
    3e2e:	4668      	mov	r0, sp
    3e30:	f006 f874 	bl	9f1c <String::append(int)>
		 s += n;
		 prWarning(s);
    3e34:	4668      	mov	r0, sp
    3e36:	f000 f945 	bl	40c4 <msg::prWarning(String&)>
}

 //returns nullptr is <light> is too big
 Light* LightSet::getLight(int n) {
	 if (n >= _size) {
		 String s = String(F("WARNING: LightSet::getLight(): invalid light number "));
    3e3a:	4668      	mov	r0, sp
    3e3c:	f005 ff3e 	bl	9cbc <String::~String()>
		 s += n;
		 prWarning(s);
		 return nullptr;
    3e40:	2000      	movs	r0, #0
	 }
	 return (n >= _size) ? nullptr : &lightArray[n];
}
    3e42:	b004      	add	sp, #16
    3e44:	bd10      	pop	{r4, pc}
    3e46:	bf00      	nop
    3e48:	000102c8 	.word	0x000102c8

00003e4c <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)>:
	
}

// Updates all low-level "lamps" according to corresponding "lights" state.
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet *ls, byte from, byte to) {
    3e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e50:	4680      	mov	r8, r0
    3e52:	460f      	mov	r7, r1
    3e54:	4614      	mov	r4, r2
	bool lightState, lampState;
	byte sz;
	
	if (to == 0) sz = _size; else sz = to + 1;
    3e56:	bb13      	cbnz	r3, 3e9e <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x52>
    3e58:	7906      	ldrb	r6, [r0, #4]
	if (from >= sz) return;
    3e5a:	42a6      	cmp	r6, r4
    3e5c:	d906      	bls.n	3e6c <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x20>
	if (sz > _size) sz = _size;
    3e5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3e62:	429e      	cmp	r6, r3
    3e64:	dd13      	ble.n	3e8e <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x42>
    3e66:	b2de      	uxtb	r6, r3
	for (byte i = from; i < sz; i++) {
    3e68:	42b4      	cmp	r4, r6
    3e6a:	d310      	bcc.n	3e8e <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x42>
    3e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ls->isProtected(i)) continue;
		lightState = lightArray[i].on;
    3e70:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    3e74:	f8d8 2000 	ldr.w	r2, [r8]
		//lampState = ls->getState(i);
		//if (lampState != lightState) ls->setState(i, lightState);
		ls->setState(i, lightState);
    3e78:	4603      	mov	r3, r0
    3e7a:	4629      	mov	r1, r5
    3e7c:	f812 203e 	ldrb.w	r2, [r2, lr, lsl #3]
    3e80:	4638      	mov	r0, r7
    3e82:	f7fe faab 	bl	23dc <BitMappedSet::setState(unsigned short, bool, bool)>
	byte sz;
	
	if (to == 0) sz = _size; else sz = to + 1;
	if (from >= sz) return;
	if (sz > _size) sz = _size;
	for (byte i = from; i < sz; i++) {
    3e86:	3401      	adds	r4, #1
    3e88:	b2e4      	uxtb	r4, r4
    3e8a:	42b4      	cmp	r4, r6
    3e8c:	d2ee      	bcs.n	3e6c <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x20>
		if (ls->isProtected(i)) continue;
    3e8e:	b2a5      	uxth	r5, r4
    3e90:	4629      	mov	r1, r5
    3e92:	4638      	mov	r0, r7
    3e94:	f7fe fae8 	bl	2468 <BitMappedSet::isProtected(unsigned short)>
    3e98:	2800      	cmp	r0, #0
    3e9a:	d1f4      	bne.n	3e86 <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x3a>
    3e9c:	e7e8      	b.n	3e70 <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0x24>
// Protected lamps won't be updated.
void LightSet::renderToLamps(BitMappedSet *ls, byte from, byte to) {
	bool lightState, lampState;
	byte sz;
	
	if (to == 0) sz = _size; else sz = to + 1;
    3e9e:	3301      	adds	r3, #1
    3ea0:	b2de      	uxtb	r6, r3
    3ea2:	e7da      	b.n	3e5a <LightSet::renderToLamps(BitMappedSet*, unsigned char, unsigned char)+0xe>

00003ea4 <LightSet::update(unsigned long)>:
		ls->setState(i, lightState);
	}
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
    3ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool ret = false;
	for (byte i = 0; i < _size; i++) {
    3ea6:	6843      	ldr	r3, [r0, #4]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	dd15      	ble.n	3ed8 <LightSet::update(unsigned long)+0x34>
    3eac:	2400      	movs	r4, #0
    3eae:	460f      	mov	r7, r1
    3eb0:	4605      	mov	r5, r0
    3eb2:	4626      	mov	r6, r4
		if (lightArray[i].update(ms)) {
    3eb4:	682b      	ldr	r3, [r5, #0]
    3eb6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    3eba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3ebe:	4639      	mov	r1, r7
    3ec0:	f7ff fd8a 	bl	39d8 <Light::update(unsigned long)>
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool ret = false;
	for (byte i = 0; i < _size; i++) {
    3ec4:	3401      	adds	r4, #1
    3ec6:	686b      	ldr	r3, [r5, #4]
		if (lightArray[i].update(ms)) {
			//lightChanges->setState(i, true);
			ret = true;
    3ec8:	2800      	cmp	r0, #0
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool ret = false;
	for (byte i = 0; i < _size; i++) {
    3eca:	b2e4      	uxtb	r4, r4
		if (lightArray[i].update(ms)) {
			//lightChanges->setState(i, true);
			ret = true;
    3ecc:	bf18      	it	ne
    3ece:	2601      	movne	r6, #1
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool ret = false;
	for (byte i = 0; i < _size; i++) {
    3ed0:	429c      	cmp	r4, r3
    3ed2:	dbef      	blt.n	3eb4 <LightSet::update(unsigned long)+0x10>
			//lightChanges->setState(i, true);
			ret = true;
		}
	}
	return ret;
}
    3ed4:	4630      	mov	r0, r6
    3ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
}

// updates all non-steady mode lights state
 bool LightSet::update(uint32_t ms) {
	bool ret = false;
    3ed8:	2600      	movs	r6, #0
    3eda:	e7fb      	b.n	3ed4 <LightSet::update(unsigned long)+0x30>

00003edc <msg::clr()>:
	LiquidCrystalFast* lcdpt = nullptr;
	bool lcdOutputEnabled = false;
	bool serialOutputEnabled = false;
}

void msg::clr() {
    3edc:	b508      	push	{r3, lr}
	if (LCD_OK) lcdpt->clear();
    3ede:	4b0a      	ldr	r3, [pc, #40]	; (3f08 <msg::clr()+0x2c>)
    3ee0:	781b      	ldrb	r3, [r3, #0]
    3ee2:	b123      	cbz	r3, 3eee <msg::clr()+0x12>
    3ee4:	4b09      	ldr	r3, [pc, #36]	; (3f0c <msg::clr()+0x30>)
    3ee6:	6818      	ldr	r0, [r3, #0]
    3ee8:	b108      	cbz	r0, 3eee <msg::clr()+0x12>
    3eea:	f002 fb59 	bl	65a0 <LiquidCrystalFast::clear()>
	if (serialOutputEnabled) Serial.println(F("----------"));
    3eee:	4b08      	ldr	r3, [pc, #32]	; (3f10 <msg::clr()+0x34>)
    3ef0:	781b      	ldrb	r3, [r3, #0]
    3ef2:	b903      	cbnz	r3, 3ef6 <msg::clr()+0x1a>
    3ef4:	bd08      	pop	{r3, pc}
    3ef6:	210a      	movs	r1, #10
    3ef8:	4806      	ldr	r0, [pc, #24]	; (3f14 <msg::clr()+0x38>)
    3efa:	f005 fc0b 	bl	9714 <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    3efe:	4806      	ldr	r0, [pc, #24]	; (3f18 <msg::clr()+0x3c>)
	//delay(OUTPDELAY);
}
    3f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3f04:	f005 be44 	b.w	9b90 <Print::println()>
    3f08:	1fff92d4 	.word	0x1fff92d4
    3f0c:	1fff92d0 	.word	0x1fff92d0
    3f10:	1fff92cc 	.word	0x1fff92cc
    3f14:	00010350 	.word	0x00010350
    3f18:	1fff876c 	.word	0x1fff876c

00003f1c <msg::outp(__FlashStringHelper const*)>:
	if (LCD_OK) lcdpt->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	//delay(OUTPDELAY);
}

void msg::outp(const __FlashStringHelper *txt) {
    3f1c:	b538      	push	{r3, r4, r5, lr}
	if (LCD_OK) lcdpt->print(txt);
    3f1e:	4b0e      	ldr	r3, [pc, #56]	; (3f58 <msg::outp(__FlashStringHelper const*)+0x3c>)
    3f20:	781b      	ldrb	r3, [r3, #0]
	if (LCD_OK) lcdpt->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	//delay(OUTPDELAY);
}

void msg::outp(const __FlashStringHelper *txt) {
    3f22:	4604      	mov	r4, r0
	if (LCD_OK) lcdpt->print(txt);
    3f24:	b153      	cbz	r3, 3f3c <msg::outp(__FlashStringHelper const*)+0x20>
    3f26:	4b0d      	ldr	r3, [pc, #52]	; (3f5c <msg::outp(__FlashStringHelper const*)+0x40>)
    3f28:	681d      	ldr	r5, [r3, #0]
    3f2a:	b13d      	cbz	r5, 3f3c <msg::outp(__FlashStringHelper const*)+0x20>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3f2c:	f007 fea8 	bl	bc80 <strlen>
    3f30:	682b      	ldr	r3, [r5, #0]
    3f32:	4602      	mov	r2, r0
    3f34:	685b      	ldr	r3, [r3, #4]
    3f36:	4628      	mov	r0, r5
    3f38:	4621      	mov	r1, r4
    3f3a:	4798      	blx	r3
	if (serialOutputEnabled) Serial.print(txt);
    3f3c:	4b08      	ldr	r3, [pc, #32]	; (3f60 <msg::outp(__FlashStringHelper const*)+0x44>)
    3f3e:	781b      	ldrb	r3, [r3, #0]
    3f40:	b903      	cbnz	r3, 3f44 <msg::outp(__FlashStringHelper const*)+0x28>
    3f42:	bd38      	pop	{r3, r4, r5, pc}
    3f44:	4620      	mov	r0, r4
    3f46:	f007 fe9b 	bl	bc80 <strlen>
    3f4a:	4601      	mov	r1, r0
    3f4c:	4620      	mov	r0, r4
	//delay(OUTPDELAY);
}
    3f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3f52:	f005 bbdf 	b.w	9714 <usb_serial_write>
    3f56:	bf00      	nop
    3f58:	1fff92d4 	.word	0x1fff92d4
    3f5c:	1fff92d0 	.word	0x1fff92d0
    3f60:	1fff92cc 	.word	0x1fff92cc

00003f64 <msg::outp(char const*)>:
    3f64:	f7ff bfda 	b.w	3f1c <msg::outp(__FlashStringHelper const*)>

00003f68 <msg::outp(unsigned long)>:

void msg::outp(uint32_t n) {
	if (LCD_OK) lcdpt->print(n);
    3f68:	4b0c      	ldr	r3, [pc, #48]	; (3f9c <msg::outp(unsigned long)+0x34>)
    3f6a:	781b      	ldrb	r3, [r3, #0]
	if (LCD_OK) lcdpt->print(txt);
	if (serialOutputEnabled) Serial.print(txt);
	//delay(OUTPDELAY);
}

void msg::outp(uint32_t n) {
    3f6c:	b510      	push	{r4, lr}
    3f6e:	4604      	mov	r4, r0
	if (LCD_OK) lcdpt->print(n);
    3f70:	b13b      	cbz	r3, 3f82 <msg::outp(unsigned long)+0x1a>
    3f72:	4b0b      	ldr	r3, [pc, #44]	; (3fa0 <msg::outp(unsigned long)+0x38>)
    3f74:	6818      	ldr	r0, [r3, #0]
    3f76:	b120      	cbz	r0, 3f82 <msg::outp(unsigned long)+0x1a>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3f78:	2300      	movs	r3, #0
    3f7a:	220a      	movs	r2, #10
    3f7c:	4621      	mov	r1, r4
    3f7e:	f005 fe2d 	bl	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	if (serialOutputEnabled) Serial.print(n);
    3f82:	4b08      	ldr	r3, [pc, #32]	; (3fa4 <msg::outp(unsigned long)+0x3c>)
    3f84:	781b      	ldrb	r3, [r3, #0]
    3f86:	b903      	cbnz	r3, 3f8a <msg::outp(unsigned long)+0x22>
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	4621      	mov	r1, r4
    3f8c:	2300      	movs	r3, #0
    3f8e:	220a      	movs	r2, #10
    3f90:	4805      	ldr	r0, [pc, #20]	; (3fa8 <msg::outp(unsigned long)+0x40>)
	//delay(OUTPDELAY);
}
    3f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f96:	f005 be21 	b.w	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3f9a:	bf00      	nop
    3f9c:	1fff92d4 	.word	0x1fff92d4
    3fa0:	1fff92d0 	.word	0x1fff92d0
    3fa4:	1fff92cc 	.word	0x1fff92cc
    3fa8:	1fff876c 	.word	0x1fff876c

00003fac <msg::outpln(String&)>:
	if (LCD_OK) lcdpt->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	//delay(OUTPDELAY);
}

void msg::outpln(String& txt) {
    3fac:	b538      	push	{r3, r4, r5, lr}
	if (LCD_OK) lcdpt->println(txt);
    3fae:	4b0d      	ldr	r3, [pc, #52]	; (3fe4 <msg::outpln(String&)+0x38>)
    3fb0:	781b      	ldrb	r3, [r3, #0]
	if (LCD_OK) lcdpt->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	//delay(OUTPDELAY);
}

void msg::outpln(String& txt) {
    3fb2:	4604      	mov	r4, r0
	if (LCD_OK) lcdpt->println(txt);
    3fb4:	b14b      	cbz	r3, 3fca <msg::outpln(String&)+0x1e>
    3fb6:	4b0c      	ldr	r3, [pc, #48]	; (3fe8 <msg::outpln(String&)+0x3c>)
    3fb8:	681d      	ldr	r5, [r3, #0]
    3fba:	b135      	cbz	r5, 3fca <msg::outpln(String&)+0x1e>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    3fbc:	4601      	mov	r1, r0
    3fbe:	4628      	mov	r0, r5
    3fc0:	f005 fdc0 	bl	9b44 <Print::print(String const&)>
    3fc4:	4628      	mov	r0, r5
    3fc6:	f005 fde3 	bl	9b90 <Print::println()>
	if (serialOutputEnabled) Serial.println(txt);
    3fca:	4b08      	ldr	r3, [pc, #32]	; (3fec <msg::outpln(String&)+0x40>)
    3fcc:	781b      	ldrb	r3, [r3, #0]
    3fce:	b903      	cbnz	r3, 3fd2 <msg::outpln(String&)+0x26>
    3fd0:	bd38      	pop	{r3, r4, r5, pc}
    3fd2:	4621      	mov	r1, r4
    3fd4:	4806      	ldr	r0, [pc, #24]	; (3ff0 <msg::outpln(String&)+0x44>)
    3fd6:	f005 fdb5 	bl	9b44 <Print::print(String const&)>
    3fda:	4805      	ldr	r0, [pc, #20]	; (3ff0 <msg::outpln(String&)+0x44>)
	//delay(OUTPDELAY);
}
    3fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3fe0:	f005 bdd6 	b.w	9b90 <Print::println()>
    3fe4:	1fff92d4 	.word	0x1fff92d4
    3fe8:	1fff92d0 	.word	0x1fff92d0
    3fec:	1fff92cc 	.word	0x1fff92cc
    3ff0:	1fff876c 	.word	0x1fff876c

00003ff4 <msg::outpln(__FlashStringHelper const*)>:

void msg::outpln(const __FlashStringHelper *txt) {
    3ff4:	b538      	push	{r3, r4, r5, lr}
	if (LCD_OK) lcdpt->println(txt);
    3ff6:	4b11      	ldr	r3, [pc, #68]	; (403c <msg::outpln(__FlashStringHelper const*)+0x48>)
    3ff8:	781b      	ldrb	r3, [r3, #0]
	if (LCD_OK) lcdpt->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	//delay(OUTPDELAY);
}

void msg::outpln(const __FlashStringHelper *txt) {
    3ffa:	4604      	mov	r4, r0
	if (LCD_OK) lcdpt->println(txt);
    3ffc:	b16b      	cbz	r3, 401a <msg::outpln(__FlashStringHelper const*)+0x26>
    3ffe:	4b10      	ldr	r3, [pc, #64]	; (4040 <msg::outpln(__FlashStringHelper const*)+0x4c>)
    4000:	681d      	ldr	r5, [r3, #0]
    4002:	b155      	cbz	r5, 401a <msg::outpln(__FlashStringHelper const*)+0x26>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    4004:	f007 fe3c 	bl	bc80 <strlen>
    4008:	682b      	ldr	r3, [r5, #0]
    400a:	4602      	mov	r2, r0
    400c:	685b      	ldr	r3, [r3, #4]
    400e:	4621      	mov	r1, r4
    4010:	4628      	mov	r0, r5
    4012:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    4014:	4628      	mov	r0, r5
    4016:	f005 fdbb 	bl	9b90 <Print::println()>
	if (serialOutputEnabled) Serial.println(txt);
    401a:	4b0a      	ldr	r3, [pc, #40]	; (4044 <msg::outpln(__FlashStringHelper const*)+0x50>)
    401c:	781b      	ldrb	r3, [r3, #0]
    401e:	b903      	cbnz	r3, 4022 <msg::outpln(__FlashStringHelper const*)+0x2e>
    4020:	bd38      	pop	{r3, r4, r5, pc}
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    4022:	4620      	mov	r0, r4
    4024:	f007 fe2c 	bl	bc80 <strlen>
    4028:	4601      	mov	r1, r0
    402a:	4620      	mov	r0, r4
    402c:	f005 fb72 	bl	9714 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    4030:	4805      	ldr	r0, [pc, #20]	; (4048 <msg::outpln(__FlashStringHelper const*)+0x54>)
	//delay(OUTPDELAY);
}
    4032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4036:	f005 bdab 	b.w	9b90 <Print::println()>
    403a:	bf00      	nop
    403c:	1fff92d4 	.word	0x1fff92d4
    4040:	1fff92d0 	.word	0x1fff92d0
    4044:	1fff92cc 	.word	0x1fff92cc
    4048:	1fff876c 	.word	0x1fff876c

0000404c <msg::outpln(char const*)>:
    404c:	f7ff bfd2 	b.w	3ff4 <msg::outpln(__FlashStringHelper const*)>

00004050 <msg::outpln(unsigned long)>:

void msg::outpln(uint32_t n) {
    4050:	b538      	push	{r3, r4, r5, lr}
	if (LCD_OK) lcdpt->println(n);
    4052:	4b0f      	ldr	r3, [pc, #60]	; (4090 <msg::outpln(unsigned long)+0x40>)
    4054:	781b      	ldrb	r3, [r3, #0]
	if (LCD_OK) lcdpt->println(txt);
	if (serialOutputEnabled) Serial.println(txt);
	//delay(OUTPDELAY);
}

void msg::outpln(uint32_t n) {
    4056:	4604      	mov	r4, r0
	if (LCD_OK) lcdpt->println(n);
    4058:	b15b      	cbz	r3, 4072 <msg::outpln(unsigned long)+0x22>
    405a:	4b0e      	ldr	r3, [pc, #56]	; (4094 <msg::outpln(unsigned long)+0x44>)
    405c:	681d      	ldr	r5, [r3, #0]
    405e:	b145      	cbz	r5, 4072 <msg::outpln(unsigned long)+0x22>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4060:	4601      	mov	r1, r0
    4062:	2300      	movs	r3, #0
    4064:	220a      	movs	r2, #10
    4066:	4628      	mov	r0, r5
    4068:	f005 fdb8 	bl	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    406c:	4628      	mov	r0, r5
    406e:	f005 fd8f 	bl	9b90 <Print::println()>
	if (serialOutputEnabled) Serial.println(n);
    4072:	4b09      	ldr	r3, [pc, #36]	; (4098 <msg::outpln(unsigned long)+0x48>)
    4074:	781b      	ldrb	r3, [r3, #0]
    4076:	b903      	cbnz	r3, 407a <msg::outpln(unsigned long)+0x2a>
    4078:	bd38      	pop	{r3, r4, r5, pc}

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    407a:	4621      	mov	r1, r4
    407c:	2300      	movs	r3, #0
    407e:	220a      	movs	r2, #10
    4080:	4806      	ldr	r0, [pc, #24]	; (409c <msg::outpln(unsigned long)+0x4c>)
    4082:	f005 fdab 	bl	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4086:	4805      	ldr	r0, [pc, #20]	; (409c <msg::outpln(unsigned long)+0x4c>)
	//delay(OUTPDELAY);
}
    4088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    408c:	f005 bd80 	b.w	9b90 <Print::println()>
    4090:	1fff92d4 	.word	0x1fff92d4
    4094:	1fff92d0 	.word	0x1fff92d0
    4098:	1fff92cc 	.word	0x1fff92cc
    409c:	1fff876c 	.word	0x1fff876c

000040a0 <msg::prError(String&)>:
	outp(WARN_MSG);
	outpln(txt);
	delay(MSG_DELAY);
}

void msg::prError(String& txt) {
    40a0:	b510      	push	{r4, lr}
	outp(WARN_MSG);
    40a2:	4b07      	ldr	r3, [pc, #28]	; (40c0 <msg::prError(String&)+0x20>)
	outp(WARN_MSG);
	outpln(txt);
	delay(MSG_DELAY);
}

void msg::prError(String& txt) {
    40a4:	4604      	mov	r4, r0
	outp(WARN_MSG);
    40a6:	6818      	ldr	r0, [r3, #0]
    40a8:	f7ff ff38 	bl	3f1c <msg::outp(__FlashStringHelper const*)>
	outpln(txt);
    40ac:	4620      	mov	r0, r4
    40ae:	f7ff ff7d 	bl	3fac <msg::outpln(String&)>
	delay(MSG_DELAY);
    40b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
    40b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void msg::prError(String& txt) {
	outp(WARN_MSG);
	outpln(txt);
	delay(MSG_DELAY);
    40ba:	f004 bb11 	b.w	86e0 <delay>
    40be:	bf00      	nop
    40c0:	1fff8724 	.word	0x1fff8724

000040c4 <msg::prWarning(String&)>:
    40c4:	f7ff bfec 	b.w	40a0 <msg::prError(String&)>

000040c8 <msg::prError(__FlashStringHelper const*)>:
}

void msg::prError(const __FlashStringHelper* txt) {
    40c8:	b510      	push	{r4, lr}
	outp(WARN_MSG);
    40ca:	4b07      	ldr	r3, [pc, #28]	; (40e8 <msg::prError(__FlashStringHelper const*)+0x20>)
	outp(WARN_MSG);
	outpln(txt);
	delay(MSG_DELAY);
}

void msg::prError(const __FlashStringHelper* txt) {
    40cc:	4604      	mov	r4, r0
	outp(WARN_MSG);
    40ce:	6818      	ldr	r0, [r3, #0]
    40d0:	f7ff ff24 	bl	3f1c <msg::outp(__FlashStringHelper const*)>
	outpln(txt);
    40d4:	4620      	mov	r0, r4
    40d6:	f7ff ff8d 	bl	3ff4 <msg::outpln(__FlashStringHelper const*)>
	delay(MSG_DELAY);
    40da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
    40de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void msg::prError(const __FlashStringHelper* txt) {
	outp(WARN_MSG);
	outpln(txt);
	delay(MSG_DELAY);
    40e2:	f004 bafd 	b.w	86e0 <delay>
    40e6:	bf00      	nop
    40e8:	1fff8724 	.word	0x1fff8724

000040ec <msg::prWarning(__FlashStringHelper const*)>:
    40ec:	f7ff bfec 	b.w	40c8 <msg::prError(__FlashStringHelper const*)>

000040f0 <msg::prWarning(char const*)>:
    40f0:	f7ff bfea 	b.w	40c8 <msg::prError(__FlashStringHelper const*)>

000040f4 <msg::prFreeMem()>:
}

void msg::prFreeMem() {
    40f4:	b508      	push	{r3, lr}
	outp(freeMemory());
    40f6:	f001 f91f 	bl	5338 <freeMemory>
    40fa:	f7ff ff35 	bl	3f68 <msg::outp(unsigned long)>
	outpln(" byte free.");
    40fe:	4802      	ldr	r0, [pc, #8]	; (4108 <msg::prFreeMem()+0x14>)
}
    4100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay(MSG_DELAY);
}

void msg::prFreeMem() {
	outp(freeMemory());
	outpln(" byte free.");
    4104:	f7ff bf76 	b.w	3ff4 <msg::outpln(__FlashStringHelper const*)>
    4108:	0001035c 	.word	0x0001035c

0000410c <SolenoidSet::SolenoidSet(unsigned char)>:
	delay(100);
	_solenoid = nullptr;
	_size = 0;
}

SolenoidSet::SolenoidSet(byte n) {
    410c:	b570      	push	{r4, r5, r6, lr}
    410e:	460c      	mov	r4, r1
    4110:	4606      	mov	r6, r0
    4112:	2116      	movs	r1, #22
    4114:	481a      	ldr	r0, [pc, #104]	; (4180 <SolenoidSet::SolenoidSet(unsigned char)+0x74>)
    4116:	f005 fafd 	bl	9714 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    411a:	481a      	ldr	r0, [pc, #104]	; (4184 <SolenoidSet::SolenoidSet(unsigned char)+0x78>)
    411c:	f005 fd38 	bl	9b90 <Print::println()>
	Serial.println("SolenoidSet(n) init...");
	delay(100);
    4120:	2064      	movs	r0, #100	; 0x64
    4122:	f004 fadd 	bl	86e0 <delay>
	if (n == 0 || n >= MAX_COUNT) {
    4126:	1e63      	subs	r3, r4, #1
    4128:	2b1e      	cmp	r3, #30
    412a:	d823      	bhi.n	4174 <SolenoidSet::SolenoidSet(unsigned char)+0x68>
		_solenoid = nullptr;
		_size = 0;
		return;
	}
	_solenoid = new Solenoid[n];
    412c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    4130:	00c0      	lsls	r0, r0, #3
    4132:	f005 fce9 	bl	9b08 <operator new[](unsigned int)>
    4136:	2200      	movs	r2, #0
    4138:	f100 0318 	add.w	r3, r0, #24
#include "Arduino.h"
#include "BitMappedSet.h"

//class Solenoid;

struct Solenoid {
    413c:	4611      	mov	r1, r2
    413e:	f241 3588 	movw	r5, #5000	; 0x1388
    4142:	3201      	adds	r2, #1
    4144:	4294      	cmp	r4, r2
    4146:	f803 1c18 	strb.w	r1, [r3, #-24]
    414a:	f843 1c14 	str.w	r1, [r3, #-20]
    414e:	f823 1c10 	strh.w	r1, [r3, #-16]
    4152:	f823 5c0e 	strh.w	r5, [r3, #-14]
    4156:	f103 0318 	add.w	r3, r3, #24
    415a:	d1f2      	bne.n	4142 <SolenoidSet::SolenoidSet(unsigned char)+0x36>
    415c:	6030      	str	r0, [r6, #0]
	_state = new BitMappedSet(n);
    415e:	2010      	movs	r0, #16
    4160:	f005 fcd0 	bl	9b04 <operator new(unsigned int)>
    4164:	4621      	mov	r1, r4
    4166:	4605      	mov	r5, r0
    4168:	f7fe f916 	bl	2398 <BitMappedSet::BitMappedSet(unsigned short)>
	_size = n;
    416c:	7234      	strb	r4, [r6, #8]
		_solenoid = nullptr;
		_size = 0;
		return;
	}
	_solenoid = new Solenoid[n];
	_state = new BitMappedSet(n);
    416e:	6075      	str	r5, [r6, #4]
	_size = n;
}
    4170:	4630      	mov	r0, r6
    4172:	bd70      	pop	{r4, r5, r6, pc}

SolenoidSet::SolenoidSet(byte n) {
	Serial.println("SolenoidSet(n) init...");
	delay(100);
	if (n == 0 || n >= MAX_COUNT) {
		_solenoid = nullptr;
    4174:	2300      	movs	r3, #0
		_size = 0;
    4176:	7233      	strb	r3, [r6, #8]

SolenoidSet::SolenoidSet(byte n) {
	Serial.println("SolenoidSet(n) init...");
	delay(100);
	if (n == 0 || n >= MAX_COUNT) {
		_solenoid = nullptr;
    4178:	6033      	str	r3, [r6, #0]
		return;
	}
	_solenoid = new Solenoid[n];
	_state = new BitMappedSet(n);
	_size = n;
}
    417a:	4630      	mov	r0, r6
    417c:	bd70      	pop	{r4, r5, r6, pc}
    417e:	bf00      	nop
    4180:	00010394 	.word	0x00010394
    4184:	1fff876c 	.word	0x1fff876c

00004188 <SolenoidSet::~SolenoidSet()>:

SolenoidSet::~SolenoidSet() {
    4188:	b538      	push	{r3, r4, r5, lr}
    418a:	4604      	mov	r4, r0
	delete[] _solenoid;
    418c:	6800      	ldr	r0, [r0, #0]
    418e:	b108      	cbz	r0, 4194 <SolenoidSet::~SolenoidSet()+0xc>
    4190:	f005 fcbc 	bl	9b0c <operator delete[](void*)>
	delete _state;
    4194:	6865      	ldr	r5, [r4, #4]
    4196:	b135      	cbz	r5, 41a6 <SolenoidSet::~SolenoidSet()+0x1e>
    4198:	4628      	mov	r0, r5
    419a:	f7fe f8d7 	bl	234c <BitMappedSet::~BitMappedSet()>
    419e:	4628      	mov	r0, r5
    41a0:	2110      	movs	r1, #16
    41a2:	f005 fcb5 	bl	9b10 <operator delete(void*, unsigned int)>
}
    41a6:	4620      	mov	r0, r4
    41a8:	bd38      	pop	{r3, r4, r5, pc}
    41aa:	bf00      	nop

000041ac <SolenoidSet::_switch(unsigned char, bool)>:
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state) {
	Solenoid& sol = _solenoid[n];
    41ac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
byte SolenoidSet::getSize() {
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state) {
    41b0:	b570      	push	{r4, r5, r6, lr}
	Solenoid& sol = _solenoid[n];
    41b2:	00db      	lsls	r3, r3, #3
    41b4:	6804      	ldr	r4, [r0, #0]
	if (sol.active == state) return false;
    41b6:	5ce5      	ldrb	r5, [r4, r3]
    41b8:	4295      	cmp	r5, r2
byte SolenoidSet::getSize() {
	return _size;
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state) {
    41ba:	b082      	sub	sp, #8
	Solenoid& sol = _solenoid[n];
    41bc:	eb04 0603 	add.w	r6, r4, r3
	if (sol.active == state) return false;
    41c0:	d012      	beq.n	41e8 <SolenoidSet::_switch(unsigned char, bool)+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41c2:	4d0b      	ldr	r5, [pc, #44]	; (41f0 <SolenoidSet::_switch(unsigned char, bool)+0x44>)
    41c4:	682d      	ldr	r5, [r5, #0]
    41c6:	9501      	str	r5, [sp, #4]
	uint32_t t = millis();
	sol.active = state;
    41c8:	54e2      	strb	r2, [r4, r3]
	return ret;
    41ca:	9b01      	ldr	r3, [sp, #4]
	if (state) sol.swOnTime = t;
    41cc:	b952      	cbnz	r2, 41e4 <SolenoidSet::_switch(unsigned char, bool)+0x38>
	else sol.swOffTime = t;
    41ce:	6173      	str	r3, [r6, #20]
    41d0:	4605      	mov	r5, r0
	_state->setState(n, state);
    41d2:	2300      	movs	r3, #0
    41d4:	6840      	ldr	r0, [r0, #4]
    41d6:	460c      	mov	r4, r1
    41d8:	f7fe f900 	bl	23dc <BitMappedSet::setState(unsigned short, bool, bool)>
	_lastChanged = n;
	return true;
    41dc:	2001      	movs	r0, #1
	uint32_t t = millis();
	sol.active = state;
	if (state) sol.swOnTime = t;
	else sol.swOffTime = t;
	_state->setState(n, state);
	_lastChanged = n;
    41de:	726c      	strb	r4, [r5, #9]
	return true;
}
    41e0:	b002      	add	sp, #8
    41e2:	bd70      	pop	{r4, r5, r6, pc}
bool SolenoidSet::_switch(byte n, bool state) {
	Solenoid& sol = _solenoid[n];
	if (sol.active == state) return false;
	uint32_t t = millis();
	sol.active = state;
	if (state) sol.swOnTime = t;
    41e4:	6133      	str	r3, [r6, #16]
    41e6:	e7f3      	b.n	41d0 <SolenoidSet::_switch(unsigned char, bool)+0x24>
}

// sets a solenoid state, updating internal variables
bool SolenoidSet::_switch(byte n, bool state) {
	Solenoid& sol = _solenoid[n];
	if (sol.active == state) return false;
    41e8:	2000      	movs	r0, #0
	if (state) sol.swOnTime = t;
	else sol.swOffTime = t;
	_state->setState(n, state);
	_lastChanged = n;
	return true;
}
    41ea:	b002      	add	sp, #8
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    41ee:	bf00      	nop
    41f0:	1fff959c 	.word	0x1fff959c

000041f4 <SolenoidSet::setState(unsigned char, bool) [clone .part.1]>:

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
    41f4:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41f6:	4b0d      	ldr	r3, [pc, #52]	; (422c <SolenoidSet::setState(unsigned char, bool) [clone .part.1]+0x38>)
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    41f8:	6805      	ldr	r5, [r0, #0]
    41fa:	681b      	ldr	r3, [r3, #0]
	return true;
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
    41fc:	b083      	sub	sp, #12
    41fe:	9301      	str	r3, [sp, #4]
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
    4200:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    4204:	00db      	lsls	r3, r3, #3
    4206:	18ec      	adds	r4, r5, r3
	sol.settingTime = millis();
	sol.swOnDelay = 0;
	sol.activePeriod = 0;
	if (sol.active == state) return false;
    4208:	5ced      	ldrb	r5, [r5, r3]
	return ret;
    420a:	9b01      	ldr	r3, [sp, #4]
// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
    420c:	6063      	str	r3, [r4, #4]
	sol.swOnDelay = 0;
	sol.activePeriod = 0;
	if (sol.active == state) return false;
    420e:	4295      	cmp	r5, r2
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	sol.swOnDelay = 0;
    4210:	f04f 0300 	mov.w	r3, #0
    4214:	81a3      	strh	r3, [r4, #12]
	sol.activePeriod = 0;
    4216:	8123      	strh	r3, [r4, #8]
	if (sol.active == state) return false;
    4218:	d004      	beq.n	4224 <SolenoidSet::setState(unsigned char, bool) [clone .part.1]+0x30>
	_switch(n, state);
    421a:	f7ff ffc7 	bl	41ac <SolenoidSet::_switch(unsigned char, bool)>
	return true;
    421e:	2001      	movs	r0, #1
}
    4220:	b003      	add	sp, #12
    4222:	bd30      	pop	{r4, r5, pc}
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	sol.swOnDelay = 0;
	sol.activePeriod = 0;
	if (sol.active == state) return false;
    4224:	4618      	mov	r0, r3
	_switch(n, state);
	return true;
}
    4226:	b003      	add	sp, #12
    4228:	bd30      	pop	{r4, r5, pc}
    422a:	bf00      	nop
    422c:	1fff959c 	.word	0x1fff959c

00004230 <SolenoidSet::setState(unsigned char, bool)>:
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
    4230:	7a03      	ldrb	r3, [r0, #8]
    4232:	428b      	cmp	r3, r1
    4234:	d901      	bls.n	423a <SolenoidSet::setState(unsigned char, bool)+0xa>
    4236:	f7ff bfdd 	b.w	41f4 <SolenoidSet::setState(unsigned char, bool) [clone .part.1]>
	sol.swOnDelay = 0;
	sol.activePeriod = 0;
	if (sol.active == state) return false;
	_switch(n, state);
	return true;
}
    423a:	2000      	movs	r0, #0
    423c:	4770      	bx	lr
    423e:	bf00      	nop

00004240 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)>:
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4240:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (n >= _size) return false;
    4242:	7a07      	ldrb	r7, [r0, #8]
    4244:	428f      	cmp	r7, r1
	return activate(n, 0, delay);
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
    4246:	b083      	sub	sp, #12
	if (n >= _size) return false;
    4248:	d911      	bls.n	426e <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)+0x2e>
    424a:	461e      	mov	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    424c:	4b0b      	ldr	r3, [pc, #44]	; (427c <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)+0x3c>)
	Solenoid& sol = _solenoid[n];
    424e:	6805      	ldr	r5, [r0, #0]
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	9301      	str	r3, [sp, #4]
    4254:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    4258:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
	return ret;
    425c:	9b01      	ldr	r3, [sp, #4]
	sol.settingTime = millis();
    425e:	6063      	str	r3, [r4, #4]
    4260:	4617      	mov	r7, r2
	if (delay == 0) _switch(n, true);
    4262:	b13e      	cbz	r6, 4274 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)+0x34>
	sol.activePeriod = actPeriod;
	sol.swOnDelay = delay;
    4264:	2001      	movs	r0, #1
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	if (delay == 0) _switch(n, true);
	sol.activePeriod = actPeriod;
    4266:	8127      	strh	r7, [r4, #8]
	sol.swOnDelay = delay;
    4268:	81a6      	strh	r6, [r4, #12]
	return true;
}
    426a:	b003      	add	sp, #12
    426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
	if (n >= _size) return false;
    426e:	2000      	movs	r0, #0
	sol.settingTime = millis();
	if (delay == 0) _switch(n, true);
	sol.activePeriod = actPeriod;
	sol.swOnDelay = delay;
	return true;
}
    4270:	b003      	add	sp, #12
    4272:	bdf0      	pop	{r4, r5, r6, r7, pc}
// solenoid state will switch after the specified delay.
bool SolenoidSet::activate(byte n, uint16_t actPeriod, uint16_t delay) {
	if (n >= _size) return false;
	Solenoid& sol = _solenoid[n];
	sol.settingTime = millis();
	if (delay == 0) _switch(n, true);
    4274:	2201      	movs	r2, #1
    4276:	f7ff ff99 	bl	41ac <SolenoidSet::_switch(unsigned char, bool)>
    427a:	e7f3      	b.n	4264 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)+0x24>
    427c:	1fff959c 	.word	0x1fff959c

00004280 <SolenoidSet::resetAll()>:
	sol.swOnDelay = delay;
	return true;
}

// resets all solenoids
 void SolenoidSet::resetAll() {
    4280:	b538      	push	{r3, r4, r5, lr}
	for (byte n = 0; n < _size; n++) setState(n, false);
    4282:	7a03      	ldrb	r3, [r0, #8]
    4284:	b193      	cbz	r3, 42ac <SolenoidSet::resetAll()+0x2c>
    4286:	4605      	mov	r5, r0
    4288:	2400      	movs	r4, #0
    428a:	e003      	b.n	4294 <SolenoidSet::resetAll()+0x14>
    428c:	3401      	adds	r4, #1
    428e:	b2e4      	uxtb	r4, r4
    4290:	42a3      	cmp	r3, r4
    4292:	d90b      	bls.n	42ac <SolenoidSet::resetAll()+0x2c>
}

// Sets a solenoid state immediately.
// If state == true, solenoid is switched on for an undefined _period.
bool SolenoidSet::setState(byte n, bool state) {
	if (n >= _size) return false;
    4294:	429c      	cmp	r4, r3
    4296:	d2f9      	bcs.n	428c <SolenoidSet::resetAll()+0xc>
    4298:	4621      	mov	r1, r4
    429a:	2200      	movs	r2, #0
    429c:	4628      	mov	r0, r5
    429e:	f7ff ffa9 	bl	41f4 <SolenoidSet::setState(unsigned char, bool) [clone .part.1]>
	return true;
}

// resets all solenoids
 void SolenoidSet::resetAll() {
	for (byte n = 0; n < _size; n++) setState(n, false);
    42a2:	3401      	adds	r4, #1
    42a4:	7a2b      	ldrb	r3, [r5, #8]
    42a6:	b2e4      	uxtb	r4, r4
    42a8:	42a3      	cmp	r3, r4
    42aa:	d8f3      	bhi.n	4294 <SolenoidSet::resetAll()+0x14>
    42ac:	bd38      	pop	{r3, r4, r5, pc}
    42ae:	bf00      	nop

000042b0 <SolenoidSet::update(unsigned long&)>:
}

// returns true on changes
bool SolenoidSet::update(uint32_t& t) {
    42b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    42b4:	7a02      	ldrb	r2, [r0, #8]
    42b6:	2a00      	cmp	r2, #0
    42b8:	d056      	beq.n	4368 <SolenoidSet::update(unsigned long&)+0xb8>
    42ba:	2500      	movs	r5, #0
    42bc:	4688      	mov	r8, r1
    42be:	4607      	mov	r7, r0
    42c0:	462e      	mov	r6, r5
    42c2:	46ae      	mov	lr, r5
    42c4:	e00e      	b.n	42e4 <SolenoidSet::update(unsigned long&)+0x34>
		sol = &_solenoid[i];
		changedState = false;
		if (sol->active) { // solenoid activated ?
			// check if solenoid is active for too long time
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
    42c6:	8960      	ldrh	r0, [r4, #10]
    42c8:	b128      	cbz	r0, 42d6 <SolenoidSet::update(unsigned long&)+0x26>
    42ca:	f8d8 3000 	ldr.w	r3, [r8]
    42ce:	6921      	ldr	r1, [r4, #16]
    42d0:	1a5b      	subs	r3, r3, r1
    42d2:	4283      	cmp	r3, r0
    42d4:	d837      	bhi.n	4346 <SolenoidSet::update(unsigned long&)+0x96>
				_switch(i, false);
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    42d6:	8923      	ldrh	r3, [r4, #8]
    42d8:	bb33      	cbnz	r3, 4328 <SolenoidSet::update(unsigned long&)+0x78>
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    42da:	3601      	adds	r6, #1
    42dc:	42b2      	cmp	r2, r6
    42de:	f105 0518 	add.w	r5, r5, #24
    42e2:	dd1e      	ble.n	4322 <SolenoidSet::update(unsigned long&)+0x72>
		sol = &_solenoid[i];
    42e4:	683c      	ldr	r4, [r7, #0]
		changedState = false;
		if (sol->active) { // solenoid activated ?
    42e6:	5d63      	ldrb	r3, [r4, r5]
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
		sol = &_solenoid[i];
    42e8:	442c      	add	r4, r5
		changedState = false;
		if (sol->active) { // solenoid activated ?
    42ea:	2b00      	cmp	r3, #0
    42ec:	d1eb      	bne.n	42c6 <SolenoidSet::update(unsigned long&)+0x16>
				_switch(i, false);
				changedState = true;
			}
		}
		// check if solenoid should switch on after a delay (on active == false)
		else if ((sol->swOnDelay > 0) && (t - sol->settingTime) >= sol->swOnDelay) {
    42ee:	89a3      	ldrh	r3, [r4, #12]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d0f2      	beq.n	42da <SolenoidSet::update(unsigned long&)+0x2a>
    42f4:	6860      	ldr	r0, [r4, #4]
    42f6:	f8d8 1000 	ldr.w	r1, [r8]
    42fa:	1a09      	subs	r1, r1, r0
    42fc:	4299      	cmp	r1, r3
    42fe:	d3ec      	bcc.n	42da <SolenoidSet::update(unsigned long&)+0x2a>
			_switch(i, true);
    4300:	fa5f f986 	uxtb.w	r9, r6
    4304:	4649      	mov	r1, r9
    4306:	2201      	movs	r2, #1
    4308:	4638      	mov	r0, r7
    430a:	f7ff ff4f 	bl	41ac <SolenoidSet::_switch(unsigned char, bool)>
    430e:	7a3a      	ldrb	r2, [r7, #8]
			changedState = true;
		}

		if (changedState) {
			_lastChanged = i;
    4310:	f887 9009 	strb.w	r9, [r7, #9]
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4314:	3601      	adds	r6, #1
    4316:	42b2      	cmp	r2, r6
			changedState = true;
		}

		if (changedState) {
			_lastChanged = i;
			changes = true;
    4318:	f04f 0e01 	mov.w	lr, #1
    431c:	f105 0518 	add.w	r5, r5, #24
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
	bool changedState;
	Solenoid* sol;

	for (int i = 0; i < _size; i++) {
    4320:	dce0      	bgt.n	42e4 <SolenoidSet::update(unsigned long&)+0x34>
	//		changes = true;
	//	}
	//}

	return changes;
}
    4322:	4670      	mov	r0, lr
    4324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
				_switch(i, false);
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4328:	6920      	ldr	r0, [r4, #16]
    432a:	f8d8 1000 	ldr.w	r1, [r8]
    432e:	1a09      	subs	r1, r1, r0
    4330:	428b      	cmp	r3, r1
    4332:	bf38      	it	cc
    4334:	fa5f f986 	uxtbcc.w	r9, r6
    4338:	d2cf      	bcs.n	42da <SolenoidSet::update(unsigned long&)+0x2a>
				_switch(i, false);
    433a:	2200      	movs	r2, #0
    433c:	4649      	mov	r1, r9
    433e:	4638      	mov	r0, r7
    4340:	f7ff ff34 	bl	41ac <SolenoidSet::_switch(unsigned char, bool)>
    4344:	e7e3      	b.n	430e <SolenoidSet::update(unsigned long&)+0x5e>
		sol = &_solenoid[i];
		changedState = false;
		if (sol->active) { // solenoid activated ?
			// check if solenoid is active for too long time
			if (sol->maxActivePeriod > 0 && (t - sol->swOnTime) > sol->maxActivePeriod) {
				_switch(i, false);
    4346:	fa5f f986 	uxtb.w	r9, r6
    434a:	2200      	movs	r2, #0
    434c:	4649      	mov	r1, r9
    434e:	4638      	mov	r0, r7
    4350:	f7ff ff2c 	bl	41ac <SolenoidSet::_switch(unsigned char, bool)>
				changedState = true;
			}
			// check if solenoid activation time is over
			if (sol->activePeriod > 0 && (t - sol->swOnTime) > sol->activePeriod) {
    4354:	8922      	ldrh	r2, [r4, #8]
    4356:	2a00      	cmp	r2, #0
    4358:	d0d9      	beq.n	430e <SolenoidSet::update(unsigned long&)+0x5e>
    435a:	6921      	ldr	r1, [r4, #16]
    435c:	f8d8 3000 	ldr.w	r3, [r8]
    4360:	1a5b      	subs	r3, r3, r1
    4362:	4293      	cmp	r3, r2
    4364:	d9d3      	bls.n	430e <SolenoidSet::update(unsigned long&)+0x5e>
    4366:	e7e8      	b.n	433a <SolenoidSet::update(unsigned long&)+0x8a>
	for (byte n = 0; n < _size; n++) setState(n, false);
}

// returns true on changes
bool SolenoidSet::update(uint32_t& t) {
	bool changes = false;
    4368:	4696      	mov	lr, r2
	//		_lastChanged = i;
	//		changes = true;
	//	}
	//}

	return changes;
    436a:	e7da      	b.n	4322 <SolenoidSet::update(unsigned long&)+0x72>

0000436c <SolenoidSet::getStateBits()>:
//	return false;
//}

// Returns a 32-bit word with actual solenoid states coded in its bits:
// bit n contains state of solenoid n.
uint32_t SolenoidSet::getStateBits() {
    436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t bits = 0;
	for (byte i = 0; i*8 < _size; i++) bits |= ((uint32_t)_state->getStates8(i) << (8 * i));
    436e:	7a06      	ldrb	r6, [r0, #8]
    4370:	b186      	cbz	r6, 4394 <SolenoidSet::getStateBits()+0x28>
    4372:	2500      	movs	r5, #0
    4374:	4607      	mov	r7, r0
    4376:	462c      	mov	r4, r5
    4378:	462e      	mov	r6, r5
    437a:	4621      	mov	r1, r4
    437c:	6878      	ldr	r0, [r7, #4]
    437e:	f7fe f893 	bl	24a8 <BitMappedSet::getStates8(unsigned short)>
    4382:	3401      	adds	r4, #1
    4384:	b2e4      	uxtb	r4, r4
    4386:	7a3b      	ldrb	r3, [r7, #8]
    4388:	40a8      	lsls	r0, r5
    438a:	00e5      	lsls	r5, r4, #3
    438c:	429d      	cmp	r5, r3
    438e:	ea46 0600 	orr.w	r6, r6, r0
    4392:	dbf2      	blt.n	437a <SolenoidSet::getStateBits()+0xe>
	return bits;
}
    4394:	4630      	mov	r0, r6
    4396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004398 <SwitchGrid8x8::SwitchGrid8x8()>:
* 8x8 pinball switch grid I/O functions.
*/

#include "SwitchGrid8x8.h"

SwitchGrid8x8::SwitchGrid8x8() {
    4398:	b4f0      	push	{r4, r5, r6, r7}
    439a:	f200 270b 	addw	r7, r0, #523	; 0x20b
    439e:	463e      	mov	r6, r7
    43a0:	f200 2503 	addw	r5, r0, #515	; 0x203
    43a4:	4603      	mov	r3, r0
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
    43a6:	2200      	movs	r2, #0
    43a8:	f805 2f01 	strb.w	r2, [r5, #1]!
		returns_changed[i] = 0;
    43ac:	f806 2f01 	strb.w	r2, [r6, #1]!
    43b0:	f103 0120 	add.w	r1, r3, #32
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
    43b4:	f843 2f04 	str.w	r2, [r3, #4]!
    43b8:	428b      	cmp	r3, r1
    43ba:	f04f 0400 	mov.w	r4, #0
    43be:	d1f9      	bne.n	43b4 <SwitchGrid8x8::SwitchGrid8x8()+0x1c>

SwitchGrid8x8::SwitchGrid8x8() {
	int i, j;

	//lastRowChanged = 0xff;
	for (i = 0; i < 8; i++) {
    43c0:	42bd      	cmp	r5, r7
    43c2:	d1f1      	bne.n	43a8 <SwitchGrid8x8::SwitchGrid8x8()+0x10>
		returns_latch[i] = 0;
		returns_changed[i] = 0;
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
	}
	lastSwitchChanged = 0xff;
    43c4:	23ff      	movs	r3, #255	; 0xff
	_strobe = 0;
    43c6:	f880 4214 	strb.w	r4, [r0, #532]	; 0x214
	for (i = 0; i < 8; i++) {
		returns_latch[i] = 0;
		returns_changed[i] = 0;
		for (j=0; j<8; j++) swChangeTime[i][j] = 0;
	}
	lastSwitchChanged = 0xff;
    43ca:	7043      	strb	r3, [r0, #1]
	_strobe = 0;
}
    43cc:	bcf0      	pop	{r4, r5, r6, r7}
    43ce:	4770      	bx	lr

000043d0 <SwitchGrid8x8::~SwitchGrid8x8()>:

SwitchGrid8x8::~SwitchGrid8x8() {
    43d0:	b510      	push	{r4, lr}
    43d2:	4604      	mov	r4, r0
	delete[] returns_latch;
    43d4:	f510 7001 	adds.w	r0, r0, #516	; 0x204
    43d8:	d001      	beq.n	43de <SwitchGrid8x8::~SwitchGrid8x8()+0xe>
    43da:	f005 fb97 	bl	9b0c <operator delete[](void*)>
	delete[] returns_changed;
    43de:	f514 7003 	adds.w	r0, r4, #524	; 0x20c
    43e2:	d001      	beq.n	43e8 <SwitchGrid8x8::~SwitchGrid8x8()+0x18>
    43e4:	f005 fb92 	bl	9b0c <operator delete[](void*)>
	delete[] swChangeTime;
    43e8:	1d20      	adds	r0, r4, #4
    43ea:	d001      	beq.n	43f0 <SwitchGrid8x8::~SwitchGrid8x8()+0x20>
    43ec:	f005 fb8e 	bl	9b0c <operator delete[](void*)>
}
    43f0:	4620      	mov	r0, r4
    43f2:	bd10      	pop	{r4, pc}

000043f4 <SwitchGrid8x8::incrementStrobe()>:

byte SwitchGrid8x8::incrementStrobe() {
	if (++_strobe > 7) _strobe = 0;
    43f4:	f890 3214 	ldrb.w	r3, [r0, #532]	; 0x214
    43f8:	3301      	adds	r3, #1
	delete[] returns_latch;
	delete[] returns_changed;
	delete[] swChangeTime;
}

byte SwitchGrid8x8::incrementStrobe() {
    43fa:	4602      	mov	r2, r0
	if (++_strobe > 7) _strobe = 0;
    43fc:	b2d8      	uxtb	r0, r3
    43fe:	2807      	cmp	r0, #7
    4400:	bf89      	itett	hi
    4402:	2300      	movhi	r3, #0
    4404:	f882 0214 	strbls.w	r0, [r2, #532]	; 0x214
    4408:	f882 3214 	strbhi.w	r3, [r2, #532]	; 0x214
    440c:	4618      	movhi	r0, r3
	return _strobe;
}
    440e:	4770      	bx	lr

00004410 <SwitchGrid8x8::getCurrentStrobe()>:

byte SwitchGrid8x8::getCurrentStrobe() {
	return _strobe;
}
    4410:	f890 0214 	ldrb.w	r0, [r0, #532]	; 0x214
    4414:	4770      	bx	lr
    4416:	bf00      	nop

00004418 <SwitchGrid8x8::getCurrentRow()>:

byte SwitchGrid8x8::getCurrentRow() {
	return returns_latch[_strobe];
    4418:	f890 3214 	ldrb.w	r3, [r0, #532]	; 0x214
    441c:	4418      	add	r0, r3
}
    441e:	f890 0204 	ldrb.w	r0, [r0, #516]	; 0x204
    4422:	4770      	bx	lr

00004424 <SwitchGrid8x8::getLastChangedSwitch()>:
}

// return 0xff when no changes occurred on current row
 byte SwitchGrid8x8::getLastChangedSwitch() {
	return lastSwitchChanged;
}
    4424:	7840      	ldrb	r0, [r0, #1]
    4426:	4770      	bx	lr

00004428 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)>:
// Has unbounce effect on on->off transitions, with delay defined by SW_ONOFF_DELAY [ms].
// <r> = row [0..7]
// <val> = value [0..255]
// tm = current system time [ms]
// returns changed bits (0 if no bit has changed)
 byte SwitchGrid8x8::setRow(byte r, byte val, uint32_t& tm) {
    4428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	byte diff, b, bv;

	r &= 7;
    442c:	f001 0107 	and.w	r1, r1, #7
	diff = returns_latch[r] ^ val;
    4430:	eb00 0c01 	add.w	ip, r0, r1
// Has unbounce effect on on->off transitions, with delay defined by SW_ONOFF_DELAY [ms].
// <r> = row [0..7]
// <val> = value [0..255]
// tm = current system time [ms]
// returns changed bits (0 if no bit has changed)
 byte SwitchGrid8x8::setRow(byte r, byte val, uint32_t& tm) {
    4434:	4686      	mov	lr, r0
	byte diff, b, bv;

	r &= 7;
	diff = returns_latch[r] ^ val;
    4436:	f89c 0204 	ldrb.w	r0, [ip, #516]	; 0x204
	if (diff > 0) { // changes detected!
    443a:	4050      	eors	r0, r2
    443c:	d037      	beq.n	44ae <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x86>
    443e:	014d      	lsls	r5, r1, #5
    4440:	f105 0720 	add.w	r7, r5, #32
 uint32_t SwitchGrid8x8::getSwitchChangeCount(byte col, byte row) {
	return swChangeCount[row & 7][col & 7];
}

 byte SwitchGrid8x8::getSwitchNumber(byte col, byte row) {
	return (row & 7) * 10 + (col & 7);
    4444:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4448:	4698      	mov	r8, r3

	r &= 7;
	diff = returns_latch[r] ^ val;
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
    444a:	f88e 0000 	strb.w	r0, [lr]
 uint32_t SwitchGrid8x8::getSwitchChangeCount(byte col, byte row) {
	return swChangeCount[row & 7][col & 7];
}

 byte SwitchGrid8x8::getSwitchNumber(byte col, byte row) {
	return (row & 7) * 10 + (col & 7);
    444e:	0049      	lsls	r1, r1, #1
    4450:	4477      	add	r7, lr
    4452:	4475      	add	r5, lr
	diff = returns_latch[r] ^ val;
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
    4454:	2401      	movs	r4, #1
    4456:	e00e      	b.n	4476 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x4e>
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
				lastSwitchChanged = getSwitchNumber(b, r);
				if (val & bv) { // switch has just closed
					returns_latch[r] |= bv; 
    4458:	f89c 6204 	ldrb.w	r6, [ip, #516]	; 0x204
    445c:	4326      	orrs	r6, r4
    445e:	f88c 6204 	strb.w	r6, [ip, #516]	; 0x204
					swChangeTime[r][b] = tm;
    4462:	f8d8 6000 	ldr.w	r6, [r8]
    4466:	606e      	str	r6, [r5, #4]
    4468:	3504      	adds	r5, #4
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
				}
			}
			bv <<= 1;
    446a:	0064      	lsls	r4, r4, #1
    446c:	3101      	adds	r1, #1
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
		for (b = 0; b < 8; b++) { // for each bit...
    446e:	42bd      	cmp	r5, r7
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
				}
			}
			bv <<= 1;
    4470:	b2e4      	uxtb	r4, r4
    4472:	b2c9      	uxtb	r1, r1
	if (diff > 0) { // changes detected!
		//lastRowChanged = r;
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
		for (b = 0; b < 8; b++) { // for each bit...
    4474:	d01b      	beq.n	44ae <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x86>
			if (diff & bv) { // bit has changed!
    4476:	4220      	tst	r0, r4
    4478:	d0f6      	beq.n	4468 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x40>
				swChangeCount[r][b]++;
    447a:	f8d5 6104 	ldr.w	r6, [r5, #260]	; 0x104
				lastSwitchChanged = getSwitchNumber(b, r);
				if (val & bv) { // switch has just closed
    447e:	4222      	tst	r2, r4
		lastRowChanges = diff;
		// checks which switch has changed
		bv = 1; // bit value
		for (b = 0; b < 8; b++) { // for each bit...
			if (diff & bv) { // bit has changed!
				swChangeCount[r][b]++;
    4480:	f106 0601 	add.w	r6, r6, #1
    4484:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
				lastSwitchChanged = getSwitchNumber(b, r);
    4488:	f88e 1001 	strb.w	r1, [lr, #1]
				if (val & bv) { // switch has just closed
    448c:	d1e4      	bne.n	4458 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x30>
					returns_latch[r] |= bv; 
					swChangeTime[r][b] = tm;
				}
				else { // switch now open
					if (tm - swChangeTime[r][b] >= SW_ONOFF_DELAY) { // debounce condition
    448e:	f8d8 6000 	ldr.w	r6, [r8]
    4492:	686b      	ldr	r3, [r5, #4]
    4494:	1af6      	subs	r6, r6, r3
    4496:	2e31      	cmp	r6, #49	; 0x31
    4498:	d90b      	bls.n	44b2 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x8a>
						returns_latch[r] &= ~bv;
    449a:	f89c 6204 	ldrb.w	r6, [ip, #516]	; 0x204
    449e:	ea26 0604 	bic.w	r6, r6, r4
    44a2:	f88c 6204 	strb.w	r6, [ip, #516]	; 0x204
						swChangeTime[r][b] = tm;
    44a6:	f8d8 6000 	ldr.w	r6, [r8]
    44aa:	606e      	str	r6, [r5, #4]
    44ac:	e7dc      	b.n	4468 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x40>
	#ifdef SWGRID_TRACK_CHANGES
		returns_changed[r] |= diff;
	#endif
	}
	return diff;
}
    44ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				else { // switch now open
					if (tm - swChangeTime[r][b] >= SW_ONOFF_DELAY) { // debounce condition
						returns_latch[r] &= ~bv;
						swChangeTime[r][b] = tm;
					}
					else diff &= ~bv; // correction in case of delayed transition: clears corresponding bit
    44b2:	ea20 0004 	bic.w	r0, r0, r4
    44b6:	e7d7      	b.n	4468 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)+0x40>

000044b8 <SwitchGrid8x8::setCurrentRow(unsigned char, unsigned long&)>:
 byte SwitchGrid8x8::getRow(byte r) {
	return returns_latch[r&7];
}

 byte SwitchGrid8x8::setCurrentRow(byte val, uint32_t& tm) {
	return setRow(_strobe, val, tm);
    44b8:	4613      	mov	r3, r2
    44ba:	460a      	mov	r2, r1
    44bc:	f890 1214 	ldrb.w	r1, [r0, #532]	; 0x214
    44c0:	f7ff bfb2 	b.w	4428 <SwitchGrid8x8::setRow(unsigned char, unsigned char, unsigned long&)>

000044c4 <SwitchGrid8x8::currentRowChanged()>:
	}
	return diff;
}

 bool SwitchGrid8x8::currentRowChanged() {
	return (lastRowChanges > 0) ? true : false;
    44c4:	7800      	ldrb	r0, [r0, #0]
}
    44c6:	3000      	adds	r0, #0
    44c8:	bf18      	it	ne
    44ca:	2001      	movne	r0, #1
    44cc:	4770      	bx	lr
    44ce:	bf00      	nop

000044d0 <SwitchGrid8x8::getSwitch(unsigned char)>:

// switchNum = 0..63
 bool SwitchGrid8x8::getSwitch(byte switchNum) {
	byte r = switchNum % 10;
    44d0:	4a08      	ldr	r2, [pc, #32]	; (44f4 <SwitchGrid8x8::getSwitch(unsigned char)+0x24>)
    44d2:	fba2 3201 	umull	r3, r2, r2, r1
    44d6:	08d2      	lsrs	r2, r2, #3
    44d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    44dc:	eba1 0342 	sub.w	r3, r1, r2, lsl #1
    44e0:	b2db      	uxtb	r3, r3
	byte c = switchNum - r;
	return ((returns_latch[r] & (1u<<c)) > 0) ? true : false;
    44e2:	4418      	add	r0, r3
    44e4:	1ac9      	subs	r1, r1, r3
    44e6:	f890 0204 	ldrb.w	r0, [r0, #516]	; 0x204
    44ea:	b2c9      	uxtb	r1, r1
    44ec:	40c8      	lsrs	r0, r1
}
    44ee:	f000 0001 	and.w	r0, r0, #1
    44f2:	4770      	bx	lr
    44f4:	cccccccd 	.word	0xcccccccd

000044f8 <Sys80b::onSlamSwitchEvent(bool)>:
	//virtual void onSwitchEvent(byte sw, bool st) = 0;
	//virtual void onSlamSwitchEvent(bool active) = 0;
	//virtual void onButtonPressed(UserKey key) = 0;
	//virtual void onTestButtonPressed() = 0;
	virtual void onSwitchEvent(byte sw, bool st) {};
	virtual void onSlamSwitchEvent(bool active) {};
    44f8:	4770      	bx	lr
    44fa:	bf00      	nop

000044fc <Sys80b::onTestButtonPressed()>:
	virtual void onButtonPressed(UserKey key) { 
		Serial.print("onButtonPressed: "); 
		Serial.println(key);
	};
	virtual void onTestButtonPressed() {};
    44fc:	4770      	bx	lr
    44fe:	bf00      	nop

00004500 <Sys80b::checkSoundCmd(unsigned long&)>:
 uint16_t Sys80b::pullSoundCmd() {
	return (soundBuffer.isEmpty()) ? 0 : soundBuffer.get();
}

// candidato a spostamento in altro file
void Sys80b::checkSoundCmd(uint32_t& ms) {
    4500:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
	//byte snd = soundBuffer.getNextSndOutput(t);
	if (soundBuffer.isEmpty()) return;
    4504:	b343      	cbz	r3, 4558 <L_109_delayMicroseconds+0x16>
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
    4506:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    450a:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
 uint16_t Sys80b::pullSoundCmd() {
	return (soundBuffer.isEmpty()) ? 0 : soundBuffer.get();
}

// candidato a spostamento in altro file
void Sys80b::checkSoundCmd(uint32_t& ms) {
    450e:	b510      	push	{r4, lr}
		if (_firstPtr == _size) _firstPtr = 0;
    4510:	f8d0 426c 	ldr.w	r4, [r0, #620]	; 0x26c
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
    4514:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    4518:	3201      	adds	r2, #1
		if (_firstPtr == _size) _firstPtr = 0;
    451a:	42a2      	cmp	r2, r4
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
    451c:	f8c0 2264 	str.w	r2, [r0, #612]	; 0x264
		if (_firstPtr == _size) _firstPtr = 0;
    4520:	bf04      	itt	eq
    4522:	2200      	moveq	r2, #0
    4524:	f8c0 2264 	streq.w	r2, [r0, #612]	; 0x264
    4528:	f8d0 2280 	ldr.w	r2, [r0, #640]	; 0x280
		_valuesCount--;
    452c:	3b01      	subs	r3, #1
    452e:	43c9      	mvns	r1, r1
    4530:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
    4534:	4604      	mov	r4, r0
    4536:	b2c9      	uxtb	r1, r1
    4538:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    453c:	f001 fdf0 	bl	6120 <PIO::mcpWritePB(unsigned char)>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    4540:	23f0      	movs	r3, #240	; 0xf0

00004542 <L_109_delayMicroseconds>:
    4542:	3b01      	subs	r3, #1
    4544:	d1fd      	bne.n	4542 <L_109_delayMicroseconds>
    4546:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    454a:	21ff      	movs	r1, #255	; 0xff
    454c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
	if (soundBuffer.isEmpty()) return;
	uint16_t snd = soundBuffer.get() & 0xff;
	hw->writeSound(~snd);
	delayMicroseconds(10);
	hw->writeSound(0xff);
}
    4550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4554:	f001 bde4 	b.w	6120 <PIO::mcpWritePB(unsigned char)>
    4558:	4770      	bx	lr
    455a:	bf00      	nop

0000455c <Sys80b::~Sys80b()>:
	//msg::outpln(incrementPowerOnCounter());

	//reset();
}

Sys80b::~Sys80b() {
    455c:	4b33      	ldr	r3, [pc, #204]	; (462c <Sys80b::~Sys80b()+0xd0>)
    455e:	b570      	push	{r4, r5, r6, lr}
    4560:	2115      	movs	r1, #21
    4562:	6003      	str	r3, [r0, #0]
    4564:	4605      	mov	r5, r0
    4566:	4832      	ldr	r0, [pc, #200]	; (4630 <Sys80b::~Sys80b()+0xd4>)
    4568:	f005 f8d4 	bl	9714 <usb_serial_write>
    456c:	4831      	ldr	r0, [pc, #196]	; (4634 <Sys80b::~Sys80b()+0xd8>)
    456e:	f005 fb0f 	bl	9b90 <Print::println()>
	Serial.println("Sys80b destruction...");
	delete solenoids;
    4572:	68ac      	ldr	r4, [r5, #8]
    4574:	b134      	cbz	r4, 4584 <Sys80b::~Sys80b()+0x28>
    4576:	4620      	mov	r0, r4
    4578:	f7ff fe06 	bl	4188 <SolenoidSet::~SolenoidSet()>
    457c:	4620      	mov	r0, r4
    457e:	210c      	movs	r1, #12
    4580:	f005 fac6 	bl	9b10 <operator delete(void*, unsigned int)>
	delete lamps;
    4584:	686c      	ldr	r4, [r5, #4]
    4586:	b134      	cbz	r4, 4596 <Sys80b::~Sys80b()+0x3a>
    4588:	4620      	mov	r0, r4
    458a:	f7fd fedf 	bl	234c <BitMappedSet::~BitMappedSet()>
    458e:	4620      	mov	r0, r4
    4590:	2110      	movs	r1, #16
    4592:	f005 fabd 	bl	9b10 <operator delete(void*, unsigned int)>
		_buff = new Type[_size];
		Clear();
	}

	~Buffer() {
		delete[] _buff;
    4596:	f8d5 0260 	ldr.w	r0, [r5, #608]	; 0x260
    459a:	b108      	cbz	r0, 45a0 <Sys80b::~Sys80b()+0x44>
    459c:	f005 fab6 	bl	9b0c <operator delete[](void*)>
	//msg::outpln(incrementPowerOnCounter());

	//reset();
}

Sys80b::~Sys80b() {
    45a0:	f105 0048 	add.w	r0, r5, #72	; 0x48
    45a4:	f7ff ff14 	bl	43d0 <SwitchGrid8x8::~SwitchGrid8x8()>
    45a8:	6b68      	ldr	r0, [r5, #52]	; 0x34
    45aa:	b108      	cbz	r0, 45b0 <Sys80b::~Sys80b()+0x54>
    45ac:	f005 faae 	bl	9b0c <operator delete[](void*)>

public:
	ExtTextDisplay() : display(nullptr), rows(0), cols(0), extLine(nullptr) {}
	ExtTextDisplay(TextDisplay& d) { _init(d); }
	~ExtTextDisplay() {
		delete[] extLine;
    45b0:	692c      	ldr	r4, [r5, #16]
    45b2:	b1bc      	cbz	r4, 45e4 <Sys80b::~Sys80b()+0x88>
    45b4:	f854 1c04 	ldr.w	r1, [r4, #-4]
    45b8:	0149      	lsls	r1, r1, #5
    45ba:	1866      	adds	r6, r4, r1
    45bc:	42b4      	cmp	r4, r6
    45be:	d101      	bne.n	45c4 <Sys80b::~Sys80b()+0x68>
    45c0:	e00b      	b.n	45da <Sys80b::~Sys80b()+0x7e>
    45c2:	4626      	mov	r6, r4
    45c4:	f1a6 0420 	sub.w	r4, r6, #32
		uint32_t startTime = 0; // blink effect start time
		uint16_t period = DEF_BLINK_PERIOD; // blink _period (on+off) [ms]
		uint16_t duration = DEF_BLINK_DURATION; // blink effect duration [ms]: 0 is forever
	};

	struct DFXTextLine {
    45c8:	4620      	mov	r0, r4
    45ca:	f005 fb77 	bl	9cbc <String::~String()>

public:
	ExtTextDisplay() : display(nullptr), rows(0), cols(0), extLine(nullptr) {}
	ExtTextDisplay(TextDisplay& d) { _init(d); }
	~ExtTextDisplay() {
		delete[] extLine;
    45ce:	692b      	ldr	r3, [r5, #16]
    45d0:	42a3      	cmp	r3, r4
    45d2:	d1f6      	bne.n	45c2 <Sys80b::~Sys80b()+0x66>
    45d4:	f856 1c24 	ldr.w	r1, [r6, #-36]
    45d8:	0149      	lsls	r1, r1, #5
    45da:	3108      	adds	r1, #8
    45dc:	f1a4 0008 	sub.w	r0, r4, #8
    45e0:	f005 fa98 	bl	9b14 <operator delete[](void*, unsigned int)>
		delete[] blinkParams;
    45e4:	696c      	ldr	r4, [r5, #20]
    45e6:	b1dc      	cbz	r4, 4620 <Sys80b::~Sys80b()+0xc4>
    45e8:	f854 1c04 	ldr.w	r1, [r4, #-4]
    45ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    45f0:	0089      	lsls	r1, r1, #2
    45f2:	1866      	adds	r6, r4, r1
    45f4:	42b4      	cmp	r4, r6
    45f6:	d101      	bne.n	45fc <Sys80b::~Sys80b()+0xa0>
    45f8:	e00d      	b.n	4616 <Sys80b::~Sys80b()+0xba>
    45fa:	4626      	mov	r6, r4
    45fc:	f1a6 041c 	sub.w	r4, r6, #28
	static const byte LINE_MAX_LEN = 100;
	static const uint16_t STD_DFX_DELAY = 50;
	static const int DEF_BLINK_PERIOD = 500; // [ms]
	static const int DEF_BLINK_DURATION = 0; // [ms]

	struct LineBlinkParams {
    4600:	4620      	mov	r0, r4
    4602:	f005 fb5b 	bl	9cbc <String::~String()>
public:
	ExtTextDisplay() : display(nullptr), rows(0), cols(0), extLine(nullptr) {}
	ExtTextDisplay(TextDisplay& d) { _init(d); }
	~ExtTextDisplay() {
		delete[] extLine;
		delete[] blinkParams;
    4606:	696b      	ldr	r3, [r5, #20]
    4608:	42a3      	cmp	r3, r4
    460a:	d1f6      	bne.n	45fa <Sys80b::~Sys80b()+0x9e>
    460c:	f856 1c20 	ldr.w	r1, [r6, #-32]
    4610:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    4614:	0089      	lsls	r1, r1, #2
    4616:	3108      	adds	r1, #8
    4618:	f1a4 0008 	sub.w	r0, r4, #8
    461c:	f005 fa7a 	bl	9b14 <operator delete[](void*, unsigned int)>
	byte cols; // dispay lines width

public:
	ExtTextDisplay() : display(nullptr), rows(0), cols(0), extLine(nullptr) {}
	ExtTextDisplay(TextDisplay& d) { _init(d); }
	~ExtTextDisplay() {
    4620:	f105 0018 	add.w	r0, r5, #24
    4624:	f005 fb4a 	bl	9cbc <String::~String()>
	Serial.println("Sys80b destruction...");
	delete solenoids;
	delete lamps;
}
    4628:	4628      	mov	r0, r5
    462a:	bd70      	pop	{r4, r5, r6, pc}
    462c:	000103f8 	.word	0x000103f8
    4630:	00010414 	.word	0x00010414
    4634:	1fff876c 	.word	0x1fff876c

00004638 <Sys80b::~Sys80b()>:
	//msg::outpln(incrementPowerOnCounter());

	//reset();
}

Sys80b::~Sys80b() {
    4638:	b510      	push	{r4, lr}
    463a:	4604      	mov	r4, r0
	Serial.println("Sys80b destruction...");
	delete solenoids;
	delete lamps;
}
    463c:	f7ff ff8e 	bl	455c <Sys80b::~Sys80b()>
    4640:	4620      	mov	r0, r4
    4642:	f44f 7121 	mov.w	r1, #644	; 0x284
    4646:	f005 fa63 	bl	9b10 <operator delete(void*, unsigned int)>
    464a:	4620      	mov	r0, r4
    464c:	bd10      	pop	{r4, pc}
    464e:	bf00      	nop

00004650 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]>:
void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
    4650:	6803      	ldr	r3, [r0, #0]

 uint16_t Sys80b::getDisplayOutput() {
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
    4652:	b510      	push	{r4, lr}
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
    4654:	695a      	ldr	r2, [r3, #20]
    4656:	4c0a      	ldr	r4, [pc, #40]	; (4680 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]+0x30>)
    4658:	42a2      	cmp	r2, r4
    465a:	d10d      	bne.n	4678 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]+0x28>
    465c:	460c      	mov	r4, r1
    465e:	4809      	ldr	r0, [pc, #36]	; (4684 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]+0x34>)
    4660:	2111      	movs	r1, #17
    4662:	f005 f857 	bl	9714 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4666:	4621      	mov	r1, r4
    4668:	4807      	ldr	r0, [pc, #28]	; (4688 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]+0x38>)
    466a:	f005 faf7 	bl	9c5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    466e:	4806      	ldr	r0, [pc, #24]	; (4688 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]+0x38>)
	}
}
    4670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4674:	f005 ba8c 	b.w	9b90 <Print::println()>
    4678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
		_keyRepeat = false;
		if (key != NO_KEY) onButtonPressed(key);
    467c:	4710      	bx	r2
    467e:	bf00      	nop
    4680:	00002f75 	.word	0x00002f75
    4684:	0000fdfc 	.word	0x0000fdfc
    4688:	1fff876c 	.word	0x1fff876c

0000468c <Sys80b::Sys80b()>:
//using namespace Sys80bIO;

const byte Sys80b::dPlayerRow[] = { 0, 0, 1, 1 };
const byte Sys80b::dPlayerCol[] = { 0, 10, 0, 10 };

Sys80b::Sys80b() {
    468c:	4b1f      	ldr	r3, [pc, #124]	; (470c <Sys80b::Sys80b()+0x80>)
    468e:	b570      	push	{r4, r5, r6, lr}
    4690:	4604      	mov	r4, r0
    4692:	f840 3b0c 	str.w	r3, [r0], #12
    4696:	f000 fab9 	bl	4c0c <Sys80b_Display::Sys80b_Display()>
    469a:	f104 0048 	add.w	r0, r4, #72	; 0x48
    469e:	f7ff fe7b 	bl	4398 <SwitchGrid8x8::SwitchGrid8x8()>
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    46a2:	230a      	movs	r3, #10
    46a4:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
		_buff = new Type[_size];
    46a8:	2014      	movs	r0, #20
    46aa:	f005 fa2d 	bl	9b08 <operator new[](unsigned int)>
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    46ae:	2500      	movs	r5, #0
    46b0:	210e      	movs	r1, #14
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
		_buff = new Type[_size];
    46b2:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    46b6:	f8c4 5264 	str.w	r5, [r4, #612]	; 0x264
		_valuesCount = 0;
    46ba:	f8c4 5268 	str.w	r5, [r4, #616]	; 0x268
    46be:	f8c4 5280 	str.w	r5, [r4, #640]	; 0x280
    46c2:	4813      	ldr	r0, [pc, #76]	; (4710 <Sys80b::Sys80b()+0x84>)
    46c4:	f005 f826 	bl	9714 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    46c8:	4812      	ldr	r0, [pc, #72]	; (4714 <Sys80b::Sys80b()+0x88>)
    46ca:	f005 fa61 	bl	9b90 <Print::println()>
	Serial.println("Sys80b init...");
	delay(100);
    46ce:	2064      	movs	r0, #100	; 0x64
    46d0:	f004 f806 	bl	86e0 <delay>
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
    46d4:	200c      	movs	r0, #12
    46d6:	f005 fa15 	bl	9b04 <operator new(unsigned int)>
    46da:	2109      	movs	r1, #9
    46dc:	4606      	mov	r6, r0
    46de:	f7ff fd15 	bl	410c <SolenoidSet::SolenoidSet(unsigned char)>
    46e2:	60a6      	str	r6, [r4, #8]
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
    46e4:	2010      	movs	r0, #16
    46e6:	f005 fa0d 	bl	9b04 <operator new(unsigned int)>
    46ea:	2130      	movs	r1, #48	; 0x30
    46ec:	4606      	mov	r6, r0
    46ee:	f7fd fe53 	bl	2398 <BitMappedSet::BitMappedSet(unsigned short)>
	_soundPendingCmd = false;
	_changedSwitchNum = 0xff;
    46f2:	22ff      	movs	r2, #255	; 0xff
	slamSwitchNormalState = true;
    46f4:	2301      	movs	r3, #1
	delay(100);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
	_soundPendingCmd = false;
	_changedSwitchNum = 0xff;
    46f6:	f884 2275 	strb.w	r2, [r4, #629]	; 0x275
Sys80b::Sys80b() {
	Serial.println("Sys80b init...");
	delay(100);
	solenoids = new SolenoidSet(SOLENOID_COUNT); // solenoids (numbers: 1..9)
	//lampSolenoids = new SolenoidSet(16); // "lamp" solenoids (16..31)
	lamps = new BitMappedSet(LAMPS_COUNT);
    46fa:	6066      	str	r6, [r4, #4]
	_soundPendingCmd = false;
    46fc:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
	_changedSwitchNum = 0xff;
	slamSwitchNormalState = true;
    4700:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
	slamSwitchLastState = slamSwitchNormalState;
    4704:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
	//msg::clr();
	//msg::outpln("Power on counter: ");
	//msg::outpln(incrementPowerOnCounter());

	//reset();
}
    4708:	4620      	mov	r0, r4
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	000103f8 	.word	0x000103f8
    4710:	0001042c 	.word	0x0001042c
    4714:	1fff876c 	.word	0x1fff876c

00004718 <Sys80b::reset()>:
	delete solenoids;
	delete lamps;
}

// reset all outputs to 0
void Sys80b::reset() {
    4718:	b570      	push	{r4, r5, r6, lr}
    471a:	210f      	movs	r1, #15
    471c:	b082      	sub	sp, #8
    471e:	4605      	mov	r5, r0
    4720:	4821      	ldr	r0, [pc, #132]	; (47a8 <Sys80b::reset()+0x90>)
    4722:	f004 fff7 	bl	9714 <usb_serial_write>
    4726:	4821      	ldr	r0, [pc, #132]	; (47ac <Sys80b::reset()+0x94>)
    4728:	f005 fa32 	bl	9b90 <Print::println()>
	Serial.println("Sys80b reset...");
	delay(100);
    472c:	2064      	movs	r0, #100	; 0x64
    472e:	f003 ffd7 	bl	86e0 <delay>
	if (hw != nullptr) {
    4732:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
    4736:	b19b      	cbz	r3, 4760 <Sys80b::reset()+0x48>
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    inline void writeDisplayLD1(byte b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(byte b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    4738:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    473c:	2100      	movs	r1, #0
    473e:	f001 fbcb 	bl	5ed8 <PIO::mcpWrite(unsigned short)>
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
			} else if (pin == 18) {
				CORE_PIN18_PORTCLEAR = CORE_PIN18_BITMASK;
    4742:	4b1b      	ldr	r3, [pc, #108]	; (47b0 <Sys80b::reset()+0x98>)
    4744:	2408      	movs	r4, #8
    4746:	601c      	str	r4, [r3, #0]
		// hardware immediate resets
		hw->writeSolenoids(0);
		hw->writeDisplayAndSoundReset(true);
		delay(100);
    4748:	2064      	movs	r0, #100	; 0x64
    474a:	f003 ffc9 	bl	86e0 <delay>
    474e:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
			} else if (pin == 18) {
				CORE_PIN18_PORTSET = CORE_PIN18_BITMASK;
    4752:	4a18      	ldr	r2, [pc, #96]	; (47b4 <Sys80b::reset()+0x9c>)
    void setSettingSwitch(byte n, bool s);

    inline void writeDisplayAndSoundReset(bool b) {
        digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    }
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(b); }
    4754:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    4758:	6014      	str	r4, [r2, #0]
    475a:	21ff      	movs	r1, #255	; 0xff
    475c:	f001 fce0 	bl	6120 <PIO::mcpWritePB(unsigned char)>
		hw->writeDisplayAndSoundReset(false);
		hw->writeSound(0xff); // reset sound output (active low)
	}

	// software resets
	lamps->reset();
    4760:	6868      	ldr	r0, [r5, #4]
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    4762:	2400      	movs	r4, #0
    4764:	f7fd fe02 	bl	236c <BitMappedSet::reset()>
	solenoids->resetAll();
	soundBuffer.Clear();
	currentLampGroup = 0;
	display.reset();
    4768:	f105 060c 	add.w	r6, r5, #12
		hw->writeSound(0xff); // reset sound output (active low)
	}

	// software resets
	lamps->reset();
	solenoids->resetAll();
    476c:	68a8      	ldr	r0, [r5, #8]
    476e:	f7ff fd87 	bl	4280 <SolenoidSet::resetAll()>
	soundBuffer.Clear();
	currentLampGroup = 0;
	display.reset();
    4772:	4630      	mov	r0, r6
    4774:	f8c5 4264 	str.w	r4, [r5, #612]	; 0x264
		_valuesCount = 0;
    4778:	f8c5 4268 	str.w	r4, [r5, #616]	; 0x268

	// software resets
	lamps->reset();
	solenoids->resetAll();
	soundBuffer.Clear();
	currentLampGroup = 0;
    477c:	f885 4270 	strb.w	r4, [r5, #624]	; 0x270
	display.reset();
    4780:	f000 fb8c 	bl	4e9c <Sys80b_Display::reset()>
	String toString();
	//friend std::ostream& operator <<(std::ostream& os, ExtTextDisplay& d);

	inline void putText(byte line, const __FlashStringHelper* text, byte pos = 0,
		bool blinking = false, bool clearBefore = false) {
		putText(line, (const char*)text, pos, blinking, clearBefore);
    4784:	4623      	mov	r3, r4
    4786:	4621      	mov	r1, r4
    4788:	4630      	mov	r0, r6
    478a:	9401      	str	r4, [sp, #4]
    478c:	9400      	str	r4, [sp, #0]
    478e:	4a0a      	ldr	r2, [pc, #40]	; (47b8 <Sys80b::reset()+0xa0>)
    4790:	f7fe fa7e 	bl	2c90 <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)>
    4794:	9401      	str	r4, [sp, #4]
    4796:	9400      	str	r4, [sp, #0]
    4798:	4623      	mov	r3, r4
    479a:	4630      	mov	r0, r6
    479c:	4a07      	ldr	r2, [pc, #28]	; (47bc <Sys80b::reset()+0xa4>)
    479e:	2101      	movs	r1, #1
    47a0:	f7fe fa76 	bl	2c90 <ExtTextDisplay::putText(unsigned char, char const*, unsigned char, bool, bool)>
	display.putText(0, F("---- Sys80b PRB ----"));
	display.putText(1, F(" fabvolpi@gmail.com "));
}
    47a4:	b002      	add	sp, #8
    47a6:	bd70      	pop	{r4, r5, r6, pc}
    47a8:	0001043c 	.word	0x0001043c
    47ac:	1fff876c 	.word	0x1fff876c
    47b0:	400ff048 	.word	0x400ff048
    47b4:	400ff044 	.word	0x400ff044
    47b8:	0001044c 	.word	0x0001044c
    47bc:	00010464 	.word	0x00010464

000047c0 <Sys80b::setSolenoid(unsigned char, bool)>:
//}

// sets a solenoid state, updating internal variables
// n = [1..9]
void Sys80b::setSolenoid(byte n, bool active) {
	if (n < 1 || n > 9) return;
    47c0:	3901      	subs	r1, #1
    47c2:	b2c9      	uxtb	r1, r1
    47c4:	2908      	cmp	r1, #8
    47c6:	d900      	bls.n	47ca <Sys80b::setSolenoid(unsigned char, bool)+0xa>
    47c8:	4770      	bx	lr
//	}
//}

// sets a solenoid state, updating internal variables
// n = [1..9]
void Sys80b::setSolenoid(byte n, bool active) {
    47ca:	b510      	push	{r4, lr}
    47cc:	4604      	mov	r4, r0
	if (n < 1 || n > 9) return;
	solenoids->setState(n-1, active);
    47ce:	6880      	ldr	r0, [r0, #8]
    47d0:	f7ff fd2e 	bl	4230 <SolenoidSet::setState(unsigned char, bool)>
	hw->writeSolenoids(solenoids->getStateBits());
    47d4:	68a0      	ldr	r0, [r4, #8]
    47d6:	f8d4 4280 	ldr.w	r4, [r4, #640]	; 0x280
    47da:	f7ff fdc7 	bl	436c <SolenoidSet::getStateBits()>
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    inline void writeDisplayLD1(byte b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(byte b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    47de:	b281      	uxth	r1, r0
    47e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    47e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47e8:	f001 bb76 	b.w	5ed8 <PIO::mcpWrite(unsigned short)>

000047ec <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)>:

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
// n = [1..9]
 void Sys80b::activateSolenoid(byte n, uint16_t actPeriod, uint16_t swDelay) {
	if (n < 1 || n > 9) return;
    47ec:	3901      	subs	r1, #1
    47ee:	b2c9      	uxtb	r1, r1
    47f0:	2908      	cmp	r1, #8
    47f2:	d900      	bls.n	47f6 <Sys80b::activateSolenoid(unsigned char, unsigned short, unsigned short)+0xa>
    47f4:	4770      	bx	lr
//}

// sets a solenoid state, defining switch delay and active _period:
// solenoid state will switch after the specified delay.
// n = [1..9]
 void Sys80b::activateSolenoid(byte n, uint16_t actPeriod, uint16_t swDelay) {
    47f6:	b510      	push	{r4, lr}
    47f8:	4604      	mov	r4, r0
	if (n < 1 || n > 9) return;
	solenoids->activate(n-1, actPeriod, swDelay);
    47fa:	6880      	ldr	r0, [r0, #8]
    47fc:	f7ff fd20 	bl	4240 <SolenoidSet::activate(unsigned char, unsigned short, unsigned short)>
	hw->writeSolenoids(solenoids->getStateBits());
    4800:	68a0      	ldr	r0, [r4, #8]
    4802:	f8d4 4280 	ldr.w	r4, [r4, #640]	; 0x280
    4806:	f7ff fdb1 	bl	436c <SolenoidSet::getStateBits()>
    480a:	b281      	uxth	r1, r0
    480c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    4810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4814:	f001 bb60 	b.w	5ed8 <PIO::mcpWrite(unsigned short)>

00004818 <Sys80b::checkSolenoids(unsigned long&)>:
//}

// checks whether:
// - delay activation time elapsed (when delayedSwitch = true)
// - maximum active time elapsed for safe switch-off
 void Sys80b::checkSolenoids(uint32_t& t) {
    4818:	b510      	push	{r4, lr}
    481a:	4604      	mov	r4, r0
	solenoids->update(t);
    481c:	6880      	ldr	r0, [r0, #8]
    481e:	f7ff fd47 	bl	42b0 <SolenoidSet::update(unsigned long&)>
	hw->writeSolenoids(solenoids->getStateBits());
    4822:	68a0      	ldr	r0, [r4, #8]
    4824:	f8d4 4280 	ldr.w	r4, [r4, #640]	; 0x280
    4828:	f7ff fda0 	bl	436c <SolenoidSet::getStateBits()>
    482c:	b281      	uxth	r1, r0
    482e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    4832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4836:	f001 bb4f 	b.w	5ed8 <PIO::mcpWrite(unsigned short)>
    483a:	bf00      	nop

0000483c <Sys80b::setLamp(unsigned char, bool)>:

// setPeriod a lamp on or off, with status memory
 void Sys80b::setLamp(byte n, bool state) {
	lamps->setState(n, state);
    483c:	6840      	ldr	r0, [r0, #4]
    483e:	2300      	movs	r3, #0
    4840:	f7fd bdcc 	b.w	23dc <BitMappedSet::setState(unsigned short, bool, bool)>

00004844 <Sys80b::readSlamSwitch()>:
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    4844:	4b02      	ldr	r3, [pc, #8]	; (4850 <Sys80b::readSlamSwitch()+0xc>)
    4846:	6818      	ldr	r0, [r3, #0]
	return switchGrid.getSwitch(swNum);
}

bool Sys80b::readSlamSwitch() {
	return hw->readSlamSw();
}
    4848:	f000 0001 	and.w	r0, r0, #1
    484c:	4770      	bx	lr
    484e:	bf00      	nop
    4850:	400ff0d0 	.word	0x400ff0d0

00004854 <Sys80b::incrementStrobe()>:

byte Sys80b::incrementStrobe() {
    4854:	b538      	push	{r3, r4, r5, lr}
    4856:	4605      	mov	r5, r0
	byte strb = switchGrid.incrementStrobe();
    4858:	3048      	adds	r0, #72	; 0x48
    485a:	f7ff fdcb 	bl	43f4 <SwitchGrid8x8::incrementStrobe()>
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(b); }
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    inline void writeDisplayLD1(byte b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(byte b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    485e:	2101      	movs	r1, #1
    4860:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
    4864:	4081      	lsls	r1, r0
    4866:	43c9      	mvns	r1, r1
    4868:	4604      	mov	r4, r0
    486a:	b2c9      	uxtb	r1, r1
    486c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    4870:	f001 fbd4 	bl	601c <PIO::mcpWritePA(unsigned char)>
	hw->writeStrobes(~(byte)(1u<<strb)); // strobe advance (inverted)
	return strb;
}
    4874:	4620      	mov	r0, r4
    4876:	bd38      	pop	{r3, r4, r5, pc}

00004878 <Sys80b::acquireReturns(unsigned long&)>:
// Stores returns states in <_returnsInput> variable
// updating internal SwitchGrid8x8 object attributes.
// Returned value is also stored internally and readable
// through getChangedSwitch() function.
// returns: last changed switch number (0xff in case of no changes)
byte Sys80b::acquireReturns(uint32_t& t) {
    4878:	f8d0 3280 	ldr.w	r3, [r0, #640]	; 0x280
    487c:	b570      	push	{r4, r5, r6, lr}
    487e:	4604      	mov	r4, r0
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    inline byte readReturns() { return switchMatrix_IO->mcpReadPB(); }
    4880:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    4884:	460e      	mov	r6, r1
    4886:	f001 faa3 	bl	5dd0 <PIO::mcpReadPB()>
	_returnsInput = (byte)~hw->readReturns(); // read actual switch returns on current strobe line (inverted)
    488a:	43c0      	mvns	r0, r0
    488c:	b2c1      	uxtb	r1, r0
	switchGrid.setCurrentRow(_returnsInput, t);
    488e:	f104 0548 	add.w	r5, r4, #72	; 0x48
// updating internal SwitchGrid8x8 object attributes.
// Returned value is also stored internally and readable
// through getChangedSwitch() function.
// returns: last changed switch number (0xff in case of no changes)
byte Sys80b::acquireReturns(uint32_t& t) {
	_returnsInput = (byte)~hw->readReturns(); // read actual switch returns on current strobe line (inverted)
    4892:	f884 1273 	strb.w	r1, [r4, #627]	; 0x273
	switchGrid.setCurrentRow(_returnsInput, t);
    4896:	4632      	mov	r2, r6
    4898:	4628      	mov	r0, r5
    489a:	f7ff fe0d 	bl	44b8 <SwitchGrid8x8::setCurrentRow(unsigned char, unsigned long&)>
	if (!switchGrid.currentRowChanged()) _changedSwitchNum = 0xff;
    489e:	4628      	mov	r0, r5
    48a0:	f7ff fe10 	bl	44c4 <SwitchGrid8x8::currentRowChanged()>
    48a4:	b920      	cbnz	r0, 48b0 <Sys80b::acquireReturns(unsigned long&)+0x38>
    48a6:	23ff      	movs	r3, #255	; 0xff
    48a8:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
	else {
		_changedSwitchNum = switchGrid.getLastChangedSwitch();
		_changedSwitchState = switchGrid.getSwitch(_changedSwitchNum);
	}
	return _changedSwitchNum;
}
    48ac:	4618      	mov	r0, r3
    48ae:	bd70      	pop	{r4, r5, r6, pc}
byte Sys80b::acquireReturns(uint32_t& t) {
	_returnsInput = (byte)~hw->readReturns(); // read actual switch returns on current strobe line (inverted)
	switchGrid.setCurrentRow(_returnsInput, t);
	if (!switchGrid.currentRowChanged()) _changedSwitchNum = 0xff;
	else {
		_changedSwitchNum = switchGrid.getLastChangedSwitch();
    48b0:	4628      	mov	r0, r5
    48b2:	f7ff fdb7 	bl	4424 <SwitchGrid8x8::getLastChangedSwitch()>
    48b6:	4601      	mov	r1, r0
    48b8:	f884 0275 	strb.w	r0, [r4, #629]	; 0x275
		_changedSwitchState = switchGrid.getSwitch(_changedSwitchNum);
    48bc:	4628      	mov	r0, r5
    48be:	f7ff fe07 	bl	44d0 <SwitchGrid8x8::getSwitch(unsigned char)>
    48c2:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
    48c6:	f884 0276 	strb.w	r0, [r4, #630]	; 0x276
	}
	return _changedSwitchNum;
}
    48ca:	4618      	mov	r0, r3
    48cc:	bd70      	pop	{r4, r5, r6, pc}
    48ce:	bf00      	nop

000048d0 <Sys80b::feedDisplay()>:
//}

// Gets next sequencial data to send to display and forwards each byte to its 
// correspondig line.
// If data contains a byte routed to both rows, it will be forwarded only once.
void Sys80b::feedDisplay() {
    48d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t dd; // display control + data
	byte dc; // display control code only

	// FIRST OR BOTH DISPLAYS
	dd = display.getNextDisplayData(); // row 0
    48d2:	f100 070c 	add.w	r7, r0, #12
//}

// Gets next sequencial data to send to display and forwards each byte to its 
// correspondig line.
// If data contains a byte routed to both rows, it will be forwarded only once.
void Sys80b::feedDisplay() {
    48d6:	4604      	mov	r4, r0
	uint16_t dd; // display control + data
	byte dc; // display control code only

	// FIRST OR BOTH DISPLAYS
	dd = display.getNextDisplayData(); // row 0
    48d8:	4638      	mov	r0, r7
    48da:	f000 fa53 	bl	4d84 <Sys80b_Display::getNextDisplayData()>
    48de:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    48e2:	4601      	mov	r1, r0
	dc = (byte)((dd & 0x300) >> 8);
    48e4:	f3c0 2601 	ubfx	r6, r0, #8, #2
    inline void writeDisplayAndSoundReset(bool b) {
        digitalWriteFast(D_RES_PIN, (b) ? LOW : HIGH);
    }
    inline void writeSound(byte b) { displayAndSound_IO->mcpWritePB(b); }
    inline void clearLampsOutput() { lamps_IO->mcpWrite(0); }
    inline void writeDisplayData(byte b) { displayAndSound_IO->mcpWritePA(b); }
    48e8:	b2c9      	uxtb	r1, r1
    48ea:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    48ee:	f001 fb95 	bl	601c <PIO::mcpWritePA(unsigned char)>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    48f2:	25f0      	movs	r5, #240	; 0xf0
	hw->writeDisplayData((byte)(dd & 0xff));
	hw->writeDisplayAddr(dc);
    48f4:	4631      	mov	r1, r6
    48f6:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    48fa:	f000 ff35 	bl	5768 <Board_Sys80b::writeDisplayAddr(unsigned char)>
    48fe:	462b      	mov	r3, r5

00004900 <L_1787_delayMicroseconds>:
    4900:	3b01      	subs	r3, #1
    4902:	d1fd      	bne.n	4900 <L_1787_delayMicroseconds>
	delayMicroseconds(10);
	hw->writeDisplayAddr(dc);
    4904:	4631      	mov	r1, r6
    4906:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    490a:	f000 ff2d 	bl	5768 <Board_Sys80b::writeDisplayAddr(unsigned char)>

	//if ((dd & 0x0300) == 0x0300) return; // CMD for both lines has already been sent
	if (dc == 3) return; // CMD for both rows has already been sent
    490e:	2e03      	cmp	r6, #3
    4910:	d013      	beq.n	493a <L_1856_delayMicroseconds+0x6>
    4912:	f44f 6316 	mov.w	r3, #2400	; 0x960

00004916 <L_1807_delayMicroseconds>:
    4916:	3b01      	subs	r3, #1
    4918:	d1fd      	bne.n	4916 <L_1807_delayMicroseconds>
	delayMicroseconds(100);

	// SECOND DISPLAY
	dd = display.getNextDisplayData(); // row 1
    491a:	4638      	mov	r0, r7
    491c:	f000 fa32 	bl	4d84 <Sys80b_Display::getNextDisplayData()>
    4920:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    4924:	b2c1      	uxtb	r1, r0
    4926:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    492a:	f001 fb77 	bl	601c <PIO::mcpWritePA(unsigned char)>
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
    492e:	4a03      	ldr	r2, [pc, #12]	; (493c <L_1856_delayMicroseconds+0x8>)
    4930:	2302      	movs	r3, #2
    4932:	6013      	str	r3, [r2, #0]

00004934 <L_1856_delayMicroseconds>:
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    4934:	3d01      	subs	r5, #1
    4936:	d1fd      	bne.n	4934 <L_1856_delayMicroseconds>
			} else if (pin == 15) {
				CORE_PIN15_PORTCLEAR = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
    4938:	6053      	str	r3, [r2, #4]
    493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    493c:	400ff044 	.word	0x400ff044

00004940 <Sys80b::renderNextLampsGroup()>:
}

// Real lamps update routine.
// Updates 1 consecutive group of 4 lamps for each call.
// Returns true in case of effective update forwarded.
bool Sys80b::renderNextLampsGroup() {
    4940:	b570      	push	{r4, r5, r6, lr}
    4942:	4605      	mov	r5, r0
    4944:	240c      	movs	r4, #12
	//	lamps->clearChanges4(currentLampGroup);
	//}
	//return changeHit;

	for (i = 0; i < 12; i++) { // search next not-updated group
		if (lamps->getChanges4(currentLampGroup) > 0) break;
    4946:	f895 1270 	ldrb.w	r1, [r5, #624]	; 0x270
    494a:	6868      	ldr	r0, [r5, #4]
    494c:	f7fd fdb4 	bl	24b8 <BitMappedSet::getChanges4(unsigned short)>
    4950:	b988      	cbnz	r0, 4976 <Sys80b::renderNextLampsGroup()+0x36>
		if (++currentLampGroup >= 12) currentLampGroup = 0;
    4952:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
    4956:	3301      	adds	r3, #1
    4958:	b2db      	uxtb	r3, r3
    495a:	2b0b      	cmp	r3, #11
    495c:	bf88      	it	hi
    495e:	f885 0270 	strbhi.w	r0, [r5, #624]	; 0x270
    4962:	f104 30ff 	add.w	r0, r4, #4294967295
    4966:	bf98      	it	ls
    4968:	f885 3270 	strbls.w	r3, [r5, #624]	; 0x270
	//	write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
	//	lamps->clearChanges4(currentLampGroup);
	//}
	//return changeHit;

	for (i = 0; i < 12; i++) { // search next not-updated group
    496c:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    4970:	d1e9      	bne.n	4946 <Sys80b::renderNextLampsGroup()+0x6>
		hw->write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
		lamps->clearChanges4(currentLampGroup);
		return true;
	}
	//clearLampsOutput();
	return false;
    4972:	4620      	mov	r0, r4
    4974:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < 12; i++) { // search next not-updated group
		if (lamps->getChanges4(currentLampGroup) > 0) break;
		if (++currentLampGroup >= 12) currentLampGroup = 0;
	}
	if (i < 12) {
		hw->write4Lamps(currentLampGroup, lamps->getStates4(currentLampGroup));
    4976:	f895 4270 	ldrb.w	r4, [r5, #624]	; 0x270
    497a:	6868      	ldr	r0, [r5, #4]
    497c:	f8d5 6280 	ldr.w	r6, [r5, #640]	; 0x280
    4980:	4621      	mov	r1, r4
    4982:	f7fd fd83 	bl	248c <BitMappedSet::getStates4(unsigned short)>
    4986:	4621      	mov	r1, r4
    4988:	4602      	mov	r2, r0
    498a:	4630      	mov	r0, r6
    498c:	f000 fefe 	bl	578c <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>
		lamps->clearChanges4(currentLampGroup);
    4990:	6868      	ldr	r0, [r5, #4]
    4992:	f895 1270 	ldrb.w	r1, [r5, #624]	; 0x270
    4996:	f7fd fd9d 	bl	24d4 <BitMappedSet::clearChanges4(unsigned short)>
    499a:	2001      	movs	r0, #1
		return true;
	}
	//clearLampsOutput();
	return false;
}
    499c:	bd70      	pop	{r4, r5, r6, pc}
    499e:	bf00      	nop

000049a0 <Sys80b::setQrelay(bool)>:
	hw->writeSolenoids(solenoids->getStateBits());
}

// setPeriod a lamp on or off, with status memory
 void Sys80b::setLamp(byte n, bool state) {
	lamps->setState(n, state);
    49a0:	2300      	movs	r3, #0
    49a2:	460a      	mov	r2, r1
    49a4:	6840      	ldr	r0, [r0, #4]
    49a6:	4619      	mov	r1, r3
    49a8:	f7fd bd18 	b.w	23dc <BitMappedSet::setState(unsigned short, bool, bool)>

000049ac <Sys80b::setOnGameRelay(bool)>:
    49ac:	f7ff bff8 	b.w	49a0 <Sys80b::setQrelay(bool)>

000049b0 <Sys80b::updUserKeyState(UserKey, unsigned long&)>:

 uint16_t Sys80b::getDisplayOutput() {
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
    49b0:	b430      	push	{r4, r5}
	if (key != _keyPressed) {
    49b2:	f890 5277 	ldrb.w	r5, [r0, #631]	; 0x277
    49b6:	428d      	cmp	r5, r1
    49b8:	d009      	beq.n	49ce <Sys80b::updUserKeyState(UserKey, unsigned long&)+0x1e>
		_keyPressed = key;
		_keyStartTime = ms;
    49ba:	6812      	ldr	r2, [r2, #0]
    49bc:	f8c0 227c 	str.w	r2, [r0, #636]	; 0x27c
    49c0:	4603      	mov	r3, r0
		_keyRepeat = false;
    49c2:	2200      	movs	r2, #0
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    49c4:	f883 1277 	strb.w	r1, [r3, #631]	; 0x277
		_keyStartTime = ms;
		_keyRepeat = false;
    49c8:	f880 2278 	strb.w	r2, [r0, #632]	; 0x278
		if (key != NO_KEY) onButtonPressed(key);
    49cc:	b909      	cbnz	r1, 49d2 <Sys80b::updUserKeyState(UserKey, unsigned long&)+0x22>
	}
}
    49ce:	bc30      	pop	{r4, r5}
    49d0:	4770      	bx	lr
    49d2:	bc30      	pop	{r4, r5}
    49d4:	f7ff be3c 	b.w	4650 <Sys80b::updUserKeyState(UserKey, unsigned long&) [clone .part.8] [clone .constprop.12]>

000049d8 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)>:
//
// void Sys80b::resetSlamSwitchAlarm() {
//	_slamSwitchAlarm = false;
//}

void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
    49d8:	b570      	push	{r4, r5, r6, lr}
		
	// user buttons
	if (sw == LEFTADV_KEY || sw == RIGHTADV_KEY || sw == REPLAY_KEY) {
    49da:	1e4d      	subs	r5, r1, #1
    49dc:	2d02      	cmp	r5, #2
//
// void Sys80b::resetSlamSwitchAlarm() {
//	_slamSwitchAlarm = false;
//}

void Sys80b::_onSwitchEvent(byte sw, bool st, uint32_t& ms) {
    49de:	4604      	mov	r4, r0
		
	// user buttons
	if (sw == LEFTADV_KEY || sw == RIGHTADV_KEY || sw == REPLAY_KEY) {
    49e0:	d814      	bhi.n	4a0c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x34>
			break;
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
    49e2:	b9b2      	cbnz	r2, 4a12 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x3a>
 uint16_t Sys80b::getDisplayOutput() {
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
    49e4:	f890 0277 	ldrb.w	r0, [r0, #631]	; 0x277
    49e8:	2800      	cmp	r0, #0
    49ea:	d037      	beq.n	4a5c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x84>
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    49ec:	481e      	ldr	r0, [pc, #120]	; (4a68 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x90>)
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    49f4:	4408      	add	r0, r1
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    49f6:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
		_keyStartTime = ms;
		_keyRepeat = false;
    49fa:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    49fe:	f7ff fab1 	bl	3f64 <msg::outp(char const*)>
		msg::outpln(st ? " pressed" : " released");
    4a02:	481a      	ldr	r0, [pc, #104]	; (4a6c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x94>)
	// TEST button
	if (sw == TEST_SW) {
		onTestButtonPressed();
		return;
	}
}
    4a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
		msg::outpln(st ? " pressed" : " released");
    4a08:	f7ff bb20 	b.w	404c <msg::outpln(char const*)>
		return;
	}

	// TEST button
	if (sw == TEST_SW) {
    4a0c:	2907      	cmp	r1, #7
    4a0e:	d01d      	beq.n	4a4c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x74>
    4a10:	bd70      	pop	{r4, r5, r6, pc}
 uint16_t Sys80b::getDisplayOutput() {
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
    4a12:	f890 2277 	ldrb.w	r2, [r0, #631]	; 0x277
    4a16:	b942      	cbnz	r2, 4a2a <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x52>
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    4a18:	4813      	ldr	r0, [pc, #76]	; (4a68 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x90>)
    4a1a:	4408      	add	r0, r1
    4a1c:	f7ff faa2 	bl	3f64 <msg::outp(char const*)>
		msg::outpln(st ? " pressed" : " released");
    4a20:	4813      	ldr	r0, [pc, #76]	; (4a70 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x98>)
	// TEST button
	if (sw == TEST_SW) {
		onTestButtonPressed();
		return;
	}
}
    4a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
		msg::outpln(st ? " pressed" : " released");
    4a26:	f7ff bb11 	b.w	404c <msg::outpln(char const*)>
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
    4a2a:	681b      	ldr	r3, [r3, #0]
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    4a2c:	480e      	ldr	r0, [pc, #56]	; (4a68 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x90>)
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
		_keyStartTime = ms;
    4a2e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    4a32:	2300      	movs	r3, #0
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    4a34:	4408      	add	r0, r1
	return display.LastData();
}

void Sys80b::updUserKeyState(UserKey key, uint32_t& ms) {
	if (key != _keyPressed) {
		_keyPressed = key;
    4a36:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
		_keyStartTime = ms;
		_keyRepeat = false;
    4a3a:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    4a3e:	f7ff fa91 	bl	3f64 <msg::outp(char const*)>
		msg::outpln(st ? " pressed" : " released");
    4a42:	480b      	ldr	r0, [pc, #44]	; (4a70 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x98>)
	// TEST button
	if (sw == TEST_SW) {
		onTestButtonPressed();
		return;
	}
}
    4a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
		msg::outpln(st ? " pressed" : " released");
    4a48:	f7ff bb00 	b.w	404c <msg::outpln(char const*)>
		return;
	}

	// TEST button
	if (sw == TEST_SW) {
		onTestButtonPressed();
    4a4c:	6803      	ldr	r3, [r0, #0]
    4a4e:	4a09      	ldr	r2, [pc, #36]	; (4a74 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x9c>)
    4a50:	699b      	ldr	r3, [r3, #24]
    4a52:	4293      	cmp	r3, r2
    4a54:	d0dc      	beq.n	4a10 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x38>
		return;
	}
}
    4a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	}

	// TEST button
	if (sw == TEST_SW) {
		onTestButtonPressed();
    4a5a:	4718      	bx	r3
		case REPLAY_SW:
			key = REPLAY_KEY;
			break;
		}
		updUserKeyState(st ? key : NO_KEY, ms);
		msg::outp("key " + sw);
    4a5c:	4802      	ldr	r0, [pc, #8]	; (4a68 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x90>)
    4a5e:	4408      	add	r0, r1
    4a60:	f7ff fa80 	bl	3f64 <msg::outp(char const*)>
		msg::outpln(st ? " pressed" : " released");
    4a64:	4801      	ldr	r0, [pc, #4]	; (4a6c <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x94>)
    4a66:	e7cd      	b.n	4a04 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)+0x2c>
    4a68:	00010494 	.word	0x00010494
    4a6c:	0001047c 	.word	0x0001047c
    4a70:	00010488 	.word	0x00010488
    4a74:	000044fd 	.word	0x000044fd

00004a78 <Sys80b::_checkPressedKey(unsigned long&)>:
		onTestButtonPressed();
		return;
	}
}

void Sys80b::_checkPressedKey(uint32_t& ms) {
    4a78:	b570      	push	{r4, r5, r6, lr}
	if (_keyPressed != NO_KEY) {
    4a7a:	f890 4277 	ldrb.w	r4, [r0, #631]	; 0x277
    4a7e:	b30c      	cbz	r4, 4ac4 <Sys80b::_checkPressedKey(unsigned long&)+0x4c>
		if (!_keyRepeat) {
    4a80:	f890 2278 	ldrb.w	r2, [r0, #632]	; 0x278
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
    4a84:	6809      	ldr	r1, [r1, #0]
	}
}

void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
    4a86:	bb02      	cbnz	r2, 4aca <Sys80b::_checkPressedKey(unsigned long&)+0x52>
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
    4a88:	f8d0 227c 	ldr.w	r2, [r0, #636]	; 0x27c
    4a8c:	1a8a      	subs	r2, r1, r2
    4a8e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    4a92:	d319      	bcc.n	4ac8 <Sys80b::_checkPressedKey(unsigned long&)+0x50>
				_keyRepeat = true;
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    4a94:	6802      	ldr	r2, [r0, #0]
    4a96:	4d15      	ldr	r5, [pc, #84]	; (4aec <Sys80b::_checkPressedKey(unsigned long&)+0x74>)
    4a98:	6952      	ldr	r2, [r2, #20]
void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
				_keyRepeat = true;
				_keyStartTime = ms;
    4a9a:	f8c0 127c 	str.w	r1, [r0, #636]	; 0x27c
    4a9e:	42aa      	cmp	r2, r5

void Sys80b::_checkPressedKey(uint32_t& ms) {
	if (_keyPressed != NO_KEY) {
		if (!_keyRepeat) {
			if (ms - _keyStartTime >= KEY_REPEAT_TIMER) {
				_keyRepeat = true;
    4aa0:	f04f 0101 	mov.w	r1, #1
    4aa4:	f880 1278 	strb.w	r1, [r0, #632]	; 0x278
    4aa8:	d11b      	bne.n	4ae2 <Sys80b::_checkPressedKey(unsigned long&)+0x6a>
    4aaa:	2111      	movs	r1, #17
    4aac:	4810      	ldr	r0, [pc, #64]	; (4af0 <Sys80b::_checkPressedKey(unsigned long&)+0x78>)
    4aae:	f004 fe31 	bl	9714 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4ab2:	4621      	mov	r1, r4
    4ab4:	480f      	ldr	r0, [pc, #60]	; (4af4 <Sys80b::_checkPressedKey(unsigned long&)+0x7c>)
    4ab6:	f005 f8d1 	bl	9c5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4aba:	480e      	ldr	r0, [pc, #56]	; (4af4 <Sys80b::_checkPressedKey(unsigned long&)+0x7c>)
				onButtonPressed(_keyPressed);
			}
		}
	}
	else _keyRepeat = false;
}
    4abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ac0:	f005 b866 	b.w	9b90 <Print::println()>
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
			}
		}
	}
	else _keyRepeat = false;
    4ac4:	f880 4278 	strb.w	r4, [r0, #632]	; 0x278
    4ac8:	bd70      	pop	{r4, r5, r6, pc}
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
			}
		}
		else { // repeating key
			if (ms - _keyStartTime >= KEY_REPEAT_PERIOD) {
    4aca:	f8d0 227c 	ldr.w	r2, [r0, #636]	; 0x27c
    4ace:	1a8a      	subs	r2, r1, r2
    4ad0:	2ac7      	cmp	r2, #199	; 0xc7
    4ad2:	d9f9      	bls.n	4ac8 <Sys80b::_checkPressedKey(unsigned long&)+0x50>
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    4ad4:	6802      	ldr	r2, [r0, #0]
    4ad6:	4d05      	ldr	r5, [pc, #20]	; (4aec <Sys80b::_checkPressedKey(unsigned long&)+0x74>)
    4ad8:	6952      	ldr	r2, [r2, #20]
				onButtonPressed(_keyPressed);
			}
		}
		else { // repeating key
			if (ms - _keyStartTime >= KEY_REPEAT_PERIOD) {
				_keyStartTime = ms;
    4ada:	f8c0 127c 	str.w	r1, [r0, #636]	; 0x27c
    4ade:	42aa      	cmp	r2, r5
    4ae0:	d0e3      	beq.n	4aaa <Sys80b::_checkPressedKey(unsigned long&)+0x32>
				onButtonPressed(_keyPressed);
    4ae2:	4621      	mov	r1, r4
			}
		}
	}
	else _keyRepeat = false;
}
    4ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}
		else { // repeating key
			if (ms - _keyStartTime >= KEY_REPEAT_PERIOD) {
				_keyStartTime = ms;
				onButtonPressed(_keyPressed);
    4ae8:	4710      	bx	r2
    4aea:	bf00      	nop
    4aec:	00002f75 	.word	0x00002f75
    4af0:	0000fdfc 	.word	0x0000fdfc
    4af4:	1fff876c 	.word	0x1fff876c

00004af8 <Sys80b::_millisRoutine(unsigned long&)>:
// called every millisecond.
// Returns true when an input change has detected:
// either a switch from grid or the slam switch.
// In case of change detection, use getChangesSwitch()
// to get the event.
bool Sys80b::_millisRoutine(uint32_t& ms) {
    4af8:	b570      	push	{r4, r5, r6, lr}
    4afa:	4604      	mov	r4, r0
    4afc:	460d      	mov	r5, r1
	
	renderNextLampsGroup();
    4afe:	f7ff ff1f 	bl	4940 <Sys80b::renderNextLampsGroup()>
	checkSolenoids(ms);
    4b02:	4629      	mov	r1, r5
    4b04:	4620      	mov	r0, r4
    4b06:	f7ff fe87 	bl	4818 <Sys80b::checkSolenoids(unsigned long&)>
	feedDisplay();
    4b0a:	4620      	mov	r0, r4
    4b0c:	f7ff fee0 	bl	48d0 <Sys80b::feedDisplay()>
	/* if (display.isLastPosition()) */ display.update(ms);
    4b10:	6829      	ldr	r1, [r5, #0]
    4b12:	f104 000c 	add.w	r0, r4, #12
    4b16:	f7fd ff53 	bl	29c0 <ExtTextDisplay::update(unsigned long)>
	
	incrementStrobe();
    4b1a:	4620      	mov	r0, r4
    4b1c:	f7ff fe9a 	bl	4854 <Sys80b::incrementStrobe()>
		if (pin == 0) {
			return (CORE_PIN0_PINREG & CORE_PIN0_BITMASK) ? 1 : 0;
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
    4b20:	4a1f      	ldr	r2, [pc, #124]	; (4ba0 <Sys80b::_millisRoutine(unsigned long&)+0xa8>)

	bool slsw = hw->readSlamSw();
	if (slsw != slamSwitchLastState) {
    4b22:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
    4b26:	6811      	ldr	r1, [r2, #0]
    inline void writeDisplayLD1(byte b) { digitalWriteFast(D_LD1_PIN, (b ? HIGH : LOW)); }
    inline void writeDisplayLD2(byte b) { digitalWriteFast(D_LD2_PIN, (b ? HIGH : LOW)); }
    inline void writeStrobes(byte b) { switchMatrix_IO->mcpWritePA(b); }
    inline void writeSolenoids(uint16_t states) { solenoids_IO->mcpWrite(states); }
    inline byte readReturns() { return switchMatrix_IO->mcpReadPB(); }
    inline bool readSlamSw() { return (digitalReadFast(SLAM_PIN) == HIGH); }
    4b28:	f001 0101 	and.w	r1, r1, #1
    4b2c:	b2ce      	uxtb	r6, r1
    4b2e:	42b3      	cmp	r3, r6
    4b30:	d00a      	beq.n	4b48 <Sys80b::_millisRoutine(unsigned long&)+0x50>
		onSlamSwitchEvent(slamSwitchNormalState ? !slsw : slsw);
    4b32:	6823      	ldr	r3, [r4, #0]
    4b34:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
    4b38:	691b      	ldr	r3, [r3, #16]
    4b3a:	b9a2      	cbnz	r2, 4b66 <Sys80b::_millisRoutine(unsigned long&)+0x6e>
    4b3c:	4a19      	ldr	r2, [pc, #100]	; (4ba4 <Sys80b::_millisRoutine(unsigned long&)+0xac>)
    4b3e:	4293      	cmp	r3, r2
    4b40:	4631      	mov	r1, r6
    4b42:	d115      	bne.n	4b70 <Sys80b::_millisRoutine(unsigned long&)+0x78>
		slamSwitchLastState = slsw;
    4b44:	f884 6272 	strb.w	r6, [r4, #626]	; 0x272
	}

	bool inputChanges = acquireReturns(ms);
    4b48:	4629      	mov	r1, r5
    4b4a:	4620      	mov	r0, r4
    4b4c:	f7ff fe94 	bl	4878 <Sys80b::acquireReturns(unsigned long&)>
    4b50:	2800      	cmp	r0, #0
    4b52:	bf14      	ite	ne
    4b54:	2601      	movne	r6, #1
    4b56:	2600      	moveq	r6, #0
	if (inputChanges) {
    4b58:	d10d      	bne.n	4b76 <Sys80b::_millisRoutine(unsigned long&)+0x7e>
		_onSwitchEvent(_changedSwitchNum, _changedSwitchState, ms);
		onSwitchEvent(_changedSwitchNum, _changedSwitchState);
	}
	_checkPressedKey(ms);
    4b5a:	4620      	mov	r0, r4
    4b5c:	4629      	mov	r1, r5
    4b5e:	f7ff ff8b 	bl	4a78 <Sys80b::_checkPressedKey(unsigned long&)>
	return inputChanges;
}
    4b62:	4630      	mov	r0, r6
    4b64:	bd70      	pop	{r4, r5, r6, pc}
    4b66:	4a0f      	ldr	r2, [pc, #60]	; (4ba4 <Sys80b::_millisRoutine(unsigned long&)+0xac>)
    4b68:	4293      	cmp	r3, r2
	
	incrementStrobe();

	bool slsw = hw->readSlamSw();
	if (slsw != slamSwitchLastState) {
		onSlamSwitchEvent(slamSwitchNormalState ? !slsw : slsw);
    4b6a:	f081 0101 	eor.w	r1, r1, #1
    4b6e:	d0e9      	beq.n	4b44 <Sys80b::_millisRoutine(unsigned long&)+0x4c>
    4b70:	4620      	mov	r0, r4
    4b72:	4798      	blx	r3
    4b74:	e7e6      	b.n	4b44 <Sys80b::_millisRoutine(unsigned long&)+0x4c>
		slamSwitchLastState = slsw;
	}

	bool inputChanges = acquireReturns(ms);
	if (inputChanges) {
		_onSwitchEvent(_changedSwitchNum, _changedSwitchState, ms);
    4b76:	462b      	mov	r3, r5
    4b78:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
    4b7c:	f894 1275 	ldrb.w	r1, [r4, #629]	; 0x275
    4b80:	4620      	mov	r0, r4
    4b82:	f7ff ff29 	bl	49d8 <Sys80b::_onSwitchEvent(unsigned char, bool, unsigned long&)>
		onSwitchEvent(_changedSwitchNum, _changedSwitchState);
    4b86:	6823      	ldr	r3, [r4, #0]
    4b88:	4a07      	ldr	r2, [pc, #28]	; (4ba8 <Sys80b::_millisRoutine(unsigned long&)+0xb0>)
    4b8a:	68db      	ldr	r3, [r3, #12]
    4b8c:	4293      	cmp	r3, r2
    4b8e:	d0e4      	beq.n	4b5a <Sys80b::_millisRoutine(unsigned long&)+0x62>
    4b90:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
    4b94:	f894 1275 	ldrb.w	r1, [r4, #629]	; 0x275
    4b98:	4620      	mov	r0, r4
    4b9a:	4798      	blx	r3
    4b9c:	e7dd      	b.n	4b5a <Sys80b::_millisRoutine(unsigned long&)+0x62>
    4b9e:	bf00      	nop
    4ba0:	400ff0d0 	.word	0x400ff0d0
    4ba4:	000044f9 	.word	0x000044f9
    4ba8:	00002e5d 	.word	0x00002e5d

00004bac <Sys80b_Actuator::Sys80b_Actuator(Sys80b*, OutputType, unsigned char, __FlashStringHelper const*)>:
	_type = t;
	num = n;
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
    4bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bb0:	4604      	mov	r4, r0
    4bb2:	b084      	sub	sp, #16
	const __FlashStringHelper* descrText) {
    4bb4:	f100 0508 	add.w	r5, r0, #8
	_type = t;
	num = n;
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
    4bb8:	4617      	mov	r7, r2
    4bba:	461e      	mov	r6, r3
    4bbc:	4688      	mov	r8, r1
	const __FlashStringHelper* descrText) {
    4bbe:	4628      	mov	r0, r5
    4bc0:	2100      	movs	r1, #0
    4bc2:	f005 f8bb 	bl	9d3c <String::String(char const*)>
	_sys = refSystem;
	_type = t;
	num = n;
	descr = String(descrText);
    4bc6:	990a      	ldr	r1, [sp, #40]	; 0x28
	descr = String(descrText);
};

Sys80b_Actuator::Sys80b_Actuator(Sys80b* refSystem, OutputType t, byte n, 
	const __FlashStringHelper* descrText) {
	_sys = refSystem;
    4bc8:	f8c4 8000 	str.w	r8, [r4]
	_type = t;
    4bcc:	7127      	strb	r7, [r4, #4]
	num = n;
    4bce:	7166      	strb	r6, [r4, #5]
	descr = String(descrText);
    4bd0:	4668      	mov	r0, sp
    4bd2:	f005 f8c7 	bl	9d64 <String::String(__FlashStringHelper const*)>
    4bd6:	4669      	mov	r1, sp
    4bd8:	4628      	mov	r0, r5
    4bda:	f005 f941 	bl	9e60 <String::operator=(String&&)>
    4bde:	4668      	mov	r0, sp
    4be0:	f005 f86c 	bl	9cbc <String::~String()>
};
    4be4:	4620      	mov	r0, r4
    4be6:	b004      	add	sp, #16
    4be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bec <Sys80b_Actuator::set(bool)>:
		return false;
	}
};

void Sys80b_Actuator::set(bool state) {
	switch (_type) {
    4bec:	7903      	ldrb	r3, [r0, #4]
    4bee:	2b01      	cmp	r3, #1
    4bf0:	d007      	beq.n	4c02 <Sys80b_Actuator::set(bool)+0x16>
    4bf2:	2b03      	cmp	r3, #3
    4bf4:	d104      	bne.n	4c00 <Sys80b_Actuator::set(bool)+0x14>
	case SOLENOIDS:
		_sys->setSolenoid(num, state);
		break;
	case LAMPS:
		_sys->setLamp(num, state);
    4bf6:	460a      	mov	r2, r1
    4bf8:	7941      	ldrb	r1, [r0, #5]
    4bfa:	6800      	ldr	r0, [r0, #0]
    4bfc:	f7ff be1e 	b.w	483c <Sys80b::setLamp(unsigned char, bool)>
    4c00:	4770      	bx	lr
};

void Sys80b_Actuator::set(bool state) {
	switch (_type) {
	case SOLENOIDS:
		_sys->setSolenoid(num, state);
    4c02:	460a      	mov	r2, r1
    4c04:	7941      	ldrb	r1, [r0, #5]
    4c06:	6800      	ldr	r0, [r0, #0]
    4c08:	f7ff bdda 	b.w	47c0 <Sys80b::setSolenoid(unsigned char, bool)>

00004c0c <Sys80b_Display::Sys80b_Display()>:
#include "Sys80b_Display.h"

Sys80b_Display::Sys80b_Display() {
    4c0c:	b538      	push	{r3, r4, r5, lr}
	String inputText; // the text line to show on display (obj input)
	byte rows; // dislpay lines count
	byte cols; // dispay lines width

public:
	ExtTextDisplay() : display(nullptr), rows(0), cols(0), extLine(nullptr) {}
    4c0e:	2500      	movs	r5, #0
    4c10:	4604      	mov	r4, r0
    4c12:	4629      	mov	r1, r5
    4c14:	6005      	str	r5, [r0, #0]
    4c16:	6045      	str	r5, [r0, #4]
    4c18:	300c      	adds	r0, #12
    4c1a:	f005 f88f 	bl	9d3c <String::String(char const*)>
	unsigned _valuesCount;
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
    4c1e:	2320      	movs	r3, #32
    4c20:	6363      	str	r3, [r4, #52]	; 0x34
    4c22:	7725      	strb	r5, [r4, #28]
    4c24:	7765      	strb	r5, [r4, #29]
		_buff = new Type[_size];
    4c26:	2040      	movs	r0, #64	; 0x40
    4c28:	f004 ff6e 	bl	9b08 <operator new[](unsigned int)>
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    4c2c:	62e5      	str	r5, [r4, #44]	; 0x2c
	unsigned _size;

public:
	Buffer() {
		_size = (size < MIN_LENGTH) ? MIN_LENGTH : size;
		_buff = new Type[_size];
    4c2e:	62a0      	str	r0, [r4, #40]	; 0x28
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
		_valuesCount = 0;
    4c30:	6325      	str	r5, [r4, #48]	; 0x30
	d = new TextDisplay(2, DISPLAY_COLS);
    4c32:	2028      	movs	r0, #40	; 0x28
    4c34:	f004 ff66 	bl	9b04 <operator new(unsigned int)>
    4c38:	2214      	movs	r2, #20
    4c3a:	4605      	mov	r5, r0
    4c3c:	2102      	movs	r1, #2
    4c3e:	f000 f973 	bl	4f28 <TextDisplay::TextDisplay(unsigned char, unsigned char)>
	_init(*d);
    4c42:	4620      	mov	r0, r4
#include "Sys80b_Display.h"

Sys80b_Display::Sys80b_Display() {
	d = new TextDisplay(2, DISPLAY_COLS);
    4c44:	6225      	str	r5, [r4, #32]
	_init(*d);
    4c46:	4629      	mov	r1, r5
    4c48:	f7fd ff70 	bl	2b2c <ExtTextDisplay::_init(TextDisplay&)>
}
    4c4c:	4620      	mov	r0, r4
    4c4e:	bd38      	pop	{r3, r4, r5, pc}

00004c50 <Sys80b_Display::getRowText(unsigned char)>:
		_pushCmd(row+1, CD_INVRSE_MODE);
		break;
	}
}

String Sys80b_Display::getRowText(byte row) {
    4c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (row > 1) return String("");
    4c54:	2a01      	cmp	r2, #1
		_pushCmd(row+1, CD_INVRSE_MODE);
		break;
	}
}

String Sys80b_Display::getRowText(byte row) {
    4c56:	b085      	sub	sp, #20
    4c58:	4681      	mov	r9, r0
	if (row > 1) return String("");
    4c5a:	d906      	bls.n	4c6a <Sys80b_Display::getRowText(unsigned char)+0x1a>
    4c5c:	491a      	ldr	r1, [pc, #104]	; (4cc8 <Sys80b_Display::getRowText(unsigned char)+0x78>)
    4c5e:	f005 f86d 	bl	9d3c <String::String(char const*)>
	String retStr; // = display->getSpacesRow();
	byte dWidth = display->getWidth();
	for (byte i = 0; i < dWidth; i++) retStr += (char)_getVisibleChar(row, i);
	return retStr;
}
    4c62:	4648      	mov	r0, r9
    4c64:	b005      	add	sp, #20
    4c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c6a:	460e      	mov	r6, r1
	}
}

String Sys80b_Display::getRowText(byte row) {
	if (row > 1) return String("");
	String retStr; // = display->getSpacesRow();
    4c6c:	4668      	mov	r0, sp
    4c6e:	2100      	movs	r1, #0
    4c70:	4615      	mov	r5, r2
    4c72:	f005 f863 	bl	9d3c <String::String(char const*)>
    4c76:	6833      	ldr	r3, [r6, #0]
    4c78:	7d5f      	ldrb	r7, [r3, #21]
	byte dWidth = display->getWidth();
	for (byte i = 0; i < dWidth; i++) retStr += (char)_getVisibleChar(row, i);
    4c7a:	b1cf      	cbz	r7, 4cb0 <Sys80b_Display::getRowText(unsigned char)+0x60>
    4c7c:	2400      	movs	r4, #0
    4c7e:	4622      	mov	r2, r4
    4c80:	eb06 0805 	add.w	r8, r6, r5
    4c84:	e008      	b.n	4c98 <Sys80b_Display::getRowText(unsigned char)+0x48>

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = ExtTextDisplay::_getVisibleChar(row, col);
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
    4c86:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    4c8a:	3401      	adds	r4, #1
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    4c8c:	4668      	mov	r0, sp
    4c8e:	f005 f935 	bl	9efc <String::append(char)>

String Sys80b_Display::getRowText(byte row) {
	if (row > 1) return String("");
	String retStr; // = display->getSpacesRow();
	byte dWidth = display->getWidth();
	for (byte i = 0; i < dWidth; i++) retStr += (char)_getVisibleChar(row, i);
    4c92:	b2e2      	uxtb	r2, r4
    4c94:	42ba      	cmp	r2, r7
    4c96:	d20b      	bcs.n	4cb0 <Sys80b_Display::getRowText(unsigned char)+0x60>
	for (int line = 0; line < rows; line++) str += "[" + getRowText(line) + "]\n";
	return str;
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = ExtTextDisplay::_getVisibleChar(row, col);
    4c98:	4629      	mov	r1, r5
    4c9a:	4630      	mov	r0, r6
    4c9c:	f7fd fef2 	bl	2a84 <ExtTextDisplay::_getVisibleChar(unsigned char, unsigned char)>
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    4ca0:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
    4ca4:	2b01      	cmp	r3, #1
    4ca6:	d1ee      	bne.n	4c86 <Sys80b_Display::getRowText(unsigned char)+0x36>
    4ca8:	0603      	lsls	r3, r0, #24
    4caa:	d5ec      	bpl.n	4c86 <Sys80b_Display::getRowText(unsigned char)+0x36>
    4cac:	2120      	movs	r1, #32
    4cae:	e7ec      	b.n	4c8a <Sys80b_Display::getRowText(unsigned char)+0x3a>
String Sys80b_Display::getRowText(byte row) {
	if (row > 1) return String("");
	String retStr; // = display->getSpacesRow();
	byte dWidth = display->getWidth();
	for (byte i = 0; i < dWidth; i++) retStr += (char)_getVisibleChar(row, i);
	return retStr;
    4cb0:	4669      	mov	r1, sp
    4cb2:	4648      	mov	r0, r9
    4cb4:	f004 fff0 	bl	9c98 <String::String(String&&)>
	}
}

String Sys80b_Display::getRowText(byte row) {
	if (row > 1) return String("");
	String retStr; // = display->getSpacesRow();
    4cb8:	4668      	mov	r0, sp
    4cba:	f004 ffff 	bl	9cbc <String::~String()>
	byte dWidth = display->getWidth();
	for (byte i = 0; i < dWidth; i++) retStr += (char)_getVisibleChar(row, i);
	return retStr;
}
    4cbe:	4648      	mov	r0, r9
    4cc0:	b005      	add	sp, #20
    4cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4cc6:	bf00      	nop
    4cc8:	0000ff64 	.word	0x0000ff64

00004ccc <Sys80b_Display::toString()>:
	}
	lastData = data;
	return data;
}

String Sys80b_Display::toString() {
    4ccc:	b570      	push	{r4, r5, r6, lr}
    4cce:	460d      	mov	r5, r1
    4cd0:	b088      	sub	sp, #32
	String str;
    4cd2:	2100      	movs	r1, #0
	}
	lastData = data;
	return data;
}

String Sys80b_Display::toString() {
    4cd4:	4606      	mov	r6, r0
	String str;
    4cd6:	f005 f831 	bl	9d3c <String::String(char const*)>
	for (int line = 0; line < rows; line++) str += "[" + getRowText(line) + "]\n";
    4cda:	7f2b      	ldrb	r3, [r5, #28]
    4cdc:	b1f3      	cbz	r3, 4d1c <Sys80b_Display::toString()+0x50>
    4cde:	2400      	movs	r4, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4ce0:	4910      	ldr	r1, [pc, #64]	; (4d24 <Sys80b_Display::toString()+0x58>)
    4ce2:	a804      	add	r0, sp, #16
    4ce4:	f005 f82a 	bl	9d3c <String::String(char const*)>
    4ce8:	b2e2      	uxtb	r2, r4
    4cea:	4629      	mov	r1, r5
    4cec:	4668      	mov	r0, sp
    4cee:	f7ff ffaf 	bl	4c50 <Sys80b_Display::getRowText(unsigned char)>
    4cf2:	4669      	mov	r1, sp
    4cf4:	a804      	add	r0, sp, #16
    4cf6:	f005 f925 	bl	9f44 <operator+(StringSumHelper const&, String const&)>
    4cfa:	490b      	ldr	r1, [pc, #44]	; (4d28 <Sys80b_Display::toString()+0x5c>)
    4cfc:	f005 f92a 	bl	9f54 <operator+(StringSumHelper const&, char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    4d00:	4601      	mov	r1, r0
    4d02:	4630      	mov	r0, r6
    4d04:	f005 f8f6 	bl	9ef4 <String::append(String const&)>
    4d08:	4668      	mov	r0, sp
    4d0a:	f004 ffd7 	bl	9cbc <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    4d0e:	a804      	add	r0, sp, #16
    4d10:	f004 ffd4 	bl	9cbc <String::~String()>
    4d14:	7f2b      	ldrb	r3, [r5, #28]
    4d16:	3401      	adds	r4, #1
    4d18:	42a3      	cmp	r3, r4
    4d1a:	dce1      	bgt.n	4ce0 <Sys80b_Display::toString()+0x14>
	return str;
}
    4d1c:	4630      	mov	r0, r6
    4d1e:	b008      	add	sp, #32
    4d20:	bd70      	pop	{r4, r5, r6, pc}
    4d22:	bf00      	nop
    4d24:	0000fd80 	.word	0x0000fd80
    4d28:	0001049c 	.word	0x0001049c

00004d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>:
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
}

void Sys80b_Display::_pushCmd(byte ld, byte cmd) {
    4d2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (cmdBuffer.getCount() >= CMD_BUF_LEN) return; // refused
    4d2e:	2b1f      	cmp	r3, #31
    4d30:	dc26      	bgt.n	4d80 <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x54>
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
	return ch & (byte)0x7f;
}

void Sys80b_Display::_pushCmd(byte ld, byte cmd) {
    4d32:	b5f0      	push	{r4, r5, r6, r7, lr}
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4d34:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (cmdBuffer.getCount() >= CMD_BUF_LEN) return; // refused
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
    4d36:	0209      	lsls	r1, r1, #8
    4d38:	42ab      	cmp	r3, r5
    4d3a:	f401 7140 	and.w	r1, r1, #768	; 0x300
    4d3e:	d21e      	bcs.n	4d7e <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x52>
		unsigned p = _firstPtr + _valuesCount++;
    4d40:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4d44:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4d48:	eb03 070c 	add.w	r7, r3, ip
		if (p >= _size) p -= _size;
    4d4c:	42bd      	cmp	r5, r7
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4d4e:	f103 0401 	add.w	r4, r3, #1
		if (p >= _size) p -= _size;
    4d52:	bf98      	it	ls
    4d54:	1b7f      	subls	r7, r7, r5
		_buff[p] = value;
    4d56:	f441 6680 	orr.w	r6, r1, #1024	; 0x400
    4d5a:	f046 0601 	orr.w	r6, r6, #1
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4d5e:	42a5      	cmp	r5, r4
		unsigned p = _firstPtr + _valuesCount++;
    4d60:	6304      	str	r4, [r0, #48]	; 0x30
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4d62:	f82e 6017 	strh.w	r6, [lr, r7, lsl #1]
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4d66:	d90a      	bls.n	4d7e <Sys80b_Display::_pushCmd(unsigned char, unsigned char)+0x52>
		unsigned p = _firstPtr + _valuesCount++;
    4d68:	4464      	add	r4, ip
		if (p >= _size) p -= _size;
    4d6a:	42ac      	cmp	r4, r5
    4d6c:	bf28      	it	cs
    4d6e:	1b64      	subcs	r4, r4, r5
		_buff[p] = value;
    4d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4d74:	3302      	adds	r3, #2
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4d76:	4311      	orrs	r1, r2
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4d78:	6303      	str	r3, [r0, #48]	; 0x30
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4d7a:	f82e 1014 	strh.w	r1, [lr, r4, lsl #1]
    4d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop

00004d84 <Sys80b_Display::getNextDisplayData()>:
// returns a word with format 00000RLL.DDDDDDDD where:
// R = reset bit (active low)
// LL = LD2, LD1 bits (active high)
// DDDDDDDD = data byte
// at least LD1 or LD2 (or Reset) should be setPeriod for any effect
uint16_t Sys80b_Display::getNextDisplayData() {
    4d84:	6b02      	ldr	r2, [r0, #48]	; 0x30
    4d86:	b538      	push	{r3, r4, r5, lr}
    4d88:	4603      	mov	r3, r0

	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
    4d8a:	b172      	cbz	r2, 4daa <Sys80b_Display::getNextDisplayData()+0x26>
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
    4d8c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    4d8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
		if (_firstPtr == _size) _firstPtr = 0;
    4d90:	6b5c      	ldr	r4, [r3, #52]	; 0x34
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
    4d92:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    4d96:	3101      	adds	r1, #1
		if (_firstPtr == _size) _firstPtr = 0;
    4d98:	42a1      	cmp	r1, r4
		return true;
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
    4d9a:	62d9      	str	r1, [r3, #44]	; 0x2c
		if (_firstPtr == _size) _firstPtr = 0;
		_valuesCount--;
    4d9c:	f102 32ff 	add.w	r2, r2, #4294967295
	}

	Type get() {
		if (_valuesCount == 0) return NULL;
		Type value = _buff[_firstPtr++];
		if (_firstPtr == _size) _firstPtr = 0;
    4da0:	bf04      	itt	eq
    4da2:	2100      	moveq	r1, #0
    4da4:	62d9      	streq	r1, [r3, #44]	; 0x2c
		_valuesCount--;
    4da6:	631a      	str	r2, [r3, #48]	; 0x30
    4da8:	bd38      	pop	{r3, r4, r5, pc}
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
    4daa:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
	for (int line = 0; line < rows; line++) str += "[" + getRowText(line) + "]\n";
	return str;
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = ExtTextDisplay::_getVisibleChar(row, col);
    4dae:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
    4db2:	4604      	mov	r4, r0
    4db4:	4629      	mov	r1, r5
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    4db6:	4425      	add	r5, r4
	for (int line = 0; line < rows; line++) str += "[" + getRowText(line) + "]\n";
	return str;
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = ExtTextDisplay::_getVisibleChar(row, col);
    4db8:	f7fd fe64 	bl	2a84 <ExtTextDisplay::_getVisibleChar(unsigned char, unsigned char)>
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    4dbc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    4dc0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = ExtTextDisplay::_getVisibleChar(row, col);
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    4dc4:	2a01      	cmp	r2, #1
    4dc6:	d020      	beq.n	4e0a <Sys80b_Display::getNextDisplayData()+0x86>
	return ch & (byte)0x7f;
    4dc8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    4dcc:	b1ab      	cbz	r3, 4dfa <Sys80b_Display::getNextDisplayData()+0x76>
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    4dce:	2801      	cmp	r0, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    4dd0:	f440 65c0 	orr.w	r5, r0, #1536	; 0x600
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    4dd4:	d030      	beq.n	4e38 <Sys80b_Display::getNextDisplayData()+0xb4>
	if (++currentRow > 1) {
    4dd6:	1c58      	adds	r0, r3, #1
    4dd8:	b2c0      	uxtb	r0, r0
    4dda:	2801      	cmp	r0, #1
    4ddc:	d93e      	bls.n	4e5c <Sys80b_Display::getNextDisplayData()+0xd8>
		currentRow = 0;
		if (++currentCol == DISPLAY_COLS) {
    4dde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    4de2:	3301      	adds	r3, #1
    4de4:	b2db      	uxtb	r3, r3
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
    4de6:	2200      	movs	r2, #0
		if (++currentCol == DISPLAY_COLS) {
    4de8:	2b14      	cmp	r3, #20
    4dea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
    4dee:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		if (++currentCol == DISPLAY_COLS) {
    4df2:	d026      	beq.n	4e42 <Sys80b_Display::getNextDisplayData()+0xbe>
			currentCol = 0;
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
		}
	}
	lastData = data;
    4df4:	8765      	strh	r5, [r4, #58]	; 0x3a
	return data;
    4df6:	4628      	mov	r0, r5
    4df8:	bd38      	pop	{r3, r4, r5, pc}
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    4dfa:	2801      	cmp	r0, #1
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    4dfc:	f440 65a0 	orr.w	r5, r0, #1280	; 0x500
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
    4e00:	d009      	beq.n	4e16 <Sys80b_Display::getNextDisplayData()+0x92>
	if (++currentRow > 1) {
    4e02:	2301      	movs	r3, #1
    4e04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    4e08:	e7f4      	b.n	4df4 <Sys80b_Display::getNextDisplayData()+0x70>
}

byte Sys80b_Display::_getVisibleChar(byte row, byte col) {
	byte ch = ExtTextDisplay::_getVisibleChar(row, col);
	byte tag = ch & 0x80;
	if (mode[row] == BLANK && tag > 0) return ' ';
    4e0a:	0601      	lsls	r1, r0, #24
    4e0c:	d5dc      	bpl.n	4dc8 <Sys80b_Display::getNextDisplayData()+0x44>
	// prioritary pending command
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
    4e0e:	b303      	cbz	r3, 4e52 <Sys80b_Display::getNextDisplayData()+0xce>
	data |= ch;
    4e10:	f44f 65c4 	mov.w	r5, #1568	; 0x620
    4e14:	e7df      	b.n	4dd6 <Sys80b_Display::getNextDisplayData()+0x52>
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4e16:	6b22      	ldr	r2, [r4, #48]	; 0x30
    4e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e1a:	428a      	cmp	r2, r1
    4e1c:	d21e      	bcs.n	4e5c <Sys80b_Display::getNextDisplayData()+0xd8>
		unsigned p = _firstPtr + _valuesCount++;
    4e1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4e20:	1c53      	adds	r3, r2, #1
    4e22:	4402      	add	r2, r0
		if (p >= _size) p -= _size;
    4e24:	4291      	cmp	r1, r2
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4e26:	6323      	str	r3, [r4, #48]	; 0x30
		if (p >= _size) p -= _size;
    4e28:	bf98      	it	ls
    4e2a:	1a52      	subls	r2, r2, r1
		_buff[p] = value;
    4e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e2e:	f823 5012 	strh.w	r5, [r3, r2, lsl #1]
    4e32:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    4e36:	e7ce      	b.n	4dd6 <Sys80b_Display::getNextDisplayData()+0x52>
		_valuesCount = 0;
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4e38:	6b22      	ldr	r2, [r4, #48]	; 0x30
    4e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e3c:	428a      	cmp	r2, r1
    4e3e:	d2ca      	bcs.n	4dd6 <Sys80b_Display::getNextDisplayData()+0x52>
    4e40:	e7ed      	b.n	4e1e <Sys80b_Display::getNextDisplayData()+0x9a>
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
		currentRow = 0;
		if (++currentCol == DISPLAY_COLS) {
			currentCol = 0;
    4e42:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			_pushCmd(3, CD_BUF_PTR); // CR on both lines
    4e46:	2103      	movs	r1, #3
    4e48:	22c0      	movs	r2, #192	; 0xc0
    4e4a:	4620      	mov	r0, r4
    4e4c:	f7ff ff6e 	bl	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
    4e50:	e7d0      	b.n	4df4 <Sys80b_Display::getNextDisplayData()+0x70>
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    4e52:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
	if (!cmdBuffer.isEmpty()) return cmdBuffer.get();
	
	// standard char
	char ch = _getVisibleChar(currentRow, currentCol);
	uint16_t data = (currentRow == 0) ? 0x500 : 0x600; // LD1 or LD2 bits with reset signal high
	data |= ch;
    4e56:	f44f 65a4 	mov.w	r5, #1312	; 0x520
    4e5a:	e7cb      	b.n	4df4 <Sys80b_Display::getNextDisplayData()+0x70>
	if (ch == CD_PREFIX) cmdBuffer.put(data); // repeats value output (char #1 case)
	if (++currentRow > 1) {
    4e5c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    4e60:	e7c8      	b.n	4df4 <Sys80b_Display::getNextDisplayData()+0x70>
    4e62:	bf00      	nop

00004e64 <Sys80b_Display::_sendInitSequence()>:
	uint16_t base = ((uint16_t)(0x04u | (ld & 0x03u))) << 8;
	cmdBuffer.put(base | CD_PREFIX);
	cmdBuffer.put(base | cmd);
}

void Sys80b_Display::_sendInitSequence() {
    4e64:	b510      	push	{r4, lr}
	_pushCmd(3, CD_DIGIT_CNT | DISPLAY_COLS);
    4e66:	2294      	movs	r2, #148	; 0x94
    4e68:	2103      	movs	r1, #3
    4e6a:	f7ff ff5f 	bl	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_DTIME_16CLK); // no sw effect
    4e6e:	2205      	movs	r2, #5
    4e70:	2103      	movs	r1, #3
    4e72:	f7ff ff5b 	bl	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_DUTY_CYCLE | 0x3F); // maximum brightess
    4e76:	227f      	movs	r2, #127	; 0x7f
    4e78:	2103      	movs	r1, #3
    4e7a:	f7ff ff57 	bl	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_NORMAL_MODE);
    4e7e:	2208      	movs	r2, #8
    4e80:	2103      	movs	r1, #3
    4e82:	f7ff ff53 	bl	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_BUF_PTR);
    4e86:	22c0      	movs	r2, #192	; 0xc0
    4e88:	2103      	movs	r1, #3
    4e8a:	f7ff ff4f 	bl	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
	_pushCmd(3, CD_START_SCAN);
    4e8e:	220e      	movs	r2, #14
    4e90:	2103      	movs	r1, #3
}
    4e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_pushCmd(3, CD_DIGIT_CNT | DISPLAY_COLS);
	_pushCmd(3, CD_DTIME_16CLK); // no sw effect
	_pushCmd(3, CD_DUTY_CYCLE | 0x3F); // maximum brightess
	_pushCmd(3, CD_NORMAL_MODE);
	_pushCmd(3, CD_BUF_PTR);
	_pushCmd(3, CD_START_SCAN);
    4e96:	f7ff bf49 	b.w	4d2c <Sys80b_Display::_pushCmd(unsigned char, unsigned char)>
    4e9a:	bf00      	nop

00004e9c <Sys80b_Display::reset()>:
    4e9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
	d = new TextDisplay(2, DISPLAY_COLS);
	_init(*d);
}

void Sys80b_Display::reset() {
	currentCol = 0; // current display column
    4e9e:	2300      	movs	r3, #0
Sys80b_Display::Sys80b_Display() {
	d = new TextDisplay(2, DISPLAY_COLS);
	_init(*d);
}

void Sys80b_Display::reset() {
    4ea0:	b510      	push	{r4, lr}
    4ea2:	4604      	mov	r4, r0
	currentCol = 0; // current display column
    4ea4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	currentRow = 0; // current display row
    4ea8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	~Buffer() {
		delete[] _buff;
	}

	void Clear() {
		_firstPtr = 0;
    4eac:	62c3      	str	r3, [r0, #44]	; 0x2c
		_valuesCount = 0;
    4eae:	6303      	str	r3, [r0, #48]	; 0x30
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
    4eb0:	b12a      	cbz	r2, 4ebe <Sys80b_Display::reset()+0x22>
		unsigned p = _firstPtr + _valuesCount++;
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4eb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4eb4:	2101      	movs	r1, #1
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4eb6:	f44f 7240 	mov.w	r2, #768	; 0x300
	}

	// snd = 0..31
	bool put(Type value) {
		if (_valuesCount >= _size) return false; // return on full buffer
		unsigned p = _firstPtr + _valuesCount++;
    4eba:	6301      	str	r1, [r0, #48]	; 0x30
		if (p >= _size) p -= _size;
		_buff[p] = value;
    4ebc:	801a      	strh	r2, [r3, #0]
	cmdBuffer.Clear();
	cmdBuffer.put(0x0300u); // reset signal (active low) to both rows
	_sendInitSequence();
    4ebe:	4620      	mov	r0, r4
    4ec0:	f7ff ffd0 	bl	4e64 <Sys80b_Display::_sendInitSequence()>
	for (byte i = 0; i < 2; i++) mode[i] = NORMAL;
    4ec4:	2300      	movs	r3, #0
    4ec6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    4eca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    4ece:	bd10      	pop	{r4, pc}

00004ed0 <TextDisplay::clearRow(unsigned char) [clone .part.1]>:
	}
}

void TextDisplay::clearRow(byte row) {
	if (row >= rows) return;
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
    4ed0:	7d43      	ldrb	r3, [r0, #21]
    4ed2:	b163      	cbz	r3, 4eee <TextDisplay::clearRow(unsigned char) [clone .part.1]+0x1e>
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
	}
}

void TextDisplay::clearRow(byte row) {
    4ed4:	b410      	push	{r4}
    4ed6:	0089      	lsls	r1, r1, #2
	if (row >= rows) return;
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
    4ed8:	2300      	movs	r3, #0
    4eda:	2420      	movs	r4, #32
    4edc:	6802      	ldr	r2, [r0, #0]
    4ede:	5852      	ldr	r2, [r2, r1]
    4ee0:	54d4      	strb	r4, [r2, r3]
    4ee2:	3301      	adds	r3, #1
    4ee4:	7d42      	ldrb	r2, [r0, #21]
    4ee6:	b2db      	uxtb	r3, r3
    4ee8:	429a      	cmp	r2, r3
    4eea:	d8f7      	bhi.n	4edc <TextDisplay::clearRow(unsigned char) [clone .part.1]+0xc>
}
    4eec:	bc10      	pop	{r4}
    4eee:	4770      	bx	lr

00004ef0 <TextDisplay::clear()>:
	clear();
	spacesStr = String(textRow[0]);
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    4ef0:	7d03      	ldrb	r3, [r0, #20]
    4ef2:	b1c3      	cbz	r3, 4f26 <TextDisplay::clear()+0x36>
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
	clear();
	spacesStr = String(textRow[0]);
}

void TextDisplay::clear() {
    4ef4:	b470      	push	{r4, r5, r6}
	for (byte i = 0; i < rows; i++) {
    4ef6:	2500      	movs	r5, #0
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
    4ef8:	462e      	mov	r6, r5
    4efa:	2420      	movs	r4, #32
    4efc:	7d42      	ldrb	r2, [r0, #21]
    4efe:	00a9      	lsls	r1, r5, #2
    4f00:	b142      	cbz	r2, 4f14 <TextDisplay::clear()+0x24>
    4f02:	2300      	movs	r3, #0
    4f04:	6802      	ldr	r2, [r0, #0]
    4f06:	5852      	ldr	r2, [r2, r1]
    4f08:	54d4      	strb	r4, [r2, r3]
    4f0a:	3301      	adds	r3, #1
    4f0c:	7d42      	ldrb	r2, [r0, #21]
    4f0e:	b2db      	uxtb	r3, r3
    4f10:	429a      	cmp	r2, r3
    4f12:	d8f7      	bhi.n	4f04 <TextDisplay::clear()+0x14>
		textRow[i][columns] = 0;
    4f14:	6803      	ldr	r3, [r0, #0]
    4f16:	585b      	ldr	r3, [r3, r1]
    4f18:	549e      	strb	r6, [r3, r2]
	clear();
	spacesStr = String(textRow[0]);
}

void TextDisplay::clear() {
	for (byte i = 0; i < rows; i++) {
    4f1a:	3501      	adds	r5, #1
    4f1c:	7d03      	ldrb	r3, [r0, #20]
    4f1e:	b2ed      	uxtb	r5, r5
    4f20:	42ab      	cmp	r3, r5
    4f22:	d8eb      	bhi.n	4efc <TextDisplay::clear()+0xc>
		for (byte j = 0; j < columns; j++) textRow[i][j] = ' ';
		textRow[i][columns] = 0;
	}
}
    4f24:	bc70      	pop	{r4, r5, r6}
    4f26:	4770      	bx	lr

00004f28 <TextDisplay::TextDisplay(unsigned char, unsigned char)>:
#include "TextDisplay.h"

TextDisplay::TextDisplay(byte rws = MIN_ROWS_COUNT, byte cols = MIN_COLS_COUNT) {
    4f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2a:	4605      	mov	r5, r0
    4f2c:	b085      	sub	sp, #20
    4f2e:	460c      	mov	r4, r1
    4f30:	3004      	adds	r0, #4
    4f32:	2100      	movs	r1, #0
    4f34:	f105 0718 	add.w	r7, r5, #24
    4f38:	4616      	mov	r6, r2
    4f3a:	f004 feff 	bl	9d3c <String::String(char const*)>
    4f3e:	4638      	mov	r0, r7
    4f40:	2100      	movs	r1, #0
    4f42:	f004 fefb 	bl	9d3c <String::String(char const*)>
	// dimensions check
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
    4f46:	b34c      	cbz	r4, 4f9c <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x74>
    4f48:	00a0      	lsls	r0, r4, #2
	rows = rws;
    4f4a:	752c      	strb	r4, [r5, #20]
	if (cols == MIN_COLS_COUNT) cols = MIN_COLS_COUNT;
	columns = cols;
    4f4c:	756e      	strb	r6, [r5, #21]

	// creates "empty" spaces text rows
	textRow = new char*[rows];
    4f4e:	f004 fddb 	bl	9b08 <operator new[](unsigned int)>
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
    4f52:	7d2b      	ldrb	r3, [r5, #20]
	rows = rws;
	if (cols == MIN_COLS_COUNT) cols = MIN_COLS_COUNT;
	columns = cols;

	// creates "empty" spaces text rows
	textRow = new char*[rows];
    4f54:	6028      	str	r0, [r5, #0]
	for (byte i = 0; i < rows; i++) textRow[i] = new char[columns + 1];
    4f56:	b17b      	cbz	r3, 4f78 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x50>
    4f58:	4606      	mov	r6, r0
    4f5a:	2400      	movs	r4, #0
    4f5c:	e000      	b.n	4f60 <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x38>
    4f5e:	682e      	ldr	r6, [r5, #0]
    4f60:	7d68      	ldrb	r0, [r5, #21]
    4f62:	3001      	adds	r0, #1
    4f64:	f004 fdd0 	bl	9b08 <operator new[](unsigned int)>
    4f68:	b223      	sxth	r3, r4
    4f6a:	3401      	adds	r4, #1
    4f6c:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    4f70:	7d2b      	ldrb	r3, [r5, #20]
    4f72:	b2e4      	uxtb	r4, r4
    4f74:	42a3      	cmp	r3, r4
    4f76:	d8f2      	bhi.n	4f5e <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x36>
	clear();
    4f78:	4628      	mov	r0, r5
    4f7a:	f7ff ffb9 	bl	4ef0 <TextDisplay::clear()>
	spacesStr = String(textRow[0]);
    4f7e:	682b      	ldr	r3, [r5, #0]
    4f80:	4668      	mov	r0, sp
    4f82:	6819      	ldr	r1, [r3, #0]
    4f84:	f004 feda 	bl	9d3c <String::String(char const*)>
    4f88:	4669      	mov	r1, sp
    4f8a:	4638      	mov	r0, r7
    4f8c:	f004 ff68 	bl	9e60 <String::operator=(String&&)>
    4f90:	4668      	mov	r0, sp
    4f92:	f004 fe93 	bl	9cbc <String::~String()>
}
    4f96:	4628      	mov	r0, r5
    4f98:	b005      	add	sp, #20
    4f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f9c:	2004      	movs	r0, #4
#include "TextDisplay.h"

TextDisplay::TextDisplay(byte rws = MIN_ROWS_COUNT, byte cols = MIN_COLS_COUNT) {
	// dimensions check
	if (rws < MIN_ROWS_COUNT) rws = MIN_ROWS_COUNT;
    4f9e:	2401      	movs	r4, #1
    4fa0:	e7d3      	b.n	4f4a <TextDisplay::TextDisplay(unsigned char, unsigned char)+0x22>
    4fa2:	bf00      	nop

00004fa4 <TextDisplay::clearRow(unsigned char)>:
		textRow[i][columns] = 0;
	}
}

void TextDisplay::clearRow(byte row) {
	if (row >= rows) return;
    4fa4:	7d03      	ldrb	r3, [r0, #20]
    4fa6:	428b      	cmp	r3, r1
    4fa8:	d901      	bls.n	4fae <TextDisplay::clearRow(unsigned char)+0xa>
    4faa:	f7ff bf91 	b.w	4ed0 <TextDisplay::clearRow(unsigned char) [clone .part.1]>
    4fae:	4770      	bx	lr

00004fb0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)>:
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
}

// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
    4fb0:	b4f0      	push	{r4, r5, r6, r7}
	if (row > rows) return;
    4fb2:	7d04      	ldrb	r4, [r0, #20]
	for (byte i = 0; i < columns; i++) textRow[row][i] = ' ';
}

// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
    4fb4:	f89d 5010 	ldrb.w	r5, [sp, #16]
	if (row > rows) return;
    4fb8:	428c      	cmp	r4, r1
    4fba:	d318      	bcc.n	4fee <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    4fbc:	b9cd      	cbnz	r5, 4ff2 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x42>
    4fbe:	7d45      	ldrb	r5, [r0, #21]
	if (col > columns) return;
    4fc0:	42aa      	cmp	r2, r5
    4fc2:	d814      	bhi.n	4fee <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
	byte c = col;
	char* tRow = textRow[row];
    4fc4:	6804      	ldr	r4, [r0, #0]
	for (i = 0; srcText[i] != 0 && c < columns; i++) tRow[c++] = srcText[i];
    4fc6:	781e      	ldrb	r6, [r3, #0]
	if (row > rows) return;
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
	if (col > columns) return;
	byte c = col;
	char* tRow = textRow[row];
    4fc8:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
	for (i = 0; srcText[i] != 0 && c < columns; i++) tRow[c++] = srcText[i];
    4fcc:	b17e      	cbz	r6, 4fee <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
    4fce:	42aa      	cmp	r2, r5
    4fd0:	d20d      	bcs.n	4fee <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
    4fd2:	4614      	mov	r4, r2
    4fd4:	e002      	b.n	4fdc <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x2c>
    4fd6:	7d41      	ldrb	r1, [r0, #21]
    4fd8:	42a1      	cmp	r1, r4
    4fda:	d908      	bls.n	4fee <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x3e>
    4fdc:	1c61      	adds	r1, r4, #1
    4fde:	b2c9      	uxtb	r1, r1
    4fe0:	1a8d      	subs	r5, r1, r2
    4fe2:	553e      	strb	r6, [r7, r4]
    4fe4:	b2ed      	uxtb	r5, r5
    4fe6:	460c      	mov	r4, r1
    4fe8:	5d5e      	ldrb	r6, [r3, r5]
    4fea:	2e00      	cmp	r6, #0
    4fec:	d1f3      	bne.n	4fd6 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x26>
}
    4fee:	bcf0      	pop	{r4, r5, r6, r7}
    4ff0:	4770      	bx	lr
// Copy <srcText> in <row>-th text buffer, starting from column <col>.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, byte col, const char *srcText, bool clearBefore) {
	if (row > rows) return;
	byte i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    4ff2:	7d45      	ldrb	r5, [r0, #21]
    4ff4:	2d00      	cmp	r5, #0
    4ff6:	d0e3      	beq.n	4fc0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x10>
    4ff8:	008f      	lsls	r7, r1, #2
    4ffa:	2400      	movs	r4, #0
    4ffc:	2620      	movs	r6, #32
    4ffe:	6805      	ldr	r5, [r0, #0]
    5000:	59ed      	ldr	r5, [r5, r7]
    5002:	552e      	strb	r6, [r5, r4]
    5004:	3401      	adds	r4, #1
    5006:	7d45      	ldrb	r5, [r0, #21]
    5008:	b2e4      	uxtb	r4, r4
    500a:	42a5      	cmp	r5, r4
    500c:	d8f7      	bhi.n	4ffe <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x4e>
    500e:	e7d7      	b.n	4fc0 <TextDisplay::setText(unsigned char, unsigned char, char const*, bool)+0x10>

00005010 <TextDisplay::setText(unsigned char, char const*, short, bool)>:
}

// Copy <srcText> in <row>-th text buffer, starting from <offset>-th char of <srcText>.
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
    5010:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (row >= rows) return;
    5012:	7d04      	ldrb	r4, [r0, #20]
}

// Copy <srcText> in <row>-th text buffer, starting from <offset>-th char of <srcText>.
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
    5014:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if (row >= rows) return;
    5018:	428c      	cmp	r4, r1
    501a:	d929      	bls.n	5070 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
	short i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    501c:	bb4d      	cbnz	r5, 5072 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x62>
    501e:	7d45      	ldrb	r5, [r0, #21]
	if (offset <= -((short)columns)) return; // too large negative offset 
    5020:	426c      	negs	r4, r5
    5022:	42a3      	cmp	r3, r4
    5024:	dd24      	ble.n	5070 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
	uint16_t ln = 0;
	while (srcText[ln] != 0) ln++;
    5026:	7814      	ldrb	r4, [r2, #0]
    5028:	b12c      	cbz	r4, 5036 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x26>
    502a:	2400      	movs	r4, #0
    502c:	3401      	adds	r4, #1
    502e:	b2a4      	uxth	r4, r4
    5030:	5d16      	ldrb	r6, [r2, r4]
    5032:	2e00      	cmp	r6, #0
    5034:	d1fa      	bne.n	502c <TextDisplay::setText(unsigned char, char const*, short, bool)+0x1c>
	if (offset >= ln) return; // too large offset 
    5036:	42a3      	cmp	r3, r4
    5038:	da1a      	bge.n	5070 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>

	byte c = 0;
	char* tRow = textRow[row];
    503a:	6804      	ldr	r4, [r0, #0]
    503c:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
	for (i = offset; c < columns; i++) {
    5040:	b1b5      	cbz	r5, 5070 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
    5042:	4619      	mov	r1, r3
    5044:	2501      	movs	r5, #1
		if (i < 0) tRow[c++] = 32;
    5046:	f04f 0e20 	mov.w	lr, #32
    504a:	e00a      	b.n	5062 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x52>
		else {
			if (srcText[i] == 0) break;
    504c:	5c56      	ldrb	r6, [r2, r1]
    504e:	b17e      	cbz	r6, 5070 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
			tRow[c++] = srcText[i];
    5050:	553e      	strb	r6, [r7, r4]
	while (srcText[ln] != 0) ln++;
	if (offset >= ln) return; // too large offset 

	byte c = 0;
	char* tRow = textRow[row];
	for (i = offset; c < columns; i++) {
    5052:	7d46      	ldrb	r6, [r0, #21]
    5054:	3101      	adds	r1, #1
    5056:	1c6c      	adds	r4, r5, #1
    5058:	42ae      	cmp	r6, r5
    505a:	b209      	sxth	r1, r1
    505c:	b2e4      	uxtb	r4, r4
    505e:	d907      	bls.n	5070 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x60>
    5060:	4625      	mov	r5, r4
    5062:	1acc      	subs	r4, r1, r3
		if (i < 0) tRow[c++] = 32;
    5064:	2900      	cmp	r1, #0
    5066:	b2e4      	uxtb	r4, r4
    5068:	daf0      	bge.n	504c <TextDisplay::setText(unsigned char, char const*, short, bool)+0x3c>
    506a:	f807 e004 	strb.w	lr, [r7, r4]
    506e:	e7f0      	b.n	5052 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x42>
    5070:	bdf0      	pop	{r4, r5, r6, r7, pc}
// If <offset> < 0, header spaces will be displayed before first <srcText> character.
// Redundant characters in <srcText> will be ignored.
void TextDisplay::setText(byte row, const char* srcText, short offset, bool clearBefore) {
	if (row >= rows) return;
	short i;
	if (clearBefore) for (i = 0; i < columns; i++) textRow[row][i] = ' ';
    5072:	7d45      	ldrb	r5, [r0, #21]
    5074:	2d00      	cmp	r5, #0
    5076:	d0d3      	beq.n	5020 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x10>
    5078:	008f      	lsls	r7, r1, #2
    507a:	2400      	movs	r4, #0
    507c:	2620      	movs	r6, #32
    507e:	6805      	ldr	r5, [r0, #0]
    5080:	59ed      	ldr	r5, [r5, r7]
    5082:	552e      	strb	r6, [r5, r4]
    5084:	3401      	adds	r4, #1
    5086:	7d45      	ldrb	r5, [r0, #21]
    5088:	b224      	sxth	r4, r4
    508a:	42ac      	cmp	r4, r5
    508c:	dbf7      	blt.n	507e <TextDisplay::setText(unsigned char, char const*, short, bool)+0x6e>
    508e:	e7c7      	b.n	5020 <TextDisplay::setText(unsigned char, char const*, short, bool)+0x10>

00005090 <TextDisplay::scrollLeft(unsigned char)>:
	}
}

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
    5090:	7d03      	ldrb	r3, [r0, #20]
    5092:	428b      	cmp	r3, r1
    5094:	d912      	bls.n	50bc <TextDisplay::scrollLeft(unsigned char)+0x2c>
	byte i;
	char* tRow = textRow[row];
    5096:	6802      	ldr	r2, [r0, #0]
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    5098:	7d43      	ldrb	r3, [r0, #21]

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    509a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    509e:	b173      	cbz	r3, 50be <TextDisplay::scrollLeft(unsigned char)+0x2e>
		}
	}
}

// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
    50a0:	b410      	push	{r4}
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    50a2:	2300      	movs	r3, #0
    50a4:	18ca      	adds	r2, r1, r3
    50a6:	1c5c      	adds	r4, r3, #1
    50a8:	7852      	ldrb	r2, [r2, #1]
    50aa:	54ca      	strb	r2, [r1, r3]
    50ac:	7d42      	ldrb	r2, [r0, #21]
    50ae:	b2e3      	uxtb	r3, r4
    50b0:	429a      	cmp	r2, r3
    50b2:	d8f7      	bhi.n	50a4 <TextDisplay::scrollLeft(unsigned char)+0x14>
    50b4:	3a01      	subs	r2, #1
	tRow[columns-1] = ' ';
    50b6:	2320      	movs	r3, #32
    50b8:	548b      	strb	r3, [r1, r2]
}
    50ba:	bc10      	pop	{r4}
    50bc:	4770      	bx	lr
// scrolls _text 1 char left
void TextDisplay::scrollLeft(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
	for (i=0; i<columns; i++) tRow[i] = tRow[i+1];
    50be:	f04f 32ff 	mov.w	r2, #4294967295
	tRow[columns-1] = ' ';
    50c2:	2320      	movs	r3, #32
    50c4:	548b      	strb	r3, [r1, r2]
    50c6:	4770      	bx	lr

000050c8 <TextDisplay::scrollRight(unsigned char)>:
}

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
    50c8:	7d03      	ldrb	r3, [r0, #20]
    50ca:	428b      	cmp	r3, r1
    50cc:	d912      	bls.n	50f4 <TextDisplay::scrollRight(unsigned char)+0x2c>
	byte i;
	char* tRow = textRow[row];
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    50ce:	7d43      	ldrb	r3, [r0, #21]

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    50d0:	6802      	ldr	r2, [r0, #0]
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    50d2:	3b01      	subs	r3, #1
    50d4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff

// scrolls _text 1 char right
void TextDisplay::scrollRight(byte row) {
	if (row >= rows) return;
	byte i;
	char* tRow = textRow[row];
    50d8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	for (i = columns-1; i > 0; i--) tRow[i] = tRow[i - 1];
    50dc:	d007      	beq.n	50ee <TextDisplay::scrollRight(unsigned char)+0x26>
    50de:	18c8      	adds	r0, r1, r3
    50e0:	1e5a      	subs	r2, r3, #1
    50e2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    50e6:	54c8      	strb	r0, [r1, r3]
    50e8:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
    50ec:	d1f7      	bne.n	50de <TextDisplay::scrollRight(unsigned char)+0x16>
	tRow[0] = ' ';
    50ee:	2320      	movs	r3, #32
    50f0:	700b      	strb	r3, [r1, #0]
    50f2:	4770      	bx	lr
    50f4:	4770      	bx	lr
    50f6:	bf00      	nop

000050f8 <TextDisplay::getRowCopy(unsigned char)>:
//void TextDisplay::writeChar(byte row, byte col, byte chr) {
//	if (!validPosition(row, col)) return;
//	textRow[row][col] = chr;
//}

String TextDisplay::getRowCopy(byte row) {
    50f8:	b510      	push	{r4, lr}
	if (row >= rows) return String("");
    50fa:	7d0b      	ldrb	r3, [r1, #20]
    50fc:	4293      	cmp	r3, r2
	return String(textRow[row]);
    50fe:	bf8a      	itet	hi
    5100:	680b      	ldrhi	r3, [r1, #0]
//	if (!validPosition(row, col)) return;
//	textRow[row][col] = chr;
//}

String TextDisplay::getRowCopy(byte row) {
	if (row >= rows) return String("");
    5102:	4904      	ldrls	r1, [pc, #16]	; (5114 <TextDisplay::getRowCopy(unsigned char)+0x1c>)
	return String(textRow[row]);
    5104:	f853 1022 	ldrhi.w	r1, [r3, r2, lsl #2]
//void TextDisplay::writeChar(byte row, byte col, byte chr) {
//	if (!validPosition(row, col)) return;
//	textRow[row][col] = chr;
//}

String TextDisplay::getRowCopy(byte row) {
    5108:	4604      	mov	r4, r0
	if (row >= rows) return String("");
	return String(textRow[row]);
    510a:	f004 fe17 	bl	9d3c <String::String(char const*)>
}
    510e:	4620      	mov	r0, r4
    5110:	bd10      	pop	{r4, pc}
    5112:	bf00      	nop
    5114:	0000ff64 	.word	0x0000ff64

00005118 <TextDisplay::getSpacesRow()>:
void TextDisplay::getRowCopy(byte row, String& destStr) {
	if (row >= rows) return;
	destStr.copy((const char*)textRow[row], columns);
}

String TextDisplay::getSpacesRow() {
    5118:	b510      	push	{r4, lr}
	return String(spacesStr);
    511a:	3118      	adds	r1, #24
void TextDisplay::getRowCopy(byte row, String& destStr) {
	if (row >= rows) return;
	destStr.copy((const char*)textRow[row], columns);
}

String TextDisplay::getSpacesRow() {
    511c:	4604      	mov	r4, r0
	return String(spacesStr);
    511e:	f004 fe33 	bl	9d88 <String::String(String const&)>
}
    5122:	4620      	mov	r0, r4
    5124:	bd10      	pop	{r4, pc}
    5126:	bf00      	nop

00005128 <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)>:

void TextDisplay::setChar(byte row, byte col, byte ch) {
    5128:	b410      	push	{r4}
	inline byte getHeight() { return rows; }
	inline byte getWidth() { return columns; }
	inline bool validRow(byte row) { return (row < rows); }
	inline bool validColumn(byte col) { return (col < rows); }
	inline bool validPosition(byte row, byte col) {
		return (row < rows && col < columns);
    512a:	7d04      	ldrb	r4, [r0, #20]
    512c:	428c      	cmp	r4, r1
    512e:	d906      	bls.n	513e <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)+0x16>
    5130:	7d44      	ldrb	r4, [r0, #21]
    5132:	4294      	cmp	r4, r2
    5134:	d903      	bls.n	513e <TextDisplay::setChar(unsigned char, unsigned char, unsigned char)+0x16>
	if (!validPosition(row, col)) return; 
	textRow[row][col] = ch;
    5136:	6800      	ldr	r0, [r0, #0]
    5138:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    513c:	548b      	strb	r3, [r1, r2]
}
    513e:	bc10      	pop	{r4}
    5140:	4770      	bx	lr
    5142:	bf00      	nop

00005144 <TextDisplay::getChar(unsigned char, unsigned char)>:
    5144:	7d03      	ldrb	r3, [r0, #20]
    5146:	428b      	cmp	r3, r1
    5148:	d907      	bls.n	515a <TextDisplay::getChar(unsigned char, unsigned char)+0x16>
    514a:	7d43      	ldrb	r3, [r0, #21]
    514c:	4293      	cmp	r3, r2
    514e:	d904      	bls.n	515a <TextDisplay::getChar(unsigned char, unsigned char)+0x16>

byte TextDisplay::getChar(byte row, byte col) {
	if (!validPosition(row, col)) return ' ';
	return (byte)textRow[row][col];
    5150:	6803      	ldr	r3, [r0, #0]
    5152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5156:	5c98      	ldrb	r0, [r3, r2]
}
    5158:	4770      	bx	lr
	if (!validPosition(row, col)) return; 
	textRow[row][col] = ch;
}

byte TextDisplay::getChar(byte row, byte col) {
	if (!validPosition(row, col)) return ' ';
    515a:	2020      	movs	r0, #32
    515c:	4770      	bx	lr
    515e:	bf00      	nop

00005160 <TimerSet::TimerSet()>:
* Contains C++ code.
*/

#include "TimerSet.h"

TimerSet::TimerSet() {
    5160:	b510      	push	{r4, lr}
    5162:	2100      	movs	r1, #0
    5164:	4604      	mov	r4, r0
    5166:	f004 fde9 	bl	9d3c <String::String(char const*)>
	_first_timer = nullptr;
    516a:	2300      	movs	r3, #0
	_last_timer = nullptr;
	_count = 0;
    516c:	7623      	strb	r3, [r4, #24]
*/

#include "TimerSet.h"

TimerSet::TimerSet() {
	_first_timer = nullptr;
    516e:	6123      	str	r3, [r4, #16]
	_last_timer = nullptr;
    5170:	6163      	str	r3, [r4, #20]
	_count = 0;
	_nextTaskId = 0;
    5172:	61e3      	str	r3, [r4, #28]
}
    5174:	4620      	mov	r0, r4
    5176:	bd10      	pop	{r4, pc}

00005178 <TimerSet::add(TimerTask&)>:
//	Serial.print(_count);
//	Serial.println(")");
//	return true;
//}

int TimerSet::add(TimerTask& tt) {
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	460d      	mov	r5, r1
    517c:	4604      	mov	r4, r0
    517e:	2110      	movs	r1, #16
    5180:	482f      	ldr	r0, [pc, #188]	; (5240 <TimerSet::add(TimerTask&)+0xc8>)
    5182:	f004 fac7 	bl	9714 <usb_serial_write>
	Serial.print("Adding timer... ");
	if (&tt == nullptr) {
    5186:	2d00      	cmp	r5, #0
    5188:	d04f      	beq.n	522a <TimerSet::add(TimerTask&)+0xb2>
}

bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
    518a:	7e22      	ldrb	r2, [r4, #24]
    518c:	2a00      	cmp	r2, #0
    518e:	d12c      	bne.n	51ea <TimerSet::add(TimerTask&)+0x72>
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
		Serial.println("abort: max number of TimerTasks reached.");
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
    5190:	2301      	movs	r3, #1
    5192:	6125      	str	r5, [r4, #16]
    5194:	7623      	strb	r3, [r4, #24]
	if (_last_timer != nullptr) _last_timer->_next = &tt;
    5196:	6963      	ldr	r3, [r4, #20]
    5198:	b103      	cbz	r3, 519c <TimerSet::add(TimerTask&)+0x24>
    519a:	611d      	str	r5, [r3, #16]
	_last_timer = &tt;
	tt._next = nullptr;
	tt.id = _nextTaskId;
    519c:	69e3      	ldr	r3, [r4, #28]
		Serial.println("abort: max number of TimerTasks reached.");
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
    519e:	6165      	str	r5, [r4, #20]
	tt._next = nullptr;
    51a0:	2600      	movs	r6, #0
	tt.id = _nextTaskId;
    51a2:	602b      	str	r3, [r5, #0]
    51a4:	210a      	movs	r1, #10
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
	if (_last_timer != nullptr) _last_timer->_next = &tt;
	_last_timer = &tt;
	tt._next = nullptr;
    51a6:	612e      	str	r6, [r5, #16]
    51a8:	4826      	ldr	r0, [pc, #152]	; (5244 <TimerSet::add(TimerTask&)+0xcc>)
    51aa:	f004 fab3 	bl	9714 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    51ae:	4633      	mov	r3, r6
    51b0:	220a      	movs	r2, #10
    51b2:	7e21      	ldrb	r1, [r4, #24]
    51b4:	4824      	ldr	r0, [pc, #144]	; (5248 <TimerSet::add(TimerTask&)+0xd0>)
    51b6:	f004 fd11 	bl	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    51ba:	2106      	movs	r1, #6
    51bc:	4823      	ldr	r0, [pc, #140]	; (524c <TimerSet::add(TimerTask&)+0xd4>)
    51be:	f004 faa9 	bl	9714 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    51c2:	69e1      	ldr	r1, [r4, #28]
    51c4:	4820      	ldr	r0, [pc, #128]	; (5248 <TimerSet::add(TimerTask&)+0xd0>)
    51c6:	f004 fd49 	bl	9c5c <Print::print(long)>
    51ca:	2101      	movs	r1, #1
    51cc:	4820      	ldr	r0, [pc, #128]	; (5250 <TimerSet::add(TimerTask&)+0xd8>)
    51ce:	f004 faa1 	bl	9714 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    51d2:	481d      	ldr	r0, [pc, #116]	; (5248 <TimerSet::add(TimerTask&)+0xd0>)
    51d4:	f004 fcdc 	bl	9b90 <Print::println()>
	}
	Serial.println("_");
}

int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
    51d8:	69e0      	ldr	r0, [r4, #28]
    51da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    51de:	4298      	cmp	r0, r3
		_nextTaskId = 0;
		return INT32_MAX;
	}
	return _nextTaskId++;
    51e0:	bf16      	itet	ne
    51e2:	1c43      	addne	r3, r0, #1
	Serial.println("_");
}

int TimerSet::nextTaskId() {
	if (_nextTaskId == INT32_MAX) {
		_nextTaskId = 0;
    51e4:	61e6      	streq	r6, [r4, #28]
		return INT32_MAX;
	}
	return _nextTaskId++;
    51e6:	61e3      	strne	r3, [r4, #28]
    51e8:	bd70      	pop	{r4, r5, r6, pc}

bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
	tt = _first_timer;
    51ea:	6923      	ldr	r3, [r4, #16]
	while (tt != nullptr) {
    51ec:	b913      	cbnz	r3, 51f4 <TimerSet::add(TimerTask&)+0x7c>
    51ee:	e00d      	b.n	520c <TimerSet::add(TimerTask&)+0x94>
		if (tt == &ttask) return true;
		tt = tt->_next;
    51f0:	691b      	ldr	r3, [r3, #16]
bool TimerSet::contains(TimerTask& ttask) {
	TimerTask *tt;

	if (_count == 0) return false; // empty list
	tt = _first_timer;
	while (tt != nullptr) {
    51f2:	b15b      	cbz	r3, 520c <TimerSet::add(TimerTask&)+0x94>
		if (tt == &ttask) return true;
    51f4:	429d      	cmp	r5, r3
    51f6:	d1fb      	bne.n	51f0 <TimerSet::add(TimerTask&)+0x78>
    51f8:	2120      	movs	r1, #32
    51fa:	4816      	ldr	r0, [pc, #88]	; (5254 <TimerSet::add(TimerTask&)+0xdc>)
    51fc:	f004 fa8a 	bl	9714 <usb_serial_write>
    5200:	4811      	ldr	r0, [pc, #68]	; (5248 <TimerSet::add(TimerTask&)+0xd0>)
    5202:	f004 fcc5 	bl	9b90 <Print::println()>
		Serial.println("abort: can't add null timertask!");
		return -1;
	}
	if (contains(tt)) {
		Serial.println("abort: can't add same timertask!");
		return -2;
    5206:	f06f 0001 	mvn.w	r0, #1
    520a:	bd70      	pop	{r4, r5, r6, pc}
	}
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
    520c:	2a12      	cmp	r2, #18
    520e:	d802      	bhi.n	5216 <TimerSet::add(TimerTask&)+0x9e>
		Serial.println("abort: max number of TimerTasks reached.");
		return -3;
	}
	if (_count++ == 0) _first_timer = &tt;
    5210:	3201      	adds	r2, #1
    5212:	7622      	strb	r2, [r4, #24]
    5214:	e7bf      	b.n	5196 <TimerSet::add(TimerTask&)+0x1e>
    5216:	2128      	movs	r1, #40	; 0x28
    5218:	480f      	ldr	r0, [pc, #60]	; (5258 <TimerSet::add(TimerTask&)+0xe0>)
    521a:	f004 fa7b 	bl	9714 <usb_serial_write>
    521e:	480a      	ldr	r0, [pc, #40]	; (5248 <TimerSet::add(TimerTask&)+0xd0>)
    5220:	f004 fcb6 	bl	9b90 <Print::println()>
		return -2;
	}
	//tt->print();
	if (_count >= MAX_TASKS - 1) {
		Serial.println("abort: max number of TimerTasks reached.");
		return -3;
    5224:	f06f 0002 	mvn.w	r0, #2
    5228:	bd70      	pop	{r4, r5, r6, pc}
    522a:	2120      	movs	r1, #32
    522c:	480b      	ldr	r0, [pc, #44]	; (525c <TimerSet::add(TimerTask&)+0xe4>)
    522e:	f004 fa71 	bl	9714 <usb_serial_write>
    5232:	4805      	ldr	r0, [pc, #20]	; (5248 <TimerSet::add(TimerTask&)+0xd0>)
    5234:	f004 fcac 	bl	9b90 <Print::println()>

int TimerSet::add(TimerTask& tt) {
	Serial.print("Adding timer... ");
	if (&tt == nullptr) {
		Serial.println("abort: can't add null timertask!");
		return -1;
    5238:	f04f 30ff 	mov.w	r0, #4294967295
    523c:	bd70      	pop	{r4, r5, r6, pc}
    523e:	bf00      	nop
    5240:	000104a0 	.word	0x000104a0
    5244:	00010504 	.word	0x00010504
    5248:	1fff876c 	.word	0x1fff876c
    524c:	00010510 	.word	0x00010510
    5250:	0000f638 	.word	0x0000f638
    5254:	00010518 	.word	0x00010518
    5258:	000104d8 	.word	0x000104d8
    525c:	000104b4 	.word	0x000104b4

00005260 <TimerSet::add(TimerTask*)>:
	Serial.println(")");
	return nextTaskId();
}

int TimerSet::add(TimerTask* tt) {
	return add(*tt);
    5260:	f7ff bf8a 	b.w	5178 <TimerSet::add(TimerTask&)>

00005264 <TimerSet::update()>:
		tt = tt->_next;
	}
	return nullptr;
}

uint32_t TimerSet::update() {
    5264:	b570      	push	{r4, r5, r6, lr}
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = 60000;
	if (_count == 0) return 0;
    5266:	7e05      	ldrb	r5, [r0, #24]
		tt = tt->_next;
	}
	return nullptr;
}

uint32_t TimerSet::update() {
    5268:	b082      	sub	sp, #8
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = 60000;
	if (_count == 0) return 0;
    526a:	b1a5      	cbz	r5, 5296 <TimerSet::update()+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    526c:	4b0d      	ldr	r3, [pc, #52]	; (52a4 <TimerSet::update()+0x40>)
	_chkTime = millis();
	for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    526e:	6904      	ldr	r4, [r0, #16]
    5270:	681b      	ldr	r3, [r3, #0]
    5272:	9301      	str	r3, [sp, #4]
	return ret;
    5274:	9b01      	ldr	r3, [sp, #4]
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = 60000;
	if (_count == 0) return 0;
	_chkTime = millis();
    5276:	6203      	str	r3, [r0, #32]
	for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    5278:	b184      	cbz	r4, 529c <TimerSet::update()+0x38>
    527a:	f100 0620 	add.w	r6, r0, #32
    527e:	f64e 2560 	movw	r5, #60000	; 0xea60
		rt = tt->update(_chkTime);
    5282:	4620      	mov	r0, r4
    5284:	4631      	mov	r1, r6
    5286:	f000 f821 	bl	52cc <TimerTask::update(unsigned long&)>
	uint32_t rt, nextEventT;

	nextEventT = 60000;
	if (_count == 0) return 0;
	_chkTime = millis();
	for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
    528a:	6924      	ldr	r4, [r4, #16]
    528c:	4285      	cmp	r5, r0
    528e:	bf28      	it	cs
    5290:	4605      	movcs	r5, r0
    5292:	2c00      	cmp	r4, #0
    5294:	d1f5      	bne.n	5282 <TimerSet::update()+0x1e>
uint32_t TimerSet::update() {
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = 60000;
	if (_count == 0) return 0;
    5296:	4628      	mov	r0, r5
	for (tt = _first_timer; tt != nullptr; tt = tt->_next) {
		rt = tt->update(_chkTime);
		if (rt < nextEventT) nextEventT = rt;
	}
	return nextEventT;
}
    5298:	b002      	add	sp, #8
    529a:	bd70      	pop	{r4, r5, r6, pc}

uint32_t TimerSet::update() {
	TimerTask *tt;
	uint32_t rt, nextEventT;

	nextEventT = 60000;
    529c:	f64e 2060 	movw	r0, #60000	; 0xea60
    52a0:	e7fa      	b.n	5298 <TimerSet::update()+0x34>
    52a2:	bf00      	nop
    52a4:	1fff959c 	.word	0x1fff959c

000052a8 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)>:
	_enabled = en;
	tag = "";
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
    52a8:	b470      	push	{r4, r5, r6}
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    52aa:	4d07      	ldr	r5, [pc, #28]	; (52c8 <TimerTask::TimerTask(TimerTaskExecutor*, unsigned long, char const*, bool)+0x20>)
	_enabled = en;
	tag = "";
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
    52ac:	f89d 600c 	ldrb.w	r6, [sp, #12]
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
	_enabled = en;
    52b0:	7706      	strb	r6, [r0, #28]
	tag = (name == NULL) ? "" : name;
    52b2:	2b00      	cmp	r3, #0
    52b4:	bf08      	it	eq
    52b6:	462b      	moveq	r3, r5
TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
    52b8:	2500      	movs	r5, #0
    52ba:	7205      	strb	r5, [r0, #8]
	_enabled = en;
	tag = (name == NULL) ? "" : name;
	_next = NULL;
    52bc:	6105      	str	r5, [r0, #16]
	execObj = obj;
	//id = taskId;
	_period = ms;
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
    52be:	60c3      	str	r3, [r0, #12]
	_next = NULL;
}

TimerTask::TimerTask(TimerTaskExecutor* obj, uint32_t ms, const char* name, bool en) {
	//Serial.println("Creating TimerTask... ");
	execObj = obj;
    52c0:	6041      	str	r1, [r0, #4]
	//id = taskId;
	_period = ms;
    52c2:	6182      	str	r2, [r0, #24]
	oneShot = false;
	_enabled = en;
	tag = (name == NULL) ? "" : name;
	_next = NULL;
}
    52c4:	bc70      	pop	{r4, r5, r6}
    52c6:	4770      	bx	lr
    52c8:	0000ff64 	.word	0x0000ff64

000052cc <TimerTask::update(unsigned long&)>:

// returns: remaining time before trigger [ms] > 0; 0 if not enabled
uint32_t TimerTask::update(uint32_t& chkTime) {
    52cc:	b538      	push	{r3, r4, r5, lr}
	uint32_t elapsed;

	if (!_enabled) return 0;
    52ce:	7f03      	ldrb	r3, [r0, #28]
    52d0:	b13b      	cbz	r3, 52e2 <TimerTask::update(unsigned long&)+0x16>
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
    52d2:	680b      	ldr	r3, [r1, #0]
    52d4:	6942      	ldr	r2, [r0, #20]
	if (elapsed >= _period) {
    52d6:	6984      	ldr	r4, [r0, #24]
	uint32_t elapsed;

	if (!_enabled) return 0;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
    52d8:	1a9b      	subs	r3, r3, r2
	if (elapsed >= _period) {
    52da:	42a3      	cmp	r3, r4
    52dc:	d203      	bcs.n	52e6 <TimerTask::update(unsigned long&)+0x1a>
			return 0;
		}
		_startTime = chkTime;
		return _period;
	}
	return _period - elapsed;
    52de:	1ae0      	subs	r0, r4, r3
    52e0:	bd38      	pop	{r3, r4, r5, pc}

// returns: remaining time before trigger [ms] > 0; 0 if not enabled
uint32_t TimerTask::update(uint32_t& chkTime) {
	uint32_t elapsed;

	if (!_enabled) return 0;
    52e2:	4618      	mov	r0, r3
		}
		_startTime = chkTime;
		return _period;
	}
	return _period - elapsed;
}
    52e4:	bd38      	pop	{r3, r4, r5, pc}
    52e6:	4604      	mov	r4, r0
	if (!_enabled) return 0;
	//if (chkTime == 0) chkTime = millis();
	if (chkTime < _startTime) elapsed = ~_startTime + chkTime + 1;
	else elapsed = chkTime - _startTime;
	if (elapsed >= _period) {
		execObj->timerRoutine(id, chkTime);
    52e8:	6840      	ldr	r0, [r0, #4]
    52ea:	6803      	ldr	r3, [r0, #0]
    52ec:	460d      	mov	r5, r1
    52ee:	689b      	ldr	r3, [r3, #8]
    52f0:	6821      	ldr	r1, [r4, #0]
    52f2:	462a      	mov	r2, r5
    52f4:	4798      	blx	r3
		//if (funct != NULL) (_game->*funct)(chkTime);
		if (oneShot) {
    52f6:	7a23      	ldrb	r3, [r4, #8]
    52f8:	b11b      	cbz	r3, 5302 <TimerTask::update(unsigned long&)+0x36>
			_enabled = false;
    52fa:	2300      	movs	r3, #0
    52fc:	7723      	strb	r3, [r4, #28]
			return 0;
    52fe:	4618      	mov	r0, r3
    5300:	bd38      	pop	{r3, r4, r5, pc}
		}
		_startTime = chkTime;
    5302:	682b      	ldr	r3, [r5, #0]
    5304:	6163      	str	r3, [r4, #20]
		return _period;
    5306:	69a0      	ldr	r0, [r4, #24]
    5308:	bd38      	pop	{r3, r4, r5, pc}
    530a:	bf00      	nop

0000530c <TimerTask::setPeriod(unsigned long)>:
	Serial.print(_period);
	if (_enabled) Serial.print(",1]"); else Serial.print(",0]");
}

void TimerTask::setPeriod(uint32_t ms) {
	_period = ms;
    530c:	6181      	str	r1, [r0, #24]
    530e:	4770      	bx	lr

00005310 <TimerTask::setPeriodic(bool)>:
	_period = ms;
	oneShot = !periodic;
}

void TimerTask::setPeriodic(bool periodic) {
	oneShot = !periodic;
    5310:	f081 0101 	eor.w	r1, r1, #1
    5314:	7201      	strb	r1, [r0, #8]
    5316:	4770      	bx	lr

00005318 <TimerTask::enable()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5318:	4b04      	ldr	r3, [pc, #16]	; (532c <TimerTask::enable()+0x14>)
}

void TimerTask::enable() {
    531a:	b082      	sub	sp, #8
    531c:	681b      	ldr	r3, [r3, #0]
    531e:	9301      	str	r3, [sp, #4]
	return ret;
    5320:	9b01      	ldr	r3, [sp, #4]
	_startTime = millis();
    5322:	6143      	str	r3, [r0, #20]
	_enabled = true;
    5324:	2301      	movs	r3, #1
    5326:	7703      	strb	r3, [r0, #28]
}
    5328:	b002      	add	sp, #8
    532a:	4770      	bx	lr
    532c:	1fff959c 	.word	0x1fff959c

00005330 <TimerTask::disable()>:

void TimerTask::disable() {
	_enabled = false;
    5330:	2300      	movs	r3, #0
    5332:	7703      	strb	r3, [r0, #28]
    5334:	4770      	bx	lr
    5336:	bf00      	nop

00005338 <freeMemory>:


int freeMemory() {
  int free_memory;

  if((int)__brkval == 0)
    5338:	4b06      	ldr	r3, [pc, #24]	; (5354 <freeMemory+0x1c>)
    533a:	6818      	ldr	r0, [r3, #0]


#include "MemoryFree.h"


int freeMemory() {
    533c:	b082      	sub	sp, #8
  int free_memory;

  if((int)__brkval == 0)
    533e:	b118      	cbz	r0, 5348 <freeMemory+0x10>
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    5340:	ab01      	add	r3, sp, #4
    5342:	1a18      	subs	r0, r3, r0

  return free_memory;
}
    5344:	b002      	add	sp, #8
    5346:	4770      	bx	lr

int freeMemory() {
  int free_memory;

  if((int)__brkval == 0)
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
    5348:	4803      	ldr	r0, [pc, #12]	; (5358 <freeMemory+0x20>)
    534a:	ab02      	add	r3, sp, #8
    534c:	1a18      	subs	r0, r3, r0
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);

  return free_memory;
}
    534e:	b002      	add	sp, #8
    5350:	4770      	bx	lr
    5352:	bf00      	nop
    5354:	1fff8764 	.word	0x1fff8764
    5358:	1fff9898 	.word	0x1fff9898

0000535c <Board_Sys80b::Board_Sys80b()>:
#include <SPI.h>
#include <LiquidCrystalFast.h>
#include <Bounce.h>
#include "nvData.h"

Board_Sys80b::Board_Sys80b() {	
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	4d34      	ldr	r5, [pc, #208]	; (5430 <Board_Sys80b::Board_Sys80b()+0xd4>)
    5360:	4606      	mov	r6, r0
    5362:	6869      	ldr	r1, [r5, #4]
    5364:	6828      	ldr	r0, [r5, #0]
    5366:	68aa      	ldr	r2, [r5, #8]
    5368:	68eb      	ldr	r3, [r5, #12]
    536a:	4634      	mov	r4, r6
    536c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    536e:	69eb      	ldr	r3, [r5, #28]
    5370:	6928      	ldr	r0, [r5, #16]
    5372:	6969      	ldr	r1, [r5, #20]
    5374:	69aa      	ldr	r2, [r5, #24]
    5376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5378:	6a28      	ldr	r0, [r5, #32]
    537a:	6230      	str	r0, [r6, #32]
    537c:	224d      	movs	r2, #77	; 0x4d
    537e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    5382:	f106 0024 	add.w	r0, r6, #36	; 0x24
    5386:	f002 ffb9 	bl	82fc <memcpy>
	// pins setup
	pinMode(SLAM_PIN, INPUT_PULLUP);
    538a:	2102      	movs	r1, #2
    538c:	4608      	mov	r0, r1
    538e:	f003 f97d 	bl	868c <pinMode>
	pinMode(NEXTB_PIN, INPUT_PULLUP);
    5392:	2102      	movs	r1, #2
    5394:	2003      	movs	r0, #3
    5396:	f003 f979 	bl	868c <pinMode>
	pinMode(ENTRB_PIN, INPUT_PULLUP);
    539a:	2102      	movs	r1, #2
    539c:	2004      	movs	r0, #4
    539e:	f003 f975 	bl	868c <pinMode>
	pinMode(BACKB_PIN, INPUT_PULLUP);
    53a2:	2102      	movs	r1, #2
    53a4:	2005      	movs	r0, #5
    53a6:	f003 f971 	bl	868c <pinMode>
	pinMode(REV_D0_PIN, INPUT_PULLUP);
    53aa:	2102      	movs	r1, #2
    53ac:	200b      	movs	r0, #11
    53ae:	f003 f96d 	bl	868c <pinMode>
	pinMode(REV_D1_PIN, INPUT_PULLUP);
    53b2:	2102      	movs	r1, #2
    53b4:	200c      	movs	r0, #12
    53b6:	f003 f969 	bl	868c <pinMode>
	pinMode(GPIO_SS_PIN, OUTPUT);
    53ba:	2101      	movs	r1, #1
    53bc:	200e      	movs	r0, #14
    53be:	f003 f965 	bl	868c <pinMode>
	pinMode(LG_SS_PIN, OUTPUT);
    53c2:	2101      	movs	r1, #1
    53c4:	200f      	movs	r0, #15
    53c6:	f003 f961 	bl	868c <pinMode>
	pinMode(SD_SS_PIN, OUTPUT);
    53ca:	2101      	movs	r1, #1
    53cc:	200a      	movs	r0, #10
    53ce:	f003 f95d 	bl	868c <pinMode>
	pinMode(D_LD1_PIN, OUTPUT);
    53d2:	2101      	movs	r1, #1
    53d4:	2010      	movs	r0, #16
    53d6:	f003 f959 	bl	868c <pinMode>
	pinMode(D_LD2_PIN, OUTPUT);
    53da:	2101      	movs	r1, #1
    53dc:	2011      	movs	r0, #17
    53de:	f003 f955 	bl	868c <pinMode>
	pinMode(D_RES_PIN, OUTPUT);
    53e2:	2101      	movs	r1, #1
    53e4:	2012      	movs	r0, #18
    53e6:	f003 f951 	bl	868c <pinMode>
	digitalWrite(GPIO_SS_PIN, HIGH);
    53ea:	2101      	movs	r1, #1
    53ec:	200e      	movs	r0, #14
    53ee:	f003 f939 	bl	8664 <digitalWrite>
	digitalWrite(LG_SS_PIN, HIGH);
    53f2:	2101      	movs	r1, #1
    53f4:	200f      	movs	r0, #15
    53f6:	f003 f935 	bl	8664 <digitalWrite>
	digitalWrite(SD_SS_PIN, HIGH);
    53fa:	2101      	movs	r1, #1
    53fc:	200a      	movs	r0, #10
    53fe:	f003 f931 	bl	8664 <digitalWrite>
	digitalWrite(D_LD1_PIN, LOW);
    5402:	2100      	movs	r1, #0
    5404:	2010      	movs	r0, #16
    5406:	f003 f92d 	bl	8664 <digitalWrite>
	digitalWrite(D_LD2_PIN, LOW);
    540a:	2100      	movs	r1, #0
    540c:	2011      	movs	r0, #17
    540e:	f003 f929 	bl	8664 <digitalWrite>
	digitalWrite(D_RES_PIN, LOW);
    5412:	2100      	movs	r1, #0
    5414:	2012      	movs	r0, #18
    5416:	f003 f925 	bl	8664 <digitalWrite>

	Serial.begin(BAUDRATE);
	_spiSettings = new SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    541a:	2004      	movs	r0, #4
    541c:	f004 fb72 	bl	9b04 <operator new(unsigned int)>
    5420:	4603      	mov	r3, r0
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    5422:	4a04      	ldr	r2, [pc, #16]	; (5434 <Board_Sys80b::Board_Sys80b()+0xd8>)
    5424:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
    5428:	601a      	str	r2, [r3, #0]
}
    542a:	4630      	mov	r0, r6
    542c:	bd70      	pop	{r4, r5, r6, pc}
    542e:	bf00      	nop
    5430:	00010578 	.word	0x00010578
    5434:	38022003 	.word	0x38022003

00005438 <Board_Sys80b::~Board_Sys80b()>:

Board_Sys80b::~Board_Sys80b() {
    5438:	b510      	push	{r4, lr}
    543a:	4604      	mov	r4, r0
	//delete lcd;
	delete ledGrid;
    543c:	210c      	movs	r1, #12
    543e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    5442:	f004 fb65 	bl	9b10 <operator delete(void*, unsigned int)>
	delete nextButton;
    5446:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    5448:	2110      	movs	r1, #16
    544a:	f004 fb61 	bl	9b10 <operator delete(void*, unsigned int)>
	delete enterButton;
    544e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5450:	2110      	movs	r1, #16
    5452:	f004 fb5d 	bl	9b10 <operator delete(void*, unsigned int)>
	delete backButton;
    5456:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    545a:	2110      	movs	r1, #16
    545c:	f004 fb58 	bl	9b10 <operator delete(void*, unsigned int)>
	delete _spiSettings;
    5460:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5464:	2104      	movs	r1, #4
    5466:	f004 fb53 	bl	9b10 <operator delete(void*, unsigned int)>
}
    546a:	4620      	mov	r0, r4
    546c:	bd10      	pop	{r4, pc}
    546e:	bf00      	nop

00005470 <Board_Sys80b::readButtons()>:
		delay(100);
	}
	else lcd = nullptr;
}

ButtonID Board_Sys80b::readButtons() {
    5470:	b510      	push	{r4, lr}
    5472:	4604      	mov	r4, r0
	nextButton->update();
    5474:	6f80      	ldr	r0, [r0, #120]	; 0x78
    5476:	f001 fa6d 	bl	6954 <Bounce::update()>
	if (nextButton->read()) return NEXT_BUTT;
    547a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    547c:	f001 fa48 	bl	6910 <Bounce::read()>
    5480:	b108      	cbz	r0, 5486 <Board_Sys80b::readButtons()+0x16>
    5482:	2003      	movs	r0, #3
    5484:	bd10      	pop	{r4, pc}
	enterButton->update();
    5486:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5488:	f001 fa64 	bl	6954 <Bounce::update()>
	if (enterButton->read()) return ENTER_BUTT;
    548c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    548e:	f001 fa3f 	bl	6910 <Bounce::read()>
    5492:	b108      	cbz	r0, 5498 <Board_Sys80b::readButtons()+0x28>
    5494:	2002      	movs	r0, #2
	backButton->update();
	if (backButton->read()) return BACK_BUTT;
	return NONE_BUTT;
}
    5496:	bd10      	pop	{r4, pc}
ButtonID Board_Sys80b::readButtons() {
	nextButton->update();
	if (nextButton->read()) return NEXT_BUTT;
	enterButton->update();
	if (enterButton->read()) return ENTER_BUTT;
	backButton->update();
    5498:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    549c:	f001 fa5a 	bl	6954 <Bounce::update()>
	if (backButton->read()) return BACK_BUTT;
    54a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    54a4:	f001 fa34 	bl	6910 <Bounce::read()>
	else lcd = nullptr;
}

ButtonID Board_Sys80b::readButtons() {
	nextButton->update();
	if (nextButton->read()) return NEXT_BUTT;
    54a8:	3000      	adds	r0, #0
    54aa:	bf18      	it	ne
    54ac:	2001      	movne	r0, #1
    54ae:	bd10      	pop	{r4, pc}

000054b0 <Board_Sys80b::readButtonsChange()>:
	backButton->update();
	if (backButton->read()) return BACK_BUTT;
	return NONE_BUTT;
}

bool Board_Sys80b::readButtonsChange() {
    54b0:	b510      	push	{r4, lr}
    54b2:	4604      	mov	r4, r0
	nextButton->update();
    54b4:	6f80      	ldr	r0, [r0, #120]	; 0x78
    54b6:	f001 fa4d 	bl	6954 <Bounce::update()>
	if (nextButton->risingEdge() || nextButton->fallingEdge()) return true;
    54ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    54bc:	f001 fa70 	bl	69a0 <Bounce::risingEdge()>
    54c0:	b108      	cbz	r0, 54c6 <Board_Sys80b::readButtonsChange()+0x16>
    54c2:	2001      	movs	r0, #1
    54c4:	bd10      	pop	{r4, pc}
    54c6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    54c8:	f001 fa74 	bl	69b4 <Bounce::fallingEdge()>
    54cc:	2800      	cmp	r0, #0
    54ce:	d1f8      	bne.n	54c2 <Board_Sys80b::readButtonsChange()+0x12>
	enterButton->update();
    54d0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    54d2:	f001 fa3f 	bl	6954 <Bounce::update()>
	if (enterButton->risingEdge() || enterButton->fallingEdge()) return true;
    54d6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    54d8:	f001 fa62 	bl	69a0 <Bounce::risingEdge()>
    54dc:	2800      	cmp	r0, #0
    54de:	d1f0      	bne.n	54c2 <Board_Sys80b::readButtonsChange()+0x12>
    54e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    54e2:	f001 fa67 	bl	69b4 <Bounce::fallingEdge()>
    54e6:	2800      	cmp	r0, #0
    54e8:	d1eb      	bne.n	54c2 <Board_Sys80b::readButtonsChange()+0x12>
	backButton->update();
    54ea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    54ee:	f001 fa31 	bl	6954 <Bounce::update()>
	if (backButton->risingEdge() || backButton->fallingEdge()) return true;
    54f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    54f6:	f001 fa53 	bl	69a0 <Bounce::risingEdge()>
    54fa:	2800      	cmp	r0, #0
    54fc:	d1e1      	bne.n	54c2 <Board_Sys80b::readButtonsChange()+0x12>
    54fe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    5502:	f001 fa57 	bl	69b4 <Bounce::fallingEdge()>
    5506:	2800      	cmp	r0, #0
    5508:	d1db      	bne.n	54c2 <Board_Sys80b::readButtonsChange()+0x12>
	return false;
}
    550a:	bd10      	pop	{r4, pc}

0000550c <Board_Sys80b::_readHwRev()>:

byte Board_Sys80b::_readHwRev() {
    550c:	b510      	push	{r4, lr}
	byte rev = 0;
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
    550e:	200b      	movs	r0, #11
    5510:	f003 f8ae 	bl	8670 <digitalRead>
	if (backButton->risingEdge() || backButton->fallingEdge()) return true;
	return false;
}

byte Board_Sys80b::_readHwRev() {
	byte rev = 0;
    5514:	fab0 f480 	clz	r4, r0
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
	if (digitalRead(REV_D1_PIN) == LOW) rev += 2;
    5518:	200c      	movs	r0, #12
	if (backButton->risingEdge() || backButton->fallingEdge()) return true;
	return false;
}

byte Board_Sys80b::_readHwRev() {
	byte rev = 0;
    551a:	0964      	lsrs	r4, r4, #5
	if (digitalRead(REV_D0_PIN) == LOW) rev += 1;
	if (digitalRead(REV_D1_PIN) == LOW) rev += 2;
    551c:	f003 f8a8 	bl	8670 <digitalRead>
    5520:	b908      	cbnz	r0, 5526 <Board_Sys80b::_readHwRev()+0x1a>
    5522:	3402      	adds	r4, #2
    5524:	b2e4      	uxtb	r4, r4
	return rev;
}
    5526:	4620      	mov	r0, r4
    5528:	bd10      	pop	{r4, pc}
    552a:	bf00      	nop

0000552c <Board_Sys80b::begin()>:
	delete enterButton;
	delete backButton;
	delete _spiSettings;
}

void Board_Sys80b::begin() {
    552c:	b5f0      	push	{r4, r5, r6, r7, lr}
    552e:	b087      	sub	sp, #28
    5530:	4604      	mov	r4, r0
	_revision = _readHwRev();
    5532:	f7ff ffeb 	bl	550c <Board_Sys80b::_readHwRev()>
    5536:	2113      	movs	r1, #19
    5538:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    553c:	487e      	ldr	r0, [pc, #504]	; (5738 <Board_Sys80b::begin()+0x20c>)
    553e:	f004 f8e9 	bl	9714 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    5542:	2300      	movs	r3, #0
    5544:	220a      	movs	r2, #10
    5546:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    554a:	487c      	ldr	r0, [pc, #496]	; (573c <Board_Sys80b::begin()+0x210>)
    554c:	f004 fb46 	bl	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    5550:	487a      	ldr	r0, [pc, #488]	; (573c <Board_Sys80b::begin()+0x210>)
    5552:	f004 fb1d 	bl	9b90 <Print::println()>
	Serial.print(F("Starting board rev."));
	Serial.println(_revision);
	delay(100);
    5556:	2064      	movs	r0, #100	; 0x64
    5558:	f003 f8c2 	bl	86e0 <delay>
    555c:	210d      	movs	r1, #13
    555e:	4878      	ldr	r0, [pc, #480]	; (5740 <Board_Sys80b::begin()+0x214>)
    5560:	f004 f8d8 	bl	9714 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    5564:	4875      	ldr	r0, [pc, #468]	; (573c <Board_Sys80b::begin()+0x210>)
    5566:	f004 fb13 	bl	9b90 <Print::println()>

	// SPI init
	Serial.println(F("- SPI init..."));
	SPI.begin();
    556a:	4876      	ldr	r0, [pc, #472]	; (5744 <Board_Sys80b::begin()+0x218>)
    556c:	f000 ff02 	bl	6374 <SPIClass::begin()>
	delay(100);
    5570:	2064      	movs	r0, #100	; 0x64
    5572:	f003 f8b5 	bl	86e0 <delay>
    5576:	210e      	movs	r1, #14
    5578:	4873      	ldr	r0, [pc, #460]	; (5748 <Board_Sys80b::begin()+0x21c>)
    557a:	f004 f8cb 	bl	9714 <usb_serial_write>
    557e:	486f      	ldr	r0, [pc, #444]	; (573c <Board_Sys80b::begin()+0x210>)
    5580:	f004 fb06 	bl	9b90 <Print::println()>

	// PIO init (Parallel Input/Output)
	Serial.println(F("- PIOs init..."));
	solenoids_IO = new PIO(_spiSettings, GPIO_SS_PIN, 0, 0x0000); // all 16 pins set as output
    5584:	2008      	movs	r0, #8
    5586:	f004 fabd 	bl	9b04 <operator new(unsigned int)>
    558a:	2500      	movs	r5, #0
    558c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    5590:	9500      	str	r5, [sp, #0]
    5592:	462b      	mov	r3, r5
    5594:	4606      	mov	r6, r0
    5596:	220e      	movs	r2, #14
    5598:	f000 fd2a 	bl	5ff0 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    559c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
	lamps_IO = new PIO(_spiSettings, GPIO_SS_PIN, 1, 0x0000); // all 16 pins set as output
    55a0:	2008      	movs	r0, #8
    55a2:	f004 faaf 	bl	9b04 <operator new(unsigned int)>
    55a6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    55aa:	9500      	str	r5, [sp, #0]
    55ac:	4606      	mov	r6, r0
    55ae:	2301      	movs	r3, #1
    55b0:	220e      	movs	r2, #14
    55b2:	f000 fd1d 	bl	5ff0 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    55b6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	switchMatrix_IO = new PIO(_spiSettings, GPIO_SS_PIN, 2, 0x00ff); // 8 bits output + 8 bits input
    55ba:	2008      	movs	r0, #8
    55bc:	f004 faa2 	bl	9b04 <operator new(unsigned int)>
    55c0:	23ff      	movs	r3, #255	; 0xff
    55c2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    55c6:	9300      	str	r3, [sp, #0]
    55c8:	4606      	mov	r6, r0
    55ca:	2302      	movs	r3, #2
    55cc:	220e      	movs	r2, #14
    55ce:	f000 fd0f 	bl	5ff0 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
    55d2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
	displayAndSound_IO = new PIO(_spiSettings, GPIO_SS_PIN, 3, 0x0000); // all 16 pins set as output
    55d6:	2008      	movs	r0, #8
    55d8:	f004 fa94 	bl	9b04 <operator new(unsigned int)>
    55dc:	2303      	movs	r3, #3
    55de:	220e      	movs	r2, #14
    55e0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    55e4:	9500      	str	r5, [sp, #0]
    55e6:	4606      	mov	r6, r0
    55e8:	f000 fd02 	bl	5ff0 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>
	delay(100);
    55ec:	2064      	movs	r0, #100	; 0x64
	// PIO init (Parallel Input/Output)
	Serial.println(F("- PIOs init..."));
	solenoids_IO = new PIO(_spiSettings, GPIO_SS_PIN, 0, 0x0000); // all 16 pins set as output
	lamps_IO = new PIO(_spiSettings, GPIO_SS_PIN, 1, 0x0000); // all 16 pins set as output
	switchMatrix_IO = new PIO(_spiSettings, GPIO_SS_PIN, 2, 0x00ff); // 8 bits output + 8 bits input
	displayAndSound_IO = new PIO(_spiSettings, GPIO_SS_PIN, 3, 0x0000); // all 16 pins set as output
    55ee:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	delay(100);
    55f2:	f003 f875 	bl	86e0 <delay>
    55f6:	2111      	movs	r1, #17
    55f8:	4854      	ldr	r0, [pc, #336]	; (574c <Board_Sys80b::begin()+0x220>)
    55fa:	f004 f88b 	bl	9714 <usb_serial_write>
    55fe:	484f      	ldr	r0, [pc, #316]	; (573c <Board_Sys80b::begin()+0x210>)
    5600:	f004 fac6 	bl	9b90 <Print::println()>

	Serial.println(F("- Buttons init..."));
	nextButton = new Bounce(NEXTB_PIN, DEBOUNCE_T);
    5604:	2010      	movs	r0, #16
    5606:	f004 fa7d 	bl	9b04 <operator new(unsigned int)>
    560a:	2264      	movs	r2, #100	; 0x64
    560c:	4605      	mov	r5, r0
    560e:	2103      	movs	r1, #3
    5610:	f001 f968 	bl	68e4 <Bounce::Bounce(unsigned char, unsigned long)>
    5614:	67a5      	str	r5, [r4, #120]	; 0x78
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
    5616:	2010      	movs	r0, #16
    5618:	f004 fa74 	bl	9b04 <operator new(unsigned int)>
    561c:	2264      	movs	r2, #100	; 0x64
    561e:	4605      	mov	r5, r0
    5620:	2104      	movs	r1, #4
    5622:	f001 f95f 	bl	68e4 <Bounce::Bounce(unsigned char, unsigned long)>
    5626:	67e5      	str	r5, [r4, #124]	; 0x7c
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
    5628:	2010      	movs	r0, #16
    562a:	f004 fa6b 	bl	9b04 <operator new(unsigned int)>
    562e:	2264      	movs	r2, #100	; 0x64
    5630:	4605      	mov	r5, r0
    5632:	2105      	movs	r1, #5
    5634:	f001 f956 	bl	68e4 <Bounce::Bounce(unsigned char, unsigned long)>
    5638:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	delay(100);
    563c:	2064      	movs	r0, #100	; 0x64
    563e:	f003 f84f 	bl	86e0 <delay>
    5642:	2112      	movs	r1, #18
    5644:	4842      	ldr	r0, [pc, #264]	; (5750 <Board_Sys80b::begin()+0x224>)
    5646:	f004 f865 	bl	9714 <usb_serial_write>
    564a:	483c      	ldr	r0, [pc, #240]	; (573c <Board_Sys80b::begin()+0x210>)
    564c:	f004 faa0 	bl	9b90 <Print::println()>

	Serial.println(F("- Led grid init..."));
	ledGrid = new Led8x8(_spiSettings, LG_SS_PIN);
    5650:	200c      	movs	r0, #12
    5652:	f004 fa57 	bl	9b04 <operator new(unsigned int)>
    5656:	220f      	movs	r2, #15
    5658:	4605      	mov	r5, r0
    565a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    565e:	f000 f975 	bl	594c <Led8x8::Led8x8(SPISettings*, int)>
	ledGrid->setIntensity(3);
    5662:	4628      	mov	r0, r5
    5664:	2103      	movs	r1, #3
	enterButton = new Bounce(ENTRB_PIN, DEBOUNCE_T);
	backButton = new Bounce(BACKB_PIN, DEBOUNCE_T);
	delay(100);

	Serial.println(F("- Led grid init..."));
	ledGrid = new Led8x8(_spiSettings, LG_SS_PIN);
    5666:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	ledGrid->setIntensity(3);
    566a:	f000 f98f 	bl	598c <Led8x8::setIntensity(unsigned char)>
	ledGrid->enabled = true;
    566e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    5672:	2501      	movs	r5, #1
    5674:	721d      	strb	r5, [r3, #8]
	delay(100);
    5676:	2064      	movs	r0, #100	; 0x64
    5678:	f003 f832 	bl	86e0 <delay>
    567c:	210f      	movs	r1, #15
    567e:	4835      	ldr	r0, [pc, #212]	; (5754 <Board_Sys80b::begin()+0x228>)
    5680:	f004 f848 	bl	9714 <usb_serial_write>
    5684:	482d      	ldr	r0, [pc, #180]	; (573c <Board_Sys80b::begin()+0x210>)
    5686:	f004 fa83 	bl	9b90 <Print::println()>

	Serial.println(F("- NVRAM init..."));
	if (_revision == 0) NVData.begin(NVData.SDFILE_NVD, 128);
    568a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    568e:	b143      	cbz	r3, 56a2 <Board_Sys80b::begin()+0x176>
	delay(100);
    5690:	2064      	movs	r0, #100	; 0x64
    5692:	f003 f825 	bl	86e0 <delay>

	if (_revision > 0) {
    5696:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    569a:	b973      	cbnz	r3, 56ba <Board_Sys80b::begin()+0x18e>
		lcd->clear();
		lcd->print(F("Board rev."));
		lcd->println(_revision);
		delay(100);
	}
	else lcd = nullptr;
    569c:	6763      	str	r3, [r4, #116]	; 0x74
}
    569e:	b007      	add	sp, #28
    56a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ledGrid->setIntensity(3);
	ledGrid->enabled = true;
	delay(100);

	Serial.println(F("- NVRAM init..."));
	if (_revision == 0) NVData.begin(NVData.SDFILE_NVD, 128);
    56a2:	4629      	mov	r1, r5
    56a4:	2280      	movs	r2, #128	; 0x80
    56a6:	482c      	ldr	r0, [pc, #176]	; (5758 <Board_Sys80b::begin()+0x22c>)
    56a8:	f000 fa40 	bl	5b2c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)>
	delay(100);
    56ac:	2064      	movs	r0, #100	; 0x64
    56ae:	f003 f817 	bl	86e0 <delay>

	if (_revision > 0) {
    56b2:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    56b6:	2b00      	cmp	r3, #0
    56b8:	d0f0      	beq.n	569c <Board_Sys80b::begin()+0x170>
    56ba:	210d      	movs	r1, #13
    56bc:	4827      	ldr	r0, [pc, #156]	; (575c <Board_Sys80b::begin()+0x230>)
	  uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7) {
		init(rs, 255, enable, 255, d4, d5, d6, d7);
	}
	// 7 pin connection (fast): normal LCD, single HD44780 controller
	LiquidCrystalFast(uint8_t rs, uint8_t rw, uint8_t enable,
	  uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7) {
    56be:	4f28      	ldr	r7, [pc, #160]	; (5760 <Board_Sys80b::begin()+0x234>)
    56c0:	f004 f828 	bl	9714 <usb_serial_write>
    56c4:	481d      	ldr	r0, [pc, #116]	; (573c <Board_Sys80b::begin()+0x210>)
    56c6:	f004 fa63 	bl	9b90 <Print::println()>
		// messages output initialization
		Serial.println(F("- LCD init..."));
		lcd = new LiquidCrystalFast(LCD_RS_PIN, LCD_RW_PIN, LCD_EN_PIN,
			LCD_D4_PIN, LCD_D5_PIN, LCD_D6_PIN, LCD_D7_PIN);
    56ca:	2020      	movs	r0, #32
    56cc:	f004 fa1a 	bl	9b04 <operator new(unsigned int)>
		init(rs, rw, enable, 255, d4, d5, d6, d7);
    56d0:	2615      	movs	r6, #21
    56d2:	2314      	movs	r3, #20
    56d4:	4605      	mov	r5, r0
    56d6:	9304      	str	r3, [sp, #16]
    56d8:	9603      	str	r6, [sp, #12]
    56da:	2116      	movs	r1, #22
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    56dc:	2600      	movs	r6, #0
    56de:	2217      	movs	r2, #23
    56e0:	23ff      	movs	r3, #255	; 0xff
    56e2:	9102      	str	r1, [sp, #8]
    56e4:	9201      	str	r2, [sp, #4]
    56e6:	9300      	str	r3, [sp, #0]
    56e8:	2206      	movs	r2, #6
	  uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7) {
		init(rs, 255, enable, 255, d4, d5, d6, d7);
	}
	// 7 pin connection (fast): normal LCD, single HD44780 controller
	LiquidCrystalFast(uint8_t rs, uint8_t rw, uint8_t enable,
	  uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7) {
    56ea:	6007      	str	r7, [r0, #0]
    56ec:	7106      	strb	r6, [r0, #4]
		init(rs, rw, enable, 255, d4, d5, d6, d7);
    56ee:	2309      	movs	r3, #9
    56f0:	2108      	movs	r1, #8
    56f2:	f001 f89f 	bl	6834 <LiquidCrystalFast::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
		uint8_t rows = lcd->numlines;
		uint8_t cols = lcd->numcols;
		lcd->begin(cols, rows);
    56f6:	4633      	mov	r3, r6
    56f8:	796a      	ldrb	r2, [r5, #5]
    56fa:	79a9      	ldrb	r1, [r5, #6]

	if (_revision > 0) {
		// messages output initialization
		Serial.println(F("- LCD init..."));
		lcd = new LiquidCrystalFast(LCD_RS_PIN, LCD_RW_PIN, LCD_EN_PIN,
			LCD_D4_PIN, LCD_D5_PIN, LCD_D6_PIN, LCD_D7_PIN);
    56fc:	6765      	str	r5, [r4, #116]	; 0x74
		uint8_t rows = lcd->numlines;
		uint8_t cols = lcd->numcols;
		lcd->begin(cols, rows);
    56fe:	4628      	mov	r0, r5
    5700:	f001 f86c 	bl	67dc <LiquidCrystalFast::begin(unsigned char, unsigned char, unsigned char)>
		lcd->clear();
    5704:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5706:	f000 ff4b 	bl	65a0 <LiquidCrystalFast::clear()>
		lcd->print(F("Board rev."));
    570a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    570c:	4915      	ldr	r1, [pc, #84]	; (5764 <Board_Sys80b::begin()+0x238>)
    570e:	6803      	ldr	r3, [r0, #0]
    5710:	220a      	movs	r2, #10
    5712:	685b      	ldr	r3, [r3, #4]
    5714:	4798      	blx	r3
		lcd->println(_revision);
    5716:	6f65      	ldr	r5, [r4, #116]	; 0x74
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    5718:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    571c:	4633      	mov	r3, r6
    571e:	220a      	movs	r2, #10
    5720:	4628      	mov	r0, r5
    5722:	f004 fa5b 	bl	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    5726:	4628      	mov	r0, r5
    5728:	f004 fa32 	bl	9b90 <Print::println()>
		delay(100);
    572c:	2064      	movs	r0, #100	; 0x64
	}
	else lcd = nullptr;
}
    572e:	b007      	add	sp, #28
    5730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uint8_t cols = lcd->numcols;
		lcd->begin(cols, rows);
		lcd->clear();
		lcd->print(F("Board rev."));
		lcd->println(_revision);
		delay(100);
    5734:	f002 bfd4 	b.w	86e0 <delay>
    5738:	000105ec 	.word	0x000105ec
    573c:	1fff876c 	.word	0x1fff876c
    5740:	00010600 	.word	0x00010600
    5744:	1fff8728 	.word	0x1fff8728
    5748:	00010610 	.word	0x00010610
    574c:	00010620 	.word	0x00010620
    5750:	00010634 	.word	0x00010634
    5754:	00010648 	.word	0x00010648
    5758:	1fff92d8 	.word	0x1fff92d8
    575c:	00010658 	.word	0x00010658
    5760:	00010884 	.word	0x00010884
    5764:	00010668 	.word	0x00010668

00005768 <Board_Sys80b::writeDisplayAddr(unsigned char)>:
void digitalWrite(uint8_t pin, uint8_t val);
static inline void digitalWriteFast(uint8_t pin, uint8_t val) __attribute__((always_inline, unused));
static inline void digitalWriteFast(uint8_t pin, uint8_t val)
{
	if (__builtin_constant_p(pin)) {
		if (val) {
    5768:	07ca      	lsls	r2, r1, #31
			} else if (pin == 14) {
				CORE_PIN14_PORTSET = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
    576a:	bf4c      	ite	mi
    576c:	4b05      	ldrmi	r3, [pc, #20]	; (5784 <Board_Sys80b::writeDisplayAddr(unsigned char)+0x1c>)
			} else if (pin == 14) {
				CORE_PIN14_PORTCLEAR = CORE_PIN14_BITMASK;
			} else if (pin == 15) {
				CORE_PIN15_PORTCLEAR = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
    576e:	4b06      	ldrpl	r3, [pc, #24]	; (5788 <Board_Sys80b::writeDisplayAddr(unsigned char)+0x20>)
    5770:	2201      	movs	r2, #1
    5772:	601a      	str	r2, [r3, #0]
	return rev;
}

void Board_Sys80b::writeDisplayAddr(byte adr) {
	digitalWriteFast(D_LD1_PIN, ((adr & 1) != 0) ? HIGH : LOW);
	digitalWriteFast(D_LD2_PIN, ((adr & 2) != 0) ? HIGH : LOW);
    5774:	078b      	lsls	r3, r1, #30
			} else if (pin == 15) {
				CORE_PIN15_PORTSET = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTSET = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTSET = CORE_PIN17_BITMASK;
    5776:	bf4c      	ite	mi
    5778:	4b02      	ldrmi	r3, [pc, #8]	; (5784 <Board_Sys80b::writeDisplayAddr(unsigned char)+0x1c>)
			} else if (pin == 15) {
				CORE_PIN15_PORTCLEAR = CORE_PIN15_BITMASK;
			} else if (pin == 16) {
				CORE_PIN16_PORTCLEAR = CORE_PIN16_BITMASK;
			} else if (pin == 17) {
				CORE_PIN17_PORTCLEAR = CORE_PIN17_BITMASK;
    577a:	4b03      	ldrpl	r3, [pc, #12]	; (5788 <Board_Sys80b::writeDisplayAddr(unsigned char)+0x20>)
    577c:	2202      	movs	r2, #2
    577e:	601a      	str	r2, [r3, #0]
    5780:	4770      	bx	lr
    5782:	bf00      	nop
    5784:	400ff044 	.word	0x400ff044
    5788:	400ff048 	.word	0x400ff048

0000578c <Board_Sys80b::write4Lamps(unsigned char, unsigned char)>:
}

// adr = 0..11
void Board_Sys80b::write4Lamps(byte adr, byte states) {
	if (adr >= 12) return;
    578c:	290b      	cmp	r1, #11
    578e:	d900      	bls.n	5792 <Board_Sys80b::write4Lamps(unsigned char, unsigned char)+0x6>
    5790:	4770      	bx	lr
	lamps_IO->mcpWrite((mux16[adr] << 4) | ((states) & 0xf));
    5792:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    5796:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
    579a:	f002 020f 	and.w	r2, r2, #15
    579e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    57a2:	b289      	uxth	r1, r1
    57a4:	f000 bb98 	b.w	5ed8 <PIO::mcpWrite(unsigned short)>

000057a8 <Board_Sys80b::getSettingByte(unsigned char)>:
	NVData.writeBytes(SETTINGSBASEADR, factorySettingsOpSw, 4);
	Serial.println(F("ok."));
}

byte Board_Sys80b::getSettingByte(byte addr) {
	if (addr > 3) return 0;
    57a8:	2903      	cmp	r1, #3
    57aa:	d901      	bls.n	57b0 <Board_Sys80b::getSettingByte(unsigned char)+0x8>
	return NVData.readByte(SETTINGSBASEADR + addr);
}
    57ac:	2000      	movs	r0, #0
    57ae:	4770      	bx	lr
	Serial.println(F("ok."));
}

byte Board_Sys80b::getSettingByte(byte addr) {
	if (addr > 3) return 0;
	return NVData.readByte(SETTINGSBASEADR + addr);
    57b0:	3164      	adds	r1, #100	; 0x64
    57b2:	4801      	ldr	r0, [pc, #4]	; (57b8 <Board_Sys80b::getSettingByte(unsigned char)+0x10>)
    57b4:	f000 b938 	b.w	5a28 <NVData_class::readByte(unsigned short)>
    57b8:	1fff92d8 	.word	0x1fff92d8

000057bc <Board_Sys80b::getStat32(unsigned char)>:
	v = v << 8;
	v |= NVData.readByte(addr + 1);
	return v;
}

uint32_t Board_Sys80b::getStat32(byte addr) {
    57bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t v;
	v = NVData.readByte(addr);
    57be:	4d0c      	ldr	r5, [pc, #48]	; (57f0 <Board_Sys80b::getStat32(unsigned char)+0x34>)
    57c0:	4628      	mov	r0, r5
    57c2:	460e      	mov	r6, r1
    57c4:	f000 f930 	bl	5a28 <NVData_class::readByte(unsigned short)>
	v = v << 8;
	v |= NVData.readByte(addr + 1);
    57c8:	1c71      	adds	r1, r6, #1
}

uint32_t Board_Sys80b::getStat32(byte addr) {
	uint32_t v;
	v = NVData.readByte(addr);
	v = v << 8;
    57ca:	0204      	lsls	r4, r0, #8
	v |= NVData.readByte(addr + 1);
    57cc:	4628      	mov	r0, r5
    57ce:	f000 f92b 	bl	5a28 <NVData_class::readByte(unsigned short)>
	v = v << 8;
	v |= NVData.readByte(addr + 2);
    57d2:	1cb1      	adds	r1, r6, #2

uint32_t Board_Sys80b::getStat32(byte addr) {
	uint32_t v;
	v = NVData.readByte(addr);
	v = v << 8;
	v |= NVData.readByte(addr + 1);
    57d4:	4304      	orrs	r4, r0
	v = v << 8;
	v |= NVData.readByte(addr + 2);
    57d6:	4628      	mov	r0, r5
    57d8:	f000 f926 	bl	5a28 <NVData_class::readByte(unsigned short)>
uint32_t Board_Sys80b::getStat32(byte addr) {
	uint32_t v;
	v = NVData.readByte(addr);
	v = v << 8;
	v |= NVData.readByte(addr + 1);
	v = v << 8;
    57dc:	0224      	lsls	r4, r4, #8
	v |= NVData.readByte(addr + 2);
	v = v << 8;
	v |= NVData.readByte(addr + 3);
    57de:	1cf1      	adds	r1, r6, #3
	uint32_t v;
	v = NVData.readByte(addr);
	v = v << 8;
	v |= NVData.readByte(addr + 1);
	v = v << 8;
	v |= NVData.readByte(addr + 2);
    57e0:	4304      	orrs	r4, r0
	v = v << 8;
	v |= NVData.readByte(addr + 3);
    57e2:	4628      	mov	r0, r5
    57e4:	f000 f920 	bl	5a28 <NVData_class::readByte(unsigned short)>
	v = NVData.readByte(addr);
	v = v << 8;
	v |= NVData.readByte(addr + 1);
	v = v << 8;
	v |= NVData.readByte(addr + 2);
	v = v << 8;
    57e8:	0224      	lsls	r4, r4, #8
	v |= NVData.readByte(addr + 3);
	return v;
}
    57ea:	4320      	orrs	r0, r4
    57ec:	bd70      	pop	{r4, r5, r6, pc}
    57ee:	bf00      	nop
    57f0:	1fff92d8 	.word	0x1fff92d8

000057f4 <Board_Sys80b::getSettingSwitch(unsigned char)>:

byte Board_Sys80b::getSettingSwitch(byte n) {
	return getSettingBit(n - 1);
    57f4:	3901      	subs	r1, #1
	v = v << 8;
	v |= NVData.readByte(addr + 3);
	return v;
}

byte Board_Sys80b::getSettingSwitch(byte n) {
    57f6:	b510      	push	{r4, lr}
	return getSettingBit(n - 1);
    57f8:	b2cc      	uxtb	r4, r1

byte Board_Sys80b::getSettingBit(byte bitPos) {
	bitPos &= 0x1fu; // = 0..31
	byte _byte = bitPos >> 3;
	byte _bit = bitPos & 7u;
	return (NVData.readByte(_byte) & (1 << _bit)) ? 1 : 0;
    57fa:	f3c4 01c1 	ubfx	r1, r4, #3, #2
    57fe:	4804      	ldr	r0, [pc, #16]	; (5810 <Board_Sys80b::getSettingSwitch(unsigned char)+0x1c>)
    5800:	f000 f912 	bl	5a28 <NVData_class::readByte(unsigned short)>
	v |= NVData.readByte(addr + 3);
	return v;
}

byte Board_Sys80b::getSettingSwitch(byte n) {
	return getSettingBit(n - 1);
    5804:	f004 0407 	and.w	r4, r4, #7
    5808:	4120      	asrs	r0, r4
}
    580a:	f000 0001 	and.w	r0, r0, #1
    580e:	bd10      	pop	{r4, pc}
    5810:	1fff92d8 	.word	0x1fff92d8

00005814 <_GLOBAL__sub_I__ZN12Board_Sys80bC2Ev>:

void Board_Sys80b::setSettingSwitch(byte n, bool s) {
	saveSettingBit(n - 1, s);
    5814:	b510      	push	{r4, lr}
    5816:	4c05      	ldr	r4, [pc, #20]	; (582c <_GLOBAL__sub_I__ZN12Board_Sys80bC2Ev+0x18>)
    5818:	4620      	mov	r0, r4
    581a:	f000 f8bd 	bl	5998 <NVData_class::NVData_class()>
    581e:	4620      	mov	r0, r4
    5820:	4a03      	ldr	r2, [pc, #12]	; (5830 <_GLOBAL__sub_I__ZN12Board_Sys80bC2Ev+0x1c>)
    5822:	4904      	ldr	r1, [pc, #16]	; (5834 <_GLOBAL__sub_I__ZN12Board_Sys80bC2Ev+0x20>)
    5824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5828:	f005 bb54 	b.w	aed4 <__aeabi_atexit>
    582c:	1fff92d8 	.word	0x1fff92d8
    5830:	1fff8720 	.word	0x1fff8720
    5834:	00002f65 	.word	0x00002f65

00005838 <Led8x8::_writeCmd(unsigned char, unsigned char)>:
		byte i = 0;
		while (i < 8) _writeCmd(++i, 0);
	}
}

void Led8x8::_writeCmd(byte adr, byte data) {
    5838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    583a:	4c35      	ldr	r4, [pc, #212]	; (5910 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xd8>)
    583c:	4605      	mov	r5, r0
    583e:	7ae3      	ldrb	r3, [r4, #11]
    5840:	6800      	ldr	r0, [r0, #0]
    5842:	460e      	mov	r6, r1
    5844:	6800      	ldr	r0, [r0, #0]
    5846:	4617      	mov	r7, r2
    5848:	b1eb      	cbz	r3, 5886 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x4e>
			__disable_irq();
    584a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    584c:	7ae3      	ldrb	r3, [r4, #11]
    584e:	07d9      	lsls	r1, r3, #31
    5850:	461a      	mov	r2, r3
    5852:	d509      	bpl.n	5868 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x30>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5854:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 592c <Led8x8::_writeCmd(unsigned char, unsigned char)+0xf4>
    5858:	68e1      	ldr	r1, [r4, #12]
    585a:	f8de 2000 	ldr.w	r2, [lr]
    585e:	400a      	ands	r2, r1
    5860:	61a2      	str	r2, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    5862:	f8ce 2000 	str.w	r2, [lr]
    5866:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5868:	0799      	lsls	r1, r3, #30
    586a:	d509      	bpl.n	5880 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    586c:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 5930 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xf8>
    5870:	6921      	ldr	r1, [r4, #16]
    5872:	f8de 3000 	ldr.w	r3, [lr]
    5876:	7ae2      	ldrb	r2, [r4, #11]
    5878:	400b      	ands	r3, r1
    587a:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    587c:	f8ce 3000 	str.w	r3, [lr]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5880:	0753      	lsls	r3, r2, #29
    5882:	d43d      	bmi.n	5900 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xc8>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    5884:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5886:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    5888:	68da      	ldr	r2, [r3, #12]
    588a:	4282      	cmp	r2, r0
    588c:	d007      	beq.n	589e <Led8x8::_writeCmd(unsigned char, unsigned char)+0x66>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    588e:	4921      	ldr	r1, [pc, #132]	; (5914 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xdc>)
    5890:	6019      	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5892:	4a21      	ldr	r2, [pc, #132]	; (5918 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xe0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    5894:	60d8      	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    5896:	f040 4180 	orr.w	r1, r0, #1073741824	; 0x40000000
    589a:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    589c:	601a      	str	r2, [r3, #0]
	SPI.beginTransaction(*_spis);
	digitalWrite(_ss_pin, LOW);
    589e:	2100      	movs	r1, #0
    58a0:	7928      	ldrb	r0, [r5, #4]
    58a2:	f002 fedf 	bl	8664 <digitalWrite>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    58a6:	6823      	ldr	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    58a8:	f006 060f 	and.w	r6, r6, #15
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    58ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    58b0:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    58b2:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    58b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    58b6:	2900      	cmp	r1, #0
    58b8:	dafc      	bge.n	58b4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x7c>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    58ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    58be:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    58c0:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    58c2:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    58c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58c6:	2a00      	cmp	r2, #0
    58c8:	dafc      	bge.n	58c4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x8c>
	SPI.transfer(adr & 0xf);
	SPI.transfer(data);
	digitalWrite(_ss_pin, HIGH);
    58ca:	2101      	movs	r1, #1
    58cc:	7928      	ldrb	r0, [r5, #4]
		return port().POPR;
    58ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    58d0:	f002 fec8 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    58d4:	7ae3      	ldrb	r3, [r4, #11]
    58d6:	490e      	ldr	r1, [pc, #56]	; (5910 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xd8>)
    58d8:	461a      	mov	r2, r3
    58da:	b183      	cbz	r3, 58fe <Led8x8::_writeCmd(unsigned char, unsigned char)+0xc6>
			if (interruptMasksUsed & 0x01) {
    58dc:	07d8      	lsls	r0, r3, #31
    58de:	d503      	bpl.n	58e8 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xb0>
				NVIC_ISER0 = interruptSave[0];
    58e0:	4a0e      	ldr	r2, [pc, #56]	; (591c <Led8x8::_writeCmd(unsigned char, unsigned char)+0xe4>)
    58e2:	6989      	ldr	r1, [r1, #24]
    58e4:	6011      	str	r1, [r2, #0]
    58e6:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    58e8:	0799      	lsls	r1, r3, #30
    58ea:	d503      	bpl.n	58f4 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xbc>
				NVIC_ISER1 = interruptSave[1];
    58ec:	4b0c      	ldr	r3, [pc, #48]	; (5920 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xe8>)
    58ee:	69e1      	ldr	r1, [r4, #28]
    58f0:	7ae2      	ldrb	r2, [r4, #11]
    58f2:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    58f4:	0753      	lsls	r3, r2, #29
    58f6:	d502      	bpl.n	58fe <Led8x8::_writeCmd(unsigned char, unsigned char)+0xc6>
				NVIC_ISER2 = interruptSave[2];
    58f8:	4b0a      	ldr	r3, [pc, #40]	; (5924 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xec>)
    58fa:	6a22      	ldr	r2, [r4, #32]
    58fc:	601a      	str	r2, [r3, #0]
    58fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5900:	4a09      	ldr	r2, [pc, #36]	; (5928 <Led8x8::_writeCmd(unsigned char, unsigned char)+0xf0>)
    5902:	6963      	ldr	r3, [r4, #20]
    5904:	6811      	ldr	r1, [r2, #0]
    5906:	400b      	ands	r3, r1
    5908:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    590a:	6013      	str	r3, [r2, #0]
    590c:	e7ba      	b.n	5884 <Led8x8::_writeCmd(unsigned char, unsigned char)+0x4c>
    590e:	bf00      	nop
    5910:	1fff8728 	.word	0x1fff8728
    5914:	003f4001 	.word	0x003f4001
    5918:	803f0000 	.word	0x803f0000
    591c:	e000e100 	.word	0xe000e100
    5920:	e000e104 	.word	0xe000e104
    5924:	e000e108 	.word	0xe000e108
    5928:	e000e188 	.word	0xe000e188
    592c:	e000e180 	.word	0xe000e180
    5930:	e000e184 	.word	0xe000e184

00005934 <Led8x8::setRowReverse(unsigned char, unsigned char)>:
	//for (byte i = 0; i <8; i++) setRow(i, 1 << i); // test "slash"
}

// MSB on left
void Led8x8::setRowReverse(byte row, byte data) {
	if (enabled) _writeCmd((row & 0x7) + 1, revByte[data]);
    5934:	7a03      	ldrb	r3, [r0, #8]
    5936:	b903      	cbnz	r3, 593a <Led8x8::setRowReverse(unsigned char, unsigned char)+0x6>
    5938:	4770      	bx	lr
    593a:	4b03      	ldr	r3, [pc, #12]	; (5948 <Led8x8::setRowReverse(unsigned char, unsigned char)+0x14>)
    593c:	f001 0107 	and.w	r1, r1, #7
    5940:	3101      	adds	r1, #1
    5942:	5c9a      	ldrb	r2, [r3, r2]
    5944:	f7ff bf78 	b.w	5838 <Led8x8::_writeCmd(unsigned char, unsigned char)>
    5948:	0001069c 	.word	0x0001069c

0000594c <Led8x8::Led8x8(SPISettings*, int)>:
	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
    594c:	b538      	push	{r3, r4, r5, lr}
	_spis = ss;
	_ss_pin = pin;
	_writeCmd(CMD_DECODE, 0); // Decode state off
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
	shutDownMode(false); // Shutdown mode off
	enabled = true;
    594e:	2400      	movs	r4, #0
	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };

Led8x8::Led8x8(SPISettings* ss, int pin) {
    5950:	4605      	mov	r5, r0
	_spis = ss;
	_ss_pin = pin;
    5952:	e880 0006 	stmia.w	r0, {r1, r2}
	_writeCmd(CMD_DECODE, 0); // Decode state off
    5956:	2109      	movs	r1, #9
    5958:	4622      	mov	r2, r4
    595a:	f7ff ff6d 	bl	5838 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
    595e:	4628      	mov	r0, r5
    5960:	2207      	movs	r2, #7
    5962:	210b      	movs	r1, #11
    5964:	f7ff ff68 	bl	5838 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	digitalWrite(_ss_pin, HIGH);
	SPI.endTransaction();
}

void Led8x8::shutDownMode(bool b) { 
	_writeCmd(CMD_SHUTDWN, b ? 0 : 1); 
    5968:	4628      	mov	r0, r5
    596a:	2201      	movs	r2, #1
    596c:	210c      	movs	r1, #12
    596e:	f7ff ff63 	bl	5838 <Led8x8::_writeCmd(unsigned char, unsigned char)>
	_spis = ss;
	_ss_pin = pin;
	_writeCmd(CMD_DECODE, 0); // Decode state off
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
	shutDownMode(false); // Shutdown mode off
	enabled = true;
    5972:	2301      	movs	r3, #1
    5974:	722b      	strb	r3, [r5, #8]
}

void Led8x8::clear() {
	if (enabled) {
		byte i = 0;
		while (i < 8) _writeCmd(++i, 0);
    5976:	3401      	adds	r4, #1
    5978:	b2e4      	uxtb	r4, r4
    597a:	4621      	mov	r1, r4
    597c:	2200      	movs	r2, #0
    597e:	4628      	mov	r0, r5
    5980:	f7ff ff5a 	bl	5838 <Led8x8::_writeCmd(unsigned char, unsigned char)>
    5984:	2c08      	cmp	r4, #8
    5986:	d1f6      	bne.n	5976 <Led8x8::Led8x8(SPISettings*, int)+0x2a>
	_writeCmd(CMD_DIGITS, 7); // 8 rows ("digits")
	shutDownMode(false); // Shutdown mode off
	enabled = true;
	clear();
	//for (byte i = 0; i <8; i++) setRow(i, 1 << i); // test "slash"
}
    5988:	4628      	mov	r0, r5
    598a:	bd38      	pop	{r3, r4, r5, pc}

0000598c <Led8x8::setIntensity(unsigned char)>:
void Led8x8::shutDownMode(bool b) { 
	_writeCmd(CMD_SHUTDWN, b ? 0 : 1); 
}

void Led8x8::setIntensity(byte i) { 
	_writeCmd(CMD_INTNSTY, i & 0xf); 
    598c:	f001 020f 	and.w	r2, r1, #15
    5990:	210a      	movs	r1, #10
    5992:	f7ff bf51 	b.w	5838 <Led8x8::_writeCmd(unsigned char, unsigned char)>
    5996:	bf00      	nop

00005998 <NVData_class::NVData_class()>:
#include "NVData.h"
#include <EEPROM.h>
#include <SD_t3.h>
#include <SD.h>

NVData_class::NVData_class() {
    5998:	b510      	push	{r4, lr}
    599a:	4604      	mov	r4, r0
    599c:	3008      	adds	r0, #8
    599e:	f001 f8a5 	bl	6aec <File::File()>
	fileName = "NVRAM.BIN";
    59a2:	4b03      	ldr	r3, [pc, #12]	; (59b0 <NVData_class::NVData_class()+0x18>)
    59a4:	6023      	str	r3, [r4, #0]
	_ready = false;
    59a6:	2300      	movs	r3, #0
    59a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    59ac:	4620      	mov	r0, r4
    59ae:	bd10      	pop	{r4, pc}
    59b0:	0001079c 	.word	0x0001079c

000059b4 <NVData_class::_err()>:
	}
	else Serial.println("Can't create settings file!");
	return (bool)f;
}

void NVData_class::_err() {
    59b4:	b510      	push	{r4, lr}
    59b6:	4604      	mov	r4, r0
    59b8:	2113      	movs	r1, #19
    59ba:	480a      	ldr	r0, [pc, #40]	; (59e4 <NVData_class::_err()+0x30>)
    59bc:	f003 feaa 	bl	9714 <usb_serial_write>
	Serial.print("! Can't open file '");
	Serial.print(fileName);
    59c0:	6824      	ldr	r4, [r4, #0]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    59c2:	4620      	mov	r0, r4
    59c4:	f006 f95c 	bl	bc80 <strlen>
    59c8:	4601      	mov	r1, r0
    59ca:	4620      	mov	r0, r4
    59cc:	f003 fea2 	bl	9714 <usb_serial_write>
    59d0:	2103      	movs	r1, #3
    59d2:	4805      	ldr	r0, [pc, #20]	; (59e8 <NVData_class::_err()+0x34>)
    59d4:	f003 fe9e 	bl	9714 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    59d8:	4804      	ldr	r0, [pc, #16]	; (59ec <NVData_class::_err()+0x38>)
	Serial.println("' !");
    59da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    59de:	f004 b8d7 	b.w	9b90 <Print::println()>
    59e2:	bf00      	nop
    59e4:	000107a8 	.word	0x000107a8
    59e8:	000107bc 	.word	0x000107bc
    59ec:	1fff876c 	.word	0x1fff876c

000059f0 <_GLOBAL__sub_I__ZN12NVData_classC2Ev>:
    59f0:	b510      	push	{r4, lr}
#include "NVData.h"
#include <EEPROM.h>
#include <SD_t3.h>
#include <SD.h>

NVData_class::NVData_class() {
    59f2:	4c09      	ldr	r4, [pc, #36]	; (5a18 <_GLOBAL__sub_I__ZN12NVData_classC2Ev+0x28>)
    59f4:	f104 0008 	add.w	r0, r4, #8
    59f8:	f001 f878 	bl	6aec <File::File()>
	fileName = "NVRAM.BIN";
    59fc:	4b07      	ldr	r3, [pc, #28]	; (5a1c <_GLOBAL__sub_I__ZN12NVData_classC2Ev+0x2c>)
    59fe:	6023      	str	r3, [r4, #0]
    5a00:	4620      	mov	r0, r4
	_ready = false;
    5a02:	2300      	movs	r3, #0
    5a04:	4a06      	ldr	r2, [pc, #24]	; (5a20 <_GLOBAL__sub_I__ZN12NVData_classC2Ev+0x30>)
    5a06:	4907      	ldr	r1, [pc, #28]	; (5a24 <_GLOBAL__sub_I__ZN12NVData_classC2Ev+0x34>)
    5a08:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    5a0c:	f005 fa62 	bl	aed4 <__aeabi_atexit>

void NVData_class::_err() {
	Serial.print("! Can't open file '");
	Serial.print(fileName);
	Serial.println("' !");
    5a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    5a14:	f002 bd0c 	b.w	8430 <eeprom_initialize>
    5a18:	1fff9304 	.word	0x1fff9304
    5a1c:	0001079c 	.word	0x0001079c
    5a20:	1fff8720 	.word	0x1fff8720
    5a24:	00002f65 	.word	0x00002f65

00005a28 <NVData_class::readByte(unsigned short)>:
}

/** attenzione: MANCA supporto dispositivi SD e FRAM **/

byte NVData_class::readByte(uint16_t addr) {
	if (!_ready) return 0;
    5a28:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d03e      	beq.n	5aae <NVData_class::readByte(unsigned short)+0x86>
	return true;
}

/** attenzione: MANCA supporto dispositivi SD e FRAM **/

byte NVData_class::readByte(uint16_t addr) {
    5a30:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!_ready) return 0;
	byte data = 0;
	switch (device) {
    5a32:	7903      	ldrb	r3, [r0, #4]
	return true;
}

/** attenzione: MANCA supporto dispositivi SD e FRAM **/

byte NVData_class::readByte(uint16_t addr) {
    5a34:	b089      	sub	sp, #36	; 0x24
    5a36:	460e      	mov	r6, r1
    5a38:	4604      	mov	r4, r0
	if (!_ready) return 0;
	byte data = 0;
	switch (device) {
    5a3a:	b39b      	cbz	r3, 5aa4 <NVData_class::readByte(unsigned short)+0x7c>
    5a3c:	2b01      	cmp	r3, #1
    5a3e:	d138      	bne.n	5ab2 <NVData_class::readByte(unsigned short)+0x8a>
	case EEPROM_NVD:
		data = EEPROM.read(addr);
		break;
	case SDFILE_NVD:
		_f = SD.open(fileName, FILE_READ);
    5a40:	4668      	mov	r0, sp
    5a42:	6822      	ldr	r2, [r4, #0]
    5a44:	491f      	ldr	r1, [pc, #124]	; (5ac4 <NVData_class::readByte(unsigned short)+0x9c>)
    5a46:	f001 f9b5 	bl	6db4 <SDClass::open(char const*, unsigned char)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    5a4a:	aa08      	add	r2, sp, #32
    5a4c:	9b02      	ldr	r3, [sp, #8]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    5a4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5a52:	f812 0d14 	ldrb.w	r0, [r2, #-20]!
    5a56:	6123      	str	r3, [r4, #16]
    5a58:	7520      	strb	r0, [r4, #20]
    5a5a:	7321      	strb	r1, [r4, #12]
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
    5a5c:	f104 0315 	add.w	r3, r4, #21
    5a60:	f104 0522 	add.w	r5, r4, #34	; 0x22
    5a64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    5a68:	f803 0b01 	strb.w	r0, [r3], #1
    5a6c:	429d      	cmp	r5, r3
    5a6e:	d1f9      	bne.n	5a64 <NVData_class::readByte(unsigned short)+0x3c>
    5a70:	9b07      	ldr	r3, [sp, #28]
    5a72:	6263      	str	r3, [r4, #36]	; 0x24
    5a74:	4668      	mov	r0, sp
		if (!_f) {
    5a76:	f104 0708 	add.w	r7, r4, #8
	switch (device) {
	case EEPROM_NVD:
		data = EEPROM.read(addr);
		break;
	case SDFILE_NVD:
		_f = SD.open(fileName, FILE_READ);
    5a7a:	f001 f845 	bl	6b08 <File::~File()>
		if (!_f) {
    5a7e:	4638      	mov	r0, r7
    5a80:	f001 f85c 	bl	6b3c <File::operator bool()>
    5a84:	4605      	mov	r5, r0
    5a86:	b1b8      	cbz	r0, 5ab8 <NVData_class::readByte(unsigned short)+0x90>
			_err();
			return 0;
		}
		_f.seek(addr);
    5a88:	4631      	mov	r1, r6
    5a8a:	4638      	mov	r0, r7
    5a8c:	f001 f83e 	bl	6b0c <File::seek(unsigned long)>
		data = _f.read();
    5a90:	4638      	mov	r0, r7
    5a92:	f000 ffc3 	bl	6a1c <File::read()>
    5a96:	b2c4      	uxtb	r4, r0
		_f.close();
    5a98:	4638      	mov	r0, r7
    5a9a:	f001 f841 	bl	6b20 <File::close()>
		if (!_f) {
			_err();
			return 0;
		}
		_f.seek(addr);
		data = _f.read();
    5a9e:	4620      	mov	r0, r4
		break;
	case FRAM_NVD:
		break;
	}
	return data;
}
    5aa0:	b009      	add	sp, #36	; 0x24
    5aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    5aa4:	4608      	mov	r0, r1
    5aa6:	f002 fd0b 	bl	84c0 <eeprom_read_byte>
    5aaa:	b009      	add	sp, #36	; 0x24
    5aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

/** attenzione: MANCA supporto dispositivi SD e FRAM **/

byte NVData_class::readByte(uint16_t addr) {
	if (!_ready) return 0;
    5aae:	4618      	mov	r0, r3
		break;
	case FRAM_NVD:
		break;
	}
	return data;
}
    5ab0:	4770      	bx	lr

/** attenzione: MANCA supporto dispositivi SD e FRAM **/

byte NVData_class::readByte(uint16_t addr) {
	if (!_ready) return 0;
	byte data = 0;
    5ab2:	2000      	movs	r0, #0
		break;
	case FRAM_NVD:
		break;
	}
	return data;
}
    5ab4:	b009      	add	sp, #36	; 0x24
    5ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data = EEPROM.read(addr);
		break;
	case SDFILE_NVD:
		_f = SD.open(fileName, FILE_READ);
		if (!_f) {
			_err();
    5ab8:	4620      	mov	r0, r4
    5aba:	f7ff ff7b 	bl	59b4 <NVData_class::_err()>
			return 0;
    5abe:	4628      	mov	r0, r5
    5ac0:	e7f3      	b.n	5aaa <NVData_class::readByte(unsigned short)+0x82>
    5ac2:	bf00      	nop
    5ac4:	1fff9330 	.word	0x1fff9330

00005ac8 <NVData_class::_createSettingsFile(unsigned short)>:
	case FRAM_NVD:
		return;
	}
}

bool NVData_class::_createSettingsFile(uint16_t size) {
    5ac8:	b530      	push	{r4, r5, lr}
    5aca:	b089      	sub	sp, #36	; 0x24
	File f = SD.open(fileName, FILE_WRITE);
    5acc:	6802      	ldr	r2, [r0, #0]
	case FRAM_NVD:
		return;
	}
}

bool NVData_class::_createSettingsFile(uint16_t size) {
    5ace:	460d      	mov	r5, r1
	File f = SD.open(fileName, FILE_WRITE);
    5ad0:	4668      	mov	r0, sp
    5ad2:	4913      	ldr	r1, [pc, #76]	; (5b20 <NVData_class::_createSettingsFile(unsigned short)+0x58>)
    5ad4:	2313      	movs	r3, #19
    5ad6:	f001 f96d 	bl	6db4 <SDClass::open(char const*, unsigned char)>
	if (f) {
    5ada:	4668      	mov	r0, sp
    5adc:	f001 f82e 	bl	6b3c <File::operator bool()>
    5ae0:	b1b0      	cbz	r0, 5b10 <NVData_class::_createSettingsFile(unsigned short)+0x48>
		for (uint16_t i = 0; i < size; i++) f.write((byte)0);
    5ae2:	2400      	movs	r4, #0
    5ae4:	b13d      	cbz	r5, 5af6 <NVData_class::_createSettingsFile(unsigned short)+0x2e>
    5ae6:	3401      	adds	r4, #1
    5ae8:	2100      	movs	r1, #0
    5aea:	4668      	mov	r0, sp
    5aec:	b2a4      	uxth	r4, r4
    5aee:	f000 ff6b 	bl	69c8 <File::write(unsigned char)>
    5af2:	42a5      	cmp	r5, r4
    5af4:	d1f7      	bne.n	5ae6 <NVData_class::_createSettingsFile(unsigned short)+0x1e>
		f.close();
    5af6:	4668      	mov	r0, sp
    5af8:	f001 f812 	bl	6b20 <File::close()>
	}
	else Serial.println("Can't create settings file!");
	return (bool)f;
    5afc:	4668      	mov	r0, sp
    5afe:	f001 f81d 	bl	6b3c <File::operator bool()>
    5b02:	4604      	mov	r4, r0
		return;
	}
}

bool NVData_class::_createSettingsFile(uint16_t size) {
	File f = SD.open(fileName, FILE_WRITE);
    5b04:	4668      	mov	r0, sp
    5b06:	f000 ffff 	bl	6b08 <File::~File()>
		for (uint16_t i = 0; i < size; i++) f.write((byte)0);
		f.close();
	}
	else Serial.println("Can't create settings file!");
	return (bool)f;
}
    5b0a:	4620      	mov	r0, r4
    5b0c:	b009      	add	sp, #36	; 0x24
    5b0e:	bd30      	pop	{r4, r5, pc}
    5b10:	211b      	movs	r1, #27
    5b12:	4804      	ldr	r0, [pc, #16]	; (5b24 <NVData_class::_createSettingsFile(unsigned short)+0x5c>)
    5b14:	f003 fdfe 	bl	9714 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    5b18:	4803      	ldr	r0, [pc, #12]	; (5b28 <NVData_class::_createSettingsFile(unsigned short)+0x60>)
    5b1a:	f004 f839 	bl	9b90 <Print::println()>
    5b1e:	e7ed      	b.n	5afc <NVData_class::_createSettingsFile(unsigned short)+0x34>
    5b20:	1fff9330 	.word	0x1fff9330
    5b24:	000107c0 	.word	0x000107c0
    5b28:	1fff876c 	.word	0x1fff876c

00005b2c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)>:
NVData_class::NVData_class() {
	fileName = "NVRAM.BIN";
	_ready = false;
}

bool NVData_class::begin(Device d, uint16_t size, uint8_t cs_pin) {
    5b2c:	b510      	push	{r4, lr}
	device = d;
	_size = size;
	if (d == SDFILE_NVD) {
    5b2e:	2901      	cmp	r1, #1
NVData_class::NVData_class() {
	fileName = "NVRAM.BIN";
	_ready = false;
}

bool NVData_class::begin(Device d, uint16_t size, uint8_t cs_pin) {
    5b30:	b082      	sub	sp, #8
    5b32:	4604      	mov	r4, r0
	device = d;
    5b34:	7101      	strb	r1, [r0, #4]
	_size = size;
    5b36:	8542      	strh	r2, [r0, #42]	; 0x2a
	if (d == SDFILE_NVD) {
    5b38:	d004      	beq.n	5b44 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x18>
			Serial.print("Settings file not found. Creating... ");
			if (!_createSettingsFile(size)) return false;
			else Serial.println("ok.");
		}
	}
	_ready = true;
    5b3a:	2001      	movs	r0, #1
    5b3c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	return true;
}
    5b40:	b002      	add	sp, #8
    5b42:	bd10      	pop	{r4, pc}

bool NVData_class::begin(Device d, uint16_t size, uint8_t cs_pin) {
	device = d;
	_size = size;
	if (d == SDFILE_NVD) {
		if (cs_pin == 0) return false;
    5b44:	b913      	cbnz	r3, 5b4c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x20>
    5b46:	2000      	movs	r0, #0
			else Serial.println("ok.");
		}
	}
	_ready = true;
	return true;
}
    5b48:	b002      	add	sp, #8
    5b4a:	bd10      	pop	{r4, pc}
bool NVData_class::begin(Device d, uint16_t size, uint8_t cs_pin) {
	device = d;
	_size = size;
	if (d == SDFILE_NVD) {
		if (cs_pin == 0) return false;
		if (!SD.begin(cs_pin)) return false;
    5b4c:	4619      	mov	r1, r3
    5b4e:	480f      	ldr	r0, [pc, #60]	; (5b8c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x60>)
    5b50:	9201      	str	r2, [sp, #4]
    5b52:	f001 f891 	bl	6c78 <SDClass::begin(unsigned char)>
    5b56:	2800      	cmp	r0, #0
    5b58:	d0f5      	beq.n	5b46 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x1a>
		if (!SD.exists(fileName)) {
    5b5a:	6821      	ldr	r1, [r4, #0]
    5b5c:	480b      	ldr	r0, [pc, #44]	; (5b8c <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x60>)
    5b5e:	f001 f99d 	bl	6e9c <SDClass::exists(char const*)>
    5b62:	2800      	cmp	r0, #0
    5b64:	d1e9      	bne.n	5b3a <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0xe>
    5b66:	2125      	movs	r1, #37	; 0x25
    5b68:	4809      	ldr	r0, [pc, #36]	; (5b90 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x64>)
    5b6a:	f003 fdd3 	bl	9714 <usb_serial_write>
			Serial.print("Settings file not found. Creating... ");
			if (!_createSettingsFile(size)) return false;
    5b6e:	9a01      	ldr	r2, [sp, #4]
    5b70:	4620      	mov	r0, r4
    5b72:	4611      	mov	r1, r2
    5b74:	f7ff ffa8 	bl	5ac8 <NVData_class::_createSettingsFile(unsigned short)>
    5b78:	2800      	cmp	r0, #0
    5b7a:	d0e4      	beq.n	5b46 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x1a>
    5b7c:	2103      	movs	r1, #3
    5b7e:	4805      	ldr	r0, [pc, #20]	; (5b94 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x68>)
    5b80:	f003 fdc8 	bl	9714 <usb_serial_write>
    5b84:	4804      	ldr	r0, [pc, #16]	; (5b98 <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0x6c>)
    5b86:	f004 f803 	bl	9b90 <Print::println()>
    5b8a:	e7d6      	b.n	5b3a <NVData_class::begin(NVData_class::Device, unsigned short, unsigned char)+0xe>
    5b8c:	1fff9330 	.word	0x1fff9330
    5b90:	000107dc 	.word	0x000107dc
    5b94:	00010698 	.word	0x00010698
    5b98:	1fff876c 	.word	0x1fff876c

00005b9c <PIO::_byteWrite(unsigned char, unsigned char)>:
	_wordWrite(IODIRA, pinsConfig); // pins direction configuration
	mcpWrite(0); // resets MCP outputs
}

// GENERIC BYTE WRITE - will write a byte to a register, arguments are register address and the value to write
void PIO::_byteWrite(uint8_t reg, uint8_t value) {      // Accept the register and byte
    5b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    5b9e:	4c3a      	ldr	r4, [pc, #232]	; (5c88 <PIO::_byteWrite(unsigned char, unsigned char)+0xec>)
    5ba0:	4605      	mov	r5, r0
    5ba2:	7ae3      	ldrb	r3, [r4, #11]
    5ba4:	6800      	ldr	r0, [r0, #0]
    5ba6:	460f      	mov	r7, r1
    5ba8:	6800      	ldr	r0, [r0, #0]
    5baa:	4616      	mov	r6, r2
    5bac:	b1eb      	cbz	r3, 5bea <PIO::_byteWrite(unsigned char, unsigned char)+0x4e>
			__disable_irq();
    5bae:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    5bb0:	7ae3      	ldrb	r3, [r4, #11]
    5bb2:	07d9      	lsls	r1, r3, #31
    5bb4:	461a      	mov	r2, r3
    5bb6:	d509      	bpl.n	5bcc <PIO::_byteWrite(unsigned char, unsigned char)+0x30>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5bb8:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 5ca4 <PIO::_byteWrite(unsigned char, unsigned char)+0x108>
    5bbc:	68e1      	ldr	r1, [r4, #12]
    5bbe:	f8de 2000 	ldr.w	r2, [lr]
    5bc2:	400a      	ands	r2, r1
    5bc4:	61a2      	str	r2, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    5bc6:	f8ce 2000 	str.w	r2, [lr]
    5bca:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5bcc:	0799      	lsls	r1, r3, #30
    5bce:	d509      	bpl.n	5be4 <PIO::_byteWrite(unsigned char, unsigned char)+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    5bd0:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 5ca8 <PIO::_byteWrite(unsigned char, unsigned char)+0x10c>
    5bd4:	6921      	ldr	r1, [r4, #16]
    5bd6:	f8de 3000 	ldr.w	r3, [lr]
    5bda:	7ae2      	ldrb	r2, [r4, #11]
    5bdc:	400b      	ands	r3, r1
    5bde:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    5be0:	f8ce 3000 	str.w	r3, [lr]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5be4:	0753      	lsls	r3, r2, #29
    5be6:	d448      	bmi.n	5c7a <PIO::_byteWrite(unsigned char, unsigned char)+0xde>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    5be8:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5bea:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    5bec:	68da      	ldr	r2, [r3, #12]
    5bee:	4282      	cmp	r2, r0
    5bf0:	d007      	beq.n	5c02 <PIO::_byteWrite(unsigned char, unsigned char)+0x66>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    5bf2:	4926      	ldr	r1, [pc, #152]	; (5c8c <PIO::_byteWrite(unsigned char, unsigned char)+0xf0>)
    5bf4:	6019      	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5bf6:	4a26      	ldr	r2, [pc, #152]	; (5c90 <PIO::_byteWrite(unsigned char, unsigned char)+0xf4>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    5bf8:	60d8      	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    5bfa:	f040 4180 	orr.w	r1, r0, #1073741824	; 0x40000000
    5bfe:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5c00:	601a      	str	r2, [r3, #0]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
    5c02:	2100      	movs	r1, #0
    5c04:	7928      	ldrb	r0, [r5, #4]
    5c06:	f002 fd2d 	bl	8664 <digitalWrite>
}

// GENERIC BYTE WRITE - will write a byte to a register, arguments are register address and the value to write
void PIO::_byteWrite(uint8_t reg, uint8_t value) {      // Accept the register and byte
	_SPIstart();                                 // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
    5c0a:	7969      	ldrb	r1, [r5, #5]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5c0c:	6823      	ldr	r3, [r4, #0]
    5c0e:	0049      	lsls	r1, r1, #1
    5c10:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    5c14:	b2c9      	uxtb	r1, r1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5c16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c1a:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5c1c:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5c1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5c20:	2900      	cmp	r1, #0
    5c22:	dafc      	bge.n	5c1e <PIO::_byteWrite(unsigned char, unsigned char)+0x82>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5c28:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5c2a:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5c2c:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5c30:	2900      	cmp	r1, #0
    5c32:	dafc      	bge.n	5c2e <PIO::_byteWrite(unsigned char, unsigned char)+0x92>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5c34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5c38:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5c3a:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5c3c:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c40:	2a00      	cmp	r2, #0
    5c42:	dafc      	bge.n	5c3e <PIO::_byteWrite(unsigned char, unsigned char)+0xa2>
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
}

inline void PIO::_SPIstop() {
	digitalWrite(_ss_pin, HIGH); 
    5c44:	2101      	movs	r1, #1
    5c46:	7928      	ldrb	r0, [r5, #4]
		return port().POPR;
    5c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5c4a:	f002 fd0b 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    5c4e:	7ae3      	ldrb	r3, [r4, #11]
    5c50:	490d      	ldr	r1, [pc, #52]	; (5c88 <PIO::_byteWrite(unsigned char, unsigned char)+0xec>)
    5c52:	461a      	mov	r2, r3
    5c54:	b183      	cbz	r3, 5c78 <PIO::_byteWrite(unsigned char, unsigned char)+0xdc>
			if (interruptMasksUsed & 0x01) {
    5c56:	07d8      	lsls	r0, r3, #31
    5c58:	d503      	bpl.n	5c62 <PIO::_byteWrite(unsigned char, unsigned char)+0xc6>
				NVIC_ISER0 = interruptSave[0];
    5c5a:	4a0e      	ldr	r2, [pc, #56]	; (5c94 <PIO::_byteWrite(unsigned char, unsigned char)+0xf8>)
    5c5c:	6989      	ldr	r1, [r1, #24]
    5c5e:	6011      	str	r1, [r2, #0]
    5c60:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5c62:	0799      	lsls	r1, r3, #30
    5c64:	d503      	bpl.n	5c6e <PIO::_byteWrite(unsigned char, unsigned char)+0xd2>
				NVIC_ISER1 = interruptSave[1];
    5c66:	4b0c      	ldr	r3, [pc, #48]	; (5c98 <PIO::_byteWrite(unsigned char, unsigned char)+0xfc>)
    5c68:	69e1      	ldr	r1, [r4, #28]
    5c6a:	7ae2      	ldrb	r2, [r4, #11]
    5c6c:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5c6e:	0753      	lsls	r3, r2, #29
    5c70:	d502      	bpl.n	5c78 <PIO::_byteWrite(unsigned char, unsigned char)+0xdc>
				NVIC_ISER2 = interruptSave[2];
    5c72:	4b0a      	ldr	r3, [pc, #40]	; (5c9c <PIO::_byteWrite(unsigned char, unsigned char)+0x100>)
    5c74:	6a22      	ldr	r2, [r4, #32]
    5c76:	601a      	str	r2, [r3, #0]
    5c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5c7a:	4a09      	ldr	r2, [pc, #36]	; (5ca0 <PIO::_byteWrite(unsigned char, unsigned char)+0x104>)
    5c7c:	6963      	ldr	r3, [r4, #20]
    5c7e:	6811      	ldr	r1, [r2, #0]
    5c80:	400b      	ands	r3, r1
    5c82:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    5c84:	6013      	str	r3, [r2, #0]
    5c86:	e7af      	b.n	5be8 <PIO::_byteWrite(unsigned char, unsigned char)+0x4c>
    5c88:	1fff8728 	.word	0x1fff8728
    5c8c:	003f4001 	.word	0x003f4001
    5c90:	803f0000 	.word	0x803f0000
    5c94:	e000e100 	.word	0xe000e100
    5c98:	e000e104 	.word	0xe000e104
    5c9c:	e000e108 	.word	0xe000e108
    5ca0:	e000e188 	.word	0xe000e188
    5ca4:	e000e180 	.word	0xe000e180
    5ca8:	e000e184 	.word	0xe000e184

00005cac <PIO::_wordWrite(unsigned char, unsigned short)>:
	SPI.transfer(value);                                 // Send the byte
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

// GENERIC WORD WRITE - will write a word to a register pair, LSB to first register, MSB to next higher value register
void PIO::_wordWrite(uint8_t reg, uint16_t value) {  // Accept the start register and word
    5cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    5cae:	4c3f      	ldr	r4, [pc, #252]	; (5dac <PIO::_wordWrite(unsigned char, unsigned short)+0x100>)
    5cb0:	4605      	mov	r5, r0
    5cb2:	7ae3      	ldrb	r3, [r4, #11]
    5cb4:	6800      	ldr	r0, [r0, #0]
    5cb6:	460f      	mov	r7, r1
    5cb8:	6800      	ldr	r0, [r0, #0]
    5cba:	4616      	mov	r6, r2
    5cbc:	b1eb      	cbz	r3, 5cfa <PIO::_wordWrite(unsigned char, unsigned short)+0x4e>
			__disable_irq();
    5cbe:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    5cc0:	7ae3      	ldrb	r3, [r4, #11]
    5cc2:	07d9      	lsls	r1, r3, #31
    5cc4:	461a      	mov	r2, r3
    5cc6:	d509      	bpl.n	5cdc <PIO::_wordWrite(unsigned char, unsigned short)+0x30>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5cc8:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 5dc8 <PIO::_wordWrite(unsigned char, unsigned short)+0x11c>
    5ccc:	68e1      	ldr	r1, [r4, #12]
    5cce:	f8de 2000 	ldr.w	r2, [lr]
    5cd2:	400a      	ands	r2, r1
    5cd4:	61a2      	str	r2, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    5cd6:	f8ce 2000 	str.w	r2, [lr]
    5cda:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5cdc:	0799      	lsls	r1, r3, #30
    5cde:	d509      	bpl.n	5cf4 <PIO::_wordWrite(unsigned char, unsigned short)+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    5ce0:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 5dcc <PIO::_wordWrite(unsigned char, unsigned short)+0x120>
    5ce4:	6921      	ldr	r1, [r4, #16]
    5ce6:	f8de 3000 	ldr.w	r3, [lr]
    5cea:	7ae2      	ldrb	r2, [r4, #11]
    5cec:	400b      	ands	r3, r1
    5cee:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    5cf0:	f8ce 3000 	str.w	r3, [lr]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5cf4:	0753      	lsls	r3, r2, #29
    5cf6:	d452      	bmi.n	5d9e <PIO::_wordWrite(unsigned char, unsigned short)+0xf2>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    5cf8:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5cfa:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    5cfc:	68da      	ldr	r2, [r3, #12]
    5cfe:	4282      	cmp	r2, r0
    5d00:	d007      	beq.n	5d12 <PIO::_wordWrite(unsigned char, unsigned short)+0x66>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    5d02:	492b      	ldr	r1, [pc, #172]	; (5db0 <PIO::_wordWrite(unsigned char, unsigned short)+0x104>)
    5d04:	6019      	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5d06:	4a2b      	ldr	r2, [pc, #172]	; (5db4 <PIO::_wordWrite(unsigned char, unsigned short)+0x108>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    5d08:	60d8      	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    5d0a:	f040 4180 	orr.w	r1, r0, #1073741824	; 0x40000000
    5d0e:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5d10:	601a      	str	r2, [r3, #0]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
    5d12:	2100      	movs	r1, #0
    5d14:	7928      	ldrb	r0, [r5, #4]
    5d16:	f002 fca5 	bl	8664 <digitalWrite>
}

// GENERIC WORD WRITE - will write a word to a register pair, LSB to first register, MSB to next higher value register
void PIO::_wordWrite(uint8_t reg, uint16_t value) {  // Accept the start register and word
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
    5d1a:	7969      	ldrb	r1, [r5, #5]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5d1c:	6823      	ldr	r3, [r4, #0]
    5d1e:	0049      	lsls	r1, r1, #1
    5d20:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    5d24:	b2c9      	uxtb	r1, r1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5d2a:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5d2c:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5d30:	2900      	cmp	r1, #0
    5d32:	dafc      	bge.n	5d2e <PIO::_wordWrite(unsigned char, unsigned short)+0x82>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5d38:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d3a:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5d3c:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5d40:	2900      	cmp	r1, #0
    5d42:	dafc      	bge.n	5d3e <PIO::_wordWrite(unsigned char, unsigned short)+0x92>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d44:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    5d48:	b2f2      	uxtb	r2, r6
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5d4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d4c:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5d4e:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5d52:	2900      	cmp	r1, #0
    5d54:	dafc      	bge.n	5d50 <PIO::_wordWrite(unsigned char, unsigned short)+0xa4>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    5d56:	1236      	asrs	r6, r6, #8
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5d5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5d5e:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5d60:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5d64:	2a00      	cmp	r2, #0
    5d66:	dafc      	bge.n	5d62 <PIO::_wordWrite(unsigned char, unsigned short)+0xb6>
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
}

inline void PIO::_SPIstop() {
	digitalWrite(_ss_pin, HIGH); 
    5d68:	2101      	movs	r1, #1
    5d6a:	7928      	ldrb	r0, [r5, #4]
		return port().POPR;
    5d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5d6e:	f002 fc79 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    5d72:	7ae3      	ldrb	r3, [r4, #11]
    5d74:	490d      	ldr	r1, [pc, #52]	; (5dac <PIO::_wordWrite(unsigned char, unsigned short)+0x100>)
    5d76:	461a      	mov	r2, r3
    5d78:	b183      	cbz	r3, 5d9c <PIO::_wordWrite(unsigned char, unsigned short)+0xf0>
			if (interruptMasksUsed & 0x01) {
    5d7a:	07d8      	lsls	r0, r3, #31
    5d7c:	d503      	bpl.n	5d86 <PIO::_wordWrite(unsigned char, unsigned short)+0xda>
				NVIC_ISER0 = interruptSave[0];
    5d7e:	4a0e      	ldr	r2, [pc, #56]	; (5db8 <PIO::_wordWrite(unsigned char, unsigned short)+0x10c>)
    5d80:	6989      	ldr	r1, [r1, #24]
    5d82:	6011      	str	r1, [r2, #0]
    5d84:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5d86:	0799      	lsls	r1, r3, #30
    5d88:	d503      	bpl.n	5d92 <PIO::_wordWrite(unsigned char, unsigned short)+0xe6>
				NVIC_ISER1 = interruptSave[1];
    5d8a:	4b0c      	ldr	r3, [pc, #48]	; (5dbc <PIO::_wordWrite(unsigned char, unsigned short)+0x110>)
    5d8c:	69e1      	ldr	r1, [r4, #28]
    5d8e:	7ae2      	ldrb	r2, [r4, #11]
    5d90:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5d92:	0753      	lsls	r3, r2, #29
    5d94:	d502      	bpl.n	5d9c <PIO::_wordWrite(unsigned char, unsigned short)+0xf0>
				NVIC_ISER2 = interruptSave[2];
    5d96:	4b0a      	ldr	r3, [pc, #40]	; (5dc0 <PIO::_wordWrite(unsigned char, unsigned short)+0x114>)
    5d98:	6a22      	ldr	r2, [r4, #32]
    5d9a:	601a      	str	r2, [r3, #0]
    5d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5d9e:	4a09      	ldr	r2, [pc, #36]	; (5dc4 <PIO::_wordWrite(unsigned char, unsigned short)+0x118>)
    5da0:	6963      	ldr	r3, [r4, #20]
    5da2:	6811      	ldr	r1, [r2, #0]
    5da4:	400b      	ands	r3, r1
    5da6:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    5da8:	6013      	str	r3, [r2, #0]
    5daa:	e7a5      	b.n	5cf8 <PIO::_wordWrite(unsigned char, unsigned short)+0x4c>
    5dac:	1fff8728 	.word	0x1fff8728
    5db0:	003f4001 	.word	0x003f4001
    5db4:	803f0000 	.word	0x803f0000
    5db8:	e000e100 	.word	0xe000e100
    5dbc:	e000e104 	.word	0xe000e104
    5dc0:	e000e108 	.word	0xe000e108
    5dc4:	e000e188 	.word	0xe000e188
    5dc8:	e000e180 	.word	0xe000e180
    5dcc:	e000e184 	.word	0xe000e184

00005dd0 <PIO::mcpReadPB()>:
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
}

byte PIO::mcpReadPB() {       // This function will read 8 bits of I/O
    5dd0:	b570      	push	{r4, r5, r6, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    5dd2:	4c38      	ldr	r4, [pc, #224]	; (5eb4 <PIO::mcpReadPB()+0xe4>)
    5dd4:	6802      	ldr	r2, [r0, #0]
    5dd6:	7ae3      	ldrb	r3, [r4, #11]
    5dd8:	6812      	ldr	r2, [r2, #0]
    5dda:	4605      	mov	r5, r0
    5ddc:	b1bb      	cbz	r3, 5e0e <PIO::mcpReadPB()+0x3e>
			__disable_irq();
    5dde:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    5de0:	7ae3      	ldrb	r3, [r4, #11]
    5de2:	07d8      	lsls	r0, r3, #31
    5de4:	4619      	mov	r1, r3
    5de6:	d506      	bpl.n	5df6 <PIO::mcpReadPB()+0x26>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5de8:	4833      	ldr	r0, [pc, #204]	; (5eb8 <PIO::mcpReadPB()+0xe8>)
    5dea:	68e1      	ldr	r1, [r4, #12]
    5dec:	6806      	ldr	r6, [r0, #0]
    5dee:	4031      	ands	r1, r6
    5df0:	61a1      	str	r1, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    5df2:	6001      	str	r1, [r0, #0]
    5df4:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5df6:	079b      	lsls	r3, r3, #30
    5df8:	d506      	bpl.n	5e08 <PIO::mcpReadPB()+0x38>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    5dfa:	4830      	ldr	r0, [pc, #192]	; (5ebc <PIO::mcpReadPB()+0xec>)
    5dfc:	6923      	ldr	r3, [r4, #16]
    5dfe:	6806      	ldr	r6, [r0, #0]
    5e00:	7ae1      	ldrb	r1, [r4, #11]
    5e02:	4033      	ands	r3, r6
    5e04:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    5e06:	6003      	str	r3, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5e08:	074e      	lsls	r6, r1, #29
    5e0a:	d44c      	bmi.n	5ea6 <PIO::mcpReadPB()+0xd6>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    5e0c:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5e0e:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    5e10:	68d9      	ldr	r1, [r3, #12]
    5e12:	4291      	cmp	r1, r2
    5e14:	d007      	beq.n	5e26 <PIO::mcpReadPB()+0x56>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    5e16:	482a      	ldr	r0, [pc, #168]	; (5ec0 <PIO::mcpReadPB()+0xf0>)
    5e18:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5e1a:	492a      	ldr	r1, [pc, #168]	; (5ec4 <PIO::mcpReadPB()+0xf4>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    5e1c:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    5e1e:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    5e22:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5e24:	6019      	str	r1, [r3, #0]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
    5e26:	2100      	movs	r1, #0
    5e28:	7928      	ldrb	r0, [r5, #4]
    5e2a:	f002 fc1b 	bl	8664 <digitalWrite>
}

byte PIO::mcpReadPB() {       // This function will read 8 bits of I/O
	byte value = 0;                   // Initialize a variable to hold the read values to be returned
	_SPIstart();                      // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));  // Send the MCP23S17 opcode, chip address, and write bit
    5e2e:	796a      	ldrb	r2, [r5, #5]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5e30:	6823      	ldr	r3, [r4, #0]
    5e32:	0052      	lsls	r2, r2, #1
    5e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5e38:	b2d2      	uxtb	r2, r2
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5e3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5e3e:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5e40:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e44:	2a00      	cmp	r2, #0
    5e46:	dafc      	bge.n	5e42 <PIO::mcpReadPB()+0x72>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5e48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    5e4c:	2213      	movs	r2, #19
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5e4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5e50:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5e52:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e56:	2a00      	cmp	r2, #0
    5e58:	dafc      	bge.n	5e54 <PIO::mcpReadPB()+0x84>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5e5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    5e5e:	2200      	movs	r2, #0
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5e60:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5e62:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5e64:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e68:	2a00      	cmp	r2, #0
    5e6a:	dafc      	bge.n	5e66 <PIO::mcpReadPB()+0x96>
		return port().POPR;
    5e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
}

inline void PIO::_SPIstop() {
	digitalWrite(_ss_pin, HIGH); 
    5e6e:	7928      	ldrb	r0, [r5, #4]
    5e70:	2101      	movs	r1, #1
    5e72:	b2dd      	uxtb	r5, r3
    5e74:	f002 fbf6 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    5e78:	7ae3      	ldrb	r3, [r4, #11]
    5e7a:	490e      	ldr	r1, [pc, #56]	; (5eb4 <PIO::mcpReadPB()+0xe4>)
    5e7c:	461a      	mov	r2, r3
    5e7e:	b183      	cbz	r3, 5ea2 <PIO::mcpReadPB()+0xd2>
			if (interruptMasksUsed & 0x01) {
    5e80:	07d8      	lsls	r0, r3, #31
    5e82:	d503      	bpl.n	5e8c <PIO::mcpReadPB()+0xbc>
				NVIC_ISER0 = interruptSave[0];
    5e84:	4a10      	ldr	r2, [pc, #64]	; (5ec8 <PIO::mcpReadPB()+0xf8>)
    5e86:	6989      	ldr	r1, [r1, #24]
    5e88:	6011      	str	r1, [r2, #0]
    5e8a:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5e8c:	0799      	lsls	r1, r3, #30
    5e8e:	d503      	bpl.n	5e98 <PIO::mcpReadPB()+0xc8>
				NVIC_ISER1 = interruptSave[1];
    5e90:	4b0e      	ldr	r3, [pc, #56]	; (5ecc <PIO::mcpReadPB()+0xfc>)
    5e92:	69e1      	ldr	r1, [r4, #28]
    5e94:	7ae2      	ldrb	r2, [r4, #11]
    5e96:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5e98:	0753      	lsls	r3, r2, #29
    5e9a:	d502      	bpl.n	5ea2 <PIO::mcpReadPB()+0xd2>
				NVIC_ISER2 = interruptSave[2];
    5e9c:	4b0c      	ldr	r3, [pc, #48]	; (5ed0 <PIO::mcpReadPB()+0x100>)
    5e9e:	6a22      	ldr	r2, [r4, #32]
    5ea0:	601a      	str	r2, [r3, #0]
	SPI.transfer(OPCODEW | (_adr << 1));  // Send the MCP23S17 opcode, chip address, and write bit
	SPI.transfer(GPIOB);                      // Send the register we want to read
	value = SPI.transfer(0x00);               // Send any byte, the function will return the read value (register address pointer will auto-increment after write)
	_SPIstop();                     // Slave Select HIGH after SPI action
	return value;                             // Return the byte
}
    5ea2:	4628      	mov	r0, r5
    5ea4:	bd70      	pop	{r4, r5, r6, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5ea6:	490b      	ldr	r1, [pc, #44]	; (5ed4 <PIO::mcpReadPB()+0x104>)
    5ea8:	6963      	ldr	r3, [r4, #20]
    5eaa:	6808      	ldr	r0, [r1, #0]
    5eac:	4003      	ands	r3, r0
    5eae:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    5eb0:	600b      	str	r3, [r1, #0]
    5eb2:	e7ab      	b.n	5e0c <PIO::mcpReadPB()+0x3c>
    5eb4:	1fff8728 	.word	0x1fff8728
    5eb8:	e000e180 	.word	0xe000e180
    5ebc:	e000e184 	.word	0xe000e184
    5ec0:	003f4001 	.word	0x003f4001
    5ec4:	803f0000 	.word	0x803f0000
    5ec8:	e000e100 	.word	0xe000e100
    5ecc:	e000e104 	.word	0xe000e104
    5ed0:	e000e108 	.word	0xe000e108
    5ed4:	e000e188 	.word	0xe000e188

00005ed8 <PIO::mcpWrite(unsigned short)>:

void PIO::mcpWrite(uint16_t value) {
    5ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    5eda:	4c3c      	ldr	r4, [pc, #240]	; (5fcc <PIO::mcpWrite(unsigned short)+0xf4>)
    5edc:	6802      	ldr	r2, [r0, #0]
    5ede:	7ae3      	ldrb	r3, [r4, #11]
    5ee0:	6812      	ldr	r2, [r2, #0]
    5ee2:	4605      	mov	r5, r0
    5ee4:	460e      	mov	r6, r1
    5ee6:	b1bb      	cbz	r3, 5f18 <PIO::mcpWrite(unsigned short)+0x40>
			__disable_irq();
    5ee8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    5eea:	7ae3      	ldrb	r3, [r4, #11]
    5eec:	07d8      	lsls	r0, r3, #31
    5eee:	4619      	mov	r1, r3
    5ef0:	d506      	bpl.n	5f00 <PIO::mcpWrite(unsigned short)+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5ef2:	4837      	ldr	r0, [pc, #220]	; (5fd0 <PIO::mcpWrite(unsigned short)+0xf8>)
    5ef4:	68e1      	ldr	r1, [r4, #12]
    5ef6:	6807      	ldr	r7, [r0, #0]
    5ef8:	4039      	ands	r1, r7
    5efa:	61a1      	str	r1, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    5efc:	6001      	str	r1, [r0, #0]
    5efe:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5f00:	079b      	lsls	r3, r3, #30
    5f02:	d506      	bpl.n	5f12 <PIO::mcpWrite(unsigned short)+0x3a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    5f04:	4833      	ldr	r0, [pc, #204]	; (5fd4 <PIO::mcpWrite(unsigned short)+0xfc>)
    5f06:	6923      	ldr	r3, [r4, #16]
    5f08:	6807      	ldr	r7, [r0, #0]
    5f0a:	7ae1      	ldrb	r1, [r4, #11]
    5f0c:	403b      	ands	r3, r7
    5f0e:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    5f10:	6003      	str	r3, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5f12:	074f      	lsls	r7, r1, #29
    5f14:	d453      	bmi.n	5fbe <PIO::mcpWrite(unsigned short)+0xe6>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    5f16:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5f18:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    5f1a:	68d9      	ldr	r1, [r3, #12]
    5f1c:	4291      	cmp	r1, r2
    5f1e:	d007      	beq.n	5f30 <PIO::mcpWrite(unsigned short)+0x58>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    5f20:	482d      	ldr	r0, [pc, #180]	; (5fd8 <PIO::mcpWrite(unsigned short)+0x100>)
    5f22:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5f24:	492d      	ldr	r1, [pc, #180]	; (5fdc <PIO::mcpWrite(unsigned short)+0x104>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    5f26:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    5f28:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    5f2c:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5f2e:	6019      	str	r1, [r3, #0]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
    5f30:	2100      	movs	r1, #0
    5f32:	7928      	ldrb	r0, [r5, #4]
    5f34:	f002 fb96 	bl	8664 <digitalWrite>
	return value;                             // Return the byte
}

void PIO::mcpWrite(uint16_t value) {
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
    5f38:	796a      	ldrb	r2, [r5, #5]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5f3a:	6823      	ldr	r3, [r4, #0]
    5f3c:	0052      	lsls	r2, r2, #1
    5f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5f42:	b2d2      	uxtb	r2, r2
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f44:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5f48:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5f4a:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5f4e:	2a00      	cmp	r2, #0
    5f50:	dafc      	bge.n	5f4c <PIO::mcpWrite(unsigned short)+0x74>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    5f56:	2212      	movs	r2, #18
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5f58:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f5a:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5f5c:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5f60:	2a00      	cmp	r2, #0
    5f62:	dafc      	bge.n	5f5e <PIO::mcpWrite(unsigned short)+0x86>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f64:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    5f68:	b2f2      	uxtb	r2, r6
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5f6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f6c:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5f6e:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5f72:	2a00      	cmp	r2, #0
    5f74:	dafc      	bge.n	5f70 <PIO::mcpWrite(unsigned short)+0x98>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    5f76:	1236      	asrs	r6, r6, #8
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    5f7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5f7e:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    5f80:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5f84:	2a00      	cmp	r2, #0
    5f86:	dafc      	bge.n	5f82 <PIO::mcpWrite(unsigned short)+0xaa>
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
}

inline void PIO::_SPIstop() {
	digitalWrite(_ss_pin, HIGH); 
    5f88:	2101      	movs	r1, #1
    5f8a:	7928      	ldrb	r0, [r5, #4]
		return port().POPR;
    5f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5f8e:	f002 fb69 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    5f92:	7ae3      	ldrb	r3, [r4, #11]
    5f94:	490d      	ldr	r1, [pc, #52]	; (5fcc <PIO::mcpWrite(unsigned short)+0xf4>)
    5f96:	461a      	mov	r2, r3
    5f98:	b183      	cbz	r3, 5fbc <PIO::mcpWrite(unsigned short)+0xe4>
			if (interruptMasksUsed & 0x01) {
    5f9a:	07d8      	lsls	r0, r3, #31
    5f9c:	d503      	bpl.n	5fa6 <PIO::mcpWrite(unsigned short)+0xce>
				NVIC_ISER0 = interruptSave[0];
    5f9e:	4a10      	ldr	r2, [pc, #64]	; (5fe0 <PIO::mcpWrite(unsigned short)+0x108>)
    5fa0:	6989      	ldr	r1, [r1, #24]
    5fa2:	6011      	str	r1, [r2, #0]
    5fa4:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    5fa6:	0799      	lsls	r1, r3, #30
    5fa8:	d503      	bpl.n	5fb2 <PIO::mcpWrite(unsigned short)+0xda>
				NVIC_ISER1 = interruptSave[1];
    5faa:	4b0e      	ldr	r3, [pc, #56]	; (5fe4 <PIO::mcpWrite(unsigned short)+0x10c>)
    5fac:	69e1      	ldr	r1, [r4, #28]
    5fae:	7ae2      	ldrb	r2, [r4, #11]
    5fb0:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    5fb2:	0753      	lsls	r3, r2, #29
    5fb4:	d502      	bpl.n	5fbc <PIO::mcpWrite(unsigned short)+0xe4>
				NVIC_ISER2 = interruptSave[2];
    5fb6:	4b0c      	ldr	r3, [pc, #48]	; (5fe8 <PIO::mcpWrite(unsigned short)+0x110>)
    5fb8:	6a22      	ldr	r2, [r4, #32]
    5fba:	601a      	str	r2, [r3, #0]
    5fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5fbe:	490b      	ldr	r1, [pc, #44]	; (5fec <PIO::mcpWrite(unsigned short)+0x114>)
    5fc0:	6963      	ldr	r3, [r4, #20]
    5fc2:	6808      	ldr	r0, [r1, #0]
    5fc4:	4003      	ands	r3, r0
    5fc6:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    5fc8:	600b      	str	r3, [r1, #0]
    5fca:	e7a4      	b.n	5f16 <PIO::mcpWrite(unsigned short)+0x3e>
    5fcc:	1fff8728 	.word	0x1fff8728
    5fd0:	e000e180 	.word	0xe000e180
    5fd4:	e000e184 	.word	0xe000e184
    5fd8:	003f4001 	.word	0x003f4001
    5fdc:	803f0000 	.word	0x803f0000
    5fe0:	e000e100 	.word	0xe000e100
    5fe4:	e000e104 	.word	0xe000e104
    5fe8:	e000e108 	.word	0xe000e108
    5fec:	e000e188 	.word	0xe000e188

00005ff0 <PIO::PIO(SPISettings*, unsigned char, unsigned char, unsigned short)>:
*/

#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
    5ff0:	b538      	push	{r3, r4, r5, lr}
    5ff2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	_spis = ss;
	_ss_pin = ss_pin;
	_adr = address;
    5ff6:	7143      	strb	r3, [r0, #5]
*/

#include "PIO.h"
#include <SPI.h>

PIO::PIO(SPISettings* ss, uint8_t ss_pin, uint8_t address, uint16_t pinsConfig) {
    5ff8:	4604      	mov	r4, r0
	_spis = ss;
    5ffa:	6001      	str	r1, [r0, #0]
	_ss_pin = ss_pin;
    5ffc:	7102      	strb	r2, [r0, #4]
	_adr = address;
	_byteWrite(IOCON, ADDR_ENABLE);
    5ffe:	210a      	movs	r1, #10
    6000:	2208      	movs	r2, #8
    6002:	f7ff fdcb 	bl	5b9c <PIO::_byteWrite(unsigned char, unsigned char)>
	_wordWrite(IODIRA, pinsConfig); // pins direction configuration
    6006:	462a      	mov	r2, r5
    6008:	4620      	mov	r0, r4
    600a:	2100      	movs	r1, #0
    600c:	f7ff fe4e 	bl	5cac <PIO::_wordWrite(unsigned char, unsigned short)>
	mcpWrite(0); // resets MCP outputs
    6010:	4620      	mov	r0, r4
    6012:	2100      	movs	r1, #0
    6014:	f7ff ff60 	bl	5ed8 <PIO::mcpWrite(unsigned short)>
}
    6018:	4620      	mov	r0, r4
    601a:	bd38      	pop	{r3, r4, r5, pc}

0000601c <PIO::mcpWritePA(unsigned char)>:
	SPI.transfer((uint8_t)(value & 0xff));                      // Send the low byte (register address pointer will auto-increment after write)
	SPI.transfer((uint8_t)(value >> 8));                 // Shift the high byte down to the low byte location and send
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePA(uint8_t value) {
    601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    601e:	4c37      	ldr	r4, [pc, #220]	; (60fc <PIO::mcpWritePA(unsigned char)+0xe0>)
    6020:	6802      	ldr	r2, [r0, #0]
    6022:	7ae3      	ldrb	r3, [r4, #11]
    6024:	6812      	ldr	r2, [r2, #0]
    6026:	4605      	mov	r5, r0
    6028:	460e      	mov	r6, r1
    602a:	b1bb      	cbz	r3, 605c <PIO::mcpWritePA(unsigned char)+0x40>
			__disable_irq();
    602c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    602e:	7ae3      	ldrb	r3, [r4, #11]
    6030:	07d8      	lsls	r0, r3, #31
    6032:	4619      	mov	r1, r3
    6034:	d506      	bpl.n	6044 <PIO::mcpWritePA(unsigned char)+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6036:	4832      	ldr	r0, [pc, #200]	; (6100 <PIO::mcpWritePA(unsigned char)+0xe4>)
    6038:	68e1      	ldr	r1, [r4, #12]
    603a:	6807      	ldr	r7, [r0, #0]
    603c:	4039      	ands	r1, r7
    603e:	61a1      	str	r1, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    6040:	6001      	str	r1, [r0, #0]
    6042:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    6044:	079b      	lsls	r3, r3, #30
    6046:	d506      	bpl.n	6056 <PIO::mcpWritePA(unsigned char)+0x3a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6048:	482e      	ldr	r0, [pc, #184]	; (6104 <PIO::mcpWritePA(unsigned char)+0xe8>)
    604a:	6923      	ldr	r3, [r4, #16]
    604c:	6807      	ldr	r7, [r0, #0]
    604e:	7ae1      	ldrb	r1, [r4, #11]
    6050:	403b      	ands	r3, r7
    6052:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    6054:	6003      	str	r3, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    6056:	074f      	lsls	r7, r1, #29
    6058:	d449      	bmi.n	60ee <PIO::mcpWritePA(unsigned char)+0xd2>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    605a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    605c:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    605e:	68d9      	ldr	r1, [r3, #12]
    6060:	4291      	cmp	r1, r2
    6062:	d007      	beq.n	6074 <PIO::mcpWritePA(unsigned char)+0x58>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    6064:	4828      	ldr	r0, [pc, #160]	; (6108 <PIO::mcpWritePA(unsigned char)+0xec>)
    6066:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    6068:	4928      	ldr	r1, [pc, #160]	; (610c <PIO::mcpWritePA(unsigned char)+0xf0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    606a:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    606c:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    6070:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    6072:	6019      	str	r1, [r3, #0]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
    6074:	2100      	movs	r1, #0
    6076:	7928      	ldrb	r0, [r5, #4]
    6078:	f002 faf4 	bl	8664 <digitalWrite>
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePA(uint8_t value) {
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
    607c:	796a      	ldrb	r2, [r5, #5]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    607e:	6823      	ldr	r3, [r4, #0]
    6080:	0052      	lsls	r2, r2, #1
    6082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    6086:	b2d2      	uxtb	r2, r2
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    6088:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    608c:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    608e:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    6090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6092:	2a00      	cmp	r2, #0
    6094:	dafc      	bge.n	6090 <PIO::mcpWritePA(unsigned char)+0x74>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    6096:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    609a:	2212      	movs	r2, #18
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    609c:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    609e:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    60a0:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    60a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    60a4:	2a00      	cmp	r2, #0
    60a6:	dafc      	bge.n	60a2 <PIO::mcpWritePA(unsigned char)+0x86>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    60a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    60ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    60ae:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    60b0:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    60b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    60b4:	2a00      	cmp	r2, #0
    60b6:	dafc      	bge.n	60b2 <PIO::mcpWritePA(unsigned char)+0x96>
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
}

inline void PIO::_SPIstop() {
	digitalWrite(_ss_pin, HIGH); 
    60b8:	2101      	movs	r1, #1
    60ba:	7928      	ldrb	r0, [r5, #4]
		return port().POPR;
    60bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    60be:	f002 fad1 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    60c2:	7ae3      	ldrb	r3, [r4, #11]
    60c4:	490d      	ldr	r1, [pc, #52]	; (60fc <PIO::mcpWritePA(unsigned char)+0xe0>)
    60c6:	461a      	mov	r2, r3
    60c8:	b183      	cbz	r3, 60ec <PIO::mcpWritePA(unsigned char)+0xd0>
			if (interruptMasksUsed & 0x01) {
    60ca:	07d8      	lsls	r0, r3, #31
    60cc:	d503      	bpl.n	60d6 <PIO::mcpWritePA(unsigned char)+0xba>
				NVIC_ISER0 = interruptSave[0];
    60ce:	4a10      	ldr	r2, [pc, #64]	; (6110 <PIO::mcpWritePA(unsigned char)+0xf4>)
    60d0:	6989      	ldr	r1, [r1, #24]
    60d2:	6011      	str	r1, [r2, #0]
    60d4:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    60d6:	0799      	lsls	r1, r3, #30
    60d8:	d503      	bpl.n	60e2 <PIO::mcpWritePA(unsigned char)+0xc6>
				NVIC_ISER1 = interruptSave[1];
    60da:	4b0e      	ldr	r3, [pc, #56]	; (6114 <PIO::mcpWritePA(unsigned char)+0xf8>)
    60dc:	69e1      	ldr	r1, [r4, #28]
    60de:	7ae2      	ldrb	r2, [r4, #11]
    60e0:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    60e2:	0753      	lsls	r3, r2, #29
    60e4:	d502      	bpl.n	60ec <PIO::mcpWritePA(unsigned char)+0xd0>
				NVIC_ISER2 = interruptSave[2];
    60e6:	4b0c      	ldr	r3, [pc, #48]	; (6118 <PIO::mcpWritePA(unsigned char)+0xfc>)
    60e8:	6a22      	ldr	r2, [r4, #32]
    60ea:	601a      	str	r2, [r3, #0]
    60ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    60ee:	490b      	ldr	r1, [pc, #44]	; (611c <PIO::mcpWritePA(unsigned char)+0x100>)
    60f0:	6963      	ldr	r3, [r4, #20]
    60f2:	6808      	ldr	r0, [r1, #0]
    60f4:	4003      	ands	r3, r0
    60f6:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    60f8:	600b      	str	r3, [r1, #0]
    60fa:	e7ae      	b.n	605a <PIO::mcpWritePA(unsigned char)+0x3e>
    60fc:	1fff8728 	.word	0x1fff8728
    6100:	e000e180 	.word	0xe000e180
    6104:	e000e184 	.word	0xe000e184
    6108:	003f4001 	.word	0x003f4001
    610c:	803f0000 	.word	0x803f0000
    6110:	e000e100 	.word	0xe000e100
    6114:	e000e104 	.word	0xe000e104
    6118:	e000e108 	.word	0xe000e108
    611c:	e000e188 	.word	0xe000e188

00006120 <PIO::mcpWritePB(unsigned char)>:
	SPI.transfer(GPIOA);                                   // Send the register we want to write
	SPI.transfer(value);
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePB(uint8_t value) {
    6120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    6122:	4c37      	ldr	r4, [pc, #220]	; (6200 <PIO::mcpWritePB(unsigned char)+0xe0>)
    6124:	6802      	ldr	r2, [r0, #0]
    6126:	7ae3      	ldrb	r3, [r4, #11]
    6128:	6812      	ldr	r2, [r2, #0]
    612a:	4605      	mov	r5, r0
    612c:	460e      	mov	r6, r1
    612e:	b1bb      	cbz	r3, 6160 <PIO::mcpWritePB(unsigned char)+0x40>
			__disable_irq();
    6130:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6132:	7ae3      	ldrb	r3, [r4, #11]
    6134:	07d8      	lsls	r0, r3, #31
    6136:	4619      	mov	r1, r3
    6138:	d506      	bpl.n	6148 <PIO::mcpWritePB(unsigned char)+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    613a:	4832      	ldr	r0, [pc, #200]	; (6204 <PIO::mcpWritePB(unsigned char)+0xe4>)
    613c:	68e1      	ldr	r1, [r4, #12]
    613e:	6807      	ldr	r7, [r0, #0]
    6140:	4039      	ands	r1, r7
    6142:	61a1      	str	r1, [r4, #24]
				NVIC_ICER0 = interruptSave[0];
    6144:	6001      	str	r1, [r0, #0]
    6146:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    6148:	079b      	lsls	r3, r3, #30
    614a:	d506      	bpl.n	615a <PIO::mcpWritePB(unsigned char)+0x3a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    614c:	482e      	ldr	r0, [pc, #184]	; (6208 <PIO::mcpWritePB(unsigned char)+0xe8>)
    614e:	6923      	ldr	r3, [r4, #16]
    6150:	6807      	ldr	r7, [r0, #0]
    6152:	7ae1      	ldrb	r1, [r4, #11]
    6154:	403b      	ands	r3, r7
    6156:	61e3      	str	r3, [r4, #28]
				NVIC_ICER1 = interruptSave[1];
    6158:	6003      	str	r3, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    615a:	074f      	lsls	r7, r1, #29
    615c:	d449      	bmi.n	61f2 <PIO::mcpWritePB(unsigned char)+0xd2>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    615e:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    6160:	6823      	ldr	r3, [r4, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    6162:	68d9      	ldr	r1, [r3, #12]
    6164:	4291      	cmp	r1, r2
    6166:	d007      	beq.n	6178 <PIO::mcpWritePB(unsigned char)+0x58>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    6168:	4828      	ldr	r0, [pc, #160]	; (620c <PIO::mcpWritePB(unsigned char)+0xec>)
    616a:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    616c:	4928      	ldr	r1, [pc, #160]	; (6210 <PIO::mcpWritePB(unsigned char)+0xf0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    616e:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    6170:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    6174:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    6176:	6019      	str	r1, [r3, #0]
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

inline void PIO::_SPIstart() {
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
    6178:	2100      	movs	r1, #0
    617a:	7928      	ldrb	r0, [r5, #4]
    617c:	f002 fa72 	bl	8664 <digitalWrite>
	_SPIstop();                                 // Slave Select HIGH after SPI action
}

void PIO::mcpWritePB(uint8_t value) {
	_SPIstart();                               // Slave Select LOW before SPI action
	SPI.transfer(OPCODEW | (_adr << 1));             // Send the MCP23S17 opcode, chip address, and write bit
    6180:	796a      	ldrb	r2, [r5, #5]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    6182:	6823      	ldr	r3, [r4, #0]
    6184:	0052      	lsls	r2, r2, #1
    6186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    618a:	b2d2      	uxtb	r2, r2
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    618c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6190:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    6192:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    6194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6196:	2a00      	cmp	r2, #0
    6198:	dafc      	bge.n	6194 <PIO::mcpWritePB(unsigned char)+0x74>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    619a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    619e:	2213      	movs	r2, #19
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    61a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    61a2:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    61a4:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    61a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61a8:	2a00      	cmp	r2, #0
    61aa:	dafc      	bge.n	61a6 <PIO::mcpWritePB(unsigned char)+0x86>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    61ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    61b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    61b2:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    61b4:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    61b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61b8:	2a00      	cmp	r2, #0
    61ba:	dafc      	bge.n	61b6 <PIO::mcpWritePB(unsigned char)+0x96>
	SPI.beginTransaction(*_spis); 
	digitalWrite(_ss_pin, LOW);
}

inline void PIO::_SPIstop() {
	digitalWrite(_ss_pin, HIGH); 
    61bc:	2101      	movs	r1, #1
    61be:	7928      	ldrb	r0, [r5, #4]
		return port().POPR;
    61c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    61c2:	f002 fa4f 	bl	8664 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    61c6:	7ae3      	ldrb	r3, [r4, #11]
    61c8:	490d      	ldr	r1, [pc, #52]	; (6200 <PIO::mcpWritePB(unsigned char)+0xe0>)
    61ca:	461a      	mov	r2, r3
    61cc:	b183      	cbz	r3, 61f0 <PIO::mcpWritePB(unsigned char)+0xd0>
			if (interruptMasksUsed & 0x01) {
    61ce:	07d8      	lsls	r0, r3, #31
    61d0:	d503      	bpl.n	61da <PIO::mcpWritePB(unsigned char)+0xba>
				NVIC_ISER0 = interruptSave[0];
    61d2:	4a10      	ldr	r2, [pc, #64]	; (6214 <PIO::mcpWritePB(unsigned char)+0xf4>)
    61d4:	6989      	ldr	r1, [r1, #24]
    61d6:	6011      	str	r1, [r2, #0]
    61d8:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    61da:	0799      	lsls	r1, r3, #30
    61dc:	d503      	bpl.n	61e6 <PIO::mcpWritePB(unsigned char)+0xc6>
				NVIC_ISER1 = interruptSave[1];
    61de:	4b0e      	ldr	r3, [pc, #56]	; (6218 <PIO::mcpWritePB(unsigned char)+0xf8>)
    61e0:	69e1      	ldr	r1, [r4, #28]
    61e2:	7ae2      	ldrb	r2, [r4, #11]
    61e4:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    61e6:	0753      	lsls	r3, r2, #29
    61e8:	d502      	bpl.n	61f0 <PIO::mcpWritePB(unsigned char)+0xd0>
				NVIC_ISER2 = interruptSave[2];
    61ea:	4b0c      	ldr	r3, [pc, #48]	; (621c <PIO::mcpWritePB(unsigned char)+0xfc>)
    61ec:	6a22      	ldr	r2, [r4, #32]
    61ee:	601a      	str	r2, [r3, #0]
    61f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    61f2:	490b      	ldr	r1, [pc, #44]	; (6220 <PIO::mcpWritePB(unsigned char)+0x100>)
    61f4:	6963      	ldr	r3, [r4, #20]
    61f6:	6808      	ldr	r0, [r1, #0]
    61f8:	4003      	ands	r3, r0
    61fa:	6223      	str	r3, [r4, #32]
				NVIC_ICER2 = interruptSave[2];
    61fc:	600b      	str	r3, [r1, #0]
    61fe:	e7ae      	b.n	615e <PIO::mcpWritePB(unsigned char)+0x3e>
    6200:	1fff8728 	.word	0x1fff8728
    6204:	e000e180 	.word	0xe000e180
    6208:	e000e184 	.word	0xe000e184
    620c:	003f4001 	.word	0x003f4001
    6210:	803f0000 	.word	0x803f0000
    6214:	e000e100 	.word	0xe000e100
    6218:	e000e104 	.word	0xe000e104
    621c:	e000e108 	.word	0xe000e108
    6220:	e000e188 	.word	0xe000e188

00006224 <_GLOBAL__sub_I__Z4test12Board_Sys80b>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    6224:	f002 b904 	b.w	8430 <eeprom_initialize>

00006228 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    6228:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    622a:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    622c:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    622e:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6230:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6232:	d002      	beq.n	623a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    6234:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6236:	f003 bb71 	b.w	991c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    623a:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    623c:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    623e:	4718      	bx	r3

00006240 <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6240:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    6242:	4b46      	ldr	r3, [pc, #280]	; (635c <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    6244:	4a46      	ldr	r2, [pc, #280]	; (6360 <_spi_dma_rxISR0()+0x120>)
    6246:	6b18      	ldr	r0, [r3, #48]	; 0x30
    6248:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    624a:	7901      	ldrb	r1, [r0, #4]
    624c:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    624e:	4945      	ldr	r1, [pc, #276]	; (6364 <_spi_dma_rxISR0()+0x124>)
    6250:	7922      	ldrb	r2, [r4, #4]
    6252:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    6254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6256:	7900      	ldrb	r0, [r0, #4]
    6258:	7008      	strb	r0, [r1, #0]
    625a:	2a00      	cmp	r2, #0
    625c:	d046      	beq.n	62ec <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    625e:	6859      	ldr	r1, [r3, #4]
    6260:	68c9      	ldr	r1, [r1, #12]
    6262:	428a      	cmp	r2, r1
    6264:	d83e      	bhi.n	62e4 <_spi_dma_rxISR0()+0xa4>
    6266:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6268:	8bcc      	ldrh	r4, [r1, #30]
    626a:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    626c:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6270:	d465      	bmi.n	633e <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    6272:	f3c0 000e 	ubfx	r0, r0, #0, #15
    6276:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6278:	8bc8      	ldrh	r0, [r1, #30]
    627a:	b280      	uxth	r0, r0
    627c:	82c8      	strh	r0, [r1, #22]
    627e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    6280:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6282:	8bc8      	ldrh	r0, [r1, #30]
    6284:	0400      	lsls	r0, r0, #16
    6286:	d452      	bmi.n	632e <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    6288:	f3c2 000e 	ubfx	r0, r2, #0, #15
    628c:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    628e:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    6290:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6292:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    6294:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6298:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    629a:	bf18      	it	ne
    629c:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    629e:	629c      	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    62a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    62a2:	482e      	ldr	r0, [pc, #184]	; (635c <_spi_dma_rxISR0()+0x11c>)
    62a4:	6809      	ldr	r1, [r1, #0]
    62a6:	680d      	ldr	r5, [r1, #0]
    62a8:	f100 0424 	add.w	r4, r0, #36	; 0x24
    62ac:	42a5      	cmp	r5, r4
    62ae:	d036      	beq.n	631e <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    62b0:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    62b2:	68c4      	ldr	r4, [r0, #12]
    62b4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    62b8:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    62ba:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    62bc:	bf15      	itete	ne
    62be:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    62c0:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    62c2:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    62c4:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    62c6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    62ca:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    62cc:	6344      	str	r4, [r0, #52]	; 0x34
    62ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    62d0:	4b25      	ldr	r3, [pc, #148]	; (6368 <_spi_dma_rxISR0()+0x128>)
    62d2:	7909      	ldrb	r1, [r1, #4]
    62d4:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    62d6:	4921      	ldr	r1, [pc, #132]	; (635c <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    62d8:	b112      	cbz	r2, 62e0 <_spi_dma_rxISR0()+0xa0>
    62da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    62dc:	7912      	ldrb	r2, [r2, #4]
    62de:	701a      	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    62e0:	bcf0      	pop	{r4, r5, r6, r7}
    62e2:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    62e4:	1a52      	subs	r2, r2, r1
    62e6:	629a      	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    62e8:	2201      	movs	r2, #1
    62ea:	e7d9      	b.n	62a0 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    62ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
    62ee:	6819      	ldr	r1, [r3, #0]
    62f0:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    62f2:	4c1e      	ldr	r4, [pc, #120]	; (636c <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    62f4:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    62f6:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    62f8:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    62fa:	682d      	ldr	r5, [r5, #0]
    62fc:	4e1c      	ldr	r6, [pc, #112]	; (6370 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    62fe:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6302:	2703      	movs	r7, #3
    6304:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    6306:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6308:	f883 7025 	strb.w	r7, [r3, #37]	; 0x25
    630c:	d11f      	bne.n	634e <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    630e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6310:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6312:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6314:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6316:	d01e      	beq.n	6356 <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6318:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    631a:	f003 baff 	b.w	991c <EventResponder::triggerEventNotImmediate()>
    631e:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6320:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    6324:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6326:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    632a:	6348      	str	r0, [r1, #52]	; 0x34
    632c:	e7cf      	b.n	62ce <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    632e:	8bcc      	ldrh	r4, [r1, #30]
    6330:	f3c2 0008 	ubfx	r0, r2, #0, #9
    6334:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6338:	4320      	orrs	r0, r4
    633a:	83c8      	strh	r0, [r1, #30]
    633c:	e7a7      	b.n	628e <_spi_dma_rxISR0()+0x4e>
    633e:	8bcc      	ldrh	r4, [r1, #30]
    6340:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6344:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6348:	4320      	orrs	r0, r4
    634a:	83c8      	strh	r0, [r1, #30]
    634c:	e794      	b.n	6278 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    634e:	462b      	mov	r3, r5
    6350:	4611      	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6352:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6354:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6356:	6883      	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6358:	bcf0      	pop	{r4, r5, r6, r7}
    635a:	4718      	bx	r3
    635c:	1fff8728 	.word	0x1fff8728
    6360:	4000801f 	.word	0x4000801f
    6364:	4000801c 	.word	0x4000801c
    6368:	4000801b 	.word	0x4000801b
    636c:	ff0f0000 	.word	0xff0f0000
    6370:	00006229 	.word	0x00006229

00006374 <SPIClass::begin()>:
    6374:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    6378:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    637a:	681c      	ldr	r4, [r3, #0]
    637c:	6859      	ldr	r1, [r3, #4]
    637e:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    6380:	4f16      	ldr	r7, [pc, #88]	; (63dc <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6382:	4e17      	ldr	r6, [pc, #92]	; (63e0 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    6384:	4329      	orrs	r1, r5
    6386:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6388:	4d16      	ldr	r5, [pc, #88]	; (63e4 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    638a:	4917      	ldr	r1, [pc, #92]	; (63e8 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    638c:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    638e:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6390:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    6392:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6394:	7a41      	ldrb	r1, [r0, #9]
    6396:	4a15      	ldr	r2, [pc, #84]	; (63ec <SPIClass::begin()+0x78>)
    6398:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    639a:	310a      	adds	r1, #10
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    639c:	f894 4024 	ldrb.w	r4, [r4, #36]	; 0x24
	*reg = hardware().mosi_mux[mosi_pin_index];
    63a0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    63a4:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    63a8:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    63aa:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    63ac:	7a01      	ldrb	r1, [r0, #8]
    63ae:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    63b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    63b4:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    63b6:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    63b8:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    63bc:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    63be:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    63c0:	7a81      	ldrb	r1, [r0, #10]
    63c2:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    63c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    63c8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
	*reg = hardware().sck_mux[sck_pin_index];
    63cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    63ce:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    63d2:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    63d4:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    63d6:	6019      	str	r1, [r3, #0]
}
    63d8:	4770      	bx	lr
    63da:	bf00      	nop
    63dc:	001f4001 	.word	0x001f4001
    63e0:	38001001 	.word	0x38001001
    63e4:	78001001 	.word	0x78001001
    63e8:	801f0000 	.word	0x801f0000
    63ec:	000108f4 	.word	0x000108f4

000063f0 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    63f0:	2000      	movs	r0, #0
    63f2:	4770      	bx	lr

000063f4 <Print::flush()>:
	virtual void flush()				{ }
    63f4:	4770      	bx	lr
    63f6:	bf00      	nop

000063f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>:
/****************************************/
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
    63f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;
    63fc:	7a83      	ldrb	r3, [r0, #10]
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
	uint8_t en = _enable_pin;
    63fe:	7a44      	ldrb	r4, [r0, #9]
	if ((_en2 != 255) && (_chip)) en = _en2;
    6400:	2bff      	cmp	r3, #255	; 0xff
/****************************************/
/**  low level data pushing commands   **/
/****************************************/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystalFast::send(uint8_t value, uint8_t mode) {
    6402:	4605      	mov	r5, r0
    6404:	460f      	mov	r7, r1
    6406:	4690      	mov	r8, r2
	uint8_t en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;
    6408:	d003      	beq.n	6412 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x1a>
    640a:	7ac2      	ldrb	r2, [r0, #11]
    640c:	2a00      	cmp	r2, #0
    640e:	bf18      	it	ne
    6410:	461c      	movne	r4, r3
	if (_rw_pin == 255) {
    6412:	7a2b      	ldrb	r3, [r5, #8]
    6414:	2bff      	cmp	r3, #255	; 0xff
    6416:	d07f      	beq.n	6518 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x120>
		delayMicroseconds(DELAYPERCHAR);
	} else {
		pinMode(_data_pins[0], INPUT);
    6418:	2100      	movs	r1, #0
    641a:	7ca8      	ldrb	r0, [r5, #18]
    641c:	f002 f936 	bl	868c <pinMode>
		pinMode(_data_pins[1], INPUT);
    6420:	2100      	movs	r1, #0
    6422:	7ce8      	ldrb	r0, [r5, #19]
    6424:	f002 f932 	bl	868c <pinMode>
		pinMode(_data_pins[2], INPUT);
    6428:	2100      	movs	r1, #0
    642a:	7d28      	ldrb	r0, [r5, #20]
    642c:	f002 f92e 	bl	868c <pinMode>
		pinMode(_data_pins[3], INPUT);
    6430:	2100      	movs	r1, #0
    6432:	7d68      	ldrb	r0, [r5, #21]
    6434:	f002 f92a 	bl	868c <pinMode>
		digitalWrite(_rw_pin, HIGH);
    6438:	2101      	movs	r1, #1
    643a:	7a28      	ldrb	r0, [r5, #8]
    643c:	f002 f912 	bl	8664 <digitalWrite>
		digitalWrite(_rs_pin, LOW);
    6440:	2100      	movs	r1, #0
    6442:	79e8      	ldrb	r0, [r5, #7]
    6444:	f002 f90e 	bl	8664 <digitalWrite>
		uint8_t busy;
		do {
			digitalWrite(en, HIGH);
    6448:	2101      	movs	r1, #1
    644a:	4620      	mov	r0, r4
    644c:	f002 f90a 	bl	8664 <digitalWrite>
			busy = digitalRead(_data_pins[3]);
    6450:	7d68      	ldrb	r0, [r5, #21]
    6452:	f002 f90d 	bl	8670 <digitalRead>
			digitalWrite(en, LOW);
    6456:	2100      	movs	r1, #0
		digitalWrite(_rw_pin, HIGH);
		digitalWrite(_rs_pin, LOW);
		uint8_t busy;
		do {
			digitalWrite(en, HIGH);
			busy = digitalRead(_data_pins[3]);
    6458:	4606      	mov	r6, r0
			digitalWrite(en, LOW);
    645a:	4620      	mov	r0, r4
    645c:	f002 f902 	bl	8664 <digitalWrite>
			digitalWrite(en, HIGH);
    6460:	2101      	movs	r1, #1
    6462:	4620      	mov	r0, r4
    6464:	f002 f8fe 	bl	8664 <digitalWrite>
			digitalWrite(en, LOW);
    6468:	2100      	movs	r1, #0
    646a:	4620      	mov	r0, r4
    646c:	f002 f8fa 	bl	8664 <digitalWrite>
		} while (busy == HIGH);
    6470:	2e01      	cmp	r6, #1
    6472:	d0e9      	beq.n	6448 <LiquidCrystalFast::send(unsigned char, unsigned char)+0x50>
		pinMode(_data_pins[0], OUTPUT);
    6474:	2101      	movs	r1, #1
    6476:	7ca8      	ldrb	r0, [r5, #18]
    6478:	f002 f908 	bl	868c <pinMode>
		pinMode(_data_pins[1], OUTPUT);
    647c:	2101      	movs	r1, #1
    647e:	7ce8      	ldrb	r0, [r5, #19]
    6480:	f002 f904 	bl	868c <pinMode>
		pinMode(_data_pins[2], OUTPUT);
    6484:	2101      	movs	r1, #1
    6486:	7d28      	ldrb	r0, [r5, #20]
    6488:	f002 f900 	bl	868c <pinMode>
		pinMode(_data_pins[3], OUTPUT);
    648c:	2101      	movs	r1, #1
    648e:	7d68      	ldrb	r0, [r5, #21]
    6490:	f002 f8fc 	bl	868c <pinMode>
		digitalWrite(_rw_pin, LOW);
    6494:	2100      	movs	r1, #0
    6496:	7a28      	ldrb	r0, [r5, #8]
    6498:	f002 f8e4 	bl	8664 <digitalWrite>
	}
	digitalWrite(_rs_pin, mode);
    649c:	4641      	mov	r1, r8
    649e:	79e8      	ldrb	r0, [r5, #7]
    64a0:	f002 f8e0 	bl	8664 <digitalWrite>

	digitalWrite(_data_pins[0], value & 0x10);
    64a4:	f007 0110 	and.w	r1, r7, #16
    64a8:	7ca8      	ldrb	r0, [r5, #18]
    64aa:	f002 f8db 	bl	8664 <digitalWrite>
	digitalWrite(_data_pins[1], value & 0x20);
    64ae:	f007 0120 	and.w	r1, r7, #32
    64b2:	7ce8      	ldrb	r0, [r5, #19]
    64b4:	f002 f8d6 	bl	8664 <digitalWrite>
	digitalWrite(_data_pins[2], value & 0x40);
    64b8:	f007 0140 	and.w	r1, r7, #64	; 0x40
    64bc:	7d28      	ldrb	r0, [r5, #20]
    64be:	f002 f8d1 	bl	8664 <digitalWrite>
	digitalWrite(_data_pins[3], value & 0x80);
    64c2:	f007 0180 	and.w	r1, r7, #128	; 0x80
    64c6:	7d68      	ldrb	r0, [r5, #21]
    64c8:	f002 f8cc 	bl	8664 <digitalWrite>
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    64cc:	4620      	mov	r0, r4
    64ce:	2101      	movs	r1, #1
    64d0:	f002 f8c8 	bl	8664 <digitalWrite>
	digitalWrite(en, LOW);
    64d4:	4620      	mov	r0, r4
    64d6:	2100      	movs	r1, #0
    64d8:	f002 f8c4 	bl	8664 <digitalWrite>

	digitalWrite(_data_pins[0], value & 0x01);
    64dc:	f007 0101 	and.w	r1, r7, #1
    64e0:	7ca8      	ldrb	r0, [r5, #18]
    64e2:	f002 f8bf 	bl	8664 <digitalWrite>
	digitalWrite(_data_pins[1], value & 0x02);
    64e6:	f007 0102 	and.w	r1, r7, #2
    64ea:	7ce8      	ldrb	r0, [r5, #19]
    64ec:	f002 f8ba 	bl	8664 <digitalWrite>
	digitalWrite(_data_pins[2], value & 0x04);
    64f0:	f007 0104 	and.w	r1, r7, #4
    64f4:	7d28      	ldrb	r0, [r5, #20]
    64f6:	f002 f8b5 	bl	8664 <digitalWrite>
	digitalWrite(_data_pins[3], value & 0x08);
    64fa:	f007 0108 	and.w	r1, r7, #8
    64fe:	7d68      	ldrb	r0, [r5, #21]
    6500:	f002 f8b0 	bl	8664 <digitalWrite>
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    6504:	4620      	mov	r0, r4
    6506:	2101      	movs	r1, #1
    6508:	f002 f8ac 	bl	8664 <digitalWrite>
	digitalWrite(en, LOW);
    650c:	4620      	mov	r0, r4
    650e:	2100      	movs	r1, #0
}
    6510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	digitalWrite(_data_pins[0], value & 0x01);
	digitalWrite(_data_pins[1], value & 0x02);
	digitalWrite(_data_pins[2], value & 0x04);
	digitalWrite(_data_pins[3], value & 0x08);
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
	digitalWrite(en, LOW);
    6514:	f002 b8a6 	b.w	8664 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    6518:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00

0000651c <L_253_delayMicroseconds>:
    651c:	3b01      	subs	r3, #1
    651e:	d1fd      	bne.n	651c <L_253_delayMicroseconds>
    6520:	e7bc      	b.n	649c <LiquidCrystalFast::send(unsigned char, unsigned char)+0xa4>
    6522:	bf00      	nop

00006524 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>:
		_chip = chipSave;
	}
}

void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
    6524:	b570      	push	{r4, r5, r6, lr}
	if ( row > _numlines ) {
    6526:	7dc3      	ldrb	r3, [r0, #23]
    6528:	4293      	cmp	r3, r2
		row = _numlines-1;    // we count rows starting w/0
    652a:	bf38      	it	cc
    652c:	f103 32ff 	addcc.w	r2, r3, #4294967295
		_chip = chipSave;
	}
}

void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
    6530:	4604      	mov	r4, r0
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
    6532:	bf38      	it	cc
    6534:	b2d2      	uxtbcc	r2, r2
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
    6536:	2000      	movs	r0, #0
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    6538:	18a3      	adds	r3, r4, r2
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
    653a:	73e0      	strb	r0, [r4, #15]
void LiquidCrystalFast::setCursor(uint8_t col, uint8_t row)         // this can be called by the user but is also called before writing some characters.
{
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
    653c:	73a2      	strb	r2, [r4, #14]
	_x = col;
    653e:	7361      	strb	r1, [r4, #13]
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    6540:	7e1b      	ldrb	r3, [r3, #24]
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
    6542:	7b20      	ldrb	r0, [r4, #12]
    6544:	f003 053f 	and.w	r5, r3, #63	; 0x3f
    6548:	4408      	add	r0, r1
    654a:	4428      	add	r0, r5
    654c:	b2c0      	uxtb	r0, r0
    654e:	b245      	sxtb	r5, r0
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    6550:	f003 0340 	and.w	r3, r3, #64	; 0x40
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
    6554:	2d27      	cmp	r5, #39	; 0x27
		row = _numlines-1;    // we count rows starting w/0
	}
	_y = row;
	_x = col;
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
    6556:	b25b      	sxtb	r3, r3
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
    6558:	dd1d      	ble.n	6596 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x72>
    655a:	3828      	subs	r0, #40	; 0x28
    655c:	b245      	sxtb	r5, r0
    655e:	f002 0202 	and.w	r2, r2, #2
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
    6562:	7ae1      	ldrb	r1, [r4, #11]
    6564:	b2d6      	uxtb	r6, r2
    6566:	42b1      	cmp	r1, r6
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
	offset |= high_bit;
    6568:	ea45 0503 	orr.w	r5, r5, r3
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
    656c:	d009      	beq.n	6582 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x5e>
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);   //both chips
}

// Turns the underline cursor on/off
void LiquidCrystalFast::noCursor() {
	_displaycontrol &= ~LCD_CURSORON;
    656e:	7f21      	ldrb	r1, [r4, #28]
    6570:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    6574:	7721      	strb	r1, [r4, #28]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    6576:	2200      	movs	r2, #0
    6578:	f041 0108 	orr.w	r1, r1, #8
    657c:	4620      	mov	r0, r4
    657e:	f7ff ff3b 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    6582:	f065 017f 	orn	r1, r5, #127	; 0x7f
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
	_chip = row & 0b10;                     //if it is row 0 or 1 this is 0; if it is row 2 or 3 this is 2
    6586:	72e6      	strb	r6, [r4, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    6588:	4620      	mov	r0, r4
    658a:	b2c9      	uxtb	r1, r1
    658c:	2200      	movs	r2, #0
	if (offset < 0) offset += 40;
	offset |= high_bit;
	if (_chip != (row & 0b10)) noCursor();  //turn off cursor on chip we are leaving
	_chip = row & 0b10;                     //if it is row 0 or 1 this is 0; if it is row 2 or 3 this is 2
	command(LCD_SETDDRAMADDR | (byte) offset );
}
    658e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    6592:	f7ff bf31 	b.w	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	_setCursFlag = 0;                                                 //user did a setCursor--clear the flag that may have been set in write()
	int8_t high_bit = row_offsets[row] & 0x40;                        // this keeps coordinates pegged to a spot on the LCD screen even if the user scrolls right or
	int8_t  offset = col + (row_offsets[row] &0x3f)  + _scroll_count; //left under program control. Previously setCursor was pegged to a location in DDRAM
	//the 3 quantities we add are each <40
	if (offset > 39) offset -= 40;                                    // if the display is autoscrolled this method does not work, however.
	if (offset < 0) offset += 40;
    6596:	2d00      	cmp	r5, #0
    6598:	bfbc      	itt	lt
    659a:	3028      	addlt	r0, #40	; 0x28
    659c:	b245      	sxtblt	r5, r0
    659e:	e7de      	b.n	655e <LiquidCrystalFast::setCursor(unsigned char, unsigned char)+0x3a>

000065a0 <LiquidCrystalFast::clear()>:
/******************************************/
/**  high level commands, for the user!   */
/******************************************/

void LiquidCrystalFast::clear()
{
    65a0:	b510      	push	{r4, lr}
	if (_en2 != 255) {
    65a2:	7a83      	ldrb	r3, [r0, #10]
    65a4:	2bff      	cmp	r3, #255	; 0xff
/******************************************/
/**  high level commands, for the user!   */
/******************************************/

void LiquidCrystalFast::clear()
{
    65a6:	4604      	mov	r4, r0
	if (_en2 != 255) {
    65a8:	d016      	beq.n	65d8 <LiquidCrystalFast::clear()+0x38>
		_chip=2;
    65aa:	2302      	movs	r3, #2
    65ac:	72c3      	strb	r3, [r0, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    65ae:	2200      	movs	r2, #0
    65b0:	2101      	movs	r1, #1
    65b2:	f7ff ff21 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
void LiquidCrystalFast::clear()
{
	if (_en2 != 255) {
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
    65b6:	2200      	movs	r2, #0
    65b8:	72e2      	strb	r2, [r4, #11]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    65ba:	2101      	movs	r1, #1
    65bc:	4620      	mov	r0, r4
    65be:	f7ff ff1b 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	void init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
		uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3);
	void send(uint8_t, uint8_t);
	void write4bits(uint8_t);
	void begin2(uint8_t cols, uint8_t rows, uint8_t charsize, uint8_t chip);
	inline void delayPerHome(void) { if (_rw_pin == 255) delayMicroseconds(2900);}
    65c2:	7a23      	ldrb	r3, [r4, #8]
    65c4:	2bff      	cmp	r3, #255	; 0xff
    65c6:	d012      	beq.n	65ee <L_635_delayMicroseconds+0x6>
		_chip=2;
		command(LCD_CLEARDISPLAY); 
		_chip=0;
		command(LCD_CLEARDISPLAY);
		delayPerHome();
		setCursor(0,0);
    65c8:	2200      	movs	r2, #0
    65ca:	4611      	mov	r1, r2
    65cc:	4620      	mov	r0, r4
    65ce:	f7ff ffa9 	bl	6524 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	} else {
		command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
		delayPerHome();
	}
	_scroll_count = 0;
    65d2:	2300      	movs	r3, #0
    65d4:	7323      	strb	r3, [r4, #12]
    65d6:	bd10      	pop	{r4, pc}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    65d8:	2200      	movs	r2, #0
    65da:	2101      	movs	r1, #1
    65dc:	f7ff ff0c 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    65e0:	7a23      	ldrb	r3, [r4, #8]
    65e2:	2bff      	cmp	r3, #255	; 0xff
    65e4:	d1f5      	bne.n	65d2 <LiquidCrystalFast::clear()+0x32>
    65e6:	4b04      	ldr	r3, [pc, #16]	; (65f8 <L_660_delayMicroseconds+0x8>)

000065e8 <L_635_delayMicroseconds>:
    65e8:	3b01      	subs	r3, #1
    65ea:	d1fd      	bne.n	65e8 <L_635_delayMicroseconds>
    65ec:	e7f1      	b.n	65d2 <LiquidCrystalFast::clear()+0x32>
    65ee:	4b02      	ldr	r3, [pc, #8]	; (65f8 <L_660_delayMicroseconds+0x8>)

000065f0 <L_660_delayMicroseconds>:
    65f0:	3b01      	subs	r3, #1
    65f2:	d1fd      	bne.n	65f0 <L_660_delayMicroseconds>
    65f4:	e7e8      	b.n	65c8 <LiquidCrystalFast::clear()+0x28>
    65f6:	bf00      	nop
    65f8:	00010fe0 	.word	0x00010fe0

000065fc <LiquidCrystalFast::commandBoth(unsigned char)>:
}

//for many of the commands that need to be sent twice if 2 controller chips
void LiquidCrystalFast::commandBoth(uint8_t value)
{
	if (_en2 == 255) {
    65fc:	7a82      	ldrb	r2, [r0, #10]
    65fe:	2aff      	cmp	r2, #255	; 0xff
    6600:	d011      	beq.n	6626 <LiquidCrystalFast::commandBoth(unsigned char)+0x2a>
	send(value, LOW);
}

//for many of the commands that need to be sent twice if 2 controller chips
void LiquidCrystalFast::commandBoth(uint8_t value)
{
    6602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_en2 == 255) {
		send(value, LOW);  // normal LCD, single controller chip
	} else {
		uint8_t chipSave = _chip;
		_chip = 0;
    6604:	2600      	movs	r6, #0
    6606:	4604      	mov	r4, r0
void LiquidCrystalFast::commandBoth(uint8_t value)
{
	if (_en2 == 255) {
		send(value, LOW);  // normal LCD, single controller chip
	} else {
		uint8_t chipSave = _chip;
    6608:	7ac7      	ldrb	r7, [r0, #11]
		_chip = 0;
    660a:	72c6      	strb	r6, [r0, #11]
		send(value,LOW);   //send command to first HD44780
    660c:	4632      	mov	r2, r6
    660e:	460d      	mov	r5, r1
    6610:	f7ff fef2 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
		_chip = 2;
    6614:	2302      	movs	r3, #2
		send(value,LOW);   //send to 2nd HD44780
    6616:	4632      	mov	r2, r6
    6618:	4629      	mov	r1, r5
		send(value, LOW);  // normal LCD, single controller chip
	} else {
		uint8_t chipSave = _chip;
		_chip = 0;
		send(value,LOW);   //send command to first HD44780
		_chip = 2;
    661a:	72e3      	strb	r3, [r4, #11]
		send(value,LOW);   //send to 2nd HD44780
    661c:	4620      	mov	r0, r4
    661e:	f7ff feeb 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
		_chip=chipSave;
    6622:	72e7      	strb	r7, [r4, #11]
    6624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

//for many of the commands that need to be sent twice if 2 controller chips
void LiquidCrystalFast::commandBoth(uint8_t value)
{
	if (_en2 == 255) {
		send(value, LOW);  // normal LCD, single controller chip
    6626:	2200      	movs	r2, #0
    6628:	f7ff bee6 	b.w	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>

0000662c <LiquidCrystalFast::write(unsigned char)>:
	}
}

//print calls  this to send characters to the LCD
#if defined(ARDUINO) && ARDUINO >= 100
size_t LiquidCrystalFast::write(uint8_t value) {
    662c:	b538      	push	{r3, r4, r5, lr}
#else
void LiquidCrystalFast::write(uint8_t value) {
#endif

	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
    662e:	68c3      	ldr	r3, [r0, #12]
    6630:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    6634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	}
}

//print calls  this to send characters to the LCD
#if defined(ARDUINO) && ARDUINO >= 100
size_t LiquidCrystalFast::write(uint8_t value) {
    6638:	4604      	mov	r4, r0
    663a:	460d      	mov	r5, r1
#else
void LiquidCrystalFast::write(uint8_t value) {
#endif

	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
    663c:	bb6b      	cbnz	r3, 669a <LiquidCrystalFast::write(unsigned char)+0x6e>
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);
    663e:	2d0d      	cmp	r5, #13
    6640:	d031      	beq.n	66a6 <LiquidCrystalFast::write(unsigned char)+0x7a>
    6642:	2d0a      	cmp	r5, #10
    6644:	d004      	beq.n	6650 <LiquidCrystalFast::write(unsigned char)+0x24>
    6646:	2201      	movs	r2, #1
    6648:	4629      	mov	r1, r5
    664a:	4620      	mov	r0, r4
    664c:	f7ff fed4 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>

	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
    6650:	7c23      	ldrb	r3, [r4, #16]
#endif

	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);

	_setCursFlag = 0;
    6652:	2200      	movs	r2, #0
    6654:	73e2      	strb	r2, [r4, #15]
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
    6656:	b183      	cbz	r3, 667a <LiquidCrystalFast::write(unsigned char)+0x4e>
			_x = 0;
			_y++;
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
		}
	} else {
		_x--;
    6658:	7b63      	ldrb	r3, [r4, #13]
    665a:	3b01      	subs	r3, #1
    665c:	b25b      	sxtb	r3, r3
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
    665e:	2d0a      	cmp	r5, #10
			_x = 0;
			_y++;
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
		}
	} else {
		_x--;
    6660:	7363      	strb	r3, [r4, #13]
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
    6662:	d02a      	beq.n	66ba <LiquidCrystalFast::write(unsigned char)+0x8e>
    6664:	2b00      	cmp	r3, #0
    6666:	db28      	blt.n	66ba <LiquidCrystalFast::write(unsigned char)+0x8e>
    6668:	f994 300e 	ldrsb.w	r3, [r4, #14]
			_x = _numcols-1;
			_y++;
			_setCursFlag = 1;
		}
	}
	if (_y >= _numlines) _y = 0;   //wrap last line up to line 0
    666c:	7de2      	ldrb	r2, [r4, #23]
    666e:	4293      	cmp	r3, r2
    6670:	db01      	blt.n	6676 <LiquidCrystalFast::write(unsigned char)+0x4a>
    6672:	2300      	movs	r3, #0
    6674:	73a3      	strb	r3, [r4, #14]
#if defined(ARDUINO) && ARDUINO >= 100
	return 1;
#endif
}
    6676:	2001      	movs	r0, #1
    6678:	bd38      	pop	{r3, r4, r5, pc}
	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);

	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
		_x++;
    667a:	7b63      	ldrb	r3, [r4, #13]
		if ((value == '\r') ||(_x >= _numcols) ) {      //romance languages go left to right
    667c:	7da2      	ldrb	r2, [r4, #22]
	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);

	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
		_x++;
    667e:	3301      	adds	r3, #1
    6680:	b25b      	sxtb	r3, r3
		if ((value == '\r') ||(_x >= _numcols) ) {      //romance languages go left to right
    6682:	4293      	cmp	r3, r2
	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);

	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
		_x++;
    6684:	7363      	strb	r3, [r4, #13]
		if ((value == '\r') ||(_x >= _numcols) ) {      //romance languages go left to right
    6686:	dbef      	blt.n	6668 <LiquidCrystalFast::write(unsigned char)+0x3c>
			
			_x = 0;
			_y++;
    6688:	7ba3      	ldrb	r3, [r4, #14]
    668a:	3301      	adds	r3, #1
    668c:	b25b      	sxtb	r3, r3
	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
		_x++;
		if ((value == '\r') ||(_x >= _numcols) ) {      //romance languages go left to right
			
			_x = 0;
    668e:	2100      	movs	r1, #0
			_y++;
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
    6690:	2201      	movs	r2, #1
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
		_x++;
		if ((value == '\r') ||(_x >= _numcols) ) {      //romance languages go left to right
			
			_x = 0;
			_y++;
    6692:	73a3      	strb	r3, [r4, #14]
	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
		_x++;
		if ((value == '\r') ||(_x >= _numcols) ) {      //romance languages go left to right
			
			_x = 0;
    6694:	7361      	strb	r1, [r4, #13]
			_y++;
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
    6696:	73e2      	strb	r2, [r4, #15]
    6698:	e7e8      	b.n	666c <LiquidCrystalFast::write(unsigned char)+0x40>
size_t LiquidCrystalFast::write(uint8_t value) {
#else
void LiquidCrystalFast::write(uint8_t value) {
#endif

	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
    669a:	7b82      	ldrb	r2, [r0, #14]
    669c:	7b41      	ldrb	r1, [r0, #13]
    669e:	f7ff ff41 	bl	6524 <LiquidCrystalFast::setCursor(unsigned char, unsigned char)>
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);
    66a2:	2d0d      	cmp	r5, #13
    66a4:	d1cd      	bne.n	6642 <LiquidCrystalFast::write(unsigned char)+0x16>

	_setCursFlag = 0;
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
    66a6:	7c23      	ldrb	r3, [r4, #16]
#endif

	if ((_scroll_count != 0) || (_setCursFlag != 0) ) setCursor(_x,_y);   //first we call setCursor and send the character
	if ((value != '\r') && (value != '\n') ) send(value, HIGH);

	_setCursFlag = 0;
    66a8:	2200      	movs	r2, #0
    66aa:	73e2      	strb	r2, [r4, #15]
	if (_direction == LCD_Right) {                    // then we update the x & y location for the NEXT character
    66ac:	2b00      	cmp	r3, #0
    66ae:	d0eb      	beq.n	6688 <LiquidCrystalFast::write(unsigned char)+0x5c>
			_x = 0;
			_y++;
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
		}
	} else {
		_x--;
    66b0:	7b63      	ldrb	r3, [r4, #13]
    66b2:	3b01      	subs	r3, #1
    66b4:	b25b      	sxtb	r3, r3
    66b6:	7363      	strb	r3, [r4, #13]
    66b8:	e7d4      	b.n	6664 <LiquidCrystalFast::write(unsigned char)+0x38>
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
			_x = _numcols-1;
			_y++;
    66ba:	7ba3      	ldrb	r3, [r4, #14]
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
		}
	} else {
		_x--;
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
			_x = _numcols-1;
    66bc:	7da2      	ldrb	r2, [r4, #22]
			_y++;
    66be:	3301      	adds	r3, #1
    66c0:	b25b      	sxtb	r3, r3
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
		}
	} else {
		_x--;
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
			_x = _numcols-1;
    66c2:	3a01      	subs	r2, #1
			_y++;
			_setCursFlag = 1;
    66c4:	2101      	movs	r1, #1
		}
	} else {
		_x--;
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
			_x = _numcols-1;
			_y++;
    66c6:	73a3      	strb	r3, [r4, #14]
			_setCursFlag = 1;          //we'll need a setCursor() before the next char to move to begin of next line
		}
	} else {
		_x--;
		if ( (value == '\n') || (_x < 0)) {   //emulate right to left text mode which is built in but would be defeated by my code above
			_x = _numcols-1;
    66c8:	7362      	strb	r2, [r4, #13]
			_y++;
			_setCursFlag = 1;
    66ca:	73e1      	strb	r1, [r4, #15]
    66cc:	e7ce      	b.n	666c <LiquidCrystalFast::write(unsigned char)+0x40>
    66ce:	bf00      	nop

000066d0 <LiquidCrystalFast::write4bits(unsigned char)>:
	digitalWrite(en, LOW);
}

// used during init
void LiquidCrystalFast::write4bits(uint8_t value)
{
    66d0:	b538      	push	{r3, r4, r5, lr}
    66d2:	4604      	mov	r4, r0
    66d4:	460d      	mov	r5, r1
	uint8_t v=value;
	uint8_t *pinptr = _data_pins;
	digitalWrite(*pinptr++, v & 1 );
    66d6:	7c80      	ldrb	r0, [r0, #18]
    66d8:	f001 0101 	and.w	r1, r1, #1
    66dc:	f001 ffc2 	bl	8664 <digitalWrite>
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
    66e0:	f3c5 0140 	ubfx	r1, r5, #1, #1
    66e4:	7ce0      	ldrb	r0, [r4, #19]
    66e6:	f001 ffbd 	bl	8664 <digitalWrite>
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
    66ea:	f3c5 0180 	ubfx	r1, r5, #2, #1
    66ee:	7d20      	ldrb	r0, [r4, #20]
    66f0:	f001 ffb8 	bl	8664 <digitalWrite>
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
    66f4:	f3c5 01c0 	ubfx	r1, r5, #3, #1
    66f8:	7d60      	ldrb	r0, [r4, #21]
    66fa:	f001 ffb3 	bl	8664 <digitalWrite>
	byte en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;    // 4x40 LCD with 2 controller chips with separate enable lines if we called w 2 enable pins and are on lines 2 or 3 enable chip 2  
    66fe:	7aa3      	ldrb	r3, [r4, #10]
	uint8_t *pinptr = _data_pins;
	digitalWrite(*pinptr++, v & 1 );
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
	byte en = _enable_pin;
    6700:	7a65      	ldrb	r5, [r4, #9]
	if ((_en2 != 255) && (_chip)) en = _en2;    // 4x40 LCD with 2 controller chips with separate enable lines if we called w 2 enable pins and are on lines 2 or 3 enable chip 2  
    6702:	2bff      	cmp	r3, #255	; 0xff
    6704:	d003      	beq.n	670e <LiquidCrystalFast::write4bits(unsigned char)+0x3e>
    6706:	7ae2      	ldrb	r2, [r4, #11]
    6708:	2a00      	cmp	r2, #0
    670a:	bf18      	it	ne
    670c:	461d      	movne	r5, r3
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
    670e:	4628      	mov	r0, r5
    6710:	2101      	movs	r1, #1
    6712:	f001 ffa7 	bl	8664 <digitalWrite>
	digitalWrite(en, LOW);
    6716:	4628      	mov	r0, r5
    6718:	2100      	movs	r1, #0
}
    671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
	digitalWrite(*pinptr++,( v >>= 1) & 1 );
	byte en = _enable_pin;
	if ((_en2 != 255) && (_chip)) en = _en2;    // 4x40 LCD with 2 controller chips with separate enable lines if we called w 2 enable pins and are on lines 2 or 3 enable chip 2  
	digitalWrite(en, HIGH);   // enable pulse must be >450ns
	digitalWrite(en, LOW);
    671e:	f001 bfa1 	b.w	8664 <digitalWrite>
    6722:	bf00      	nop

00006724 <LiquidCrystalFast::begin2(unsigned char, unsigned char, unsigned char, unsigned char)>:
		begin2( cols,  lines,  dotsize,_en2);//initialize the second HD44780 chip
	}
}

void LiquidCrystalFast::begin2(uint8_t cols, uint8_t lines, uint8_t dotsize, uint8_t enable)
{  
    6724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t	displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;

	if (lines > 1) {
		displayfunction |= LCD_2LINE;
    6726:	2a02      	cmp	r2, #2
		begin2( cols,  lines,  dotsize,_en2);//initialize the second HD44780 chip
	}
}

void LiquidCrystalFast::begin2(uint8_t cols, uint8_t lines, uint8_t dotsize, uint8_t enable)
{  
    6728:	4605      	mov	r5, r0
	uint8_t	displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;

	if (lines > 1) {
		displayfunction |= LCD_2LINE;
    672a:	bf34      	ite	cc
    672c:	2700      	movcc	r7, #0
    672e:	2708      	movcs	r7, #8
		begin2( cols,  lines,  dotsize,_en2);//initialize the second HD44780 chip
	}
}

void LiquidCrystalFast::begin2(uint8_t cols, uint8_t lines, uint8_t dotsize, uint8_t enable)
{  
    6730:	f89d 6018 	ldrb.w	r6, [sp, #24]
	if (lines > 1) {
		displayfunction |= LCD_2LINE;
	}
	
	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    6734:	b123      	cbz	r3, 6740 <LiquidCrystalFast::begin2(unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    6736:	2a01      	cmp	r2, #1
		displayfunction |= LCD_5x10DOTS;
    6738:	bf04      	itt	eq
    673a:	f047 0704 	orreq.w	r7, r7, #4
    673e:	b2ff      	uxtbeq	r7, r7
    6740:	4924      	ldr	r1, [pc, #144]	; (67d4 <L_1554_delayMicroseconds+0x34>)
void LiquidCrystalFast::begin2(uint8_t cols, uint8_t lines, uint8_t dotsize, uint8_t enable)
{  
	uint8_t	displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;

	if (lines > 1) {
		displayfunction |= LCD_2LINE;
    6742:	2412      	movs	r4, #18
    6744:	460b      	mov	r3, r1

00006746 <L_1470_delayMicroseconds>:
    6746:	3b01      	subs	r3, #1
    6748:	d1fd      	bne.n	6746 <L_1470_delayMicroseconds>
    674a:	1e62      	subs	r2, r4, #1
	
	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way before 4.5V.
	// is this delay long enough for all cases??
	for (uint8_t i=0;i<18;i++) {
    674c:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    6750:	d1f8      	bne.n	6744 <LiquidCrystalFast::begin2(unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
		delayMicroseconds(7500);
	}

	// Now we pull both RS and R/W low to begin commands
	digitalWrite(_rs_pin, LOW);
    6752:	4621      	mov	r1, r4
    6754:	79e8      	ldrb	r0, [r5, #7]
    6756:	f001 ff85 	bl	8664 <digitalWrite>
	digitalWrite(enable, LOW);
    675a:	4621      	mov	r1, r4
    675c:	4630      	mov	r0, r6
    675e:	f001 ff81 	bl	8664 <digitalWrite>
		
	// we start in 8bit mode, try to set 4 bit mode
	// at this point we are in 8 bit mode but of course in this
	// interface 4 pins are dangling unconnected and the values
	// on them don't matter for these instructions.
	digitalWrite(_rs_pin, LOW);
    6762:	4621      	mov	r1, r4
    6764:	79e8      	ldrb	r0, [r5, #7]
    6766:	f001 ff7d 	bl	8664 <digitalWrite>
	write4bits(0x03);
    676a:	2103      	movs	r1, #3
    676c:	4628      	mov	r0, r5
    676e:	f7ff ffaf 	bl	66d0 <LiquidCrystalFast::write4bits(unsigned char)>
    6772:	4b19      	ldr	r3, [pc, #100]	; (67d8 <L_1554_delayMicroseconds+0x38>)

00006774 <L_1508_delayMicroseconds>:
    6774:	3b01      	subs	r3, #1
    6776:	d1fd      	bne.n	6774 <L_1508_delayMicroseconds>
	delayMicroseconds(5000); // I have one LCD for which 4500 here was not long enough.
	// second try
	write4bits(0x03);      
    6778:	2103      	movs	r1, #3
    677a:	4628      	mov	r0, r5
    677c:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    6780:	f7ff ffa6 	bl	66d0 <LiquidCrystalFast::write4bits(unsigned char)>
    6784:	4633      	mov	r3, r6

00006786 <L_1527_delayMicroseconds>:
    6786:	3b01      	subs	r3, #1
    6788:	d1fd      	bne.n	6786 <L_1527_delayMicroseconds>
	delayMicroseconds(150); // wait 
	// third go!
	write4bits(0x03); 
    678a:	2103      	movs	r1, #3
    678c:	4628      	mov	r0, r5
    678e:	f7ff ff9f 	bl	66d0 <LiquidCrystalFast::write4bits(unsigned char)>
    6792:	4633      	mov	r3, r6

00006794 <L_1541_delayMicroseconds>:
    6794:	3b01      	subs	r3, #1
    6796:	d1fd      	bne.n	6794 <L_1541_delayMicroseconds>
	delayMicroseconds(150);
	// finally, set to 4-bit interface
	write4bits(0x02); 
    6798:	2102      	movs	r1, #2
    679a:	4628      	mov	r0, r5
    679c:	f7ff ff98 	bl	66d0 <LiquidCrystalFast::write4bits(unsigned char)>

000067a0 <L_1554_delayMicroseconds>:
    67a0:	3e01      	subs	r6, #1
    67a2:	d1fd      	bne.n	67a0 <L_1554_delayMicroseconds>
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    67a4:	4622      	mov	r2, r4
    67a6:	f047 0120 	orr.w	r1, r7, #32
    67aa:	4628      	mov	r0, r5
    67ac:	f7ff fe24 	bl	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
	
	// finally, set # lines, font size, etc.
	command(LCD_FUNCTIONSET | displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  display();
    67b0:	2304      	movs	r3, #4
    67b2:	772b      	strb	r3, [r5, #28]
	_displaycontrol &= ~LCD_DISPLAYON;
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);  //both chips
}
void LiquidCrystalFast::display() {
	_displaycontrol |= LCD_DISPLAYON;
	commandBoth(LCD_DISPLAYCONTROL | _displaycontrol);   //both chips
    67b4:	4628      	mov	r0, r5
    67b6:	210c      	movs	r1, #12
    67b8:	f7ff ff20 	bl	65fc <LiquidCrystalFast::commandBoth(unsigned char)>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  display();
	
	// clear it off
	clear();
    67bc:	4628      	mov	r0, r5
    67be:	f7ff feef 	bl	65a0 <LiquidCrystalFast::clear()>
	
	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    67c2:	2302      	movs	r3, #2
    67c4:	776b      	strb	r3, [r5, #29]
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    67c6:	4622      	mov	r2, r4
    67c8:	4628      	mov	r0, r5
    67ca:	2106      	movs	r1, #6
	
	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);	
}
    67cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/*************************************************/
/**  mid level commands, for sending data/cmds   */
/*************************************************/

inline void LiquidCrystalFast::command(uint8_t value) {
	send(value, LOW);
    67d0:	f7ff be12 	b.w	63f8 <LiquidCrystalFast::send(unsigned char, unsigned char)>
    67d4:	0002bf20 	.word	0x0002bf20
    67d8:	0001d4c0 	.word	0x0001d4c0

000067dc <LiquidCrystalFast::begin(unsigned char, unsigned char, unsigned char)>:
	begin(20, 1); 
	_rw_pin = rw;         //the game to initialize the 40x4 is over
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
	numlines=_numlines=lines;
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
    67de:	7e07      	ldrb	r7, [r0, #24]
	row_offsets[3] = cols + row_offsets[1];
    67e0:	7e46      	ldrb	r6, [r0, #25]
	begin2( cols,  lines,  dotsize, _enable_pin);
    67e2:	f890 e009 	ldrb.w	lr, [r0, #9]
	_rw_pin = rw;         //the game to initialize the 40x4 is over
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
    67e6:	7581      	strb	r1, [r0, #22]
	begin(20, 1); 
	_rw_pin = rw;         //the game to initialize the 40x4 is over
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    67e8:	b083      	sub	sp, #12
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
	numlines=_numlines=lines;
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
    67ea:	440f      	add	r7, r1
	row_offsets[3] = cols + row_offsets[1];
    67ec:	440e      	add	r6, r1
	begin(20, 1); 
	_rw_pin = rw;         //the game to initialize the 40x4 is over
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    67ee:	4604      	mov	r4, r0
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
	numlines=_numlines=lines;
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
    67f0:	7687      	strb	r7, [r0, #26]
	row_offsets[3] = cols + row_offsets[1];
    67f2:	76c6      	strb	r6, [r0, #27]
	_rw_pin = rw;         //the game to initialize the 40x4 is over
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
    67f4:	7181      	strb	r1, [r0, #6]
	numlines=_numlines=lines;
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
	row_offsets[3] = cols + row_offsets[1];
	begin2( cols,  lines,  dotsize, _enable_pin);
    67f6:	f8cd e000 	str.w	lr, [sp]
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
	numlines=_numlines=lines;
    67fa:	75c2      	strb	r2, [r0, #23]
    67fc:	7142      	strb	r2, [r0, #5]
	begin(20, 1); 
	_rw_pin = rw;         //the game to initialize the 40x4 is over
}

void LiquidCrystalFast::begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
    67fe:	461e      	mov	r6, r3
    6800:	460d      	mov	r5, r1
    6802:	4617      	mov	r7, r2
	numcols=_numcols=cols;    //there is an implied lack of trust; the private version can't be munged up by the user.
	numlines=_numlines=lines;
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
	row_offsets[3] = cols + row_offsets[1];
	begin2( cols,  lines,  dotsize, _enable_pin);
    6804:	f7ff ff8e 	bl	6724 <LiquidCrystalFast::begin2(unsigned char, unsigned char, unsigned char, unsigned char)>
	
	if (_en2 != 255) {                      //if we were called with a 2nd enable line i.e. 4x40 LCD
    6808:	7aa3      	ldrb	r3, [r4, #10]
    680a:	2bff      	cmp	r3, #255	; 0xff
    680c:	d010      	beq.n	6830 <LiquidCrystalFast::begin(unsigned char, unsigned char, unsigned char)+0x54>
		row_offsets[2] = 0;
		row_offsets[3] = 0x40;             //each line gets its own little 40 char section of DDRAM--would be fine if there were a 4x32, I suppose
		_chip = 2;
    680e:	2002      	movs	r0, #2
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
	row_offsets[3] = cols + row_offsets[1];
	begin2( cols,  lines,  dotsize, _enable_pin);
	
	if (_en2 != 255) {                      //if we were called with a 2nd enable line i.e. 4x40 LCD
		row_offsets[2] = 0;
    6810:	f04f 0c00 	mov.w	ip, #0
		row_offsets[3] = 0x40;             //each line gets its own little 40 char section of DDRAM--would be fine if there were a 4x32, I suppose
    6814:	f04f 0e40 	mov.w	lr, #64	; 0x40
		_chip = 2;
		begin2( cols,  lines,  dotsize,_en2);//initialize the second HD44780 chip
    6818:	9300      	str	r3, [sp, #0]
    681a:	463a      	mov	r2, r7
	begin2( cols,  lines,  dotsize, _enable_pin);
	
	if (_en2 != 255) {                      //if we were called with a 2nd enable line i.e. 4x40 LCD
		row_offsets[2] = 0;
		row_offsets[3] = 0x40;             //each line gets its own little 40 char section of DDRAM--would be fine if there were a 4x32, I suppose
		_chip = 2;
    681c:	72e0      	strb	r0, [r4, #11]
		begin2( cols,  lines,  dotsize,_en2);//initialize the second HD44780 chip
    681e:	4633      	mov	r3, r6
    6820:	4629      	mov	r1, r5
	row_offsets[2] = cols + row_offsets[0];  //should autoadjust for 16/20 or whatever columns now
	row_offsets[3] = cols + row_offsets[1];
	begin2( cols,  lines,  dotsize, _enable_pin);
	
	if (_en2 != 255) {                      //if we were called with a 2nd enable line i.e. 4x40 LCD
		row_offsets[2] = 0;
    6822:	f884 c01a 	strb.w	ip, [r4, #26]
		row_offsets[3] = 0x40;             //each line gets its own little 40 char section of DDRAM--would be fine if there were a 4x32, I suppose
    6826:	f884 e01b 	strb.w	lr, [r4, #27]
		_chip = 2;
		begin2( cols,  lines,  dotsize,_en2);//initialize the second HD44780 chip
    682a:	4620      	mov	r0, r4
    682c:	f7ff ff7a 	bl	6724 <LiquidCrystalFast::begin2(unsigned char, unsigned char, unsigned char, unsigned char)>
	}
}
    6830:	b003      	add	sp, #12
    6832:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006834 <LiquidCrystalFast::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystalFast constructor is called).

void LiquidCrystalFast::init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
	uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
    6834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6838:	4604      	mov	r4, r0
	_rs_pin = rs;
	_rw_pin = 255;
	_enable_pin = enable;
	_en2 = en2;
	_chip = 0;
    683a:	2500      	movs	r5, #0
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystalFast constructor is called).

void LiquidCrystalFast::init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
	uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
    683c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    6840:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    6844:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    6848:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    684c:	f89d 7020 	ldrb.w	r7, [sp, #32]
	_rs_pin = rs;
    6850:	71e1      	strb	r1, [r4, #7]
	_rw_pin = 255;
    6852:	21ff      	movs	r1, #255	; 0xff
	_enable_pin = enable;
    6854:	7263      	strb	r3, [r4, #9]

void LiquidCrystalFast::init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
	uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
	_rs_pin = rs;
	_rw_pin = 255;
    6856:	7221      	strb	r1, [r4, #8]
	_y = 0;
	
	_setCursFlag = 0;
	_direction = LCD_Right;

	_data_pins[0] = d0;
    6858:	74a0      	strb	r0, [r4, #18]
	_data_pins[1] = d1;
	_data_pins[2] = d2;
	_data_pins[3] = d3; 

	pinMode(d0, OUTPUT); //set data pin modes
    685a:	2101      	movs	r1, #1
	uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
	_rs_pin = rs;
	_rw_pin = 255;
	_enable_pin = enable;
	_en2 = en2;
    685c:	72a7      	strb	r7, [r4, #10]
	_chip = 0;
    685e:	72e5      	strb	r5, [r4, #11]
	_scroll_count = 0;  //to fix the bug if we scroll and then setCursor w/o home() or clear()
    6860:	7325      	strb	r5, [r4, #12]
	_x = 0;
    6862:	7365      	strb	r5, [r4, #13]
	_y = 0;
    6864:	73a5      	strb	r5, [r4, #14]
	
	_setCursFlag = 0;
    6866:	73e5      	strb	r5, [r4, #15]
	_direction = LCD_Right;
    6868:	7425      	strb	r5, [r4, #16]

	_data_pins[0] = d0;
	_data_pins[1] = d1;
    686a:	f884 a013 	strb.w	sl, [r4, #19]
	_data_pins[2] = d2;
    686e:	f884 9014 	strb.w	r9, [r4, #20]
	_data_pins[3] = d3; 
    6872:	f884 8015 	strb.w	r8, [r4, #21]
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystalFast constructor is called).

void LiquidCrystalFast::init(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t en2,
	uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
    6876:	4616      	mov	r6, r2
	_data_pins[0] = d0;
	_data_pins[1] = d1;
	_data_pins[2] = d2;
	_data_pins[3] = d3; 

	pinMode(d0, OUTPUT); //set data pin modes
    6878:	f001 ff08 	bl	868c <pinMode>
	pinMode(d1, OUTPUT); 
    687c:	4650      	mov	r0, sl
    687e:	2101      	movs	r1, #1
    6880:	f001 ff04 	bl	868c <pinMode>
	pinMode(d2, OUTPUT); 
    6884:	4648      	mov	r0, r9
    6886:	2101      	movs	r1, #1
    6888:	f001 ff00 	bl	868c <pinMode>
	pinMode(d3, OUTPUT); 
    688c:	4640      	mov	r0, r8
    688e:	2101      	movs	r1, #1
    6890:	f001 fefc 	bl	868c <pinMode>

	row_offsets[0] = 00;   // DDRAM addresses inside the HD44780 are strange: 0-nColumns-1 on line 0
	row_offsets[1] = 0x40; // 64-(63+nColumns) for line 1
    6894:	2140      	movs	r1, #64	; 0x40
	row_offsets[2] = 0x14; // 20- (19+nColumns) for line 2 --- NOTHING FROM 40-63 !
    6896:	2214      	movs	r2, #20
	row_offsets[3] = 0x54; // 84 - (83+nColumns) for line 3  -- so 80 characters tops out at #103 !
    6898:	2354      	movs	r3, #84	; 0x54
	pinMode(d1, OUTPUT); 
	pinMode(d2, OUTPUT); 
	pinMode(d3, OUTPUT); 

	row_offsets[0] = 00;   // DDRAM addresses inside the HD44780 are strange: 0-nColumns-1 on line 0
	row_offsets[1] = 0x40; // 64-(63+nColumns) for line 1
    689a:	7661      	strb	r1, [r4, #25]
	pinMode(d0, OUTPUT); //set data pin modes
	pinMode(d1, OUTPUT); 
	pinMode(d2, OUTPUT); 
	pinMode(d3, OUTPUT); 

	row_offsets[0] = 00;   // DDRAM addresses inside the HD44780 are strange: 0-nColumns-1 on line 0
    689c:	7625      	strb	r5, [r4, #24]
	row_offsets[1] = 0x40; // 64-(63+nColumns) for line 1
	row_offsets[2] = 0x14; // 20- (19+nColumns) for line 2 --- NOTHING FROM 40-63 !
    689e:	76a2      	strb	r2, [r4, #26]
	row_offsets[3] = 0x54; // 84 - (83+nColumns) for line 3  -- so 80 characters tops out at #103 !
    68a0:	76e3      	strb	r3, [r4, #27]
	
	pinMode(_rs_pin, OUTPUT);
    68a2:	79e0      	ldrb	r0, [r4, #7]
    68a4:	2101      	movs	r1, #1
    68a6:	f001 fef1 	bl	868c <pinMode>
	// we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
	if (rw != 255) { 
    68aa:	2eff      	cmp	r6, #255	; 0xff
    68ac:	d007      	beq.n	68be <LiquidCrystalFast::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x8a>
		pinMode(rw, OUTPUT);  //once in init does it
    68ae:	2101      	movs	r1, #1
    68b0:	4630      	mov	r0, r6
    68b2:	f001 feeb 	bl	868c <pinMode>
		digitalWrite(rw,LOW); //write data to LCD mode
    68b6:	4629      	mov	r1, r5
    68b8:	4630      	mov	r0, r6
    68ba:	f001 fed3 	bl	8664 <digitalWrite>
	}
	pinMode(_enable_pin, OUTPUT);
    68be:	2101      	movs	r1, #1
    68c0:	7a60      	ldrb	r0, [r4, #9]
    68c2:	f001 fee3 	bl	868c <pinMode>
	if( en2 != 255) pinMode(en2,OUTPUT);  //4X40 LCD
    68c6:	2fff      	cmp	r7, #255	; 0xff
    68c8:	d003      	beq.n	68d2 <LiquidCrystalFast::init(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9e>
    68ca:	4638      	mov	r0, r7
    68cc:	2101      	movs	r1, #1
    68ce:	f001 fedd 	bl	868c <pinMode>

	begin(20, 1); 
    68d2:	2300      	movs	r3, #0
    68d4:	2201      	movs	r2, #1
    68d6:	2114      	movs	r1, #20
    68d8:	4620      	mov	r0, r4
    68da:	f7ff ff7f 	bl	67dc <LiquidCrystalFast::begin(unsigned char, unsigned char, unsigned char)>
	_rw_pin = rw;         //the game to initialize the 40x4 is over
    68de:	7226      	strb	r6, [r4, #8]
    68e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000068e4 <Bounce::Bounce(unsigned char, unsigned long)>:

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    68e4:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68e6:	4b09      	ldr	r3, [pc, #36]	; (690c <Bounce::Bounce(unsigned char, unsigned long)+0x28>)
       }


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
    68e8:	6042      	str	r2, [r0, #4]

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    68ea:	b083      	sub	sp, #12
    68ec:	681b      	ldr	r3, [r3, #0]
    68ee:	9301      	str	r3, [sp, #4]
    68f0:	460d      	mov	r5, r1
	return ret;
    68f2:	9b01      	ldr	r3, [sp, #4]
{
	interval(interval_millis);
	previous_millis = millis();
    68f4:	6003      	str	r3, [r0, #0]


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    68f6:	2100      	movs	r1, #0

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    68f8:	4604      	mov	r4, r0


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    68fa:	6081      	str	r1, [r0, #8]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    68fc:	4628      	mov	r0, r5
    68fe:	f001 feb7 	bl	8670 <digitalRead>
    6902:	7320      	strb	r0, [r4, #12]
    this->pin = pin;
}
    6904:	4620      	mov	r0, r4
Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    this->pin = pin;
    6906:	7365      	strb	r5, [r4, #13]
}
    6908:	b003      	add	sp, #12
    690a:	bd30      	pop	{r4, r5, pc}
    690c:	1fff959c 	.word	0x1fff959c

00006910 <Bounce::read()>:


int Bounce::read()
{
	return (int)state;
}
    6910:	7b00      	ldrb	r0, [r0, #12]
    6912:	4770      	bx	lr

00006914 <Bounce::debounce()>:


// Protected: debounces the pin
int Bounce::debounce() {
    6914:	b530      	push	{r4, r5, lr}
    6916:	4604      	mov	r4, r0
    6918:	b083      	sub	sp, #12
	
	uint8_t newState = digitalRead(pin);
    691a:	7b40      	ldrb	r0, [r0, #13]
    691c:	f001 fea8 	bl	8670 <digitalRead>
	if (state != newState ) {
    6920:	7b23      	ldrb	r3, [r4, #12]
    6922:	4283      	cmp	r3, r0
    6924:	d010      	beq.n	6948 <Bounce::debounce()+0x34>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6926:	4a0a      	ldr	r2, [pc, #40]	; (6950 <Bounce::debounce()+0x3c>)
  		if (millis() - previous_millis >= interval_millis) {
    6928:	6825      	ldr	r5, [r4, #0]
    692a:	6813      	ldr	r3, [r2, #0]
    692c:	9300      	str	r3, [sp, #0]
	return ret;
    692e:	9b00      	ldr	r3, [sp, #0]
    6930:	6861      	ldr	r1, [r4, #4]
    6932:	1b5b      	subs	r3, r3, r5
    6934:	428b      	cmp	r3, r1
    6936:	d307      	bcc.n	6948 <Bounce::debounce()+0x34>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6938:	6813      	ldr	r3, [r2, #0]
    693a:	9301      	str	r3, [sp, #4]
	return ret;
    693c:	9b01      	ldr	r3, [sp, #4]
  			previous_millis = millis();
  			state = newState;
    693e:	7320      	strb	r0, [r4, #12]
  			return 1;
    6940:	2001      	movs	r0, #1
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
    6942:	6023      	str	r3, [r4, #0]
	}
  }
  
  return 0;
	
}
    6944:	b003      	add	sp, #12
    6946:	bd30      	pop	{r4, r5, pc}
  			state = newState;
  			return 1;
	}
  }
  
  return 0;
    6948:	2000      	movs	r0, #0
	
}
    694a:	b003      	add	sp, #12
    694c:	bd30      	pop	{r4, r5, pc}
    694e:	bf00      	nop
    6950:	1fff959c 	.word	0x1fff959c

00006954 <Bounce::update()>:
}



int Bounce::update()
{
    6954:	b530      	push	{r4, r5, lr}
    6956:	b083      	sub	sp, #12
    6958:	4604      	mov	r4, r0
	if ( debounce() ) {
    695a:	f7ff ffdb 	bl	6914 <Bounce::debounce()>
    695e:	b9b0      	cbnz	r0, 698e <Bounce::update()+0x3a>
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    6960:	68a3      	ldr	r3, [r4, #8]
    6962:	b91b      	cbnz	r3, 696c <Bounce::update()+0x18>
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
	}

	return stateChanged = 0;
    6964:	2300      	movs	r3, #0
    6966:	73a3      	strb	r3, [r4, #14]
}
    6968:	b003      	add	sp, #12
    696a:	bd30      	pop	{r4, r5, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    696c:	490b      	ldr	r1, [pc, #44]	; (699c <Bounce::update()+0x48>)
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    696e:	6825      	ldr	r5, [r4, #0]
    6970:	680a      	ldr	r2, [r1, #0]
    6972:	9200      	str	r2, [sp, #0]
	return ret;
    6974:	9a00      	ldr	r2, [sp, #0]
    6976:	1b52      	subs	r2, r2, r5
    6978:	4293      	cmp	r3, r2
    697a:	d8f3      	bhi.n	6964 <Bounce::update()+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    697c:	680b      	ldr	r3, [r1, #0]
    697e:	9301      	str	r3, [sp, #4]
	return ret;
    6980:	9b01      	ldr	r3, [sp, #4]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    6982:	60a0      	str	r0, [r4, #8]
     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
    6984:	2001      	movs	r0, #1
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
    6986:	6023      	str	r3, [r4, #0]
		 rebounce(0);
		 return stateChanged = 1;
    6988:	73a0      	strb	r0, [r4, #14]
	}

	return stateChanged = 0;
}
    698a:	b003      	add	sp, #12
    698c:	bd30      	pop	{r4, r5, pc}

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    698e:	2001      	movs	r0, #1
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    6990:	2300      	movs	r3, #0
    6992:	60a3      	str	r3, [r4, #8]

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    6994:	73a0      	strb	r0, [r4, #14]
		 rebounce(0);
		 return stateChanged = 1;
	}

	return stateChanged = 0;
}
    6996:	b003      	add	sp, #12
    6998:	bd30      	pop	{r4, r5, pc}
    699a:	bf00      	nop
    699c:	1fff959c 	.word	0x1fff959c

000069a0 <Bounce::risingEdge()>:
  return 0;
	
}

// The risingEdge method is true for one scan after the de-bounced input goes from off-to-on.
bool  Bounce::risingEdge() { return stateChanged && state; }
    69a0:	7b83      	ldrb	r3, [r0, #14]
    69a2:	b123      	cbz	r3, 69ae <Bounce::risingEdge()+0xe>
    69a4:	7b00      	ldrb	r0, [r0, #12]
    69a6:	3000      	adds	r0, #0
    69a8:	bf18      	it	ne
    69aa:	2001      	movne	r0, #1
    69ac:	4770      	bx	lr
    69ae:	4618      	mov	r0, r3
    69b0:	4770      	bx	lr
    69b2:	bf00      	nop

000069b4 <Bounce::fallingEdge()>:
// The fallingEdge  method it true for one scan after the de-bounced input goes from on-to-off. 
bool  Bounce::fallingEdge() { return stateChanged && !state; }
    69b4:	7b83      	ldrb	r3, [r0, #14]
    69b6:	b123      	cbz	r3, 69c2 <Bounce::fallingEdge()+0xe>
    69b8:	7b00      	ldrb	r0, [r0, #12]
    69ba:	fab0 f080 	clz	r0, r0
    69be:	0940      	lsrs	r0, r0, #5
    69c0:	4770      	bx	lr
    69c2:	4618      	mov	r0, r3
    69c4:	4770      	bx	lr
    69c6:	bf00      	nop

000069c8 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    69c8:	b510      	push	{r4, lr}
    69ca:	b082      	sub	sp, #8
    69cc:	ab02      	add	r3, sp, #8
  return write(&val, 1);
    69ce:	6802      	ldr	r2, [r0, #0]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    69d0:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    69d4:	6854      	ldr	r4, [r2, #4]
    69d6:	4619      	mov	r1, r3
    69d8:	2201      	movs	r2, #1
    69da:	47a0      	blx	r4
}
    69dc:	b002      	add	sp, #8
    69de:	bd10      	pop	{r4, pc}

000069e0 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    69e0:	69c0      	ldr	r0, [r0, #28]
    69e2:	b138      	cbz	r0, 69f4 <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    69e4:	6983      	ldr	r3, [r0, #24]
    69e6:	68c0      	ldr	r0, [r0, #12]
    69e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
    69ec:	1a18      	subs	r0, r3, r0
    69ee:	4290      	cmp	r0, r2
    69f0:	bf28      	it	cs
    69f2:	4610      	movcs	r0, r2
}
    69f4:	4770      	bx	lr
    69f6:	bf00      	nop

000069f8 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    69f8:	69c3      	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    69fa:	b510      	push	{r4, lr}
    69fc:	4604      	mov	r4, r0
  size_t t;
  if (!_file) {
    69fe:	b13b      	cbz	r3, 6a10 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    6a00:	2000      	movs	r0, #0
    6a02:	7118      	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    6a04:	69e0      	ldr	r0, [r4, #28]
    6a06:	f001 f935 	bl	7c74 <SdFile::write(void const*, unsigned int)>
    6a0a:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    6a0c:	791b      	ldrb	r3, [r3, #4]
    6a0e:	b11b      	cbz	r3, 6a18 <File::write(unsigned char const*, unsigned int)+0x20>
    6a10:	2301      	movs	r3, #1
    6a12:	7123      	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    6a14:	2000      	movs	r0, #0
    6a16:	bd10      	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    6a18:	bd10      	pop	{r4, pc}
    6a1a:	bf00      	nop

00006a1c <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    6a1c:	69c0      	ldr	r0, [r0, #28]
    6a1e:	b178      	cbz	r0, 6a40 <File::read()+0x24>
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    6a20:	b500      	push	{lr}
    6a22:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    6a24:	2201      	movs	r2, #1
    6a26:	f10d 0107 	add.w	r1, sp, #7
    6a2a:	f000 ff01 	bl	7830 <SdFile::read(void*, unsigned int)>
    6a2e:	2801      	cmp	r0, #1
    6a30:	bf0c      	ite	eq
    6a32:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    6a36:	f04f 30ff 	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    6a3a:	b003      	add	sp, #12
    6a3c:	f85d fb04 	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    6a40:	f04f 30ff 	mov.w	r0, #4294967295
    6a44:	4770      	bx	lr
    6a46:	bf00      	nop

00006a48 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    6a48:	69c3      	ldr	r3, [r0, #28]
    6a4a:	b1c3      	cbz	r3, 6a7e <File::peek()+0x36>
    return 0;
  }
  return t;
}

int File::peek() {
    6a4c:	b510      	push	{r4, lr}
    6a4e:	b082      	sub	sp, #8
    6a50:	4604      	mov	r4, r0
    6a52:	2201      	movs	r2, #1
    6a54:	4618      	mov	r0, r3
    6a56:	f10d 0107 	add.w	r1, sp, #7
    6a5a:	f000 fee9 	bl	7830 <SdFile::read(void*, unsigned int)>
    6a5e:	2801      	cmp	r0, #1
    6a60:	d003      	beq.n	6a6a <File::peek()+0x22>
    6a62:	f04f 30ff 	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6a66:	b002      	add	sp, #8
    6a68:	bd10      	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    6a6a:	69e0      	ldr	r0, [r4, #28]
    6a6c:	f89d 4007 	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    6a70:	68c1      	ldr	r1, [r0, #12]
    6a72:	3901      	subs	r1, #1
    6a74:	f000 ff8e 	bl	7994 <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    6a78:	4620      	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6a7a:	b002      	add	sp, #8
    6a7c:	bd10      	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    6a7e:	4618      	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6a80:	4770      	bx	lr
    6a82:	bf00      	nop

00006a84 <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    6a84:	69c0      	ldr	r0, [r0, #28]
    6a86:	b108      	cbz	r0, 6a8c <File::flush()+0x8>
    _file->sync();
    6a88:	f000 bfb6 	b.w	79f8 <SdFile::sync()>
    6a8c:	4770      	bx	lr
    6a8e:	bf00      	nop

00006a90 <File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    6a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a94:	4605      	mov	r5, r0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6a9a:	4813      	ldr	r0, [pc, #76]	; (6ae8 <File::File(SdFile, char const*)+0x58>)
    6a9c:	60ab      	str	r3, [r5, #8]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    6a9e:	2300      	movs	r3, #0
    6aa0:	6028      	str	r0, [r5, #0]
    6aa2:	712b      	strb	r3, [r5, #4]
    6aa4:	732b      	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    6aa6:	2024      	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    6aa8:	460c      	mov	r4, r1
    6aaa:	4690      	mov	r8, r2
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    6aac:	f004 fa4c 	bl	af48 <malloc>
    6ab0:	61e8      	str	r0, [r5, #28]
  if (_file) {
    6ab2:	b1b0      	cbz	r0, 6ae2 <File::File(SdFile, char const*)+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    6ab4:	4606      	mov	r6, r0
    6ab6:	f104 0e20 	add.w	lr, r4, #32
    6aba:	6820      	ldr	r0, [r4, #0]
    6abc:	6861      	ldr	r1, [r4, #4]
    6abe:	68a2      	ldr	r2, [r4, #8]
    6ac0:	68e3      	ldr	r3, [r4, #12]
    6ac2:	4637      	mov	r7, r6
    6ac4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    6ac6:	3410      	adds	r4, #16
    6ac8:	4574      	cmp	r4, lr
    6aca:	463e      	mov	r6, r7
    6acc:	d1f5      	bne.n	6aba <File::File(SdFile, char const*)+0x2a>
    6ace:	6820      	ldr	r0, [r4, #0]
    6ad0:	6038      	str	r0, [r7, #0]
    
    strncpy(_name, n, 12);
    6ad2:	4641      	mov	r1, r8
    6ad4:	220c      	movs	r2, #12
    6ad6:	f105 000d 	add.w	r0, r5, #13
    6ada:	f005 f93f 	bl	bd5c <strncpy>
    _name[12] = 0;
    6ade:	2300      	movs	r3, #0
    6ae0:	766b      	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    6ae2:	4628      	mov	r0, r5
    6ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ae8:	0001089c 	.word	0x0001089c

00006aec <File::File()>:
    6aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

File::File(void) {
    6af0:	4904      	ldr	r1, [pc, #16]	; (6b04 <File::File()+0x18>)
    6af2:	6082      	str	r2, [r0, #8]
    6af4:	2200      	movs	r2, #0
    6af6:	6001      	str	r1, [r0, #0]
    6af8:	7102      	strb	r2, [r0, #4]
    6afa:	7302      	strb	r2, [r0, #12]
  _file = 0;
    6afc:	61c2      	str	r2, [r0, #28]
  _name[0] = 0;
    6afe:	7342      	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    6b00:	4770      	bx	lr
    6b02:	bf00      	nop
    6b04:	0001089c 	.word	0x0001089c

00006b08 <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    6b08:	4770      	bx	lr
    6b0a:	bf00      	nop

00006b0c <File::seek(unsigned long)>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    6b0c:	69c0      	ldr	r0, [r0, #28]
    6b0e:	b130      	cbz	r0, 6b1e <File::seek(unsigned long)+0x12>
void File::flush() {
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
    6b10:	b508      	push	{r3, lr}
  if (! _file) return false;

  return _file->seekSet(pos);
    6b12:	f000 ff3f 	bl	7994 <SdFile::seekSet(unsigned long)>
    6b16:	3000      	adds	r0, #0
    6b18:	bf18      	it	ne
    6b1a:	2001      	movne	r0, #1
}
    6b1c:	bd08      	pop	{r3, pc}
    6b1e:	4770      	bx	lr

00006b20 <File::close()>:
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    6b20:	69c3      	ldr	r3, [r0, #28]
    6b22:	b153      	cbz	r3, 6b3a <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    6b24:	b510      	push	{r4, lr}
    6b26:	4604      	mov	r4, r0
  if (_file) {
    _file->close();
    6b28:	4618      	mov	r0, r3
    6b2a:	f000 fe09 	bl	7740 <SdFile::close()>
    free(_file); 
    6b2e:	69e0      	ldr	r0, [r4, #28]
    6b30:	f004 fa12 	bl	af58 <free>
    _file = 0;
    6b34:	2300      	movs	r3, #0
    6b36:	61e3      	str	r3, [r4, #28]
    6b38:	bd10      	pop	{r4, pc}
    6b3a:	4770      	bx	lr

00006b3c <File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    6b3c:	69c0      	ldr	r0, [r0, #28]
    6b3e:	b118      	cbz	r0, 6b48 <File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    6b40:	7980      	ldrb	r0, [r0, #6]
    6b42:	3000      	adds	r0, #0
    6b44:	bf18      	it	ne
    6b46:	2001      	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    6b48:	4770      	bx	lr
    6b4a:	bf00      	nop

00006b4c <callback_pathExists(SdFile&, char*, bool, void*)>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, char *filePathComponent, 
			    boolean isLastComponent, void *object) {
    6b4c:	b530      	push	{r4, r5, lr}
    6b4e:	b08b      	sub	sp, #44	; 0x2c
    6b50:	2400      	movs	r4, #0
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    6b52:	460a      	mov	r2, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6b54:	4d0a      	ldr	r5, [pc, #40]	; (6b80 <callback_pathExists(SdFile&, char*, bool, void*)+0x34>)
    6b56:	f88d 4008 	strb.w	r4, [sp, #8]
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    6b5a:	4601      	mov	r1, r0
    6b5c:	2301      	movs	r3, #1
    6b5e:	a801      	add	r0, sp, #4
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6b60:	f88d 400a 	strb.w	r4, [sp, #10]
    6b64:	9501      	str	r5, [sp, #4]
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    6b66:	f001 f87b 	bl	7c60 <SdFile::open(SdFile*, char const*, unsigned char)>
    Returns true if file path exists.

  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
    6b6a:	42a0      	cmp	r0, r4
    6b6c:	bf18      	it	ne
    6b6e:	2401      	movne	r4, #1
  
  if (exists) {
    6b70:	d002      	beq.n	6b78 <callback_pathExists(SdFile&, char*, bool, void*)+0x2c>
     child.close(); 
    6b72:	a801      	add	r0, sp, #4
    6b74:	f000 fde4 	bl	7740 <SdFile::close()>
  }
  
  return exists;
}
    6b78:	4620      	mov	r0, r4
    6b7a:	b00b      	add	sp, #44	; 0x2c
    6b7c:	bd30      	pop	{r4, r5, pc}
    6b7e:	bf00      	nop
    6b80:	000108c4 	.word	0x000108c4

00006b84 <getNextPathComponent(char const*, unsigned int*, char*)>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    6b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    6b86:	680e      	ldr	r6, [r1, #0]

  // Skip root or other separator
  if (path[offset] == '/') {
    6b88:	5d83      	ldrb	r3, [r0, r6]
    6b8a:	2b2f      	cmp	r3, #47	; 0x2f
    offset++;
    6b8c:	bf08      	it	eq
    6b8e:	3601      	addeq	r6, #1
    6b90:	1984      	adds	r4, r0, r6
    6b92:	f102 3eff 	add.w	lr, r2, #4294967295
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    6b96:	2500      	movs	r5, #0
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    6b98:	7823      	ldrb	r3, [r4, #0]
    6b9a:	2b2f      	cmp	r3, #47	; 0x2f
    6b9c:	4627      	mov	r7, r4
    6b9e:	f104 0401 	add.w	r4, r4, #1
    6ba2:	d008      	beq.n	6bb6 <getNextPathComponent(char const*, unsigned int*, char*)+0x32>
	 && (path[offset] != '\0')) {
    6ba4:	b13b      	cbz	r3, 6bb6 <getNextPathComponent(char const*, unsigned int*, char*)+0x32>
    buffer[bufferOffset++] = path[offset++];
    6ba6:	3501      	adds	r5, #1
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    6ba8:	2d0c      	cmp	r5, #12
    buffer[bufferOffset++] = path[offset++];
    6baa:	f106 0601 	add.w	r6, r6, #1
    6bae:	f80e 3f01 	strb.w	r3, [lr, #1]!
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    6bb2:	d1f1      	bne.n	6b98 <getNextPathComponent(char const*, unsigned int*, char*)+0x14>
    6bb4:	1987      	adds	r7, r0, r6
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    6bb6:	2300      	movs	r3, #0
    6bb8:	5553      	strb	r3, [r2, r5]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    6bba:	783b      	ldrb	r3, [r7, #0]
    6bbc:	2b2f      	cmp	r3, #47	; 0x2f
    6bbe:	bf04      	itt	eq
    6bc0:	3601      	addeq	r6, #1
    6bc2:	1987      	addeq	r7, r0, r6
    offset++;
  }

  *p_offset = offset;
    6bc4:	600e      	str	r6, [r1, #0]

  return (path[offset] != '\0');
    6bc6:	7838      	ldrb	r0, [r7, #0]
}
    6bc8:	3000      	adds	r0, #0
    6bca:	bf18      	it	ne
    6bcc:	2001      	movne	r0, #1
    6bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006bd0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>:
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    6bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bd4:	b099      	sub	sp, #100	; 0x64
    6bd6:	4688      	mov	r8, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6bd8:	4d26      	ldr	r5, [pc, #152]	; (6c74 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0xa4>)
    6bda:	9506      	str	r5, [sp, #24]
    6bdc:	2100      	movs	r1, #0
    6bde:	f88d 101c 	strb.w	r1, [sp, #28]
    6be2:	4683      	mov	fp, r0
    6be4:	4692      	mov	sl, r2
    6be6:	4699      	mov	r9, r3
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    6be8:	4644      	mov	r4, r8
    6bea:	f88d 101e 	strb.w	r1, [sp, #30]
    6bee:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    6bf2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    6bf6:	9101      	str	r1, [sp, #4]
    6bf8:	950f      	str	r5, [sp, #60]	; 0x3c
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    6bfa:	ae06      	add	r6, sp, #24
    6bfc:	e005      	b.n	6c0a <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x3a>
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
      (*p_parent).close();
    6bfe:	f000 fd9f 	bl	7740 <SdFile::close()>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    6c02:	b1fd      	cbz	r5, 6c44 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    6c04:	4623      	mov	r3, r4
    6c06:	4634      	mov	r4, r6
    6c08:	461e      	mov	r6, r3
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    6c0a:	aa02      	add	r2, sp, #8
    6c0c:	a901      	add	r1, sp, #4
    6c0e:	4658      	mov	r0, fp
    6c10:	f7ff ffb8 	bl	6b84 <getNextPathComponent(char const*, unsigned int*, char*)>

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    6c14:	f080 0201 	eor.w	r2, r0, #1
    6c18:	b2d2      	uxtb	r2, r2
    6c1a:	464b      	mov	r3, r9
    6c1c:	a902      	add	r1, sp, #8
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    6c1e:	4605      	mov	r5, r0

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    6c20:	4620      	mov	r0, r4
    6c22:	47d0      	blx	sl
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    6c24:	4621      	mov	r1, r4

    if (!shouldContinue) {
    6c26:	4607      	mov	r7, r0
    6c28:	2301      	movs	r3, #1
    6c2a:	aa02      	add	r2, sp, #8
    6c2c:	b170      	cbz	r0, 6c4c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x7c>
    6c2e:	4630      	mov	r0, r6
        (*p_parent).close();
      }
      return false;
    }
    
    if (!moreComponents) {
    6c30:	b1ad      	cbz	r5, 6c5e <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x8e>
    6c32:	f001 f815 	bl	7c60 <SdFile::open(SdFile*, char const*, unsigned char)>
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    6c36:	4544      	cmp	r4, r8
    6c38:	4605      	mov	r5, r0
      (*p_parent).close();
    6c3a:	4620      	mov	r0, r4
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    6c3c:	d1df      	bne.n	6bfe <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x2e>
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    6c3e:	b10d      	cbz	r5, 6c44 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    6c40:	ac0f      	add	r4, sp, #60	; 0x3c
    6c42:	e7df      	b.n	6c04 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x34>
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
      }
      return false;
    6c44:	2000      	movs	r0, #0
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    6c46:	b019      	add	sp, #100	; 0x64
    6c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    6c4c:	4544      	cmp	r4, r8
    6c4e:	d0f9      	beq.n	6c44 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
        (*p_parent).close();
    6c50:	4620      	mov	r0, r4
    6c52:	f000 fd75 	bl	7740 <SdFile::close()>
      }
      return false;
    6c56:	4638      	mov	r0, r7
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    6c58:	b019      	add	sp, #100	; 0x64
    6c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    6c5e:	4544      	cmp	r4, r8
    6c60:	d006      	beq.n	6c70 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0xa0>
    (*p_parent).close(); // TODO: Return/ handle different?
    6c62:	4620      	mov	r0, r4
    6c64:	f000 fd6c 	bl	7740 <SdFile::close()>
  }

  return true;
    6c68:	2001      	movs	r0, #1
}
    6c6a:	b019      	add	sp, #100	; 0x64
    6c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    6c70:	2001      	movs	r0, #1
    6c72:	e7e8      	b.n	6c46 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x76>
    6c74:	000108c4 	.word	0x000108c4

00006c78 <SDClass::begin(unsigned char)>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    6c78:	b538      	push	{r3, r4, r5, lr}
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
      return (ret == 0) ? true : false;
    }
    #endif
    return SD_init(sckRateID, chipSelectPin);
    6c7a:	460a      	mov	r2, r1
    6c7c:	2101      	movs	r1, #1
    6c7e:	4604      	mov	r4, r0
    6c80:	f000 fa64 	bl	714c <Sd2Card::SD_init(unsigned char, unsigned char)>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    6c84:	b908      	cbnz	r0, 6c8a <SDClass::begin(unsigned char)+0x12>
    6c86:	2000      	movs	r0, #0
    6c88:	bd38      	pop	{r3, r4, r5, pc}
    6c8a:	1d25      	adds	r5, r4, #4
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    6c8c:	4628      	mov	r0, r5
    6c8e:	2201      	movs	r2, #1
    6c90:	4621      	mov	r1, r4
    6c92:	f001 fab1 	bl	81f8 <SdVolume::init(Sd2Card*, unsigned char)>
    6c96:	b140      	cbz	r0, 6caa <SDClass::begin(unsigned char)+0x32>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6c98:	4629      	mov	r1, r5
    6c9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6c9e:	f000 fd9f 	bl	77e0 <SdFile::openRoot(SdVolume*)>
    6ca2:	3000      	adds	r0, #0
    6ca4:	bf18      	it	ne
    6ca6:	2001      	movne	r0, #1
    6ca8:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    6caa:	4602      	mov	r2, r0
    6cac:	4621      	mov	r1, r4
    6cae:	4628      	mov	r0, r5
    6cb0:	f001 faa2 	bl	81f8 <SdVolume::init(Sd2Card*, unsigned char)>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    6cb4:	2800      	cmp	r0, #0
    6cb6:	d1ef      	bne.n	6c98 <SDClass::begin(unsigned char)+0x20>
         volume.init(card) &&
    6cb8:	2000      	movs	r0, #0
    6cba:	bd38      	pop	{r3, r4, r5, pc}

00006cbc <SDClass::getParentDir(char const*, int*)>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    6cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc0:	b099      	sub	sp, #100	; 0x64
    6cc2:	f04f 0800 	mov.w	r8, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6cc6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 6db0 <SDClass::getParentDir(char const*, int*)+0xf4>
    6cca:	f88d 801c 	strb.w	r8, [sp, #28]
    6cce:	4681      	mov	r9, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6cd0:	3104      	adds	r1, #4
    6cd2:	a806      	add	r0, sp, #24
    6cd4:	4693      	mov	fp, r2
    6cd6:	9301      	str	r3, [sp, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6cd8:	f88d 801e 	strb.w	r8, [sp, #30]
    6cdc:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
    6ce0:	f88d 8042 	strb.w	r8, [sp, #66]	; 0x42
    6ce4:	f8cd a018 	str.w	sl, [sp, #24]
    6ce8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6cec:	f000 fd78 	bl	77e0 <SdFile::openRoot(SdVolume*)>
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    6cf0:	ae06      	add	r6, sp, #24
    6cf2:	465d      	mov	r5, fp
  SdFile *subdir = &d2;
    6cf4:	af0f      	add	r7, sp, #60	; 0x3c
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    6cf6:	212f      	movs	r1, #47	; 0x2f
    6cf8:	4628      	mov	r0, r5
    6cfa:	f004 fef5 	bl	bae8 <strchr>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    6cfe:	1b44      	subs	r4, r0, r5
    6d00:	b2e4      	uxtb	r4, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6d02:	4629      	mov	r1, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    6d04:	b308      	cbz	r0, 6d4a <SDClass::getParentDir(char const*, int*)+0x8e>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    6d06:	782b      	ldrb	r3, [r5, #0]
    6d08:	2b2f      	cmp	r3, #47	; 0x2f
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6d0a:	a802      	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    6d0c:	d01b      	beq.n	6d46 <SDClass::getParentDir(char const*, int*)+0x8a>
    6d0e:	2c0c      	cmp	r4, #12
    6d10:	bf28      	it	cs
    6d12:	240c      	movcs	r4, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6d14:	4622      	mov	r2, r4
    6d16:	f005 f821 	bl	bd5c <strncpy>
    subdirname[idx] = 0;
    6d1a:	ab18      	add	r3, sp, #96	; 0x60
    6d1c:	4423      	add	r3, r4

    // close the subdir (we reuse them) if open
    subdir->close();
    6d1e:	4638      	mov	r0, r7
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    6d20:	f803 8c58 	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    6d24:	f000 fd0c 	bl	7740 <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    6d28:	2301      	movs	r3, #1
    6d2a:	aa02      	add	r2, sp, #8
    6d2c:	4631      	mov	r1, r6
    6d2e:	4638      	mov	r0, r7
    6d30:	f000 ff96 	bl	7c60 <SdFile::open(SdFile*, char const*, unsigned char)>
    6d34:	b388      	cbz	r0, 6d9a <SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    6d36:	4630      	mov	r0, r6
    6d38:	f000 fd02 	bl	7740 <SdFile::close()>
    6d3c:	4633      	mov	r3, r6
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    6d3e:	4425      	add	r5, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    6d40:	463e      	mov	r6, r7
    6d42:	461f      	mov	r7, r3
    6d44:	e7d7      	b.n	6cf6 <SDClass::getParentDir(char const*, int*)+0x3a>

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    6d46:	3501      	adds	r5, #1
    6d48:	e7d5      	b.n	6cf6 <SDClass::getParentDir(char const*, int*)+0x3a>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    6d4a:	9801      	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    6d4c:	7931      	ldrb	r1, [r6, #4]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    6d4e:	7972      	ldrb	r2, [r6, #5]
    6d50:	79b3      	ldrb	r3, [r6, #6]
    6d52:	68b4      	ldr	r4, [r6, #8]
    6d54:	7d37      	ldrb	r7, [r6, #20]
    6d56:	ebcb 0505 	rsb	r5, fp, r5
    6d5a:	6005      	str	r5, [r0, #0]
    6d5c:	68f0      	ldr	r0, [r6, #12]
    6d5e:	6935      	ldr	r5, [r6, #16]
    6d60:	f889 1004 	strb.w	r1, [r9, #4]
    6d64:	f889 2005 	strb.w	r2, [r9, #5]
    6d68:	69b1      	ldr	r1, [r6, #24]
    6d6a:	f889 3006 	strb.w	r3, [r9, #6]
    6d6e:	69f2      	ldr	r2, [r6, #28]
    6d70:	6a33      	ldr	r3, [r6, #32]
    6d72:	f8c9 000c 	str.w	r0, [r9, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    6d76:	4648      	mov	r0, r9
    6d78:	f8c9 a000 	str.w	sl, [r9]
    6d7c:	f8c9 4008 	str.w	r4, [r9, #8]
    6d80:	f8c9 5010 	str.w	r5, [r9, #16]
    6d84:	f889 7014 	strb.w	r7, [r9, #20]
    6d88:	f8c9 1018 	str.w	r1, [r9, #24]
    6d8c:	f8c9 201c 	str.w	r2, [r9, #28]
    6d90:	f8c9 3020 	str.w	r3, [r9, #32]
    6d94:	b019      	add	sp, #100	; 0x64
    6d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  public:
	constexpr Print() : write_error(0) {}
    6d9a:	f889 0004 	strb.w	r0, [r9, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6d9e:	f889 0006 	strb.w	r0, [r9, #6]
    6da2:	4648      	mov	r0, r9
    6da4:	f8c9 a000 	str.w	sl, [r9]
    6da8:	b019      	add	sp, #100	; 0x64
    6daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6dae:	bf00      	nop
    6db0:	000108c4 	.word	0x000108c4

00006db4 <SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    6db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6db6:	b09d      	sub	sp, #116	; 0x74
    6db8:	4605      	mov	r5, r0
    6dba:	461f      	mov	r7, r3
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    6dbc:	a801      	add	r0, sp, #4
    6dbe:	466b      	mov	r3, sp
  // parent is now the parent diretory of the file!
  return *parent;
}


File SDClass::open(const char *filepath, uint8_t mode) {
    6dc0:	4614      	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    6dc2:	f7ff ff7b 	bl	6cbc <SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    6dc6:	9a00      	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    6dc8:	5ca3      	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    6dca:	4414      	add	r4, r2

  if (! filepath[0]) {
    6dcc:	2b00      	cmp	r3, #0
    6dce:	d042      	beq.n	6e56 <SDClass::open(char const*, unsigned char)+0xa2>

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    6dd0:	f89d 200a 	ldrb.w	r2, [sp, #10]
    6dd4:	4e2f      	ldr	r6, [pc, #188]	; (6e94 <SDClass::open(char const*, unsigned char)+0xe0>)
    6dd6:	960a      	str	r6, [sp, #40]	; 0x28
    6dd8:	2300      	movs	r3, #0
    6dda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    6dde:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    6de2:	2a00      	cmp	r2, #0
    6de4:	d031      	beq.n	6e4a <SDClass::open(char const*, unsigned char)+0x96>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    6de6:	a80a      	add	r0, sp, #40	; 0x28
    6de8:	463b      	mov	r3, r7
    6dea:	4622      	mov	r2, r4
    6dec:	a901      	add	r1, sp, #4
    6dee:	f000 ff37 	bl	7c60 <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    6df2:	b350      	cbz	r0, 6e4a <SDClass::open(char const*, unsigned char)+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    6df4:	a801      	add	r0, sp, #4
    6df6:	f000 fca3 	bl	7740 <SdFile::close()>

  if (mode & (O_APPEND | O_WRITE)) 
    6dfa:	f017 0f06 	tst.w	r7, #6
    6dfe:	d143      	bne.n	6e88 <SDClass::open(char const*, unsigned char)+0xd4>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    6e00:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    6e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6e06:	f89d e02d 	ldrb.w	lr, [sp, #45]	; 0x2d
    6e0a:	9613      	str	r6, [sp, #76]	; 0x4c
    file.seekSet(file.fileSize());
  return File(file, filepath);
    6e0c:	4622      	mov	r2, r4
    6e0e:	f89d 402e 	ldrb.w	r4, [sp, #46]	; 0x2e
    6e12:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    6e16:	f88d 4052 	strb.w	r4, [sp, #82]	; 0x52
    6e1a:	9315      	str	r3, [sp, #84]	; 0x54
    6e1c:	990d      	ldr	r1, [sp, #52]	; 0x34
    6e1e:	980e      	ldr	r0, [sp, #56]	; 0x38
    6e20:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    6e24:	9e10      	ldr	r6, [sp, #64]	; 0x40
    6e26:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6e2a:	f88d e051 	strb.w	lr, [sp, #81]	; 0x51
    6e2e:	9116      	str	r1, [sp, #88]	; 0x58
    6e30:	9017      	str	r0, [sp, #92]	; 0x5c
    6e32:	a913      	add	r1, sp, #76	; 0x4c
    6e34:	4628      	mov	r0, r5
    6e36:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
    6e3a:	9619      	str	r6, [sp, #100]	; 0x64
    6e3c:	941a      	str	r4, [sp, #104]	; 0x68
    6e3e:	931b      	str	r3, [sp, #108]	; 0x6c
    6e40:	f7ff fe26 	bl	6a90 <File::File(SdFile, char const*)>
}
    6e44:	4628      	mov	r0, r5
    6e46:	b01d      	add	sp, #116	; 0x74
    6e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    6e4a:	4628      	mov	r0, r5
    6e4c:	f7ff fe4e 	bl	6aec <File::File()>
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    6e50:	4628      	mov	r0, r5
    6e52:	b01d      	add	sp, #116	; 0x74
    6e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e56:	f89d 7008 	ldrb.w	r7, [sp, #8]
    6e5a:	4e0e      	ldr	r6, [pc, #56]	; (6e94 <SDClass::open(char const*, unsigned char)+0xe0>)
    6e5c:	f89d 4009 	ldrb.w	r4, [sp, #9]
    6e60:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6e64:	9a03      	ldr	r2, [sp, #12]
    6e66:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    6e6a:	9613      	str	r6, [sp, #76]	; 0x4c
    6e6c:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
    6e70:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    6e74:	9215      	str	r2, [sp, #84]	; 0x54
    6e76:	9904      	ldr	r1, [sp, #16]
    6e78:	9805      	ldr	r0, [sp, #20]
    6e7a:	f89d 7018 	ldrb.w	r7, [sp, #24]
    6e7e:	9e07      	ldr	r6, [sp, #28]
    6e80:	9c08      	ldr	r4, [sp, #32]
    6e82:	9b09      	ldr	r3, [sp, #36]	; 0x24

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    6e84:	4a04      	ldr	r2, [pc, #16]	; (6e98 <SDClass::open(char const*, unsigned char)+0xe4>)
    6e86:	e7d2      	b.n	6e2e <SDClass::open(char const*, unsigned char)+0x7a>
  }
  // close the parent
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
    6e88:	a80a      	add	r0, sp, #40	; 0x28
    6e8a:	9910      	ldr	r1, [sp, #64]	; 0x40
    6e8c:	f000 fd82 	bl	7994 <SdFile::seekSet(unsigned long)>
    6e90:	e7b6      	b.n	6e00 <SDClass::open(char const*, unsigned char)+0x4c>
    6e92:	bf00      	nop
    6e94:	000108c4 	.word	0x000108c4
    6e98:	000108b8 	.word	0x000108b8

00006e9c <SDClass::exists(char const*)>:
//   */
//  file.close();
//}


boolean SDClass::exists(const char *filepath) {
    6e9c:	b410      	push	{r4}
    6e9e:	460c      	mov	r4, r1
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    6ea0:	2300      	movs	r3, #0
    6ea2:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    6ea6:	4a02      	ldr	r2, [pc, #8]	; (6eb0 <SDClass::exists(char const*)+0x14>)
    6ea8:	4620      	mov	r0, r4
}
    6eaa:	bc10      	pop	{r4}
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    6eac:	f7ff be90 	b.w	6bd0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>
    6eb0:	00006b4d 	.word	0x00006b4d

00006eb4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    6eb4:	4b06      	ldr	r3, [pc, #24]	; (6ed0 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6eb6:	4a07      	ldr	r2, [pc, #28]	; (6ed4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    6eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    6eba:	2102      	movs	r1, #2
    6ebc:	2200      	movs	r2, #0
    6ebe:	6059      	str	r1, [r3, #4]
    6ec0:	709a      	strb	r2, [r3, #2]
    6ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
    6ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6eca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    6ece:	4770      	bx	lr
    6ed0:	1fff9330 	.word	0x1fff9330
    6ed4:	000108c4 	.word	0x000108c4

00006ed8 <spiInit(unsigned char)>:
static void spiBegin() {
  SIM_SCGC6 |= SIM_SCGC6_SPI0;
}

static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    6ed8:	2805      	cmp	r0, #5
    6eda:	d823      	bhi.n	6f24 <spiInit(unsigned char)+0x4c>
    6edc:	e8df f000 	tbb	[pc, r0]
    6ee0:	16100303 	.word	0x16100303
    6ee4:	0a1c      	.short	0x0a1c
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    6ee6:	4b12      	ldr	r3, [pc, #72]	; (6f30 <spiInit(unsigned char)+0x58>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    6ee8:	4812      	ldr	r0, [pc, #72]	; (6f34 <spiInit(unsigned char)+0x5c>)

static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    6eea:	f04f 4238 	mov.w	r2, #3087007744	; 0xb8000000
    6eee:	601a      	str	r2, [r3, #0]
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    6ef0:	f7ff ba40 	b.w	6374 <SPIClass::begin()>
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    6ef4:	4b0e      	ldr	r3, [pc, #56]	; (6f30 <spiInit(unsigned char)+0x58>)
    6ef6:	4a10      	ldr	r2, [pc, #64]	; (6f38 <spiInit(unsigned char)+0x60>)
    6ef8:	601a      	str	r2, [r3, #0]
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    6efa:	480e      	ldr	r0, [pc, #56]	; (6f34 <spiInit(unsigned char)+0x5c>)
    6efc:	f7ff ba3a 	b.w	6374 <SPIClass::begin()>
static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    6f00:	4b0b      	ldr	r3, [pc, #44]	; (6f30 <spiInit(unsigned char)+0x58>)
    6f02:	4a0e      	ldr	r2, [pc, #56]	; (6f3c <spiInit(unsigned char)+0x64>)
    6f04:	601a      	str	r2, [r3, #0]
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    6f06:	480b      	ldr	r0, [pc, #44]	; (6f34 <spiInit(unsigned char)+0x5c>)
    6f08:	f7ff ba34 	b.w	6374 <SPIClass::begin()>
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    6f0c:	4b08      	ldr	r3, [pc, #32]	; (6f30 <spiInit(unsigned char)+0x58>)
    6f0e:	4a0c      	ldr	r2, [pc, #48]	; (6f40 <spiInit(unsigned char)+0x68>)
    6f10:	601a      	str	r2, [r3, #0]
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    6f12:	4808      	ldr	r0, [pc, #32]	; (6f34 <spiInit(unsigned char)+0x5c>)
    6f14:	f7ff ba2e 	b.w	6374 <SPIClass::begin()>
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    6f18:	4b05      	ldr	r3, [pc, #20]	; (6f30 <spiInit(unsigned char)+0x58>)
    6f1a:	4a0a      	ldr	r2, [pc, #40]	; (6f44 <spiInit(unsigned char)+0x6c>)
    6f1c:	601a      	str	r2, [r3, #0]
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    6f1e:	4805      	ldr	r0, [pc, #20]	; (6f34 <spiInit(unsigned char)+0x5c>)
    6f20:	f7ff ba28 	b.w	6374 <SPIClass::begin()>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    6f24:	4b02      	ldr	r3, [pc, #8]	; (6f30 <spiInit(unsigned char)+0x58>)
    6f26:	4a08      	ldr	r2, [pc, #32]	; (6f48 <spiInit(unsigned char)+0x70>)
    6f28:	601a      	str	r2, [r3, #0]
  }
  SPI.begin();
    6f2a:	4802      	ldr	r0, [pc, #8]	; (6f34 <spiInit(unsigned char)+0x5c>)
    6f2c:	f7ff ba22 	b.w	6374 <SPIClass::begin()>
    6f30:	1fff9384 	.word	0x1fff9384
    6f34:	1fff8728 	.word	0x1fff8728
    6f38:	38020001 	.word	0x38020001
    6f3c:	b8020000 	.word	0xb8020000
    6f40:	38020000 	.word	0x38020000
    6f44:	38011001 	.word	0x38011001
    6f48:	38014005 	.word	0x38014005

00006f4c <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    6f4c:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    6f4e:	2101      	movs	r1, #1
    6f50:	7800      	ldrb	r0, [r0, #0]
    6f52:	f001 fb87 	bl	8664 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    6f56:	4a0e      	ldr	r2, [pc, #56]	; (6f90 <Sd2Card::chipSelectHigh()+0x44>)
    6f58:	7813      	ldrb	r3, [r2, #0]
    6f5a:	b193      	cbz	r3, 6f82 <Sd2Card::chipSelectHigh()+0x36>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    6f5c:	490d      	ldr	r1, [pc, #52]	; (6f94 <Sd2Card::chipSelectHigh()+0x48>)
    6f5e:	7acb      	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    6f60:	2400      	movs	r4, #0
    6f62:	4618      	mov	r0, r3
    6f64:	7014      	strb	r4, [r2, #0]
    6f66:	b163      	cbz	r3, 6f82 <Sd2Card::chipSelectHigh()+0x36>
			if (interruptMasksUsed & 0x01) {
    6f68:	07dc      	lsls	r4, r3, #31
    6f6a:	d503      	bpl.n	6f74 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    6f6c:	4a0a      	ldr	r2, [pc, #40]	; (6f98 <Sd2Card::chipSelectHigh()+0x4c>)
    6f6e:	6988      	ldr	r0, [r1, #24]
    6f70:	6010      	str	r0, [r2, #0]
    6f72:	4618      	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    6f74:	079a      	lsls	r2, r3, #30
    6f76:	d405      	bmi.n	6f84 <Sd2Card::chipSelectHigh()+0x38>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    6f78:	0743      	lsls	r3, r0, #29
    6f7a:	d502      	bpl.n	6f82 <Sd2Card::chipSelectHigh()+0x36>
				NVIC_ISER2 = interruptSave[2];
    6f7c:	4b07      	ldr	r3, [pc, #28]	; (6f9c <Sd2Card::chipSelectHigh()+0x50>)
    6f7e:	6a0a      	ldr	r2, [r1, #32]
    6f80:	601a      	str	r2, [r3, #0]
    6f82:	bd10      	pop	{r4, pc}
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    6f84:	4b06      	ldr	r3, [pc, #24]	; (6fa0 <Sd2Card::chipSelectHigh()+0x54>)
    6f86:	69ca      	ldr	r2, [r1, #28]
    6f88:	7ac8      	ldrb	r0, [r1, #11]
    6f8a:	601a      	str	r2, [r3, #0]
    6f8c:	e7f4      	b.n	6f78 <Sd2Card::chipSelectHigh()+0x2c>
    6f8e:	bf00      	nop
    6f90:	1fff9388 	.word	0x1fff9388
    6f94:	1fff8728 	.word	0x1fff8728
    6f98:	e000e100 	.word	0xe000e100
    6f9c:	e000e108 	.word	0xe000e108
    6fa0:	e000e104 	.word	0xe000e104

00006fa4 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    6fa4:	4b1e      	ldr	r3, [pc, #120]	; (7020 <Sd2Card::chipSelectLow()+0x7c>)
    6fa6:	781a      	ldrb	r2, [r3, #0]
    6fa8:	b11a      	cbz	r2, 6fb2 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    6faa:	7800      	ldrb	r0, [r0, #0]
    6fac:	2100      	movs	r1, #0
    6fae:	f001 bb59 	b.w	8664 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    6fb2:	b470      	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    6fb4:	4a1b      	ldr	r2, [pc, #108]	; (7024 <Sd2Card::chipSelectLow()+0x80>)
    6fb6:	491c      	ldr	r1, [pc, #112]	; (7028 <Sd2Card::chipSelectLow()+0x84>)
    6fb8:	7ad4      	ldrb	r4, [r2, #11]
    6fba:	6809      	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    6fbc:	2501      	movs	r5, #1
    6fbe:	701d      	strb	r5, [r3, #0]
    6fc0:	b1ec      	cbz	r4, 6ffe <Sd2Card::chipSelectLow()+0x5a>
			__disable_irq();
    6fc2:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6fc4:	7ad3      	ldrb	r3, [r2, #11]
    6fc6:	07de      	lsls	r6, r3, #31
    6fc8:	461c      	mov	r4, r3
    6fca:	d506      	bpl.n	6fda <Sd2Card::chipSelectLow()+0x36>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6fcc:	4d17      	ldr	r5, [pc, #92]	; (702c <Sd2Card::chipSelectLow()+0x88>)
    6fce:	68d4      	ldr	r4, [r2, #12]
    6fd0:	682e      	ldr	r6, [r5, #0]
    6fd2:	4034      	ands	r4, r6
    6fd4:	6194      	str	r4, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    6fd6:	602c      	str	r4, [r5, #0]
    6fd8:	461c      	mov	r4, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    6fda:	079d      	lsls	r5, r3, #30
    6fdc:	d506      	bpl.n	6fec <Sd2Card::chipSelectLow()+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6fde:	4d14      	ldr	r5, [pc, #80]	; (7030 <Sd2Card::chipSelectLow()+0x8c>)
    6fe0:	6913      	ldr	r3, [r2, #16]
    6fe2:	682e      	ldr	r6, [r5, #0]
    6fe4:	7ad4      	ldrb	r4, [r2, #11]
    6fe6:	4033      	ands	r3, r6
    6fe8:	61d3      	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    6fea:	602b      	str	r3, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    6fec:	0763      	lsls	r3, r4, #29
    6fee:	d505      	bpl.n	6ffc <Sd2Card::chipSelectLow()+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6ff0:	4c10      	ldr	r4, [pc, #64]	; (7034 <Sd2Card::chipSelectLow()+0x90>)
    6ff2:	6953      	ldr	r3, [r2, #20]
    6ff4:	6825      	ldr	r5, [r4, #0]
    6ff6:	402b      	ands	r3, r5
    6ff8:	6213      	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    6ffa:	6023      	str	r3, [r4, #0]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    6ffc:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    6ffe:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    7000:	68da      	ldr	r2, [r3, #12]
    7002:	428a      	cmp	r2, r1
    7004:	d007      	beq.n	7016 <Sd2Card::chipSelectLow()+0x72>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    7006:	4c0c      	ldr	r4, [pc, #48]	; (7038 <Sd2Card::chipSelectLow()+0x94>)
    7008:	601c      	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    700a:	4a0c      	ldr	r2, [pc, #48]	; (703c <Sd2Card::chipSelectLow()+0x98>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    700c:	60d9      	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    700e:	f041 4480 	orr.w	r4, r1, #1073741824	; 0x40000000
    7012:	611c      	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7014:	601a      	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    7016:	7800      	ldrb	r0, [r0, #0]
    7018:	2100      	movs	r1, #0
}
    701a:	bc70      	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    701c:	f001 bb22 	b.w	8664 <digitalWrite>
    7020:	1fff9388 	.word	0x1fff9388
    7024:	1fff8728 	.word	0x1fff8728
    7028:	1fff9384 	.word	0x1fff9384
    702c:	e000e180 	.word	0xe000e180
    7030:	e000e184 	.word	0xe000e184
    7034:	e000e188 	.word	0xe000e188
    7038:	003f4001 	.word	0x003f4001
    703c:	803f0000 	.word	0x803f0000

00007040 <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    7040:	b4f0      	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7042:	4812      	ldr	r0, [pc, #72]	; (708c <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7044:	4a12      	ldr	r2, [pc, #72]	; (7090 <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    7046:	6803      	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    7048:	b082      	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    704a:	4616      	mov	r6, r2
    704c:	9300      	str	r3, [sp, #0]
	return ret;
    704e:	9f00      	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7050:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    7054:	24ff      	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7056:	6813      	ldr	r3, [r2, #0]
    7058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    705c:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    705e:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7060:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7062:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7064:	2b00      	cmp	r3, #0
    7066:	dafc      	bge.n	7062 <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    7068:	6bb3      	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    706a:	b2db      	uxtb	r3, r3
    706c:	2bff      	cmp	r3, #255	; 0xff
    706e:	d009      	beq.n	7084 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7070:	6803      	ldr	r3, [r0, #0]
    7072:	9301      	str	r3, [sp, #4]
	return ret;
    7074:	9b01      	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    7076:	1bdb      	subs	r3, r3, r7
    7078:	428b      	cmp	r3, r1
    707a:	d3ec      	bcc.n	7056 <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    707c:	2000      	movs	r0, #0
}
    707e:	b002      	add	sp, #8
    7080:	bcf0      	pop	{r4, r5, r6, r7}
    7082:	4770      	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    7084:	2001      	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    7086:	b002      	add	sp, #8
    7088:	bcf0      	pop	{r4, r5, r6, r7}
    708a:	4770      	bx	lr
    708c:	1fff959c 	.word	0x1fff959c
    7090:	4002c000 	.word	0x4002c000

00007094 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    7094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7096:	460d      	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    7098:	f44f 7196 	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    709c:	4616      	mov	r6, r2
    709e:	4604      	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    70a0:	f7ff ffce 	bl	7040 <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70a4:	4b28      	ldr	r3, [pc, #160]	; (7148 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    70a6:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    70a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    70b0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70b4:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    70b6:	62d8      	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    70b8:	461a      	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    70ba:	6359      	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    70bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    70be:	2b00      	cmp	r3, #0
    70c0:	dafc      	bge.n	70bc <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70c2:	4921      	ldr	r1, [pc, #132]	; (7148 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    70c4:	2018      	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    70c6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70ca:	680a      	ldr	r2, [r1, #0]
    70cc:	fa26 f300 	lsr.w	r3, r6, r0
    70d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    70d4:	b2db      	uxtb	r3, r3
    70d6:	600a      	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    70d8:	62cf      	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    70da:	634b      	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    70dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    70de:	2b00      	cmp	r3, #0
    70e0:	dafc      	bge.n	70dc <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    70e2:	3808      	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    70e4:	f110 0f08 	cmn.w	r0, #8
    70e8:	d1ef      	bne.n	70ca <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    70ea:	b355      	cbz	r5, 7142 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    70ec:	2d08      	cmp	r5, #8
    70ee:	bf0c      	ite	eq
    70f0:	2187      	moveq	r1, #135	; 0x87
    70f2:	21ff      	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70f4:	4b14      	ldr	r3, [pc, #80]	; (7148 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    70f6:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    70f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    70fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7100:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7102:	62d8      	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7104:	461a      	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    7106:	6359      	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7108:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    710a:	2b00      	cmp	r3, #0
    710c:	dafc      	bge.n	7108 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    710e:	4a0e      	ldr	r2, [pc, #56]	; (7148 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7110:	2700      	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7112:	4616      	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7114:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    7118:	21ff      	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    711a:	6813      	ldr	r3, [r2, #0]
    711c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7120:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7122:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7124:	6351      	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7126:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7128:	2b00      	cmp	r3, #0
    712a:	dafc      	bge.n	7126 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    712c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    712e:	b2d8      	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    7130:	061b      	lsls	r3, r3, #24
    7132:	7060      	strb	r0, [r4, #1]
    7134:	d400      	bmi.n	7138 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    7136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7138:	3701      	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    713a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    713e:	d1ec      	bne.n	711a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    7140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7142:	2195      	movs	r1, #149	; 0x95
    7144:	e7d6      	b.n	70f4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    7146:	bf00      	nop
    7148:	4002c000 	.word	0x4002c000

0000714c <Sd2Card::SD_init(unsigned char, unsigned char)>:
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    714c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  type_ = 0;
    7150:	2300      	movs	r3, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7152:	4e93      	ldr	r6, [pc, #588]	; (73a0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x254>)
  chipSelectPin_ = chipSelectPin;
    7154:	7002      	strb	r2, [r0, #0]
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7156:	b085      	sub	sp, #20
  type_ = 0;
    7158:	7083      	strb	r3, [r0, #2]
    715a:	6833      	ldr	r3, [r6, #0]
    715c:	9301      	str	r3, [sp, #4]
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    715e:	4605      	mov	r5, r0
    7160:	4688      	mov	r8, r1
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    7162:	4610      	mov	r0, r2
    7164:	2101      	movs	r1, #1
	return ret;
    7166:	9f01      	ldr	r7, [sp, #4]
    7168:	f001 fa7c 	bl	8664 <digitalWrite>
  pinMode(chipSelectPin_, OUTPUT);
    716c:	7828      	ldrb	r0, [r5, #0]
    716e:	2101      	movs	r1, #1
    7170:	f001 fa8c 	bl	868c <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    7174:	7828      	ldrb	r0, [r5, #0]
    7176:	2101      	movs	r1, #1
    7178:	f001 fa74 	bl	8664 <digitalWrite>
#ifndef SPI_PUSHR_CTAS
#define SPI_PUSHR_CTAS(n) (((n) & 7) << 28)
#endif  // SPI_PUSHR_CTAS

static void spiBegin() {
  SIM_SCGC6 |= SIM_SCGC6_SPI0;
    717c:	4a89      	ldr	r2, [pc, #548]	; (73a4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x258>)
    717e:	6813      	ldr	r3, [r2, #0]
    7180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7184:	6013      	str	r3, [r2, #0]
  pinMode(chipSelectPin_, OUTPUT);
  digitalWrite(chipSelectPin_, HIGH);

#if defined(USE_TEENSY3_SPI)
  spiBegin();
  spiInit(6);
    7186:	2006      	movs	r0, #6
    7188:	f7ff fea6 	bl	6ed8 <spiInit(unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    718c:	f8df e240 	ldr.w	lr, [pc, #576]	; 73d0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x284>
    7190:	4b85      	ldr	r3, [pc, #532]	; (73a8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x25c>)
    7192:	f89e c00b 	ldrb.w	ip, [lr, #11]
    7196:	681a      	ldr	r2, [r3, #0]
    7198:	f1bc 0f00 	cmp.w	ip, #0
    719c:	d020      	beq.n	71e0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x94>
			__disable_irq();
    719e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    71a0:	f89e 300b 	ldrb.w	r3, [lr, #11]
    71a4:	07dc      	lsls	r4, r3, #31
    71a6:	4619      	mov	r1, r3
    71a8:	d508      	bpl.n	71bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x70>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    71aa:	4880      	ldr	r0, [pc, #512]	; (73ac <Sd2Card::SD_init(unsigned char, unsigned char)+0x260>)
    71ac:	f8de 100c 	ldr.w	r1, [lr, #12]
    71b0:	6804      	ldr	r4, [r0, #0]
    71b2:	4021      	ands	r1, r4
    71b4:	f8ce 1018 	str.w	r1, [lr, #24]
				NVIC_ICER0 = interruptSave[0];
    71b8:	6001      	str	r1, [r0, #0]
    71ba:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    71bc:	0798      	lsls	r0, r3, #30
    71be:	d509      	bpl.n	71d4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x88>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    71c0:	487b      	ldr	r0, [pc, #492]	; (73b0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x264>)
    71c2:	f8de 3010 	ldr.w	r3, [lr, #16]
    71c6:	6804      	ldr	r4, [r0, #0]
    71c8:	f89e 100b 	ldrb.w	r1, [lr, #11]
    71cc:	4023      	ands	r3, r4
    71ce:	f8ce 301c 	str.w	r3, [lr, #28]
				NVIC_ICER1 = interruptSave[1];
    71d2:	6003      	str	r3, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    71d4:	0749      	lsls	r1, r1, #29
    71d6:	f100 80a2 	bmi.w	731e <Sd2Card::SD_init(unsigned char, unsigned char)+0x1d2>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    71da:	b662      	cpsie	i
    71dc:	f89e c00b 	ldrb.w	ip, [lr, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    71e0:	f8de 3000 	ldr.w	r3, [lr]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    71e4:	68d9      	ldr	r1, [r3, #12]
    71e6:	4291      	cmp	r1, r2
    71e8:	d007      	beq.n	71fa <Sd2Card::SD_init(unsigned char, unsigned char)+0xae>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    71ea:	4872      	ldr	r0, [pc, #456]	; (73b4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x268>)
    71ec:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    71ee:	4972      	ldr	r1, [pc, #456]	; (73b8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x26c>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    71f0:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    71f2:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    71f6:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    71f8:	6019      	str	r1, [r3, #0]
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    71fa:	4a70      	ldr	r2, [pc, #448]	; (73bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    71fc:	240a      	movs	r4, #10
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    71fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  SPI0_PUSHR = b;
    7202:	21ff      	movs	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7204:	6813      	ldr	r3, [r2, #0]
    7206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    720a:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    720c:	62d0      	str	r0, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    720e:	6351      	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7210:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7212:	2b00      	cmp	r3, #0
    7214:	dafc      	bge.n	7210 <Sd2Card::SD_init(unsigned char, unsigned char)+0xc4>
    7216:	3c01      	subs	r4, #1
#endif  // not USE_TEENSY3_SPI
  // must supply min of 74 clock cycles with CS high.
#ifdef SPI_HAS_TRANSACTION
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    7218:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    721c:	d1f2      	bne.n	7204 <Sd2Card::SD_init(unsigned char, unsigned char)+0xb8>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    721e:	f1bc 0f00 	cmp.w	ip, #0
    7222:	d018      	beq.n	7256 <Sd2Card::SD_init(unsigned char, unsigned char)+0x10a>
			if (interruptMasksUsed & 0x01) {
    7224:	f01c 0f01 	tst.w	ip, #1
    7228:	d005      	beq.n	7236 <Sd2Card::SD_init(unsigned char, unsigned char)+0xea>
				NVIC_ISER0 = interruptSave[0];
    722a:	4b65      	ldr	r3, [pc, #404]	; (73c0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x274>)
    722c:	f8de 2018 	ldr.w	r2, [lr, #24]
    7230:	f89e c00b 	ldrb.w	ip, [lr, #11]
    7234:	601a      	str	r2, [r3, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7236:	f01c 0f02 	tst.w	ip, #2
    723a:	d005      	beq.n	7248 <Sd2Card::SD_init(unsigned char, unsigned char)+0xfc>
				NVIC_ISER1 = interruptSave[1];
    723c:	4b61      	ldr	r3, [pc, #388]	; (73c4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x278>)
    723e:	f8de 201c 	ldr.w	r2, [lr, #28]
    7242:	f89e c00b 	ldrb.w	ip, [lr, #11]
    7246:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7248:	f01c 0f04 	tst.w	ip, #4
    724c:	d003      	beq.n	7256 <Sd2Card::SD_init(unsigned char, unsigned char)+0x10a>
				NVIC_ISER2 = interruptSave[2];
    724e:	4b5e      	ldr	r3, [pc, #376]	; (73c8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x27c>)
    7250:	f8de 2020 	ldr.w	r2, [lr, #32]
    7254:	601a      	str	r2, [r3, #0]
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
    7256:	4628      	mov	r0, r5
    7258:	f7ff fea4 	bl	6fa4 <Sd2Card::chipSelectLow()>
    725c:	e006      	b.n	726c <Sd2Card::SD_init(unsigned char, unsigned char)+0x120>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    725e:	6833      	ldr	r3, [r6, #0]
    7260:	9302      	str	r3, [sp, #8]
	return ret;
    7262:	9b02      	ldr	r3, [sp, #8]
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    7264:	1bdb      	subs	r3, r3, r7
    7266:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    726a:	d851      	bhi.n	7310 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c4>
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    726c:	2200      	movs	r2, #0
    726e:	4611      	mov	r1, r2
    7270:	4628      	mov	r0, r5
    7272:	f7ff ff0f 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7276:	2801      	cmp	r0, #1
    7278:	4681      	mov	r9, r0
    727a:	7068      	strb	r0, [r5, #1]
    727c:	d1ef      	bne.n	725e <Sd2Card::SD_init(unsigned char, unsigned char)+0x112>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_CMD0
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    727e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    7282:	2108      	movs	r1, #8
    7284:	4628      	mov	r0, r5
    7286:	f7ff ff05 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    728a:	0743      	lsls	r3, r0, #29
    728c:	d526      	bpl.n	72dc <Sd2Card::SD_init(unsigned char, unsigned char)+0x190>
    type_ = SD_CARD_TYPE_SD1;
    728e:	f885 9002 	strb.w	r9, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7292:	f04f 0900 	mov.w	r9, #0
    7296:	e006      	b.n	72a6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x15a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7298:	6833      	ldr	r3, [r6, #0]
    729a:	9303      	str	r3, [sp, #12]
	return ret;
    729c:	9b03      	ldr	r3, [sp, #12]
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    729e:	1bdb      	subs	r3, r3, r7
    72a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    72a4:	d834      	bhi.n	7310 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c4>
  // private functions
  uint8_t SD_init(uint8_t sckRateID, uint8_t chipSelectPin);
  uint8_t SD_readBlock(uint32_t block, uint8_t* dst);
  uint8_t SD_writeBlock(uint32_t blockNumber, const uint8_t* src);
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    72a6:	2200      	movs	r2, #0
    72a8:	2137      	movs	r1, #55	; 0x37
    72aa:	4628      	mov	r0, r5
    72ac:	f7ff fef2 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    72b0:	464a      	mov	r2, r9
    72b2:	2129      	movs	r1, #41	; 0x29
    72b4:	4628      	mov	r0, r5
    72b6:	f7ff feed 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    72ba:	7068      	strb	r0, [r5, #1]
    72bc:	2800      	cmp	r0, #0
    72be:	d1eb      	bne.n	7298 <Sd2Card::SD_init(unsigned char, unsigned char)+0x14c>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    72c0:	78ab      	ldrb	r3, [r5, #2]
    72c2:	2b02      	cmp	r3, #2
    72c4:	d039      	beq.n	733a <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ee>
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    72c6:	4628      	mov	r0, r5
    72c8:	f7ff fe40 	bl	6f4c <Sd2Card::chipSelectHigh()>
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
#if defined(USE_TEENSY3_SPI) || defined(USE_TEENSY4_SPI)
  spiInit(sckRateID);
    72cc:	4640      	mov	r0, r8
    72ce:	f7ff fe03 	bl	6ed8 <spiInit(unsigned char)>
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
  return setSckRate(sckRateID);
    72d2:	2401      	movs	r4, #1

fail:
  chipSelectHigh();
  return false;
}
    72d4:	4620      	mov	r0, r4
    72d6:	b005      	add	sp, #20
    72d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    72dc:	4a37      	ldr	r2, [pc, #220]	; (73bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
    72de:	2104      	movs	r1, #4
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    72e0:	4694      	mov	ip, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    72e2:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    72e6:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    72e8:	6813      	ldr	r3, [r2, #0]
    72ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    72ee:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    72f0:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    72f4:	6350      	str	r0, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    72f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    72f8:	2b00      	cmp	r3, #0
    72fa:	dafc      	bge.n	72f6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1aa>
  return SPI0_POPR;
    72fc:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
    7300:	3901      	subs	r1, #1
    7302:	b2db      	uxtb	r3, r3
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    7304:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7308:	706b      	strb	r3, [r5, #1]
    730a:	d1ed      	bne.n	72e8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x19c>
    if (status_ != 0XAA) {
    730c:	2baa      	cmp	r3, #170	; 0xaa
    730e:	d00f      	beq.n	7330 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e4>
  }
  chipSelectHigh();
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
    7310:	4628      	mov	r0, r5
    7312:	f7ff fe1b 	bl	6f4c <Sd2Card::chipSelectHigh()>
  return false;
}
    7316:	4620      	mov	r0, r4
    7318:	b005      	add	sp, #20
    731a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    731e:	492b      	ldr	r1, [pc, #172]	; (73cc <Sd2Card::SD_init(unsigned char, unsigned char)+0x280>)
    7320:	f8de 3014 	ldr.w	r3, [lr, #20]
    7324:	6808      	ldr	r0, [r1, #0]
    7326:	4003      	ands	r3, r0
    7328:	f8ce 3020 	str.w	r3, [lr, #32]
				NVIC_ICER2 = interruptSave[2];
    732c:	600b      	str	r3, [r1, #0]
    732e:	e754      	b.n	71da <Sd2Card::SD_init(unsigned char, unsigned char)+0x8e>
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    7330:	2302      	movs	r3, #2
    7332:	70ab      	strb	r3, [r5, #2]
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7334:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    7338:	e7b5      	b.n	72a6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x15a>
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    733a:	4602      	mov	r2, r0
    733c:	213a      	movs	r1, #58	; 0x3a
    733e:	4628      	mov	r0, r5
    7340:	f7ff fea8 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7344:	2800      	cmp	r0, #0
    7346:	d1e3      	bne.n	7310 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c4>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7348:	4b1c      	ldr	r3, [pc, #112]	; (73bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
    734a:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    734c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    7354:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7356:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7358:	4619      	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    735a:	62dc      	str	r4, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    735c:	6358      	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    735e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7360:	4a16      	ldr	r2, [pc, #88]	; (73bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
    7362:	2b00      	cmp	r3, #0
    7364:	dafb      	bge.n	735e <Sd2Card::SD_init(unsigned char, unsigned char)+0x212>
  return SPI0_POPR;
    7366:	6b93      	ldr	r3, [r2, #56]	; 0x38
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7368:	4a14      	ldr	r2, [pc, #80]	; (73bc <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    736a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    736e:	2bc0      	cmp	r3, #192	; 0xc0
    7370:	bf04      	itt	eq
    7372:	2303      	moveq	r3, #3
    7374:	70ab      	strbeq	r3, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7376:	2103      	movs	r1, #3
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7378:	4616      	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    737a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    737e:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7380:	6813      	ldr	r3, [r2, #0]
    7382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7386:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7388:	62d4      	str	r4, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    738a:	6350      	str	r0, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    738c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    738e:	2b00      	cmp	r3, #0
    7390:	dafc      	bge.n	738c <Sd2Card::SD_init(unsigned char, unsigned char)+0x240>
    7392:	3901      	subs	r1, #1
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    7394:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
  return SPI0_POPR;
    7398:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    739a:	d1f1      	bne.n	7380 <Sd2Card::SD_init(unsigned char, unsigned char)+0x234>
    739c:	e793      	b.n	72c6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x17a>
    739e:	bf00      	nop
    73a0:	1fff959c 	.word	0x1fff959c
    73a4:	4004803c 	.word	0x4004803c
    73a8:	1fff9384 	.word	0x1fff9384
    73ac:	e000e180 	.word	0xe000e180
    73b0:	e000e184 	.word	0xe000e184
    73b4:	003f4001 	.word	0x003f4001
    73b8:	803f0000 	.word	0x803f0000
    73bc:	4002c000 	.word	0x4002c000
    73c0:	e000e100 	.word	0xe000e100
    73c4:	e000e104 	.word	0xe000e104
    73c8:	e000e108 	.word	0xe000e108
    73cc:	e000e188 	.word	0xe000e188
    73d0:	1fff8728 	.word	0x1fff8728

000073d4 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    73d4:	b4f0      	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73d6:	4915      	ldr	r1, [pc, #84]	; (742c <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    73d8:	4a15      	ldr	r2, [pc, #84]	; (7430 <Sd2Card::waitStartBlock()+0x5c>)
    73da:	680b      	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    73dc:	b082      	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    73de:	4616      	mov	r6, r2
    73e0:	9300      	str	r3, [sp, #0]
	return ret;
    73e2:	9f00      	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    73e4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    73e8:	24ff      	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    73ea:	6813      	ldr	r3, [r2, #0]
    73ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    73f0:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    73f2:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    73f4:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    73f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    73f8:	2b00      	cmp	r3, #0
    73fa:	dafc      	bge.n	73f6 <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    73fc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    73fe:	b2db      	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    7400:	2bff      	cmp	r3, #255	; 0xff
    7402:	7043      	strb	r3, [r0, #1]
    7404:	d10a      	bne.n	741c <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7406:	680b      	ldr	r3, [r1, #0]
    7408:	9301      	str	r3, [sp, #4]
	return ret;
    740a:	9b01      	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    740c:	1bdb      	subs	r3, r3, r7
    740e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7412:	d9ea      	bls.n	73ea <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    7414:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    7416:	b002      	add	sp, #8
    7418:	bcf0      	pop	{r4, r5, r6, r7}
    741a:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    741c:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    7420:	fab0 f080 	clz	r0, r0
    7424:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    7426:	b002      	add	sp, #8
    7428:	bcf0      	pop	{r4, r5, r6, r7}
    742a:	4770      	bx	lr
    742c:	1fff959c 	.word	0x1fff959c
    7430:	4002c000 	.word	0x4002c000

00007434 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    7434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    7436:	7883      	ldrb	r3, [r0, #2]
    7438:	2b03      	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    743a:	460e      	mov	r6, r1
    743c:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    743e:	bf18      	it	ne
    7440:	024e      	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    7442:	4615      	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    7444:	f7ff fdae 	bl	6fa4 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    7448:	4632      	mov	r2, r6
    744a:	2111      	movs	r1, #17
    744c:	4620      	mov	r0, r4
    744e:	f7ff fe21 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7452:	b918      	cbnz	r0, 745c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    7454:	4620      	mov	r0, r4
    7456:	f7ff ffbd 	bl	73d4 <Sd2Card::waitStartBlock()>
    745a:	b920      	cbnz	r0, 7466 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    745c:	4620      	mov	r0, r4
    745e:	f7ff fd75 	bl	6f4c <Sd2Card::chipSelectHigh()>
  return false;
    7462:	2000      	movs	r0, #0
}
    7464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    7466:	4b20      	ldr	r3, [pc, #128]	; (74e8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    7468:	4920      	ldr	r1, [pc, #128]	; (74ec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    746a:	4a21      	ldr	r2, [pc, #132]	; (74f0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    746c:	601a      	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    746e:	468e      	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    7470:	6359      	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    7472:	461a      	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    7474:	6359      	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    7476:	461e      	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    7478:	6359      	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    747a:	f505 70fd 	add.w	r0, r5, #506	; 0x1fa
    747e:	1ca9      	adds	r1, r5, #2
    7480:	f505 77fe 	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    7484:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7486:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    748a:	d0fb      	beq.n	7484 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    748c:	f8c6 e034 	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    7490:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    7492:	f801 3c01 	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    7496:	121b      	asrs	r3, r3, #8
    7498:	f801 3c02 	strb.w	r3, [r1, #-2]
    749c:	3102      	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    749e:	428f      	cmp	r7, r1
    74a0:	d1f0      	bne.n	7484 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    74a2:	f505 7500 	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    74a6:	42a8      	cmp	r0, r5
    74a8:	d20d      	bcs.n	74c6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    74aa:	4a0f      	ldr	r2, [pc, #60]	; (74e8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    74ac:	4616      	mov	r6, r2
    74ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    74b0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    74b4:	d0fb      	beq.n	74ae <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    74b6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    74b8:	1219      	asrs	r1, r3, #8
    74ba:	f800 1b02 	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    74be:	42a8      	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    74c0:	f800 3c01 	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    74c4:	d3f3      	bcc.n	74ae <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    74c6:	4b08      	ldr	r3, [pc, #32]	; (74e8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    74c8:	4909      	ldr	r1, [pc, #36]	; (74f0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    74ca:	4a08      	ldr	r2, [pc, #32]	; (74ec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    74cc:	6019      	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    74ce:	4619      	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    74d0:	635a      	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    74d2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    74d4:	4a04      	ldr	r2, [pc, #16]	; (74e8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    74d6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    74da:	d0fa      	beq.n	74d2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    74dc:	4620      	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    74de:	6b93      	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    74e0:	f7ff fd34 	bl	6f4c <Sd2Card::chipSelectHigh()>
  return true;
    74e4:	2001      	movs	r0, #1
    74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74e8:	4002c000 	.word	0x4002c000
    74ec:	9000ffff 	.word	0x9000ffff
    74f0:	801f0400 	.word	0x801f0400

000074f4 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    74f4:	b4f0      	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    74f6:	4e31      	ldr	r6, [pc, #196]	; (75bc <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    74f8:	6833      	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    74fa:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    74fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7502:	6033      	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    7504:	463d      	mov	r5, r7
    7506:	62f7      	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    7508:	4634      	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    750a:	6371      	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    750c:	4633      	mov	r3, r6
    750e:	1c51      	adds	r1, r2, #1
    7510:	f202 2701 	addw	r7, r2, #513	; 0x201
    7514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7516:	2a00      	cmp	r2, #0
    7518:	dafc      	bge.n	7514 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    751a:	681a      	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    751c:	f811 6c01 	ldrb.w	r6, [r1, #-1]
    7520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7524:	601a      	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    7526:	62dd      	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    7528:	635e      	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    752a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    752c:	2a00      	cmp	r2, #0
    752e:	dafc      	bge.n	752a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    7530:	681a      	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    7532:	f811 6b02 	ldrb.w	r6, [r1], #2
    7536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    753a:	428f      	cmp	r7, r1
    753c:	601a      	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    753e:	62dd      	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    7540:	635e      	str	r6, [r3, #52]	; 0x34
    7542:	d1e7      	bne.n	7514 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    7544:	491d      	ldr	r1, [pc, #116]	; (75bc <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    7546:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    7548:	4b1c      	ldr	r3, [pc, #112]	; (75bc <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    754a:	2a00      	cmp	r2, #0
    754c:	dafb      	bge.n	7546 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    754e:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7550:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    7558:	24ff      	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    755a:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    755c:	4619      	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    755e:	62dd      	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    7560:	635c      	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7562:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7564:	4a15      	ldr	r2, [pc, #84]	; (75bc <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    7566:	2b00      	cmp	r3, #0
    7568:	dafb      	bge.n	7562 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    756a:	6813      	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    756c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    7574:	24ff      	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7576:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7578:	4611      	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    757a:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    757c:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    757e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7580:	4a0e      	ldr	r2, [pc, #56]	; (75bc <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    7582:	2b00      	cmp	r3, #0
    7584:	dafb      	bge.n	757e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7586:	6813      	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7588:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    758c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    7590:	24ff      	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7592:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7594:	4611      	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7596:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7598:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    759a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    759c:	4a07      	ldr	r2, [pc, #28]	; (75bc <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    759e:	2b00      	cmp	r3, #0
    75a0:	dafb      	bge.n	759a <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    75a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    75a4:	b2db      	uxtb	r3, r3
    75a6:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    75aa:	7043      	strb	r3, [r0, #1]
    75ac:	f1a2 0005 	sub.w	r0, r2, #5
    75b0:	fab0 f080 	clz	r0, r0
    75b4:	0940      	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    75b6:	bcf0      	pop	{r4, r5, r6, r7}
    75b8:	4770      	bx	lr
    75ba:	bf00      	nop
    75bc:	4002c000 	.word	0x4002c000

000075c0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    75c0:	b570      	push	{r4, r5, r6, lr}
    75c2:	4604      	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    75c4:	b171      	cbz	r1, 75e4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    75c6:	7883      	ldrb	r3, [r0, #2]
    75c8:	2b03      	cmp	r3, #3
    75ca:	460d      	mov	r5, r1
    75cc:	bf18      	it	ne
    75ce:	024d      	lslne	r5, r1, #9
    75d0:	4616      	mov	r6, r2
  chipSelectLow();
    75d2:	f7ff fce7 	bl	6fa4 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    75d6:	462a      	mov	r2, r5
    75d8:	2118      	movs	r1, #24
    75da:	4620      	mov	r0, r4
    75dc:	f7ff fd5a 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    75e0:	4605      	mov	r5, r0
    75e2:	b120      	cbz	r0, 75ee <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    75e4:	4620      	mov	r0, r4
    75e6:	f7ff fcb1 	bl	6f4c <Sd2Card::chipSelectHigh()>
  return false;
    75ea:	2000      	movs	r0, #0
}
    75ec:	bd70      	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    75ee:	4632      	mov	r2, r6
    75f0:	21fe      	movs	r1, #254	; 0xfe
    75f2:	4620      	mov	r0, r4
    75f4:	f7ff ff7e 	bl	74f4 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    75f8:	2800      	cmp	r0, #0
    75fa:	d0f3      	beq.n	75e4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    75fc:	f44f 7116 	mov.w	r1, #600	; 0x258
    7600:	4620      	mov	r0, r4
    7602:	f7ff fd1d 	bl	7040 <Sd2Card::waitNotBusy(unsigned int)>
    7606:	2800      	cmp	r0, #0
    7608:	d0ec      	beq.n	75e4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    760a:	462a      	mov	r2, r5
    760c:	210d      	movs	r1, #13
    760e:	4620      	mov	r0, r4
    7610:	f7ff fd40 	bl	7094 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7614:	2800      	cmp	r0, #0
    7616:	d1e5      	bne.n	75e4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7618:	4b0b      	ldr	r3, [pc, #44]	; (7648 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    761a:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    761c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    7624:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7626:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7628:	4619      	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    762a:	62dd      	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    762c:	6358      	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    762e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7630:	4a05      	ldr	r2, [pc, #20]	; (7648 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    7632:	2b00      	cmp	r3, #0
    7634:	dafb      	bge.n	762e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    7636:	6b93      	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    7638:	f013 0fff 	tst.w	r3, #255	; 0xff
    763c:	d1d2      	bne.n	75e4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    763e:	4620      	mov	r0, r4
    7640:	f7ff fc84 	bl	6f4c <Sd2Card::chipSelectHigh()>
  return true;
    7644:	2001      	movs	r0, #1
    7646:	bd70      	pop	{r4, r5, r6, pc}
    7648:	4002c000 	.word	0x4002c000

0000764c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    764c:	4b01      	ldr	r3, [pc, #4]	; (7654 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    764e:	4a02      	ldr	r2, [pc, #8]	; (7658 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    7650:	601a      	str	r2, [r3, #0]
    7652:	4770      	bx	lr
    7654:	1fff9384 	.word	0x1fff9384
    7658:	38020000 	.word	0x38020000

0000765c <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    765c:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    765e:	f990 3005 	ldrsb.w	r3, [r0, #5]
    7662:	2b00      	cmp	r3, #0
    7664:	db03      	blt.n	766e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    7666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    766a:	f000 bbfb 	b.w	7e64 <SdVolume::cacheFlush()>
    766e:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    7670:	2101      	movs	r1, #1
    7672:	6900      	ldr	r0, [r0, #16]
    7674:	f000 fc20 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7678:	b1f8      	cbz	r0, 76ba <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    767a:	7d25      	ldrb	r5, [r4, #20]
    767c:	4b10      	ldr	r3, [pc, #64]	; (76c0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    767e:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    7682:	d01a      	beq.n	76ba <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    7684:	79a3      	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    7686:	4a0f      	ldr	r2, [pc, #60]	; (76c4 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    7688:	2b01      	cmp	r3, #1
    768a:	bf9c      	itt	ls
    768c:	69a3      	ldrls	r3, [r4, #24]
    768e:	61eb      	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    7690:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    7692:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    7694:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    7696:	0c1b      	lsrs	r3, r3, #16
    7698:	82ab      	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    769a:	b132      	cbz	r2, 76aa <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    769c:	f105 0116 	add.w	r1, r5, #22
    76a0:	f105 0018 	add.w	r0, r5, #24
    76a4:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    76a6:	8b2b      	ldrh	r3, [r5, #24]
    76a8:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    76aa:	7963      	ldrb	r3, [r4, #5]
    76ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    76b0:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    76b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    76b6:	f000 bbd5 	b.w	7e64 <SdVolume::cacheFlush()>
}
    76ba:	2000      	movs	r0, #0
    76bc:	bd38      	pop	{r3, r4, r5, pc}
    76be:	bf00      	nop
    76c0:	1fff9398 	.word	0x1fff9398
    76c4:	1fff938c 	.word	0x1fff938c

000076c8 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    76c8:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    76ca:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    76ce:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    76d0:	2101      	movs	r1, #1
    76d2:	6a00      	ldr	r0, [r0, #32]
    76d4:	f000 fcda 	bl	808c <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    76d8:	b150      	cbz	r0, 76f0 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    76da:	69e3      	ldr	r3, [r4, #28]
    76dc:	b93b      	cbnz	r3, 76ee <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    76de:	7963      	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    76e0:	68a2      	ldr	r2, [r4, #8]
    76e2:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    76e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76e8:	7163      	strb	r3, [r4, #5]
    76ea:	2001      	movs	r0, #1
    76ec:	bd10      	pop	{r4, pc}
  }
  return true;
    76ee:	2001      	movs	r0, #1
}
    76f0:	bd10      	pop	{r4, pc}
    76f2:	bf00      	nop

000076f4 <SdFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    76f4:	b570      	push	{r4, r5, r6, lr}
    76f6:	4606      	mov	r6, r0
  if (!addCluster()) return false;
    76f8:	f7ff ffe6 	bl	76c8 <SdFile::addCluster()>
    76fc:	b198      	cbz	r0, 7726 <SdFile::addDirCluster()+0x32>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    76fe:	6a32      	ldr	r2, [r6, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    7700:	68b5      	ldr	r5, [r6, #8]
    7702:	7c11      	ldrb	r1, [r2, #16]
    7704:	6953      	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    7706:	7914      	ldrb	r4, [r2, #4]
    7708:	3d02      	subs	r5, #2
    770a:	408d      	lsls	r5, r1
    770c:	3b01      	subs	r3, #1
    770e:	b174      	cbz	r4, 772e <SdFile::addDirCluster()+0x3a>
    7710:	441d      	add	r5, r3
    7712:	e002      	b.n	771a <SdFile::addDirCluster()+0x26>
    7714:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7718:	d007      	beq.n	772a <SdFile::addDirCluster()+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    771a:	1960      	adds	r0, r4, r5
    771c:	f000 fc32 	bl	7f84 <SdVolume::cacheZeroBlock(unsigned long)>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    7720:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    7722:	2800      	cmp	r0, #0
    7724:	d1f6      	bne.n	7714 <SdFile::addDirCluster()+0x20>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    7726:	2000      	movs	r0, #0
    7728:	bd70      	pop	{r4, r5, r6, pc}
    772a:	6a33      	ldr	r3, [r6, #32]
    772c:	7c19      	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    772e:	69b0      	ldr	r0, [r6, #24]
    7730:	f44f 7200 	mov.w	r2, #512	; 0x200
    7734:	fa02 f301 	lsl.w	r3, r2, r1
    7738:	4403      	add	r3, r0
    773a:	61b3      	str	r3, [r6, #24]
    773c:	2001      	movs	r0, #1
  return true;
}
    773e:	bd70      	pop	{r4, r5, r6, pc}

00007740 <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7740:	7982      	ldrb	r2, [r0, #6]
    7742:	b90a      	cbnz	r2, 7748 <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    7744:	2000      	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    7746:	4770      	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    7748:	b510      	push	{r4, lr}
    774a:	4604      	mov	r4, r0
    774c:	f7ff ff86 	bl	765c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    7750:	b118      	cbz	r0, 775a <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    7752:	2300      	movs	r3, #0
    7754:	71a3      	strb	r3, [r4, #6]
  return true;
    7756:	2001      	movs	r0, #1
}
    7758:	bd10      	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    775a:	2000      	movs	r0, #0
    775c:	bd10      	pop	{r4, pc}
    775e:	bf00      	nop

00007760 <SdFile::make83Name(char const*, unsigned char*)>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    7760:	b470      	push	{r4, r5, r6}
    7762:	1e4b      	subs	r3, r1, #1
    7764:	f101 040a 	add.w	r4, r1, #10
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    7768:	2220      	movs	r2, #32
    776a:	f803 2f01 	strb.w	r2, [r3, #1]!
    776e:	42a3      	cmp	r3, r4
    7770:	d1fb      	bne.n	776a <SdFile::make83Name(char const*, unsigned char*)+0xa>
    7772:	3801      	subs	r0, #1
    7774:	2500      	movs	r5, #0
    7776:	2607      	movs	r6, #7
  i = 0;
  while ((c = *str++) != '\0') {
    7778:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    777c:	b32c      	cbz	r4, 77ca <SdFile::make83Name(char const*, unsigned char*)+0x6a>
    if (c == '.') {
    777e:	2c2e      	cmp	r4, #46	; 0x2e
    7780:	d01e      	beq.n	77c0 <SdFile::make83Name(char const*, unsigned char*)+0x60>
    7782:	4a16      	ldr	r2, [pc, #88]	; (77dc <SdFile::make83Name(char const*, unsigned char*)+0x7c>)
    7784:	e001      	b.n	778a <SdFile::make83Name(char const*, unsigned char*)+0x2a>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    7786:	429c      	cmp	r4, r3
    7788:	d017      	beq.n	77ba <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    778a:	f812 3b01 	ldrb.w	r3, [r2], #1
    778e:	2b00      	cmp	r3, #0
    7790:	d1f9      	bne.n	7786 <SdFile::make83Name(char const*, unsigned char*)+0x26>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    7792:	42ae      	cmp	r6, r5
    7794:	d31f      	bcc.n	77d6 <SdFile::make83Name(char const*, unsigned char*)+0x76>
    7796:	f1a4 0221 	sub.w	r2, r4, #33	; 0x21
    779a:	2a5d      	cmp	r2, #93	; 0x5d
    779c:	d81b      	bhi.n	77d6 <SdFile::make83Name(char const*, unsigned char*)+0x76>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    779e:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    77a2:	2a19      	cmp	r2, #25
    77a4:	f105 0301 	add.w	r3, r5, #1
    77a8:	bf98      	it	ls
    77aa:	3c20      	subls	r4, #32
    77ac:	440d      	add	r5, r1
    77ae:	b2db      	uxtb	r3, r3
    77b0:	bf98      	it	ls
    77b2:	b2e4      	uxtbls	r4, r4
    77b4:	702c      	strb	r4, [r5, #0]
    77b6:	461d      	mov	r5, r3
    77b8:	e7de      	b.n	7778 <SdFile::make83Name(char const*, unsigned char*)+0x18>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    77ba:	2000      	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    77bc:	bc70      	pop	{r4, r5, r6}
    77be:	4770      	bx	lr
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    77c0:	2e0a      	cmp	r6, #10
    77c2:	d0fa      	beq.n	77ba <SdFile::make83Name(char const*, unsigned char*)+0x5a>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    77c4:	2508      	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    77c6:	260a      	movs	r6, #10
    77c8:	e7d6      	b.n	7778 <SdFile::make83Name(char const*, unsigned char*)+0x18>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    77ca:	780b      	ldrb	r3, [r1, #0]
    77cc:	f1b3 0020 	subs.w	r0, r3, #32
    77d0:	bf18      	it	ne
    77d2:	2001      	movne	r0, #1
    77d4:	e7f2      	b.n	77bc <SdFile::make83Name(char const*, unsigned char*)+0x5c>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    77d6:	4618      	mov	r0, r3
    77d8:	e7f0      	b.n	77bc <SdFile::make83Name(char const*, unsigned char*)+0x5c>
    77da:	bf00      	nop
    77dc:	000108d4 	.word	0x000108d4

000077e0 <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    77e0:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    77e2:	7983      	ldrb	r3, [r0, #6]
    77e4:	b93b      	cbnz	r3, 77f6 <SdFile::openRoot(SdVolume*)+0x16>
    77e6:	f891 2020 	ldrb.w	r2, [r1, #32]

  if (vol->fatType() == 16) {
    77ea:	2a10      	cmp	r2, #16
    77ec:	460d      	mov	r5, r1
    77ee:	4604      	mov	r4, r0
    77f0:	d003      	beq.n	77fa <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    77f2:	2a20      	cmp	r2, #32
    77f4:	d010      	beq.n	7818 <SdFile::openRoot(SdVolume*)+0x38>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    77f6:	2000      	movs	r0, #0
    77f8:	bd38      	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    77fa:	2202      	movs	r2, #2
    77fc:	7182      	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    77fe:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    7800:	61c3      	str	r3, [r0, #28]
    fileSize_ = 32 * vol->rootDirEntryCount();
    7802:	0153      	lsls	r3, r2, #5
    7804:	6183      	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    7806:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    7808:	2001      	movs	r0, #1
    780a:	7160      	strb	r0, [r4, #5]
  curCluster_ = 0;
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
    780c:	7523      	strb	r3, [r4, #20]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    780e:	6225      	str	r5, [r4, #32]
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    7810:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    7812:	60e3      	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    7814:	6123      	str	r3, [r4, #16]
  dirIndex_ = 0;
  return true;
}
    7816:	bd38      	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    7818:	2303      	movs	r3, #3
    781a:	7183      	strb	r3, [r0, #6]
    781c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    781e:	61c1      	str	r1, [r0, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    7820:	f100 0218 	add.w	r2, r0, #24
    7824:	4628      	mov	r0, r5
    7826:	f000 fc01 	bl	802c <SdVolume::chainSize(unsigned long, unsigned long*) const>
    782a:	2800      	cmp	r0, #0
    782c:	d1eb      	bne.n	7806 <SdFile::openRoot(SdVolume*)+0x26>
    782e:	e7e2      	b.n	77f6 <SdFile::openRoot(SdVolume*)+0x16>

00007830 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    7830:	7983      	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    7832:	b913      	cbnz	r3, 783a <SdFile::read(void*, unsigned int)+0xa>
    7834:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    7838:	4770      	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    783a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    783e:	468b      	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    7840:	7941      	ldrb	r1, [r0, #5]
    7842:	07c9      	lsls	r1, r1, #31
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    7844:	b083      	sub	sp, #12
    7846:	4605      	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    7848:	d558      	bpl.n	78fc <SdFile::read(void*, unsigned int)+0xcc>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    784a:	68c1      	ldr	r1, [r0, #12]
    784c:	6984      	ldr	r4, [r0, #24]
    784e:	1a64      	subs	r4, r4, r1
    7850:	4294      	cmp	r4, r2
    7852:	bf28      	it	cs
    7854:	4614      	movcs	r4, r2
    7856:	4626      	mov	r6, r4
    7858:	9401      	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    785a:	2c00      	cmp	r4, #0
    785c:	d064      	beq.n	7928 <SdFile::read(void*, unsigned int)+0xf8>
    785e:	461a      	mov	r2, r3
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    7860:	2a02      	cmp	r2, #2
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    7862:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 794c <SdFile::read(void*, unsigned int)+0x11c>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    7866:	4f38      	ldr	r7, [pc, #224]	; (7948 <SdFile::read(void*, unsigned int)+0x118>)
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    7868:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 7950 <SdFile::read(void*, unsigned int)+0x120>
    786c:	6a2a      	ldr	r2, [r5, #32]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    786e:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    7872:	d03f      	beq.n	78f4 <SdFile::read(void*, unsigned int)+0xc4>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    7874:	7914      	ldrb	r4, [r2, #4]
    7876:	3c01      	subs	r4, #1
    7878:	ea04 2451 	and.w	r4, r4, r1, lsr #9
    787c:	b2e4      	uxtb	r4, r4
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    787e:	f1ba 0f00 	cmp.w	sl, #0
    7882:	d15e      	bne.n	7942 <SdFile::read(void*, unsigned int)+0x112>
    7884:	2c00      	cmp	r4, #0
    7886:	d15c      	bne.n	7942 <SdFile::read(void*, unsigned int)+0x112>
        // start of new cluster
        if (curPosition_ == 0) {
    7888:	2900      	cmp	r1, #0
    788a:	d151      	bne.n	7930 <SdFile::read(void*, unsigned int)+0x100>
          // use first cluster in file
          curCluster_ = firstCluster_;
    788c:	69e9      	ldr	r1, [r5, #28]
    788e:	60a9      	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7890:	7c10      	ldrb	r0, [r2, #16]
    7892:	6952      	ldr	r2, [r2, #20]
    7894:	3902      	subs	r1, #2
    7896:	4081      	lsls	r1, r0
    7898:	4414      	add	r4, r2
    789a:	1908      	adds	r0, r1, r4
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    789c:	f5ca 7400 	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    78a0:	796a      	ldrb	r2, [r5, #5]
    78a2:	42b4      	cmp	r4, r6
    78a4:	bfa8      	it	ge
    78a6:	4634      	movge	r4, r6
    78a8:	0653      	lsls	r3, r2, #25
    78aa:	d42c      	bmi.n	7906 <SdFile::read(void*, unsigned int)+0xd6>
    78ac:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    78b0:	d029      	beq.n	7906 <SdFile::read(void*, unsigned int)+0xd6>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    78b2:	2100      	movs	r1, #0
    78b4:	f000 fb00 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    78b8:	b300      	cbz	r0, 78fc <SdFile::read(void*, unsigned int)+0xcc>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    78ba:	eb0a 0e09 	add.w	lr, sl, r9
      uint8_t* end = src + n;
    78be:	eb0e 0004 	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    78c2:	4586      	cmp	lr, r0
    78c4:	d00b      	beq.n	78de <SdFile::read(void*, unsigned int)+0xae>
    78c6:	f10b 32ff 	add.w	r2, fp, #4294967295
    78ca:	4673      	mov	r3, lr
    78cc:	f813 1b01 	ldrb.w	r1, [r3], #1
    78d0:	f802 1f01 	strb.w	r1, [r2, #1]!
    78d4:	4298      	cmp	r0, r3
    78d6:	d1f9      	bne.n	78cc <SdFile::read(void*, unsigned int)+0x9c>
    78d8:	ebce 0000 	rsb	r0, lr, r0
    78dc:	4483      	add	fp, r0
    }
    curPosition_ += n;
    78de:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    78e0:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    78e2:	4421      	add	r1, r4
    78e4:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    78e6:	d01f      	beq.n	7928 <SdFile::read(void*, unsigned int)+0xf8>
    78e8:	79aa      	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    78ea:	2a02      	cmp	r2, #2

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    78ec:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    78f0:	6a2a      	ldr	r2, [r5, #32]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    78f2:	d1bf      	bne.n	7874 <SdFile::read(void*, unsigned int)+0x44>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    78f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
    78f6:	eb00 2051 	add.w	r0, r0, r1, lsr #9
    78fa:	e7cf      	b.n	789c <SdFile::read(void*, unsigned int)+0x6c>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    78fc:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    7900:	b003      	add	sp, #12
    7902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    7906:	683a      	ldr	r2, [r7, #0]
    7908:	4290      	cmp	r0, r2
    790a:	d0d2      	beq.n	78b2 <SdFile::read(void*, unsigned int)+0x82>
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    790c:	4601      	mov	r1, r0
    790e:	465a      	mov	r2, fp
    7910:	f8d8 0000 	ldr.w	r0, [r8]
    7914:	f7ff fd8e 	bl	7434 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    7918:	2800      	cmp	r0, #0
    791a:	d0ef      	beq.n	78fc <SdFile::read(void*, unsigned int)+0xcc>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    791c:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    791e:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    7920:	4421      	add	r1, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    7922:	44a3      	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    7924:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    7926:	d1df      	bne.n	78e8 <SdFile::read(void*, unsigned int)+0xb8>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    7928:	9801      	ldr	r0, [sp, #4]
}
    792a:	b003      	add	sp, #12
    792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    7930:	4610      	mov	r0, r2
    7932:	68a9      	ldr	r1, [r5, #8]
    7934:	f105 0208 	add.w	r2, r5, #8
    7938:	f000 fb40 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    793c:	2800      	cmp	r0, #0
    793e:	d0dd      	beq.n	78fc <SdFile::read(void*, unsigned int)+0xcc>
    7940:	6a2a      	ldr	r2, [r5, #32]
    7942:	68a9      	ldr	r1, [r5, #8]
    7944:	e7a4      	b.n	7890 <SdFile::read(void*, unsigned int)+0x60>
    7946:	bf00      	nop
    7948:	1fff8760 	.word	0x1fff8760
    794c:	1fff9398 	.word	0x1fff9398
    7950:	1fff9394 	.word	0x1fff9394

00007954 <SdFile::readDirCache()>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    7954:	7983      	ldrb	r3, [r0, #6]
    7956:	2b01      	cmp	r3, #1
    7958:	d917      	bls.n	798a <SdFile::readDirCache()+0x36>
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    795a:	b530      	push	{r4, r5, lr}
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    795c:	68c3      	ldr	r3, [r0, #12]
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    795e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7960:	2201      	movs	r2, #1
    7962:	f10d 0107 	add.w	r1, sp, #7
    7966:	4604      	mov	r4, r0
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    7968:	f3c3 1543 	ubfx	r5, r3, #5, #4
    796c:	f7ff ff60 	bl	7830 <SdFile::read(void*, unsigned int)>
    7970:	2801      	cmp	r0, #1
    7972:	d002      	beq.n	797a <SdFile::readDirCache()+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    7974:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    7976:	b003      	add	sp, #12
    7978:	bd30      	pop	{r4, r5, pc}

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    797a:	68e3      	ldr	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    797c:	4804      	ldr	r0, [pc, #16]	; (7990 <SdFile::readDirCache()+0x3c>)

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    797e:	331f      	adds	r3, #31

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    7980:	eb00 1045 	add.w	r0, r0, r5, lsl #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    7984:	60e3      	str	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    7986:	b003      	add	sp, #12
    7988:	bd30      	pop	{r4, r5, pc}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    798a:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    798c:	4770      	bx	lr
    798e:	bf00      	nop
    7990:	1fff9398 	.word	0x1fff9398

00007994 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    7994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7996:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    7998:	b113      	cbz	r3, 79a0 <SdFile::seekSet(unsigned long)+0xc>
    799a:	6982      	ldr	r2, [r0, #24]
    799c:	428a      	cmp	r2, r1
    799e:	d201      	bcs.n	79a4 <SdFile::seekSet(unsigned long)+0x10>
    79a0:	2000      	movs	r0, #0
    79a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    79a4:	2b02      	cmp	r3, #2
    79a6:	460f      	mov	r7, r1
    79a8:	4605      	mov	r5, r0
    79aa:	d01a      	beq.n	79e2 <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    79ac:	b307      	cbz	r7, 79f0 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    79ae:	6a2b      	ldr	r3, [r5, #32]
    79b0:	68e9      	ldr	r1, [r5, #12]
    79b2:	7c1c      	ldrb	r4, [r3, #16]
    79b4:	1e4a      	subs	r2, r1, #1
    79b6:	f104 0309 	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    79ba:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    79bc:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    79be:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    79c0:	42a2      	cmp	r2, r4
    79c2:	d911      	bls.n	79e8 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    79c4:	69eb      	ldr	r3, [r5, #28]
    79c6:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    79c8:	f105 0608 	add.w	r6, r5, #8
    79cc:	e006      	b.n	79dc <SdFile::seekSet(unsigned long)+0x48>
    79ce:	68a9      	ldr	r1, [r5, #8]
    79d0:	6a28      	ldr	r0, [r5, #32]
    79d2:	f000 faf3 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    79d6:	3c01      	subs	r4, #1
    79d8:	2800      	cmp	r0, #0
    79da:	d0e1      	beq.n	79a0 <SdFile::seekSet(unsigned long)+0xc>
    79dc:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    79de:	2c00      	cmp	r4, #0
    79e0:	d1f5      	bne.n	79ce <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    79e2:	60ef      	str	r7, [r5, #12]
    return true;
    79e4:	2001      	movs	r0, #1
    79e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    79e8:	2900      	cmp	r1, #0
    79ea:	d0eb      	beq.n	79c4 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    79ec:	1aa4      	subs	r4, r4, r2
    79ee:	e7eb      	b.n	79c8 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    79f0:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    79f2:	60ef      	str	r7, [r5, #12]
    return true;
    79f4:	2001      	movs	r0, #1
    79f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000079f8 <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    79f8:	7983      	ldrb	r3, [r0, #6]
    79fa:	b10b      	cbz	r3, 7a00 <SdFile::sync()+0x8>
    79fc:	f7ff be2e 	b.w	765c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    7a00:	4618      	mov	r0, r3
    7a02:	4770      	bx	lr

00007a04 <SdFile::truncate(unsigned long)>:
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    7a04:	7983      	ldrb	r3, [r0, #6]
    7a06:	2b01      	cmp	r3, #1
    7a08:	d001      	beq.n	7a0e <SdFile::truncate(unsigned long)+0xa>
    7a0a:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    7a0c:	4770      	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    7a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    7a10:	7945      	ldrb	r5, [r0, #5]
    7a12:	07ac      	lsls	r4, r5, #30
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    7a14:	b083      	sub	sp, #12
    7a16:	4602      	mov	r2, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    7a18:	d51c      	bpl.n	7a54 <SdFile::truncate(unsigned long)+0x50>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    7a1a:	6985      	ldr	r5, [r0, #24]
    7a1c:	428d      	cmp	r5, r1
    7a1e:	460c      	mov	r4, r1
    7a20:	d318      	bcc.n	7a54 <SdFile::truncate(unsigned long)+0x50>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    7a22:	b1d5      	cbz	r5, 7a5a <SdFile::truncate(unsigned long)+0x56>
    7a24:	4625      	mov	r5, r4

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    7a26:	68d6      	ldr	r6, [r2, #12]
    7a28:	4614      	mov	r4, r2

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    7a2a:	f7ff ffb3 	bl	7994 <SdFile::seekSet(unsigned long)>
    7a2e:	b188      	cbz	r0, 7a54 <SdFile::truncate(unsigned long)+0x50>

  if (length == 0) {
    7a30:	b9b5      	cbnz	r5, 7a60 <SdFile::truncate(unsigned long)+0x5c>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    7a32:	69e1      	ldr	r1, [r4, #28]
    7a34:	6a20      	ldr	r0, [r4, #32]
    7a36:	f000 fbb1 	bl	819c <SdVolume::freeChain(unsigned long)>
    7a3a:	b158      	cbz	r0, 7a54 <SdFile::truncate(unsigned long)+0x50>
    firstCluster_ = 0;
    7a3c:	61e5      	str	r5, [r4, #28]
    7a3e:	e022      	b.n	7a86 <SdFile::truncate(unsigned long)+0x82>
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    7a40:	f000 fbac 	bl	819c <SdVolume::freeChain(unsigned long)>
    7a44:	b130      	cbz	r0, 7a54 <SdFile::truncate(unsigned long)+0x50>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7a46:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    7a4a:	68a1      	ldr	r1, [r4, #8]
    7a4c:	6a20      	ldr	r0, [r4, #32]
    7a4e:	f000 fb95 	bl	817c <SdVolume::fatPut(unsigned long, unsigned long)>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    7a52:	b9c0      	cbnz	r0, 7a86 <SdFile::truncate(unsigned long)+0x82>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    7a54:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    7a56:	b003      	add	sp, #12
    7a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    7a5a:	4618      	mov	r0, r3

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    7a5c:	b003      	add	sp, #12
    7a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    7a60:	aa01      	add	r2, sp, #4
    7a62:	68a1      	ldr	r1, [r4, #8]
    7a64:	6a20      	ldr	r0, [r4, #32]
    7a66:	f000 faa9 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    7a6a:	2800      	cmp	r0, #0
    7a6c:	d0f2      	beq.n	7a54 <SdFile::truncate(unsigned long)+0x50>

    if (!vol_->isEOC(toFree)) {
    7a6e:	6a20      	ldr	r0, [r4, #32]
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    7a70:	4b0f      	ldr	r3, [pc, #60]	; (7ab0 <SdFile::truncate(unsigned long)+0xac>)
    7a72:	f890 7020 	ldrb.w	r7, [r0, #32]
    7a76:	9901      	ldr	r1, [sp, #4]
    7a78:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    7a7c:	2f10      	cmp	r7, #16
    7a7e:	bf08      	it	eq
    7a80:	4613      	moveq	r3, r2
    7a82:	4299      	cmp	r1, r3
    7a84:	d3dc      	bcc.n	7a40 <SdFile::truncate(unsigned long)+0x3c>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    7a86:	7963      	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7a88:	79a2      	ldrb	r2, [r4, #6]

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    7a8a:	61a5      	str	r5, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    7a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a90:	7163      	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7a92:	2a00      	cmp	r2, #0
    7a94:	d0de      	beq.n	7a54 <SdFile::truncate(unsigned long)+0x50>
    7a96:	4620      	mov	r0, r4
    7a98:	f7ff fde0 	bl	765c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d0d9      	beq.n	7a54 <SdFile::truncate(unsigned long)+0x50>

  // set file to correct position
  return seekSet(newPos);
    7aa0:	42b5      	cmp	r5, r6
    7aa2:	4629      	mov	r1, r5
    7aa4:	4620      	mov	r0, r4
    7aa6:	bf28      	it	cs
    7aa8:	4631      	movcs	r1, r6
    7aaa:	f7ff ff73 	bl	7994 <SdFile::seekSet(unsigned long)>
    7aae:	e7d2      	b.n	7a56 <SdFile::truncate(unsigned long)+0x52>
    7ab0:	0ffffff8 	.word	0x0ffffff8

00007ab4 <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    7ab4:	b570      	push	{r4, r5, r6, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    7ab6:	4b1d      	ldr	r3, [pc, #116]	; (7b2c <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>)
    7ab8:	eb03 1641 	add.w	r6, r3, r1, lsl #5

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    7abc:	7af3      	ldrb	r3, [r6, #11]
    7abe:	f013 0f11 	tst.w	r3, #17
    7ac2:	d002      	beq.n	7aca <SdFile::openCachedEntry(unsigned char, unsigned char)+0x16>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    7ac4:	f012 0f42 	tst.w	r2, #66	; 0x42
    7ac8:	d11e      	bne.n	7b08 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    7aca:	4b19      	ldr	r3, [pc, #100]	; (7b30 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    7acc:	7501      	strb	r1, [r0, #20]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    7ace:	681b      	ldr	r3, [r3, #0]
    7ad0:	6103      	str	r3, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    7ad2:	8b73      	ldrh	r3, [r6, #26]
    7ad4:	8ab1      	ldrh	r1, [r6, #20]
    7ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7ada:	61c1      	str	r1, [r0, #28]
    7adc:	7af3      	ldrb	r3, [r6, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    7ade:	f013 0318 	ands.w	r3, r3, #24
    7ae2:	4615      	mov	r5, r2
    7ae4:	4604      	mov	r4, r0
    7ae6:	d10d      	bne.n	7b04 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x50>
    fileSize_ = p->fileSize;
    7ae8:	69f3      	ldr	r3, [r6, #28]
    7aea:	6183      	str	r3, [r0, #24]
    type_ = FAT_FILE_TYPE_NORMAL;
    7aec:	2301      	movs	r3, #1
    7aee:	7183      	strb	r3, [r0, #6]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    7af0:	f005 030f 	and.w	r3, r5, #15

  // set to start of file
  curCluster_ = 0;
    7af4:	2100      	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    7af6:	7163      	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    7af8:	066b      	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    7afa:	60a1      	str	r1, [r4, #8]
  curPosition_ = 0;
    7afc:	60e1      	str	r1, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    7afe:	d40f      	bmi.n	7b20 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x6c>
  return true;
    7b00:	2001      	movs	r0, #1
}
    7b02:	bd70      	pop	{r4, r5, r6, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    7b04:	2b10      	cmp	r3, #16
    7b06:	d001      	beq.n	7b0c <SdFile::openCachedEntry(unsigned char, unsigned char)+0x58>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    7b08:	2000      	movs	r0, #0
    7b0a:	bd70      	pop	{r4, r5, r6, pc}
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    7b0c:	f100 0218 	add.w	r2, r0, #24
    7b10:	6a00      	ldr	r0, [r0, #32]
    7b12:	f000 fa8b 	bl	802c <SdVolume::chainSize(unsigned long, unsigned long*) const>
    7b16:	2800      	cmp	r0, #0
    7b18:	d0f6      	beq.n	7b08 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    type_ = FAT_FILE_TYPE_SUBDIR;
    7b1a:	2304      	movs	r3, #4
    7b1c:	71a3      	strb	r3, [r4, #6]
    7b1e:	e7e7      	b.n	7af0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3c>
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    7b20:	4620      	mov	r0, r4
  return true;
}
    7b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    7b26:	f7ff bf6d 	b.w	7a04 <SdFile::truncate(unsigned long)>
    7b2a:	bf00      	nop
    7b2c:	1fff9398 	.word	0x1fff9398
    7b30:	1fff8760 	.word	0x1fff8760

00007b34 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b38:	b084      	sub	sp, #16
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    7b3a:	af01      	add	r7, sp, #4
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7b3c:	4606      	mov	r6, r0
    7b3e:	460c      	mov	r4, r1
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    7b40:	4610      	mov	r0, r2
    7b42:	4639      	mov	r1, r7
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7b44:	4699      	mov	r9, r3
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    7b46:	f7ff fe0b 	bl	7760 <SdFile::make83Name(char const*, unsigned char*)>
    7b4a:	b378      	cbz	r0, 7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    7b4c:	2200      	movs	r2, #0
  vol_ = dirFile->vol_;
    7b4e:	6a21      	ldr	r1, [r4, #32]
    7b50:	6231      	str	r1, [r6, #32]
    7b52:	4613      	mov	r3, r2
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    7b54:	4615      	mov	r5, r2
    7b56:	60a2      	str	r2, [r4, #8]
    7b58:	60e2      	str	r2, [r4, #12]
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    7b5a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 7c5c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x128>
    7b5e:	e008      	b.n	7b72 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3e>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    7b60:	2be5      	cmp	r3, #229	; 0xe5
    7b62:	d01c      	beq.n	7b9e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x6a>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    7b64:	4601      	mov	r1, r0
    7b66:	220b      	movs	r2, #11
    7b68:	4638      	mov	r0, r7
    7b6a:	f003 fccb 	bl	b504 <memcmp>
    7b6e:	b388      	cbz	r0, 7bd4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xa0>
    7b70:	68e3      	ldr	r3, [r4, #12]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    7b72:	69a2      	ldr	r2, [r4, #24]
    7b74:	429a      	cmp	r2, r3
    7b76:	d91d      	bls.n	7bb4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x80>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    7b78:	4620      	mov	r0, r4
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    7b7a:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    p = dirFile->readDirCache();
    7b7e:	f7ff fee9 	bl	7954 <SdFile::readDirCache()>
    if (p == NULL) return false;
    7b82:	b198      	cbz	r0, 7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    7b84:	7803      	ldrb	r3, [r0, #0]
    7b86:	2b00      	cmp	r3, #0
    7b88:	d1ea      	bne.n	7b60 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2c>
      // remember first empty slot
      if (!emptyFound) {
    7b8a:	b95d      	cbnz	r5, 7ba4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x70>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    7b8c:	f8d8 3000 	ldr.w	r3, [r8]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    7b90:	f886 a014 	strb.w	sl, [r6, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    7b94:	6133      	str	r3, [r6, #16]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    7b96:	7803      	ldrb	r3, [r0, #0]
    7b98:	b123      	cbz	r3, 7ba4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x70>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    7b9a:	2501      	movs	r5, #1
    7b9c:	e7e8      	b.n	7b70 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3c>
    7b9e:	2d00      	cmp	r5, #0
    7ba0:	d1fb      	bne.n	7b9a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x66>
    7ba2:	e7f3      	b.n	7b8c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x58>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    7ba4:	f009 0312 	and.w	r3, r9, #18
    7ba8:	2b12      	cmp	r3, #18
    7baa:	d01d      	beq.n	7be8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xb4>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    7bac:	2000      	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    7bae:	b004      	add	sp, #16
    7bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    7bb4:	f009 0312 	and.w	r3, r9, #18
    7bb8:	2b12      	cmp	r3, #18
    7bba:	d1f7      	bne.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    7bbc:	b9a5      	cbnz	r5, 7be8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xb4>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    7bbe:	79a3      	ldrb	r3, [r4, #6]
    7bc0:	2b02      	cmp	r3, #2
    7bc2:	d0f3      	beq.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    7bc4:	4620      	mov	r0, r4
    7bc6:	f7ff fd95 	bl	76f4 <SdFile::addDirCluster()>
    7bca:	2800      	cmp	r0, #0
    7bcc:	d0ee      	beq.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    7bce:	4c21      	ldr	r4, [pc, #132]	; (7c54 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x120>)

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    7bd0:	7535      	strb	r5, [r6, #20]
    7bd2:	e014      	b.n	7bfe <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xca>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    7bd4:	f009 0330 	and.w	r3, r9, #48	; 0x30
    7bd8:	2b30      	cmp	r3, #48	; 0x30
    7bda:	d0e7      	beq.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    7bdc:	464a      	mov	r2, r9
    7bde:	4651      	mov	r1, sl
    7be0:	4630      	mov	r0, r6
    7be2:	f7ff ff67 	bl	7ab4 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    7be6:	e7e2      	b.n	7bae <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x7a>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    7be8:	2101      	movs	r1, #1
    7bea:	6930      	ldr	r0, [r6, #16]
    7bec:	f000 f964 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d0db      	beq.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    7bf4:	7d34      	ldrb	r4, [r6, #20]
    7bf6:	4b17      	ldr	r3, [pc, #92]	; (7c54 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x120>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    7bf8:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    7bfc:	d0d6      	beq.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    7bfe:	2220      	movs	r2, #32
    7c00:	2100      	movs	r1, #0
    7c02:	4620      	mov	r0, r4
    7c04:	f003 fd14 	bl	b630 <memset>
  memcpy(p->name, dname, 11);
    7c08:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    7c0c:	4623      	mov	r3, r4
    7c0e:	c303      	stmia	r3!, {r0, r1}

  // set timestamps
  if (dateTime_) {
    7c10:	4911      	ldr	r1, [pc, #68]	; (7c58 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x124>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    7c12:	f823 2b02 	strh.w	r2, [r3], #2

  // set timestamps
  if (dateTime_) {
    7c16:	680d      	ldr	r5, [r1, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    7c18:	0c12      	lsrs	r2, r2, #16
    7c1a:	701a      	strb	r2, [r3, #0]

  // set timestamps
  if (dateTime_) {
    7c1c:	b19d      	cbz	r5, 7c46 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x112>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    7c1e:	f104 010e 	add.w	r1, r4, #14
    7c22:	f104 0010 	add.w	r0, r4, #16
    7c26:	47a8      	blx	r5
    7c28:	8a23      	ldrh	r3, [r4, #16]
    7c2a:	89e2      	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    7c2c:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    7c2e:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    7c30:	82e2      	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    7c32:	f000 f917 	bl	7e64 <SdVolume::cacheFlush()>
    7c36:	2800      	cmp	r0, #0
    7c38:	d0b8      	beq.n	7bac <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    7c3a:	464a      	mov	r2, r9
    7c3c:	7d31      	ldrb	r1, [r6, #20]
    7c3e:	4630      	mov	r0, r6
    7c40:	f7ff ff38 	bl	7ab4 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    7c44:	e7b3      	b.n	7bae <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x7a>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    7c46:	f642 0321 	movw	r3, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    7c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    7c4e:	8223      	strh	r3, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    7c50:	81e2      	strh	r2, [r4, #14]
    7c52:	e7eb      	b.n	7c2c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xf8>
    7c54:	1fff9398 	.word	0x1fff9398
    7c58:	1fff938c 	.word	0x1fff938c
    7c5c:	1fff8760 	.word	0x1fff8760

00007c60 <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7c60:	b410      	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    7c62:	7984      	ldrb	r4, [r0, #6]
    7c64:	b114      	cbz	r4, 7c6c <SdFile::open(SdFile*, char const*, unsigned char)+0xc>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    7c66:	2000      	movs	r0, #0
    7c68:	bc10      	pop	{r4}
    7c6a:	4770      	bx	lr
    7c6c:	bc10      	pop	{r4}
    7c6e:	f7ff bf61 	b.w	7b34 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    7c72:	bf00      	nop

00007c74 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    7c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c78:	468b      	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7c7a:	7981      	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    7c7c:	b085      	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7c7e:	2901      	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    7c80:	4607      	mov	r7, r0
    7c82:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7c84:	d005      	beq.n	7c92 <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7c86:	2301      	movs	r3, #1
    7c88:	713b      	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    7c8a:	2000      	movs	r0, #0
}
    7c8c:	b005      	add	sp, #20
    7c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7c92:	7942      	ldrb	r2, [r0, #5]
    7c94:	0791      	lsls	r1, r2, #30
    7c96:	d5f6      	bpl.n	7c86 <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    7c98:	0753      	lsls	r3, r2, #29
    7c9a:	d508      	bpl.n	7cae <SdFile::write(void const*, unsigned int)+0x3a>
    7c9c:	68fc      	ldr	r4, [r7, #12]
    7c9e:	69b9      	ldr	r1, [r7, #24]
    7ca0:	428c      	cmp	r4, r1
    7ca2:	f000 80a8 	beq.w	7df6 <SdFile::write(void const*, unsigned int)+0x182>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    7ca6:	f7ff fe75 	bl	7994 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    7caa:	2800      	cmp	r0, #0
    7cac:	d0eb      	beq.n	7c86 <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    7cae:	9b01      	ldr	r3, [sp, #4]
    7cb0:	68fc      	ldr	r4, [r7, #12]
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	d049      	beq.n	7d4a <SdFile::write(void const*, unsigned int)+0xd6>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    7cb6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 7e44 <SdFile::write(void const*, unsigned int)+0x1d0>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    7cba:	f8df a18c 	ldr.w	sl, [pc, #396]	; 7e48 <SdFile::write(void const*, unsigned int)+0x1d4>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    7cbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    7cc2:	6a38      	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    7cc4:	7906      	ldrb	r6, [r0, #4]
    7cc6:	3e01      	subs	r6, #1
    7cc8:	ea06 2654 	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    7ccc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    7cd0:	f3c4 0408 	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    7cd4:	d142      	bne.n	7d5c <SdFile::write(void const*, unsigned int)+0xe8>
    7cd6:	2c00      	cmp	r4, #0
    7cd8:	d140      	bne.n	7d5c <SdFile::write(void const*, unsigned int)+0xe8>
      // start of new cluster
      if (curCluster_ == 0) {
    7cda:	68b9      	ldr	r1, [r7, #8]
    7cdc:	2900      	cmp	r1, #0
    7cde:	d16f      	bne.n	7dc0 <SdFile::write(void const*, unsigned int)+0x14c>
        if (firstCluster_ == 0) {
    7ce0:	69fa      	ldr	r2, [r7, #28]
    7ce2:	2a00      	cmp	r2, #0
    7ce4:	d07e      	beq.n	7de4 <SdFile::write(void const*, unsigned int)+0x170>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    7ce6:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    7ce8:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    7cec:	b2ad      	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    7cee:	4545      	cmp	r5, r8
    7cf0:	d93a      	bls.n	7d68 <SdFile::write(void const*, unsigned int)+0xf4>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7cf2:	7c05      	ldrb	r5, [r0, #16]
    7cf4:	6941      	ldr	r1, [r0, #20]
    7cf6:	3a02      	subs	r2, #2
    7cf8:	40aa      	lsls	r2, r5
    7cfa:	440e      	add	r6, r1
    7cfc:	4416      	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    7cfe:	fa1f f588 	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    7d02:	b91c      	cbnz	r4, 7d0c <SdFile::write(void const*, unsigned int)+0x98>
    7d04:	68f8      	ldr	r0, [r7, #12]
    7d06:	69ba      	ldr	r2, [r7, #24]
    7d08:	4290      	cmp	r0, r2
    7d0a:	d24c      	bcs.n	7da6 <SdFile::write(void const*, unsigned int)+0x132>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    7d0c:	4630      	mov	r0, r6
    7d0e:	2101      	movs	r1, #1
    7d10:	f000 f8d2 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7d14:	2800      	cmp	r0, #0
    7d16:	d0b6      	beq.n	7c86 <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    7d18:	444c      	add	r4, r9
      uint8_t* end = dst + n;
    7d1a:	eb04 0e05 	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    7d1e:	4574      	cmp	r4, lr
    7d20:	d00d      	beq.n	7d3e <SdFile::write(void const*, unsigned int)+0xca>
    7d22:	f10b 31ff 	add.w	r1, fp, #4294967295
    7d26:	1e62      	subs	r2, r4, #1
    7d28:	f10e 36ff 	add.w	r6, lr, #4294967295
    7d2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7d30:	f802 0f01 	strb.w	r0, [r2, #1]!
    7d34:	4296      	cmp	r6, r2
    7d36:	d1f9      	bne.n	7d2c <SdFile::write(void const*, unsigned int)+0xb8>
    7d38:	ebc4 040e 	rsb	r4, r4, lr
    7d3c:	44a3      	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    7d3e:	68fc      	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7d40:	ebb8 0805 	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    7d44:	442c      	add	r4, r5
    7d46:	60fc      	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7d48:	d1bb      	bne.n	7cc2 <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    7d4a:	69bb      	ldr	r3, [r7, #24]
    7d4c:	42a3      	cmp	r3, r4
    7d4e:	d257      	bcs.n	7e00 <SdFile::write(void const*, unsigned int)+0x18c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    7d50:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    7d52:	61bc      	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    7d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7d58:	717a      	strb	r2, [r7, #5]
    7d5a:	e05a      	b.n	7e12 <SdFile::write(void const*, unsigned int)+0x19e>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    7d5c:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    7d60:	b2ad      	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    7d62:	4545      	cmp	r5, r8
    7d64:	68ba      	ldr	r2, [r7, #8]
    7d66:	d8c4      	bhi.n	7cf2 <SdFile::write(void const*, unsigned int)+0x7e>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7d68:	7c01      	ldrb	r1, [r0, #16]
    7d6a:	6940      	ldr	r0, [r0, #20]
    7d6c:	3a02      	subs	r2, #2
    7d6e:	408a      	lsls	r2, r1
    7d70:	4406      	add	r6, r0
    if (n == 512) {
    7d72:	f5b5 7f00 	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7d76:	4416      	add	r6, r2
    if (n == 512) {
    7d78:	d1c3      	bne.n	7d02 <SdFile::write(void const*, unsigned int)+0x8e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    7d7a:	f8da 2000 	ldr.w	r2, [sl]
    7d7e:	4296      	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    7d80:	bf04      	itt	eq
    7d82:	f04f 32ff 	moveq.w	r2, #4294967295
    7d86:	f8ca 2000 	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    7d8a:	4a2a      	ldr	r2, [pc, #168]	; (7e34 <SdFile::write(void const*, unsigned int)+0x1c0>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    7d8c:	4631      	mov	r1, r6
    7d8e:	6810      	ldr	r0, [r2, #0]
    7d90:	465a      	mov	r2, fp
    7d92:	f7ff fc15 	bl	75c0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    7d96:	2800      	cmp	r0, #0
    7d98:	f43f af75 	beq.w	7c86 <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    7d9c:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    7da0:	f44f 7500 	mov.w	r5, #512	; 0x200
    7da4:	e7cb      	b.n	7d3e <SdFile::write(void const*, unsigned int)+0xca>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    7da6:	f000 f85d 	bl	7e64 <SdVolume::cacheFlush()>
    7daa:	2800      	cmp	r0, #0
    7dac:	f43f af6b 	beq.w	7c86 <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    7db0:	4921      	ldr	r1, [pc, #132]	; (7e38 <SdFile::write(void const*, unsigned int)+0x1c4>)
        SdVolume::cacheBlockNumber_ = block;
    7db2:	f8ca 6000 	str.w	r6, [sl]
    7db6:	780a      	ldrb	r2, [r1, #0]
    7db8:	f042 0201 	orr.w	r2, r2, #1
    7dbc:	700a      	strb	r2, [r1, #0]
    7dbe:	e7ab      	b.n	7d18 <SdFile::write(void const*, unsigned int)+0xa4>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    7dc0:	aa03      	add	r2, sp, #12
    7dc2:	f000 f8fb 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    7dc6:	2800      	cmp	r0, #0
    7dc8:	f43f af60 	beq.w	7c8c <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    7dcc:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    7dce:	4b1b      	ldr	r3, [pc, #108]	; (7e3c <SdFile::write(void const*, unsigned int)+0x1c8>)
    7dd0:	f890 5020 	ldrb.w	r5, [r0, #32]
    7dd4:	9a03      	ldr	r2, [sp, #12]
    7dd6:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    7dda:	2d10      	cmp	r5, #16
    7ddc:	bf18      	it	ne
    7dde:	4619      	movne	r1, r3
    7de0:	428a      	cmp	r2, r1
    7de2:	d380      	bcc.n	7ce6 <SdFile::write(void const*, unsigned int)+0x72>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    7de4:	4638      	mov	r0, r7
    7de6:	f7ff fc6f 	bl	76c8 <SdFile::addCluster()>
    7dea:	2800      	cmp	r0, #0
    7dec:	f43f af4b 	beq.w	7c86 <SdFile::write(void const*, unsigned int)+0x12>
    7df0:	6a38      	ldr	r0, [r7, #32]
    7df2:	68ba      	ldr	r2, [r7, #8]
    7df4:	e778      	b.n	7ce8 <SdFile::write(void const*, unsigned int)+0x74>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7df6:	9b01      	ldr	r3, [sp, #4]
    7df8:	2b00      	cmp	r3, #0
    7dfa:	f47f af5c 	bne.w	7cb6 <SdFile::write(void const*, unsigned int)+0x42>
    7dfe:	e008      	b.n	7e12 <SdFile::write(void const*, unsigned int)+0x19e>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    7e00:	4b0f      	ldr	r3, [pc, #60]	; (7e40 <SdFile::write(void const*, unsigned int)+0x1cc>)
    7e02:	797a      	ldrb	r2, [r7, #5]
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	b123      	cbz	r3, 7e12 <SdFile::write(void const*, unsigned int)+0x19e>
    7e08:	9b01      	ldr	r3, [sp, #4]
    7e0a:	b113      	cbz	r3, 7e12 <SdFile::write(void const*, unsigned int)+0x19e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    7e0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7e10:	717a      	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    7e12:	0712      	lsls	r2, r2, #28
    7e14:	d509      	bpl.n	7e2a <SdFile::write(void const*, unsigned int)+0x1b6>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7e16:	79bb      	ldrb	r3, [r7, #6]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	f43f af34 	beq.w	7c86 <SdFile::write(void const*, unsigned int)+0x12>
    7e1e:	4638      	mov	r0, r7
    7e20:	f7ff fc1c 	bl	765c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    7e24:	2800      	cmp	r0, #0
    7e26:	f43f af2e 	beq.w	7c86 <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    7e2a:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    7e2c:	b005      	add	sp, #20
    7e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e32:	bf00      	nop
    7e34:	1fff9394 	.word	0x1fff9394
    7e38:	1fff9598 	.word	0x1fff9598
    7e3c:	0ffffff8 	.word	0x0ffffff8
    7e40:	1fff938c 	.word	0x1fff938c
    7e44:	1fff9398 	.word	0x1fff9398
    7e48:	1fff8760 	.word	0x1fff8760

00007e4c <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    7e4c:	b500      	push	{lr}
    7e4e:	b083      	sub	sp, #12
    7e50:	ab02      	add	r3, sp, #8
  return write(&b, 1);
    7e52:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    7e54:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    7e58:	4619      	mov	r1, r3
    7e5a:	f7ff ff0b 	bl	7c74 <SdFile::write(void const*, unsigned int)>
}
    7e5e:	b003      	add	sp, #12
    7e60:	f85d fb04 	ldr.w	pc, [sp], #4

00007e64 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    7e64:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    7e66:	4c0f      	ldr	r4, [pc, #60]	; (7ea4 <SdVolume::cacheFlush()+0x40>)
    7e68:	7823      	ldrb	r3, [r4, #0]
    7e6a:	b90b      	cbnz	r3, 7e70 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    7e6c:	2001      	movs	r0, #1
}
    7e6e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    7e70:	4b0d      	ldr	r3, [pc, #52]	; (7ea8 <SdVolume::cacheFlush()+0x44>)
    7e72:	4d0e      	ldr	r5, [pc, #56]	; (7eac <SdVolume::cacheFlush()+0x48>)
    7e74:	6819      	ldr	r1, [r3, #0]
    7e76:	6828      	ldr	r0, [r5, #0]
    7e78:	4a0d      	ldr	r2, [pc, #52]	; (7eb0 <SdVolume::cacheFlush()+0x4c>)
    7e7a:	f7ff fba1 	bl	75c0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    7e7e:	b170      	cbz	r0, 7e9e <SdVolume::cacheFlush()+0x3a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    7e80:	4e0c      	ldr	r6, [pc, #48]	; (7eb4 <SdVolume::cacheFlush()+0x50>)
    7e82:	6831      	ldr	r1, [r6, #0]
    7e84:	b919      	cbnz	r1, 7e8e <SdVolume::cacheFlush()+0x2a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    7e86:	2300      	movs	r3, #0
    7e88:	7023      	strb	r3, [r4, #0]
  }
  return true;
    7e8a:	2001      	movs	r0, #1
    7e8c:	bd70      	pop	{r4, r5, r6, pc}
    7e8e:	6828      	ldr	r0, [r5, #0]
    7e90:	4a07      	ldr	r2, [pc, #28]	; (7eb0 <SdVolume::cacheFlush()+0x4c>)
    7e92:	f7ff fb95 	bl	75c0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    7e96:	b110      	cbz	r0, 7e9e <SdVolume::cacheFlush()+0x3a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    7e98:	2300      	movs	r3, #0
    7e9a:	6033      	str	r3, [r6, #0]
    7e9c:	e7f3      	b.n	7e86 <SdVolume::cacheFlush()+0x22>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    7e9e:	2000      	movs	r0, #0
    7ea0:	bd70      	pop	{r4, r5, r6, pc}
    7ea2:	bf00      	nop
    7ea4:	1fff9598 	.word	0x1fff9598
    7ea8:	1fff8760 	.word	0x1fff8760
    7eac:	1fff9394 	.word	0x1fff9394
    7eb0:	1fff9398 	.word	0x1fff9398
    7eb4:	1fff9390 	.word	0x1fff9390

00007eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    7eb8:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    7eba:	4d0d      	ldr	r5, [pc, #52]	; (7ef0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x38>)
    7ebc:	682b      	ldr	r3, [r5, #0]
    7ebe:	4283      	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    7ec0:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    7ec2:	d00e      	beq.n	7ee2 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    7ec4:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    7ec6:	f7ff ffcd 	bl	7e64 <SdVolume::cacheFlush()>
    7eca:	b908      	cbnz	r0, 7ed0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    7ecc:	2000      	movs	r0, #0
    7ece:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    7ed0:	4b08      	ldr	r3, [pc, #32]	; (7ef4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    7ed2:	4a09      	ldr	r2, [pc, #36]	; (7ef8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x40>)
    7ed4:	6818      	ldr	r0, [r3, #0]
    7ed6:	4621      	mov	r1, r4
    7ed8:	f7ff faac 	bl	7434 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    7edc:	2800      	cmp	r0, #0
    7ede:	d0f5      	beq.n	7ecc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    7ee0:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    7ee2:	4b06      	ldr	r3, [pc, #24]	; (7efc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x44>)
    7ee4:	7819      	ldrb	r1, [r3, #0]
    7ee6:	4331      	orrs	r1, r6
    7ee8:	7019      	strb	r1, [r3, #0]
  return true;
    7eea:	2001      	movs	r0, #1
}
    7eec:	bd70      	pop	{r4, r5, r6, pc}
    7eee:	bf00      	nop
    7ef0:	1fff8760 	.word	0x1fff8760
    7ef4:	1fff9394 	.word	0x1fff9394
    7ef8:	1fff9398 	.word	0x1fff9398
    7efc:	1fff9598 	.word	0x1fff9598

00007f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    7f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7f02:	f890 3020 	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    7f06:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7f08:	2b10      	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    7f0a:	4b1a      	ldr	r3, [pc, #104]	; (7f74 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    7f0c:	4605      	mov	r5, r0
    7f0e:	460e      	mov	r6, r1
    7f10:	4617      	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    7f12:	681b      	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7f14:	d016      	beq.n	7f44 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    7f16:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    7f1a:	429c      	cmp	r4, r3
    7f1c:	d116      	bne.n	7f4c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    7f1e:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    7f22:	4a15      	ldr	r2, [pc, #84]	; (7f78 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    7f24:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    7f28:	4914      	ldr	r1, [pc, #80]	; (7f7c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    7f2a:	7e28      	ldrb	r0, [r5, #24]
    7f2c:	780a      	ldrb	r2, [r1, #0]
    7f2e:	2801      	cmp	r0, #1
    7f30:	f042 0201 	orr.w	r2, r2, #1
    7f34:	700a      	strb	r2, [r1, #0]
    7f36:	d918      	bls.n	7f6a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    7f38:	68a9      	ldr	r1, [r5, #8]
    7f3a:	4a11      	ldr	r2, [pc, #68]	; (7f80 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    7f3c:	440b      	add	r3, r1
    7f3e:	6013      	str	r3, [r2, #0]
  return true;
    7f40:	2001      	movs	r0, #1
    7f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7f44:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    7f48:	429c      	cmp	r4, r3
    7f4a:	d008      	beq.n	7f5e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    7f4c:	2100      	movs	r1, #0
    7f4e:	4620      	mov	r0, r4
    7f50:	f7ff ffb2 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7f54:	b150      	cbz	r0, 7f6c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    7f56:	f895 3020 	ldrb.w	r3, [r5, #32]
    7f5a:	2b10      	cmp	r3, #16
    7f5c:	d107      	bne.n	7f6e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    7f5e:	b2f6      	uxtb	r6, r6
    7f60:	4a05      	ldr	r2, [pc, #20]	; (7f78 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    7f62:	4623      	mov	r3, r4
    7f64:	f822 7016 	strh.w	r7, [r2, r6, lsl #1]
    7f68:	e7de      	b.n	7f28 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    7f6a:	2001      	movs	r0, #1
}
    7f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    7f6e:	4623      	mov	r3, r4
    7f70:	e7d5      	b.n	7f1e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    7f72:	bf00      	nop
    7f74:	1fff8760 	.word	0x1fff8760
    7f78:	1fff9398 	.word	0x1fff9398
    7f7c:	1fff9598 	.word	0x1fff9598
    7f80:	1fff9390 	.word	0x1fff9390

00007f84 <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    7f84:	b510      	push	{r4, lr}
    7f86:	4604      	mov	r4, r0
  if (!cacheFlush()) return false;
    7f88:	f7ff ff6c 	bl	7e64 <SdVolume::cacheFlush()>
    7f8c:	b178      	cbz	r0, 7fae <SdVolume::cacheZeroBlock(unsigned long)+0x2a>
    7f8e:	4b08      	ldr	r3, [pc, #32]	; (7fb0 <SdVolume::cacheZeroBlock(unsigned long)+0x2c>)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    7f90:	2100      	movs	r1, #0
    7f92:	f503 7200 	add.w	r2, r3, #512	; 0x200
    7f96:	f803 1f01 	strb.w	r1, [r3, #1]!
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    7f9a:	4293      	cmp	r3, r2
    7f9c:	d1fb      	bne.n	7f96 <SdVolume::cacheZeroBlock(unsigned long)+0x12>
    7f9e:	4a05      	ldr	r2, [pc, #20]	; (7fb4 <SdVolume::cacheZeroBlock(unsigned long)+0x30>)
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    7fa0:	4905      	ldr	r1, [pc, #20]	; (7fb8 <SdVolume::cacheZeroBlock(unsigned long)+0x34>)
    7fa2:	7813      	ldrb	r3, [r2, #0]
    7fa4:	600c      	str	r4, [r1, #0]
    7fa6:	f043 0301 	orr.w	r3, r3, #1
    7faa:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
    7fac:	2001      	movs	r0, #1
}
    7fae:	bd10      	pop	{r4, pc}
    7fb0:	1fff9397 	.word	0x1fff9397
    7fb4:	1fff9598 	.word	0x1fff9598
    7fb8:	1fff8760 	.word	0x1fff8760

00007fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    7fbc:	68c3      	ldr	r3, [r0, #12]
    7fbe:	3301      	adds	r3, #1
    7fc0:	428b      	cmp	r3, r1
    7fc2:	d318      	bcc.n	7ff6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    7fc4:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7fc6:	f890 3020 	ldrb.w	r3, [r0, #32]
    7fca:	2b10      	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    7fcc:	4b15      	ldr	r3, [pc, #84]	; (8024 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    7fce:	4604      	mov	r4, r0
    7fd0:	4616      	mov	r6, r2
    7fd2:	460d      	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    7fd4:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    7fd6:	681b      	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7fd8:	d00f      	beq.n	7ffa <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    7fda:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    7fde:	4298      	cmp	r0, r3
    7fe0:	d10f      	bne.n	8002 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    7fe2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    7fe6:	4b10      	ldr	r3, [pc, #64]	; (8028 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    7fe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7fec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    7ff0:	6033      	str	r3, [r6, #0]
    7ff2:	2001      	movs	r0, #1
  }
  return true;
}
    7ff4:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    7ff6:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    7ff8:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7ffa:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    7ffe:	4298      	cmp	r0, r3
    8000:	d007      	beq.n	8012 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    8002:	2100      	movs	r1, #0
    8004:	f7ff ff58 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8008:	b150      	cbz	r0, 8020 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    800a:	f894 3020 	ldrb.w	r3, [r4, #32]
    800e:	2b10      	cmp	r3, #16
    8010:	d1e7      	bne.n	7fe2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    8012:	b2e9      	uxtb	r1, r5
    8014:	4b04      	ldr	r3, [pc, #16]	; (8028 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    8016:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    801a:	6033      	str	r3, [r6, #0]
    801c:	2001      	movs	r0, #1
    801e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    8020:	2000      	movs	r0, #0
    8022:	bd70      	pop	{r4, r5, r6, pc}
    8024:	1fff8760 	.word	0x1fff8760
    8028:	1fff9398 	.word	0x1fff9398

0000802c <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    802c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8030:	b082      	sub	sp, #8
    8032:	ad02      	add	r5, sp, #8
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    8034:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8088 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5c>
    8038:	f845 1d04 	str.w	r1, [r5, #-4]!
    803c:	4604      	mov	r4, r0
    803e:	4691      	mov	r9, r2
  uint32_t s = 0;
    8040:	f04f 0a00 	mov.w	sl, #0
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    8044:	f44f 7700 	mov.w	r7, #512	; 0x200
    8048:	f64f 76f8 	movw	r6, #65528	; 0xfff8
    804c:	e00c      	b.n	8068 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x3c>
    804e:	f894 3020 	ldrb.w	r3, [r4, #32]
    8052:	7c22      	ldrb	r2, [r4, #16]
  } while (!isEOC(cluster));
    8054:	9901      	ldr	r1, [sp, #4]
    8056:	2b10      	cmp	r3, #16
    8058:	bf14      	ite	ne
    805a:	4643      	movne	r3, r8
    805c:	4633      	moveq	r3, r6
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    805e:	fa07 f202 	lsl.w	r2, r7, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    8062:	4299      	cmp	r1, r3
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    8064:	4492      	add	sl, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    8066:	d208      	bcs.n	807a <SdVolume::chainSize(unsigned long, unsigned long*) const+0x4e>
    if (!fatGet(cluster, &cluster)) return false;
    8068:	462a      	mov	r2, r5
    806a:	4620      	mov	r0, r4
    806c:	f7ff ffa6 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    8070:	2800      	cmp	r0, #0
    8072:	d1ec      	bne.n	804e <SdVolume::chainSize(unsigned long, unsigned long*) const+0x22>
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    8074:	b002      	add	sp, #8
    8076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    807a:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    807c:	f8c9 a000 	str.w	sl, [r9]
  return true;
}
    8080:	b002      	add	sp, #8
    8082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8086:	bf00      	nop
    8088:	0ffffff8 	.word	0x0ffffff8

0000808c <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    8090:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    8092:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    8094:	b36f      	cbz	r7, 80f2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    8096:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    8098:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    809c:	68c3      	ldr	r3, [r0, #12]
    809e:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    80a2:	b313      	cbz	r3, 80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    80a4:	468b      	mov	fp, r1
    80a6:	4606      	mov	r6, r0
    80a8:	4691      	mov	r9, r2
    80aa:	463c      	mov	r4, r7
    80ac:	2500      	movs	r5, #0
    80ae:	e005      	b.n	80bc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    80b0:	461c      	mov	r4, r3
    80b2:	461f      	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    80b4:	68f3      	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    80b6:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    80b8:	42ab      	cmp	r3, r5
    80ba:	d916      	bls.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    80bc:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    80be:	bf38      	it	cc
    80c0:	2402      	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    80c2:	4621      	mov	r1, r4
    80c4:	aa01      	add	r2, sp, #4
    80c6:	4630      	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    80c8:	bf38      	it	cc
    80ca:	4627      	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    80cc:	f7ff ff76 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    80d0:	1c63      	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    80d2:	1bd9      	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    80d4:	b148      	cbz	r0, 80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    80d6:	9a01      	ldr	r2, [sp, #4]
    80d8:	2a00      	cmp	r2, #0
    80da:	d1e9      	bne.n	80b0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    80dc:	458b      	cmp	fp, r1
    80de:	d010      	beq.n	8102 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    80e0:	461c      	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    80e2:	68f3      	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    80e4:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    80e6:	42ab      	cmp	r3, r5
    80e8:	d8e8      	bhi.n	80bc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    80ea:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    80ec:	b003      	add	sp, #12
    80ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    80f2:	f1a1 0a01 	sub.w	sl, r1, #1
    80f6:	faba fa8a 	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    80fa:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    80fc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    8100:	e7cc      	b.n	809c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    8102:	2c01      	cmp	r4, #1
    8104:	d9f1      	bls.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8106:	68f3      	ldr	r3, [r6, #12]
    8108:	3301      	adds	r3, #1
    810a:	429c      	cmp	r4, r3
    810c:	d8ed      	bhi.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    810e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    8112:	4621      	mov	r1, r4
    8114:	4630      	mov	r0, r6
    8116:	f7ff fef3 	bl	7f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    811a:	2800      	cmp	r0, #0
    811c:	d0e5      	beq.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    811e:	42a7      	cmp	r7, r4
    8120:	d214      	bcs.n	814c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    8122:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    8124:	2c01      	cmp	r4, #1
    8126:	d9e0      	bls.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8128:	68f3      	ldr	r3, [r6, #12]
    812a:	3301      	adds	r3, #1
    812c:	429c      	cmp	r4, r3
    812e:	d8dc      	bhi.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    8130:	1c62      	adds	r2, r4, #1
    8132:	4621      	mov	r1, r4
    8134:	4630      	mov	r0, r6
    8136:	f7ff fee3 	bl	7f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    813a:	2800      	cmp	r0, #0
    813c:	d0d5      	beq.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    813e:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    8140:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    8144:	d002      	beq.n	814c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    8146:	2c01      	cmp	r4, #1
    8148:	d1ee      	bne.n	8128 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    814a:	e7ce      	b.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    814c:	f8d9 1000 	ldr.w	r1, [r9]
    8150:	b159      	cbz	r1, 816a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    8152:	2901      	cmp	r1, #1
    8154:	d9c9      	bls.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8156:	68f3      	ldr	r3, [r6, #12]
    8158:	3301      	adds	r3, #1
    815a:	4299      	cmp	r1, r3
    815c:	d8c5      	bhi.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    815e:	463a      	mov	r2, r7
    8160:	4630      	mov	r0, r6
    8162:	f7ff fecd 	bl	7f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    8166:	2800      	cmp	r0, #0
    8168:	d0bf      	beq.n	80ea <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    816a:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    816e:	f1ba 0f00 	cmp.w	sl, #0
    8172:	d001      	beq.n	8178 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    8174:	3701      	adds	r7, #1
    8176:	6037      	str	r7, [r6, #0]

  return true;
    8178:	2001      	movs	r0, #1
    817a:	e7b7      	b.n	80ec <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

0000817c <SdVolume::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    817c:	2901      	cmp	r1, #1
    817e:	d90a      	bls.n	8196 <SdVolume::fatPut(unsigned long, unsigned long)+0x1a>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8180:	68c3      	ldr	r3, [r0, #12]
    8182:	3301      	adds	r3, #1
    8184:	4299      	cmp	r1, r3
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    8186:	b410      	push	{r4}
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8188:	d802      	bhi.n	8190 <SdVolume::fatPut(unsigned long, unsigned long)+0x14>
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    818a:	bc10      	pop	{r4}
    818c:	f7ff beb8 	b.w	7f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    8190:	2000      	movs	r0, #0
    8192:	bc10      	pop	{r4}
    8194:	4770      	bx	lr
    8196:	2000      	movs	r0, #0
    8198:	4770      	bx	lr
    819a:	bf00      	nop

0000819c <SdVolume::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    819c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // clear free cluster location
  allocSearchStart_ = 2;
    819e:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    81a0:	b083      	sub	sp, #12
    81a2:	4605      	mov	r5, r0
    81a4:	4f13      	ldr	r7, [pc, #76]	; (81f4 <SdVolume::freeChain(unsigned long)+0x58>)
  // clear free cluster location
  allocSearchStart_ = 2;
    81a6:	6003      	str	r3, [r0, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    81a8:	460c      	mov	r4, r1
    81aa:	f64f 76f8 	movw	r6, #65528	; 0xfff8
    81ae:	e00f      	b.n	81d0 <SdVolume::freeChain(unsigned long)+0x34>
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    81b0:	68eb      	ldr	r3, [r5, #12]
    81b2:	3301      	adds	r3, #1
    81b4:	429c      	cmp	r4, r3
    81b6:	d816      	bhi.n	81e6 <SdVolume::freeChain(unsigned long)+0x4a>
    81b8:	f7ff fea2 	bl	7f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    81bc:	b198      	cbz	r0, 81e6 <SdVolume::freeChain(unsigned long)+0x4a>
    81be:	f895 3020 	ldrb.w	r3, [r5, #32]

    cluster = next;
    81c2:	9c01      	ldr	r4, [sp, #4]
    81c4:	2b10      	cmp	r3, #16
    81c6:	bf0c      	ite	eq
    81c8:	4633      	moveq	r3, r6
    81ca:	463b      	movne	r3, r7
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    81cc:	429c      	cmp	r4, r3
    81ce:	d20d      	bcs.n	81ec <SdVolume::freeChain(unsigned long)+0x50>
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    81d0:	aa01      	add	r2, sp, #4
    81d2:	4621      	mov	r1, r4
    81d4:	4628      	mov	r0, r5
    81d6:	f7ff fef1 	bl	7fbc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    81da:	4621      	mov	r1, r4
    81dc:	2200      	movs	r2, #0
    81de:	b110      	cbz	r0, 81e6 <SdVolume::freeChain(unsigned long)+0x4a>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    81e0:	2c01      	cmp	r4, #1
    81e2:	4628      	mov	r0, r5
    81e4:	d8e4      	bhi.n	81b0 <SdVolume::freeChain(unsigned long)+0x14>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    81e6:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    81e8:	b003      	add	sp, #12
    81ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    81ec:	2001      	movs	r0, #1
}
    81ee:	b003      	add	sp, #12
    81f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81f2:	bf00      	nop
    81f4:	0ffffff8 	.word	0x0ffffff8

000081f8 <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    81f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    81fa:	4b3e      	ldr	r3, [pc, #248]	; (82f4 <SdVolume::init(Sd2Card*, unsigned char)+0xfc>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    81fc:	4605      	mov	r5, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    81fe:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    8200:	4614      	mov	r4, r2
    8202:	b1da      	cbz	r2, 823c <SdVolume::init(Sd2Card*, unsigned char)+0x44>
    if (part > 4)return false;
    8204:	2a04      	cmp	r2, #4
    8206:	d901      	bls.n	820c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    8208:	2000      	movs	r0, #0
    820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    820c:	2100      	movs	r1, #0
    820e:	4608      	mov	r0, r1
    8210:	f7ff fe52 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8214:	2800      	cmp	r0, #0
    8216:	d0f7      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    8218:	4b37      	ldr	r3, [pc, #220]	; (82f8 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
    821a:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    821e:	f892 21ae 	ldrb.w	r2, [r2, #430]	; 0x1ae
    8222:	0652      	lsls	r2, r2, #25
    8224:	d1f0      	bne.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
    8226:	341b      	adds	r4, #27
    8228:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    822c:	f8d4 300a 	ldr.w	r3, [r4, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    8230:	2b63      	cmp	r3, #99	; 0x63
    8232:	d9e9      	bls.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    8234:	f8d4 4006 	ldr.w	r4, [r4, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    8238:	2c00      	cmp	r4, #0
    823a:	d0e5      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    823c:	2100      	movs	r1, #0
    823e:	4620      	mov	r0, r4
    8240:	f7ff fe3a 	bl	7eb8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8244:	2800      	cmp	r0, #0
    8246:	d0df      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    8248:	4a2b      	ldr	r2, [pc, #172]	; (82f8 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
    824a:	f8b2 300b 	ldrh.w	r3, [r2, #11]
    824e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8252:	d1d9      	bne.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    8254:	7c11      	ldrb	r1, [r2, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    8256:	2900      	cmp	r1, #0
    8258:	d0d6      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    825a:	89d3      	ldrh	r3, [r2, #14]
    825c:	2b00      	cmp	r3, #0
    825e:	d0d3      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    8260:	7b56      	ldrb	r6, [r2, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    8262:	2e00      	cmp	r6, #0
    8264:	d0d0      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    8266:	2300      	movs	r3, #0
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    8268:	7629      	strb	r1, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    826a:	712e      	strb	r6, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    826c:	742b      	strb	r3, [r5, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    826e:	2701      	movs	r7, #1
    8270:	e003      	b.n	827a <SdVolume::init(Sd2Card*, unsigned char)+0x82>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    8272:	2909      	cmp	r1, #9
    8274:	460b      	mov	r3, r1
    8276:	7429      	strb	r1, [r5, #16]
    8278:	d0c6      	beq.n	8208 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    827a:	fa07 f003 	lsl.w	r0, r7, r3
    827e:	42b0      	cmp	r0, r6
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    8280:	f103 0101 	add.w	r1, r3, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    8284:	d1f5      	bne.n	8272 <SdVolume::init(Sd2Card*, unsigned char)+0x7a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    8286:	8ad6      	ldrh	r6, [r2, #22]
    8288:	491b      	ldr	r1, [pc, #108]	; (82f8 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    828a:	b906      	cbnz	r6, 828e <SdVolume::init(Sd2Card*, unsigned char)+0x96>
    828c:	6a4e      	ldr	r6, [r1, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    828e:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    8292:	60ae      	str	r6, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    8294:	44a6      	add	lr, r4
    8296:	f8c5 e01c 	str.w	lr, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    829a:	f8b2 1011 	ldrh.w	r1, [r2, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    829e:	7c17      	ldrb	r7, [r2, #16]
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    82a0:	8469      	strh	r1, [r5, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    82a2:	0148      	lsls	r0, r1, #5

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    82a4:	fb06 e607 	mla	r6, r6, r7, lr

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    82a8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    82ac:	eb06 2060 	add.w	r0, r6, r0, asr #9

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    82b0:	626e      	str	r6, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    82b2:	6168      	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    82b4:	f8b2 1013 	ldrh.w	r1, [r2, #19]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    82b8:	4e0f      	ldr	r6, [pc, #60]	; (82f8 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    82ba:	b901      	cbnz	r1, 82be <SdVolume::init(Sd2Card*, unsigned char)+0xc6>
    82bc:	6a31      	ldr	r1, [r6, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    82be:	1a24      	subs	r4, r4, r0
    82c0:	440c      	add	r4, r1
    82c2:	fa24 f303 	lsr.w	r3, r4, r3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    82c6:	f640 71f4 	movw	r1, #4084	; 0xff4
    82ca:	428b      	cmp	r3, r1
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    82cc:	60eb      	str	r3, [r5, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    82ce:	d90b      	bls.n	82e8 <SdVolume::init(Sd2Card*, unsigned char)+0xf0>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    82d0:	f64f 71f4 	movw	r1, #65524	; 0xfff4
    82d4:	428b      	cmp	r3, r1
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    82d6:	bf85      	ittet	hi
    82d8:	6ad3      	ldrhi	r3, [r2, #44]	; 0x2c
    82da:	626b      	strhi	r3, [r5, #36]	; 0x24

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    82dc:	2310      	movls	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
    82de:	2320      	movhi	r3, #32
    82e0:	f885 3020 	strb.w	r3, [r5, #32]
  }
  return true;
    82e4:	2001      	movs	r0, #1
}
    82e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    82e8:	230c      	movs	r3, #12
    82ea:	f885 3020 	strb.w	r3, [r5, #32]
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    82ee:	2001      	movs	r0, #1
    82f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82f2:	bf00      	nop
    82f4:	1fff9394 	.word	0x1fff9394
    82f8:	1fff9398 	.word	0x1fff9398

000082fc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    82fc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    82fe:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8302:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8306:	d16d      	bne.n	83e4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8308:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    830a:	d341      	bcc.n	8390 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    830c:	f851 3b04 	ldr.w	r3, [r1], #4
    8310:	f840 3b04 	str.w	r3, [r0], #4
    8314:	f851 3b04 	ldr.w	r3, [r1], #4
    8318:	f840 3b04 	str.w	r3, [r0], #4
    831c:	f851 3b04 	ldr.w	r3, [r1], #4
    8320:	f840 3b04 	str.w	r3, [r0], #4
    8324:	f851 3b04 	ldr.w	r3, [r1], #4
    8328:	f840 3b04 	str.w	r3, [r0], #4
    832c:	f851 3b04 	ldr.w	r3, [r1], #4
    8330:	f840 3b04 	str.w	r3, [r0], #4
    8334:	f851 3b04 	ldr.w	r3, [r1], #4
    8338:	f840 3b04 	str.w	r3, [r0], #4
    833c:	f851 3b04 	ldr.w	r3, [r1], #4
    8340:	f840 3b04 	str.w	r3, [r0], #4
    8344:	f851 3b04 	ldr.w	r3, [r1], #4
    8348:	f840 3b04 	str.w	r3, [r0], #4
    834c:	f851 3b04 	ldr.w	r3, [r1], #4
    8350:	f840 3b04 	str.w	r3, [r0], #4
    8354:	f851 3b04 	ldr.w	r3, [r1], #4
    8358:	f840 3b04 	str.w	r3, [r0], #4
    835c:	f851 3b04 	ldr.w	r3, [r1], #4
    8360:	f840 3b04 	str.w	r3, [r0], #4
    8364:	f851 3b04 	ldr.w	r3, [r1], #4
    8368:	f840 3b04 	str.w	r3, [r0], #4
    836c:	f851 3b04 	ldr.w	r3, [r1], #4
    8370:	f840 3b04 	str.w	r3, [r0], #4
    8374:	f851 3b04 	ldr.w	r3, [r1], #4
    8378:	f840 3b04 	str.w	r3, [r0], #4
    837c:	f851 3b04 	ldr.w	r3, [r1], #4
    8380:	f840 3b04 	str.w	r3, [r0], #4
    8384:	f851 3b04 	ldr.w	r3, [r1], #4
    8388:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    838c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    838e:	d2bd      	bcs.n	830c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8390:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8392:	d311      	bcc.n	83b8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8394:	f851 3b04 	ldr.w	r3, [r1], #4
    8398:	f840 3b04 	str.w	r3, [r0], #4
    839c:	f851 3b04 	ldr.w	r3, [r1], #4
    83a0:	f840 3b04 	str.w	r3, [r0], #4
    83a4:	f851 3b04 	ldr.w	r3, [r1], #4
    83a8:	f840 3b04 	str.w	r3, [r0], #4
    83ac:	f851 3b04 	ldr.w	r3, [r1], #4
    83b0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    83b4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    83b6:	d2ed      	bcs.n	8394 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    83b8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    83ba:	d305      	bcc.n	83c8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    83bc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    83c0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    83c4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    83c6:	d2f9      	bcs.n	83bc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    83c8:	3204      	adds	r2, #4
	beq	.Ldone
    83ca:	d008      	beq.n	83de <memcpy+0xe2>

	lsls	r2, r2, #31
    83cc:	07d2      	lsls	r2, r2, #31
	itt ne
    83ce:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    83d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    83d4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    83d8:	d301      	bcc.n	83de <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    83da:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    83dc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    83de:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    83e0:	4770      	bx	lr
    83e2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    83e4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    83e6:	d313      	bcc.n	8410 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    83e8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    83ea:	d08d      	beq.n	8308 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    83ec:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    83f0:	d08a      	beq.n	8308 <memcpy+0xc>

	rsb	r3, #4
    83f2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    83f6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    83f8:	07db      	lsls	r3, r3, #31
	itt ne
    83fa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    83fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8400:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8404:	d380      	bcc.n	8308 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8406:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    840a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    840e:	e77b      	b.n	8308 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8410:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    8412:	d3d9      	bcc.n	83c8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8414:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    8416:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    841a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    841e:	d2f9      	bcs.n	8414 <memcpy+0x118>

	ldrb	r3, [r1]
    8420:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8422:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8424:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8426:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8428:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    842a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    842c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    842e:	4770      	bx	lr

00008430 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    8430:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    8432:	4b1b      	ldr	r3, [pc, #108]	; (84a0 <eeprom_initialize+0x70>)
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    8434:	4e1b      	ldr	r6, [pc, #108]	; (84a4 <eeprom_initialize+0x74>)


void eeprom_initialize(void)
{
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    8436:	6859      	ldr	r1, [r3, #4]
    8438:	6818      	ldr	r0, [r3, #0]
    843a:	689a      	ldr	r2, [r3, #8]
    843c:	68db      	ldr	r3, [r3, #12]
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    843e:	b085      	sub	sp, #20
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    8440:	466c      	mov	r4, sp
    8442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    8444:	7833      	ldrb	r3, [r6, #0]
    8446:	0799      	lsls	r1, r3, #30
    8448:	d51d      	bpl.n	8486 <eeprom_initialize+0x56>
		uint8_t stat = FTFL_FSTAT & 0x70;
    844a:	4a17      	ldr	r2, [pc, #92]	; (84a8 <eeprom_initialize+0x78>)
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
		FTFL_FCCOB3 = 0;
    844c:	4c17      	ldr	r4, [pc, #92]	; (84ac <eeprom_initialize+0x7c>)
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
		uint8_t stat = FTFL_FSTAT & 0x70;
    844e:	7813      	ldrb	r3, [r2, #0]
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
		FTFL_FCCOB3 = 0;
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    8450:	4917      	ldr	r1, [pc, #92]	; (84b0 <eeprom_initialize+0x80>)
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
		uint8_t stat = FTFL_FSTAT & 0x70;
		if (stat) FTFL_FSTAT = stat;
    8452:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    8456:	bf18      	it	ne
    8458:	7013      	strbne	r3, [r2, #0]
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    845a:	4a16      	ldr	r2, [pc, #88]	; (84b4 <eeprom_initialize+0x84>)
		FTFL_FCCOB3 = 0;
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
		FTFL_FCCOB5 = EEPARTITION;
    845c:	4b16      	ldr	r3, [pc, #88]	; (84b8 <eeprom_initialize+0x88>)
		uint8_t stat = FTFL_FSTAT & 0x70;
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    845e:	2780      	movs	r7, #128	; 0x80
    8460:	7017      	strb	r7, [r2, #0]
		FTFL_FCCOB3 = 0;
    8462:	2600      	movs	r6, #0
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    8464:	2033      	movs	r0, #51	; 0x33
		FTFL_FCCOB5 = EEPARTITION;
    8466:	2203      	movs	r2, #3
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
		FTFL_FCCOB3 = 0;
    8468:	7026      	strb	r6, [r4, #0]
    846a:	466d      	mov	r5, sp
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    846c:	7008      	strb	r0, [r1, #0]
		FTFL_FCCOB5 = EEPARTITION;
    846e:	701a      	strb	r2, [r3, #0]
		__disable_irq();
    8470:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    8472:	3c04      	subs	r4, #4
    8474:	f045 0501 	orr.w	r5, r5, #1
    8478:	4620      	mov	r0, r4
    847a:	47a8      	blx	r5
		__enable_irq();
    847c:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    847e:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    8480:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    8484:	d109      	bne.n	849a <eeprom_initialize+0x6a>
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    8486:	4b0d      	ldr	r3, [pc, #52]	; (84bc <eeprom_initialize+0x8c>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8488:	4906      	ldr	r1, [pc, #24]	; (84a4 <eeprom_initialize+0x74>)
    848a:	e001      	b.n	8490 <eeprom_initialize+0x60>
		if (++count > 200000) break;
    848c:	3b01      	subs	r3, #1
    848e:	d002      	beq.n	8496 <eeprom_initialize+0x66>
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8490:	780a      	ldrb	r2, [r1, #0]
    8492:	07d2      	lsls	r2, r2, #31
    8494:	d5fa      	bpl.n	848c <eeprom_initialize+0x5c>
		if (++count > 200000) break;
	}
}
    8496:	b005      	add	sp, #20
    8498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
		__enable_irq();
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
		if (status & 0x70) {
			FTFL_FSTAT = (status & 0x70);
    849a:	7023      	strb	r3, [r4, #0]
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
		if (++count > 200000) break;
	}
}
    849c:	b005      	add	sp, #20
    849e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84a0:	000108e4 	.word	0x000108e4
    84a4:	40020001 	.word	0x40020001
    84a8:	40020000 	.word	0x40020000
    84ac:	40020004 	.word	0x40020004
    84b0:	4002000b 	.word	0x4002000b
    84b4:	40020007 	.word	0x40020007
    84b8:	4002000a 	.word	0x4002000a
    84bc:	00030d41 	.word	0x00030d41

000084c0 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    84c0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    84c4:	d20a      	bcs.n	84dc <eeprom_read_byte+0x1c>
}

#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
    84c6:	b510      	push	{r4, lr}
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    84c8:	4b09      	ldr	r3, [pc, #36]	; (84f0 <eeprom_read_byte+0x30>)
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	07db      	lsls	r3, r3, #31
    84ce:	4604      	mov	r4, r0
    84d0:	d506      	bpl.n	84e0 <eeprom_read_byte+0x20>
	return FlexRAM[offset];
    84d2:	f104 50a0 	add.w	r0, r4, #335544320	; 0x14000000
    84d6:	7800      	ldrb	r0, [r0, #0]
    84d8:	b2c0      	uxtb	r0, r0
    84da:	bd10      	pop	{r4, pc}
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    84dc:	2000      	movs	r0, #0
    84de:	4770      	bx	lr
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    84e0:	f7ff ffa6 	bl	8430 <eeprom_initialize>
	return FlexRAM[offset];
    84e4:	f104 50a0 	add.w	r0, r4, #335544320	; 0x14000000
    84e8:	7800      	ldrb	r0, [r0, #0]
    84ea:	b2c0      	uxtb	r0, r0
    84ec:	bd10      	pop	{r4, pc}
    84ee:	bf00      	nop
    84f0:	40020001 	.word	0x40020001

000084f4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    84f4:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    84f6:	4c10      	ldr	r4, [pc, #64]	; (8538 <fault_isr+0x44>)
    84f8:	e008      	b.n	850c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    84fa:	6823      	ldr	r3, [r4, #0]
    84fc:	0559      	lsls	r1, r3, #21
    84fe:	d40d      	bmi.n	851c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8500:	6823      	ldr	r3, [r4, #0]
    8502:	051a      	lsls	r2, r3, #20
    8504:	d40f      	bmi.n	8526 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8506:	6823      	ldr	r3, [r4, #0]
    8508:	04db      	lsls	r3, r3, #19
    850a:	d411      	bmi.n	8530 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    850c:	6823      	ldr	r3, [r4, #0]
    850e:	0358      	lsls	r0, r3, #13
    8510:	d5f3      	bpl.n	84fa <fault_isr+0x6>
    8512:	f000 fa7f 	bl	8a14 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8516:	6823      	ldr	r3, [r4, #0]
    8518:	0559      	lsls	r1, r3, #21
    851a:	d5f1      	bpl.n	8500 <fault_isr+0xc>
    851c:	f001 fe92 	bl	a244 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8520:	6823      	ldr	r3, [r4, #0]
    8522:	051a      	lsls	r2, r3, #20
    8524:	d5ef      	bpl.n	8506 <fault_isr+0x12>
    8526:	f001 ff23 	bl	a370 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    852a:	6823      	ldr	r3, [r4, #0]
    852c:	04db      	lsls	r3, r3, #19
    852e:	d5ed      	bpl.n	850c <fault_isr+0x18>
    8530:	f001 ffb4 	bl	a49c <uart2_status_isr>
    8534:	e7ea      	b.n	850c <fault_isr+0x18>
    8536:	bf00      	nop
    8538:	40048034 	.word	0x40048034

0000853c <unused_isr>:
	}
}

void unused_isr(void)
{
    853c:	b508      	push	{r3, lr}
	fault_isr();
    853e:	f7ff ffd9 	bl	84f4 <fault_isr>
    8542:	bf00      	nop

00008544 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    8544:	4b01      	ldr	r3, [pc, #4]	; (854c <startup_early_hook+0x8>)
    8546:	2210      	movs	r2, #16
    8548:	801a      	strh	r2, [r3, #0]
    854a:	4770      	bx	lr
    854c:	40052000 	.word	0x40052000

00008550 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    8550:	4770      	bx	lr
    8552:	bf00      	nop

00008554 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    8554:	4909      	ldr	r1, [pc, #36]	; (857c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    8556:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    8558:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    855a:	b130      	cbz	r0, 856a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    855c:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    855e:	4418      	add	r0, r3
    8560:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    8564:	4290      	cmp	r0, r2
    8566:	d202      	bcs.n	856e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8568:	6008      	str	r0, [r1, #0]
	}
	return prev;
    856a:	4618      	mov	r0, r3
}
    856c:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    856e:	f002 fcbd 	bl	aeec <__errno>
    8572:	230c      	movs	r3, #12
    8574:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    8576:	f04f 30ff 	mov.w	r0, #4294967295
    857a:	bd08      	pop	{r3, pc}
    857c:	1fff8764 	.word	0x1fff8764

00008580 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    8580:	e7fe      	b.n	8580 <__cxa_pure_virtual>
    8582:	bf00      	nop

00008584 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    8584:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    8586:	4b0f      	ldr	r3, [pc, #60]	; (85c4 <digitalWrite.part.1+0x40>)
    8588:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    858c:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    8590:	b12c      	cbz	r4, 859e <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    8592:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    8594:	b169      	cbz	r1, 85b2 <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    8596:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    859a:	bc10      	pop	{r4}
    859c:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    859e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    85a2:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    85a4:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    85a6:	b941      	cbnz	r1, 85ba <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    85a8:	f022 0202 	bic.w	r2, r2, #2
    85ac:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    85ae:	bc10      	pop	{r4}
    85b0:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    85b2:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    85b6:	bc10      	pop	{r4}
    85b8:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    85ba:	f042 0203 	orr.w	r2, r2, #3
    85be:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    85c0:	bc10      	pop	{r4}
    85c2:	4770      	bx	lr
    85c4:	000108f4 	.word	0x000108f4

000085c8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    85c8:	4a1c      	ldr	r2, [pc, #112]	; (863c <pinMode.part.2+0x74>)
    85ca:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    85ce:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    85d0:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    85d2:	d011      	beq.n	85f8 <pinMode.part.2+0x30>
    85d4:	2904      	cmp	r1, #4
    85d6:	d01b      	beq.n	8610 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    85d8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    85dc:	2200      	movs	r2, #0
    85de:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    85e2:	b129      	cbz	r1, 85f0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    85e4:	2902      	cmp	r1, #2
    85e6:	d020      	beq.n	862a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    85e8:	2903      	cmp	r1, #3
    85ea:	d022      	beq.n	8632 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    85ec:	601a      	str	r2, [r3, #0]
    85ee:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    85f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    85f4:	601a      	str	r2, [r3, #0]
    85f6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    85f8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    85fc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8600:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8604:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    8606:	681a      	ldr	r2, [r3, #0]
    8608:	f022 0220 	bic.w	r2, r2, #32
    860c:	601a      	str	r2, [r3, #0]
    860e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8610:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8614:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8618:	2001      	movs	r0, #1
    861a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    861e:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    8620:	681a      	ldr	r2, [r3, #0]
    8622:	f042 0220 	orr.w	r2, r2, #32
    8626:	601a      	str	r2, [r3, #0]
    8628:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    862a:	f240 1203 	movw	r2, #259	; 0x103
    862e:	601a      	str	r2, [r3, #0]
    8630:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    8632:	f44f 7281 	mov.w	r2, #258	; 0x102
    8636:	601a      	str	r2, [r3, #0]
    8638:	4770      	bx	lr
    863a:	bf00      	nop
    863c:	000108f4 	.word	0x000108f4

00008640 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    8640:	b430      	push	{r4, r5}
	RTC_SR = 0;
    8642:	4b05      	ldr	r3, [pc, #20]	; (8658 <rtc_set+0x18>)
	RTC_TPR = 0;
    8644:	4d05      	ldr	r5, [pc, #20]	; (865c <rtc_set+0x1c>)
	RTC_TSR = t;
    8646:	4c06      	ldr	r4, [pc, #24]	; (8660 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8648:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    864a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    864c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    864e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    8650:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    8652:	6019      	str	r1, [r3, #0]
}
    8654:	bc30      	pop	{r4, r5}
    8656:	4770      	bx	lr
    8658:	4003d014 	.word	0x4003d014
    865c:	4003d004 	.word	0x4003d004
    8660:	4003d000 	.word	0x4003d000

00008664 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    8664:	2821      	cmp	r0, #33	; 0x21
    8666:	d801      	bhi.n	866c <digitalWrite+0x8>
    8668:	f7ff bf8c 	b.w	8584 <digitalWrite.part.1>
    866c:	4770      	bx	lr
    866e:	bf00      	nop

00008670 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8670:	2821      	cmp	r0, #33	; 0x21
    8672:	d806      	bhi.n	8682 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    8674:	4b04      	ldr	r3, [pc, #16]	; (8688 <digitalRead+0x18>)
    8676:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    867a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    867e:	b2c0      	uxtb	r0, r0
    8680:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8682:	2000      	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    8684:	4770      	bx	lr
    8686:	bf00      	nop
    8688:	000108f4 	.word	0x000108f4

0000868c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    868c:	2821      	cmp	r0, #33	; 0x21
    868e:	d801      	bhi.n	8694 <pinMode+0x8>
    8690:	f7ff bf9a 	b.w	85c8 <pinMode.part.2>
    8694:	4770      	bx	lr
    8696:	bf00      	nop

00008698 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8698:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    869a:	490d      	ldr	r1, [pc, #52]	; (86d0 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    869c:	4b0d      	ldr	r3, [pc, #52]	; (86d4 <micros+0x3c>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    869e:	4a0e      	ldr	r2, [pc, #56]	; (86d8 <micros+0x40>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    86a0:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    86a2:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    86a4:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    86a6:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    86a8:	0152      	lsls	r2, r2, #5
    86aa:	d502      	bpl.n	86b2 <micros+0x1a>
    86ac:	2b32      	cmp	r3, #50	; 0x32
    86ae:	bf88      	it	hi
    86b0:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    86b2:	490a      	ldr	r1, [pc, #40]	; (86dc <micros+0x44>)
    86b4:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
    86b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    86bc:	f203 133f 	addw	r3, r3, #319	; 0x13f
    86c0:	fba1 1303 	umull	r1, r3, r1, r3
    86c4:	fb02 f000 	mul.w	r0, r2, r0
}
    86c8:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    86cc:	4770      	bx	lr
    86ce:	bf00      	nop
    86d0:	1fff959c 	.word	0x1fff959c
    86d4:	e000e018 	.word	0xe000e018
    86d8:	e000ed04 	.word	0xe000ed04
    86dc:	38e38e39 	.word	0x38e38e39

000086e0 <delay>:

void delay(uint32_t ms)
{
    86e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86e4:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    86e6:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    86e8:	4f21      	ldr	r7, [pc, #132]	; (8770 <delay+0x90>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    86ea:	4b22      	ldr	r3, [pc, #136]	; (8774 <delay+0x94>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    86ec:	4a22      	ldr	r2, [pc, #136]	; (8778 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    86ee:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    86f0:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    86f2:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    86f4:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    86f6:	0152      	lsls	r2, r2, #5
    86f8:	d502      	bpl.n	8700 <delay+0x20>
    86fa:	2b32      	cmp	r3, #50	; 0x32
    86fc:	bf88      	it	hi
    86fe:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    8700:	b3a5      	cbz	r5, 876c <delay+0x8c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8702:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
    8706:	4e1d      	ldr	r6, [pc, #116]	; (877c <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8708:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8774 <delay+0x94>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    870c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8778 <delay+0x98>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8710:	f203 133f 	addw	r3, r3, #319	; 0x13f
    8714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8718:	fba6 1303 	umull	r1, r3, r6, r3
    871c:	fb02 f404 	mul.w	r4, r2, r4
    8720:	eb04 1413 	add.w	r4, r4, r3, lsr #4

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8724:	b672      	cpsid	i
	current = SYST_CVR;
    8726:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    872a:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    872c:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    8730:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8732:	f5c1 338c 	rsb	r3, r1, #71680	; 0x11800
    8736:	f203 133f 	addw	r3, r3, #319	; 0x13f
    873a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    873e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8742:	ebc4 1313 	rsb	r3, r4, r3, lsr #4
    8746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    874a:	d002      	beq.n	8752 <delay+0x72>
    874c:	2932      	cmp	r1, #50	; 0x32
    874e:	bf88      	it	hi
    8750:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8752:	fb00 3302 	mla	r3, r0, r2, r3
    8756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    875a:	d304      	bcc.n	8766 <delay+0x86>
				ms--;
				if (ms == 0) return;
    875c:	3d01      	subs	r5, #1
    875e:	d005      	beq.n	876c <delay+0x8c>
				start += 1000;
    8760:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    8764:	e7de      	b.n	8724 <delay+0x44>
			}
			yield();
    8766:	f001 fc67 	bl	a038 <yield>
		}
    876a:	e7db      	b.n	8724 <delay+0x44>
    876c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8770:	1fff959c 	.word	0x1fff959c
    8774:	e000e018 	.word	0xe000e018
    8778:	e000ed04 	.word	0xe000ed04
    877c:	38e38e39 	.word	0x38e38e39

00008780 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    8780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8782:	4b2d      	ldr	r3, [pc, #180]	; (8838 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8784:	492d      	ldr	r1, [pc, #180]	; (883c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8786:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8858 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    878a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 885c <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    878e:	4e2c      	ldr	r6, [pc, #176]	; (8840 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    8790:	4d2c      	ldr	r5, [pc, #176]	; (8844 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    8792:	4c2d      	ldr	r4, [pc, #180]	; (8848 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    8794:	4a2d      	ldr	r2, [pc, #180]	; (884c <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    8796:	4f2e      	ldr	r7, [pc, #184]	; (8850 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8798:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    879c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    879e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    87a2:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    87a4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    87a8:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    87aa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    87ae:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    87b0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    87b4:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    87b6:	2000      	movs	r0, #0
    87b8:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    87ba:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    87bc:	f648 71ff 	movw	r1, #36863	; 0x8fff
    87c0:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    87c4:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    87c8:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    87ca:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    87cc:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    87ce:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    87d0:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    87d2:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    87d4:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    87d6:	2209      	movs	r2, #9
    87d8:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    87dc:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    87e0:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    87e4:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    87e8:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    87ec:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    87f0:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    87f4:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    87f6:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    87fa:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    87fe:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    8802:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8806:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    8808:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    880c:	4811      	ldr	r0, [pc, #68]	; (8854 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    880e:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    8810:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    8814:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    8818:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    881a:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    881c:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    881e:	f001 fc59 	bl	a0d4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    8822:	2019      	movs	r0, #25
    8824:	f7ff ff5c 	bl	86e0 <delay>
	usb_init();
    8828:	f000 fe5c 	bl	94e4 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    882c:	f240 1013 	movw	r0, #275	; 0x113
}
    8830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8834:	f7ff bf54 	b.w	86e0 <delay>
    8838:	e000e108 	.word	0xe000e108
    883c:	40038004 	.word	0x40038004
    8840:	40038014 	.word	0x40038014
    8844:	40038024 	.word	0x40038024
    8848:	4003802c 	.word	0x4003802c
    884c:	4003801c 	.word	0x4003801c
    8850:	40038034 	.word	0x40038034
    8854:	400b8000 	.word	0x400b8000
    8858:	4003800c 	.word	0x4003800c
    885c:	40038008 	.word	0x40038008

00008860 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    8860:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8862:	2b03      	cmp	r3, #3
    8864:	d814      	bhi.n	8890 <usb_rx+0x30>
	__disable_irq();
    8866:	b672      	cpsid	i
	ret = rx_first[endpoint];
    8868:	490a      	ldr	r1, [pc, #40]	; (8894 <usb_rx+0x34>)
    886a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    886e:	b168      	cbz	r0, 888c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    8870:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8872:	4c09      	ldr	r4, [pc, #36]	; (8898 <usb_rx+0x38>)
    8874:	8805      	ldrh	r5, [r0, #0]
    8876:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    887a:	6846      	ldr	r6, [r0, #4]
    887c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8880:	1b52      	subs	r2, r2, r5
    8882:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    8886:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8888:	bc70      	pop	{r4, r5, r6}
    888a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    888c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    888e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8890:	2000      	movs	r0, #0
    8892:	4770      	bx	lr
    8894:	1fff95f8 	.word	0x1fff95f8
    8898:	1fff987c 	.word	0x1fff987c

0000889c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    889c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    889e:	2803      	cmp	r0, #3
    88a0:	d80b      	bhi.n	88ba <usb_tx_packet_count+0x1e>
	__disable_irq();
    88a2:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    88a4:	4b07      	ldr	r3, [pc, #28]	; (88c4 <usb_tx_packet_count+0x28>)
    88a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    88aa:	b143      	cbz	r3, 88be <usb_tx_packet_count+0x22>
    88ac:	2000      	movs	r0, #0
    88ae:	685b      	ldr	r3, [r3, #4]
    88b0:	3001      	adds	r0, #1
    88b2:	2b00      	cmp	r3, #0
    88b4:	d1fb      	bne.n	88ae <usb_tx_packet_count+0x12>
	__enable_irq();
    88b6:	b662      	cpsie	i
	return count;
    88b8:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    88ba:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    88bc:	4770      	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    88be:	4618      	mov	r0, r3
    88c0:	e7f9      	b.n	88b6 <usb_tx_packet_count+0x1a>
    88c2:	bf00      	nop
    88c4:	1fff964c 	.word	0x1fff964c

000088c8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    88c8:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    88ca:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    88cc:	4a2b      	ldr	r2, [pc, #172]	; (897c <usb_rx_memory+0xb4>)
    88ce:	7813      	ldrb	r3, [r2, #0]
    88d0:	071d      	lsls	r5, r3, #28
    88d2:	d506      	bpl.n	88e2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    88d4:	4b2a      	ldr	r3, [pc, #168]	; (8980 <usb_rx_memory+0xb8>)
    88d6:	6a19      	ldr	r1, [r3, #32]
    88d8:	2900      	cmp	r1, #0
    88da:	d036      	beq.n	894a <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    88dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    88de:	2900      	cmp	r1, #0
    88e0:	d041      	beq.n	8966 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    88e2:	7853      	ldrb	r3, [r2, #1]
    88e4:	071c      	lsls	r4, r3, #28
    88e6:	d506      	bpl.n	88f6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    88e8:	4b25      	ldr	r3, [pc, #148]	; (8980 <usb_rx_memory+0xb8>)
    88ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    88ec:	2900      	cmp	r1, #0
    88ee:	d03e      	beq.n	896e <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    88f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    88f2:	2900      	cmp	r1, #0
    88f4:	d039      	beq.n	896a <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    88f6:	7893      	ldrb	r3, [r2, #2]
    88f8:	0719      	lsls	r1, r3, #28
    88fa:	d505      	bpl.n	8908 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    88fc:	4b20      	ldr	r3, [pc, #128]	; (8980 <usb_rx_memory+0xb8>)
    88fe:	6e19      	ldr	r1, [r3, #96]	; 0x60
    8900:	2900      	cmp	r1, #0
    8902:	d036      	beq.n	8972 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8904:	6e99      	ldr	r1, [r3, #104]	; 0x68
    8906:	b189      	cbz	r1, 892c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8908:	78d3      	ldrb	r3, [r2, #3]
    890a:	071b      	lsls	r3, r3, #28
    890c:	d507      	bpl.n	891e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    890e:	4b1c      	ldr	r3, [pc, #112]	; (8980 <usb_rx_memory+0xb8>)
    8910:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    8914:	b37a      	cbz	r2, 8976 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8916:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    891a:	2111      	movs	r1, #17
    891c:	b13a      	cbz	r2, 892e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    891e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    8920:	4b18      	ldr	r3, [pc, #96]	; (8984 <usb_rx_memory+0xbc>)
    8922:	2200      	movs	r2, #0
    8924:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    8926:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    8928:	f000 be68 	b.w	95fc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    892c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    892e:	4c15      	ldr	r4, [pc, #84]	; (8984 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8930:	4d15      	ldr	r5, [pc, #84]	; (8988 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    8932:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8934:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8938:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    893c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    893e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8940:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8942:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    8944:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    8946:	bc30      	pop	{r4, r5}
    8948:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    894a:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    894c:	4c0d      	ldr	r4, [pc, #52]	; (8984 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    894e:	4d0f      	ldr	r5, [pc, #60]	; (898c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    8950:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8952:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    895a:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    895c:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    895e:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8960:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    8962:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    8964:	e7ef      	b.n	8946 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8966:	2105      	movs	r1, #5
    8968:	e7e1      	b.n	892e <usb_rx_memory+0x66>
    896a:	2109      	movs	r1, #9
    896c:	e7df      	b.n	892e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    896e:	2208      	movs	r2, #8
    8970:	e7ec      	b.n	894c <usb_rx_memory+0x84>
    8972:	220c      	movs	r2, #12
    8974:	e7ea      	b.n	894c <usb_rx_memory+0x84>
    8976:	2210      	movs	r2, #16
    8978:	e7e8      	b.n	894c <usb_rx_memory+0x84>
    897a:	bf00      	nop
    897c:	00010a30 	.word	0x00010a30
    8980:	1fff8000 	.word	0x1fff8000
    8984:	1fff9675 	.word	0x1fff9675
    8988:	004000c8 	.word	0x004000c8
    898c:	00400088 	.word	0x00400088

00008990 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    8990:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    8992:	2b03      	cmp	r3, #3
    8994:	d81d      	bhi.n	89d2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8996:	4a1b      	ldr	r2, [pc, #108]	; (8a04 <usb_tx+0x74>)
    8998:	0140      	lsls	r0, r0, #5
    899a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    899e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    89a0:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    89a2:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    89a4:	4c18      	ldr	r4, [pc, #96]	; (8a08 <usb_tx+0x78>)
    89a6:	5ce2      	ldrb	r2, [r4, r3]
    89a8:	2a03      	cmp	r2, #3
    89aa:	d81b      	bhi.n	89e4 <usb_tx+0x54>
    89ac:	e8df f002 	tbb	[pc, r2]
    89b0:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    89b4:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    89b6:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    89b8:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    89ba:	f010 0f08 	tst.w	r0, #8
    89be:	bf14      	ite	ne
    89c0:	23c8      	movne	r3, #200	; 0xc8
    89c2:	2388      	moveq	r3, #136	; 0x88
    89c4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    89c8:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    89ca:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    89cc:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    89ce:	b662      	cpsie	i
}
    89d0:	bc30      	pop	{r4, r5}
    89d2:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    89d4:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    89d6:	2202      	movs	r2, #2
		break;
    89d8:	e7ed      	b.n	89b6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    89da:	2205      	movs	r2, #5
    89dc:	e7eb      	b.n	89b6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    89de:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    89e0:	2204      	movs	r2, #4
		break;
    89e2:	e7e8      	b.n	89b6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    89e4:	4a09      	ldr	r2, [pc, #36]	; (8a0c <usb_tx+0x7c>)
    89e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    89ea:	b138      	cbz	r0, 89fc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    89ec:	4a08      	ldr	r2, [pc, #32]	; (8a10 <usb_tx+0x80>)
    89ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    89f2:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    89f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    89f8:	b662      	cpsie	i
		return;
    89fa:	e7e9      	b.n	89d0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    89fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    8a00:	4a03      	ldr	r2, [pc, #12]	; (8a10 <usb_tx+0x80>)
    8a02:	e7f7      	b.n	89f4 <usb_tx+0x64>
    8a04:	1fff8000 	.word	0x1fff8000
    8a08:	1fff9684 	.word	0x1fff9684
    8a0c:	1fff964c 	.word	0x1fff964c
    8a10:	1fff965c 	.word	0x1fff965c

00008a14 <usb_isr>:
}



void usb_isr(void)
{
    8a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8a18:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8d28 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    8a1c:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8d2c <usb_isr+0x318>
}



void usb_isr(void)
{
    8a20:	b087      	sub	sp, #28
    8a22:	e044      	b.n	8aae <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    8a24:	4fab      	ldr	r7, [pc, #684]	; (8cd4 <usb_isr+0x2c0>)
    8a26:	ea4f 0893 	mov.w	r8, r3, lsr #2
    8a2a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8a2e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8a30:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8a34:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8a38:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8a3a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8a3e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    8a42:	2b00      	cmp	r3, #0
    8a44:	f040 8102 	bne.w	8c4c <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    8a48:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    8a4c:	0c1b      	lsrs	r3, r3, #16
    8a4e:	b299      	uxth	r1, r3
    8a50:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    8a54:	2b00      	cmp	r3, #0
    8a56:	f000 80f0 	beq.w	8c3a <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    8a5a:	4b9f      	ldr	r3, [pc, #636]	; (8cd8 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    8a5c:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    8a60:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    8a64:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    8a68:	2a00      	cmp	r2, #0
    8a6a:	f000 82c5 	beq.w	8ff8 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    8a6e:	4d9b      	ldr	r5, [pc, #620]	; (8cdc <usb_isr+0x2c8>)
    8a70:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    8a74:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    8a76:	4c9a      	ldr	r4, [pc, #616]	; (8ce0 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    8a78:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    8a7c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    8a80:	4419      	add	r1, r3
    8a82:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    8a86:	f000 fd99 	bl	95bc <usb_malloc>
					if (packet) {
    8a8a:	2800      	cmp	r0, #0
    8a8c:	f000 82ad 	beq.w	8fea <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    8a90:	4a94      	ldr	r2, [pc, #592]	; (8ce4 <usb_isr+0x2d0>)
    8a92:	4b95      	ldr	r3, [pc, #596]	; (8ce8 <usb_isr+0x2d4>)
    8a94:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8a98:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    8a9c:	bf18      	it	ne
    8a9e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8aa0:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    8aa4:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    8aa8:	2308      	movs	r3, #8
    8aaa:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8aae:	f89b 4000 	ldrb.w	r4, [fp]
    8ab2:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    8ab4:	0761      	lsls	r1, r4, #29
    8ab6:	d51a      	bpl.n	8aee <usb_isr+0xda>
		if (usb_configuration) {
    8ab8:	4b8c      	ldr	r3, [pc, #560]	; (8cec <usb_isr+0x2d8>)
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	b1a3      	cbz	r3, 8ae8 <usb_isr+0xd4>
			t = usb_reboot_timer;
    8abe:	498c      	ldr	r1, [pc, #560]	; (8cf0 <usb_isr+0x2dc>)
    8ac0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    8ac2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8ac6:	b122      	cbz	r2, 8ad2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    8ac8:	3b01      	subs	r3, #1
    8aca:	b2db      	uxtb	r3, r3
    8acc:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    8ace:	b903      	cbnz	r3, 8ad2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    8ad0:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    8ad2:	4988      	ldr	r1, [pc, #544]	; (8cf4 <usb_isr+0x2e0>)
    8ad4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    8ad6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8ada:	b12a      	cbz	r2, 8ae8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    8adc:	3b01      	subs	r3, #1
    8ade:	b2db      	uxtb	r3, r3
    8ae0:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	f000 8257 	beq.w	8f96 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    8ae8:	2304      	movs	r3, #4
    8aea:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    8aee:	f004 0308 	and.w	r3, r4, #8
    8af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8af6:	2b00      	cmp	r3, #0
    8af8:	f000 80cc 	beq.w	8c94 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    8afc:	f89a 3000 	ldrb.w	r3, [sl]
    8b00:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    8b02:	091e      	lsrs	r6, r3, #4
    8b04:	d18e      	bne.n	8a24 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8b06:	089c      	lsrs	r4, r3, #2
    8b08:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8cd4 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8b0c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8b10:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8b14:	f3c2 0283 	ubfx	r2, r2, #2, #4
    8b18:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    8b1a:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8b1c:	2a0c      	cmp	r2, #12
    8b1e:	f200 8088 	bhi.w	8c32 <usb_isr+0x21e>
    8b22:	e8df f002 	tbb	[pc, r2]
    8b26:	7c7c      	.short	0x7c7c
    8b28:	86868686 	.word	0x86868686
    8b2c:	86478686 	.word	0x86478686
    8b30:	8686      	.short	0x8686
    8b32:	07          	.byte	0x07
    8b33:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8b34:	6808      	ldr	r0, [r1, #0]
    8b36:	4d70      	ldr	r5, [pc, #448]	; (8cf8 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    8b38:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8b3a:	4f70      	ldr	r7, [pc, #448]	; (8cfc <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8b3c:	4e70      	ldr	r6, [pc, #448]	; (8d00 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8b3e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8b40:	b281      	uxth	r1, r0
    8b42:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8b46:	4b67      	ldr	r3, [pc, #412]	; (8ce4 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    8b48:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8b4a:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8b4e:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8b50:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8b52:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8b56:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8b58:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    8b5c:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8b60:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8b64:	4c5b      	ldr	r4, [pc, #364]	; (8cd4 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8b66:	f200 80e3 	bhi.w	8d30 <usb_isr+0x31c>
    8b6a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    8b6e:	f080 8346 	bcs.w	91fe <usb_isr+0x7ea>
    8b72:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    8b76:	f000 82fc 	beq.w	9172 <usb_isr+0x75e>
    8b7a:	f200 828d 	bhi.w	9098 <usb_isr+0x684>
    8b7e:	2980      	cmp	r1, #128	; 0x80
    8b80:	f000 8377 	beq.w	9272 <usb_isr+0x85e>
    8b84:	2982      	cmp	r1, #130	; 0x82
    8b86:	f040 82fa 	bne.w	917e <usb_isr+0x76a>
    8b8a:	88a9      	ldrh	r1, [r5, #4]
    8b8c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    8b90:	2904      	cmp	r1, #4
    8b92:	f200 82f4 	bhi.w	917e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8b96:	485b      	ldr	r0, [pc, #364]	; (8d04 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8b98:	4c5b      	ldr	r4, [pc, #364]	; (8d08 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8b9a:	0089      	lsls	r1, r1, #2
    8b9c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8b9e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    8ba0:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8ba2:	7802      	ldrb	r2, [r0, #0]
    8ba4:	0793      	lsls	r3, r2, #30
    8ba6:	f140 8458 	bpl.w	945a <usb_isr+0xa46>
    8baa:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    8bae:	f04f 0e02 	mov.w	lr, #2
    8bb2:	e342      	b.n	923a <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    8bb4:	4f51      	ldr	r7, [pc, #324]	; (8cfc <usb_isr+0x2e8>)
    8bb6:	683a      	ldr	r2, [r7, #0]
		if (data) {
    8bb8:	b332      	cbz	r2, 8c08 <usb_isr+0x1f4>
			size = ep0_tx_len;
    8bba:	4b54      	ldr	r3, [pc, #336]	; (8d0c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8bbc:	4e50      	ldr	r6, [pc, #320]	; (8d00 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8bbe:	4954      	ldr	r1, [pc, #336]	; (8d10 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    8bc0:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8bc2:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8bc4:	780d      	ldrb	r5, [r1, #0]
    8bc6:	2840      	cmp	r0, #64	; 0x40
    8bc8:	4686      	mov	lr, r0
    8bca:	f045 0802 	orr.w	r8, r5, #2
    8bce:	bf28      	it	cs
    8bd0:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8bd4:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    8bd6:	f084 0401 	eor.w	r4, r4, #1
    8bda:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8bdc:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8be0:	bf0c      	ite	eq
    8be2:	2488      	moveq	r4, #136	; 0x88
    8be4:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8be6:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8bea:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8bec:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8bf4:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8bf6:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8bf8:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    8bfc:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8bfe:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    8c00:	2800      	cmp	r0, #0
    8c02:	f000 8145 	beq.w	8e90 <usb_isr+0x47c>
    8c06:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    8c08:	4b3b      	ldr	r3, [pc, #236]	; (8cf8 <usb_isr+0x2e4>)
    8c0a:	881a      	ldrh	r2, [r3, #0]
    8c0c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    8c10:	d10f      	bne.n	8c32 <usb_isr+0x21e>
			setup.bRequest = 0;
    8c12:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8c14:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    8c16:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8c18:	4b3e      	ldr	r3, [pc, #248]	; (8d14 <usb_isr+0x300>)
    8c1a:	701a      	strb	r2, [r3, #0]
    8c1c:	e009      	b.n	8c32 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    8c1e:	4a36      	ldr	r2, [pc, #216]	; (8cf8 <usb_isr+0x2e4>)
    8c20:	8810      	ldrh	r0, [r2, #0]
    8c22:	f242 0221 	movw	r2, #8225	; 0x2021
    8c26:	4290      	cmp	r0, r2
    8c28:	f000 8137 	beq.w	8e9a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8c2c:	4a2d      	ldr	r2, [pc, #180]	; (8ce4 <usb_isr+0x2d0>)
    8c2e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    8c32:	4a39      	ldr	r2, [pc, #228]	; (8d18 <usb_isr+0x304>)
    8c34:	2301      	movs	r3, #1
    8c36:	7013      	strb	r3, [r2, #0]
    8c38:	e736      	b.n	8aa8 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8c3a:	4a2a      	ldr	r2, [pc, #168]	; (8ce4 <usb_isr+0x2d0>)
    8c3c:	4b2a      	ldr	r3, [pc, #168]	; (8ce8 <usb_isr+0x2d4>)
    8c3e:	f019 0f08 	tst.w	r9, #8
    8c42:	bf18      	it	ne
    8c44:	4613      	movne	r3, r2
    8c46:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    8c4a:	e72d      	b.n	8aa8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    8c4c:	f000 fcd6 	bl	95fc <usb_free>
				packet = tx_first[endpoint];
    8c50:	4a32      	ldr	r2, [pc, #200]	; (8d1c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    8c52:	4933      	ldr	r1, [pc, #204]	; (8d20 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    8c54:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    8c58:	2b00      	cmp	r3, #0
    8c5a:	f000 81d1 	beq.w	9000 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    8c5e:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    8c60:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    8c62:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    8c66:	f103 0208 	add.w	r2, r3, #8
    8c6a:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    8c6e:	2c03      	cmp	r4, #3
    8c70:	d805      	bhi.n	8c7e <usb_isr+0x26a>
    8c72:	e8df f004 	tbb	[pc, r4]
    8c76:	022c      	.short	0x022c
    8c78:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    8c7a:	2202      	movs	r2, #2
    8c7c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    8c7e:	881a      	ldrh	r2, [r3, #0]
    8c80:	f019 0f08 	tst.w	r9, #8
    8c84:	bf0c      	ite	eq
    8c86:	2388      	moveq	r3, #136	; 0x88
    8c88:	23c8      	movne	r3, #200	; 0xc8
    8c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8c8e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    8c92:	e709      	b.n	8aa8 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    8c94:	07e0      	lsls	r0, r4, #31
    8c96:	f100 8181 	bmi.w	8f9c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    8c9a:	0621      	lsls	r1, r4, #24
    8c9c:	f100 81f2 	bmi.w	9084 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    8ca0:	07a2      	lsls	r2, r4, #30
    8ca2:	d506      	bpl.n	8cb2 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    8ca4:	4a1f      	ldr	r2, [pc, #124]	; (8d24 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8ca6:	4920      	ldr	r1, [pc, #128]	; (8d28 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    8ca8:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8caa:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    8cac:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    8cae:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8cb0:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    8cb2:	06e3      	lsls	r3, r4, #27
    8cb4:	d502      	bpl.n	8cbc <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    8cb6:	4b1c      	ldr	r3, [pc, #112]	; (8d28 <usb_isr+0x314>)
    8cb8:	2210      	movs	r2, #16
    8cba:	701a      	strb	r2, [r3, #0]
	}

}
    8cbc:	b007      	add	sp, #28
    8cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    8cc2:	2204      	movs	r2, #4
    8cc4:	558a      	strb	r2, [r1, r6]
						break;
    8cc6:	e7da      	b.n	8c7e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    8cc8:	2205      	movs	r2, #5
    8cca:	558a      	strb	r2, [r1, r6]
						break;
    8ccc:	e7d7      	b.n	8c7e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    8cce:	2203      	movs	r2, #3
    8cd0:	558a      	strb	r2, [r1, r6]
						break;
    8cd2:	e7d4      	b.n	8c7e <usb_isr+0x26a>
    8cd4:	1fff8000 	.word	0x1fff8000
    8cd8:	1fff95f8 	.word	0x1fff95f8
    8cdc:	1fff95a4 	.word	0x1fff95a4
    8ce0:	1fff987c 	.word	0x1fff987c
    8ce4:	004000c8 	.word	0x004000c8
    8ce8:	00400088 	.word	0x00400088
    8cec:	1fff9680 	.word	0x1fff9680
    8cf0:	1fff9609 	.word	0x1fff9609
    8cf4:	1fff9688 	.word	0x1fff9688
    8cf8:	1fff966c 	.word	0x1fff966c
    8cfc:	1fff95a0 	.word	0x1fff95a0
    8d00:	1fff9608 	.word	0x1fff9608
    8d04:	400720c0 	.word	0x400720c0
    8d08:	1fff9678 	.word	0x1fff9678
    8d0c:	1fff95b4 	.word	0x1fff95b4
    8d10:	1fff9674 	.word	0x1fff9674
    8d14:	40072098 	.word	0x40072098
    8d18:	40072094 	.word	0x40072094
    8d1c:	1fff964c 	.word	0x1fff964c
    8d20:	1fff9684 	.word	0x1fff9684
    8d24:	40072088 	.word	0x40072088
    8d28:	40072080 	.word	0x40072080
    8d2c:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8d30:	f242 0021 	movw	r0, #8225	; 0x2021
    8d34:	4281      	cmp	r1, r0
    8d36:	f000 812a 	beq.w	8f8e <usb_isr+0x57a>
    8d3a:	f200 80d8 	bhi.w	8eee <usb_isr+0x4da>
    8d3e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    8d42:	f000 8276 	beq.w	9232 <usb_isr+0x81e>
    8d46:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    8d4a:	f040 8218 	bne.w	917e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    8d4e:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    8d50:	49b3      	ldr	r1, [pc, #716]	; (9020 <usb_isr+0x60c>)
    8d52:	78a8      	ldrb	r0, [r5, #2]
    8d54:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    8d56:	0612      	lsls	r2, r2, #24
    8d58:	f100 833a 	bmi.w	93d0 <usb_isr+0x9bc>
    8d5c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    8d60:	49b0      	ldr	r1, [pc, #704]	; (9024 <usb_isr+0x610>)
    8d62:	0613      	lsls	r3, r2, #24
    8d64:	f100 830c 	bmi.w	9380 <usb_isr+0x96c>
    8d68:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    8d6c:	49ad      	ldr	r1, [pc, #692]	; (9024 <usb_isr+0x610>)
    8d6e:	0615      	lsls	r5, r2, #24
    8d70:	f100 8301 	bmi.w	9376 <usb_isr+0x962>
    8d74:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    8d78:	49aa      	ldr	r1, [pc, #680]	; (9024 <usb_isr+0x610>)
    8d7a:	0614      	lsls	r4, r2, #24
    8d7c:	f100 82f6 	bmi.w	936c <usb_isr+0x958>
    8d80:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    8d84:	49a7      	ldr	r1, [pc, #668]	; (9024 <usb_isr+0x610>)
    8d86:	0610      	lsls	r0, r2, #24
    8d88:	f100 834a 	bmi.w	9420 <usb_isr+0xa0c>
    8d8c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    8d90:	49a4      	ldr	r1, [pc, #656]	; (9024 <usb_isr+0x610>)
    8d92:	0612      	lsls	r2, r2, #24
    8d94:	f100 833f 	bmi.w	9416 <usb_isr+0xa02>
    8d98:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    8d9c:	49a1      	ldr	r1, [pc, #644]	; (9024 <usb_isr+0x610>)
    8d9e:	0613      	lsls	r3, r2, #24
    8da0:	f100 8334 	bmi.w	940c <usb_isr+0x9f8>
    8da4:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    8da8:	499e      	ldr	r1, [pc, #632]	; (9024 <usb_isr+0x610>)
    8daa:	0615      	lsls	r5, r2, #24
    8dac:	f100 8329 	bmi.w	9402 <usb_isr+0x9ee>
    8db0:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    8db4:	499b      	ldr	r1, [pc, #620]	; (9024 <usb_isr+0x610>)
    8db6:	0614      	lsls	r4, r2, #24
    8db8:	f100 831e 	bmi.w	93f8 <usb_isr+0x9e4>
    8dbc:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    8dc0:	4998      	ldr	r1, [pc, #608]	; (9024 <usb_isr+0x610>)
    8dc2:	0610      	lsls	r0, r2, #24
    8dc4:	f100 8313 	bmi.w	93ee <usb_isr+0x9da>
    8dc8:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    8dcc:	4995      	ldr	r1, [pc, #596]	; (9024 <usb_isr+0x610>)
    8dce:	0612      	lsls	r2, r2, #24
    8dd0:	f100 8308 	bmi.w	93e4 <usb_isr+0x9d0>
    8dd4:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    8dd8:	4992      	ldr	r1, [pc, #584]	; (9024 <usb_isr+0x610>)
    8dda:	0613      	lsls	r3, r2, #24
    8ddc:	f100 82fd 	bmi.w	93da <usb_isr+0x9c6>
    8de0:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    8de4:	498f      	ldr	r1, [pc, #572]	; (9024 <usb_isr+0x610>)
    8de6:	0615      	lsls	r5, r2, #24
    8de8:	f100 8331 	bmi.w	944e <usb_isr+0xa3a>
    8dec:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    8df0:	498c      	ldr	r1, [pc, #560]	; (9024 <usb_isr+0x610>)
    8df2:	0614      	lsls	r4, r2, #24
    8df4:	f100 8325 	bmi.w	9442 <usb_isr+0xa2e>
    8df8:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    8dfc:	4989      	ldr	r1, [pc, #548]	; (9024 <usb_isr+0x610>)
    8dfe:	0610      	lsls	r0, r2, #24
    8e00:	f100 8319 	bmi.w	9436 <usb_isr+0xa22>
    8e04:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    8e08:	4986      	ldr	r1, [pc, #536]	; (9024 <usb_isr+0x610>)
    8e0a:	0612      	lsls	r2, r2, #24
    8e0c:	f100 830d 	bmi.w	942a <usb_isr+0xa16>
    8e10:	4885      	ldr	r0, [pc, #532]	; (9028 <usb_isr+0x614>)
    8e12:	4a86      	ldr	r2, [pc, #536]	; (902c <usb_isr+0x618>)
    8e14:	4986      	ldr	r1, [pc, #536]	; (9030 <usb_isr+0x61c>)
    8e16:	9001      	str	r0, [sp, #4]
    8e18:	4886      	ldr	r0, [pc, #536]	; (9034 <usb_isr+0x620>)
    8e1a:	4d87      	ldr	r5, [pc, #540]	; (9038 <usb_isr+0x624>)
    8e1c:	4c87      	ldr	r4, [pc, #540]	; (903c <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    8e1e:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    8e20:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    8e22:	9605      	str	r6, [sp, #20]
    8e24:	9502      	str	r5, [sp, #8]
    8e26:	4680      	mov	r8, r0
    8e28:	460f      	mov	r7, r1
    8e2a:	4616      	mov	r6, r2
    8e2c:	461d      	mov	r5, r3
    8e2e:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    8e30:	6830      	ldr	r0, [r6, #0]
			while (p) {
    8e32:	b128      	cbz	r0, 8e40 <usb_isr+0x42c>
				n = p->next;
    8e34:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    8e36:	f000 fbe1 	bl	95fc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    8e3a:	4620      	mov	r0, r4
    8e3c:	2c00      	cmp	r4, #0
    8e3e:	d1f9      	bne.n	8e34 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    8e40:	2300      	movs	r3, #0
    8e42:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    8e44:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    8e46:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    8e48:	461a      	mov	r2, r3
    8e4a:	2300      	movs	r3, #0
    8e4c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    8e50:	b128      	cbz	r0, 8e5e <usb_isr+0x44a>
				n = p->next;
    8e52:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    8e54:	f000 fbd2 	bl	95fc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    8e58:	4620      	mov	r0, r4
    8e5a:	2c00      	cmp	r4, #0
    8e5c:	d1f9      	bne.n	8e52 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    8e5e:	2200      	movs	r2, #0
    8e60:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    8e62:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    8e64:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    8e68:	4611      	mov	r1, r2
    8e6a:	2200      	movs	r2, #0
    8e6c:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    8e70:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    8e72:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    8e74:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    8e76:	f04f 0100 	mov.w	r1, #0
    8e7a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    8e7e:	2b03      	cmp	r3, #3
    8e80:	f200 812b 	bhi.w	90da <usb_isr+0x6c6>
    8e84:	e8df f013 	tbh	[pc, r3, lsl #1]
    8e88:	01250170 	.word	0x01250170
    8e8c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    8e90:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    8e94:	bf18      	it	ne
    8e96:	2200      	movne	r2, #0
    8e98:	e6b5      	b.n	8c06 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    8e9a:	4a69      	ldr	r2, [pc, #420]	; (9040 <usb_isr+0x62c>)
    8e9c:	780d      	ldrb	r5, [r1, #0]
    8e9e:	7848      	ldrb	r0, [r1, #1]
    8ea0:	7015      	strb	r5, [r2, #0]
    8ea2:	7050      	strb	r0, [r2, #1]
    8ea4:	788d      	ldrb	r5, [r1, #2]
    8ea6:	78c8      	ldrb	r0, [r1, #3]
    8ea8:	7095      	strb	r5, [r2, #2]
    8eaa:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    8eac:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    8eae:	790d      	ldrb	r5, [r1, #4]
    8eb0:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    8eb2:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    8eb4:	794d      	ldrb	r5, [r1, #5]
    8eb6:	7989      	ldrb	r1, [r1, #6]
    8eb8:	7155      	strb	r5, [r2, #5]
    8eba:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    8ebc:	f000 819b 	beq.w	91f6 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ec0:	4960      	ldr	r1, [pc, #384]	; (9044 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ec2:	4e61      	ldr	r6, [pc, #388]	; (9048 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ec4:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ec6:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8ec8:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ecc:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ece:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8ed2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ed4:	bf0c      	ite	eq
    8ed6:	2188      	moveq	r1, #136	; 0x88
    8ed8:	21c8      	movne	r1, #200	; 0xc8
    8eda:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ede:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    8ee2:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ee6:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    8ee8:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8eea:	6051      	str	r1, [r2, #4]
    8eec:	e69e      	b.n	8c2c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8eee:	f242 2021 	movw	r0, #8737	; 0x2221
    8ef2:	4281      	cmp	r1, r0
    8ef4:	f040 81cb 	bne.w	928e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8ef8:	4b54      	ldr	r3, [pc, #336]	; (904c <usb_isr+0x638>)
    8efa:	4c55      	ldr	r4, [pc, #340]	; (9050 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    8efc:	4955      	ldr	r1, [pc, #340]	; (9054 <usb_isr+0x640>)
    8efe:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8f00:	681d      	ldr	r5, [r3, #0]
    8f02:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    8f04:	f8cd e004 	str.w	lr, [sp, #4]
    8f08:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    8f0a:	2000      	movs	r0, #0
    8f0c:	9002      	str	r0, [sp, #8]
    8f0e:	4680      	mov	r8, r0
    8f10:	4684      	mov	ip, r0
    8f12:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f14:	494b      	ldr	r1, [pc, #300]	; (9044 <usb_isr+0x630>)
    8f16:	780d      	ldrb	r5, [r1, #0]
    8f18:	f045 0e02 	orr.w	lr, r5, #2
    8f1c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    8f20:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f22:	9b01      	ldr	r3, [sp, #4]
    8f24:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f26:	9b03      	ldr	r3, [sp, #12]
    8f28:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f2a:	bf0c      	ite	eq
    8f2c:	2488      	moveq	r4, #136	; 0x88
    8f2e:	24c8      	movne	r4, #200	; 0xc8
    8f30:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8f34:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f38:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    8f3c:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    8f3e:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f40:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 9024 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    8f44:	4b40      	ldr	r3, [pc, #256]	; (9048 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    8f46:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9044 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    8f4a:	2800      	cmp	r0, #0
    8f4c:	f040 811e 	bne.w	918c <usb_isr+0x778>
    8f50:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    8f54:	d11b      	bne.n	8f8e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f56:	f044 0c02 	orr.w	ip, r4, #2
    8f5a:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    8f5e:	9c02      	ldr	r4, [sp, #8]
    8f60:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 9024 <usb_isr+0x610>
    8f64:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f66:	2a00      	cmp	r2, #0
    8f68:	f040 8126 	bne.w	91b8 <usb_isr+0x7a4>
    8f6c:	0402      	lsls	r2, r0, #16
    8f6e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    8f72:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f76:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    8f7a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    8f7c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    8f7e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    8f80:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    8f82:	2840      	cmp	r0, #64	; 0x40
    8f84:	d103      	bne.n	8f8e <usb_isr+0x57a>
    8f86:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    8f88:	4a33      	ldr	r2, [pc, #204]	; (9058 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    8f8a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    8f8c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    8f8e:	4a33      	ldr	r2, [pc, #204]	; (905c <usb_isr+0x648>)
    8f90:	2301      	movs	r3, #1
    8f92:	7013      	strb	r3, [r2, #0]
    8f94:	e64d      	b.n	8c32 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    8f96:	f000 fc9d 	bl	98d4 <usb_serial_flush_callback>
    8f9a:	e5a5      	b.n	8ae8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    8f9c:	4b21      	ldr	r3, [pc, #132]	; (9024 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    8f9e:	482f      	ldr	r0, [pc, #188]	; (905c <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    8fa0:	4928      	ldr	r1, [pc, #160]	; (9044 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    8fa2:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    8fa4:	f04f 0e02 	mov.w	lr, #2
    8fa8:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8fac:	4f2c      	ldr	r7, [pc, #176]	; (9060 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    8fae:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    8fb0:	492c      	ldr	r1, [pc, #176]	; (9064 <usb_isr+0x650>)
    8fb2:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    8fb4:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    8fb6:	4e2c      	ldr	r6, [pc, #176]	; (9068 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    8fb8:	4d2c      	ldr	r5, [pc, #176]	; (906c <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    8fba:	4c2d      	ldr	r4, [pc, #180]	; (9070 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    8fbc:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8fbe:	210d      	movs	r1, #13
    8fc0:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    8fc2:	21ff      	movs	r1, #255	; 0xff
    8fc4:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    8fc6:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 9080 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    8fca:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    8fcc:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    8fce:	4d29      	ldr	r5, [pc, #164]	; (9074 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    8fd0:	4a29      	ldr	r2, [pc, #164]	; (9078 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    8fd2:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    8fd6:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    8fd8:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    8fda:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    8fde:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    8fe0:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    8fe2:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    8fe4:	b007      	add	sp, #28
    8fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    8fea:	4a24      	ldr	r2, [pc, #144]	; (907c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    8fec:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    8ff0:	7813      	ldrb	r3, [r2, #0]
    8ff2:	3301      	adds	r3, #1
    8ff4:	7013      	strb	r3, [r2, #0]
    8ff6:	e557      	b.n	8aa8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    8ff8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    8ffc:	4d0e      	ldr	r5, [pc, #56]	; (9038 <usb_isr+0x624>)
    8ffe:	e53a      	b.n	8a76 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    9000:	5d8b      	ldrb	r3, [r1, r6]
    9002:	2b03      	cmp	r3, #3
    9004:	f200 80f0 	bhi.w	91e8 <usb_isr+0x7d4>
    9008:	a201      	add	r2, pc, #4	; (adr r2, 9010 <usb_isr+0x5fc>)
    900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    900e:	bf00      	nop
    9010:	00008aa9 	.word	0x00008aa9
    9014:	00008aa9 	.word	0x00008aa9
    9018:	000090cd 	.word	0x000090cd
    901c:	000090c7 	.word	0x000090c7
    9020:	1fff9680 	.word	0x1fff9680
    9024:	1fff8000 	.word	0x1fff8000
    9028:	1fff965c 	.word	0x1fff965c
    902c:	1fff95f8 	.word	0x1fff95f8
    9030:	1fff964c 	.word	0x1fff964c
    9034:	1fff9684 	.word	0x1fff9684
    9038:	1fff95a4 	.word	0x1fff95a4
    903c:	1fff987c 	.word	0x1fff987c
    9040:	1fff9884 	.word	0x1fff9884
    9044:	1fff9674 	.word	0x1fff9674
    9048:	1fff9608 	.word	0x1fff9608
    904c:	1fff959c 	.word	0x1fff959c
    9050:	1fff988c 	.word	0x1fff988c
    9054:	1fff9698 	.word	0x1fff9698
    9058:	1fff95b4 	.word	0x1fff95b4
    905c:	40072094 	.word	0x40072094
    9060:	400720c0 	.word	0x400720c0
    9064:	00400088 	.word	0x00400088
    9068:	40072088 	.word	0x40072088
    906c:	40072080 	.word	0x40072080
    9070:	40072098 	.word	0x40072098
    9074:	1fff95b8 	.word	0x1fff95b8
    9078:	1fff960c 	.word	0x1fff960c
    907c:	1fff9675 	.word	0x1fff9675
    9080:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9084:	49c1      	ldr	r1, [pc, #772]	; (938c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9086:	4bc2      	ldr	r3, [pc, #776]	; (9390 <usb_isr+0x97c>)
    9088:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    908a:	200d      	movs	r0, #13
    908c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    908e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9090:	07a2      	lsls	r2, r4, #30
    9092:	f57f ae0e 	bpl.w	8cb2 <usb_isr+0x29e>
    9096:	e605      	b.n	8ca4 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9098:	f240 3202 	movw	r2, #770	; 0x302
    909c:	4291      	cmp	r1, r2
    909e:	f040 80ee 	bne.w	927e <usb_isr+0x86a>
    90a2:	88a9      	ldrh	r1, [r5, #4]
    90a4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    90a8:	2904      	cmp	r1, #4
    90aa:	d868      	bhi.n	917e <usb_isr+0x76a>
    90ac:	886a      	ldrh	r2, [r5, #2]
    90ae:	2a00      	cmp	r2, #0
    90b0:	d165      	bne.n	917e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    90b2:	48b6      	ldr	r0, [pc, #728]	; (938c <usb_isr+0x978>)
    90b4:	f8cd e004 	str.w	lr, [sp, #4]
    90b8:	0089      	lsls	r1, r1, #2
    90ba:	4408      	add	r0, r1
    90bc:	7801      	ldrb	r1, [r0, #0]
    90be:	f041 0102 	orr.w	r1, r1, #2
    90c2:	7001      	strb	r1, [r0, #0]
    90c4:	e721      	b.n	8f0a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    90c6:	2301      	movs	r3, #1
    90c8:	558b      	strb	r3, [r1, r6]
						break;
    90ca:	e4ed      	b.n	8aa8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    90cc:	2300      	movs	r3, #0
    90ce:	558b      	strb	r3, [r1, r6]
						break;
    90d0:	e4ea      	b.n	8aa8 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    90d2:	f04f 0301 	mov.w	r3, #1
    90d6:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    90da:	3501      	adds	r5, #1
    90dc:	2d04      	cmp	r5, #4
    90de:	f106 0604 	add.w	r6, r6, #4
    90e2:	f107 0704 	add.w	r7, r7, #4
    90e6:	f108 0801 	add.w	r8, r8, #1
    90ea:	f47f aea1 	bne.w	8e30 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    90ee:	4ca9      	ldr	r4, [pc, #676]	; (9394 <usb_isr+0x980>)
			*reg = epconf;
    90f0:	4ba9      	ldr	r3, [pc, #676]	; (9398 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    90f2:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    90f4:	4da9      	ldr	r5, [pc, #676]	; (939c <usb_isr+0x988>)
    90f6:	9f04      	ldr	r7, [sp, #16]
    90f8:	9e05      	ldr	r6, [sp, #20]
    90fa:	2100      	movs	r1, #0
    90fc:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    90fe:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9100:	0713      	lsls	r3, r2, #28
    9102:	f100 8105 	bmi.w	9310 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9106:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    9108:	49a5      	ldr	r1, [pc, #660]	; (93a0 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    910a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 93ac <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    910e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9110:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9112:	f04f 0100 	mov.w	r1, #0
    9116:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    911a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    911e:	f100 80e0 	bmi.w	92e2 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9122:	49a0      	ldr	r1, [pc, #640]	; (93a4 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9124:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    9126:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9128:	2100      	movs	r1, #0
    912a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    912e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9132:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9134:	f8df 8274 	ldr.w	r8, [pc, #628]	; 93ac <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9138:	f100 8101 	bmi.w	933e <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    913c:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    913e:	499a      	ldr	r1, [pc, #616]	; (93a8 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9140:	4c9a      	ldr	r4, [pc, #616]	; (93ac <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9142:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9144:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9146:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9148:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    914c:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9150:	f100 80b0 	bmi.w	92b4 <usb_isr+0x8a0>
    9154:	7833      	ldrb	r3, [r6, #0]
    9156:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9158:	2100      	movs	r1, #0
    915a:	f083 0201 	eor.w	r2, r3, #1
    915e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9162:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    9166:	e6d0      	b.n	8f0a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9168:	f04f 0300 	mov.w	r3, #0
    916c:	f888 3000 	strb.w	r3, [r8]
    9170:	e7b3      	b.n	90da <usb_isr+0x6c6>
    9172:	88a9      	ldrh	r1, [r5, #4]
    9174:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9178:	2904      	cmp	r1, #4
    917a:	f240 808d 	bls.w	9298 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    917e:	4a83      	ldr	r2, [pc, #524]	; (938c <usb_isr+0x978>)
    9180:	230f      	movs	r3, #15
    9182:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9184:	4a8a      	ldr	r2, [pc, #552]	; (93b0 <usb_isr+0x99c>)
    9186:	2301      	movs	r3, #1
    9188:	7013      	strb	r3, [r2, #0]
    918a:	e552      	b.n	8c32 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    918c:	2840      	cmp	r0, #64	; 0x40
    918e:	f67f aee2 	bls.w	8f56 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9192:	f044 0402 	orr.w	r4, r4, #2
    9196:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    919a:	9e02      	ldr	r6, [sp, #8]
    919c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    919e:	b1ba      	cbz	r2, 91d0 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    91a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91a4:	4a83      	ldr	r2, [pc, #524]	; (93b4 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    91a6:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    91a8:	4633      	mov	r3, r6
    91aa:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    91ac:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    91b0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91b2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    91b6:	e6e7      	b.n	8f88 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    91b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    91bc:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91be:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    91c0:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    91c2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91c4:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    91c8:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91ca:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    91ce:	e6d8      	b.n	8f82 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    91d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    91d4:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    91d6:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91d8:	4a77      	ldr	r2, [pc, #476]	; (93b8 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    91da:	f888 5000 	strb.w	r5, [r8]
    91de:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    91e0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    91e2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    91e6:	e6cf      	b.n	8f88 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    91e8:	f019 0f08 	tst.w	r9, #8
    91ec:	bf0c      	ite	eq
    91ee:	2302      	moveq	r3, #2
    91f0:	2303      	movne	r3, #3
    91f2:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    91f4:	e458      	b.n	8aa8 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    91f6:	4a71      	ldr	r2, [pc, #452]	; (93bc <usb_isr+0x9a8>)
    91f8:	210f      	movs	r1, #15
    91fa:	7011      	strb	r1, [r2, #0]
    91fc:	e660      	b.n	8ec0 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    91fe:	4a70      	ldr	r2, [pc, #448]	; (93c0 <usb_isr+0x9ac>)
    9200:	6854      	ldr	r4, [r2, #4]
    9202:	2c00      	cmp	r4, #0
    9204:	d0bb      	beq.n	917e <usb_isr+0x76a>
    9206:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9208:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    920c:	e003      	b.n	9216 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    920e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    9210:	6854      	ldr	r4, [r2, #4]
    9212:	2c00      	cmp	r4, #0
    9214:	d0b3      	beq.n	917e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9216:	8813      	ldrh	r3, [r2, #0]
    9218:	4283      	cmp	r3, r0
    921a:	d1f8      	bne.n	920e <usb_isr+0x7fa>
    921c:	8853      	ldrh	r3, [r2, #2]
    921e:	4573      	cmp	r3, lr
    9220:	d1f5      	bne.n	920e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9222:	0a00      	lsrs	r0, r0, #8
    9224:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9226:	bf0c      	ite	eq
    9228:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    922c:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    9230:	e003      	b.n	923a <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9232:	4a64      	ldr	r2, [pc, #400]	; (93c4 <usb_isr+0x9b0>)
    9234:	4c64      	ldr	r4, [pc, #400]	; (93c8 <usb_isr+0x9b4>)
    9236:	7812      	ldrb	r2, [r2, #0]
    9238:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    923a:	88e8      	ldrh	r0, [r5, #6]
    923c:	4570      	cmp	r0, lr
    923e:	f080 813f 	bcs.w	94c0 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9242:	4962      	ldr	r1, [pc, #392]	; (93cc <usb_isr+0x9b8>)
    9244:	780d      	ldrb	r5, [r1, #0]
    9246:	2840      	cmp	r0, #64	; 0x40
    9248:	4684      	mov	ip, r0
    924a:	f045 0e02 	orr.w	lr, r5, #2
    924e:	bf28      	it	cs
    9250:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    9254:	eb04 030c 	add.w	r3, r4, ip
    9258:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    925c:	9302      	str	r3, [sp, #8]
    925e:	2301      	movs	r3, #1
    9260:	6054      	str	r4, [r2, #4]
    9262:	ebcc 0000 	rsb	r0, ip, r0
    9266:	ea4f 480c 	mov.w	r8, ip, lsl #16
    926a:	2200      	movs	r2, #0
    926c:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    926e:	24c8      	movs	r4, #200	; 0xc8
    9270:	e65e      	b.n	8f30 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9272:	4c55      	ldr	r4, [pc, #340]	; (93c8 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    9274:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9278:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    927a:	7062      	strb	r2, [r4, #1]
    927c:	e7dd      	b.n	923a <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    927e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    9282:	f47f af7c 	bne.w	917e <usb_isr+0x76a>
    9286:	2301      	movs	r3, #1
    9288:	2200      	movs	r2, #0
    928a:	9301      	str	r3, [sp, #4]
    928c:	e63d      	b.n	8f0a <usb_isr+0x4f6>
    928e:	f242 3221 	movw	r2, #8993	; 0x2321
    9292:	4291      	cmp	r1, r2
    9294:	d0f7      	beq.n	9286 <usb_isr+0x872>
    9296:	e772      	b.n	917e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9298:	886a      	ldrh	r2, [r5, #2]
    929a:	2a00      	cmp	r2, #0
    929c:	f47f af6f 	bne.w	917e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    92a0:	483a      	ldr	r0, [pc, #232]	; (938c <usb_isr+0x978>)
    92a2:	f8cd e004 	str.w	lr, [sp, #4]
    92a6:	0089      	lsls	r1, r1, #2
    92a8:	4408      	add	r0, r1
    92aa:	7801      	ldrb	r1, [r0, #0]
    92ac:	f021 0102 	bic.w	r1, r1, #2
    92b0:	7001      	strb	r1, [r0, #0]
    92b2:	e62a      	b.n	8f0a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    92b4:	f000 f982 	bl	95bc <usb_malloc>
				if (p) {
    92b8:	2800      	cmp	r0, #0
    92ba:	f000 80ef 	beq.w	949c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    92be:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    92c0:	4a3d      	ldr	r2, [pc, #244]	; (93b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    92c2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    92c6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    92ca:	f000 f977 	bl	95bc <usb_malloc>
				if (p) {
    92ce:	2800      	cmp	r0, #0
    92d0:	f000 80de 	beq.w	9490 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    92d4:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    92d6:	4a37      	ldr	r2, [pc, #220]	; (93b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    92d8:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    92dc:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    92e0:	e738      	b.n	9154 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    92e2:	f000 f96b 	bl	95bc <usb_malloc>
				if (p) {
    92e6:	2800      	cmp	r0, #0
    92e8:	f000 80c0 	beq.w	946c <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    92ec:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    92ee:	4a32      	ldr	r2, [pc, #200]	; (93b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    92f0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    92f4:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    92f8:	f000 f960 	bl	95bc <usb_malloc>
				if (p) {
    92fc:	2800      	cmp	r0, #0
    92fe:	f000 80af 	beq.w	9460 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    9302:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9304:	4a2b      	ldr	r2, [pc, #172]	; (93b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9306:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    930a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    930e:	e708      	b.n	9122 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9310:	f000 f954 	bl	95bc <usb_malloc>
				if (p) {
    9314:	2800      	cmp	r0, #0
    9316:	f000 80cd 	beq.w	94b4 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    931a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    931c:	4a26      	ldr	r2, [pc, #152]	; (93b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    931e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9322:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9326:	f000 f949 	bl	95bc <usb_malloc>
				if (p) {
    932a:	2800      	cmp	r0, #0
    932c:	f000 80bc 	beq.w	94a8 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    9330:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9332:	4a20      	ldr	r2, [pc, #128]	; (93b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9334:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9338:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    933c:	e6e3      	b.n	9106 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    933e:	f000 f93d 	bl	95bc <usb_malloc>
				if (p) {
    9342:	2800      	cmp	r0, #0
    9344:	f000 809e 	beq.w	9484 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    9348:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    934a:	4a1b      	ldr	r2, [pc, #108]	; (93b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    934c:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9350:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9354:	f000 f932 	bl	95bc <usb_malloc>
				if (p) {
    9358:	2800      	cmp	r0, #0
    935a:	f000 808d 	beq.w	9478 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    935e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9360:	4a14      	ldr	r2, [pc, #80]	; (93b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9362:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9366:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    936a:	e6e7      	b.n	913c <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    936c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    936e:	3808      	subs	r0, #8
    9370:	f000 f944 	bl	95fc <usb_free>
    9374:	e504      	b.n	8d80 <usb_isr+0x36c>
    9376:	6b48      	ldr	r0, [r1, #52]	; 0x34
    9378:	3808      	subs	r0, #8
    937a:	f000 f93f 	bl	95fc <usb_free>
    937e:	e4f9      	b.n	8d74 <usb_isr+0x360>
    9380:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    9382:	3808      	subs	r0, #8
    9384:	f000 f93a 	bl	95fc <usb_free>
    9388:	e4ee      	b.n	8d68 <usb_isr+0x354>
    938a:	bf00      	nop
    938c:	400720c0 	.word	0x400720c0
    9390:	40072080 	.word	0x40072080
    9394:	00010a30 	.word	0x00010a30
    9398:	400720c4 	.word	0x400720c4
    939c:	1fff9675 	.word	0x1fff9675
    93a0:	400720c8 	.word	0x400720c8
    93a4:	400720cc 	.word	0x400720cc
    93a8:	400720d0 	.word	0x400720d0
    93ac:	1fff8000 	.word	0x1fff8000
    93b0:	40072094 	.word	0x40072094
    93b4:	004000c8 	.word	0x004000c8
    93b8:	00400088 	.word	0x00400088
    93bc:	1fff9609 	.word	0x1fff9609
    93c0:	00010a34 	.word	0x00010a34
    93c4:	1fff9680 	.word	0x1fff9680
    93c8:	1fff9678 	.word	0x1fff9678
    93cc:	1fff9674 	.word	0x1fff9674
    93d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    93d2:	3808      	subs	r0, #8
    93d4:	f000 f912 	bl	95fc <usb_free>
    93d8:	e4c0      	b.n	8d5c <usb_isr+0x348>
    93da:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    93dc:	3808      	subs	r0, #8
    93de:	f000 f90d 	bl	95fc <usb_free>
    93e2:	e4fd      	b.n	8de0 <usb_isr+0x3cc>
    93e4:	6f48      	ldr	r0, [r1, #116]	; 0x74
    93e6:	3808      	subs	r0, #8
    93e8:	f000 f908 	bl	95fc <usb_free>
    93ec:	e4f2      	b.n	8dd4 <usb_isr+0x3c0>
    93ee:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    93f0:	3808      	subs	r0, #8
    93f2:	f000 f903 	bl	95fc <usb_free>
    93f6:	e4e7      	b.n	8dc8 <usb_isr+0x3b4>
    93f8:	6e48      	ldr	r0, [r1, #100]	; 0x64
    93fa:	3808      	subs	r0, #8
    93fc:	f000 f8fe 	bl	95fc <usb_free>
    9400:	e4dc      	b.n	8dbc <usb_isr+0x3a8>
    9402:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    9404:	3808      	subs	r0, #8
    9406:	f000 f8f9 	bl	95fc <usb_free>
    940a:	e4d1      	b.n	8db0 <usb_isr+0x39c>
    940c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    940e:	3808      	subs	r0, #8
    9410:	f000 f8f4 	bl	95fc <usb_free>
    9414:	e4c6      	b.n	8da4 <usb_isr+0x390>
    9416:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    9418:	3808      	subs	r0, #8
    941a:	f000 f8ef 	bl	95fc <usb_free>
    941e:	e4bb      	b.n	8d98 <usb_isr+0x384>
    9420:	6c48      	ldr	r0, [r1, #68]	; 0x44
    9422:	3808      	subs	r0, #8
    9424:	f000 f8ea 	bl	95fc <usb_free>
    9428:	e4b0      	b.n	8d8c <usb_isr+0x378>
    942a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    942e:	3808      	subs	r0, #8
    9430:	f000 f8e4 	bl	95fc <usb_free>
    9434:	e4ec      	b.n	8e10 <usb_isr+0x3fc>
    9436:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    943a:	3808      	subs	r0, #8
    943c:	f000 f8de 	bl	95fc <usb_free>
    9440:	e4e0      	b.n	8e04 <usb_isr+0x3f0>
    9442:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    9446:	3808      	subs	r0, #8
    9448:	f000 f8d8 	bl	95fc <usb_free>
    944c:	e4d4      	b.n	8df8 <usb_isr+0x3e4>
    944e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    9452:	3808      	subs	r0, #8
    9454:	f000 f8d2 	bl	95fc <usb_free>
    9458:	e4c8      	b.n	8dec <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    945a:	f04f 0e02 	mov.w	lr, #2
    945e:	e6ec      	b.n	923a <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9460:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9462:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    9466:	3201      	adds	r2, #1
    9468:	702a      	strb	r2, [r5, #0]
    946a:	e65a      	b.n	9122 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    946c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    946e:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    9472:	3201      	adds	r2, #1
    9474:	702a      	strb	r2, [r5, #0]
    9476:	e73f      	b.n	92f8 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9478:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    947a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    947e:	3201      	adds	r2, #1
    9480:	702a      	strb	r2, [r5, #0]
    9482:	e65b      	b.n	913c <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9484:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9486:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    948a:	3201      	adds	r2, #1
    948c:	702a      	strb	r2, [r5, #0]
    948e:	e761      	b.n	9354 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9490:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9492:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    9496:	3201      	adds	r2, #1
    9498:	702a      	strb	r2, [r5, #0]
    949a:	e65b      	b.n	9154 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    949c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    949e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    94a2:	3201      	adds	r2, #1
    94a4:	702a      	strb	r2, [r5, #0]
    94a6:	e710      	b.n	92ca <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    94a8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    94aa:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    94ae:	3201      	adds	r2, #1
    94b0:	702a      	strb	r2, [r5, #0]
    94b2:	e628      	b.n	9106 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    94b4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    94b6:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    94ba:	3201      	adds	r2, #1
    94bc:	702a      	strb	r2, [r5, #0]
    94be:	e732      	b.n	9326 <usb_isr+0x912>
    94c0:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    94c4:	46f4      	mov	ip, lr
    94c6:	bf28      	it	cs
    94c8:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    94cc:	eb04 030c 	add.w	r3, r4, ip
    94d0:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    94d2:	2301      	movs	r3, #1
    94d4:	ebcc 000e 	rsb	r0, ip, lr
    94d8:	ea4f 480c 	mov.w	r8, ip, lsl #16
    94dc:	2200      	movs	r2, #0
    94de:	9301      	str	r3, [sp, #4]
    94e0:	e518      	b.n	8f14 <usb_isr+0x500>
    94e2:	bf00      	nop

000094e4 <usb_init>:
}



void usb_init(void)
{
    94e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    94e6:	f001 f845 	bl	a574 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    94ea:	4b29      	ldr	r3, [pc, #164]	; (9590 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    94ec:	4829      	ldr	r0, [pc, #164]	; (9594 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    94ee:	4c2a      	ldr	r4, [pc, #168]	; (9598 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    94f0:	4f2a      	ldr	r7, [pc, #168]	; (959c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    94f2:	4d2b      	ldr	r5, [pc, #172]	; (95a0 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    94f4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 95b4 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    94f8:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 95b8 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    94fc:	4e29      	ldr	r6, [pc, #164]	; (95a4 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    94fe:	2200      	movs	r2, #0
    9500:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    9502:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9504:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    9506:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9508:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    950a:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    950c:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    950e:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9510:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    9512:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9514:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    9516:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9518:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    951a:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    951c:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    951e:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9520:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    9522:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9524:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    9526:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9528:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    952a:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    952c:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    952e:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9530:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    9532:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9534:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    9536:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9538:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    953a:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    953c:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    953e:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9544:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    9546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    954a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    954e:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9550:	f3c3 2107 	ubfx	r1, r3, #8, #8
    9554:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9556:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    955a:	4913      	ldr	r1, [pc, #76]	; (95a8 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    955c:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    955e:	0e1b      	lsrs	r3, r3, #24
    9560:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9562:	23ff      	movs	r3, #255	; 0xff
    9564:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9568:	4d10      	ldr	r5, [pc, #64]	; (95ac <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    956a:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    956e:	4810      	ldr	r0, [pc, #64]	; (95b0 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    9570:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9572:	2301      	movs	r3, #1
    9574:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    9576:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    957a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    957c:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9580:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9582:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9586:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9588:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    958a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9590:	1fff8000 	.word	0x1fff8000
    9594:	40048034 	.word	0x40048034
    9598:	4007209c 	.word	0x4007209c
    959c:	400720b0 	.word	0x400720b0
    95a0:	400720b4 	.word	0x400720b4
    95a4:	40072094 	.word	0x40072094
    95a8:	40072010 	.word	0x40072010
    95ac:	e000e449 	.word	0xe000e449
    95b0:	e000e108 	.word	0xe000e108
    95b4:	40072080 	.word	0x40072080
    95b8:	40072088 	.word	0x40072088

000095bc <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    95bc:	b672      	cpsid	i
	avail = usb_buffer_available;
    95be:	480d      	ldr	r0, [pc, #52]	; (95f4 <usb_malloc+0x38>)
    95c0:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    95c2:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    95c6:	2b0b      	cmp	r3, #11
    95c8:	dc10      	bgt.n	95ec <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    95ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    95ce:	40d9      	lsrs	r1, r3
    95d0:	ea22 0201 	bic.w	r2, r2, r1
    95d4:	6002      	str	r2, [r0, #0]
	__enable_irq();
    95d6:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    95d8:	4807      	ldr	r0, [pc, #28]	; (95f8 <usb_malloc+0x3c>)
    95da:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    95de:	00db      	lsls	r3, r3, #3
    95e0:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    95e2:	2100      	movs	r1, #0
    95e4:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    95e6:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    95e8:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    95ea:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    95ec:	b662      	cpsie	i
		return NULL;
    95ee:	2000      	movs	r0, #0
    95f0:	4770      	bx	lr
    95f2:	bf00      	nop
    95f4:	1fff8768 	.word	0x1fff8768
    95f8:	1fff83bc 	.word	0x1fff83bc

000095fc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    95fc:	4b0d      	ldr	r3, [pc, #52]	; (9634 <usb_free+0x38>)
    95fe:	4a0e      	ldr	r2, [pc, #56]	; (9638 <usb_free+0x3c>)
    9600:	1ac3      	subs	r3, r0, r3
    9602:	fba2 2303 	umull	r2, r3, r2, r3
    9606:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9608:	2b0b      	cmp	r3, #11
    960a:	d80c      	bhi.n	9626 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    960c:	4a0b      	ldr	r2, [pc, #44]	; (963c <usb_free+0x40>)
    960e:	7812      	ldrb	r2, [r2, #0]
    9610:	b952      	cbnz	r2, 9628 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9612:	b672      	cpsid	i
	usb_buffer_available |= mask;
    9614:	480a      	ldr	r0, [pc, #40]	; (9640 <usb_free+0x44>)
    9616:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    961a:	6802      	ldr	r2, [r0, #0]
    961c:	fa21 f303 	lsr.w	r3, r1, r3
    9620:	431a      	orrs	r2, r3
    9622:	6002      	str	r2, [r0, #0]
	__enable_irq();
    9624:	b662      	cpsie	i
    9626:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9628:	4a06      	ldr	r2, [pc, #24]	; (9644 <usb_free+0x48>)
    962a:	7812      	ldrb	r2, [r2, #0]
    962c:	2a00      	cmp	r2, #0
    962e:	d0f0      	beq.n	9612 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9630:	f7ff b94a 	b.w	88c8 <usb_rx_memory>
    9634:	1fff83bc 	.word	0x1fff83bc
    9638:	38e38e39 	.word	0x38e38e39
    963c:	1fff9675 	.word	0x1fff9675
    9640:	1fff8768 	.word	0x1fff8768
    9644:	1fff9680 	.word	0x1fff9680

00009648 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    9648:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    964a:	4d0f      	ldr	r5, [pc, #60]	; (9688 <usb_serial_getchar+0x40>)
    964c:	6828      	ldr	r0, [r5, #0]
    964e:	b178      	cbz	r0, 9670 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    9650:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    9652:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    9654:	18c1      	adds	r1, r0, r3
    9656:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    9658:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    965a:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    965c:	d202      	bcs.n	9664 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    965e:	8043      	strh	r3, [r0, #2]
	}
	return c;
    9660:	4620      	mov	r0, r4
}
    9662:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    9664:	f7ff ffca 	bl	95fc <usb_free>
		rx_packet = NULL;
    9668:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    966a:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    966c:	602b      	str	r3, [r5, #0]
    966e:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9670:	4b06      	ldr	r3, [pc, #24]	; (968c <usb_serial_getchar+0x44>)
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	b12b      	cbz	r3, 9682 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9676:	2003      	movs	r0, #3
    9678:	f7ff f8f2 	bl	8860 <usb_rx>
    967c:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    967e:	2800      	cmp	r0, #0
    9680:	d1e6      	bne.n	9650 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9682:	f04f 30ff 	mov.w	r0, #4294967295
    9686:	bd38      	pop	{r3, r4, r5, pc}
    9688:	1fff9694 	.word	0x1fff9694
    968c:	1fff9680 	.word	0x1fff9680

00009690 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9690:	b510      	push	{r4, lr}
	if (!rx_packet) {
    9692:	4c09      	ldr	r4, [pc, #36]	; (96b8 <usb_serial_peekchar+0x28>)
    9694:	6820      	ldr	r0, [r4, #0]
    9696:	b118      	cbz	r0, 96a0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    9698:	8843      	ldrh	r3, [r0, #2]
    969a:	4418      	add	r0, r3
    969c:	7a00      	ldrb	r0, [r0, #8]
}
    969e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    96a0:	4b06      	ldr	r3, [pc, #24]	; (96bc <usb_serial_peekchar+0x2c>)
    96a2:	781b      	ldrb	r3, [r3, #0]
    96a4:	b12b      	cbz	r3, 96b2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    96a6:	2003      	movs	r0, #3
    96a8:	f7ff f8da 	bl	8860 <usb_rx>
    96ac:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    96ae:	2800      	cmp	r0, #0
    96b0:	d1f2      	bne.n	9698 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    96b2:	f04f 30ff 	mov.w	r0, #4294967295
    96b6:	bd10      	pop	{r4, pc}
    96b8:	1fff9694 	.word	0x1fff9694
    96bc:	1fff9680 	.word	0x1fff9680

000096c0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    96c0:	4b04      	ldr	r3, [pc, #16]	; (96d4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    96c2:	4a05      	ldr	r2, [pc, #20]	; (96d8 <usb_serial_available+0x18>)
    96c4:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    96c6:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    96c8:	b11b      	cbz	r3, 96d2 <usb_serial_available+0x12>
    96ca:	881a      	ldrh	r2, [r3, #0]
    96cc:	885b      	ldrh	r3, [r3, #2]
    96ce:	1ad3      	subs	r3, r2, r3
    96d0:	4418      	add	r0, r3
	return count;
}
    96d2:	4770      	bx	lr
    96d4:	1fff9694 	.word	0x1fff9694
    96d8:	1fff987c 	.word	0x1fff987c

000096dc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    96dc:	4b0b      	ldr	r3, [pc, #44]	; (970c <usb_serial_flush_input+0x30>)
    96de:	781b      	ldrb	r3, [r3, #0]
    96e0:	b19b      	cbz	r3, 970a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    96e2:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    96e4:	4c0a      	ldr	r4, [pc, #40]	; (9710 <usb_serial_flush_input+0x34>)
    96e6:	6820      	ldr	r0, [r4, #0]
    96e8:	b148      	cbz	r0, 96fe <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    96ea:	f7ff ff87 	bl	95fc <usb_free>
		rx_packet = NULL;
    96ee:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    96f0:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    96f2:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    96f4:	f7ff f8b4 	bl	8860 <usb_rx>
		if (!rx) break;
    96f8:	b130      	cbz	r0, 9708 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    96fa:	f7ff ff7f 	bl	95fc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    96fe:	2003      	movs	r0, #3
    9700:	f7ff f8ae 	bl	8860 <usb_rx>
		if (!rx) break;
    9704:	2800      	cmp	r0, #0
    9706:	d1f8      	bne.n	96fa <usb_serial_flush_input+0x1e>
    9708:	bd10      	pop	{r4, pc}
    970a:	4770      	bx	lr
    970c:	1fff9680 	.word	0x1fff9680
    9710:	1fff9694 	.word	0x1fff9694

00009714 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9718:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9814 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    971c:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    971e:	2201      	movs	r2, #1
    9720:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    9724:	9101      	str	r1, [sp, #4]
    9726:	b369      	cbz	r1, 9784 <usb_serial_write+0x70>
    9728:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 9818 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    972c:	4f36      	ldr	r7, [pc, #216]	; (9808 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    972e:	9e01      	ldr	r6, [sp, #4]
    9730:	4683      	mov	fp, r0
		if (!tx_packet) {
    9732:	f8d8 0000 	ldr.w	r0, [r8]
    9736:	b3b0      	cbz	r0, 97a6 <usb_serial_write+0x92>
    9738:	4d34      	ldr	r5, [pc, #208]	; (980c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    973a:	8844      	ldrh	r4, [r0, #2]
    973c:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    9740:	42b1      	cmp	r1, r6
    9742:	bf28      	it	cs
    9744:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9746:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    974a:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    974c:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9750:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    9752:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9754:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9758:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    975c:	b151      	cbz	r1, 9774 <usb_serial_write+0x60>
    975e:	3c01      	subs	r4, #1
    9760:	4422      	add	r2, r4
    9762:	4459      	add	r1, fp
    9764:	f81b 4b01 	ldrb.w	r4, [fp], #1
    9768:	f802 4f01 	strb.w	r4, [r2, #1]!
    976c:	458b      	cmp	fp, r1
    976e:	d1f9      	bne.n	9764 <usb_serial_write+0x50>
    9770:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    9774:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    9778:	d80b      	bhi.n	9792 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    977a:	4a25      	ldr	r2, [pc, #148]	; (9810 <usb_serial_write+0xfc>)
    977c:	2105      	movs	r1, #5
    977e:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    9780:	2e00      	cmp	r6, #0
    9782:	d1d6      	bne.n	9732 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    9784:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    9786:	2300      	movs	r3, #0
    9788:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    978c:	b003      	add	sp, #12
    978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    9792:	2240      	movs	r2, #64	; 0x40
    9794:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9796:	4601      	mov	r1, r0
    9798:	2004      	movs	r0, #4
    979a:	f7ff f8f9 	bl	8990 <usb_tx>
			tx_packet = NULL;
    979e:	2200      	movs	r2, #0
    97a0:	f8c8 2000 	str.w	r2, [r8]
    97a4:	e7e9      	b.n	977a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    97a6:	783a      	ldrb	r2, [r7, #0]
    97a8:	b32a      	cbz	r2, 97f6 <usb_serial_write+0xe2>
    97aa:	4d18      	ldr	r5, [pc, #96]	; (980c <usb_serial_write+0xf8>)
    97ac:	f648 4401 	movw	r4, #35841	; 0x8c01
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    97b0:	f04f 0a01 	mov.w	sl, #1
    97b4:	e007      	b.n	97c6 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    97b6:	3c01      	subs	r4, #1
    97b8:	d016      	beq.n	97e8 <usb_serial_write+0xd4>
    97ba:	782a      	ldrb	r2, [r5, #0]
    97bc:	b9a2      	cbnz	r2, 97e8 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    97be:	f000 fc3b 	bl	a038 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    97c2:	783a      	ldrb	r2, [r7, #0]
    97c4:	b1ba      	cbz	r2, 97f6 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    97c6:	2004      	movs	r0, #4
    97c8:	f7ff f868 	bl	889c <usb_tx_packet_count>
    97cc:	2807      	cmp	r0, #7
    97ce:	d8f2      	bhi.n	97b6 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    97d0:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    97d4:	f7ff fef2 	bl	95bc <usb_malloc>
    97d8:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    97dc:	2800      	cmp	r0, #0
    97de:	d1ac      	bne.n	973a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    97e0:	4b0c      	ldr	r3, [pc, #48]	; (9814 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    97e2:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    97e4:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    97e6:	d1e8      	bne.n	97ba <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    97e8:	2301      	movs	r3, #1
					return -1;
    97ea:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    97ee:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    97f0:	b003      	add	sp, #12
    97f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    97f6:	2300      	movs	r3, #0
					return -1;
    97f8:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    97fc:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9800:	b003      	add	sp, #12
    9802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9806:	bf00      	nop
    9808:	1fff9680 	.word	0x1fff9680
    980c:	1fff9690 	.word	0x1fff9690
    9810:	1fff9688 	.word	0x1fff9688
    9814:	1fff9689 	.word	0x1fff9689
    9818:	1fff968c 	.word	0x1fff968c

0000981c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    981c:	b500      	push	{lr}
    981e:	b083      	sub	sp, #12
    9820:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    9822:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9824:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    9828:	4618      	mov	r0, r3
    982a:	f7ff ff73 	bl	9714 <usb_serial_write>
}
    982e:	b003      	add	sp, #12
    9830:	f85d fb04 	ldr.w	pc, [sp], #4

00009834 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    9834:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    9836:	4d0e      	ldr	r5, [pc, #56]	; (9870 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    9838:	4c0e      	ldr	r4, [pc, #56]	; (9874 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    983a:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    983c:	2301      	movs	r3, #1
    983e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    9840:	b128      	cbz	r0, 984e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9842:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    9844:	2300      	movs	r3, #0
    9846:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9848:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    984c:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    984e:	4b0a      	ldr	r3, [pc, #40]	; (9878 <usb_serial_write_buffer_free+0x44>)
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	b913      	cbnz	r3, 985a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    9854:	2000      	movs	r0, #0
    9856:	7020      	strb	r0, [r4, #0]
			return 0;
    9858:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    985a:	2004      	movs	r0, #4
    985c:	f7ff f81e 	bl	889c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    9860:	2807      	cmp	r0, #7
    9862:	d8f7      	bhi.n	9854 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    9864:	f7ff feaa 	bl	95bc <usb_malloc>
    9868:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    986a:	2800      	cmp	r0, #0
    986c:	d1e9      	bne.n	9842 <usb_serial_write_buffer_free+0xe>
    986e:	e7f1      	b.n	9854 <usb_serial_write_buffer_free+0x20>
    9870:	1fff968c 	.word	0x1fff968c
    9874:	1fff9689 	.word	0x1fff9689
    9878:	1fff9680 	.word	0x1fff9680

0000987c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    987e:	4b11      	ldr	r3, [pc, #68]	; (98c4 <usb_serial_flush_output+0x48>)
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	b18b      	cbz	r3, 98a8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    9884:	4e10      	ldr	r6, [pc, #64]	; (98c8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    9886:	4d11      	ldr	r5, [pc, #68]	; (98cc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    9888:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    988a:	2701      	movs	r7, #1
    988c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    988e:	b164      	cbz	r4, 98aa <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9890:	4a0f      	ldr	r2, [pc, #60]	; (98d0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9892:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9894:	2700      	movs	r7, #0
    9896:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9898:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    989a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    989c:	2004      	movs	r0, #4
    989e:	f7ff f877 	bl	8990 <usb_tx>
		tx_packet = NULL;
    98a2:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    98a4:	2300      	movs	r3, #0
    98a6:	702b      	strb	r3, [r5, #0]
    98a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    98aa:	f7ff fe87 	bl	95bc <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    98ae:	4b08      	ldr	r3, [pc, #32]	; (98d0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    98b0:	b128      	cbz	r0, 98be <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    98b2:	4601      	mov	r1, r0
    98b4:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    98b6:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    98b8:	f7ff f86a 	bl	8990 <usb_tx>
    98bc:	e7f2      	b.n	98a4 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    98be:	701f      	strb	r7, [r3, #0]
    98c0:	e7f0      	b.n	98a4 <usb_serial_flush_output+0x28>
    98c2:	bf00      	nop
    98c4:	1fff9680 	.word	0x1fff9680
    98c8:	1fff968c 	.word	0x1fff968c
    98cc:	1fff9689 	.word	0x1fff9689
    98d0:	1fff9688 	.word	0x1fff9688

000098d4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    98d4:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    98d6:	4b0e      	ldr	r3, [pc, #56]	; (9910 <usb_serial_flush_callback+0x3c>)
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	b973      	cbnz	r3, 98fa <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    98dc:	4c0d      	ldr	r4, [pc, #52]	; (9914 <usb_serial_flush_callback+0x40>)
    98de:	6821      	ldr	r1, [r4, #0]
    98e0:	b161      	cbz	r1, 98fc <usb_serial_flush_callback+0x28>
    98e2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    98e6:	884b      	ldrh	r3, [r1, #2]
    98e8:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    98ea:	2004      	movs	r0, #4
    98ec:	f7ff f850 	bl	8990 <usb_tx>
		tx_packet = NULL;
    98f0:	6025      	str	r5, [r4, #0]
    98f2:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    98f4:	4b08      	ldr	r3, [pc, #32]	; (9918 <usb_serial_flush_callback+0x44>)
    98f6:	2201      	movs	r2, #1
    98f8:	701a      	strb	r2, [r3, #0]
    98fa:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    98fc:	f7ff fe5e 	bl	95bc <usb_malloc>
		if (tx) {
    9900:	2800      	cmp	r0, #0
    9902:	d0f7      	beq.n	98f4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9904:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    9906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    990a:	2004      	movs	r0, #4
    990c:	f7ff b840 	b.w	8990 <usb_tx>
    9910:	1fff9689 	.word	0x1fff9689
    9914:	1fff968c 	.word	0x1fff968c
    9918:	1fff9688 	.word	0x1fff9688

0000991c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    991c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    991e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9922:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9924:	7f43      	ldrb	r3, [r0, #29]
    9926:	b933      	cbnz	r3, 9936 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9928:	7f01      	ldrb	r1, [r0, #28]
    992a:	2901      	cmp	r1, #1
    992c:	d007      	beq.n	993e <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    992e:	2903      	cmp	r1, #3
    9930:	d00f      	beq.n	9952 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9932:	2301      	movs	r3, #1
    9934:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9936:	b902      	cbnz	r2, 993a <EventResponder::triggerEventNotImmediate()+0x1e>
    9938:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    993a:	bc10      	pop	{r4}
    993c:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    993e:	4c12      	ldr	r4, [pc, #72]	; (9988 <EventResponder::triggerEventNotImmediate()+0x6c>)
    9940:	6821      	ldr	r1, [r4, #0]
    9942:	b1a1      	cbz	r1, 996e <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9944:	4911      	ldr	r1, [pc, #68]	; (998c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9946:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    9948:	680b      	ldr	r3, [r1, #0]
    994a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    994c:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    994e:	6158      	str	r0, [r3, #20]
    9950:	e7ef      	b.n	9932 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9952:	4c0f      	ldr	r4, [pc, #60]	; (9990 <EventResponder::triggerEventNotImmediate()+0x74>)
    9954:	6821      	ldr	r1, [r4, #0]
    9956:	b181      	cbz	r1, 997a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9958:	490e      	ldr	r1, [pc, #56]	; (9994 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    995a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    995c:	680b      	ldr	r3, [r1, #0]
    995e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    9960:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    9962:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9964:	4b0c      	ldr	r3, [pc, #48]	; (9998 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9966:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    996a:	6019      	str	r1, [r3, #0]
    996c:	e7e1      	b.n	9932 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    996e:	4b07      	ldr	r3, [pc, #28]	; (998c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9970:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    9972:	6181      	str	r1, [r0, #24]
				firstYield = this;
    9974:	6020      	str	r0, [r4, #0]
				lastYield = this;
    9976:	6018      	str	r0, [r3, #0]
    9978:	e7db      	b.n	9932 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    997a:	4b06      	ldr	r3, [pc, #24]	; (9994 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    997c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    997e:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    9980:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    9982:	6018      	str	r0, [r3, #0]
    9984:	e7ee      	b.n	9964 <EventResponder::triggerEventNotImmediate()+0x48>
    9986:	bf00      	nop
    9988:	1fff96ac 	.word	0x1fff96ac
    998c:	1fff96a8 	.word	0x1fff96a8
    9990:	1fff969c 	.word	0x1fff969c
    9994:	1fff96a0 	.word	0x1fff96a0
    9998:	e000ed04 	.word	0xe000ed04

0000999c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    999c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    999e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    99a2:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    99a4:	4c0c      	ldr	r4, [pc, #48]	; (99d8 <EventResponder::runFromInterrupt()+0x3c>)
    99a6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    99a8:	b180      	cbz	r0, 99cc <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    99aa:	4e0c      	ldr	r6, [pc, #48]	; (99dc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    99ac:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    99ae:	6943      	ldr	r3, [r0, #20]
    99b0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    99b2:	b173      	cbz	r3, 99d2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    99b4:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99b6:	b902      	cbnz	r2, 99ba <EventResponder::runFromInterrupt()+0x1e>
    99b8:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    99ba:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    99bc:	6883      	ldr	r3, [r0, #8]
    99be:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    99c0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    99c4:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    99c6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    99c8:	2800      	cmp	r0, #0
    99ca:	d1f0      	bne.n	99ae <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99cc:	b902      	cbnz	r2, 99d0 <EventResponder::runFromInterrupt()+0x34>
    99ce:	b662      	cpsie	i
    99d0:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    99d2:	6033      	str	r3, [r6, #0]
    99d4:	e7ef      	b.n	99b6 <EventResponder::runFromInterrupt()+0x1a>
    99d6:	bf00      	nop
    99d8:	1fff969c 	.word	0x1fff969c
    99dc:	1fff96a0 	.word	0x1fff96a0

000099e0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    99e0:	f7ff bfdc 	b.w	999c <EventResponder::runFromInterrupt()>

000099e4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    99e4:	4a18      	ldr	r2, [pc, #96]	; (9a48 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    99e6:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    99e8:	6814      	ldr	r4, [r2, #0]
    99ea:	2c00      	cmp	r4, #0
    99ec:	d027      	beq.n	9a3e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    99ee:	6803      	ldr	r3, [r0, #0]
    99f0:	6821      	ldr	r1, [r4, #0]
    99f2:	428b      	cmp	r3, r1
    99f4:	d20e      	bcs.n	9a14 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    99f6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    99f8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    99fa:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    99fc:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    99fe:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9a00:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9a02:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9a04:	2302      	movs	r3, #2
    9a06:	7503      	strb	r3, [r0, #20]
}
    9a08:	bc30      	pop	{r4, r5}
    9a0a:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9a0c:	6811      	ldr	r1, [r2, #0]
    9a0e:	428b      	cmp	r3, r1
    9a10:	4614      	mov	r4, r2
    9a12:	d308      	bcc.n	9a26 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9a14:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9a16:	1a5b      	subs	r3, r3, r1
    9a18:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9a1a:	2a00      	cmp	r2, #0
    9a1c:	d1f6      	bne.n	9a0c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9a1e:	6082      	str	r2, [r0, #8]
		_prev = timer;
    9a20:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    9a22:	60a0      	str	r0, [r4, #8]
    9a24:	e7ee      	b.n	9a04 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9a26:	68d2      	ldr	r2, [r2, #12]
    9a28:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9a2a:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    9a2c:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    9a2e:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    9a30:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    9a32:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    9a34:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    9a36:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    9a38:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9a3a:	bc30      	pop	{r4, r5}
    9a3c:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9a3e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    9a40:	60c4      	str	r4, [r0, #12]
		listActive = this;
    9a42:	6010      	str	r0, [r2, #0]
    9a44:	e7de      	b.n	9a04 <MillisTimer::addToActiveList()+0x20>
    9a46:	bf00      	nop
    9a48:	1fff96a4 	.word	0x1fff96a4

00009a4c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9a4e:	4e22      	ldr	r6, [pc, #136]	; (9ad8 <MillisTimer::runFromTimer()+0x8c>)
    9a50:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    9a52:	b32c      	cbz	r4, 9aa0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9a54:	6823      	ldr	r3, [r4, #0]
    9a56:	2b00      	cmp	r3, #0
    9a58:	d13a      	bne.n	9ad0 <MillisTimer::runFromTimer()+0x84>
    9a5a:	4f20      	ldr	r7, [pc, #128]	; (9adc <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9a5c:	461d      	mov	r5, r3
    9a5e:	e004      	b.n	9a6a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9a60:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9a62:	b1ec      	cbz	r4, 9aa0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9a64:	6823      	ldr	r3, [r4, #0]
    9a66:	2b00      	cmp	r3, #0
    9a68:	d132      	bne.n	9ad0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9a6a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9a6c:	b103      	cbz	r3, 9a70 <MillisTimer::runFromTimer()+0x24>
    9a6e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9a70:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9a72:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9a74:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9a76:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9a78:	681b      	ldr	r3, [r3, #0]
    9a7a:	42bb      	cmp	r3, r7
    9a7c:	d121      	bne.n	9ac2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9a7e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9a80:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9a82:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9a84:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9a86:	d020      	beq.n	9aca <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9a88:	f7ff ff48 	bl	991c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9a8c:	6863      	ldr	r3, [r4, #4]
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d0e6      	beq.n	9a60 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9a92:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    9a94:	4620      	mov	r0, r4
    9a96:	f7ff ffa5 	bl	99e4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9a9a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9a9c:	2c00      	cmp	r4, #0
    9a9e:	d1e1      	bne.n	9a64 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9aa0:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    9aa4:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9aa6:	4a0e      	ldr	r2, [pc, #56]	; (9ae0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9aa8:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9aaa:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9aac:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9aae:	b903      	cbnz	r3, 9ab2 <MillisTimer::runFromTimer()+0x66>
    9ab0:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9ab2:	b128      	cbz	r0, 9ac0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9ab4:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9ab6:	f7ff ff95 	bl	99e4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9aba:	4620      	mov	r0, r4
    9abc:	2800      	cmp	r0, #0
    9abe:	d1f9      	bne.n	9ab4 <MillisTimer::runFromTimer()+0x68>
    9ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9ac2:	4622      	mov	r2, r4
    9ac4:	2100      	movs	r1, #0
    9ac6:	4798      	blx	r3
    9ac8:	e7e0      	b.n	9a8c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9aca:	6883      	ldr	r3, [r0, #8]
    9acc:	4798      	blx	r3
    9ace:	e7dd      	b.n	9a8c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9ad0:	3b01      	subs	r3, #1
    9ad2:	6023      	str	r3, [r4, #0]
			break;
    9ad4:	e7e4      	b.n	9aa0 <MillisTimer::runFromTimer()+0x54>
    9ad6:	bf00      	nop
    9ad8:	1fff96a4 	.word	0x1fff96a4
    9adc:	00006229 	.word	0x00006229
    9ae0:	1fff96b4 	.word	0x1fff96b4

00009ae4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    9ae4:	4a02      	ldr	r2, [pc, #8]	; (9af0 <systick_isr+0xc>)
    9ae6:	6813      	ldr	r3, [r2, #0]
    9ae8:	3301      	adds	r3, #1
    9aea:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9aec:	f7ff bfae 	b.w	9a4c <MillisTimer::runFromTimer()>
    9af0:	1fff959c 	.word	0x1fff959c

00009af4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9af4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9af6:	f7f6 fcb9 	bl	46c <setup>
	while (1) {
		loop();
    9afa:	f7f6 fd73 	bl	5e4 <loop>
		yield();
    9afe:	f000 fa9b 	bl	a038 <yield>
    9b02:	e7fa      	b.n	9afa <main+0x6>

00009b04 <operator new(unsigned int)>:
    9b04:	f001 ba20 	b.w	af48 <malloc>

00009b08 <operator new[](unsigned int)>:
  return malloc(size);
}

void * operator new[](size_t size)
{
  return malloc(size);
    9b08:	f001 ba1e 	b.w	af48 <malloc>

00009b0c <operator delete[](void*)>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
    9b0c:	f001 ba24 	b.w	af58 <free>

00009b10 <operator delete(void*, unsigned int)>:
    9b10:	f001 ba22 	b.w	af58 <free>

00009b14 <operator delete[](void*, unsigned int)>:
  free(ptr);
}

void operator delete[](void * ptr, size_t size)
{
  free(ptr);
    9b14:	f001 ba20 	b.w	af58 <free>

00009b18 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    9b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    9b1a:	460e      	mov	r6, r1
    9b1c:	b171      	cbz	r1, 9b3c <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    9b1e:	b17a      	cbz	r2, 9b40 <Print::write(unsigned char const*, unsigned int)+0x28>
    9b20:	4607      	mov	r7, r0
    9b22:	4614      	mov	r4, r2
    9b24:	2500      	movs	r5, #0
    9b26:	683b      	ldr	r3, [r7, #0]
    9b28:	f816 1b01 	ldrb.w	r1, [r6], #1
    9b2c:	681b      	ldr	r3, [r3, #0]
    9b2e:	4638      	mov	r0, r7
    9b30:	4798      	blx	r3
    9b32:	3c01      	subs	r4, #1
    9b34:	4405      	add	r5, r0
    9b36:	d1f6      	bne.n	9b26 <Print::write(unsigned char const*, unsigned int)+0xe>
    9b38:	4628      	mov	r0, r5
    9b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    9b3c:	4608      	mov	r0, r1
    9b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b40:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    9b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009b44 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    9b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9b48:	688c      	ldr	r4, [r1, #8]
    9b4a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    9b4c:	b1ec      	cbz	r4, 9b8a <Print::print(String const&)+0x46>
    9b4e:	2500      	movs	r5, #0
    9b50:	4606      	mov	r6, r0
    9b52:	4689      	mov	r9, r1
    9b54:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    9b56:	462b      	mov	r3, r5
    9b58:	2221      	movs	r2, #33	; 0x21
    9b5a:	a901      	add	r1, sp, #4
    9b5c:	4648      	mov	r0, r9
    9b5e:	f000 fa25 	bl	9fac <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    9b62:	6832      	ldr	r2, [r6, #0]
    9b64:	2c20      	cmp	r4, #32
    9b66:	4623      	mov	r3, r4
    9b68:	bf28      	it	cs
    9b6a:	2320      	movcs	r3, #32
    9b6c:	f8d2 8004 	ldr.w	r8, [r2, #4]
    9b70:	a901      	add	r1, sp, #4
    9b72:	461a      	mov	r2, r3
    9b74:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    9b76:	441d      	add	r5, r3
		len -= nbytes;
    9b78:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    9b7a:	47c0      	blx	r8
    9b7c:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    9b7e:	2c00      	cmp	r4, #0
    9b80:	d1e9      	bne.n	9b56 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    9b82:	4638      	mov	r0, r7
    9b84:	b00b      	add	sp, #44	; 0x2c
    9b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    9b8a:	4627      	mov	r7, r4
    9b8c:	e7f9      	b.n	9b82 <Print::print(String const&)+0x3e>
    9b8e:	bf00      	nop

00009b90 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9b90:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    9b92:	4a06      	ldr	r2, [pc, #24]	; (9bac <Print::println()+0x1c>)
	return write(buf, 2);
    9b94:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9b96:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    9b98:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9b9a:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9b9c:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9b9e:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9ba2:	2202      	movs	r2, #2
    9ba4:	4798      	blx	r3
}
    9ba6:	b003      	add	sp, #12
    9ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    9bac:	00010a04 	.word	0x00010a04

00009bb0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9bb0:	b510      	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    9bb2:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9bb4:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9bb6:	685b      	ldr	r3, [r3, #4]
    9bb8:	4798      	blx	r3
	return len;
}
    9bba:	4620      	mov	r0, r4
    9bbc:	bd10      	pop	{r4, pc}
    9bbe:	bf00      	nop

00009bc0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    9bc0:	b40e      	push	{r1, r2, r3}
    9bc2:	b500      	push	{lr}
    9bc4:	b082      	sub	sp, #8
    9bc6:	aa03      	add	r2, sp, #12
    9bc8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    9bcc:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9bce:	f002 f961 	bl	be94 <vdprintf>
#endif
}
    9bd2:	b002      	add	sp, #8
    9bd4:	f85d eb04 	ldr.w	lr, [sp], #4
    9bd8:	b003      	add	sp, #12
    9bda:	4770      	bx	lr

00009bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bde:	4607      	mov	r7, r0
    9be0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9be2:	2a00      	cmp	r2, #0
    9be4:	d033      	beq.n	9c4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9be6:	2a01      	cmp	r2, #1
    9be8:	bf08      	it	eq
    9bea:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    9bec:	b351      	cbz	r1, 9c44 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    9bee:	2421      	movs	r4, #33	; 0x21
    9bf0:	e000      	b.n	9bf4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9bf2:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9bf4:	fbb1 f5f2 	udiv	r5, r1, r2
    9bf8:	fb02 1115 	mls	r1, r2, r5, r1
    9bfc:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9bfe:	2909      	cmp	r1, #9
    9c00:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9c04:	bf98      	it	ls
    9c06:	b2c8      	uxtbls	r0, r1
    9c08:	a90a      	add	r1, sp, #40	; 0x28
    9c0a:	bf88      	it	hi
    9c0c:	3037      	addhi	r0, #55	; 0x37
    9c0e:	4421      	add	r1, r4
    9c10:	bf88      	it	hi
    9c12:	b2c0      	uxtbhi	r0, r0
    9c14:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    9c18:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    9c1a:	4629      	mov	r1, r5
    9c1c:	2d00      	cmp	r5, #0
    9c1e:	d1e8      	bne.n	9bf2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    9c20:	b133      	cbz	r3, 9c30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    9c22:	3c01      	subs	r4, #1
    9c24:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    9c26:	ab0a      	add	r3, sp, #40	; 0x28
    9c28:	4423      	add	r3, r4
    9c2a:	222d      	movs	r2, #45	; 0x2d
    9c2c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9c30:	683b      	ldr	r3, [r7, #0]
    9c32:	aa01      	add	r2, sp, #4
    9c34:	1911      	adds	r1, r2, r4
    9c36:	685b      	ldr	r3, [r3, #4]
    9c38:	4638      	mov	r0, r7
    9c3a:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    9c3e:	4798      	blx	r3
}
    9c40:	b00b      	add	sp, #44	; 0x2c
    9c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9c44:	2230      	movs	r2, #48	; 0x30
    9c46:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9c4a:	2421      	movs	r4, #33	; 0x21
    9c4c:	e7e8      	b.n	9c20 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    9c4e:	6803      	ldr	r3, [r0, #0]
    9c50:	b2c9      	uxtb	r1, r1
    9c52:	681b      	ldr	r3, [r3, #0]
    9c54:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    9c56:	b00b      	add	sp, #44	; 0x2c
    9c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c5a:	bf00      	nop

00009c5c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    9c5c:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    9c5e:	bfba      	itte	lt
    9c60:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    9c62:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    9c64:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    9c66:	220a      	movs	r2, #10
    9c68:	f7ff bfb8 	b.w	9bdc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00009c6c <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9c6c:	f7ff bd36 	b.w	96dc <usb_serial_flush_input>

00009c70 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9c70:	f7ff bd0e 	b.w	9690 <usb_serial_peekchar>

00009c74 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9c74:	f7ff bce8 	b.w	9648 <usb_serial_getchar>

00009c78 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9c78:	f7ff bd22 	b.w	96c0 <usb_serial_available>

00009c7c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9c7c:	f7ff bdfe 	b.w	987c <usb_serial_flush_output>

00009c80 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9c80:	f7ff bdd8 	b.w	9834 <usb_serial_write_buffer_free>

00009c84 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9c84:	4608      	mov	r0, r1
    9c86:	4611      	mov	r1, r2
    9c88:	f7ff bd44 	b.w	9714 <usb_serial_write>

00009c8c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9c8c:	4608      	mov	r0, r1
    9c8e:	f7ff bdc5 	b.w	981c <usb_serial_putchar>
    9c92:	bf00      	nop

00009c94 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    9c94:	4770      	bx	lr
    9c96:	bf00      	nop

00009c98 <String::String(String&&)>:
	init();
	*this = value;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String::String(String &&rval)
    9c98:	b470      	push	{r4, r5, r6}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9c9a:	2300      	movs	r3, #0
	capacity = 0;
	len = 0;
	flags = 0;
    9c9c:	7303      	strb	r3, [r0, #12]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9c9e:	6003      	str	r3, [r0, #0]
	capacity = 0;
    9ca0:	6043      	str	r3, [r0, #4]
	len = 0;
    9ca2:	6083      	str	r3, [r0, #8]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    9ca4:	680e      	ldr	r6, [r1, #0]
	capacity = rhs.capacity;
    9ca6:	684d      	ldr	r5, [r1, #4]
	len = rhs.len;
    9ca8:	688c      	ldr	r4, [r1, #8]
    9caa:	6084      	str	r4, [r0, #8]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    9cac:	6006      	str	r6, [r0, #0]
	capacity = rhs.capacity;
    9cae:	6045      	str	r5, [r0, #4]
	len = rhs.len;
	rhs.buffer = NULL;
    9cb0:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
    9cb2:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
    9cb4:	608b      	str	r3, [r1, #8]
#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String::String(String &&rval)
{
	init();
	move(rval);
}
    9cb6:	bc70      	pop	{r4, r5, r6}
    9cb8:	4770      	bx	lr
    9cba:	bf00      	nop

00009cbc <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    9cbc:	b510      	push	{r4, lr}
    9cbe:	4604      	mov	r4, r0
{
	free(buffer);
    9cc0:	6800      	ldr	r0, [r0, #0]
    9cc2:	f001 f949 	bl	af58 <free>
}
    9cc6:	4620      	mov	r0, r4
    9cc8:	bd10      	pop	{r4, pc}
    9cca:	bf00      	nop

00009ccc <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    9ccc:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    9cce:	6843      	ldr	r3, [r0, #4]
    9cd0:	428b      	cmp	r3, r1
    9cd2:	d301      	bcc.n	9cd8 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    9cd4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    9cd6:	bd38      	pop	{r3, r4, r5, pc}
    9cd8:	460d      	mov	r5, r1
    9cda:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9cdc:	3101      	adds	r1, #1
    9cde:	6800      	ldr	r0, [r0, #0]
    9ce0:	f001 fcf8 	bl	b6d4 <realloc>
	if (newbuffer) {
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d0f6      	beq.n	9cd6 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    9ce8:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    9cea:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    9cee:	2b00      	cmp	r3, #0
    9cf0:	d1f0      	bne.n	9cd4 <String::reserve(unsigned int)+0x8>
    9cf2:	7003      	strb	r3, [r0, #0]
    9cf4:	e7ee      	b.n	9cd4 <String::reserve(unsigned int)+0x8>
    9cf6:	bf00      	nop

00009cf8 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    9cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cfa:	4604      	mov	r4, r0
	if (length == 0) {
    9cfc:	4615      	mov	r5, r2
    9cfe:	b932      	cbnz	r2, 9d0e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    9d00:	6803      	ldr	r3, [r0, #0]
    9d02:	b103      	cbz	r3, 9d06 <String::copy(char const*, unsigned int)+0xe>
    9d04:	701a      	strb	r2, [r3, #0]
		len = 0;
    9d06:	2300      	movs	r3, #0
    9d08:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    9d0a:	4620      	mov	r0, r4
    9d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d0e:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    9d10:	4611      	mov	r1, r2
    9d12:	f7ff ffdb 	bl	9ccc <String::reserve(unsigned int)>
    9d16:	4607      	mov	r7, r0
    9d18:	b948      	cbnz	r0, 9d2e <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    9d1a:	6820      	ldr	r0, [r4, #0]
    9d1c:	b110      	cbz	r0, 9d24 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    9d1e:	f001 f91b 	bl	af58 <free>
			buffer = NULL;
    9d22:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    9d24:	2300      	movs	r3, #0
    9d26:	6063      	str	r3, [r4, #4]
    9d28:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    9d2a:	4620      	mov	r0, r4
    9d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    9d2e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    9d30:	4631      	mov	r1, r6
    9d32:	6820      	ldr	r0, [r4, #0]
    9d34:	f001 ff40 	bl	bbb8 <strcpy>
	return *this;
    9d38:	e7e7      	b.n	9d0a <String::copy(char const*, unsigned int)+0x12>
    9d3a:	bf00      	nop

00009d3c <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    9d3c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9d3e:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    9d40:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9d42:	6003      	str	r3, [r0, #0]
	capacity = 0;
    9d44:	6043      	str	r3, [r0, #4]
	len = 0;
    9d46:	6083      	str	r3, [r0, #8]
	flags = 0;
    9d48:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    9d4a:	b141      	cbz	r1, 9d5e <String::String(char const*)+0x22>
    9d4c:	4608      	mov	r0, r1
    9d4e:	460d      	mov	r5, r1
    9d50:	f001 ff96 	bl	bc80 <strlen>
    9d54:	4629      	mov	r1, r5
    9d56:	4602      	mov	r2, r0
    9d58:	4620      	mov	r0, r4
    9d5a:	f7ff ffcd 	bl	9cf8 <String::copy(char const*, unsigned int)>
}
    9d5e:	4620      	mov	r0, r4
    9d60:	bd38      	pop	{r3, r4, r5, pc}
    9d62:	bf00      	nop

00009d64 <String::String(__FlashStringHelper const*)>:

String::String(const __FlashStringHelper *pgmstr)
    9d64:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9d66:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    9d68:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9d6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
    9d6c:	6043      	str	r3, [r0, #4]
	len = 0;
    9d6e:	6083      	str	r3, [r0, #8]
	flags = 0;
    9d70:	7303      	strb	r3, [r0, #12]
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    9d72:	4608      	mov	r0, r1
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    9d74:	460d      	mov	r5, r1
    9d76:	f001 ff83 	bl	bc80 <strlen>
    9d7a:	4629      	mov	r1, r5
    9d7c:	4602      	mov	r2, r0
    9d7e:	4620      	mov	r0, r4
    9d80:	f7ff ffba 	bl	9cf8 <String::copy(char const*, unsigned int)>
{
	init();
	*this = pgmstr;
}
    9d84:	4620      	mov	r0, r4
    9d86:	bd38      	pop	{r3, r4, r5, pc}

00009d88 <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9d88:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    9d8a:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    9d8c:	b510      	push	{r4, lr}
    9d8e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9d90:	6003      	str	r3, [r0, #0]
	capacity = 0;
    9d92:	6043      	str	r3, [r0, #4]
	len = 0;
    9d94:	6083      	str	r3, [r0, #8]
	flags = 0;
    9d96:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    9d98:	d003      	beq.n	9da2 <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    9d9a:	688a      	ldr	r2, [r1, #8]
    9d9c:	6809      	ldr	r1, [r1, #0]
    9d9e:	f7ff ffab 	bl	9cf8 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    9da2:	4620      	mov	r0, r4
    9da4:	bd10      	pop	{r4, pc}
    9da6:	bf00      	nop

00009da8 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    9da8:	b538      	push	{r3, r4, r5, lr}
    9daa:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    9dac:	4608      	mov	r0, r1
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    9dae:	460c      	mov	r4, r1
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    9db0:	f001 ff66 	bl	bc80 <strlen>
    9db4:	4621      	mov	r1, r4
    9db6:	4602      	mov	r2, r0
    9db8:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    9dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    9dbe:	f7ff bf9b 	b.w	9cf8 <String::copy(char const*, unsigned int)>
    9dc2:	bf00      	nop

00009dc4 <String::String(unsigned char)>:
{
	init();
	*this = c;
}

String::String(unsigned char c)
    9dc4:	b510      	push	{r4, lr}
    9dc6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9dc8:	2300      	movs	r3, #0
{
	init();
	*this = c;
}

String::String(unsigned char c)
    9dca:	b082      	sub	sp, #8
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9dcc:	6023      	str	r3, [r4, #0]
	capacity = 0;
    9dce:	6063      	str	r3, [r4, #4]
	len = 0;
    9dd0:	60a3      	str	r3, [r4, #8]
	flags = 0;
    9dd2:	7323      	strb	r3, [r4, #12]

String::String(unsigned char c)
{
	init();
	char buf[4];
	utoa(c, buf, 10);
    9dd4:	220a      	movs	r2, #10
    9dd6:	4608      	mov	r0, r1
    9dd8:	a901      	add	r1, sp, #4
    9dda:	f002 f833 	bl	be44 <utoa>
    9dde:	a901      	add	r1, sp, #4
    9de0:	4620      	mov	r0, r4
    9de2:	f7ff ffe1 	bl	9da8 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    9de6:	4620      	mov	r0, r4
    9de8:	b002      	add	sp, #8
    9dea:	bd10      	pop	{r4, pc}

00009dec <String::String(unsigned long, unsigned char)>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    9dec:	b510      	push	{r4, lr}
    9dee:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9df0:	2300      	movs	r3, #0
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    9df2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9df4:	6023      	str	r3, [r4, #0]
	capacity = 0;
    9df6:	6063      	str	r3, [r4, #4]
	len = 0;
    9df8:	60a3      	str	r3, [r4, #8]
	flags = 0;
    9dfa:	7323      	strb	r3, [r4, #12]

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    9dfc:	4608      	mov	r0, r1
    9dfe:	a901      	add	r1, sp, #4
    9e00:	f000 f9d8 	bl	a1b4 <ultoa>
    9e04:	a901      	add	r1, sp, #4
    9e06:	4620      	mov	r0, r4
    9e08:	f7ff ffce 	bl	9da8 <String::operator=(char const*) [clone .part.3]>
	*this = buf;
}
    9e0c:	4620      	mov	r0, r4
    9e0e:	b00a      	add	sp, #40	; 0x28
    9e10:	bd10      	pop	{r4, pc}
    9e12:	bf00      	nop

00009e14 <String::move(String&)>:
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    9e14:	b538      	push	{r3, r4, r5, lr}
    9e16:	4605      	mov	r5, r0
	if (buffer) {
    9e18:	6800      	ldr	r0, [r0, #0]
	strcpy(buffer, cstr);
	return *this;
}

void String::move(String &rhs)
{
    9e1a:	460c      	mov	r4, r1
	if (buffer) {
    9e1c:	b128      	cbz	r0, 9e2a <String::move(String&)+0x16>
		if (capacity >= rhs.len) {
    9e1e:	686a      	ldr	r2, [r5, #4]
    9e20:	688b      	ldr	r3, [r1, #8]
    9e22:	429a      	cmp	r2, r3
    9e24:	d20c      	bcs.n	9e40 <String::move(String&)+0x2c>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    9e26:	f001 f897 	bl	af58 <free>
		}
	}
	buffer = rhs.buffer;
    9e2a:	6823      	ldr	r3, [r4, #0]
	capacity = rhs.capacity;
    9e2c:	6861      	ldr	r1, [r4, #4]
	len = rhs.len;
    9e2e:	68a2      	ldr	r2, [r4, #8]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    9e30:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
    9e32:	2300      	movs	r3, #0
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
    9e34:	6069      	str	r1, [r5, #4]
	len = rhs.len;
    9e36:	60aa      	str	r2, [r5, #8]
	rhs.buffer = NULL;
    9e38:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    9e3a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    9e3c:	60a3      	str	r3, [r4, #8]
    9e3e:	bd38      	pop	{r3, r4, r5, pc}

void String::move(String &rhs)
{
	if (buffer) {
		if (capacity >= rhs.len) {
			strcpy(buffer, rhs.buffer);
    9e40:	6809      	ldr	r1, [r1, #0]
    9e42:	f001 feb9 	bl	bbb8 <strcpy>
			len = rhs.len;
    9e46:	68a3      	ldr	r3, [r4, #8]
    9e48:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
    9e4a:	2300      	movs	r3, #0
    9e4c:	60a3      	str	r3, [r4, #8]
			return;
    9e4e:	bd38      	pop	{r3, r4, r5, pc}

00009e50 <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    9e50:	4281      	cmp	r1, r0
    9e52:	d003      	beq.n	9e5c <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    9e54:	688a      	ldr	r2, [r1, #8]
    9e56:	6809      	ldr	r1, [r1, #0]
    9e58:	f7ff bf4e 	b.w	9cf8 <String::copy(char const*, unsigned int)>
}
    9e5c:	4770      	bx	lr
    9e5e:	bf00      	nop

00009e60 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
    9e60:	4288      	cmp	r0, r1
	return copy(rhs.buffer, rhs.len);
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    9e62:	b510      	push	{r4, lr}
    9e64:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    9e66:	d001      	beq.n	9e6c <String::operator=(String&&)+0xc>
    9e68:	f7ff ffd4 	bl	9e14 <String::move(String&)>
	return *this;
}
    9e6c:	4620      	mov	r0, r4
    9e6e:	bd10      	pop	{r4, pc}

00009e70 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    9e70:	b510      	push	{r4, lr}
    9e72:	4604      	mov	r4, r0
	if (cstr) {
    9e74:	b119      	cbz	r1, 9e7e <String::operator=(char const*)+0xe>
    9e76:	f7ff ff97 	bl	9da8 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    9e7a:	4620      	mov	r0, r4
    9e7c:	bd10      	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    9e7e:	60a1      	str	r1, [r4, #8]
	}
	return *this;
}
    9e80:	4620      	mov	r0, r4
    9e82:	bd10      	pop	{r4, pc}

00009e84 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    9e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9e88:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    9e8a:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9e8c:	42bb      	cmp	r3, r7
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    9e8e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
    9e90:	6881      	ldr	r1, [r0, #8]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    9e92:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9e94:	d80a      	bhi.n	9eac <String::append(char const*, unsigned int)+0x28>
    9e96:	185a      	adds	r2, r3, r1
    9e98:	4297      	cmp	r7, r2
    9e9a:	d207      	bcs.n	9eac <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    9e9c:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    9ea0:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    9ea4:	b935      	cbnz	r5, 9eb4 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    9ea6:	4620      	mov	r0, r4
    9ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    9eac:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    9eb0:	2d00      	cmp	r5, #0
    9eb2:	d0f8      	beq.n	9ea6 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    9eb4:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    9eb6:	4631      	mov	r1, r6
    9eb8:	4620      	mov	r0, r4
    9eba:	f7ff ff07 	bl	9ccc <String::reserve(unsigned int)>
    9ebe:	2800      	cmp	r0, #0
    9ec0:	d0f1      	beq.n	9ea6 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    9ec2:	f1b8 0f00 	cmp.w	r8, #0
    9ec6:	d00e      	beq.n	9ee6 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    9ec8:	6823      	ldr	r3, [r4, #0]
    9eca:	68a0      	ldr	r0, [r4, #8]
    9ecc:	462a      	mov	r2, r5
    9ece:	eb03 0109 	add.w	r1, r3, r9
    9ed2:	4418      	add	r0, r3
    9ed4:	f7fe fa12 	bl	82fc <memcpy>
		buffer[newlen] = 0;
    9ed8:	6823      	ldr	r3, [r4, #0]
    9eda:	2200      	movs	r2, #0
    9edc:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    9ede:	60a6      	str	r6, [r4, #8]
	return *this;
}
    9ee0:	4620      	mov	r0, r4
    9ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    9ee6:	6820      	ldr	r0, [r4, #0]
    9ee8:	68a3      	ldr	r3, [r4, #8]
    9eea:	4639      	mov	r1, r7
    9eec:	4418      	add	r0, r3
    9eee:	f001 fe63 	bl	bbb8 <strcpy>
    9ef2:	e7f4      	b.n	9ede <String::append(char const*, unsigned int)+0x5a>

00009ef4 <String::append(String const&)>:
/*  Append                                   */
/*********************************************/

String & String::append(const String &s)
{
	return append(s.buffer, s.len);
    9ef4:	688a      	ldr	r2, [r1, #8]
    9ef6:	6809      	ldr	r1, [r1, #0]
    9ef8:	f7ff bfc4 	b.w	9e84 <String::append(char const*, unsigned int)>

00009efc <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    9efc:	b510      	push	{r4, lr}
    9efe:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    9f00:	2300      	movs	r3, #0
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    9f02:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    9f06:	2201      	movs	r2, #1
    9f08:	a901      	add	r1, sp, #4
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    9f0a:	4604      	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    9f0c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    9f10:	f7ff ffb8 	bl	9e84 <String::append(char const*, unsigned int)>
	return *this;
}
    9f14:	4620      	mov	r0, r4
    9f16:	b002      	add	sp, #8
    9f18:	bd10      	pop	{r4, pc}
    9f1a:	bf00      	nop

00009f1c <String::append(int)>:

String & String::append(int num)
{
    9f1c:	b510      	push	{r4, lr}
    9f1e:	460b      	mov	r3, r1
    9f20:	b084      	sub	sp, #16
    9f22:	4604      	mov	r4, r0
	char buf[12];
	ltoa((long)num, buf, 10);
    9f24:	a901      	add	r1, sp, #4
    9f26:	4618      	mov	r0, r3
    9f28:	220a      	movs	r2, #10
    9f2a:	f000 f969 	bl	a200 <ltoa>
	append(buf, strlen(buf));
    9f2e:	a801      	add	r0, sp, #4
    9f30:	f001 fea6 	bl	bc80 <strlen>
    9f34:	a901      	add	r1, sp, #4
    9f36:	4602      	mov	r2, r0
    9f38:	4620      	mov	r0, r4
    9f3a:	f7ff ffa3 	bl	9e84 <String::append(char const*, unsigned int)>
	return *this;
}
    9f3e:	4620      	mov	r0, r4
    9f40:	b004      	add	sp, #16
    9f42:	bd10      	pop	{r4, pc}

00009f44 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    9f44:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    9f46:	688a      	ldr	r2, [r1, #8]
    9f48:	6809      	ldr	r1, [r1, #0]
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    9f4a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    9f4c:	f7ff ff9a 	bl	9e84 <String::append(char const*, unsigned int)>
	return a;
}
    9f50:	4620      	mov	r0, r4
    9f52:	bd10      	pop	{r4, pc}

00009f54 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    9f54:	b538      	push	{r3, r4, r5, lr}
    9f56:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    9f58:	b141      	cbz	r1, 9f6c <operator+(StringSumHelper const&, char const*)+0x18>
    9f5a:	4608      	mov	r0, r1
    9f5c:	460c      	mov	r4, r1
    9f5e:	f001 fe8f 	bl	bc80 <strlen>
    9f62:	4621      	mov	r1, r4
    9f64:	4602      	mov	r2, r0
    9f66:	4628      	mov	r0, r5
    9f68:	f7ff ff8c 	bl	9e84 <String::append(char const*, unsigned int)>
	return a;
}
    9f6c:	4628      	mov	r0, r5
    9f6e:	bd38      	pop	{r3, r4, r5, pc}

00009f70 <String::charAt(unsigned int) const>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    9f70:	6883      	ldr	r3, [r0, #8]
    9f72:	4299      	cmp	r1, r3
    9f74:	d203      	bcs.n	9f7e <String::charAt(unsigned int) const+0xe>
    9f76:	6800      	ldr	r0, [r0, #0]
    9f78:	b110      	cbz	r0, 9f80 <String::charAt(unsigned int) const+0x10>
	return buffer[index];
    9f7a:	5c40      	ldrb	r0, [r0, r1]
    9f7c:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    9f7e:	2000      	movs	r0, #0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
    9f80:	4770      	bx	lr
    9f82:	bf00      	nop

00009f84 <String::setCharAt(unsigned int, char)>:

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
    9f84:	6883      	ldr	r3, [r0, #8]
    9f86:	428b      	cmp	r3, r1
    9f88:	bf84      	itt	hi
    9f8a:	6803      	ldrhi	r3, [r0, #0]
    9f8c:	545a      	strbhi	r2, [r3, r1]
    9f8e:	4770      	bx	lr

00009f90 <String::operator[](unsigned int)>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    9f90:	6883      	ldr	r3, [r0, #8]
    9f92:	428b      	cmp	r3, r1
    9f94:	d903      	bls.n	9f9e <String::operator[](unsigned int)+0xe>
    9f96:	6800      	ldr	r0, [r0, #0]
    9f98:	b108      	cbz	r0, 9f9e <String::operator[](unsigned int)+0xe>
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    9f9a:	4408      	add	r0, r1
}
    9f9c:	4770      	bx	lr

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    9f9e:	4902      	ldr	r1, [pc, #8]	; (9fa8 <String::operator[](unsigned int)+0x18>)
    9fa0:	2300      	movs	r3, #0
    9fa2:	700b      	strb	r3, [r1, #0]
		return dummy_writable_char;
    9fa4:	4608      	mov	r0, r1
    9fa6:	4770      	bx	lr
    9fa8:	1fff96b8 	.word	0x1fff96b8

00009fac <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    9fac:	b1b2      	cbz	r2, 9fdc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    9fae:	b1a9      	cbz	r1, 9fdc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    9fb0:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    9fb2:	6884      	ldr	r4, [r0, #8]
    9fb4:	429c      	cmp	r4, r3
    9fb6:	d90e      	bls.n	9fd6 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    9fb8:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    9fba:	3a01      	subs	r2, #1
    9fbc:	460d      	mov	r5, r1
    9fbe:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    9fc0:	6801      	ldr	r1, [r0, #0]
    9fc2:	bf28      	it	cs
    9fc4:	4614      	movcs	r4, r2
    9fc6:	4419      	add	r1, r3
    9fc8:	4622      	mov	r2, r4
    9fca:	4628      	mov	r0, r5
    9fcc:	f001 fec6 	bl	bd5c <strncpy>
	buf[n] = 0;
    9fd0:	2300      	movs	r3, #0
    9fd2:	552b      	strb	r3, [r5, r4]
    9fd4:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    9fd6:	2300      	movs	r3, #0
    9fd8:	700b      	strb	r3, [r1, #0]
		return;
    9fda:	bd38      	pop	{r3, r4, r5, pc}
    9fdc:	4770      	bx	lr
    9fde:	bf00      	nop

00009fe0 <String::substring(unsigned int, unsigned int) const>:
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    9fe0:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    9fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fe4:	4604      	mov	r4, r0
    9fe6:	460e      	mov	r6, r1
	if (left > right) {
    9fe8:	d902      	bls.n	9ff0 <String::substring(unsigned int, unsigned int) const+0x10>
    9fea:	4611      	mov	r1, r2
    9fec:	461a      	mov	r2, r3
    9fee:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9ff0:	2100      	movs	r1, #0
	capacity = 0;
	len = 0;
    9ff2:	60a1      	str	r1, [r4, #8]
	flags = 0;
    9ff4:	7321      	strb	r1, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    9ff6:	68b0      	ldr	r0, [r6, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    9ff8:	6021      	str	r1, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    9ffa:	4282      	cmp	r2, r0
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    9ffc:	6061      	str	r1, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    9ffe:	d80e      	bhi.n	a01e <String::substring(unsigned int, unsigned int) const+0x3e>
    a000:	4283      	cmp	r3, r0
    a002:	bf28      	it	cs
    a004:	4603      	movcs	r3, r0
    a006:	461d      	mov	r5, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    a008:	6833      	ldr	r3, [r6, #0]
    a00a:	5d5f      	ldrb	r7, [r3, r5]
	buffer[right] = '\0';	
    a00c:	5559      	strb	r1, [r3, r5]
	out = buffer + left;  // pointer arithmetic
    a00e:	6833      	ldr	r3, [r6, #0]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    a010:	1899      	adds	r1, r3, r2
    a012:	d006      	beq.n	a022 <String::substring(unsigned int, unsigned int) const+0x42>
    a014:	4620      	mov	r0, r4
    a016:	f7ff fec7 	bl	9da8 <String::operator=(char const*) [clone .part.3]>
    a01a:	6833      	ldr	r3, [r6, #0]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    a01c:	555f      	strb	r7, [r3, r5]
	return out;
}
    a01e:	4620      	mov	r0, r4
    a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    a022:	60a1      	str	r1, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    a024:	555f      	strb	r7, [r3, r5]
    a026:	e7fa      	b.n	a01e <String::substring(unsigned int, unsigned int) const+0x3e>

0000a028 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    a028:	b510      	push	{r4, lr}
	return substring(left, len);
    a02a:	688b      	ldr	r3, [r1, #8]
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    a02c:	4604      	mov	r4, r0
	return substring(left, len);
    a02e:	f7ff ffd7 	bl	9fe0 <String::substring(unsigned int, unsigned int) const>
}
    a032:	4620      	mov	r0, r4
    a034:	bd10      	pop	{r4, pc}
    a036:	bf00      	nop

0000a038 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a038:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    a03a:	4c22      	ldr	r4, [pc, #136]	; (a0c4 <yield+0x8c>)
    a03c:	7823      	ldrb	r3, [r4, #0]
    a03e:	b103      	cbz	r3, a042 <yield+0xa>
    a040:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    a042:	2301      	movs	r3, #1
    a044:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a046:	f7ff fb3b 	bl	96c0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    a04a:	bb70      	cbnz	r0, a0aa <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    a04c:	f000 f8ea 	bl	a224 <serial_available>
	if (Serial1.available()) serialEvent1();
    a050:	bb40      	cbnz	r0, a0a4 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    a052:	f000 f97d 	bl	a350 <serial2_available>
	if (Serial2.available()) serialEvent2();
    a056:	bb10      	cbnz	r0, a09e <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    a058:	f000 fa10 	bl	a47c <serial3_available>
	if (Serial3.available()) serialEvent3();
    a05c:	b9e0      	cbnz	r0, a098 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    a05e:	2300      	movs	r3, #0
    a060:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a062:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    a066:	2b00      	cmp	r3, #0
    a068:	d1ea      	bne.n	a040 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a06a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    a06e:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a070:	4b15      	ldr	r3, [pc, #84]	; (a0c8 <yield+0x90>)
    a072:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a074:	b1e0      	cbz	r0, a0b0 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a076:	4c15      	ldr	r4, [pc, #84]	; (a0cc <yield+0x94>)
    a078:	7822      	ldrb	r2, [r4, #0]
    a07a:	b9ca      	cbnz	r2, a0b0 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a07c:	6945      	ldr	r5, [r0, #20]
    a07e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a080:	2301      	movs	r3, #1
    a082:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a084:	b1c5      	cbz	r5, a0b8 <yield+0x80>
			firstYield->_prev = nullptr;
    a086:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a088:	b901      	cbnz	r1, a08c <yield+0x54>
    a08a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a08c:	2500      	movs	r5, #0
    a08e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a090:	6883      	ldr	r3, [r0, #8]
    a092:	4798      	blx	r3
		runningFromYield = false;
    a094:	7025      	strb	r5, [r4, #0]
    a096:	e7d3      	b.n	a040 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    a098:	f000 fab2 	bl	a600 <serialEvent3()>
    a09c:	e7df      	b.n	a05e <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    a09e:	f000 faad 	bl	a5fc <serialEvent2()>
    a0a2:	e7d9      	b.n	a058 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    a0a4:	f000 faa8 	bl	a5f8 <serialEvent1()>
    a0a8:	e7d3      	b.n	a052 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    a0aa:	f7ff fdf3 	bl	9c94 <serialEvent()>
    a0ae:	e7cd      	b.n	a04c <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a0b0:	2900      	cmp	r1, #0
    a0b2:	d1c5      	bne.n	a040 <yield+0x8>
    a0b4:	b662      	cpsie	i
    a0b6:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a0b8:	4b05      	ldr	r3, [pc, #20]	; (a0d0 <yield+0x98>)
    a0ba:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a0bc:	2900      	cmp	r1, #0
    a0be:	d1e5      	bne.n	a08c <yield+0x54>
    a0c0:	e7e3      	b.n	a08a <yield+0x52>
    a0c2:	bf00      	nop
    a0c4:	1fff96b9 	.word	0x1fff96b9
    a0c8:	1fff96ac 	.word	0x1fff96ac
    a0cc:	1fff96b0 	.word	0x1fff96b0
    a0d0:	1fff96a8 	.word	0x1fff96a8

0000a0d4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    a0d4:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a0d6:	4829      	ldr	r0, [pc, #164]	; (a17c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a0d8:	4a29      	ldr	r2, [pc, #164]	; (a180 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    a0da:	4b2a      	ldr	r3, [pc, #168]	; (a184 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a0dc:	4d2a      	ldr	r5, [pc, #168]	; (a188 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a0de:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a0e0:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a0e2:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a0e4:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    a0e6:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a0e8:	4c28      	ldr	r4, [pc, #160]	; (a18c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    a0ea:	2b08      	cmp	r3, #8
    a0ec:	d030      	beq.n	a150 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a0ee:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a0f0:	4827      	ldr	r0, [pc, #156]	; (a190 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a0f2:	4928      	ldr	r1, [pc, #160]	; (a194 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a0f4:	d037      	beq.n	a166 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    a0f6:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a0f8:	bf0c      	ite	eq
    a0fa:	2215      	moveq	r2, #21
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a0fc:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a0fe:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a100:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a102:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a104:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a106:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a108:	4b23      	ldr	r3, [pc, #140]	; (a198 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a10a:	4924      	ldr	r1, [pc, #144]	; (a19c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a10c:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a10e:	4a24      	ldr	r2, [pc, #144]	; (a1a0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a110:	b1bb      	cbz	r3, a142 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a112:	2301      	movs	r3, #1
    a114:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a116:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a118:	4b22      	ldr	r3, [pc, #136]	; (a1a4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a11a:	4923      	ldr	r1, [pc, #140]	; (a1a8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a11c:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a11e:	4a23      	ldr	r2, [pc, #140]	; (a1ac <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    a120:	2b01      	cmp	r3, #1
    a122:	d926      	bls.n	a172 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    a124:	2b04      	cmp	r3, #4
    a126:	d90f      	bls.n	a148 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    a128:	2b08      	cmp	r3, #8
    a12a:	d91e      	bls.n	a16a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    a12c:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    a12e:	bf94      	ite	ls
    a130:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a132:	2387      	movhi	r3, #135	; 0x87
    a134:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a136:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    a138:	4b1d      	ldr	r3, [pc, #116]	; (a1b0 <analog_init+0xdc>)
    a13a:	2201      	movs	r2, #1
    a13c:	701a      	strb	r2, [r3, #0]
}
    a13e:	bc30      	pop	{r4, r5}
    a140:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a142:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a144:	6013      	str	r3, [r2, #0]
    a146:	e7e7      	b.n	a118 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a148:	2384      	movs	r3, #132	; 0x84
    a14a:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a14c:	6013      	str	r3, [r2, #0]
    a14e:	e7f3      	b.n	a138 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a150:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a154:	490f      	ldr	r1, [pc, #60]	; (a194 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a156:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a158:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a15a:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a15c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a15e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a160:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a162:	600b      	str	r3, [r1, #0]
    a164:	e7d0      	b.n	a108 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a166:	2219      	movs	r2, #25
    a168:	e7f7      	b.n	a15a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a16a:	2385      	movs	r3, #133	; 0x85
    a16c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a16e:	6013      	str	r3, [r2, #0]
    a170:	e7e2      	b.n	a138 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a172:	2380      	movs	r3, #128	; 0x80
    a174:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a176:	6013      	str	r3, [r2, #0]
    a178:	e7de      	b.n	a138 <analog_init+0x64>
    a17a:	bf00      	nop
    a17c:	40074000 	.word	0x40074000
    a180:	40074001 	.word	0x40074001
    a184:	1fff877c 	.word	0x1fff877c
    a188:	4003b008 	.word	0x4003b008
    a18c:	4003b00c 	.word	0x4003b00c
    a190:	400bb008 	.word	0x400bb008
    a194:	400bb00c 	.word	0x400bb00c
    a198:	1fff96bb 	.word	0x1fff96bb
    a19c:	4003b020 	.word	0x4003b020
    a1a0:	400bb020 	.word	0x400bb020
    a1a4:	1fff877d 	.word	0x1fff877d
    a1a8:	4003b024 	.word	0x4003b024
    a1ac:	400bb024 	.word	0x400bb024
    a1b0:	1fff96ba 	.word	0x1fff96ba

0000a1b4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a1b4:	b4f0      	push	{r4, r5, r6, r7}
    a1b6:	1e4d      	subs	r5, r1, #1
    a1b8:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    a1ba:	2400      	movs	r4, #0
    a1bc:	e000      	b.n	a1c0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a1be:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a1c0:	fbb0 f3f2 	udiv	r3, r0, r2
    a1c4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a1c8:	2809      	cmp	r0, #9
    a1ca:	f100 0730 	add.w	r7, r0, #48	; 0x30
    a1ce:	bf8a      	itet	hi
    a1d0:	3037      	addhi	r0, #55	; 0x37
    a1d2:	b2f8      	uxtbls	r0, r7
    a1d4:	b2c0      	uxtbhi	r0, r0
    a1d6:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    a1da:	4618      	mov	r0, r3
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d1ee      	bne.n	a1be <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a1e0:	190a      	adds	r2, r1, r4
    a1e2:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a1e4:	b14c      	cbz	r4, a1fa <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    a1e6:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    a1e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    a1ec:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a1ee:	3301      	adds	r3, #1
    a1f0:	1ae0      	subs	r0, r4, r3
    a1f2:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a1f4:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a1f8:	dbf5      	blt.n	a1e6 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a1fa:	4608      	mov	r0, r1
    a1fc:	bcf0      	pop	{r4, r5, r6, r7}
    a1fe:	4770      	bx	lr

0000a200 <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
    a200:	b510      	push	{r4, lr}
	if (val >= 0) {
    a202:	1e04      	subs	r4, r0, #0
    a204:	db03      	blt.n	a20e <ltoa+0xe>
	} else {
		buf[0] = '-';
		ultoa(-val, buf + 1, radix);
		return buf;
	}
}
    a206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
    a20a:	f7ff bfd3 	b.w	a1b4 <ultoa>
	} else {
		buf[0] = '-';
    a20e:	232d      	movs	r3, #45	; 0x2d
    a210:	4620      	mov	r0, r4
		ultoa(-val, buf + 1, radix);
    a212:	4240      	negs	r0, r0
    a214:	460c      	mov	r4, r1
char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
	} else {
		buf[0] = '-';
    a216:	f801 3b01 	strb.w	r3, [r1], #1
		ultoa(-val, buf + 1, radix);
    a21a:	f7ff ffcb 	bl	a1b4 <ultoa>
		return buf;
	}
}
    a21e:	4620      	mov	r0, r4
    a220:	bd10      	pop	{r4, pc}
    a222:	bf00      	nop

0000a224 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a224:	4a05      	ldr	r2, [pc, #20]	; (a23c <serial_available+0x18>)
	tail = rx_buffer_tail;
    a226:	4b06      	ldr	r3, [pc, #24]	; (a240 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a228:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a22a:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a22c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    a22e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a230:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    a232:	bf38      	it	cc
    a234:	3040      	addcc	r0, #64	; 0x40
    a236:	1ac0      	subs	r0, r0, r3
}
    a238:	4770      	bx	lr
    a23a:	bf00      	nop
    a23c:	1fff96c0 	.word	0x1fff96c0
    a240:	1fff96c1 	.word	0x1fff96c1

0000a244 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    a244:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a246:	4b38      	ldr	r3, [pc, #224]	; (a328 <uart0_status_isr+0xe4>)
    a248:	791a      	ldrb	r2, [r3, #4]
    a24a:	f012 0f30 	tst.w	r2, #48	; 0x30
    a24e:	d02c      	beq.n	a2aa <uart0_status_isr+0x66>
		__disable_irq();
    a250:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    a252:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a254:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    a258:	2900      	cmp	r1, #0
    a25a:	d03d      	beq.n	a2d8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a25c:	b662      	cpsie	i
			head = rx_buffer_head;
    a25e:	4f33      	ldr	r7, [pc, #204]	; (a32c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a260:	4933      	ldr	r1, [pc, #204]	; (a330 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a262:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a264:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a266:	4e33      	ldr	r6, [pc, #204]	; (a334 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a268:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a26a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    a26c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    a26e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a270:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a272:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a274:	bf28      	it	cs
    a276:	2300      	movcs	r3, #0
				if (newhead != tail) {
    a278:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a27a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a27e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a280:	bf1c      	itt	ne
    a282:	54f1      	strbne	r1, [r6, r3]
    a284:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    a286:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a28a:	d1f0      	bne.n	a26e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a28c:	4b2a      	ldr	r3, [pc, #168]	; (a338 <uart0_status_isr+0xf4>)
    a28e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a290:	b2c2      	uxtb	r2, r0
    a292:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    a294:	b14b      	cbz	r3, a2aa <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a296:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a298:	bf36      	itet	cc
    a29a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a29e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a2a0:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a2a2:	2827      	cmp	r0, #39	; 0x27
    a2a4:	bfc4      	itt	gt
    a2a6:	2201      	movgt	r2, #1
    a2a8:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    a2aa:	491f      	ldr	r1, [pc, #124]	; (a328 <uart0_status_isr+0xe4>)
    a2ac:	78ca      	ldrb	r2, [r1, #3]
    a2ae:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a2b0:	0615      	lsls	r5, r2, #24
    a2b2:	d416      	bmi.n	a2e2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    a2b4:	0652      	lsls	r2, r2, #25
    a2b6:	d50d      	bpl.n	a2d4 <uart0_status_isr+0x90>
    a2b8:	4b1b      	ldr	r3, [pc, #108]	; (a328 <uart0_status_isr+0xe4>)
    a2ba:	791b      	ldrb	r3, [r3, #4]
    a2bc:	065b      	lsls	r3, r3, #25
    a2be:	d509      	bpl.n	a2d4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a2c0:	4b1e      	ldr	r3, [pc, #120]	; (a33c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a2c2:	491f      	ldr	r1, [pc, #124]	; (a340 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a2c4:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a2c6:	2200      	movs	r2, #0
    a2c8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a2ca:	b103      	cbz	r3, a2ce <uart0_status_isr+0x8a>
    a2cc:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    a2ce:	4b16      	ldr	r3, [pc, #88]	; (a328 <uart0_status_isr+0xe4>)
    a2d0:	223c      	movs	r2, #60	; 0x3c
    a2d2:	70da      	strb	r2, [r3, #3]
	}
}
    a2d4:	bcf0      	pop	{r4, r5, r6, r7}
    a2d6:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a2d8:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    a2da:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a2dc:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    a2de:	b662      	cpsie	i
    a2e0:	e7e3      	b.n	a2aa <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a2e2:	790b      	ldrb	r3, [r1, #4]
    a2e4:	061c      	lsls	r4, r3, #24
    a2e6:	d5e5      	bpl.n	a2b4 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    a2e8:	4b16      	ldr	r3, [pc, #88]	; (a344 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    a2ea:	4e17      	ldr	r6, [pc, #92]	; (a348 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a2ec:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a2ee:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a2f0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    a2f2:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    a2f4:	429c      	cmp	r4, r3
    a2f6:	d00e      	beq.n	a316 <uart0_status_isr+0xd2>
    a2f8:	4d14      	ldr	r5, [pc, #80]	; (a34c <uart0_status_isr+0x108>)
    a2fa:	e001      	b.n	a300 <uart0_status_isr+0xbc>
    a2fc:	42a3      	cmp	r3, r4
    a2fe:	d00a      	beq.n	a316 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    a300:	3301      	adds	r3, #1
    a302:	2b40      	cmp	r3, #64	; 0x40
    a304:	bf28      	it	cs
    a306:	2300      	movcs	r3, #0
			avail = UART0_S1;
    a308:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a30a:	5ce8      	ldrb	r0, [r5, r3]
    a30c:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    a30e:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    a310:	7d08      	ldrb	r0, [r1, #20]
    a312:	2807      	cmp	r0, #7
    a314:	d9f2      	bls.n	a2fc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    a316:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a318:	4903      	ldr	r1, [pc, #12]	; (a328 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    a31a:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a31c:	790b      	ldrb	r3, [r1, #4]
    a31e:	0618      	lsls	r0, r3, #24
    a320:	bf44      	itt	mi
    a322:	237c      	movmi	r3, #124	; 0x7c
    a324:	70cb      	strbmi	r3, [r1, #3]
    a326:	e7c5      	b.n	a2b4 <uart0_status_isr+0x70>
    a328:	4006a000 	.word	0x4006a000
    a32c:	1fff96c0 	.word	0x1fff96c0
    a330:	1fff96c1 	.word	0x1fff96c1
    a334:	1fff9704 	.word	0x1fff9704
    a338:	1fff96bc 	.word	0x1fff96bc
    a33c:	1fff9748 	.word	0x1fff9748
    a340:	1fff9744 	.word	0x1fff9744
    a344:	1fff974c 	.word	0x1fff974c
    a348:	1fff9745 	.word	0x1fff9745
    a34c:	1fff96c4 	.word	0x1fff96c4

0000a350 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a350:	4a05      	ldr	r2, [pc, #20]	; (a368 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    a352:	4b06      	ldr	r3, [pc, #24]	; (a36c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a354:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a356:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a358:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    a35a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a35c:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    a35e:	bf38      	it	cc
    a360:	3040      	addcc	r0, #64	; 0x40
    a362:	1ac0      	subs	r0, r0, r3
}
    a364:	4770      	bx	lr
    a366:	bf00      	nop
    a368:	1fff97c0 	.word	0x1fff97c0
    a36c:	1fff9755 	.word	0x1fff9755

0000a370 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a370:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a372:	4b38      	ldr	r3, [pc, #224]	; (a454 <uart1_status_isr+0xe4>)
    a374:	791a      	ldrb	r2, [r3, #4]
    a376:	f012 0f30 	tst.w	r2, #48	; 0x30
    a37a:	d02c      	beq.n	a3d6 <uart1_status_isr+0x66>
		__disable_irq();
    a37c:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    a37e:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a380:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    a384:	2900      	cmp	r1, #0
    a386:	d03d      	beq.n	a404 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a388:	b662      	cpsie	i
			head = rx_buffer_head;
    a38a:	4f33      	ldr	r7, [pc, #204]	; (a458 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a38c:	4933      	ldr	r1, [pc, #204]	; (a45c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a38e:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a390:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a392:	4e33      	ldr	r6, [pc, #204]	; (a460 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a394:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a396:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    a398:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    a39a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a39c:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a39e:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a3a0:	bf28      	it	cs
    a3a2:	2300      	movcs	r3, #0
				if (newhead != tail) {
    a3a4:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a3a6:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a3aa:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a3ac:	bf1c      	itt	ne
    a3ae:	54f1      	strbne	r1, [r6, r3]
    a3b0:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    a3b2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a3b6:	d1f0      	bne.n	a39a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a3b8:	4b2a      	ldr	r3, [pc, #168]	; (a464 <uart1_status_isr+0xf4>)
    a3ba:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a3bc:	b2c2      	uxtb	r2, r0
    a3be:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    a3c0:	b14b      	cbz	r3, a3d6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a3c2:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a3c4:	bf36      	itet	cc
    a3c6:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a3ca:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a3cc:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a3ce:	2827      	cmp	r0, #39	; 0x27
    a3d0:	bfc4      	itt	gt
    a3d2:	2201      	movgt	r2, #1
    a3d4:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    a3d6:	491f      	ldr	r1, [pc, #124]	; (a454 <uart1_status_isr+0xe4>)
    a3d8:	78ca      	ldrb	r2, [r1, #3]
    a3da:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a3dc:	0615      	lsls	r5, r2, #24
    a3de:	d416      	bmi.n	a40e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a3e0:	0652      	lsls	r2, r2, #25
    a3e2:	d50d      	bpl.n	a400 <uart1_status_isr+0x90>
    a3e4:	4b1b      	ldr	r3, [pc, #108]	; (a454 <uart1_status_isr+0xe4>)
    a3e6:	791b      	ldrb	r3, [r3, #4]
    a3e8:	065b      	lsls	r3, r3, #25
    a3ea:	d509      	bpl.n	a400 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a3ec:	4b1e      	ldr	r3, [pc, #120]	; (a468 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a3ee:	491f      	ldr	r1, [pc, #124]	; (a46c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a3f0:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a3f2:	2200      	movs	r2, #0
    a3f4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a3f6:	b103      	cbz	r3, a3fa <uart1_status_isr+0x8a>
    a3f8:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    a3fa:	4b16      	ldr	r3, [pc, #88]	; (a454 <uart1_status_isr+0xe4>)
    a3fc:	223c      	movs	r2, #60	; 0x3c
    a3fe:	70da      	strb	r2, [r3, #3]
	}
}
    a400:	bcf0      	pop	{r4, r5, r6, r7}
    a402:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a404:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    a406:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a408:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    a40a:	b662      	cpsie	i
    a40c:	e7e3      	b.n	a3d6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a40e:	790b      	ldrb	r3, [r1, #4]
    a410:	061c      	lsls	r4, r3, #24
    a412:	d5e5      	bpl.n	a3e0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    a414:	4b16      	ldr	r3, [pc, #88]	; (a470 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    a416:	4e17      	ldr	r6, [pc, #92]	; (a474 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a418:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a41a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a41c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    a41e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    a420:	429c      	cmp	r4, r3
    a422:	d00e      	beq.n	a442 <uart1_status_isr+0xd2>
    a424:	4d14      	ldr	r5, [pc, #80]	; (a478 <uart1_status_isr+0x108>)
    a426:	e001      	b.n	a42c <uart1_status_isr+0xbc>
    a428:	42a3      	cmp	r3, r4
    a42a:	d00a      	beq.n	a442 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    a42c:	3301      	adds	r3, #1
    a42e:	2b28      	cmp	r3, #40	; 0x28
    a430:	bf28      	it	cs
    a432:	2300      	movcs	r3, #0
			avail = UART1_S1;
    a434:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a436:	5ce8      	ldrb	r0, [r5, r3]
    a438:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    a43a:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    a43c:	7d08      	ldrb	r0, [r1, #20]
    a43e:	2807      	cmp	r0, #7
    a440:	d9f2      	bls.n	a428 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    a442:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a444:	4903      	ldr	r1, [pc, #12]	; (a454 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    a446:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a448:	790b      	ldrb	r3, [r1, #4]
    a44a:	0618      	lsls	r0, r3, #24
    a44c:	bf44      	itt	mi
    a44e:	237c      	movmi	r3, #124	; 0x7c
    a450:	70cb      	strbmi	r3, [r1, #3]
    a452:	e7c5      	b.n	a3e0 <uart1_status_isr+0x70>
    a454:	4006b000 	.word	0x4006b000
    a458:	1fff97c0 	.word	0x1fff97c0
    a45c:	1fff9755 	.word	0x1fff9755
    a460:	1fff9780 	.word	0x1fff9780
    a464:	1fff9750 	.word	0x1fff9750
    a468:	1fff97c4 	.word	0x1fff97c4
    a46c:	1fff9754 	.word	0x1fff9754
    a470:	1fff97c8 	.word	0x1fff97c8
    a474:	1fff97c1 	.word	0x1fff97c1
    a478:	1fff9758 	.word	0x1fff9758

0000a47c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a47c:	4a05      	ldr	r2, [pc, #20]	; (a494 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    a47e:	4b06      	ldr	r3, [pc, #24]	; (a498 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a480:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a482:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a484:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    a486:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a488:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    a48a:	bf38      	it	cc
    a48c:	3040      	addcc	r0, #64	; 0x40
    a48e:	1ac0      	subs	r0, r0, r3
}
    a490:	4770      	bx	lr
    a492:	bf00      	nop
    a494:	1fff97d0 	.word	0x1fff97d0
    a498:	1fff97d1 	.word	0x1fff97d1

0000a49c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    a49c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    a49e:	4b2b      	ldr	r3, [pc, #172]	; (a54c <uart2_status_isr+0xb0>)
    a4a0:	791a      	ldrb	r2, [r3, #4]
    a4a2:	0694      	lsls	r4, r2, #26
    a4a4:	d51f      	bpl.n	a4e6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a4a6:	482a      	ldr	r0, [pc, #168]	; (a550 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a4a8:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a4aa:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a4ac:	4929      	ldr	r1, [pc, #164]	; (a554 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a4ae:	3301      	adds	r3, #1
    a4b0:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a4b2:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a4b4:	bfc8      	it	gt
    a4b6:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a4b8:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a4ba:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a4bc:	d003      	beq.n	a4c6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    a4be:	4c26      	ldr	r4, [pc, #152]	; (a558 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    a4c0:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a4c2:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a4c4:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a4c6:	4a25      	ldr	r2, [pc, #148]	; (a55c <uart2_status_isr+0xc0>)
    a4c8:	6811      	ldr	r1, [r2, #0]
    a4ca:	b161      	cbz	r1, a4e6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a4cc:	4a24      	ldr	r2, [pc, #144]	; (a560 <uart2_status_isr+0xc4>)
    a4ce:	7812      	ldrb	r2, [r2, #0]
    a4d0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a4d2:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a4d4:	bf36      	itet	cc
    a4d6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a4da:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a4dc:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a4de:	2b27      	cmp	r3, #39	; 0x27
    a4e0:	bfc4      	itt	gt
    a4e2:	2301      	movgt	r3, #1
    a4e4:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    a4e6:	4a19      	ldr	r2, [pc, #100]	; (a54c <uart2_status_isr+0xb0>)
    a4e8:	78d3      	ldrb	r3, [r2, #3]
    a4ea:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a4ec:	0618      	lsls	r0, r3, #24
    a4ee:	d411      	bmi.n	a514 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    a4f0:	065a      	lsls	r2, r3, #25
    a4f2:	d50d      	bpl.n	a510 <uart2_status_isr+0x74>
    a4f4:	4b15      	ldr	r3, [pc, #84]	; (a54c <uart2_status_isr+0xb0>)
    a4f6:	791b      	ldrb	r3, [r3, #4]
    a4f8:	065b      	lsls	r3, r3, #25
    a4fa:	d509      	bpl.n	a510 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a4fc:	4b19      	ldr	r3, [pc, #100]	; (a564 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a4fe:	491a      	ldr	r1, [pc, #104]	; (a568 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a500:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a502:	2200      	movs	r2, #0
    a504:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a506:	b103      	cbz	r3, a50a <uart2_status_isr+0x6e>
    a508:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    a50a:	4b10      	ldr	r3, [pc, #64]	; (a54c <uart2_status_isr+0xb0>)
    a50c:	222c      	movs	r2, #44	; 0x2c
    a50e:	70da      	strb	r2, [r3, #3]
	}
}
    a510:	bc30      	pop	{r4, r5}
    a512:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a514:	7911      	ldrb	r1, [r2, #4]
    a516:	0609      	lsls	r1, r1, #24
    a518:	d5ea      	bpl.n	a4f0 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    a51a:	4914      	ldr	r1, [pc, #80]	; (a56c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a51c:	4810      	ldr	r0, [pc, #64]	; (a560 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a51e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a520:	7801      	ldrb	r1, [r0, #0]
    a522:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    a524:	428c      	cmp	r4, r1
    a526:	d00d      	beq.n	a544 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    a528:	1c4a      	adds	r2, r1, #1
    a52a:	2a27      	cmp	r2, #39	; 0x27
    a52c:	bf84      	itt	hi
    a52e:	2100      	movhi	r1, #0
    a530:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    a532:	4d0f      	ldr	r5, [pc, #60]	; (a570 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a534:	4c05      	ldr	r4, [pc, #20]	; (a54c <uart2_status_isr+0xb0>)
    a536:	bf98      	it	ls
    a538:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a53a:	5caa      	ldrb	r2, [r5, r2]
    a53c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a53e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a540:	7001      	strb	r1, [r0, #0]
    a542:	e7d5      	b.n	a4f0 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    a544:	216c      	movs	r1, #108	; 0x6c
    a546:	70d1      	strb	r1, [r2, #3]
    a548:	e7d2      	b.n	a4f0 <uart2_status_isr+0x54>
    a54a:	bf00      	nop
    a54c:	4006c000 	.word	0x4006c000
    a550:	1fff97d0 	.word	0x1fff97d0
    a554:	1fff97d1 	.word	0x1fff97d1
    a558:	1fff97fc 	.word	0x1fff97fc
    a55c:	1fff97cc 	.word	0x1fff97cc
    a560:	1fff983d 	.word	0x1fff983d
    a564:	1fff9840 	.word	0x1fff9840
    a568:	1fff983c 	.word	0x1fff983c
    a56c:	1fff9844 	.word	0x1fff9844
    a570:	1fff97d4 	.word	0x1fff97d4

0000a574 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a574:	b570      	push	{r4, r5, r6, lr}
    a576:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a578:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a57a:	4b19      	ldr	r3, [pc, #100]	; (a5e0 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    a57c:	4d19      	ldr	r5, [pc, #100]	; (a5e4 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    a57e:	481a      	ldr	r0, [pc, #104]	; (a5e8 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a580:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    a582:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    a584:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a586:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a588:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    a58a:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a58c:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    a58e:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a590:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a592:	7813      	ldrb	r3, [r2, #0]
    a594:	061b      	lsls	r3, r3, #24
    a596:	d5fc      	bpl.n	a592 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    a598:	4b14      	ldr	r3, [pc, #80]	; (a5ec <usb_init_serialnumber+0x78>)
    a59a:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    a59c:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a59e:	4b14      	ldr	r3, [pc, #80]	; (a5f0 <usb_init_serialnumber+0x7c>)
    a5a0:	4c14      	ldr	r4, [pc, #80]	; (a5f4 <usb_init_serialnumber+0x80>)
    a5a2:	4298      	cmp	r0, r3
    a5a4:	bf98      	it	ls
    a5a6:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    a5aa:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a5ac:	bf98      	it	ls
    a5ae:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    a5b0:	220a      	movs	r2, #10
    a5b2:	f7ff fdff 	bl	a1b4 <ultoa>
    a5b6:	a901      	add	r1, sp, #4
    a5b8:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    a5ba:	2300      	movs	r3, #0
		char c = buf[i];
    a5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
    a5c0:	3301      	adds	r3, #1
		if (!c) break;
    a5c2:	b13a      	cbz	r2, a5d4 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a5c4:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a5c6:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a5ca:	d1f7      	bne.n	a5bc <usb_init_serialnumber+0x48>
    a5cc:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a5ce:	7023      	strb	r3, [r4, #0]
}
    a5d0:	b004      	add	sp, #16
    a5d2:	bd70      	pop	{r4, r5, r6, pc}
    a5d4:	005b      	lsls	r3, r3, #1
    a5d6:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a5d8:	7023      	strb	r3, [r4, #0]
}
    a5da:	b004      	add	sp, #16
    a5dc:	bd70      	pop	{r4, r5, r6, pc}
    a5de:	bf00      	nop
    a5e0:	40020000 	.word	0x40020000
    a5e4:	40020007 	.word	0x40020007
    a5e8:	40020006 	.word	0x40020006
    a5ec:	40020008 	.word	0x40020008
    a5f0:	0098967f 	.word	0x0098967f
    a5f4:	1fff880c 	.word	0x1fff880c

0000a5f8 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    a5f8:	4770      	bx	lr
    a5fa:	bf00      	nop

0000a5fc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    a5fc:	4770      	bx	lr
    a5fe:	bf00      	nop

0000a600 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    a600:	4770      	bx	lr
    a602:	bf00      	nop

0000a604 <__aeabi_drsub>:
    a604:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    a608:	e002      	b.n	a610 <__adddf3>
    a60a:	bf00      	nop

0000a60c <__aeabi_dsub>:
    a60c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000a610 <__adddf3>:
    a610:	b530      	push	{r4, r5, lr}
    a612:	ea4f 0441 	mov.w	r4, r1, lsl #1
    a616:	ea4f 0543 	mov.w	r5, r3, lsl #1
    a61a:	ea94 0f05 	teq	r4, r5
    a61e:	bf08      	it	eq
    a620:	ea90 0f02 	teqeq	r0, r2
    a624:	bf1f      	itttt	ne
    a626:	ea54 0c00 	orrsne.w	ip, r4, r0
    a62a:	ea55 0c02 	orrsne.w	ip, r5, r2
    a62e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    a632:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a636:	f000 80e2 	beq.w	a7fe <__adddf3+0x1ee>
    a63a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    a63e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    a642:	bfb8      	it	lt
    a644:	426d      	neglt	r5, r5
    a646:	dd0c      	ble.n	a662 <__adddf3+0x52>
    a648:	442c      	add	r4, r5
    a64a:	ea80 0202 	eor.w	r2, r0, r2
    a64e:	ea81 0303 	eor.w	r3, r1, r3
    a652:	ea82 0000 	eor.w	r0, r2, r0
    a656:	ea83 0101 	eor.w	r1, r3, r1
    a65a:	ea80 0202 	eor.w	r2, r0, r2
    a65e:	ea81 0303 	eor.w	r3, r1, r3
    a662:	2d36      	cmp	r5, #54	; 0x36
    a664:	bf88      	it	hi
    a666:	bd30      	pophi	{r4, r5, pc}
    a668:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a66c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a670:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    a674:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    a678:	d002      	beq.n	a680 <__adddf3+0x70>
    a67a:	4240      	negs	r0, r0
    a67c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a680:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    a684:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a688:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    a68c:	d002      	beq.n	a694 <__adddf3+0x84>
    a68e:	4252      	negs	r2, r2
    a690:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a694:	ea94 0f05 	teq	r4, r5
    a698:	f000 80a7 	beq.w	a7ea <__adddf3+0x1da>
    a69c:	f1a4 0401 	sub.w	r4, r4, #1
    a6a0:	f1d5 0e20 	rsbs	lr, r5, #32
    a6a4:	db0d      	blt.n	a6c2 <__adddf3+0xb2>
    a6a6:	fa02 fc0e 	lsl.w	ip, r2, lr
    a6aa:	fa22 f205 	lsr.w	r2, r2, r5
    a6ae:	1880      	adds	r0, r0, r2
    a6b0:	f141 0100 	adc.w	r1, r1, #0
    a6b4:	fa03 f20e 	lsl.w	r2, r3, lr
    a6b8:	1880      	adds	r0, r0, r2
    a6ba:	fa43 f305 	asr.w	r3, r3, r5
    a6be:	4159      	adcs	r1, r3
    a6c0:	e00e      	b.n	a6e0 <__adddf3+0xd0>
    a6c2:	f1a5 0520 	sub.w	r5, r5, #32
    a6c6:	f10e 0e20 	add.w	lr, lr, #32
    a6ca:	2a01      	cmp	r2, #1
    a6cc:	fa03 fc0e 	lsl.w	ip, r3, lr
    a6d0:	bf28      	it	cs
    a6d2:	f04c 0c02 	orrcs.w	ip, ip, #2
    a6d6:	fa43 f305 	asr.w	r3, r3, r5
    a6da:	18c0      	adds	r0, r0, r3
    a6dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    a6e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a6e4:	d507      	bpl.n	a6f6 <__adddf3+0xe6>
    a6e6:	f04f 0e00 	mov.w	lr, #0
    a6ea:	f1dc 0c00 	rsbs	ip, ip, #0
    a6ee:	eb7e 0000 	sbcs.w	r0, lr, r0
    a6f2:	eb6e 0101 	sbc.w	r1, lr, r1
    a6f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    a6fa:	d31b      	bcc.n	a734 <__adddf3+0x124>
    a6fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    a700:	d30c      	bcc.n	a71c <__adddf3+0x10c>
    a702:	0849      	lsrs	r1, r1, #1
    a704:	ea5f 0030 	movs.w	r0, r0, rrx
    a708:	ea4f 0c3c 	mov.w	ip, ip, rrx
    a70c:	f104 0401 	add.w	r4, r4, #1
    a710:	ea4f 5244 	mov.w	r2, r4, lsl #21
    a714:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    a718:	f080 809a 	bcs.w	a850 <__adddf3+0x240>
    a71c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    a720:	bf08      	it	eq
    a722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a726:	f150 0000 	adcs.w	r0, r0, #0
    a72a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a72e:	ea41 0105 	orr.w	r1, r1, r5
    a732:	bd30      	pop	{r4, r5, pc}
    a734:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    a738:	4140      	adcs	r0, r0
    a73a:	eb41 0101 	adc.w	r1, r1, r1
    a73e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a742:	f1a4 0401 	sub.w	r4, r4, #1
    a746:	d1e9      	bne.n	a71c <__adddf3+0x10c>
    a748:	f091 0f00 	teq	r1, #0
    a74c:	bf04      	itt	eq
    a74e:	4601      	moveq	r1, r0
    a750:	2000      	moveq	r0, #0
    a752:	fab1 f381 	clz	r3, r1
    a756:	bf08      	it	eq
    a758:	3320      	addeq	r3, #32
    a75a:	f1a3 030b 	sub.w	r3, r3, #11
    a75e:	f1b3 0220 	subs.w	r2, r3, #32
    a762:	da0c      	bge.n	a77e <__adddf3+0x16e>
    a764:	320c      	adds	r2, #12
    a766:	dd08      	ble.n	a77a <__adddf3+0x16a>
    a768:	f102 0c14 	add.w	ip, r2, #20
    a76c:	f1c2 020c 	rsb	r2, r2, #12
    a770:	fa01 f00c 	lsl.w	r0, r1, ip
    a774:	fa21 f102 	lsr.w	r1, r1, r2
    a778:	e00c      	b.n	a794 <__adddf3+0x184>
    a77a:	f102 0214 	add.w	r2, r2, #20
    a77e:	bfd8      	it	le
    a780:	f1c2 0c20 	rsble	ip, r2, #32
    a784:	fa01 f102 	lsl.w	r1, r1, r2
    a788:	fa20 fc0c 	lsr.w	ip, r0, ip
    a78c:	bfdc      	itt	le
    a78e:	ea41 010c 	orrle.w	r1, r1, ip
    a792:	4090      	lslle	r0, r2
    a794:	1ae4      	subs	r4, r4, r3
    a796:	bfa2      	ittt	ge
    a798:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    a79c:	4329      	orrge	r1, r5
    a79e:	bd30      	popge	{r4, r5, pc}
    a7a0:	ea6f 0404 	mvn.w	r4, r4
    a7a4:	3c1f      	subs	r4, #31
    a7a6:	da1c      	bge.n	a7e2 <__adddf3+0x1d2>
    a7a8:	340c      	adds	r4, #12
    a7aa:	dc0e      	bgt.n	a7ca <__adddf3+0x1ba>
    a7ac:	f104 0414 	add.w	r4, r4, #20
    a7b0:	f1c4 0220 	rsb	r2, r4, #32
    a7b4:	fa20 f004 	lsr.w	r0, r0, r4
    a7b8:	fa01 f302 	lsl.w	r3, r1, r2
    a7bc:	ea40 0003 	orr.w	r0, r0, r3
    a7c0:	fa21 f304 	lsr.w	r3, r1, r4
    a7c4:	ea45 0103 	orr.w	r1, r5, r3
    a7c8:	bd30      	pop	{r4, r5, pc}
    a7ca:	f1c4 040c 	rsb	r4, r4, #12
    a7ce:	f1c4 0220 	rsb	r2, r4, #32
    a7d2:	fa20 f002 	lsr.w	r0, r0, r2
    a7d6:	fa01 f304 	lsl.w	r3, r1, r4
    a7da:	ea40 0003 	orr.w	r0, r0, r3
    a7de:	4629      	mov	r1, r5
    a7e0:	bd30      	pop	{r4, r5, pc}
    a7e2:	fa21 f004 	lsr.w	r0, r1, r4
    a7e6:	4629      	mov	r1, r5
    a7e8:	bd30      	pop	{r4, r5, pc}
    a7ea:	f094 0f00 	teq	r4, #0
    a7ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    a7f2:	bf06      	itte	eq
    a7f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    a7f8:	3401      	addeq	r4, #1
    a7fa:	3d01      	subne	r5, #1
    a7fc:	e74e      	b.n	a69c <__adddf3+0x8c>
    a7fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a802:	bf18      	it	ne
    a804:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a808:	d029      	beq.n	a85e <__adddf3+0x24e>
    a80a:	ea94 0f05 	teq	r4, r5
    a80e:	bf08      	it	eq
    a810:	ea90 0f02 	teqeq	r0, r2
    a814:	d005      	beq.n	a822 <__adddf3+0x212>
    a816:	ea54 0c00 	orrs.w	ip, r4, r0
    a81a:	bf04      	itt	eq
    a81c:	4619      	moveq	r1, r3
    a81e:	4610      	moveq	r0, r2
    a820:	bd30      	pop	{r4, r5, pc}
    a822:	ea91 0f03 	teq	r1, r3
    a826:	bf1e      	ittt	ne
    a828:	2100      	movne	r1, #0
    a82a:	2000      	movne	r0, #0
    a82c:	bd30      	popne	{r4, r5, pc}
    a82e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    a832:	d105      	bne.n	a840 <__adddf3+0x230>
    a834:	0040      	lsls	r0, r0, #1
    a836:	4149      	adcs	r1, r1
    a838:	bf28      	it	cs
    a83a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a83e:	bd30      	pop	{r4, r5, pc}
    a840:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    a844:	bf3c      	itt	cc
    a846:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    a84a:	bd30      	popcc	{r4, r5, pc}
    a84c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a850:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    a854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a858:	f04f 0000 	mov.w	r0, #0
    a85c:	bd30      	pop	{r4, r5, pc}
    a85e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a862:	bf1a      	itte	ne
    a864:	4619      	movne	r1, r3
    a866:	4610      	movne	r0, r2
    a868:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    a86c:	bf1c      	itt	ne
    a86e:	460b      	movne	r3, r1
    a870:	4602      	movne	r2, r0
    a872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a876:	bf06      	itte	eq
    a878:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    a87c:	ea91 0f03 	teqeq	r1, r3
    a880:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    a884:	bd30      	pop	{r4, r5, pc}
    a886:	bf00      	nop

0000a888 <__aeabi_ui2d>:
    a888:	f090 0f00 	teq	r0, #0
    a88c:	bf04      	itt	eq
    a88e:	2100      	moveq	r1, #0
    a890:	4770      	bxeq	lr
    a892:	b530      	push	{r4, r5, lr}
    a894:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a898:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a89c:	f04f 0500 	mov.w	r5, #0
    a8a0:	f04f 0100 	mov.w	r1, #0
    a8a4:	e750      	b.n	a748 <__adddf3+0x138>
    a8a6:	bf00      	nop

0000a8a8 <__aeabi_i2d>:
    a8a8:	f090 0f00 	teq	r0, #0
    a8ac:	bf04      	itt	eq
    a8ae:	2100      	moveq	r1, #0
    a8b0:	4770      	bxeq	lr
    a8b2:	b530      	push	{r4, r5, lr}
    a8b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a8b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a8bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    a8c0:	bf48      	it	mi
    a8c2:	4240      	negmi	r0, r0
    a8c4:	f04f 0100 	mov.w	r1, #0
    a8c8:	e73e      	b.n	a748 <__adddf3+0x138>
    a8ca:	bf00      	nop

0000a8cc <__aeabi_f2d>:
    a8cc:	0042      	lsls	r2, r0, #1
    a8ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
    a8d2:	ea4f 0131 	mov.w	r1, r1, rrx
    a8d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    a8da:	bf1f      	itttt	ne
    a8dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    a8e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a8e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    a8e8:	4770      	bxne	lr
    a8ea:	f092 0f00 	teq	r2, #0
    a8ee:	bf14      	ite	ne
    a8f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a8f4:	4770      	bxeq	lr
    a8f6:	b530      	push	{r4, r5, lr}
    a8f8:	f44f 7460 	mov.w	r4, #896	; 0x380
    a8fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a904:	e720      	b.n	a748 <__adddf3+0x138>
    a906:	bf00      	nop

0000a908 <__aeabi_ul2d>:
    a908:	ea50 0201 	orrs.w	r2, r0, r1
    a90c:	bf08      	it	eq
    a90e:	4770      	bxeq	lr
    a910:	b530      	push	{r4, r5, lr}
    a912:	f04f 0500 	mov.w	r5, #0
    a916:	e00a      	b.n	a92e <__aeabi_l2d+0x16>

0000a918 <__aeabi_l2d>:
    a918:	ea50 0201 	orrs.w	r2, r0, r1
    a91c:	bf08      	it	eq
    a91e:	4770      	bxeq	lr
    a920:	b530      	push	{r4, r5, lr}
    a922:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    a926:	d502      	bpl.n	a92e <__aeabi_l2d+0x16>
    a928:	4240      	negs	r0, r0
    a92a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a92e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a932:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a936:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    a93a:	f43f aedc 	beq.w	a6f6 <__adddf3+0xe6>
    a93e:	f04f 0203 	mov.w	r2, #3
    a942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a946:	bf18      	it	ne
    a948:	3203      	addne	r2, #3
    a94a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a94e:	bf18      	it	ne
    a950:	3203      	addne	r2, #3
    a952:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    a956:	f1c2 0320 	rsb	r3, r2, #32
    a95a:	fa00 fc03 	lsl.w	ip, r0, r3
    a95e:	fa20 f002 	lsr.w	r0, r0, r2
    a962:	fa01 fe03 	lsl.w	lr, r1, r3
    a966:	ea40 000e 	orr.w	r0, r0, lr
    a96a:	fa21 f102 	lsr.w	r1, r1, r2
    a96e:	4414      	add	r4, r2
    a970:	e6c1      	b.n	a6f6 <__adddf3+0xe6>
    a972:	bf00      	nop

0000a974 <__aeabi_dmul>:
    a974:	b570      	push	{r4, r5, r6, lr}
    a976:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a97a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    a97e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a982:	bf1d      	ittte	ne
    a984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a988:	ea94 0f0c 	teqne	r4, ip
    a98c:	ea95 0f0c 	teqne	r5, ip
    a990:	f000 f8de 	bleq	ab50 <__aeabi_dmul+0x1dc>
    a994:	442c      	add	r4, r5
    a996:	ea81 0603 	eor.w	r6, r1, r3
    a99a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    a99e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    a9a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    a9a6:	bf18      	it	ne
    a9a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    a9ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a9b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a9b4:	d038      	beq.n	aa28 <__aeabi_dmul+0xb4>
    a9b6:	fba0 ce02 	umull	ip, lr, r0, r2
    a9ba:	f04f 0500 	mov.w	r5, #0
    a9be:	fbe1 e502 	umlal	lr, r5, r1, r2
    a9c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    a9c6:	fbe0 e503 	umlal	lr, r5, r0, r3
    a9ca:	f04f 0600 	mov.w	r6, #0
    a9ce:	fbe1 5603 	umlal	r5, r6, r1, r3
    a9d2:	f09c 0f00 	teq	ip, #0
    a9d6:	bf18      	it	ne
    a9d8:	f04e 0e01 	orrne.w	lr, lr, #1
    a9dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    a9e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    a9e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    a9e8:	d204      	bcs.n	a9f4 <__aeabi_dmul+0x80>
    a9ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    a9ee:	416d      	adcs	r5, r5
    a9f0:	eb46 0606 	adc.w	r6, r6, r6
    a9f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    a9f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    a9fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    aa00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    aa04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    aa08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    aa0c:	bf88      	it	hi
    aa0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    aa12:	d81e      	bhi.n	aa52 <__aeabi_dmul+0xde>
    aa14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    aa18:	bf08      	it	eq
    aa1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    aa1e:	f150 0000 	adcs.w	r0, r0, #0
    aa22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    aa26:	bd70      	pop	{r4, r5, r6, pc}
    aa28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    aa2c:	ea46 0101 	orr.w	r1, r6, r1
    aa30:	ea40 0002 	orr.w	r0, r0, r2
    aa34:	ea81 0103 	eor.w	r1, r1, r3
    aa38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    aa3c:	bfc2      	ittt	gt
    aa3e:	ebd4 050c 	rsbsgt	r5, r4, ip
    aa42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    aa46:	bd70      	popgt	{r4, r5, r6, pc}
    aa48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    aa4c:	f04f 0e00 	mov.w	lr, #0
    aa50:	3c01      	subs	r4, #1
    aa52:	f300 80ab 	bgt.w	abac <__aeabi_dmul+0x238>
    aa56:	f114 0f36 	cmn.w	r4, #54	; 0x36
    aa5a:	bfde      	ittt	le
    aa5c:	2000      	movle	r0, #0
    aa5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    aa62:	bd70      	pople	{r4, r5, r6, pc}
    aa64:	f1c4 0400 	rsb	r4, r4, #0
    aa68:	3c20      	subs	r4, #32
    aa6a:	da35      	bge.n	aad8 <__aeabi_dmul+0x164>
    aa6c:	340c      	adds	r4, #12
    aa6e:	dc1b      	bgt.n	aaa8 <__aeabi_dmul+0x134>
    aa70:	f104 0414 	add.w	r4, r4, #20
    aa74:	f1c4 0520 	rsb	r5, r4, #32
    aa78:	fa00 f305 	lsl.w	r3, r0, r5
    aa7c:	fa20 f004 	lsr.w	r0, r0, r4
    aa80:	fa01 f205 	lsl.w	r2, r1, r5
    aa84:	ea40 0002 	orr.w	r0, r0, r2
    aa88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    aa8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    aa90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    aa94:	fa21 f604 	lsr.w	r6, r1, r4
    aa98:	eb42 0106 	adc.w	r1, r2, r6
    aa9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    aaa0:	bf08      	it	eq
    aaa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    aaa6:	bd70      	pop	{r4, r5, r6, pc}
    aaa8:	f1c4 040c 	rsb	r4, r4, #12
    aaac:	f1c4 0520 	rsb	r5, r4, #32
    aab0:	fa00 f304 	lsl.w	r3, r0, r4
    aab4:	fa20 f005 	lsr.w	r0, r0, r5
    aab8:	fa01 f204 	lsl.w	r2, r1, r4
    aabc:	ea40 0002 	orr.w	r0, r0, r2
    aac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aac4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    aac8:	f141 0100 	adc.w	r1, r1, #0
    aacc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    aad0:	bf08      	it	eq
    aad2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    aad6:	bd70      	pop	{r4, r5, r6, pc}
    aad8:	f1c4 0520 	rsb	r5, r4, #32
    aadc:	fa00 f205 	lsl.w	r2, r0, r5
    aae0:	ea4e 0e02 	orr.w	lr, lr, r2
    aae4:	fa20 f304 	lsr.w	r3, r0, r4
    aae8:	fa01 f205 	lsl.w	r2, r1, r5
    aaec:	ea43 0302 	orr.w	r3, r3, r2
    aaf0:	fa21 f004 	lsr.w	r0, r1, r4
    aaf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aaf8:	fa21 f204 	lsr.w	r2, r1, r4
    aafc:	ea20 0002 	bic.w	r0, r0, r2
    ab00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ab04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ab08:	bf08      	it	eq
    ab0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ab0e:	bd70      	pop	{r4, r5, r6, pc}
    ab10:	f094 0f00 	teq	r4, #0
    ab14:	d10f      	bne.n	ab36 <__aeabi_dmul+0x1c2>
    ab16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ab1a:	0040      	lsls	r0, r0, #1
    ab1c:	eb41 0101 	adc.w	r1, r1, r1
    ab20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ab24:	bf08      	it	eq
    ab26:	3c01      	subeq	r4, #1
    ab28:	d0f7      	beq.n	ab1a <__aeabi_dmul+0x1a6>
    ab2a:	ea41 0106 	orr.w	r1, r1, r6
    ab2e:	f095 0f00 	teq	r5, #0
    ab32:	bf18      	it	ne
    ab34:	4770      	bxne	lr
    ab36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    ab3a:	0052      	lsls	r2, r2, #1
    ab3c:	eb43 0303 	adc.w	r3, r3, r3
    ab40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    ab44:	bf08      	it	eq
    ab46:	3d01      	subeq	r5, #1
    ab48:	d0f7      	beq.n	ab3a <__aeabi_dmul+0x1c6>
    ab4a:	ea43 0306 	orr.w	r3, r3, r6
    ab4e:	4770      	bx	lr
    ab50:	ea94 0f0c 	teq	r4, ip
    ab54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ab58:	bf18      	it	ne
    ab5a:	ea95 0f0c 	teqne	r5, ip
    ab5e:	d00c      	beq.n	ab7a <__aeabi_dmul+0x206>
    ab60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ab64:	bf18      	it	ne
    ab66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ab6a:	d1d1      	bne.n	ab10 <__aeabi_dmul+0x19c>
    ab6c:	ea81 0103 	eor.w	r1, r1, r3
    ab70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ab74:	f04f 0000 	mov.w	r0, #0
    ab78:	bd70      	pop	{r4, r5, r6, pc}
    ab7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ab7e:	bf06      	itte	eq
    ab80:	4610      	moveq	r0, r2
    ab82:	4619      	moveq	r1, r3
    ab84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ab88:	d019      	beq.n	abbe <__aeabi_dmul+0x24a>
    ab8a:	ea94 0f0c 	teq	r4, ip
    ab8e:	d102      	bne.n	ab96 <__aeabi_dmul+0x222>
    ab90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    ab94:	d113      	bne.n	abbe <__aeabi_dmul+0x24a>
    ab96:	ea95 0f0c 	teq	r5, ip
    ab9a:	d105      	bne.n	aba8 <__aeabi_dmul+0x234>
    ab9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    aba0:	bf1c      	itt	ne
    aba2:	4610      	movne	r0, r2
    aba4:	4619      	movne	r1, r3
    aba6:	d10a      	bne.n	abbe <__aeabi_dmul+0x24a>
    aba8:	ea81 0103 	eor.w	r1, r1, r3
    abac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    abb0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    abb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    abb8:	f04f 0000 	mov.w	r0, #0
    abbc:	bd70      	pop	{r4, r5, r6, pc}
    abbe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    abc2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    abc6:	bd70      	pop	{r4, r5, r6, pc}

0000abc8 <__aeabi_ddiv>:
    abc8:	b570      	push	{r4, r5, r6, lr}
    abca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    abce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    abd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    abd6:	bf1d      	ittte	ne
    abd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    abdc:	ea94 0f0c 	teqne	r4, ip
    abe0:	ea95 0f0c 	teqne	r5, ip
    abe4:	f000 f8a7 	bleq	ad36 <__aeabi_ddiv+0x16e>
    abe8:	eba4 0405 	sub.w	r4, r4, r5
    abec:	ea81 0e03 	eor.w	lr, r1, r3
    abf0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    abf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    abf8:	f000 8088 	beq.w	ad0c <__aeabi_ddiv+0x144>
    abfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ac00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ac04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    ac08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    ac0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ac10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    ac14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    ac18:	ea4f 2600 	mov.w	r6, r0, lsl #8
    ac1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ac20:	429d      	cmp	r5, r3
    ac22:	bf08      	it	eq
    ac24:	4296      	cmpeq	r6, r2
    ac26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ac2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ac2e:	d202      	bcs.n	ac36 <__aeabi_ddiv+0x6e>
    ac30:	085b      	lsrs	r3, r3, #1
    ac32:	ea4f 0232 	mov.w	r2, r2, rrx
    ac36:	1ab6      	subs	r6, r6, r2
    ac38:	eb65 0503 	sbc.w	r5, r5, r3
    ac3c:	085b      	lsrs	r3, r3, #1
    ac3e:	ea4f 0232 	mov.w	r2, r2, rrx
    ac42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ac46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ac4a:	ebb6 0e02 	subs.w	lr, r6, r2
    ac4e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac52:	bf22      	ittt	cs
    ac54:	1ab6      	subcs	r6, r6, r2
    ac56:	4675      	movcs	r5, lr
    ac58:	ea40 000c 	orrcs.w	r0, r0, ip
    ac5c:	085b      	lsrs	r3, r3, #1
    ac5e:	ea4f 0232 	mov.w	r2, r2, rrx
    ac62:	ebb6 0e02 	subs.w	lr, r6, r2
    ac66:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac6a:	bf22      	ittt	cs
    ac6c:	1ab6      	subcs	r6, r6, r2
    ac6e:	4675      	movcs	r5, lr
    ac70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ac74:	085b      	lsrs	r3, r3, #1
    ac76:	ea4f 0232 	mov.w	r2, r2, rrx
    ac7a:	ebb6 0e02 	subs.w	lr, r6, r2
    ac7e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac82:	bf22      	ittt	cs
    ac84:	1ab6      	subcs	r6, r6, r2
    ac86:	4675      	movcs	r5, lr
    ac88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ac8c:	085b      	lsrs	r3, r3, #1
    ac8e:	ea4f 0232 	mov.w	r2, r2, rrx
    ac92:	ebb6 0e02 	subs.w	lr, r6, r2
    ac96:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac9a:	bf22      	ittt	cs
    ac9c:	1ab6      	subcs	r6, r6, r2
    ac9e:	4675      	movcs	r5, lr
    aca0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    aca4:	ea55 0e06 	orrs.w	lr, r5, r6
    aca8:	d018      	beq.n	acdc <__aeabi_ddiv+0x114>
    acaa:	ea4f 1505 	mov.w	r5, r5, lsl #4
    acae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    acb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    acb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    acba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    acbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    acc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    acc6:	d1c0      	bne.n	ac4a <__aeabi_ddiv+0x82>
    acc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    accc:	d10b      	bne.n	ace6 <__aeabi_ddiv+0x11e>
    acce:	ea41 0100 	orr.w	r1, r1, r0
    acd2:	f04f 0000 	mov.w	r0, #0
    acd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    acda:	e7b6      	b.n	ac4a <__aeabi_ddiv+0x82>
    acdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ace0:	bf04      	itt	eq
    ace2:	4301      	orreq	r1, r0
    ace4:	2000      	moveq	r0, #0
    ace6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    acea:	bf88      	it	hi
    acec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    acf0:	f63f aeaf 	bhi.w	aa52 <__aeabi_dmul+0xde>
    acf4:	ebb5 0c03 	subs.w	ip, r5, r3
    acf8:	bf04      	itt	eq
    acfa:	ebb6 0c02 	subseq.w	ip, r6, r2
    acfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ad02:	f150 0000 	adcs.w	r0, r0, #0
    ad06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ad0a:	bd70      	pop	{r4, r5, r6, pc}
    ad0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ad10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ad14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ad18:	bfc2      	ittt	gt
    ad1a:	ebd4 050c 	rsbsgt	r5, r4, ip
    ad1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ad22:	bd70      	popgt	{r4, r5, r6, pc}
    ad24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ad28:	f04f 0e00 	mov.w	lr, #0
    ad2c:	3c01      	subs	r4, #1
    ad2e:	e690      	b.n	aa52 <__aeabi_dmul+0xde>
    ad30:	ea45 0e06 	orr.w	lr, r5, r6
    ad34:	e68d      	b.n	aa52 <__aeabi_dmul+0xde>
    ad36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ad3a:	ea94 0f0c 	teq	r4, ip
    ad3e:	bf08      	it	eq
    ad40:	ea95 0f0c 	teqeq	r5, ip
    ad44:	f43f af3b 	beq.w	abbe <__aeabi_dmul+0x24a>
    ad48:	ea94 0f0c 	teq	r4, ip
    ad4c:	d10a      	bne.n	ad64 <__aeabi_ddiv+0x19c>
    ad4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ad52:	f47f af34 	bne.w	abbe <__aeabi_dmul+0x24a>
    ad56:	ea95 0f0c 	teq	r5, ip
    ad5a:	f47f af25 	bne.w	aba8 <__aeabi_dmul+0x234>
    ad5e:	4610      	mov	r0, r2
    ad60:	4619      	mov	r1, r3
    ad62:	e72c      	b.n	abbe <__aeabi_dmul+0x24a>
    ad64:	ea95 0f0c 	teq	r5, ip
    ad68:	d106      	bne.n	ad78 <__aeabi_ddiv+0x1b0>
    ad6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ad6e:	f43f aefd 	beq.w	ab6c <__aeabi_dmul+0x1f8>
    ad72:	4610      	mov	r0, r2
    ad74:	4619      	mov	r1, r3
    ad76:	e722      	b.n	abbe <__aeabi_dmul+0x24a>
    ad78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ad7c:	bf18      	it	ne
    ad7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ad82:	f47f aec5 	bne.w	ab10 <__aeabi_dmul+0x19c>
    ad86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ad8a:	f47f af0d 	bne.w	aba8 <__aeabi_dmul+0x234>
    ad8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ad92:	f47f aeeb 	bne.w	ab6c <__aeabi_dmul+0x1f8>
    ad96:	e712      	b.n	abbe <__aeabi_dmul+0x24a>

0000ad98 <__gedf2>:
    ad98:	f04f 3cff 	mov.w	ip, #4294967295
    ad9c:	e006      	b.n	adac <__cmpdf2+0x4>
    ad9e:	bf00      	nop

0000ada0 <__ledf2>:
    ada0:	f04f 0c01 	mov.w	ip, #1
    ada4:	e002      	b.n	adac <__cmpdf2+0x4>
    ada6:	bf00      	nop

0000ada8 <__cmpdf2>:
    ada8:	f04f 0c01 	mov.w	ip, #1
    adac:	f84d cd04 	str.w	ip, [sp, #-4]!
    adb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    adb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    adb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    adbc:	bf18      	it	ne
    adbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    adc2:	d01b      	beq.n	adfc <__cmpdf2+0x54>
    adc4:	b001      	add	sp, #4
    adc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    adca:	bf0c      	ite	eq
    adcc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    add0:	ea91 0f03 	teqne	r1, r3
    add4:	bf02      	ittt	eq
    add6:	ea90 0f02 	teqeq	r0, r2
    adda:	2000      	moveq	r0, #0
    addc:	4770      	bxeq	lr
    adde:	f110 0f00 	cmn.w	r0, #0
    ade2:	ea91 0f03 	teq	r1, r3
    ade6:	bf58      	it	pl
    ade8:	4299      	cmppl	r1, r3
    adea:	bf08      	it	eq
    adec:	4290      	cmpeq	r0, r2
    adee:	bf2c      	ite	cs
    adf0:	17d8      	asrcs	r0, r3, #31
    adf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    adf6:	f040 0001 	orr.w	r0, r0, #1
    adfa:	4770      	bx	lr
    adfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ae00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ae04:	d102      	bne.n	ae0c <__cmpdf2+0x64>
    ae06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    ae0a:	d107      	bne.n	ae1c <__cmpdf2+0x74>
    ae0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ae10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ae14:	d1d6      	bne.n	adc4 <__cmpdf2+0x1c>
    ae16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ae1a:	d0d3      	beq.n	adc4 <__cmpdf2+0x1c>
    ae1c:	f85d 0b04 	ldr.w	r0, [sp], #4
    ae20:	4770      	bx	lr
    ae22:	bf00      	nop

0000ae24 <__aeabi_cdrcmple>:
    ae24:	4684      	mov	ip, r0
    ae26:	4610      	mov	r0, r2
    ae28:	4662      	mov	r2, ip
    ae2a:	468c      	mov	ip, r1
    ae2c:	4619      	mov	r1, r3
    ae2e:	4663      	mov	r3, ip
    ae30:	e000      	b.n	ae34 <__aeabi_cdcmpeq>
    ae32:	bf00      	nop

0000ae34 <__aeabi_cdcmpeq>:
    ae34:	b501      	push	{r0, lr}
    ae36:	f7ff ffb7 	bl	ada8 <__cmpdf2>
    ae3a:	2800      	cmp	r0, #0
    ae3c:	bf48      	it	mi
    ae3e:	f110 0f00 	cmnmi.w	r0, #0
    ae42:	bd01      	pop	{r0, pc}

0000ae44 <__aeabi_dcmpeq>:
    ae44:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae48:	f7ff fff4 	bl	ae34 <__aeabi_cdcmpeq>
    ae4c:	bf0c      	ite	eq
    ae4e:	2001      	moveq	r0, #1
    ae50:	2000      	movne	r0, #0
    ae52:	f85d fb08 	ldr.w	pc, [sp], #8
    ae56:	bf00      	nop

0000ae58 <__aeabi_dcmplt>:
    ae58:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae5c:	f7ff ffea 	bl	ae34 <__aeabi_cdcmpeq>
    ae60:	bf34      	ite	cc
    ae62:	2001      	movcc	r0, #1
    ae64:	2000      	movcs	r0, #0
    ae66:	f85d fb08 	ldr.w	pc, [sp], #8
    ae6a:	bf00      	nop

0000ae6c <__aeabi_dcmple>:
    ae6c:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae70:	f7ff ffe0 	bl	ae34 <__aeabi_cdcmpeq>
    ae74:	bf94      	ite	ls
    ae76:	2001      	movls	r0, #1
    ae78:	2000      	movhi	r0, #0
    ae7a:	f85d fb08 	ldr.w	pc, [sp], #8
    ae7e:	bf00      	nop

0000ae80 <__aeabi_dcmpge>:
    ae80:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae84:	f7ff ffce 	bl	ae24 <__aeabi_cdrcmple>
    ae88:	bf94      	ite	ls
    ae8a:	2001      	movls	r0, #1
    ae8c:	2000      	movhi	r0, #0
    ae8e:	f85d fb08 	ldr.w	pc, [sp], #8
    ae92:	bf00      	nop

0000ae94 <__aeabi_dcmpgt>:
    ae94:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae98:	f7ff ffc4 	bl	ae24 <__aeabi_cdrcmple>
    ae9c:	bf34      	ite	cc
    ae9e:	2001      	movcc	r0, #1
    aea0:	2000      	movcs	r0, #0
    aea2:	f85d fb08 	ldr.w	pc, [sp], #8
    aea6:	bf00      	nop

0000aea8 <__aeabi_dcmpun>:
    aea8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    aeac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    aeb0:	d102      	bne.n	aeb8 <__aeabi_dcmpun+0x10>
    aeb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    aeb6:	d10a      	bne.n	aece <__aeabi_dcmpun+0x26>
    aeb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    aebc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    aec0:	d102      	bne.n	aec8 <__aeabi_dcmpun+0x20>
    aec2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    aec6:	d102      	bne.n	aece <__aeabi_dcmpun+0x26>
    aec8:	f04f 0000 	mov.w	r0, #0
    aecc:	4770      	bx	lr
    aece:	f04f 0001 	mov.w	r0, #1
    aed2:	4770      	bx	lr

0000aed4 <__aeabi_atexit>:
    aed4:	460b      	mov	r3, r1
    aed6:	4601      	mov	r1, r0
    aed8:	4618      	mov	r0, r3
    aeda:	f000 b801 	b.w	aee0 <__cxa_atexit>
    aede:	bf00      	nop

0000aee0 <__cxa_atexit>:
    aee0:	4613      	mov	r3, r2
    aee2:	460a      	mov	r2, r1
    aee4:	4601      	mov	r1, r0
    aee6:	2002      	movs	r0, #2
    aee8:	f001 b804 	b.w	bef4 <__register_exitproc>

0000aeec <__errno>:
    aeec:	4b01      	ldr	r3, [pc, #4]	; (aef4 <__errno+0x8>)
    aeee:	6818      	ldr	r0, [r3, #0]
    aef0:	4770      	bx	lr
    aef2:	bf00      	nop
    aef4:	1fff8c50 	.word	0x1fff8c50

0000aef8 <__libc_init_array>:
    aef8:	b570      	push	{r4, r5, r6, lr}
    aefa:	4e0f      	ldr	r6, [pc, #60]	; (af38 <__libc_init_array+0x40>)
    aefc:	4d0f      	ldr	r5, [pc, #60]	; (af3c <__libc_init_array+0x44>)
    aefe:	1b76      	subs	r6, r6, r5
    af00:	10b6      	asrs	r6, r6, #2
    af02:	bf18      	it	ne
    af04:	2400      	movne	r4, #0
    af06:	d005      	beq.n	af14 <__libc_init_array+0x1c>
    af08:	3401      	adds	r4, #1
    af0a:	f855 3b04 	ldr.w	r3, [r5], #4
    af0e:	4798      	blx	r3
    af10:	42a6      	cmp	r6, r4
    af12:	d1f9      	bne.n	af08 <__libc_init_array+0x10>
    af14:	4e0a      	ldr	r6, [pc, #40]	; (af40 <__libc_init_array+0x48>)
    af16:	4d0b      	ldr	r5, [pc, #44]	; (af44 <__libc_init_array+0x4c>)
    af18:	1b76      	subs	r6, r6, r5
    af1a:	f005 ff0d 	bl	10d38 <_init>
    af1e:	10b6      	asrs	r6, r6, #2
    af20:	bf18      	it	ne
    af22:	2400      	movne	r4, #0
    af24:	d006      	beq.n	af34 <__libc_init_array+0x3c>
    af26:	3401      	adds	r4, #1
    af28:	f855 3b04 	ldr.w	r3, [r5], #4
    af2c:	4798      	blx	r3
    af2e:	42a6      	cmp	r6, r4
    af30:	d1f9      	bne.n	af26 <__libc_init_array+0x2e>
    af32:	bd70      	pop	{r4, r5, r6, pc}
    af34:	bd70      	pop	{r4, r5, r6, pc}
    af36:	bf00      	nop
    af38:	00010d44 	.word	0x00010d44
    af3c:	00010d44 	.word	0x00010d44
    af40:	00010d68 	.word	0x00010d68
    af44:	00010d44 	.word	0x00010d44

0000af48 <malloc>:
    af48:	4b02      	ldr	r3, [pc, #8]	; (af54 <malloc+0xc>)
    af4a:	4601      	mov	r1, r0
    af4c:	6818      	ldr	r0, [r3, #0]
    af4e:	f000 b80b 	b.w	af68 <_malloc_r>
    af52:	bf00      	nop
    af54:	1fff8c50 	.word	0x1fff8c50

0000af58 <free>:
    af58:	4b02      	ldr	r3, [pc, #8]	; (af64 <free+0xc>)
    af5a:	4601      	mov	r1, r0
    af5c:	6818      	ldr	r0, [r3, #0]
    af5e:	f001 b88d 	b.w	c07c <_free_r>
    af62:	bf00      	nop
    af64:	1fff8c50 	.word	0x1fff8c50

0000af68 <_malloc_r>:
    af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af6c:	f101 050b 	add.w	r5, r1, #11
    af70:	2d16      	cmp	r5, #22
    af72:	b083      	sub	sp, #12
    af74:	4606      	mov	r6, r0
    af76:	f240 809f 	bls.w	b0b8 <_malloc_r+0x150>
    af7a:	f035 0507 	bics.w	r5, r5, #7
    af7e:	f100 80bf 	bmi.w	b100 <_malloc_r+0x198>
    af82:	42a9      	cmp	r1, r5
    af84:	f200 80bc 	bhi.w	b100 <_malloc_r+0x198>
    af88:	f000 fba0 	bl	b6cc <__malloc_lock>
    af8c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    af90:	f0c0 829c 	bcc.w	b4cc <_malloc_r+0x564>
    af94:	0a6b      	lsrs	r3, r5, #9
    af96:	f000 80ba 	beq.w	b10e <_malloc_r+0x1a6>
    af9a:	2b04      	cmp	r3, #4
    af9c:	f200 8183 	bhi.w	b2a6 <_malloc_r+0x33e>
    afa0:	09a8      	lsrs	r0, r5, #6
    afa2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    afa6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    afaa:	3038      	adds	r0, #56	; 0x38
    afac:	4fc4      	ldr	r7, [pc, #784]	; (b2c0 <_malloc_r+0x358>)
    afae:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    afb2:	f1a3 0108 	sub.w	r1, r3, #8
    afb6:	685c      	ldr	r4, [r3, #4]
    afb8:	42a1      	cmp	r1, r4
    afba:	d107      	bne.n	afcc <_malloc_r+0x64>
    afbc:	e0ac      	b.n	b118 <_malloc_r+0x1b0>
    afbe:	2a00      	cmp	r2, #0
    afc0:	f280 80ac 	bge.w	b11c <_malloc_r+0x1b4>
    afc4:	68e4      	ldr	r4, [r4, #12]
    afc6:	42a1      	cmp	r1, r4
    afc8:	f000 80a6 	beq.w	b118 <_malloc_r+0x1b0>
    afcc:	6863      	ldr	r3, [r4, #4]
    afce:	f023 0303 	bic.w	r3, r3, #3
    afd2:	1b5a      	subs	r2, r3, r5
    afd4:	2a0f      	cmp	r2, #15
    afd6:	ddf2      	ble.n	afbe <_malloc_r+0x56>
    afd8:	49b9      	ldr	r1, [pc, #740]	; (b2c0 <_malloc_r+0x358>)
    afda:	693c      	ldr	r4, [r7, #16]
    afdc:	f101 0e08 	add.w	lr, r1, #8
    afe0:	4574      	cmp	r4, lr
    afe2:	f000 81b3 	beq.w	b34c <_malloc_r+0x3e4>
    afe6:	6863      	ldr	r3, [r4, #4]
    afe8:	f023 0303 	bic.w	r3, r3, #3
    afec:	1b5a      	subs	r2, r3, r5
    afee:	2a0f      	cmp	r2, #15
    aff0:	f300 8199 	bgt.w	b326 <_malloc_r+0x3be>
    aff4:	2a00      	cmp	r2, #0
    aff6:	f8c1 e014 	str.w	lr, [r1, #20]
    affa:	f8c1 e010 	str.w	lr, [r1, #16]
    affe:	f280 809e 	bge.w	b13e <_malloc_r+0x1d6>
    b002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b006:	f080 8167 	bcs.w	b2d8 <_malloc_r+0x370>
    b00a:	08db      	lsrs	r3, r3, #3
    b00c:	f103 0c01 	add.w	ip, r3, #1
    b010:	2201      	movs	r2, #1
    b012:	109b      	asrs	r3, r3, #2
    b014:	fa02 f303 	lsl.w	r3, r2, r3
    b018:	684a      	ldr	r2, [r1, #4]
    b01a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    b01e:	f8c4 8008 	str.w	r8, [r4, #8]
    b022:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    b026:	431a      	orrs	r2, r3
    b028:	f1a9 0308 	sub.w	r3, r9, #8
    b02c:	60e3      	str	r3, [r4, #12]
    b02e:	604a      	str	r2, [r1, #4]
    b030:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    b034:	f8c8 400c 	str.w	r4, [r8, #12]
    b038:	1083      	asrs	r3, r0, #2
    b03a:	2401      	movs	r4, #1
    b03c:	409c      	lsls	r4, r3
    b03e:	4294      	cmp	r4, r2
    b040:	f200 808a 	bhi.w	b158 <_malloc_r+0x1f0>
    b044:	4214      	tst	r4, r2
    b046:	d106      	bne.n	b056 <_malloc_r+0xee>
    b048:	f020 0003 	bic.w	r0, r0, #3
    b04c:	0064      	lsls	r4, r4, #1
    b04e:	4214      	tst	r4, r2
    b050:	f100 0004 	add.w	r0, r0, #4
    b054:	d0fa      	beq.n	b04c <_malloc_r+0xe4>
    b056:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    b05a:	46cc      	mov	ip, r9
    b05c:	4680      	mov	r8, r0
    b05e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    b062:	458c      	cmp	ip, r1
    b064:	d107      	bne.n	b076 <_malloc_r+0x10e>
    b066:	e173      	b.n	b350 <_malloc_r+0x3e8>
    b068:	2a00      	cmp	r2, #0
    b06a:	f280 8181 	bge.w	b370 <_malloc_r+0x408>
    b06e:	68c9      	ldr	r1, [r1, #12]
    b070:	458c      	cmp	ip, r1
    b072:	f000 816d 	beq.w	b350 <_malloc_r+0x3e8>
    b076:	684b      	ldr	r3, [r1, #4]
    b078:	f023 0303 	bic.w	r3, r3, #3
    b07c:	1b5a      	subs	r2, r3, r5
    b07e:	2a0f      	cmp	r2, #15
    b080:	ddf2      	ble.n	b068 <_malloc_r+0x100>
    b082:	460c      	mov	r4, r1
    b084:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    b088:	f854 8f08 	ldr.w	r8, [r4, #8]!
    b08c:	194b      	adds	r3, r1, r5
    b08e:	f045 0501 	orr.w	r5, r5, #1
    b092:	604d      	str	r5, [r1, #4]
    b094:	f042 0101 	orr.w	r1, r2, #1
    b098:	f8c8 c00c 	str.w	ip, [r8, #12]
    b09c:	4630      	mov	r0, r6
    b09e:	f8cc 8008 	str.w	r8, [ip, #8]
    b0a2:	617b      	str	r3, [r7, #20]
    b0a4:	613b      	str	r3, [r7, #16]
    b0a6:	f8c3 e00c 	str.w	lr, [r3, #12]
    b0aa:	f8c3 e008 	str.w	lr, [r3, #8]
    b0ae:	6059      	str	r1, [r3, #4]
    b0b0:	509a      	str	r2, [r3, r2]
    b0b2:	f000 fb0d 	bl	b6d0 <__malloc_unlock>
    b0b6:	e01f      	b.n	b0f8 <_malloc_r+0x190>
    b0b8:	2910      	cmp	r1, #16
    b0ba:	d821      	bhi.n	b100 <_malloc_r+0x198>
    b0bc:	f000 fb06 	bl	b6cc <__malloc_lock>
    b0c0:	2510      	movs	r5, #16
    b0c2:	2306      	movs	r3, #6
    b0c4:	2002      	movs	r0, #2
    b0c6:	4f7e      	ldr	r7, [pc, #504]	; (b2c0 <_malloc_r+0x358>)
    b0c8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    b0cc:	f1a3 0208 	sub.w	r2, r3, #8
    b0d0:	685c      	ldr	r4, [r3, #4]
    b0d2:	4294      	cmp	r4, r2
    b0d4:	f000 8145 	beq.w	b362 <_malloc_r+0x3fa>
    b0d8:	6863      	ldr	r3, [r4, #4]
    b0da:	68e1      	ldr	r1, [r4, #12]
    b0dc:	68a5      	ldr	r5, [r4, #8]
    b0de:	f023 0303 	bic.w	r3, r3, #3
    b0e2:	4423      	add	r3, r4
    b0e4:	4630      	mov	r0, r6
    b0e6:	685a      	ldr	r2, [r3, #4]
    b0e8:	60e9      	str	r1, [r5, #12]
    b0ea:	f042 0201 	orr.w	r2, r2, #1
    b0ee:	608d      	str	r5, [r1, #8]
    b0f0:	605a      	str	r2, [r3, #4]
    b0f2:	f000 faed 	bl	b6d0 <__malloc_unlock>
    b0f6:	3408      	adds	r4, #8
    b0f8:	4620      	mov	r0, r4
    b0fa:	b003      	add	sp, #12
    b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b100:	2400      	movs	r4, #0
    b102:	230c      	movs	r3, #12
    b104:	4620      	mov	r0, r4
    b106:	6033      	str	r3, [r6, #0]
    b108:	b003      	add	sp, #12
    b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b10e:	2380      	movs	r3, #128	; 0x80
    b110:	f04f 0e40 	mov.w	lr, #64	; 0x40
    b114:	203f      	movs	r0, #63	; 0x3f
    b116:	e749      	b.n	afac <_malloc_r+0x44>
    b118:	4670      	mov	r0, lr
    b11a:	e75d      	b.n	afd8 <_malloc_r+0x70>
    b11c:	4423      	add	r3, r4
    b11e:	68e1      	ldr	r1, [r4, #12]
    b120:	685a      	ldr	r2, [r3, #4]
    b122:	68a5      	ldr	r5, [r4, #8]
    b124:	f042 0201 	orr.w	r2, r2, #1
    b128:	60e9      	str	r1, [r5, #12]
    b12a:	4630      	mov	r0, r6
    b12c:	608d      	str	r5, [r1, #8]
    b12e:	605a      	str	r2, [r3, #4]
    b130:	f000 face 	bl	b6d0 <__malloc_unlock>
    b134:	3408      	adds	r4, #8
    b136:	4620      	mov	r0, r4
    b138:	b003      	add	sp, #12
    b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b13e:	4423      	add	r3, r4
    b140:	4630      	mov	r0, r6
    b142:	685a      	ldr	r2, [r3, #4]
    b144:	f042 0201 	orr.w	r2, r2, #1
    b148:	605a      	str	r2, [r3, #4]
    b14a:	f000 fac1 	bl	b6d0 <__malloc_unlock>
    b14e:	3408      	adds	r4, #8
    b150:	4620      	mov	r0, r4
    b152:	b003      	add	sp, #12
    b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b158:	68bc      	ldr	r4, [r7, #8]
    b15a:	6863      	ldr	r3, [r4, #4]
    b15c:	f023 0803 	bic.w	r8, r3, #3
    b160:	45a8      	cmp	r8, r5
    b162:	d304      	bcc.n	b16e <_malloc_r+0x206>
    b164:	ebc5 0308 	rsb	r3, r5, r8
    b168:	2b0f      	cmp	r3, #15
    b16a:	f300 808c 	bgt.w	b286 <_malloc_r+0x31e>
    b16e:	4b55      	ldr	r3, [pc, #340]	; (b2c4 <_malloc_r+0x35c>)
    b170:	f8df 9160 	ldr.w	r9, [pc, #352]	; b2d4 <_malloc_r+0x36c>
    b174:	681a      	ldr	r2, [r3, #0]
    b176:	f8d9 3000 	ldr.w	r3, [r9]
    b17a:	3301      	adds	r3, #1
    b17c:	442a      	add	r2, r5
    b17e:	eb04 0a08 	add.w	sl, r4, r8
    b182:	f000 8160 	beq.w	b446 <_malloc_r+0x4de>
    b186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    b18a:	320f      	adds	r2, #15
    b18c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    b190:	f022 020f 	bic.w	r2, r2, #15
    b194:	4611      	mov	r1, r2
    b196:	4630      	mov	r0, r6
    b198:	9201      	str	r2, [sp, #4]
    b19a:	f000 fc93 	bl	bac4 <_sbrk_r>
    b19e:	f1b0 3fff 	cmp.w	r0, #4294967295
    b1a2:	4683      	mov	fp, r0
    b1a4:	9a01      	ldr	r2, [sp, #4]
    b1a6:	f000 8158 	beq.w	b45a <_malloc_r+0x4f2>
    b1aa:	4582      	cmp	sl, r0
    b1ac:	f200 80fc 	bhi.w	b3a8 <_malloc_r+0x440>
    b1b0:	4b45      	ldr	r3, [pc, #276]	; (b2c8 <_malloc_r+0x360>)
    b1b2:	6819      	ldr	r1, [r3, #0]
    b1b4:	45da      	cmp	sl, fp
    b1b6:	4411      	add	r1, r2
    b1b8:	6019      	str	r1, [r3, #0]
    b1ba:	f000 8153 	beq.w	b464 <_malloc_r+0x4fc>
    b1be:	f8d9 0000 	ldr.w	r0, [r9]
    b1c2:	f8df e110 	ldr.w	lr, [pc, #272]	; b2d4 <_malloc_r+0x36c>
    b1c6:	3001      	adds	r0, #1
    b1c8:	bf1b      	ittet	ne
    b1ca:	ebca 0a0b 	rsbne	sl, sl, fp
    b1ce:	4451      	addne	r1, sl
    b1d0:	f8ce b000 	streq.w	fp, [lr]
    b1d4:	6019      	strne	r1, [r3, #0]
    b1d6:	f01b 0107 	ands.w	r1, fp, #7
    b1da:	f000 8117 	beq.w	b40c <_malloc_r+0x4a4>
    b1de:	f1c1 0008 	rsb	r0, r1, #8
    b1e2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    b1e6:	4483      	add	fp, r0
    b1e8:	3108      	adds	r1, #8
    b1ea:	445a      	add	r2, fp
    b1ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
    b1f0:	ebc2 0901 	rsb	r9, r2, r1
    b1f4:	4649      	mov	r1, r9
    b1f6:	4630      	mov	r0, r6
    b1f8:	9301      	str	r3, [sp, #4]
    b1fa:	f000 fc63 	bl	bac4 <_sbrk_r>
    b1fe:	1c43      	adds	r3, r0, #1
    b200:	9b01      	ldr	r3, [sp, #4]
    b202:	f000 813f 	beq.w	b484 <_malloc_r+0x51c>
    b206:	ebcb 0200 	rsb	r2, fp, r0
    b20a:	444a      	add	r2, r9
    b20c:	f042 0201 	orr.w	r2, r2, #1
    b210:	6819      	ldr	r1, [r3, #0]
    b212:	f8c7 b008 	str.w	fp, [r7, #8]
    b216:	4449      	add	r1, r9
    b218:	42bc      	cmp	r4, r7
    b21a:	f8cb 2004 	str.w	r2, [fp, #4]
    b21e:	6019      	str	r1, [r3, #0]
    b220:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b2c8 <_malloc_r+0x360>
    b224:	d016      	beq.n	b254 <_malloc_r+0x2ec>
    b226:	f1b8 0f0f 	cmp.w	r8, #15
    b22a:	f240 80fd 	bls.w	b428 <_malloc_r+0x4c0>
    b22e:	6862      	ldr	r2, [r4, #4]
    b230:	f1a8 030c 	sub.w	r3, r8, #12
    b234:	f023 0307 	bic.w	r3, r3, #7
    b238:	18e0      	adds	r0, r4, r3
    b23a:	f002 0201 	and.w	r2, r2, #1
    b23e:	f04f 0e05 	mov.w	lr, #5
    b242:	431a      	orrs	r2, r3
    b244:	2b0f      	cmp	r3, #15
    b246:	6062      	str	r2, [r4, #4]
    b248:	f8c0 e004 	str.w	lr, [r0, #4]
    b24c:	f8c0 e008 	str.w	lr, [r0, #8]
    b250:	f200 811c 	bhi.w	b48c <_malloc_r+0x524>
    b254:	4b1d      	ldr	r3, [pc, #116]	; (b2cc <_malloc_r+0x364>)
    b256:	68bc      	ldr	r4, [r7, #8]
    b258:	681a      	ldr	r2, [r3, #0]
    b25a:	4291      	cmp	r1, r2
    b25c:	bf88      	it	hi
    b25e:	6019      	strhi	r1, [r3, #0]
    b260:	4b1b      	ldr	r3, [pc, #108]	; (b2d0 <_malloc_r+0x368>)
    b262:	681a      	ldr	r2, [r3, #0]
    b264:	4291      	cmp	r1, r2
    b266:	6862      	ldr	r2, [r4, #4]
    b268:	bf88      	it	hi
    b26a:	6019      	strhi	r1, [r3, #0]
    b26c:	f022 0203 	bic.w	r2, r2, #3
    b270:	4295      	cmp	r5, r2
    b272:	eba2 0305 	sub.w	r3, r2, r5
    b276:	d801      	bhi.n	b27c <_malloc_r+0x314>
    b278:	2b0f      	cmp	r3, #15
    b27a:	dc04      	bgt.n	b286 <_malloc_r+0x31e>
    b27c:	4630      	mov	r0, r6
    b27e:	f000 fa27 	bl	b6d0 <__malloc_unlock>
    b282:	2400      	movs	r4, #0
    b284:	e738      	b.n	b0f8 <_malloc_r+0x190>
    b286:	1962      	adds	r2, r4, r5
    b288:	f043 0301 	orr.w	r3, r3, #1
    b28c:	f045 0501 	orr.w	r5, r5, #1
    b290:	6065      	str	r5, [r4, #4]
    b292:	4630      	mov	r0, r6
    b294:	60ba      	str	r2, [r7, #8]
    b296:	6053      	str	r3, [r2, #4]
    b298:	f000 fa1a 	bl	b6d0 <__malloc_unlock>
    b29c:	3408      	adds	r4, #8
    b29e:	4620      	mov	r0, r4
    b2a0:	b003      	add	sp, #12
    b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2a6:	2b14      	cmp	r3, #20
    b2a8:	d971      	bls.n	b38e <_malloc_r+0x426>
    b2aa:	2b54      	cmp	r3, #84	; 0x54
    b2ac:	f200 80a4 	bhi.w	b3f8 <_malloc_r+0x490>
    b2b0:	0b28      	lsrs	r0, r5, #12
    b2b2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    b2b6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b2ba:	306e      	adds	r0, #110	; 0x6e
    b2bc:	e676      	b.n	afac <_malloc_r+0x44>
    b2be:	bf00      	nop
    b2c0:	1fff8dc0 	.word	0x1fff8dc0
    b2c4:	1fff9850 	.word	0x1fff9850
    b2c8:	1fff9854 	.word	0x1fff9854
    b2cc:	1fff984c 	.word	0x1fff984c
    b2d0:	1fff9848 	.word	0x1fff9848
    b2d4:	1fff91cc 	.word	0x1fff91cc
    b2d8:	0a5a      	lsrs	r2, r3, #9
    b2da:	2a04      	cmp	r2, #4
    b2dc:	d95e      	bls.n	b39c <_malloc_r+0x434>
    b2de:	2a14      	cmp	r2, #20
    b2e0:	f200 80b3 	bhi.w	b44a <_malloc_r+0x4e2>
    b2e4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    b2e8:	0049      	lsls	r1, r1, #1
    b2ea:	325b      	adds	r2, #91	; 0x5b
    b2ec:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    b2f0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    b2f4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; b4d4 <_malloc_r+0x56c>
    b2f8:	f1ac 0c08 	sub.w	ip, ip, #8
    b2fc:	458c      	cmp	ip, r1
    b2fe:	f000 8088 	beq.w	b412 <_malloc_r+0x4aa>
    b302:	684a      	ldr	r2, [r1, #4]
    b304:	f022 0203 	bic.w	r2, r2, #3
    b308:	4293      	cmp	r3, r2
    b30a:	d202      	bcs.n	b312 <_malloc_r+0x3aa>
    b30c:	6889      	ldr	r1, [r1, #8]
    b30e:	458c      	cmp	ip, r1
    b310:	d1f7      	bne.n	b302 <_malloc_r+0x39a>
    b312:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    b316:	687a      	ldr	r2, [r7, #4]
    b318:	f8c4 c00c 	str.w	ip, [r4, #12]
    b31c:	60a1      	str	r1, [r4, #8]
    b31e:	f8cc 4008 	str.w	r4, [ip, #8]
    b322:	60cc      	str	r4, [r1, #12]
    b324:	e688      	b.n	b038 <_malloc_r+0xd0>
    b326:	1963      	adds	r3, r4, r5
    b328:	f042 0701 	orr.w	r7, r2, #1
    b32c:	f045 0501 	orr.w	r5, r5, #1
    b330:	6065      	str	r5, [r4, #4]
    b332:	4630      	mov	r0, r6
    b334:	614b      	str	r3, [r1, #20]
    b336:	610b      	str	r3, [r1, #16]
    b338:	f8c3 e00c 	str.w	lr, [r3, #12]
    b33c:	f8c3 e008 	str.w	lr, [r3, #8]
    b340:	605f      	str	r7, [r3, #4]
    b342:	509a      	str	r2, [r3, r2]
    b344:	3408      	adds	r4, #8
    b346:	f000 f9c3 	bl	b6d0 <__malloc_unlock>
    b34a:	e6d5      	b.n	b0f8 <_malloc_r+0x190>
    b34c:	684a      	ldr	r2, [r1, #4]
    b34e:	e673      	b.n	b038 <_malloc_r+0xd0>
    b350:	f108 0801 	add.w	r8, r8, #1
    b354:	f018 0f03 	tst.w	r8, #3
    b358:	f10c 0c08 	add.w	ip, ip, #8
    b35c:	f47f ae7f 	bne.w	b05e <_malloc_r+0xf6>
    b360:	e030      	b.n	b3c4 <_malloc_r+0x45c>
    b362:	68dc      	ldr	r4, [r3, #12]
    b364:	42a3      	cmp	r3, r4
    b366:	bf08      	it	eq
    b368:	3002      	addeq	r0, #2
    b36a:	f43f ae35 	beq.w	afd8 <_malloc_r+0x70>
    b36e:	e6b3      	b.n	b0d8 <_malloc_r+0x170>
    b370:	440b      	add	r3, r1
    b372:	460c      	mov	r4, r1
    b374:	685a      	ldr	r2, [r3, #4]
    b376:	68c9      	ldr	r1, [r1, #12]
    b378:	f854 5f08 	ldr.w	r5, [r4, #8]!
    b37c:	f042 0201 	orr.w	r2, r2, #1
    b380:	605a      	str	r2, [r3, #4]
    b382:	4630      	mov	r0, r6
    b384:	60e9      	str	r1, [r5, #12]
    b386:	608d      	str	r5, [r1, #8]
    b388:	f000 f9a2 	bl	b6d0 <__malloc_unlock>
    b38c:	e6b4      	b.n	b0f8 <_malloc_r+0x190>
    b38e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    b392:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    b396:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b39a:	e607      	b.n	afac <_malloc_r+0x44>
    b39c:	099a      	lsrs	r2, r3, #6
    b39e:	f102 0139 	add.w	r1, r2, #57	; 0x39
    b3a2:	0049      	lsls	r1, r1, #1
    b3a4:	3238      	adds	r2, #56	; 0x38
    b3a6:	e7a1      	b.n	b2ec <_malloc_r+0x384>
    b3a8:	42bc      	cmp	r4, r7
    b3aa:	4b4a      	ldr	r3, [pc, #296]	; (b4d4 <_malloc_r+0x56c>)
    b3ac:	f43f af00 	beq.w	b1b0 <_malloc_r+0x248>
    b3b0:	689c      	ldr	r4, [r3, #8]
    b3b2:	6862      	ldr	r2, [r4, #4]
    b3b4:	f022 0203 	bic.w	r2, r2, #3
    b3b8:	e75a      	b.n	b270 <_malloc_r+0x308>
    b3ba:	f859 3908 	ldr.w	r3, [r9], #-8
    b3be:	4599      	cmp	r9, r3
    b3c0:	f040 8082 	bne.w	b4c8 <_malloc_r+0x560>
    b3c4:	f010 0f03 	tst.w	r0, #3
    b3c8:	f100 30ff 	add.w	r0, r0, #4294967295
    b3cc:	d1f5      	bne.n	b3ba <_malloc_r+0x452>
    b3ce:	687b      	ldr	r3, [r7, #4]
    b3d0:	ea23 0304 	bic.w	r3, r3, r4
    b3d4:	607b      	str	r3, [r7, #4]
    b3d6:	0064      	lsls	r4, r4, #1
    b3d8:	429c      	cmp	r4, r3
    b3da:	f63f aebd 	bhi.w	b158 <_malloc_r+0x1f0>
    b3de:	2c00      	cmp	r4, #0
    b3e0:	f43f aeba 	beq.w	b158 <_malloc_r+0x1f0>
    b3e4:	421c      	tst	r4, r3
    b3e6:	4640      	mov	r0, r8
    b3e8:	f47f ae35 	bne.w	b056 <_malloc_r+0xee>
    b3ec:	0064      	lsls	r4, r4, #1
    b3ee:	421c      	tst	r4, r3
    b3f0:	f100 0004 	add.w	r0, r0, #4
    b3f4:	d0fa      	beq.n	b3ec <_malloc_r+0x484>
    b3f6:	e62e      	b.n	b056 <_malloc_r+0xee>
    b3f8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b3fc:	d818      	bhi.n	b430 <_malloc_r+0x4c8>
    b3fe:	0be8      	lsrs	r0, r5, #15
    b400:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    b404:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b408:	3077      	adds	r0, #119	; 0x77
    b40a:	e5cf      	b.n	afac <_malloc_r+0x44>
    b40c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    b410:	e6eb      	b.n	b1ea <_malloc_r+0x282>
    b412:	2101      	movs	r1, #1
    b414:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b418:	1092      	asrs	r2, r2, #2
    b41a:	fa01 f202 	lsl.w	r2, r1, r2
    b41e:	431a      	orrs	r2, r3
    b420:	f8c8 2004 	str.w	r2, [r8, #4]
    b424:	4661      	mov	r1, ip
    b426:	e777      	b.n	b318 <_malloc_r+0x3b0>
    b428:	2301      	movs	r3, #1
    b42a:	f8cb 3004 	str.w	r3, [fp, #4]
    b42e:	e725      	b.n	b27c <_malloc_r+0x314>
    b430:	f240 5254 	movw	r2, #1364	; 0x554
    b434:	4293      	cmp	r3, r2
    b436:	d820      	bhi.n	b47a <_malloc_r+0x512>
    b438:	0ca8      	lsrs	r0, r5, #18
    b43a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    b43e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b442:	307c      	adds	r0, #124	; 0x7c
    b444:	e5b2      	b.n	afac <_malloc_r+0x44>
    b446:	3210      	adds	r2, #16
    b448:	e6a4      	b.n	b194 <_malloc_r+0x22c>
    b44a:	2a54      	cmp	r2, #84	; 0x54
    b44c:	d826      	bhi.n	b49c <_malloc_r+0x534>
    b44e:	0b1a      	lsrs	r2, r3, #12
    b450:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    b454:	0049      	lsls	r1, r1, #1
    b456:	326e      	adds	r2, #110	; 0x6e
    b458:	e748      	b.n	b2ec <_malloc_r+0x384>
    b45a:	68bc      	ldr	r4, [r7, #8]
    b45c:	6862      	ldr	r2, [r4, #4]
    b45e:	f022 0203 	bic.w	r2, r2, #3
    b462:	e705      	b.n	b270 <_malloc_r+0x308>
    b464:	f3ca 000b 	ubfx	r0, sl, #0, #12
    b468:	2800      	cmp	r0, #0
    b46a:	f47f aea8 	bne.w	b1be <_malloc_r+0x256>
    b46e:	4442      	add	r2, r8
    b470:	68bb      	ldr	r3, [r7, #8]
    b472:	f042 0201 	orr.w	r2, r2, #1
    b476:	605a      	str	r2, [r3, #4]
    b478:	e6ec      	b.n	b254 <_malloc_r+0x2ec>
    b47a:	23fe      	movs	r3, #254	; 0xfe
    b47c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    b480:	207e      	movs	r0, #126	; 0x7e
    b482:	e593      	b.n	afac <_malloc_r+0x44>
    b484:	2201      	movs	r2, #1
    b486:	f04f 0900 	mov.w	r9, #0
    b48a:	e6c1      	b.n	b210 <_malloc_r+0x2a8>
    b48c:	f104 0108 	add.w	r1, r4, #8
    b490:	4630      	mov	r0, r6
    b492:	f000 fdf3 	bl	c07c <_free_r>
    b496:	f8d9 1000 	ldr.w	r1, [r9]
    b49a:	e6db      	b.n	b254 <_malloc_r+0x2ec>
    b49c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    b4a0:	d805      	bhi.n	b4ae <_malloc_r+0x546>
    b4a2:	0bda      	lsrs	r2, r3, #15
    b4a4:	f102 0178 	add.w	r1, r2, #120	; 0x78
    b4a8:	0049      	lsls	r1, r1, #1
    b4aa:	3277      	adds	r2, #119	; 0x77
    b4ac:	e71e      	b.n	b2ec <_malloc_r+0x384>
    b4ae:	f240 5154 	movw	r1, #1364	; 0x554
    b4b2:	428a      	cmp	r2, r1
    b4b4:	d805      	bhi.n	b4c2 <_malloc_r+0x55a>
    b4b6:	0c9a      	lsrs	r2, r3, #18
    b4b8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    b4bc:	0049      	lsls	r1, r1, #1
    b4be:	327c      	adds	r2, #124	; 0x7c
    b4c0:	e714      	b.n	b2ec <_malloc_r+0x384>
    b4c2:	21fe      	movs	r1, #254	; 0xfe
    b4c4:	227e      	movs	r2, #126	; 0x7e
    b4c6:	e711      	b.n	b2ec <_malloc_r+0x384>
    b4c8:	687b      	ldr	r3, [r7, #4]
    b4ca:	e784      	b.n	b3d6 <_malloc_r+0x46e>
    b4cc:	08e8      	lsrs	r0, r5, #3
    b4ce:	1c43      	adds	r3, r0, #1
    b4d0:	005b      	lsls	r3, r3, #1
    b4d2:	e5f8      	b.n	b0c6 <_malloc_r+0x15e>
    b4d4:	1fff8dc0 	.word	0x1fff8dc0

0000b4d8 <__ascii_mbtowc>:
    b4d8:	b082      	sub	sp, #8
    b4da:	b149      	cbz	r1, b4f0 <__ascii_mbtowc+0x18>
    b4dc:	b15a      	cbz	r2, b4f6 <__ascii_mbtowc+0x1e>
    b4de:	b16b      	cbz	r3, b4fc <__ascii_mbtowc+0x24>
    b4e0:	7813      	ldrb	r3, [r2, #0]
    b4e2:	600b      	str	r3, [r1, #0]
    b4e4:	7812      	ldrb	r2, [r2, #0]
    b4e6:	1c10      	adds	r0, r2, #0
    b4e8:	bf18      	it	ne
    b4ea:	2001      	movne	r0, #1
    b4ec:	b002      	add	sp, #8
    b4ee:	4770      	bx	lr
    b4f0:	a901      	add	r1, sp, #4
    b4f2:	2a00      	cmp	r2, #0
    b4f4:	d1f3      	bne.n	b4de <__ascii_mbtowc+0x6>
    b4f6:	4610      	mov	r0, r2
    b4f8:	b002      	add	sp, #8
    b4fa:	4770      	bx	lr
    b4fc:	f06f 0001 	mvn.w	r0, #1
    b500:	e7f4      	b.n	b4ec <__ascii_mbtowc+0x14>
    b502:	bf00      	nop

0000b504 <memcmp>:
    b504:	2a03      	cmp	r2, #3
    b506:	b470      	push	{r4, r5, r6}
    b508:	d926      	bls.n	b558 <memcmp+0x54>
    b50a:	ea40 0301 	orr.w	r3, r0, r1
    b50e:	079b      	lsls	r3, r3, #30
    b510:	d011      	beq.n	b536 <memcmp+0x32>
    b512:	7804      	ldrb	r4, [r0, #0]
    b514:	780d      	ldrb	r5, [r1, #0]
    b516:	42ac      	cmp	r4, r5
    b518:	d122      	bne.n	b560 <memcmp+0x5c>
    b51a:	4402      	add	r2, r0
    b51c:	1c43      	adds	r3, r0, #1
    b51e:	e005      	b.n	b52c <memcmp+0x28>
    b520:	f813 4b01 	ldrb.w	r4, [r3], #1
    b524:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b528:	42ac      	cmp	r4, r5
    b52a:	d119      	bne.n	b560 <memcmp+0x5c>
    b52c:	4293      	cmp	r3, r2
    b52e:	d1f7      	bne.n	b520 <memcmp+0x1c>
    b530:	2000      	movs	r0, #0
    b532:	bc70      	pop	{r4, r5, r6}
    b534:	4770      	bx	lr
    b536:	460c      	mov	r4, r1
    b538:	4603      	mov	r3, r0
    b53a:	681e      	ldr	r6, [r3, #0]
    b53c:	6825      	ldr	r5, [r4, #0]
    b53e:	42ae      	cmp	r6, r5
    b540:	4618      	mov	r0, r3
    b542:	4621      	mov	r1, r4
    b544:	f103 0304 	add.w	r3, r3, #4
    b548:	f104 0404 	add.w	r4, r4, #4
    b54c:	d1e1      	bne.n	b512 <memcmp+0xe>
    b54e:	3a04      	subs	r2, #4
    b550:	2a03      	cmp	r2, #3
    b552:	4618      	mov	r0, r3
    b554:	4621      	mov	r1, r4
    b556:	d8f0      	bhi.n	b53a <memcmp+0x36>
    b558:	2a00      	cmp	r2, #0
    b55a:	d1da      	bne.n	b512 <memcmp+0xe>
    b55c:	4610      	mov	r0, r2
    b55e:	e7e8      	b.n	b532 <memcmp+0x2e>
    b560:	1b60      	subs	r0, r4, r5
    b562:	bc70      	pop	{r4, r5, r6}
    b564:	4770      	bx	lr
    b566:	bf00      	nop

0000b568 <memmove>:
    b568:	4288      	cmp	r0, r1
    b56a:	b5f0      	push	{r4, r5, r6, r7, lr}
    b56c:	d90d      	bls.n	b58a <memmove+0x22>
    b56e:	188b      	adds	r3, r1, r2
    b570:	4298      	cmp	r0, r3
    b572:	d20a      	bcs.n	b58a <memmove+0x22>
    b574:	1881      	adds	r1, r0, r2
    b576:	2a00      	cmp	r2, #0
    b578:	d051      	beq.n	b61e <memmove+0xb6>
    b57a:	1a9a      	subs	r2, r3, r2
    b57c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b580:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b584:	4293      	cmp	r3, r2
    b586:	d1f9      	bne.n	b57c <memmove+0x14>
    b588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b58a:	2a0f      	cmp	r2, #15
    b58c:	d948      	bls.n	b620 <memmove+0xb8>
    b58e:	ea41 0300 	orr.w	r3, r1, r0
    b592:	079b      	lsls	r3, r3, #30
    b594:	d146      	bne.n	b624 <memmove+0xbc>
    b596:	f100 0410 	add.w	r4, r0, #16
    b59a:	f101 0310 	add.w	r3, r1, #16
    b59e:	4615      	mov	r5, r2
    b5a0:	f853 6c10 	ldr.w	r6, [r3, #-16]
    b5a4:	f844 6c10 	str.w	r6, [r4, #-16]
    b5a8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    b5ac:	f844 6c0c 	str.w	r6, [r4, #-12]
    b5b0:	f853 6c08 	ldr.w	r6, [r3, #-8]
    b5b4:	f844 6c08 	str.w	r6, [r4, #-8]
    b5b8:	3d10      	subs	r5, #16
    b5ba:	f853 6c04 	ldr.w	r6, [r3, #-4]
    b5be:	f844 6c04 	str.w	r6, [r4, #-4]
    b5c2:	2d0f      	cmp	r5, #15
    b5c4:	f103 0310 	add.w	r3, r3, #16
    b5c8:	f104 0410 	add.w	r4, r4, #16
    b5cc:	d8e8      	bhi.n	b5a0 <memmove+0x38>
    b5ce:	f1a2 0310 	sub.w	r3, r2, #16
    b5d2:	f023 030f 	bic.w	r3, r3, #15
    b5d6:	f002 0e0f 	and.w	lr, r2, #15
    b5da:	3310      	adds	r3, #16
    b5dc:	f1be 0f03 	cmp.w	lr, #3
    b5e0:	4419      	add	r1, r3
    b5e2:	4403      	add	r3, r0
    b5e4:	d921      	bls.n	b62a <memmove+0xc2>
    b5e6:	1f1e      	subs	r6, r3, #4
    b5e8:	460d      	mov	r5, r1
    b5ea:	4674      	mov	r4, lr
    b5ec:	3c04      	subs	r4, #4
    b5ee:	f855 7b04 	ldr.w	r7, [r5], #4
    b5f2:	f846 7f04 	str.w	r7, [r6, #4]!
    b5f6:	2c03      	cmp	r4, #3
    b5f8:	d8f8      	bhi.n	b5ec <memmove+0x84>
    b5fa:	f1ae 0404 	sub.w	r4, lr, #4
    b5fe:	f024 0403 	bic.w	r4, r4, #3
    b602:	3404      	adds	r4, #4
    b604:	4423      	add	r3, r4
    b606:	4421      	add	r1, r4
    b608:	f002 0203 	and.w	r2, r2, #3
    b60c:	b162      	cbz	r2, b628 <memmove+0xc0>
    b60e:	3b01      	subs	r3, #1
    b610:	440a      	add	r2, r1
    b612:	f811 4b01 	ldrb.w	r4, [r1], #1
    b616:	f803 4f01 	strb.w	r4, [r3, #1]!
    b61a:	428a      	cmp	r2, r1
    b61c:	d1f9      	bne.n	b612 <memmove+0xaa>
    b61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b620:	4603      	mov	r3, r0
    b622:	e7f3      	b.n	b60c <memmove+0xa4>
    b624:	4603      	mov	r3, r0
    b626:	e7f2      	b.n	b60e <memmove+0xa6>
    b628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b62a:	4672      	mov	r2, lr
    b62c:	e7ee      	b.n	b60c <memmove+0xa4>
    b62e:	bf00      	nop

0000b630 <memset>:
    b630:	b470      	push	{r4, r5, r6}
    b632:	0784      	lsls	r4, r0, #30
    b634:	d046      	beq.n	b6c4 <memset+0x94>
    b636:	1e54      	subs	r4, r2, #1
    b638:	2a00      	cmp	r2, #0
    b63a:	d041      	beq.n	b6c0 <memset+0x90>
    b63c:	b2cd      	uxtb	r5, r1
    b63e:	4603      	mov	r3, r0
    b640:	e002      	b.n	b648 <memset+0x18>
    b642:	1e62      	subs	r2, r4, #1
    b644:	b3e4      	cbz	r4, b6c0 <memset+0x90>
    b646:	4614      	mov	r4, r2
    b648:	f803 5b01 	strb.w	r5, [r3], #1
    b64c:	079a      	lsls	r2, r3, #30
    b64e:	d1f8      	bne.n	b642 <memset+0x12>
    b650:	2c03      	cmp	r4, #3
    b652:	d92e      	bls.n	b6b2 <memset+0x82>
    b654:	b2cd      	uxtb	r5, r1
    b656:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b65a:	2c0f      	cmp	r4, #15
    b65c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b660:	d919      	bls.n	b696 <memset+0x66>
    b662:	f103 0210 	add.w	r2, r3, #16
    b666:	4626      	mov	r6, r4
    b668:	3e10      	subs	r6, #16
    b66a:	2e0f      	cmp	r6, #15
    b66c:	f842 5c10 	str.w	r5, [r2, #-16]
    b670:	f842 5c0c 	str.w	r5, [r2, #-12]
    b674:	f842 5c08 	str.w	r5, [r2, #-8]
    b678:	f842 5c04 	str.w	r5, [r2, #-4]
    b67c:	f102 0210 	add.w	r2, r2, #16
    b680:	d8f2      	bhi.n	b668 <memset+0x38>
    b682:	f1a4 0210 	sub.w	r2, r4, #16
    b686:	f022 020f 	bic.w	r2, r2, #15
    b68a:	f004 040f 	and.w	r4, r4, #15
    b68e:	3210      	adds	r2, #16
    b690:	2c03      	cmp	r4, #3
    b692:	4413      	add	r3, r2
    b694:	d90d      	bls.n	b6b2 <memset+0x82>
    b696:	461e      	mov	r6, r3
    b698:	4622      	mov	r2, r4
    b69a:	3a04      	subs	r2, #4
    b69c:	2a03      	cmp	r2, #3
    b69e:	f846 5b04 	str.w	r5, [r6], #4
    b6a2:	d8fa      	bhi.n	b69a <memset+0x6a>
    b6a4:	1f22      	subs	r2, r4, #4
    b6a6:	f022 0203 	bic.w	r2, r2, #3
    b6aa:	3204      	adds	r2, #4
    b6ac:	4413      	add	r3, r2
    b6ae:	f004 0403 	and.w	r4, r4, #3
    b6b2:	b12c      	cbz	r4, b6c0 <memset+0x90>
    b6b4:	b2c9      	uxtb	r1, r1
    b6b6:	441c      	add	r4, r3
    b6b8:	f803 1b01 	strb.w	r1, [r3], #1
    b6bc:	42a3      	cmp	r3, r4
    b6be:	d1fb      	bne.n	b6b8 <memset+0x88>
    b6c0:	bc70      	pop	{r4, r5, r6}
    b6c2:	4770      	bx	lr
    b6c4:	4614      	mov	r4, r2
    b6c6:	4603      	mov	r3, r0
    b6c8:	e7c2      	b.n	b650 <memset+0x20>
    b6ca:	bf00      	nop

0000b6cc <__malloc_lock>:
    b6cc:	4770      	bx	lr
    b6ce:	bf00      	nop

0000b6d0 <__malloc_unlock>:
    b6d0:	4770      	bx	lr
    b6d2:	bf00      	nop

0000b6d4 <realloc>:
    b6d4:	4b02      	ldr	r3, [pc, #8]	; (b6e0 <realloc+0xc>)
    b6d6:	460a      	mov	r2, r1
    b6d8:	4601      	mov	r1, r0
    b6da:	6818      	ldr	r0, [r3, #0]
    b6dc:	f000 b802 	b.w	b6e4 <_realloc_r>
    b6e0:	1fff8c50 	.word	0x1fff8c50

0000b6e4 <_realloc_r>:
    b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6e8:	4617      	mov	r7, r2
    b6ea:	b083      	sub	sp, #12
    b6ec:	2900      	cmp	r1, #0
    b6ee:	f000 80c1 	beq.w	b874 <_realloc_r+0x190>
    b6f2:	460e      	mov	r6, r1
    b6f4:	4681      	mov	r9, r0
    b6f6:	f107 050b 	add.w	r5, r7, #11
    b6fa:	f7ff ffe7 	bl	b6cc <__malloc_lock>
    b6fe:	f856 ec04 	ldr.w	lr, [r6, #-4]
    b702:	2d16      	cmp	r5, #22
    b704:	f02e 0403 	bic.w	r4, lr, #3
    b708:	f1a6 0808 	sub.w	r8, r6, #8
    b70c:	d840      	bhi.n	b790 <_realloc_r+0xac>
    b70e:	2210      	movs	r2, #16
    b710:	4615      	mov	r5, r2
    b712:	42af      	cmp	r7, r5
    b714:	d841      	bhi.n	b79a <_realloc_r+0xb6>
    b716:	4294      	cmp	r4, r2
    b718:	da75      	bge.n	b806 <_realloc_r+0x122>
    b71a:	4bc9      	ldr	r3, [pc, #804]	; (ba40 <_realloc_r+0x35c>)
    b71c:	6899      	ldr	r1, [r3, #8]
    b71e:	eb08 0004 	add.w	r0, r8, r4
    b722:	4288      	cmp	r0, r1
    b724:	6841      	ldr	r1, [r0, #4]
    b726:	f000 80d9 	beq.w	b8dc <_realloc_r+0x1f8>
    b72a:	f021 0301 	bic.w	r3, r1, #1
    b72e:	4403      	add	r3, r0
    b730:	685b      	ldr	r3, [r3, #4]
    b732:	07db      	lsls	r3, r3, #31
    b734:	d57d      	bpl.n	b832 <_realloc_r+0x14e>
    b736:	f01e 0f01 	tst.w	lr, #1
    b73a:	d035      	beq.n	b7a8 <_realloc_r+0xc4>
    b73c:	4639      	mov	r1, r7
    b73e:	4648      	mov	r0, r9
    b740:	f7ff fc12 	bl	af68 <_malloc_r>
    b744:	4607      	mov	r7, r0
    b746:	b1e0      	cbz	r0, b782 <_realloc_r+0x9e>
    b748:	f856 3c04 	ldr.w	r3, [r6, #-4]
    b74c:	f023 0301 	bic.w	r3, r3, #1
    b750:	4443      	add	r3, r8
    b752:	f1a0 0208 	sub.w	r2, r0, #8
    b756:	429a      	cmp	r2, r3
    b758:	f000 8144 	beq.w	b9e4 <_realloc_r+0x300>
    b75c:	1f22      	subs	r2, r4, #4
    b75e:	2a24      	cmp	r2, #36	; 0x24
    b760:	f200 8131 	bhi.w	b9c6 <_realloc_r+0x2e2>
    b764:	2a13      	cmp	r2, #19
    b766:	f200 8104 	bhi.w	b972 <_realloc_r+0x28e>
    b76a:	4603      	mov	r3, r0
    b76c:	4632      	mov	r2, r6
    b76e:	6811      	ldr	r1, [r2, #0]
    b770:	6019      	str	r1, [r3, #0]
    b772:	6851      	ldr	r1, [r2, #4]
    b774:	6059      	str	r1, [r3, #4]
    b776:	6892      	ldr	r2, [r2, #8]
    b778:	609a      	str	r2, [r3, #8]
    b77a:	4631      	mov	r1, r6
    b77c:	4648      	mov	r0, r9
    b77e:	f000 fc7d 	bl	c07c <_free_r>
    b782:	4648      	mov	r0, r9
    b784:	f7ff ffa4 	bl	b6d0 <__malloc_unlock>
    b788:	4638      	mov	r0, r7
    b78a:	b003      	add	sp, #12
    b78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b790:	f025 0507 	bic.w	r5, r5, #7
    b794:	2d00      	cmp	r5, #0
    b796:	462a      	mov	r2, r5
    b798:	dabb      	bge.n	b712 <_realloc_r+0x2e>
    b79a:	230c      	movs	r3, #12
    b79c:	2000      	movs	r0, #0
    b79e:	f8c9 3000 	str.w	r3, [r9]
    b7a2:	b003      	add	sp, #12
    b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7a8:	f856 3c08 	ldr.w	r3, [r6, #-8]
    b7ac:	ebc3 0a08 	rsb	sl, r3, r8
    b7b0:	f8da 3004 	ldr.w	r3, [sl, #4]
    b7b4:	f023 0c03 	bic.w	ip, r3, #3
    b7b8:	eb04 030c 	add.w	r3, r4, ip
    b7bc:	4293      	cmp	r3, r2
    b7be:	dbbd      	blt.n	b73c <_realloc_r+0x58>
    b7c0:	4657      	mov	r7, sl
    b7c2:	f8da 100c 	ldr.w	r1, [sl, #12]
    b7c6:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b7ca:	1f22      	subs	r2, r4, #4
    b7cc:	2a24      	cmp	r2, #36	; 0x24
    b7ce:	60c1      	str	r1, [r0, #12]
    b7d0:	6088      	str	r0, [r1, #8]
    b7d2:	f200 8117 	bhi.w	ba04 <_realloc_r+0x320>
    b7d6:	2a13      	cmp	r2, #19
    b7d8:	f240 8112 	bls.w	ba00 <_realloc_r+0x31c>
    b7dc:	6831      	ldr	r1, [r6, #0]
    b7de:	f8ca 1008 	str.w	r1, [sl, #8]
    b7e2:	6871      	ldr	r1, [r6, #4]
    b7e4:	f8ca 100c 	str.w	r1, [sl, #12]
    b7e8:	2a1b      	cmp	r2, #27
    b7ea:	f200 812b 	bhi.w	ba44 <_realloc_r+0x360>
    b7ee:	3608      	adds	r6, #8
    b7f0:	f10a 0210 	add.w	r2, sl, #16
    b7f4:	6831      	ldr	r1, [r6, #0]
    b7f6:	6011      	str	r1, [r2, #0]
    b7f8:	6871      	ldr	r1, [r6, #4]
    b7fa:	6051      	str	r1, [r2, #4]
    b7fc:	68b1      	ldr	r1, [r6, #8]
    b7fe:	6091      	str	r1, [r2, #8]
    b800:	463e      	mov	r6, r7
    b802:	461c      	mov	r4, r3
    b804:	46d0      	mov	r8, sl
    b806:	1b63      	subs	r3, r4, r5
    b808:	2b0f      	cmp	r3, #15
    b80a:	d81d      	bhi.n	b848 <_realloc_r+0x164>
    b80c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b810:	f003 0301 	and.w	r3, r3, #1
    b814:	4323      	orrs	r3, r4
    b816:	4444      	add	r4, r8
    b818:	f8c8 3004 	str.w	r3, [r8, #4]
    b81c:	6863      	ldr	r3, [r4, #4]
    b81e:	f043 0301 	orr.w	r3, r3, #1
    b822:	6063      	str	r3, [r4, #4]
    b824:	4648      	mov	r0, r9
    b826:	f7ff ff53 	bl	b6d0 <__malloc_unlock>
    b82a:	4630      	mov	r0, r6
    b82c:	b003      	add	sp, #12
    b82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b832:	f021 0103 	bic.w	r1, r1, #3
    b836:	4421      	add	r1, r4
    b838:	4291      	cmp	r1, r2
    b83a:	db21      	blt.n	b880 <_realloc_r+0x19c>
    b83c:	68c3      	ldr	r3, [r0, #12]
    b83e:	6882      	ldr	r2, [r0, #8]
    b840:	460c      	mov	r4, r1
    b842:	60d3      	str	r3, [r2, #12]
    b844:	609a      	str	r2, [r3, #8]
    b846:	e7de      	b.n	b806 <_realloc_r+0x122>
    b848:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b84c:	eb08 0105 	add.w	r1, r8, r5
    b850:	f002 0201 	and.w	r2, r2, #1
    b854:	4315      	orrs	r5, r2
    b856:	f043 0201 	orr.w	r2, r3, #1
    b85a:	440b      	add	r3, r1
    b85c:	f8c8 5004 	str.w	r5, [r8, #4]
    b860:	604a      	str	r2, [r1, #4]
    b862:	685a      	ldr	r2, [r3, #4]
    b864:	f042 0201 	orr.w	r2, r2, #1
    b868:	3108      	adds	r1, #8
    b86a:	605a      	str	r2, [r3, #4]
    b86c:	4648      	mov	r0, r9
    b86e:	f000 fc05 	bl	c07c <_free_r>
    b872:	e7d7      	b.n	b824 <_realloc_r+0x140>
    b874:	4611      	mov	r1, r2
    b876:	b003      	add	sp, #12
    b878:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b87c:	f7ff bb74 	b.w	af68 <_malloc_r>
    b880:	f01e 0f01 	tst.w	lr, #1
    b884:	f47f af5a 	bne.w	b73c <_realloc_r+0x58>
    b888:	f856 3c08 	ldr.w	r3, [r6, #-8]
    b88c:	ebc3 0a08 	rsb	sl, r3, r8
    b890:	f8da 3004 	ldr.w	r3, [sl, #4]
    b894:	f023 0c03 	bic.w	ip, r3, #3
    b898:	eb01 0e0c 	add.w	lr, r1, ip
    b89c:	4596      	cmp	lr, r2
    b89e:	db8b      	blt.n	b7b8 <_realloc_r+0xd4>
    b8a0:	68c3      	ldr	r3, [r0, #12]
    b8a2:	6882      	ldr	r2, [r0, #8]
    b8a4:	4657      	mov	r7, sl
    b8a6:	60d3      	str	r3, [r2, #12]
    b8a8:	609a      	str	r2, [r3, #8]
    b8aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b8ae:	f8da 300c 	ldr.w	r3, [sl, #12]
    b8b2:	60cb      	str	r3, [r1, #12]
    b8b4:	1f22      	subs	r2, r4, #4
    b8b6:	2a24      	cmp	r2, #36	; 0x24
    b8b8:	6099      	str	r1, [r3, #8]
    b8ba:	f200 8099 	bhi.w	b9f0 <_realloc_r+0x30c>
    b8be:	2a13      	cmp	r2, #19
    b8c0:	d962      	bls.n	b988 <_realloc_r+0x2a4>
    b8c2:	6833      	ldr	r3, [r6, #0]
    b8c4:	f8ca 3008 	str.w	r3, [sl, #8]
    b8c8:	6873      	ldr	r3, [r6, #4]
    b8ca:	f8ca 300c 	str.w	r3, [sl, #12]
    b8ce:	2a1b      	cmp	r2, #27
    b8d0:	f200 80a0 	bhi.w	ba14 <_realloc_r+0x330>
    b8d4:	3608      	adds	r6, #8
    b8d6:	f10a 0310 	add.w	r3, sl, #16
    b8da:	e056      	b.n	b98a <_realloc_r+0x2a6>
    b8dc:	f021 0b03 	bic.w	fp, r1, #3
    b8e0:	44a3      	add	fp, r4
    b8e2:	f105 0010 	add.w	r0, r5, #16
    b8e6:	4583      	cmp	fp, r0
    b8e8:	da59      	bge.n	b99e <_realloc_r+0x2ba>
    b8ea:	f01e 0f01 	tst.w	lr, #1
    b8ee:	f47f af25 	bne.w	b73c <_realloc_r+0x58>
    b8f2:	f856 1c08 	ldr.w	r1, [r6, #-8]
    b8f6:	ebc1 0a08 	rsb	sl, r1, r8
    b8fa:	f8da 1004 	ldr.w	r1, [sl, #4]
    b8fe:	f021 0c03 	bic.w	ip, r1, #3
    b902:	44e3      	add	fp, ip
    b904:	4558      	cmp	r0, fp
    b906:	f73f af57 	bgt.w	b7b8 <_realloc_r+0xd4>
    b90a:	4657      	mov	r7, sl
    b90c:	f8da 100c 	ldr.w	r1, [sl, #12]
    b910:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b914:	1f22      	subs	r2, r4, #4
    b916:	2a24      	cmp	r2, #36	; 0x24
    b918:	60c1      	str	r1, [r0, #12]
    b91a:	6088      	str	r0, [r1, #8]
    b91c:	f200 80b4 	bhi.w	ba88 <_realloc_r+0x3a4>
    b920:	2a13      	cmp	r2, #19
    b922:	f240 80a5 	bls.w	ba70 <_realloc_r+0x38c>
    b926:	6831      	ldr	r1, [r6, #0]
    b928:	f8ca 1008 	str.w	r1, [sl, #8]
    b92c:	6871      	ldr	r1, [r6, #4]
    b92e:	f8ca 100c 	str.w	r1, [sl, #12]
    b932:	2a1b      	cmp	r2, #27
    b934:	f200 80af 	bhi.w	ba96 <_realloc_r+0x3b2>
    b938:	3608      	adds	r6, #8
    b93a:	f10a 0210 	add.w	r2, sl, #16
    b93e:	6831      	ldr	r1, [r6, #0]
    b940:	6011      	str	r1, [r2, #0]
    b942:	6871      	ldr	r1, [r6, #4]
    b944:	6051      	str	r1, [r2, #4]
    b946:	68b1      	ldr	r1, [r6, #8]
    b948:	6091      	str	r1, [r2, #8]
    b94a:	eb0a 0105 	add.w	r1, sl, r5
    b94e:	ebc5 020b 	rsb	r2, r5, fp
    b952:	f042 0201 	orr.w	r2, r2, #1
    b956:	6099      	str	r1, [r3, #8]
    b958:	604a      	str	r2, [r1, #4]
    b95a:	f8da 3004 	ldr.w	r3, [sl, #4]
    b95e:	f003 0301 	and.w	r3, r3, #1
    b962:	431d      	orrs	r5, r3
    b964:	4648      	mov	r0, r9
    b966:	f8ca 5004 	str.w	r5, [sl, #4]
    b96a:	f7ff feb1 	bl	b6d0 <__malloc_unlock>
    b96e:	4638      	mov	r0, r7
    b970:	e75c      	b.n	b82c <_realloc_r+0x148>
    b972:	6833      	ldr	r3, [r6, #0]
    b974:	6003      	str	r3, [r0, #0]
    b976:	6873      	ldr	r3, [r6, #4]
    b978:	6043      	str	r3, [r0, #4]
    b97a:	2a1b      	cmp	r2, #27
    b97c:	d827      	bhi.n	b9ce <_realloc_r+0x2ea>
    b97e:	f100 0308 	add.w	r3, r0, #8
    b982:	f106 0208 	add.w	r2, r6, #8
    b986:	e6f2      	b.n	b76e <_realloc_r+0x8a>
    b988:	463b      	mov	r3, r7
    b98a:	6832      	ldr	r2, [r6, #0]
    b98c:	601a      	str	r2, [r3, #0]
    b98e:	6872      	ldr	r2, [r6, #4]
    b990:	605a      	str	r2, [r3, #4]
    b992:	68b2      	ldr	r2, [r6, #8]
    b994:	609a      	str	r2, [r3, #8]
    b996:	463e      	mov	r6, r7
    b998:	4674      	mov	r4, lr
    b99a:	46d0      	mov	r8, sl
    b99c:	e733      	b.n	b806 <_realloc_r+0x122>
    b99e:	eb08 0105 	add.w	r1, r8, r5
    b9a2:	ebc5 0b0b 	rsb	fp, r5, fp
    b9a6:	f04b 0201 	orr.w	r2, fp, #1
    b9aa:	6099      	str	r1, [r3, #8]
    b9ac:	604a      	str	r2, [r1, #4]
    b9ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
    b9b2:	f003 0301 	and.w	r3, r3, #1
    b9b6:	431d      	orrs	r5, r3
    b9b8:	4648      	mov	r0, r9
    b9ba:	f846 5c04 	str.w	r5, [r6, #-4]
    b9be:	f7ff fe87 	bl	b6d0 <__malloc_unlock>
    b9c2:	4630      	mov	r0, r6
    b9c4:	e732      	b.n	b82c <_realloc_r+0x148>
    b9c6:	4631      	mov	r1, r6
    b9c8:	f7ff fdce 	bl	b568 <memmove>
    b9cc:	e6d5      	b.n	b77a <_realloc_r+0x96>
    b9ce:	68b3      	ldr	r3, [r6, #8]
    b9d0:	6083      	str	r3, [r0, #8]
    b9d2:	68f3      	ldr	r3, [r6, #12]
    b9d4:	60c3      	str	r3, [r0, #12]
    b9d6:	2a24      	cmp	r2, #36	; 0x24
    b9d8:	d028      	beq.n	ba2c <_realloc_r+0x348>
    b9da:	f100 0310 	add.w	r3, r0, #16
    b9de:	f106 0210 	add.w	r2, r6, #16
    b9e2:	e6c4      	b.n	b76e <_realloc_r+0x8a>
    b9e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b9e8:	f023 0303 	bic.w	r3, r3, #3
    b9ec:	441c      	add	r4, r3
    b9ee:	e70a      	b.n	b806 <_realloc_r+0x122>
    b9f0:	4631      	mov	r1, r6
    b9f2:	4638      	mov	r0, r7
    b9f4:	4674      	mov	r4, lr
    b9f6:	46d0      	mov	r8, sl
    b9f8:	f7ff fdb6 	bl	b568 <memmove>
    b9fc:	463e      	mov	r6, r7
    b9fe:	e702      	b.n	b806 <_realloc_r+0x122>
    ba00:	463a      	mov	r2, r7
    ba02:	e6f7      	b.n	b7f4 <_realloc_r+0x110>
    ba04:	4631      	mov	r1, r6
    ba06:	4638      	mov	r0, r7
    ba08:	461c      	mov	r4, r3
    ba0a:	46d0      	mov	r8, sl
    ba0c:	f7ff fdac 	bl	b568 <memmove>
    ba10:	463e      	mov	r6, r7
    ba12:	e6f8      	b.n	b806 <_realloc_r+0x122>
    ba14:	68b3      	ldr	r3, [r6, #8]
    ba16:	f8ca 3010 	str.w	r3, [sl, #16]
    ba1a:	68f3      	ldr	r3, [r6, #12]
    ba1c:	f8ca 3014 	str.w	r3, [sl, #20]
    ba20:	2a24      	cmp	r2, #36	; 0x24
    ba22:	d01b      	beq.n	ba5c <_realloc_r+0x378>
    ba24:	3610      	adds	r6, #16
    ba26:	f10a 0318 	add.w	r3, sl, #24
    ba2a:	e7ae      	b.n	b98a <_realloc_r+0x2a6>
    ba2c:	6933      	ldr	r3, [r6, #16]
    ba2e:	6103      	str	r3, [r0, #16]
    ba30:	6973      	ldr	r3, [r6, #20]
    ba32:	6143      	str	r3, [r0, #20]
    ba34:	f106 0218 	add.w	r2, r6, #24
    ba38:	f100 0318 	add.w	r3, r0, #24
    ba3c:	e697      	b.n	b76e <_realloc_r+0x8a>
    ba3e:	bf00      	nop
    ba40:	1fff8dc0 	.word	0x1fff8dc0
    ba44:	68b1      	ldr	r1, [r6, #8]
    ba46:	f8ca 1010 	str.w	r1, [sl, #16]
    ba4a:	68f1      	ldr	r1, [r6, #12]
    ba4c:	f8ca 1014 	str.w	r1, [sl, #20]
    ba50:	2a24      	cmp	r2, #36	; 0x24
    ba52:	d00f      	beq.n	ba74 <_realloc_r+0x390>
    ba54:	3610      	adds	r6, #16
    ba56:	f10a 0218 	add.w	r2, sl, #24
    ba5a:	e6cb      	b.n	b7f4 <_realloc_r+0x110>
    ba5c:	6933      	ldr	r3, [r6, #16]
    ba5e:	f8ca 3018 	str.w	r3, [sl, #24]
    ba62:	6973      	ldr	r3, [r6, #20]
    ba64:	f8ca 301c 	str.w	r3, [sl, #28]
    ba68:	3618      	adds	r6, #24
    ba6a:	f10a 0320 	add.w	r3, sl, #32
    ba6e:	e78c      	b.n	b98a <_realloc_r+0x2a6>
    ba70:	463a      	mov	r2, r7
    ba72:	e764      	b.n	b93e <_realloc_r+0x25a>
    ba74:	6932      	ldr	r2, [r6, #16]
    ba76:	f8ca 2018 	str.w	r2, [sl, #24]
    ba7a:	6972      	ldr	r2, [r6, #20]
    ba7c:	f8ca 201c 	str.w	r2, [sl, #28]
    ba80:	3618      	adds	r6, #24
    ba82:	f10a 0220 	add.w	r2, sl, #32
    ba86:	e6b5      	b.n	b7f4 <_realloc_r+0x110>
    ba88:	4631      	mov	r1, r6
    ba8a:	4638      	mov	r0, r7
    ba8c:	9301      	str	r3, [sp, #4]
    ba8e:	f7ff fd6b 	bl	b568 <memmove>
    ba92:	9b01      	ldr	r3, [sp, #4]
    ba94:	e759      	b.n	b94a <_realloc_r+0x266>
    ba96:	68b1      	ldr	r1, [r6, #8]
    ba98:	f8ca 1010 	str.w	r1, [sl, #16]
    ba9c:	68f1      	ldr	r1, [r6, #12]
    ba9e:	f8ca 1014 	str.w	r1, [sl, #20]
    baa2:	2a24      	cmp	r2, #36	; 0x24
    baa4:	d003      	beq.n	baae <_realloc_r+0x3ca>
    baa6:	3610      	adds	r6, #16
    baa8:	f10a 0218 	add.w	r2, sl, #24
    baac:	e747      	b.n	b93e <_realloc_r+0x25a>
    baae:	6932      	ldr	r2, [r6, #16]
    bab0:	f8ca 2018 	str.w	r2, [sl, #24]
    bab4:	6972      	ldr	r2, [r6, #20]
    bab6:	f8ca 201c 	str.w	r2, [sl, #28]
    baba:	3618      	adds	r6, #24
    babc:	f10a 0220 	add.w	r2, sl, #32
    bac0:	e73d      	b.n	b93e <_realloc_r+0x25a>
    bac2:	bf00      	nop

0000bac4 <_sbrk_r>:
    bac4:	b538      	push	{r3, r4, r5, lr}
    bac6:	4c07      	ldr	r4, [pc, #28]	; (bae4 <_sbrk_r+0x20>)
    bac8:	2300      	movs	r3, #0
    baca:	4605      	mov	r5, r0
    bacc:	4608      	mov	r0, r1
    bace:	6023      	str	r3, [r4, #0]
    bad0:	f7fc fd40 	bl	8554 <_sbrk>
    bad4:	1c43      	adds	r3, r0, #1
    bad6:	d000      	beq.n	bada <_sbrk_r+0x16>
    bad8:	bd38      	pop	{r3, r4, r5, pc}
    bada:	6823      	ldr	r3, [r4, #0]
    badc:	2b00      	cmp	r3, #0
    bade:	d0fb      	beq.n	bad8 <_sbrk_r+0x14>
    bae0:	602b      	str	r3, [r5, #0]
    bae2:	bd38      	pop	{r3, r4, r5, pc}
    bae4:	1fff9890 	.word	0x1fff9890

0000bae8 <strchr>:
    bae8:	b470      	push	{r4, r5, r6}
    baea:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    baee:	d034      	beq.n	bb5a <strchr+0x72>
    baf0:	0785      	lsls	r5, r0, #30
    baf2:	d00f      	beq.n	bb14 <strchr+0x2c>
    baf4:	7803      	ldrb	r3, [r0, #0]
    baf6:	2b00      	cmp	r3, #0
    baf8:	d05a      	beq.n	bbb0 <strchr+0xc8>
    bafa:	429c      	cmp	r4, r3
    bafc:	d02b      	beq.n	bb56 <strchr+0x6e>
    bafe:	1c43      	adds	r3, r0, #1
    bb00:	e005      	b.n	bb0e <strchr+0x26>
    bb02:	f813 2b01 	ldrb.w	r2, [r3], #1
    bb06:	2a00      	cmp	r2, #0
    bb08:	d04f      	beq.n	bbaa <strchr+0xc2>
    bb0a:	4294      	cmp	r4, r2
    bb0c:	d023      	beq.n	bb56 <strchr+0x6e>
    bb0e:	079a      	lsls	r2, r3, #30
    bb10:	4618      	mov	r0, r3
    bb12:	d1f6      	bne.n	bb02 <strchr+0x1a>
    bb14:	020e      	lsls	r6, r1, #8
    bb16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bb1a:	4326      	orrs	r6, r4
    bb1c:	6803      	ldr	r3, [r0, #0]
    bb1e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    bb22:	e001      	b.n	bb28 <strchr+0x40>
    bb24:	f850 3f04 	ldr.w	r3, [r0, #4]!
    bb28:	ea86 0503 	eor.w	r5, r6, r3
    bb2c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
    bb30:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
    bb34:	ea22 0205 	bic.w	r2, r2, r5
    bb38:	ea21 0303 	bic.w	r3, r1, r3
    bb3c:	4313      	orrs	r3, r2
    bb3e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bb42:	d0ef      	beq.n	bb24 <strchr+0x3c>
    bb44:	7803      	ldrb	r3, [r0, #0]
    bb46:	b923      	cbnz	r3, bb52 <strchr+0x6a>
    bb48:	e032      	b.n	bbb0 <strchr+0xc8>
    bb4a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bb4e:	2b00      	cmp	r3, #0
    bb50:	d02e      	beq.n	bbb0 <strchr+0xc8>
    bb52:	429c      	cmp	r4, r3
    bb54:	d1f9      	bne.n	bb4a <strchr+0x62>
    bb56:	bc70      	pop	{r4, r5, r6}
    bb58:	4770      	bx	lr
    bb5a:	0784      	lsls	r4, r0, #30
    bb5c:	d00b      	beq.n	bb76 <strchr+0x8e>
    bb5e:	7803      	ldrb	r3, [r0, #0]
    bb60:	2b00      	cmp	r3, #0
    bb62:	d0f8      	beq.n	bb56 <strchr+0x6e>
    bb64:	1c43      	adds	r3, r0, #1
    bb66:	e003      	b.n	bb70 <strchr+0x88>
    bb68:	7802      	ldrb	r2, [r0, #0]
    bb6a:	3301      	adds	r3, #1
    bb6c:	2a00      	cmp	r2, #0
    bb6e:	d0f2      	beq.n	bb56 <strchr+0x6e>
    bb70:	0799      	lsls	r1, r3, #30
    bb72:	4618      	mov	r0, r3
    bb74:	d1f8      	bne.n	bb68 <strchr+0x80>
    bb76:	6802      	ldr	r2, [r0, #0]
    bb78:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bb7c:	ea23 0302 	bic.w	r3, r3, r2
    bb80:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bb84:	d108      	bne.n	bb98 <strchr+0xb0>
    bb86:	f850 2f04 	ldr.w	r2, [r0, #4]!
    bb8a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bb8e:	ea23 0302 	bic.w	r3, r3, r2
    bb92:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bb96:	d0f6      	beq.n	bb86 <strchr+0x9e>
    bb98:	7803      	ldrb	r3, [r0, #0]
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	d0db      	beq.n	bb56 <strchr+0x6e>
    bb9e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bba2:	2b00      	cmp	r3, #0
    bba4:	d1fb      	bne.n	bb9e <strchr+0xb6>
    bba6:	bc70      	pop	{r4, r5, r6}
    bba8:	4770      	bx	lr
    bbaa:	4610      	mov	r0, r2
    bbac:	bc70      	pop	{r4, r5, r6}
    bbae:	4770      	bx	lr
    bbb0:	4618      	mov	r0, r3
    bbb2:	bc70      	pop	{r4, r5, r6}
    bbb4:	4770      	bx	lr
    bbb6:	bf00      	nop

0000bbb8 <strcpy>:
    bbb8:	ea80 0201 	eor.w	r2, r0, r1
    bbbc:	4684      	mov	ip, r0
    bbbe:	f012 0f03 	tst.w	r2, #3
    bbc2:	d14f      	bne.n	bc64 <strcpy+0xac>
    bbc4:	f011 0f03 	tst.w	r1, #3
    bbc8:	d132      	bne.n	bc30 <strcpy+0x78>
    bbca:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bbce:	f011 0f04 	tst.w	r1, #4
    bbd2:	f851 3b04 	ldr.w	r3, [r1], #4
    bbd6:	d00b      	beq.n	bbf0 <strcpy+0x38>
    bbd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bbdc:	439a      	bics	r2, r3
    bbde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bbe2:	bf04      	itt	eq
    bbe4:	f84c 3b04 	streq.w	r3, [ip], #4
    bbe8:	f851 3b04 	ldreq.w	r3, [r1], #4
    bbec:	d116      	bne.n	bc1c <strcpy+0x64>
    bbee:	bf00      	nop
    bbf0:	f851 4b04 	ldr.w	r4, [r1], #4
    bbf4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bbf8:	439a      	bics	r2, r3
    bbfa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bbfe:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bc02:	d10b      	bne.n	bc1c <strcpy+0x64>
    bc04:	f84c 3b04 	str.w	r3, [ip], #4
    bc08:	43a2      	bics	r2, r4
    bc0a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bc0e:	bf04      	itt	eq
    bc10:	f851 3b04 	ldreq.w	r3, [r1], #4
    bc14:	f84c 4b04 	streq.w	r4, [ip], #4
    bc18:	d0ea      	beq.n	bbf0 <strcpy+0x38>
    bc1a:	4623      	mov	r3, r4
    bc1c:	f80c 3b01 	strb.w	r3, [ip], #1
    bc20:	f013 0fff 	tst.w	r3, #255	; 0xff
    bc24:	ea4f 2333 	mov.w	r3, r3, ror #8
    bc28:	d1f8      	bne.n	bc1c <strcpy+0x64>
    bc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    bc2e:	4770      	bx	lr
    bc30:	f011 0f01 	tst.w	r1, #1
    bc34:	d006      	beq.n	bc44 <strcpy+0x8c>
    bc36:	f811 2b01 	ldrb.w	r2, [r1], #1
    bc3a:	f80c 2b01 	strb.w	r2, [ip], #1
    bc3e:	2a00      	cmp	r2, #0
    bc40:	bf08      	it	eq
    bc42:	4770      	bxeq	lr
    bc44:	f011 0f02 	tst.w	r1, #2
    bc48:	d0bf      	beq.n	bbca <strcpy+0x12>
    bc4a:	f831 2b02 	ldrh.w	r2, [r1], #2
    bc4e:	f012 0fff 	tst.w	r2, #255	; 0xff
    bc52:	bf16      	itet	ne
    bc54:	f82c 2b02 	strhne.w	r2, [ip], #2
    bc58:	f88c 2000 	strbeq.w	r2, [ip]
    bc5c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    bc60:	d1b3      	bne.n	bbca <strcpy+0x12>
    bc62:	4770      	bx	lr
    bc64:	f811 2b01 	ldrb.w	r2, [r1], #1
    bc68:	f80c 2b01 	strb.w	r2, [ip], #1
    bc6c:	2a00      	cmp	r2, #0
    bc6e:	d1f9      	bne.n	bc64 <strcpy+0xac>
    bc70:	4770      	bx	lr
    bc72:	bf00      	nop
    bc74:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bc78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bc7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000bc80 <strlen>:
    bc80:	f890 f000 	pld	[r0]
    bc84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    bc88:	f020 0107 	bic.w	r1, r0, #7
    bc8c:	f06f 0c00 	mvn.w	ip, #0
    bc90:	f010 0407 	ands.w	r4, r0, #7
    bc94:	f891 f020 	pld	[r1, #32]
    bc98:	f040 8049 	bne.w	bd2e <strlen+0xae>
    bc9c:	f04f 0400 	mov.w	r4, #0
    bca0:	f06f 0007 	mvn.w	r0, #7
    bca4:	e9d1 2300 	ldrd	r2, r3, [r1]
    bca8:	f891 f040 	pld	[r1, #64]	; 0x40
    bcac:	f100 0008 	add.w	r0, r0, #8
    bcb0:	fa82 f24c 	uadd8	r2, r2, ip
    bcb4:	faa4 f28c 	sel	r2, r4, ip
    bcb8:	fa83 f34c 	uadd8	r3, r3, ip
    bcbc:	faa2 f38c 	sel	r3, r2, ip
    bcc0:	bb4b      	cbnz	r3, bd16 <strlen+0x96>
    bcc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    bcc6:	fa82 f24c 	uadd8	r2, r2, ip
    bcca:	f100 0008 	add.w	r0, r0, #8
    bcce:	faa4 f28c 	sel	r2, r4, ip
    bcd2:	fa83 f34c 	uadd8	r3, r3, ip
    bcd6:	faa2 f38c 	sel	r3, r2, ip
    bcda:	b9e3      	cbnz	r3, bd16 <strlen+0x96>
    bcdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    bce0:	fa82 f24c 	uadd8	r2, r2, ip
    bce4:	f100 0008 	add.w	r0, r0, #8
    bce8:	faa4 f28c 	sel	r2, r4, ip
    bcec:	fa83 f34c 	uadd8	r3, r3, ip
    bcf0:	faa2 f38c 	sel	r3, r2, ip
    bcf4:	b97b      	cbnz	r3, bd16 <strlen+0x96>
    bcf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    bcfa:	f101 0120 	add.w	r1, r1, #32
    bcfe:	fa82 f24c 	uadd8	r2, r2, ip
    bd02:	f100 0008 	add.w	r0, r0, #8
    bd06:	faa4 f28c 	sel	r2, r4, ip
    bd0a:	fa83 f34c 	uadd8	r3, r3, ip
    bd0e:	faa2 f38c 	sel	r3, r2, ip
    bd12:	2b00      	cmp	r3, #0
    bd14:	d0c6      	beq.n	bca4 <strlen+0x24>
    bd16:	2a00      	cmp	r2, #0
    bd18:	bf04      	itt	eq
    bd1a:	3004      	addeq	r0, #4
    bd1c:	461a      	moveq	r2, r3
    bd1e:	ba12      	rev	r2, r2
    bd20:	fab2 f282 	clz	r2, r2
    bd24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    bd28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    bd2c:	4770      	bx	lr
    bd2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    bd32:	f004 0503 	and.w	r5, r4, #3
    bd36:	f1c4 0000 	rsb	r0, r4, #0
    bd3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bd3e:	f014 0f04 	tst.w	r4, #4
    bd42:	f891 f040 	pld	[r1, #64]	; 0x40
    bd46:	fa0c f505 	lsl.w	r5, ip, r5
    bd4a:	ea62 0205 	orn	r2, r2, r5
    bd4e:	bf1c      	itt	ne
    bd50:	ea63 0305 	ornne	r3, r3, r5
    bd54:	4662      	movne	r2, ip
    bd56:	f04f 0400 	mov.w	r4, #0
    bd5a:	e7a9      	b.n	bcb0 <strlen+0x30>

0000bd5c <strncpy>:
    bd5c:	ea40 0301 	orr.w	r3, r0, r1
    bd60:	079b      	lsls	r3, r3, #30
    bd62:	b470      	push	{r4, r5, r6}
    bd64:	d12b      	bne.n	bdbe <strncpy+0x62>
    bd66:	2a03      	cmp	r2, #3
    bd68:	d929      	bls.n	bdbe <strncpy+0x62>
    bd6a:	460c      	mov	r4, r1
    bd6c:	4603      	mov	r3, r0
    bd6e:	4621      	mov	r1, r4
    bd70:	f854 6b04 	ldr.w	r6, [r4], #4
    bd74:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    bd78:	ea25 0506 	bic.w	r5, r5, r6
    bd7c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    bd80:	d106      	bne.n	bd90 <strncpy+0x34>
    bd82:	3a04      	subs	r2, #4
    bd84:	2a03      	cmp	r2, #3
    bd86:	f843 6b04 	str.w	r6, [r3], #4
    bd8a:	4621      	mov	r1, r4
    bd8c:	d8ef      	bhi.n	bd6e <strncpy+0x12>
    bd8e:	b1a2      	cbz	r2, bdba <strncpy+0x5e>
    bd90:	780c      	ldrb	r4, [r1, #0]
    bd92:	701c      	strb	r4, [r3, #0]
    bd94:	3a01      	subs	r2, #1
    bd96:	3301      	adds	r3, #1
    bd98:	3101      	adds	r1, #1
    bd9a:	b13c      	cbz	r4, bdac <strncpy+0x50>
    bd9c:	b16a      	cbz	r2, bdba <strncpy+0x5e>
    bd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
    bda2:	f803 4b01 	strb.w	r4, [r3], #1
    bda6:	3a01      	subs	r2, #1
    bda8:	2c00      	cmp	r4, #0
    bdaa:	d1f7      	bne.n	bd9c <strncpy+0x40>
    bdac:	b12a      	cbz	r2, bdba <strncpy+0x5e>
    bdae:	441a      	add	r2, r3
    bdb0:	2100      	movs	r1, #0
    bdb2:	f803 1b01 	strb.w	r1, [r3], #1
    bdb6:	429a      	cmp	r2, r3
    bdb8:	d1fb      	bne.n	bdb2 <strncpy+0x56>
    bdba:	bc70      	pop	{r4, r5, r6}
    bdbc:	4770      	bx	lr
    bdbe:	4603      	mov	r3, r0
    bdc0:	e7e5      	b.n	bd8e <strncpy+0x32>
    bdc2:	bf00      	nop

0000bdc4 <__utoa>:
    bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdc6:	f8df e078 	ldr.w	lr, [pc, #120]	; be40 <__utoa+0x7c>
    bdca:	4616      	mov	r6, r2
    bdcc:	4604      	mov	r4, r0
    bdce:	460f      	mov	r7, r1
    bdd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    bdd4:	b08b      	sub	sp, #44	; 0x2c
    bdd6:	466d      	mov	r5, sp
    bdd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bdda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    bdde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bde0:	e89e 0003 	ldmia.w	lr, {r0, r1}
    bde4:	1eb3      	subs	r3, r6, #2
    bde6:	f845 0b04 	str.w	r0, [r5], #4
    bdea:	2b22      	cmp	r3, #34	; 0x22
    bdec:	7029      	strb	r1, [r5, #0]
    bdee:	d822      	bhi.n	be36 <__utoa+0x72>
    bdf0:	1e7d      	subs	r5, r7, #1
    bdf2:	4628      	mov	r0, r5
    bdf4:	2200      	movs	r2, #0
    bdf6:	e000      	b.n	bdfa <__utoa+0x36>
    bdf8:	461a      	mov	r2, r3
    bdfa:	fbb4 f1f6 	udiv	r1, r4, r6
    bdfe:	ab0a      	add	r3, sp, #40	; 0x28
    be00:	fb06 4411 	mls	r4, r6, r1, r4
    be04:	4423      	add	r3, r4
    be06:	460c      	mov	r4, r1
    be08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    be0c:	f800 3f01 	strb.w	r3, [r0, #1]!
    be10:	1c53      	adds	r3, r2, #1
    be12:	2900      	cmp	r1, #0
    be14:	d1f0      	bne.n	bdf8 <__utoa+0x34>
    be16:	54f9      	strb	r1, [r7, r3]
    be18:	18bb      	adds	r3, r7, r2
    be1a:	b14a      	cbz	r2, be30 <__utoa+0x6c>
    be1c:	7819      	ldrb	r1, [r3, #0]
    be1e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    be22:	7029      	strb	r1, [r5, #0]
    be24:	3401      	adds	r4, #1
    be26:	1b11      	subs	r1, r2, r4
    be28:	428c      	cmp	r4, r1
    be2a:	f803 0901 	strb.w	r0, [r3], #-1
    be2e:	dbf5      	blt.n	be1c <__utoa+0x58>
    be30:	4638      	mov	r0, r7
    be32:	b00b      	add	sp, #44	; 0x2c
    be34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be36:	2000      	movs	r0, #0
    be38:	7038      	strb	r0, [r7, #0]
    be3a:	b00b      	add	sp, #44	; 0x2c
    be3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be3e:	bf00      	nop
    be40:	00010a98 	.word	0x00010a98

0000be44 <utoa>:
    be44:	f7ff bfbe 	b.w	bdc4 <__utoa>

0000be48 <_vdprintf_r>:
    be48:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    be4e:	ad04      	add	r5, sp, #16
    be50:	9300      	str	r3, [sp, #0]
    be52:	460f      	mov	r7, r1
    be54:	4613      	mov	r3, r2
    be56:	f44f 7400 	mov.w	r4, #512	; 0x200
    be5a:	aa03      	add	r2, sp, #12
    be5c:	4629      	mov	r1, r5
    be5e:	9403      	str	r4, [sp, #12]
    be60:	4606      	mov	r6, r0
    be62:	f000 fd63 	bl	c92c <_vasnprintf_r>
    be66:	b188      	cbz	r0, be8c <_vdprintf_r+0x44>
    be68:	4604      	mov	r4, r0
    be6a:	4602      	mov	r2, r0
    be6c:	4639      	mov	r1, r7
    be6e:	9b03      	ldr	r3, [sp, #12]
    be70:	4630      	mov	r0, r6
    be72:	f000 f829 	bl	bec8 <_write_r>
    be76:	42ac      	cmp	r4, r5
    be78:	9003      	str	r0, [sp, #12]
    be7a:	d004      	beq.n	be86 <_vdprintf_r+0x3e>
    be7c:	4630      	mov	r0, r6
    be7e:	4621      	mov	r1, r4
    be80:	f000 f8fc 	bl	c07c <_free_r>
    be84:	9803      	ldr	r0, [sp, #12]
    be86:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    be8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be8c:	f04f 30ff 	mov.w	r0, #4294967295
    be90:	e7f9      	b.n	be86 <_vdprintf_r+0x3e>
    be92:	bf00      	nop

0000be94 <vdprintf>:
    be94:	b410      	push	{r4}
    be96:	4c04      	ldr	r4, [pc, #16]	; (bea8 <vdprintf+0x14>)
    be98:	4613      	mov	r3, r2
    be9a:	460a      	mov	r2, r1
    be9c:	4601      	mov	r1, r0
    be9e:	6820      	ldr	r0, [r4, #0]
    bea0:	bc10      	pop	{r4}
    bea2:	f7ff bfd1 	b.w	be48 <_vdprintf_r>
    bea6:	bf00      	nop
    bea8:	1fff8c50 	.word	0x1fff8c50

0000beac <__ascii_wctomb>:
    beac:	b121      	cbz	r1, beb8 <__ascii_wctomb+0xc>
    beae:	2aff      	cmp	r2, #255	; 0xff
    beb0:	d804      	bhi.n	bebc <__ascii_wctomb+0x10>
    beb2:	700a      	strb	r2, [r1, #0]
    beb4:	2001      	movs	r0, #1
    beb6:	4770      	bx	lr
    beb8:	4608      	mov	r0, r1
    beba:	4770      	bx	lr
    bebc:	238a      	movs	r3, #138	; 0x8a
    bebe:	6003      	str	r3, [r0, #0]
    bec0:	f04f 30ff 	mov.w	r0, #4294967295
    bec4:	4770      	bx	lr
    bec6:	bf00      	nop

0000bec8 <_write_r>:
    bec8:	b570      	push	{r4, r5, r6, lr}
    beca:	460d      	mov	r5, r1
    becc:	4c08      	ldr	r4, [pc, #32]	; (bef0 <_write_r+0x28>)
    bece:	4611      	mov	r1, r2
    bed0:	4606      	mov	r6, r0
    bed2:	461a      	mov	r2, r3
    bed4:	4628      	mov	r0, r5
    bed6:	2300      	movs	r3, #0
    bed8:	6023      	str	r3, [r4, #0]
    beda:	f7fd fe69 	bl	9bb0 <_write>
    bede:	1c43      	adds	r3, r0, #1
    bee0:	d000      	beq.n	bee4 <_write_r+0x1c>
    bee2:	bd70      	pop	{r4, r5, r6, pc}
    bee4:	6823      	ldr	r3, [r4, #0]
    bee6:	2b00      	cmp	r3, #0
    bee8:	d0fb      	beq.n	bee2 <_write_r+0x1a>
    beea:	6033      	str	r3, [r6, #0]
    beec:	bd70      	pop	{r4, r5, r6, pc}
    beee:	bf00      	nop
    bef0:	1fff9890 	.word	0x1fff9890

0000bef4 <__register_exitproc>:
    bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bef8:	4c25      	ldr	r4, [pc, #148]	; (bf90 <__register_exitproc+0x9c>)
    befa:	6825      	ldr	r5, [r4, #0]
    befc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    bf00:	4606      	mov	r6, r0
    bf02:	4688      	mov	r8, r1
    bf04:	4692      	mov	sl, r2
    bf06:	4699      	mov	r9, r3
    bf08:	b3c4      	cbz	r4, bf7c <__register_exitproc+0x88>
    bf0a:	6860      	ldr	r0, [r4, #4]
    bf0c:	281f      	cmp	r0, #31
    bf0e:	dc17      	bgt.n	bf40 <__register_exitproc+0x4c>
    bf10:	1c43      	adds	r3, r0, #1
    bf12:	b176      	cbz	r6, bf32 <__register_exitproc+0x3e>
    bf14:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    bf18:	2201      	movs	r2, #1
    bf1a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    bf1e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    bf22:	4082      	lsls	r2, r0
    bf24:	4311      	orrs	r1, r2
    bf26:	2e02      	cmp	r6, #2
    bf28:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    bf2c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    bf30:	d01e      	beq.n	bf70 <__register_exitproc+0x7c>
    bf32:	3002      	adds	r0, #2
    bf34:	6063      	str	r3, [r4, #4]
    bf36:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    bf3a:	2000      	movs	r0, #0
    bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf40:	4b14      	ldr	r3, [pc, #80]	; (bf94 <__register_exitproc+0xa0>)
    bf42:	b303      	cbz	r3, bf86 <__register_exitproc+0x92>
    bf44:	f44f 70c8 	mov.w	r0, #400	; 0x190
    bf48:	f7fe fffe 	bl	af48 <malloc>
    bf4c:	4604      	mov	r4, r0
    bf4e:	b1d0      	cbz	r0, bf86 <__register_exitproc+0x92>
    bf50:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    bf54:	2700      	movs	r7, #0
    bf56:	e880 0088 	stmia.w	r0, {r3, r7}
    bf5a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    bf5e:	4638      	mov	r0, r7
    bf60:	2301      	movs	r3, #1
    bf62:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    bf66:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    bf6a:	2e00      	cmp	r6, #0
    bf6c:	d0e1      	beq.n	bf32 <__register_exitproc+0x3e>
    bf6e:	e7d1      	b.n	bf14 <__register_exitproc+0x20>
    bf70:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    bf74:	430a      	orrs	r2, r1
    bf76:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    bf7a:	e7da      	b.n	bf32 <__register_exitproc+0x3e>
    bf7c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    bf80:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    bf84:	e7c1      	b.n	bf0a <__register_exitproc+0x16>
    bf86:	f04f 30ff 	mov.w	r0, #4294967295
    bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf8e:	bf00      	nop
    bf90:	00010a88 	.word	0x00010a88
    bf94:	0000af49 	.word	0x0000af49

0000bf98 <register_fini>:
    bf98:	4b02      	ldr	r3, [pc, #8]	; (bfa4 <register_fini+0xc>)
    bf9a:	b113      	cbz	r3, bfa2 <register_fini+0xa>
    bf9c:	4802      	ldr	r0, [pc, #8]	; (bfa8 <register_fini+0x10>)
    bf9e:	f000 b805 	b.w	bfac <atexit>
    bfa2:	4770      	bx	lr
    bfa4:	00000000 	.word	0x00000000
    bfa8:	0000bfb9 	.word	0x0000bfb9

0000bfac <atexit>:
    bfac:	2300      	movs	r3, #0
    bfae:	4601      	mov	r1, r0
    bfb0:	461a      	mov	r2, r3
    bfb2:	4618      	mov	r0, r3
    bfb4:	f7ff bf9e 	b.w	bef4 <__register_exitproc>

0000bfb8 <__libc_fini_array>:
    bfb8:	b538      	push	{r3, r4, r5, lr}
    bfba:	4d07      	ldr	r5, [pc, #28]	; (bfd8 <__libc_fini_array+0x20>)
    bfbc:	4c07      	ldr	r4, [pc, #28]	; (bfdc <__libc_fini_array+0x24>)
    bfbe:	1b2c      	subs	r4, r5, r4
    bfc0:	10a4      	asrs	r4, r4, #2
    bfc2:	d005      	beq.n	bfd0 <__libc_fini_array+0x18>
    bfc4:	3c01      	subs	r4, #1
    bfc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    bfca:	4798      	blx	r3
    bfcc:	2c00      	cmp	r4, #0
    bfce:	d1f9      	bne.n	bfc4 <__libc_fini_array+0xc>
    bfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bfd4:	f004 bec8 	b.w	10d68 <__init_array_end>
	...

0000bfe0 <_malloc_trim_r>:
    bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bfe2:	4f23      	ldr	r7, [pc, #140]	; (c070 <_malloc_trim_r+0x90>)
    bfe4:	460c      	mov	r4, r1
    bfe6:	4606      	mov	r6, r0
    bfe8:	f7ff fb70 	bl	b6cc <__malloc_lock>
    bfec:	68bb      	ldr	r3, [r7, #8]
    bfee:	685d      	ldr	r5, [r3, #4]
    bff0:	f025 0503 	bic.w	r5, r5, #3
    bff4:	1b29      	subs	r1, r5, r4
    bff6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    bffa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    bffe:	f021 010f 	bic.w	r1, r1, #15
    c002:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    c006:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c00a:	db07      	blt.n	c01c <_malloc_trim_r+0x3c>
    c00c:	2100      	movs	r1, #0
    c00e:	4630      	mov	r0, r6
    c010:	f7ff fd58 	bl	bac4 <_sbrk_r>
    c014:	68bb      	ldr	r3, [r7, #8]
    c016:	442b      	add	r3, r5
    c018:	4298      	cmp	r0, r3
    c01a:	d004      	beq.n	c026 <_malloc_trim_r+0x46>
    c01c:	4630      	mov	r0, r6
    c01e:	f7ff fb57 	bl	b6d0 <__malloc_unlock>
    c022:	2000      	movs	r0, #0
    c024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c026:	4261      	negs	r1, r4
    c028:	4630      	mov	r0, r6
    c02a:	f7ff fd4b 	bl	bac4 <_sbrk_r>
    c02e:	3001      	adds	r0, #1
    c030:	d00d      	beq.n	c04e <_malloc_trim_r+0x6e>
    c032:	4b10      	ldr	r3, [pc, #64]	; (c074 <_malloc_trim_r+0x94>)
    c034:	68ba      	ldr	r2, [r7, #8]
    c036:	6819      	ldr	r1, [r3, #0]
    c038:	1b2d      	subs	r5, r5, r4
    c03a:	f045 0501 	orr.w	r5, r5, #1
    c03e:	4630      	mov	r0, r6
    c040:	1b09      	subs	r1, r1, r4
    c042:	6055      	str	r5, [r2, #4]
    c044:	6019      	str	r1, [r3, #0]
    c046:	f7ff fb43 	bl	b6d0 <__malloc_unlock>
    c04a:	2001      	movs	r0, #1
    c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c04e:	2100      	movs	r1, #0
    c050:	4630      	mov	r0, r6
    c052:	f7ff fd37 	bl	bac4 <_sbrk_r>
    c056:	68ba      	ldr	r2, [r7, #8]
    c058:	1a83      	subs	r3, r0, r2
    c05a:	2b0f      	cmp	r3, #15
    c05c:	ddde      	ble.n	c01c <_malloc_trim_r+0x3c>
    c05e:	4c06      	ldr	r4, [pc, #24]	; (c078 <_malloc_trim_r+0x98>)
    c060:	4904      	ldr	r1, [pc, #16]	; (c074 <_malloc_trim_r+0x94>)
    c062:	6824      	ldr	r4, [r4, #0]
    c064:	f043 0301 	orr.w	r3, r3, #1
    c068:	1b00      	subs	r0, r0, r4
    c06a:	6053      	str	r3, [r2, #4]
    c06c:	6008      	str	r0, [r1, #0]
    c06e:	e7d5      	b.n	c01c <_malloc_trim_r+0x3c>
    c070:	1fff8dc0 	.word	0x1fff8dc0
    c074:	1fff9854 	.word	0x1fff9854
    c078:	1fff91cc 	.word	0x1fff91cc

0000c07c <_free_r>:
    c07c:	2900      	cmp	r1, #0
    c07e:	d045      	beq.n	c10c <_free_r+0x90>
    c080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c084:	460d      	mov	r5, r1
    c086:	4680      	mov	r8, r0
    c088:	f7ff fb20 	bl	b6cc <__malloc_lock>
    c08c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    c090:	496a      	ldr	r1, [pc, #424]	; (c23c <_free_r+0x1c0>)
    c092:	f027 0301 	bic.w	r3, r7, #1
    c096:	f1a5 0408 	sub.w	r4, r5, #8
    c09a:	18e2      	adds	r2, r4, r3
    c09c:	688e      	ldr	r6, [r1, #8]
    c09e:	6850      	ldr	r0, [r2, #4]
    c0a0:	42b2      	cmp	r2, r6
    c0a2:	f020 0003 	bic.w	r0, r0, #3
    c0a6:	d062      	beq.n	c16e <_free_r+0xf2>
    c0a8:	07fe      	lsls	r6, r7, #31
    c0aa:	6050      	str	r0, [r2, #4]
    c0ac:	d40b      	bmi.n	c0c6 <_free_r+0x4a>
    c0ae:	f855 7c08 	ldr.w	r7, [r5, #-8]
    c0b2:	1be4      	subs	r4, r4, r7
    c0b4:	f101 0e08 	add.w	lr, r1, #8
    c0b8:	68a5      	ldr	r5, [r4, #8]
    c0ba:	4575      	cmp	r5, lr
    c0bc:	443b      	add	r3, r7
    c0be:	d06f      	beq.n	c1a0 <_free_r+0x124>
    c0c0:	68e7      	ldr	r7, [r4, #12]
    c0c2:	60ef      	str	r7, [r5, #12]
    c0c4:	60bd      	str	r5, [r7, #8]
    c0c6:	1815      	adds	r5, r2, r0
    c0c8:	686d      	ldr	r5, [r5, #4]
    c0ca:	07ed      	lsls	r5, r5, #31
    c0cc:	d542      	bpl.n	c154 <_free_r+0xd8>
    c0ce:	f043 0201 	orr.w	r2, r3, #1
    c0d2:	6062      	str	r2, [r4, #4]
    c0d4:	50e3      	str	r3, [r4, r3]
    c0d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c0da:	d218      	bcs.n	c10e <_free_r+0x92>
    c0dc:	08db      	lsrs	r3, r3, #3
    c0de:	1c5a      	adds	r2, r3, #1
    c0e0:	684d      	ldr	r5, [r1, #4]
    c0e2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    c0e6:	60a7      	str	r7, [r4, #8]
    c0e8:	2001      	movs	r0, #1
    c0ea:	109b      	asrs	r3, r3, #2
    c0ec:	fa00 f303 	lsl.w	r3, r0, r3
    c0f0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    c0f4:	431d      	orrs	r5, r3
    c0f6:	3808      	subs	r0, #8
    c0f8:	60e0      	str	r0, [r4, #12]
    c0fa:	604d      	str	r5, [r1, #4]
    c0fc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    c100:	60fc      	str	r4, [r7, #12]
    c102:	4640      	mov	r0, r8
    c104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c108:	f7ff bae2 	b.w	b6d0 <__malloc_unlock>
    c10c:	4770      	bx	lr
    c10e:	0a5a      	lsrs	r2, r3, #9
    c110:	2a04      	cmp	r2, #4
    c112:	d853      	bhi.n	c1bc <_free_r+0x140>
    c114:	099a      	lsrs	r2, r3, #6
    c116:	f102 0739 	add.w	r7, r2, #57	; 0x39
    c11a:	007f      	lsls	r7, r7, #1
    c11c:	f102 0538 	add.w	r5, r2, #56	; 0x38
    c120:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    c124:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    c128:	4944      	ldr	r1, [pc, #272]	; (c23c <_free_r+0x1c0>)
    c12a:	3808      	subs	r0, #8
    c12c:	4290      	cmp	r0, r2
    c12e:	d04d      	beq.n	c1cc <_free_r+0x150>
    c130:	6851      	ldr	r1, [r2, #4]
    c132:	f021 0103 	bic.w	r1, r1, #3
    c136:	428b      	cmp	r3, r1
    c138:	d202      	bcs.n	c140 <_free_r+0xc4>
    c13a:	6892      	ldr	r2, [r2, #8]
    c13c:	4290      	cmp	r0, r2
    c13e:	d1f7      	bne.n	c130 <_free_r+0xb4>
    c140:	68d0      	ldr	r0, [r2, #12]
    c142:	60e0      	str	r0, [r4, #12]
    c144:	60a2      	str	r2, [r4, #8]
    c146:	6084      	str	r4, [r0, #8]
    c148:	60d4      	str	r4, [r2, #12]
    c14a:	4640      	mov	r0, r8
    c14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c150:	f7ff babe 	b.w	b6d0 <__malloc_unlock>
    c154:	6895      	ldr	r5, [r2, #8]
    c156:	4f3a      	ldr	r7, [pc, #232]	; (c240 <_free_r+0x1c4>)
    c158:	42bd      	cmp	r5, r7
    c15a:	4403      	add	r3, r0
    c15c:	d03f      	beq.n	c1de <_free_r+0x162>
    c15e:	68d0      	ldr	r0, [r2, #12]
    c160:	60e8      	str	r0, [r5, #12]
    c162:	f043 0201 	orr.w	r2, r3, #1
    c166:	6085      	str	r5, [r0, #8]
    c168:	6062      	str	r2, [r4, #4]
    c16a:	50e3      	str	r3, [r4, r3]
    c16c:	e7b3      	b.n	c0d6 <_free_r+0x5a>
    c16e:	07ff      	lsls	r7, r7, #31
    c170:	4403      	add	r3, r0
    c172:	d407      	bmi.n	c184 <_free_r+0x108>
    c174:	f855 2c08 	ldr.w	r2, [r5, #-8]
    c178:	1aa4      	subs	r4, r4, r2
    c17a:	4413      	add	r3, r2
    c17c:	68a0      	ldr	r0, [r4, #8]
    c17e:	68e2      	ldr	r2, [r4, #12]
    c180:	60c2      	str	r2, [r0, #12]
    c182:	6090      	str	r0, [r2, #8]
    c184:	4a2f      	ldr	r2, [pc, #188]	; (c244 <_free_r+0x1c8>)
    c186:	6812      	ldr	r2, [r2, #0]
    c188:	f043 0001 	orr.w	r0, r3, #1
    c18c:	4293      	cmp	r3, r2
    c18e:	6060      	str	r0, [r4, #4]
    c190:	608c      	str	r4, [r1, #8]
    c192:	d3b6      	bcc.n	c102 <_free_r+0x86>
    c194:	4b2c      	ldr	r3, [pc, #176]	; (c248 <_free_r+0x1cc>)
    c196:	4640      	mov	r0, r8
    c198:	6819      	ldr	r1, [r3, #0]
    c19a:	f7ff ff21 	bl	bfe0 <_malloc_trim_r>
    c19e:	e7b0      	b.n	c102 <_free_r+0x86>
    c1a0:	1811      	adds	r1, r2, r0
    c1a2:	6849      	ldr	r1, [r1, #4]
    c1a4:	07c9      	lsls	r1, r1, #31
    c1a6:	d444      	bmi.n	c232 <_free_r+0x1b6>
    c1a8:	6891      	ldr	r1, [r2, #8]
    c1aa:	68d2      	ldr	r2, [r2, #12]
    c1ac:	60ca      	str	r2, [r1, #12]
    c1ae:	4403      	add	r3, r0
    c1b0:	f043 0001 	orr.w	r0, r3, #1
    c1b4:	6091      	str	r1, [r2, #8]
    c1b6:	6060      	str	r0, [r4, #4]
    c1b8:	50e3      	str	r3, [r4, r3]
    c1ba:	e7a2      	b.n	c102 <_free_r+0x86>
    c1bc:	2a14      	cmp	r2, #20
    c1be:	d817      	bhi.n	c1f0 <_free_r+0x174>
    c1c0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    c1c4:	007f      	lsls	r7, r7, #1
    c1c6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    c1ca:	e7a9      	b.n	c120 <_free_r+0xa4>
    c1cc:	10aa      	asrs	r2, r5, #2
    c1ce:	684b      	ldr	r3, [r1, #4]
    c1d0:	2501      	movs	r5, #1
    c1d2:	fa05 f202 	lsl.w	r2, r5, r2
    c1d6:	4313      	orrs	r3, r2
    c1d8:	604b      	str	r3, [r1, #4]
    c1da:	4602      	mov	r2, r0
    c1dc:	e7b1      	b.n	c142 <_free_r+0xc6>
    c1de:	f043 0201 	orr.w	r2, r3, #1
    c1e2:	614c      	str	r4, [r1, #20]
    c1e4:	610c      	str	r4, [r1, #16]
    c1e6:	60e5      	str	r5, [r4, #12]
    c1e8:	60a5      	str	r5, [r4, #8]
    c1ea:	6062      	str	r2, [r4, #4]
    c1ec:	50e3      	str	r3, [r4, r3]
    c1ee:	e788      	b.n	c102 <_free_r+0x86>
    c1f0:	2a54      	cmp	r2, #84	; 0x54
    c1f2:	d806      	bhi.n	c202 <_free_r+0x186>
    c1f4:	0b1a      	lsrs	r2, r3, #12
    c1f6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    c1fa:	007f      	lsls	r7, r7, #1
    c1fc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    c200:	e78e      	b.n	c120 <_free_r+0xa4>
    c202:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    c206:	d806      	bhi.n	c216 <_free_r+0x19a>
    c208:	0bda      	lsrs	r2, r3, #15
    c20a:	f102 0778 	add.w	r7, r2, #120	; 0x78
    c20e:	007f      	lsls	r7, r7, #1
    c210:	f102 0577 	add.w	r5, r2, #119	; 0x77
    c214:	e784      	b.n	c120 <_free_r+0xa4>
    c216:	f240 5054 	movw	r0, #1364	; 0x554
    c21a:	4282      	cmp	r2, r0
    c21c:	d806      	bhi.n	c22c <_free_r+0x1b0>
    c21e:	0c9a      	lsrs	r2, r3, #18
    c220:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    c224:	007f      	lsls	r7, r7, #1
    c226:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    c22a:	e779      	b.n	c120 <_free_r+0xa4>
    c22c:	27fe      	movs	r7, #254	; 0xfe
    c22e:	257e      	movs	r5, #126	; 0x7e
    c230:	e776      	b.n	c120 <_free_r+0xa4>
    c232:	f043 0201 	orr.w	r2, r3, #1
    c236:	6062      	str	r2, [r4, #4]
    c238:	50e3      	str	r3, [r4, r3]
    c23a:	e762      	b.n	c102 <_free_r+0x86>
    c23c:	1fff8dc0 	.word	0x1fff8dc0
    c240:	1fff8dc8 	.word	0x1fff8dc8
    c244:	1fff91c8 	.word	0x1fff91c8
    c248:	1fff9850 	.word	0x1fff9850

0000c24c <_localeconv_r>:
    c24c:	4a04      	ldr	r2, [pc, #16]	; (c260 <_localeconv_r+0x14>)
    c24e:	4b05      	ldr	r3, [pc, #20]	; (c264 <_localeconv_r+0x18>)
    c250:	6812      	ldr	r2, [r2, #0]
    c252:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c254:	2800      	cmp	r0, #0
    c256:	bf08      	it	eq
    c258:	4618      	moveq	r0, r3
    c25a:	30f0      	adds	r0, #240	; 0xf0
    c25c:	4770      	bx	lr
    c25e:	bf00      	nop
    c260:	1fff8c50 	.word	0x1fff8c50
    c264:	1fff8c54 	.word	0x1fff8c54
    c268:	ffffffff 	.word	0xffffffff
    c26c:	ffffffff 	.word	0xffffffff

0000c270 <memchr>:
    c270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c274:	2a10      	cmp	r2, #16
    c276:	db2b      	blt.n	c2d0 <memchr+0x60>
    c278:	f010 0f07 	tst.w	r0, #7
    c27c:	d008      	beq.n	c290 <memchr+0x20>
    c27e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c282:	3a01      	subs	r2, #1
    c284:	428b      	cmp	r3, r1
    c286:	d02d      	beq.n	c2e4 <memchr+0x74>
    c288:	f010 0f07 	tst.w	r0, #7
    c28c:	b342      	cbz	r2, c2e0 <memchr+0x70>
    c28e:	d1f6      	bne.n	c27e <memchr+0xe>
    c290:	b4f0      	push	{r4, r5, r6, r7}
    c292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c29a:	f022 0407 	bic.w	r4, r2, #7
    c29e:	f07f 0700 	mvns.w	r7, #0
    c2a2:	2300      	movs	r3, #0
    c2a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c2a8:	3c08      	subs	r4, #8
    c2aa:	ea85 0501 	eor.w	r5, r5, r1
    c2ae:	ea86 0601 	eor.w	r6, r6, r1
    c2b2:	fa85 f547 	uadd8	r5, r5, r7
    c2b6:	faa3 f587 	sel	r5, r3, r7
    c2ba:	fa86 f647 	uadd8	r6, r6, r7
    c2be:	faa5 f687 	sel	r6, r5, r7
    c2c2:	b98e      	cbnz	r6, c2e8 <memchr+0x78>
    c2c4:	d1ee      	bne.n	c2a4 <memchr+0x34>
    c2c6:	bcf0      	pop	{r4, r5, r6, r7}
    c2c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c2cc:	f002 0207 	and.w	r2, r2, #7
    c2d0:	b132      	cbz	r2, c2e0 <memchr+0x70>
    c2d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2d6:	3a01      	subs	r2, #1
    c2d8:	ea83 0301 	eor.w	r3, r3, r1
    c2dc:	b113      	cbz	r3, c2e4 <memchr+0x74>
    c2de:	d1f8      	bne.n	c2d2 <memchr+0x62>
    c2e0:	2000      	movs	r0, #0
    c2e2:	4770      	bx	lr
    c2e4:	3801      	subs	r0, #1
    c2e6:	4770      	bx	lr
    c2e8:	2d00      	cmp	r5, #0
    c2ea:	bf06      	itte	eq
    c2ec:	4635      	moveq	r5, r6
    c2ee:	3803      	subeq	r0, #3
    c2f0:	3807      	subne	r0, #7
    c2f2:	f015 0f01 	tst.w	r5, #1
    c2f6:	d107      	bne.n	c308 <memchr+0x98>
    c2f8:	3001      	adds	r0, #1
    c2fa:	f415 7f80 	tst.w	r5, #256	; 0x100
    c2fe:	bf02      	ittt	eq
    c300:	3001      	addeq	r0, #1
    c302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c306:	3001      	addeq	r0, #1
    c308:	bcf0      	pop	{r4, r5, r6, r7}
    c30a:	3801      	subs	r0, #1
    c30c:	4770      	bx	lr
    c30e:	bf00      	nop

0000c310 <_Balloc>:
    c310:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c312:	b570      	push	{r4, r5, r6, lr}
    c314:	4605      	mov	r5, r0
    c316:	460c      	mov	r4, r1
    c318:	b14b      	cbz	r3, c32e <_Balloc+0x1e>
    c31a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c31e:	b180      	cbz	r0, c342 <_Balloc+0x32>
    c320:	6802      	ldr	r2, [r0, #0]
    c322:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c326:	2300      	movs	r3, #0
    c328:	6103      	str	r3, [r0, #16]
    c32a:	60c3      	str	r3, [r0, #12]
    c32c:	bd70      	pop	{r4, r5, r6, pc}
    c32e:	2221      	movs	r2, #33	; 0x21
    c330:	2104      	movs	r1, #4
    c332:	f000 fb2b 	bl	c98c <_calloc_r>
    c336:	64e8      	str	r0, [r5, #76]	; 0x4c
    c338:	4603      	mov	r3, r0
    c33a:	2800      	cmp	r0, #0
    c33c:	d1ed      	bne.n	c31a <_Balloc+0xa>
    c33e:	2000      	movs	r0, #0
    c340:	bd70      	pop	{r4, r5, r6, pc}
    c342:	2101      	movs	r1, #1
    c344:	fa01 f604 	lsl.w	r6, r1, r4
    c348:	1d72      	adds	r2, r6, #5
    c34a:	4628      	mov	r0, r5
    c34c:	0092      	lsls	r2, r2, #2
    c34e:	f000 fb1d 	bl	c98c <_calloc_r>
    c352:	2800      	cmp	r0, #0
    c354:	d0f3      	beq.n	c33e <_Balloc+0x2e>
    c356:	6044      	str	r4, [r0, #4]
    c358:	6086      	str	r6, [r0, #8]
    c35a:	e7e4      	b.n	c326 <_Balloc+0x16>

0000c35c <_Bfree>:
    c35c:	b131      	cbz	r1, c36c <_Bfree+0x10>
    c35e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c360:	684a      	ldr	r2, [r1, #4]
    c362:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c366:	6008      	str	r0, [r1, #0]
    c368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c36c:	4770      	bx	lr
    c36e:	bf00      	nop

0000c370 <__multadd>:
    c370:	b5f0      	push	{r4, r5, r6, r7, lr}
    c372:	690c      	ldr	r4, [r1, #16]
    c374:	b083      	sub	sp, #12
    c376:	460d      	mov	r5, r1
    c378:	4606      	mov	r6, r0
    c37a:	f101 0e14 	add.w	lr, r1, #20
    c37e:	2700      	movs	r7, #0
    c380:	f8de 0000 	ldr.w	r0, [lr]
    c384:	b281      	uxth	r1, r0
    c386:	fb02 3101 	mla	r1, r2, r1, r3
    c38a:	0c0b      	lsrs	r3, r1, #16
    c38c:	0c00      	lsrs	r0, r0, #16
    c38e:	fb02 3300 	mla	r3, r2, r0, r3
    c392:	b289      	uxth	r1, r1
    c394:	3701      	adds	r7, #1
    c396:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    c39a:	42bc      	cmp	r4, r7
    c39c:	f84e 1b04 	str.w	r1, [lr], #4
    c3a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    c3a4:	dcec      	bgt.n	c380 <__multadd+0x10>
    c3a6:	b13b      	cbz	r3, c3b8 <__multadd+0x48>
    c3a8:	68aa      	ldr	r2, [r5, #8]
    c3aa:	4294      	cmp	r4, r2
    c3ac:	da07      	bge.n	c3be <__multadd+0x4e>
    c3ae:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    c3b2:	3401      	adds	r4, #1
    c3b4:	6153      	str	r3, [r2, #20]
    c3b6:	612c      	str	r4, [r5, #16]
    c3b8:	4628      	mov	r0, r5
    c3ba:	b003      	add	sp, #12
    c3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3be:	6869      	ldr	r1, [r5, #4]
    c3c0:	9301      	str	r3, [sp, #4]
    c3c2:	3101      	adds	r1, #1
    c3c4:	4630      	mov	r0, r6
    c3c6:	f7ff ffa3 	bl	c310 <_Balloc>
    c3ca:	692a      	ldr	r2, [r5, #16]
    c3cc:	3202      	adds	r2, #2
    c3ce:	f105 010c 	add.w	r1, r5, #12
    c3d2:	4607      	mov	r7, r0
    c3d4:	0092      	lsls	r2, r2, #2
    c3d6:	300c      	adds	r0, #12
    c3d8:	f7fb ff90 	bl	82fc <memcpy>
    c3dc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    c3de:	6869      	ldr	r1, [r5, #4]
    c3e0:	9b01      	ldr	r3, [sp, #4]
    c3e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    c3e6:	6028      	str	r0, [r5, #0]
    c3e8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    c3ec:	463d      	mov	r5, r7
    c3ee:	e7de      	b.n	c3ae <__multadd+0x3e>

0000c3f0 <__hi0bits>:
    c3f0:	0c03      	lsrs	r3, r0, #16
    c3f2:	041b      	lsls	r3, r3, #16
    c3f4:	b9b3      	cbnz	r3, c424 <__hi0bits+0x34>
    c3f6:	0400      	lsls	r0, r0, #16
    c3f8:	2310      	movs	r3, #16
    c3fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c3fe:	bf04      	itt	eq
    c400:	0200      	lsleq	r0, r0, #8
    c402:	3308      	addeq	r3, #8
    c404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c408:	bf04      	itt	eq
    c40a:	0100      	lsleq	r0, r0, #4
    c40c:	3304      	addeq	r3, #4
    c40e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c412:	bf04      	itt	eq
    c414:	0080      	lsleq	r0, r0, #2
    c416:	3302      	addeq	r3, #2
    c418:	2800      	cmp	r0, #0
    c41a:	db07      	blt.n	c42c <__hi0bits+0x3c>
    c41c:	0042      	lsls	r2, r0, #1
    c41e:	d403      	bmi.n	c428 <__hi0bits+0x38>
    c420:	2020      	movs	r0, #32
    c422:	4770      	bx	lr
    c424:	2300      	movs	r3, #0
    c426:	e7e8      	b.n	c3fa <__hi0bits+0xa>
    c428:	1c58      	adds	r0, r3, #1
    c42a:	4770      	bx	lr
    c42c:	4618      	mov	r0, r3
    c42e:	4770      	bx	lr

0000c430 <__lo0bits>:
    c430:	6803      	ldr	r3, [r0, #0]
    c432:	f013 0207 	ands.w	r2, r3, #7
    c436:	d007      	beq.n	c448 <__lo0bits+0x18>
    c438:	07d9      	lsls	r1, r3, #31
    c43a:	d420      	bmi.n	c47e <__lo0bits+0x4e>
    c43c:	079a      	lsls	r2, r3, #30
    c43e:	d420      	bmi.n	c482 <__lo0bits+0x52>
    c440:	089b      	lsrs	r3, r3, #2
    c442:	6003      	str	r3, [r0, #0]
    c444:	2002      	movs	r0, #2
    c446:	4770      	bx	lr
    c448:	b299      	uxth	r1, r3
    c44a:	b909      	cbnz	r1, c450 <__lo0bits+0x20>
    c44c:	0c1b      	lsrs	r3, r3, #16
    c44e:	2210      	movs	r2, #16
    c450:	f013 0fff 	tst.w	r3, #255	; 0xff
    c454:	bf04      	itt	eq
    c456:	0a1b      	lsreq	r3, r3, #8
    c458:	3208      	addeq	r2, #8
    c45a:	0719      	lsls	r1, r3, #28
    c45c:	bf04      	itt	eq
    c45e:	091b      	lsreq	r3, r3, #4
    c460:	3204      	addeq	r2, #4
    c462:	0799      	lsls	r1, r3, #30
    c464:	bf04      	itt	eq
    c466:	089b      	lsreq	r3, r3, #2
    c468:	3202      	addeq	r2, #2
    c46a:	07d9      	lsls	r1, r3, #31
    c46c:	d404      	bmi.n	c478 <__lo0bits+0x48>
    c46e:	085b      	lsrs	r3, r3, #1
    c470:	d101      	bne.n	c476 <__lo0bits+0x46>
    c472:	2020      	movs	r0, #32
    c474:	4770      	bx	lr
    c476:	3201      	adds	r2, #1
    c478:	6003      	str	r3, [r0, #0]
    c47a:	4610      	mov	r0, r2
    c47c:	4770      	bx	lr
    c47e:	2000      	movs	r0, #0
    c480:	4770      	bx	lr
    c482:	085b      	lsrs	r3, r3, #1
    c484:	6003      	str	r3, [r0, #0]
    c486:	2001      	movs	r0, #1
    c488:	4770      	bx	lr
    c48a:	bf00      	nop

0000c48c <__i2b>:
    c48c:	b510      	push	{r4, lr}
    c48e:	460c      	mov	r4, r1
    c490:	2101      	movs	r1, #1
    c492:	f7ff ff3d 	bl	c310 <_Balloc>
    c496:	2201      	movs	r2, #1
    c498:	6144      	str	r4, [r0, #20]
    c49a:	6102      	str	r2, [r0, #16]
    c49c:	bd10      	pop	{r4, pc}
    c49e:	bf00      	nop

0000c4a0 <__multiply>:
    c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4a4:	690d      	ldr	r5, [r1, #16]
    c4a6:	6917      	ldr	r7, [r2, #16]
    c4a8:	42bd      	cmp	r5, r7
    c4aa:	b083      	sub	sp, #12
    c4ac:	460c      	mov	r4, r1
    c4ae:	4616      	mov	r6, r2
    c4b0:	da04      	bge.n	c4bc <__multiply+0x1c>
    c4b2:	462a      	mov	r2, r5
    c4b4:	4634      	mov	r4, r6
    c4b6:	463d      	mov	r5, r7
    c4b8:	460e      	mov	r6, r1
    c4ba:	4617      	mov	r7, r2
    c4bc:	68a3      	ldr	r3, [r4, #8]
    c4be:	6861      	ldr	r1, [r4, #4]
    c4c0:	eb05 0807 	add.w	r8, r5, r7
    c4c4:	4598      	cmp	r8, r3
    c4c6:	bfc8      	it	gt
    c4c8:	3101      	addgt	r1, #1
    c4ca:	f7ff ff21 	bl	c310 <_Balloc>
    c4ce:	f100 0c14 	add.w	ip, r0, #20
    c4d2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    c4d6:	45cc      	cmp	ip, r9
    c4d8:	9000      	str	r0, [sp, #0]
    c4da:	d205      	bcs.n	c4e8 <__multiply+0x48>
    c4dc:	4663      	mov	r3, ip
    c4de:	2100      	movs	r1, #0
    c4e0:	f843 1b04 	str.w	r1, [r3], #4
    c4e4:	4599      	cmp	r9, r3
    c4e6:	d8fb      	bhi.n	c4e0 <__multiply+0x40>
    c4e8:	f106 0214 	add.w	r2, r6, #20
    c4ec:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    c4f0:	f104 0314 	add.w	r3, r4, #20
    c4f4:	4552      	cmp	r2, sl
    c4f6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    c4fa:	d254      	bcs.n	c5a6 <__multiply+0x106>
    c4fc:	f8cd 9004 	str.w	r9, [sp, #4]
    c500:	4699      	mov	r9, r3
    c502:	f852 3b04 	ldr.w	r3, [r2], #4
    c506:	fa1f fb83 	uxth.w	fp, r3
    c50a:	f1bb 0f00 	cmp.w	fp, #0
    c50e:	d020      	beq.n	c552 <__multiply+0xb2>
    c510:	2000      	movs	r0, #0
    c512:	464f      	mov	r7, r9
    c514:	4666      	mov	r6, ip
    c516:	4605      	mov	r5, r0
    c518:	e000      	b.n	c51c <__multiply+0x7c>
    c51a:	461e      	mov	r6, r3
    c51c:	f857 4b04 	ldr.w	r4, [r7], #4
    c520:	6830      	ldr	r0, [r6, #0]
    c522:	b2a1      	uxth	r1, r4
    c524:	b283      	uxth	r3, r0
    c526:	fb0b 3101 	mla	r1, fp, r1, r3
    c52a:	0c24      	lsrs	r4, r4, #16
    c52c:	0c00      	lsrs	r0, r0, #16
    c52e:	194b      	adds	r3, r1, r5
    c530:	fb0b 0004 	mla	r0, fp, r4, r0
    c534:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    c538:	b299      	uxth	r1, r3
    c53a:	4633      	mov	r3, r6
    c53c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c540:	45be      	cmp	lr, r7
    c542:	ea4f 4510 	mov.w	r5, r0, lsr #16
    c546:	f843 1b04 	str.w	r1, [r3], #4
    c54a:	d8e6      	bhi.n	c51a <__multiply+0x7a>
    c54c:	6075      	str	r5, [r6, #4]
    c54e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    c552:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    c556:	d020      	beq.n	c59a <__multiply+0xfa>
    c558:	f8dc 3000 	ldr.w	r3, [ip]
    c55c:	4667      	mov	r7, ip
    c55e:	4618      	mov	r0, r3
    c560:	464d      	mov	r5, r9
    c562:	2100      	movs	r1, #0
    c564:	e000      	b.n	c568 <__multiply+0xc8>
    c566:	4637      	mov	r7, r6
    c568:	882c      	ldrh	r4, [r5, #0]
    c56a:	0c00      	lsrs	r0, r0, #16
    c56c:	fb0b 0004 	mla	r0, fp, r4, r0
    c570:	4401      	add	r1, r0
    c572:	b29c      	uxth	r4, r3
    c574:	463e      	mov	r6, r7
    c576:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    c57a:	f846 3b04 	str.w	r3, [r6], #4
    c57e:	6878      	ldr	r0, [r7, #4]
    c580:	f855 4b04 	ldr.w	r4, [r5], #4
    c584:	b283      	uxth	r3, r0
    c586:	0c24      	lsrs	r4, r4, #16
    c588:	fb0b 3404 	mla	r4, fp, r4, r3
    c58c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    c590:	45ae      	cmp	lr, r5
    c592:	ea4f 4113 	mov.w	r1, r3, lsr #16
    c596:	d8e6      	bhi.n	c566 <__multiply+0xc6>
    c598:	607b      	str	r3, [r7, #4]
    c59a:	4592      	cmp	sl, r2
    c59c:	f10c 0c04 	add.w	ip, ip, #4
    c5a0:	d8af      	bhi.n	c502 <__multiply+0x62>
    c5a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    c5a6:	f1b8 0f00 	cmp.w	r8, #0
    c5aa:	dd0b      	ble.n	c5c4 <__multiply+0x124>
    c5ac:	f859 3c04 	ldr.w	r3, [r9, #-4]
    c5b0:	f1a9 0904 	sub.w	r9, r9, #4
    c5b4:	b11b      	cbz	r3, c5be <__multiply+0x11e>
    c5b6:	e005      	b.n	c5c4 <__multiply+0x124>
    c5b8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    c5bc:	b913      	cbnz	r3, c5c4 <__multiply+0x124>
    c5be:	f1b8 0801 	subs.w	r8, r8, #1
    c5c2:	d1f9      	bne.n	c5b8 <__multiply+0x118>
    c5c4:	9800      	ldr	r0, [sp, #0]
    c5c6:	f8c0 8010 	str.w	r8, [r0, #16]
    c5ca:	b003      	add	sp, #12
    c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c5d0 <__pow5mult>:
    c5d0:	f012 0303 	ands.w	r3, r2, #3
    c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5d8:	4614      	mov	r4, r2
    c5da:	4607      	mov	r7, r0
    c5dc:	d12e      	bne.n	c63c <__pow5mult+0x6c>
    c5de:	460e      	mov	r6, r1
    c5e0:	10a4      	asrs	r4, r4, #2
    c5e2:	d01c      	beq.n	c61e <__pow5mult+0x4e>
    c5e4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    c5e6:	b395      	cbz	r5, c64e <__pow5mult+0x7e>
    c5e8:	07e3      	lsls	r3, r4, #31
    c5ea:	f04f 0800 	mov.w	r8, #0
    c5ee:	d406      	bmi.n	c5fe <__pow5mult+0x2e>
    c5f0:	1064      	asrs	r4, r4, #1
    c5f2:	d014      	beq.n	c61e <__pow5mult+0x4e>
    c5f4:	6828      	ldr	r0, [r5, #0]
    c5f6:	b1a8      	cbz	r0, c624 <__pow5mult+0x54>
    c5f8:	4605      	mov	r5, r0
    c5fa:	07e3      	lsls	r3, r4, #31
    c5fc:	d5f8      	bpl.n	c5f0 <__pow5mult+0x20>
    c5fe:	462a      	mov	r2, r5
    c600:	4631      	mov	r1, r6
    c602:	4638      	mov	r0, r7
    c604:	f7ff ff4c 	bl	c4a0 <__multiply>
    c608:	b1b6      	cbz	r6, c638 <__pow5mult+0x68>
    c60a:	6872      	ldr	r2, [r6, #4]
    c60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c60e:	1064      	asrs	r4, r4, #1
    c610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c614:	6031      	str	r1, [r6, #0]
    c616:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    c61a:	4606      	mov	r6, r0
    c61c:	d1ea      	bne.n	c5f4 <__pow5mult+0x24>
    c61e:	4630      	mov	r0, r6
    c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c624:	462a      	mov	r2, r5
    c626:	4629      	mov	r1, r5
    c628:	4638      	mov	r0, r7
    c62a:	f7ff ff39 	bl	c4a0 <__multiply>
    c62e:	6028      	str	r0, [r5, #0]
    c630:	f8c0 8000 	str.w	r8, [r0]
    c634:	4605      	mov	r5, r0
    c636:	e7e0      	b.n	c5fa <__pow5mult+0x2a>
    c638:	4606      	mov	r6, r0
    c63a:	e7d9      	b.n	c5f0 <__pow5mult+0x20>
    c63c:	1e5a      	subs	r2, r3, #1
    c63e:	4d0b      	ldr	r5, [pc, #44]	; (c66c <__pow5mult+0x9c>)
    c640:	2300      	movs	r3, #0
    c642:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    c646:	f7ff fe93 	bl	c370 <__multadd>
    c64a:	4606      	mov	r6, r0
    c64c:	e7c8      	b.n	c5e0 <__pow5mult+0x10>
    c64e:	2101      	movs	r1, #1
    c650:	4638      	mov	r0, r7
    c652:	f7ff fe5d 	bl	c310 <_Balloc>
    c656:	f240 2171 	movw	r1, #625	; 0x271
    c65a:	2201      	movs	r2, #1
    c65c:	2300      	movs	r3, #0
    c65e:	6141      	str	r1, [r0, #20]
    c660:	6102      	str	r2, [r0, #16]
    c662:	4605      	mov	r5, r0
    c664:	64b8      	str	r0, [r7, #72]	; 0x48
    c666:	6003      	str	r3, [r0, #0]
    c668:	e7be      	b.n	c5e8 <__pow5mult+0x18>
    c66a:	bf00      	nop
    c66c:	00010c90 	.word	0x00010c90

0000c670 <__lshift>:
    c670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c674:	4691      	mov	r9, r2
    c676:	690a      	ldr	r2, [r1, #16]
    c678:	688b      	ldr	r3, [r1, #8]
    c67a:	ea4f 1469 	mov.w	r4, r9, asr #5
    c67e:	eb04 0802 	add.w	r8, r4, r2
    c682:	f108 0501 	add.w	r5, r8, #1
    c686:	429d      	cmp	r5, r3
    c688:	460e      	mov	r6, r1
    c68a:	4682      	mov	sl, r0
    c68c:	6849      	ldr	r1, [r1, #4]
    c68e:	dd04      	ble.n	c69a <__lshift+0x2a>
    c690:	005b      	lsls	r3, r3, #1
    c692:	429d      	cmp	r5, r3
    c694:	f101 0101 	add.w	r1, r1, #1
    c698:	dcfa      	bgt.n	c690 <__lshift+0x20>
    c69a:	4650      	mov	r0, sl
    c69c:	f7ff fe38 	bl	c310 <_Balloc>
    c6a0:	2c00      	cmp	r4, #0
    c6a2:	f100 0214 	add.w	r2, r0, #20
    c6a6:	dd38      	ble.n	c71a <__lshift+0xaa>
    c6a8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    c6ac:	2100      	movs	r1, #0
    c6ae:	f842 1b04 	str.w	r1, [r2], #4
    c6b2:	4293      	cmp	r3, r2
    c6b4:	d1fb      	bne.n	c6ae <__lshift+0x3e>
    c6b6:	6934      	ldr	r4, [r6, #16]
    c6b8:	f106 0114 	add.w	r1, r6, #20
    c6bc:	f019 091f 	ands.w	r9, r9, #31
    c6c0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    c6c4:	d021      	beq.n	c70a <__lshift+0x9a>
    c6c6:	f1c9 0220 	rsb	r2, r9, #32
    c6ca:	2400      	movs	r4, #0
    c6cc:	680f      	ldr	r7, [r1, #0]
    c6ce:	fa07 fc09 	lsl.w	ip, r7, r9
    c6d2:	ea4c 0404 	orr.w	r4, ip, r4
    c6d6:	469c      	mov	ip, r3
    c6d8:	f843 4b04 	str.w	r4, [r3], #4
    c6dc:	f851 4b04 	ldr.w	r4, [r1], #4
    c6e0:	458e      	cmp	lr, r1
    c6e2:	fa24 f402 	lsr.w	r4, r4, r2
    c6e6:	d8f1      	bhi.n	c6cc <__lshift+0x5c>
    c6e8:	f8cc 4004 	str.w	r4, [ip, #4]
    c6ec:	b10c      	cbz	r4, c6f2 <__lshift+0x82>
    c6ee:	f108 0502 	add.w	r5, r8, #2
    c6f2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    c6f6:	6872      	ldr	r2, [r6, #4]
    c6f8:	3d01      	subs	r5, #1
    c6fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c6fe:	6105      	str	r5, [r0, #16]
    c700:	6031      	str	r1, [r6, #0]
    c702:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    c706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c70a:	3b04      	subs	r3, #4
    c70c:	f851 2b04 	ldr.w	r2, [r1], #4
    c710:	f843 2f04 	str.w	r2, [r3, #4]!
    c714:	458e      	cmp	lr, r1
    c716:	d8f9      	bhi.n	c70c <__lshift+0x9c>
    c718:	e7eb      	b.n	c6f2 <__lshift+0x82>
    c71a:	4613      	mov	r3, r2
    c71c:	e7cb      	b.n	c6b6 <__lshift+0x46>
    c71e:	bf00      	nop

0000c720 <__mcmp>:
    c720:	6902      	ldr	r2, [r0, #16]
    c722:	690b      	ldr	r3, [r1, #16]
    c724:	1ad2      	subs	r2, r2, r3
    c726:	d112      	bne.n	c74e <__mcmp+0x2e>
    c728:	009b      	lsls	r3, r3, #2
    c72a:	3014      	adds	r0, #20
    c72c:	3114      	adds	r1, #20
    c72e:	4419      	add	r1, r3
    c730:	b410      	push	{r4}
    c732:	4403      	add	r3, r0
    c734:	e001      	b.n	c73a <__mcmp+0x1a>
    c736:	4298      	cmp	r0, r3
    c738:	d20b      	bcs.n	c752 <__mcmp+0x32>
    c73a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    c73e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    c742:	4294      	cmp	r4, r2
    c744:	d0f7      	beq.n	c736 <__mcmp+0x16>
    c746:	d307      	bcc.n	c758 <__mcmp+0x38>
    c748:	2001      	movs	r0, #1
    c74a:	bc10      	pop	{r4}
    c74c:	4770      	bx	lr
    c74e:	4610      	mov	r0, r2
    c750:	4770      	bx	lr
    c752:	2000      	movs	r0, #0
    c754:	bc10      	pop	{r4}
    c756:	4770      	bx	lr
    c758:	f04f 30ff 	mov.w	r0, #4294967295
    c75c:	e7f5      	b.n	c74a <__mcmp+0x2a>
    c75e:	bf00      	nop

0000c760 <__mdiff>:
    c760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c764:	690b      	ldr	r3, [r1, #16]
    c766:	460f      	mov	r7, r1
    c768:	6911      	ldr	r1, [r2, #16]
    c76a:	1a5b      	subs	r3, r3, r1
    c76c:	2b00      	cmp	r3, #0
    c76e:	4690      	mov	r8, r2
    c770:	d117      	bne.n	c7a2 <__mdiff+0x42>
    c772:	0089      	lsls	r1, r1, #2
    c774:	f107 0214 	add.w	r2, r7, #20
    c778:	f108 0514 	add.w	r5, r8, #20
    c77c:	1853      	adds	r3, r2, r1
    c77e:	4429      	add	r1, r5
    c780:	e001      	b.n	c786 <__mdiff+0x26>
    c782:	429a      	cmp	r2, r3
    c784:	d25e      	bcs.n	c844 <__mdiff+0xe4>
    c786:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    c78a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    c78e:	42a6      	cmp	r6, r4
    c790:	d0f7      	beq.n	c782 <__mdiff+0x22>
    c792:	d260      	bcs.n	c856 <__mdiff+0xf6>
    c794:	463b      	mov	r3, r7
    c796:	4614      	mov	r4, r2
    c798:	4647      	mov	r7, r8
    c79a:	f04f 0901 	mov.w	r9, #1
    c79e:	4698      	mov	r8, r3
    c7a0:	e006      	b.n	c7b0 <__mdiff+0x50>
    c7a2:	db5d      	blt.n	c860 <__mdiff+0x100>
    c7a4:	f107 0514 	add.w	r5, r7, #20
    c7a8:	f102 0414 	add.w	r4, r2, #20
    c7ac:	f04f 0900 	mov.w	r9, #0
    c7b0:	6879      	ldr	r1, [r7, #4]
    c7b2:	f7ff fdad 	bl	c310 <_Balloc>
    c7b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    c7ba:	693e      	ldr	r6, [r7, #16]
    c7bc:	f8c0 900c 	str.w	r9, [r0, #12]
    c7c0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    c7c4:	46a6      	mov	lr, r4
    c7c6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    c7ca:	f100 0414 	add.w	r4, r0, #20
    c7ce:	2300      	movs	r3, #0
    c7d0:	f85e 1b04 	ldr.w	r1, [lr], #4
    c7d4:	f855 8b04 	ldr.w	r8, [r5], #4
    c7d8:	b28a      	uxth	r2, r1
    c7da:	fa13 f388 	uxtah	r3, r3, r8
    c7de:	0c09      	lsrs	r1, r1, #16
    c7e0:	1a9a      	subs	r2, r3, r2
    c7e2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    c7e6:	eb03 4322 	add.w	r3, r3, r2, asr #16
    c7ea:	b292      	uxth	r2, r2
    c7ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    c7f0:	45f4      	cmp	ip, lr
    c7f2:	f844 2b04 	str.w	r2, [r4], #4
    c7f6:	ea4f 4323 	mov.w	r3, r3, asr #16
    c7fa:	d8e9      	bhi.n	c7d0 <__mdiff+0x70>
    c7fc:	42af      	cmp	r7, r5
    c7fe:	d917      	bls.n	c830 <__mdiff+0xd0>
    c800:	46a4      	mov	ip, r4
    c802:	4629      	mov	r1, r5
    c804:	f851 eb04 	ldr.w	lr, [r1], #4
    c808:	fa13 f28e 	uxtah	r2, r3, lr
    c80c:	1413      	asrs	r3, r2, #16
    c80e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    c812:	b292      	uxth	r2, r2
    c814:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    c818:	428f      	cmp	r7, r1
    c81a:	f84c 2b04 	str.w	r2, [ip], #4
    c81e:	ea4f 4323 	mov.w	r3, r3, asr #16
    c822:	d8ef      	bhi.n	c804 <__mdiff+0xa4>
    c824:	43ed      	mvns	r5, r5
    c826:	443d      	add	r5, r7
    c828:	f025 0503 	bic.w	r5, r5, #3
    c82c:	3504      	adds	r5, #4
    c82e:	442c      	add	r4, r5
    c830:	3c04      	subs	r4, #4
    c832:	b922      	cbnz	r2, c83e <__mdiff+0xde>
    c834:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    c838:	3e01      	subs	r6, #1
    c83a:	2b00      	cmp	r3, #0
    c83c:	d0fa      	beq.n	c834 <__mdiff+0xd4>
    c83e:	6106      	str	r6, [r0, #16]
    c840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c844:	2100      	movs	r1, #0
    c846:	f7ff fd63 	bl	c310 <_Balloc>
    c84a:	2201      	movs	r2, #1
    c84c:	2300      	movs	r3, #0
    c84e:	6102      	str	r2, [r0, #16]
    c850:	6143      	str	r3, [r0, #20]
    c852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c856:	462c      	mov	r4, r5
    c858:	f04f 0900 	mov.w	r9, #0
    c85c:	4615      	mov	r5, r2
    c85e:	e7a7      	b.n	c7b0 <__mdiff+0x50>
    c860:	463b      	mov	r3, r7
    c862:	f107 0414 	add.w	r4, r7, #20
    c866:	f108 0514 	add.w	r5, r8, #20
    c86a:	4647      	mov	r7, r8
    c86c:	f04f 0901 	mov.w	r9, #1
    c870:	4698      	mov	r8, r3
    c872:	e79d      	b.n	c7b0 <__mdiff+0x50>

0000c874 <__d2b>:
    c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c878:	b082      	sub	sp, #8
    c87a:	2101      	movs	r1, #1
    c87c:	461c      	mov	r4, r3
    c87e:	f3c3 570a 	ubfx	r7, r3, #20, #11
    c882:	4615      	mov	r5, r2
    c884:	9e08      	ldr	r6, [sp, #32]
    c886:	f7ff fd43 	bl	c310 <_Balloc>
    c88a:	f3c4 0413 	ubfx	r4, r4, #0, #20
    c88e:	4680      	mov	r8, r0
    c890:	b10f      	cbz	r7, c896 <__d2b+0x22>
    c892:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    c896:	9401      	str	r4, [sp, #4]
    c898:	b31d      	cbz	r5, c8e2 <__d2b+0x6e>
    c89a:	a802      	add	r0, sp, #8
    c89c:	f840 5d08 	str.w	r5, [r0, #-8]!
    c8a0:	f7ff fdc6 	bl	c430 <__lo0bits>
    c8a4:	2800      	cmp	r0, #0
    c8a6:	d134      	bne.n	c912 <__d2b+0x9e>
    c8a8:	e89d 000c 	ldmia.w	sp, {r2, r3}
    c8ac:	f8c8 2014 	str.w	r2, [r8, #20]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	bf0c      	ite	eq
    c8b4:	2101      	moveq	r1, #1
    c8b6:	2102      	movne	r1, #2
    c8b8:	f8c8 3018 	str.w	r3, [r8, #24]
    c8bc:	f8c8 1010 	str.w	r1, [r8, #16]
    c8c0:	b9df      	cbnz	r7, c8fa <__d2b+0x86>
    c8c2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c8c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    c8ca:	6030      	str	r0, [r6, #0]
    c8cc:	6918      	ldr	r0, [r3, #16]
    c8ce:	f7ff fd8f 	bl	c3f0 <__hi0bits>
    c8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    c8d8:	6018      	str	r0, [r3, #0]
    c8da:	4640      	mov	r0, r8
    c8dc:	b002      	add	sp, #8
    c8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8e2:	a801      	add	r0, sp, #4
    c8e4:	f7ff fda4 	bl	c430 <__lo0bits>
    c8e8:	9b01      	ldr	r3, [sp, #4]
    c8ea:	f8c8 3014 	str.w	r3, [r8, #20]
    c8ee:	2101      	movs	r1, #1
    c8f0:	3020      	adds	r0, #32
    c8f2:	f8c8 1010 	str.w	r1, [r8, #16]
    c8f6:	2f00      	cmp	r7, #0
    c8f8:	d0e3      	beq.n	c8c2 <__d2b+0x4e>
    c8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8fc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
    c900:	4407      	add	r7, r0
    c902:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    c906:	6037      	str	r7, [r6, #0]
    c908:	6018      	str	r0, [r3, #0]
    c90a:	4640      	mov	r0, r8
    c90c:	b002      	add	sp, #8
    c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c912:	e89d 000c 	ldmia.w	sp, {r2, r3}
    c916:	f1c0 0120 	rsb	r1, r0, #32
    c91a:	fa03 f101 	lsl.w	r1, r3, r1
    c91e:	430a      	orrs	r2, r1
    c920:	40c3      	lsrs	r3, r0
    c922:	9301      	str	r3, [sp, #4]
    c924:	f8c8 2014 	str.w	r2, [r8, #20]
    c928:	e7c2      	b.n	c8b0 <__d2b+0x3c>
    c92a:	bf00      	nop

0000c92c <_vasnprintf_r>:
    c92c:	b570      	push	{r4, r5, r6, lr}
    c92e:	4615      	mov	r5, r2
    c930:	b09a      	sub	sp, #104	; 0x68
    c932:	6814      	ldr	r4, [r2, #0]
    c934:	b109      	cbz	r1, c93a <_vasnprintf_r+0xe>
    c936:	2c00      	cmp	r4, #0
    c938:	d11a      	bne.n	c970 <_vasnprintf_r+0x44>
    c93a:	2400      	movs	r4, #0
    c93c:	f44f 7222 	mov.w	r2, #648	; 0x288
    c940:	f8ad 200c 	strh.w	r2, [sp, #12]
    c944:	9400      	str	r4, [sp, #0]
    c946:	9404      	str	r4, [sp, #16]
    c948:	461a      	mov	r2, r3
    c94a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    c94e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    c950:	9402      	str	r4, [sp, #8]
    c952:	4669      	mov	r1, sp
    c954:	9405      	str	r4, [sp, #20]
    c956:	f8ad 600e 	strh.w	r6, [sp, #14]
    c95a:	f001 f809 	bl	d970 <_svfprintf_r>
    c95e:	2800      	cmp	r0, #0
    c960:	db11      	blt.n	c986 <_vasnprintf_r+0x5a>
    c962:	9b00      	ldr	r3, [sp, #0]
    c964:	6028      	str	r0, [r5, #0]
    c966:	2200      	movs	r2, #0
    c968:	701a      	strb	r2, [r3, #0]
    c96a:	9804      	ldr	r0, [sp, #16]
    c96c:	b01a      	add	sp, #104	; 0x68
    c96e:	bd70      	pop	{r4, r5, r6, pc}
    c970:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    c974:	9100      	str	r1, [sp, #0]
    c976:	9104      	str	r1, [sp, #16]
    c978:	f8ad 200c 	strh.w	r2, [sp, #12]
    c97c:	dae4      	bge.n	c948 <_vasnprintf_r+0x1c>
    c97e:	238b      	movs	r3, #139	; 0x8b
    c980:	6003      	str	r3, [r0, #0]
    c982:	2000      	movs	r0, #0
    c984:	e7f2      	b.n	c96c <_vasnprintf_r+0x40>
    c986:	2000      	movs	r0, #0
    c988:	e7f0      	b.n	c96c <_vasnprintf_r+0x40>
    c98a:	bf00      	nop

0000c98c <_calloc_r>:
    c98c:	b510      	push	{r4, lr}
    c98e:	fb02 f101 	mul.w	r1, r2, r1
    c992:	f7fe fae9 	bl	af68 <_malloc_r>
    c996:	4604      	mov	r4, r0
    c998:	b1d8      	cbz	r0, c9d2 <_calloc_r+0x46>
    c99a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    c99e:	f022 0203 	bic.w	r2, r2, #3
    c9a2:	3a04      	subs	r2, #4
    c9a4:	2a24      	cmp	r2, #36	; 0x24
    c9a6:	d818      	bhi.n	c9da <_calloc_r+0x4e>
    c9a8:	2a13      	cmp	r2, #19
    c9aa:	d914      	bls.n	c9d6 <_calloc_r+0x4a>
    c9ac:	2300      	movs	r3, #0
    c9ae:	2a1b      	cmp	r2, #27
    c9b0:	6003      	str	r3, [r0, #0]
    c9b2:	6043      	str	r3, [r0, #4]
    c9b4:	d916      	bls.n	c9e4 <_calloc_r+0x58>
    c9b6:	2a24      	cmp	r2, #36	; 0x24
    c9b8:	6083      	str	r3, [r0, #8]
    c9ba:	60c3      	str	r3, [r0, #12]
    c9bc:	bf11      	iteee	ne
    c9be:	f100 0210 	addne.w	r2, r0, #16
    c9c2:	6103      	streq	r3, [r0, #16]
    c9c4:	6143      	streq	r3, [r0, #20]
    c9c6:	f100 0218 	addeq.w	r2, r0, #24
    c9ca:	2300      	movs	r3, #0
    c9cc:	6013      	str	r3, [r2, #0]
    c9ce:	6053      	str	r3, [r2, #4]
    c9d0:	6093      	str	r3, [r2, #8]
    c9d2:	4620      	mov	r0, r4
    c9d4:	bd10      	pop	{r4, pc}
    c9d6:	4602      	mov	r2, r0
    c9d8:	e7f7      	b.n	c9ca <_calloc_r+0x3e>
    c9da:	2100      	movs	r1, #0
    c9dc:	f7fe fe28 	bl	b630 <memset>
    c9e0:	4620      	mov	r0, r4
    c9e2:	bd10      	pop	{r4, pc}
    c9e4:	f100 0208 	add.w	r2, r0, #8
    c9e8:	e7ef      	b.n	c9ca <_calloc_r+0x3e>
    c9ea:	bf00      	nop

0000c9ec <quorem>:
    c9ec:	6902      	ldr	r2, [r0, #16]
    c9ee:	690b      	ldr	r3, [r1, #16]
    c9f0:	4293      	cmp	r3, r2
    c9f2:	f300 808d 	bgt.w	cb10 <quorem+0x124>
    c9f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9fa:	f103 38ff 	add.w	r8, r3, #4294967295
    c9fe:	f101 0714 	add.w	r7, r1, #20
    ca02:	f100 0b14 	add.w	fp, r0, #20
    ca06:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    ca0a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    ca0e:	ea4f 0488 	mov.w	r4, r8, lsl #2
    ca12:	b083      	sub	sp, #12
    ca14:	3201      	adds	r2, #1
    ca16:	fbb3 f9f2 	udiv	r9, r3, r2
    ca1a:	eb0b 0304 	add.w	r3, fp, r4
    ca1e:	9400      	str	r4, [sp, #0]
    ca20:	eb07 0a04 	add.w	sl, r7, r4
    ca24:	9301      	str	r3, [sp, #4]
    ca26:	f1b9 0f00 	cmp.w	r9, #0
    ca2a:	d039      	beq.n	caa0 <quorem+0xb4>
    ca2c:	2500      	movs	r5, #0
    ca2e:	46bc      	mov	ip, r7
    ca30:	46de      	mov	lr, fp
    ca32:	462b      	mov	r3, r5
    ca34:	f85c 6b04 	ldr.w	r6, [ip], #4
    ca38:	f8de 2000 	ldr.w	r2, [lr]
    ca3c:	b2b4      	uxth	r4, r6
    ca3e:	fb09 5504 	mla	r5, r9, r4, r5
    ca42:	0c36      	lsrs	r6, r6, #16
    ca44:	0c2c      	lsrs	r4, r5, #16
    ca46:	fb09 4406 	mla	r4, r9, r6, r4
    ca4a:	b2ad      	uxth	r5, r5
    ca4c:	1b5b      	subs	r3, r3, r5
    ca4e:	b2a6      	uxth	r6, r4
    ca50:	fa13 f382 	uxtah	r3, r3, r2
    ca54:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    ca58:	eb06 4623 	add.w	r6, r6, r3, asr #16
    ca5c:	b29b      	uxth	r3, r3
    ca5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    ca62:	45e2      	cmp	sl, ip
    ca64:	f84e 3b04 	str.w	r3, [lr], #4
    ca68:	ea4f 4514 	mov.w	r5, r4, lsr #16
    ca6c:	ea4f 4326 	mov.w	r3, r6, asr #16
    ca70:	d2e0      	bcs.n	ca34 <quorem+0x48>
    ca72:	9b00      	ldr	r3, [sp, #0]
    ca74:	f85b 3003 	ldr.w	r3, [fp, r3]
    ca78:	b993      	cbnz	r3, caa0 <quorem+0xb4>
    ca7a:	9c01      	ldr	r4, [sp, #4]
    ca7c:	1f23      	subs	r3, r4, #4
    ca7e:	459b      	cmp	fp, r3
    ca80:	d20c      	bcs.n	ca9c <quorem+0xb0>
    ca82:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ca86:	b94b      	cbnz	r3, ca9c <quorem+0xb0>
    ca88:	f1a4 0308 	sub.w	r3, r4, #8
    ca8c:	e002      	b.n	ca94 <quorem+0xa8>
    ca8e:	681a      	ldr	r2, [r3, #0]
    ca90:	3b04      	subs	r3, #4
    ca92:	b91a      	cbnz	r2, ca9c <quorem+0xb0>
    ca94:	459b      	cmp	fp, r3
    ca96:	f108 38ff 	add.w	r8, r8, #4294967295
    ca9a:	d3f8      	bcc.n	ca8e <quorem+0xa2>
    ca9c:	f8c0 8010 	str.w	r8, [r0, #16]
    caa0:	4604      	mov	r4, r0
    caa2:	f7ff fe3d 	bl	c720 <__mcmp>
    caa6:	2800      	cmp	r0, #0
    caa8:	db2e      	blt.n	cb08 <quorem+0x11c>
    caaa:	f109 0901 	add.w	r9, r9, #1
    caae:	465d      	mov	r5, fp
    cab0:	2300      	movs	r3, #0
    cab2:	f857 1b04 	ldr.w	r1, [r7], #4
    cab6:	6828      	ldr	r0, [r5, #0]
    cab8:	b28a      	uxth	r2, r1
    caba:	1a9a      	subs	r2, r3, r2
    cabc:	0c09      	lsrs	r1, r1, #16
    cabe:	fa12 f280 	uxtah	r2, r2, r0
    cac2:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    cac6:	eb03 4322 	add.w	r3, r3, r2, asr #16
    caca:	b291      	uxth	r1, r2
    cacc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cad0:	45ba      	cmp	sl, r7
    cad2:	f845 1b04 	str.w	r1, [r5], #4
    cad6:	ea4f 4323 	mov.w	r3, r3, asr #16
    cada:	d2ea      	bcs.n	cab2 <quorem+0xc6>
    cadc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    cae0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    cae4:	b982      	cbnz	r2, cb08 <quorem+0x11c>
    cae6:	1f1a      	subs	r2, r3, #4
    cae8:	4593      	cmp	fp, r2
    caea:	d20b      	bcs.n	cb04 <quorem+0x118>
    caec:	f853 2c04 	ldr.w	r2, [r3, #-4]
    caf0:	b942      	cbnz	r2, cb04 <quorem+0x118>
    caf2:	3b08      	subs	r3, #8
    caf4:	e002      	b.n	cafc <quorem+0x110>
    caf6:	681a      	ldr	r2, [r3, #0]
    caf8:	3b04      	subs	r3, #4
    cafa:	b91a      	cbnz	r2, cb04 <quorem+0x118>
    cafc:	459b      	cmp	fp, r3
    cafe:	f108 38ff 	add.w	r8, r8, #4294967295
    cb02:	d3f8      	bcc.n	caf6 <quorem+0x10a>
    cb04:	f8c4 8010 	str.w	r8, [r4, #16]
    cb08:	4648      	mov	r0, r9
    cb0a:	b003      	add	sp, #12
    cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb10:	2000      	movs	r0, #0
    cb12:	4770      	bx	lr
    cb14:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000cb18 <_dtoa_r>:
    cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    cb1e:	b097      	sub	sp, #92	; 0x5c
    cb20:	4681      	mov	r9, r0
    cb22:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    cb24:	4692      	mov	sl, r2
    cb26:	469b      	mov	fp, r3
    cb28:	b149      	cbz	r1, cb3e <_dtoa_r+0x26>
    cb2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    cb2c:	604a      	str	r2, [r1, #4]
    cb2e:	2301      	movs	r3, #1
    cb30:	4093      	lsls	r3, r2
    cb32:	608b      	str	r3, [r1, #8]
    cb34:	f7ff fc12 	bl	c35c <_Bfree>
    cb38:	2300      	movs	r3, #0
    cb3a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    cb3e:	f1bb 0f00 	cmp.w	fp, #0
    cb42:	46d8      	mov	r8, fp
    cb44:	db33      	blt.n	cbae <_dtoa_r+0x96>
    cb46:	2300      	movs	r3, #0
    cb48:	6023      	str	r3, [r4, #0]
    cb4a:	4ba5      	ldr	r3, [pc, #660]	; (cde0 <_dtoa_r+0x2c8>)
    cb4c:	461a      	mov	r2, r3
    cb4e:	ea08 0303 	and.w	r3, r8, r3
    cb52:	4293      	cmp	r3, r2
    cb54:	d014      	beq.n	cb80 <_dtoa_r+0x68>
    cb56:	4650      	mov	r0, sl
    cb58:	4659      	mov	r1, fp
    cb5a:	2200      	movs	r2, #0
    cb5c:	2300      	movs	r3, #0
    cb5e:	f7fe f971 	bl	ae44 <__aeabi_dcmpeq>
    cb62:	4605      	mov	r5, r0
    cb64:	b348      	cbz	r0, cbba <_dtoa_r+0xa2>
    cb66:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cb68:	2301      	movs	r3, #1
    cb6a:	6013      	str	r3, [r2, #0]
    cb6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    cb6e:	2b00      	cmp	r3, #0
    cb70:	f000 80c5 	beq.w	ccfe <_dtoa_r+0x1e6>
    cb74:	489b      	ldr	r0, [pc, #620]	; (cde4 <_dtoa_r+0x2cc>)
    cb76:	6018      	str	r0, [r3, #0]
    cb78:	3801      	subs	r0, #1
    cb7a:	b017      	add	sp, #92	; 0x5c
    cb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb80:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cb82:	f242 730f 	movw	r3, #9999	; 0x270f
    cb86:	6013      	str	r3, [r2, #0]
    cb88:	f1ba 0f00 	cmp.w	sl, #0
    cb8c:	f000 80a2 	beq.w	ccd4 <_dtoa_r+0x1bc>
    cb90:	4895      	ldr	r0, [pc, #596]	; (cde8 <_dtoa_r+0x2d0>)
    cb92:	9b24      	ldr	r3, [sp, #144]	; 0x90
    cb94:	2b00      	cmp	r3, #0
    cb96:	d0f0      	beq.n	cb7a <_dtoa_r+0x62>
    cb98:	78c3      	ldrb	r3, [r0, #3]
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	f000 80b1 	beq.w	cd02 <_dtoa_r+0x1ea>
    cba0:	f100 0308 	add.w	r3, r0, #8
    cba4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    cba6:	6013      	str	r3, [r2, #0]
    cba8:	b017      	add	sp, #92	; 0x5c
    cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbae:	2301      	movs	r3, #1
    cbb0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
    cbb4:	6023      	str	r3, [r4, #0]
    cbb6:	46c3      	mov	fp, r8
    cbb8:	e7c7      	b.n	cb4a <_dtoa_r+0x32>
    cbba:	aa14      	add	r2, sp, #80	; 0x50
    cbbc:	ab15      	add	r3, sp, #84	; 0x54
    cbbe:	9201      	str	r2, [sp, #4]
    cbc0:	9300      	str	r3, [sp, #0]
    cbc2:	4652      	mov	r2, sl
    cbc4:	465b      	mov	r3, fp
    cbc6:	4648      	mov	r0, r9
    cbc8:	f7ff fe54 	bl	c874 <__d2b>
    cbcc:	ea5f 5418 	movs.w	r4, r8, lsr #20
    cbd0:	9008      	str	r0, [sp, #32]
    cbd2:	f040 8088 	bne.w	cce6 <_dtoa_r+0x1ce>
    cbd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    cbd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    cbda:	442c      	add	r4, r5
    cbdc:	f204 4332 	addw	r3, r4, #1074	; 0x432
    cbe0:	2b20      	cmp	r3, #32
    cbe2:	f340 8291 	ble.w	d108 <_dtoa_r+0x5f0>
    cbe6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    cbea:	f204 4012 	addw	r0, r4, #1042	; 0x412
    cbee:	fa08 f803 	lsl.w	r8, r8, r3
    cbf2:	fa2a f000 	lsr.w	r0, sl, r0
    cbf6:	ea40 0008 	orr.w	r0, r0, r8
    cbfa:	f7fd fe45 	bl	a888 <__aeabi_ui2d>
    cbfe:	2301      	movs	r3, #1
    cc00:	3c01      	subs	r4, #1
    cc02:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    cc06:	9310      	str	r3, [sp, #64]	; 0x40
    cc08:	2200      	movs	r2, #0
    cc0a:	4b78      	ldr	r3, [pc, #480]	; (cdec <_dtoa_r+0x2d4>)
    cc0c:	f7fd fcfe 	bl	a60c <__aeabi_dsub>
    cc10:	a36d      	add	r3, pc, #436	; (adr r3, cdc8 <_dtoa_r+0x2b0>)
    cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc16:	f7fd fead 	bl	a974 <__aeabi_dmul>
    cc1a:	a36d      	add	r3, pc, #436	; (adr r3, cdd0 <_dtoa_r+0x2b8>)
    cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc20:	f7fd fcf6 	bl	a610 <__adddf3>
    cc24:	4606      	mov	r6, r0
    cc26:	4620      	mov	r0, r4
    cc28:	460f      	mov	r7, r1
    cc2a:	f7fd fe3d 	bl	a8a8 <__aeabi_i2d>
    cc2e:	a36a      	add	r3, pc, #424	; (adr r3, cdd8 <_dtoa_r+0x2c0>)
    cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc34:	f7fd fe9e 	bl	a974 <__aeabi_dmul>
    cc38:	4602      	mov	r2, r0
    cc3a:	460b      	mov	r3, r1
    cc3c:	4630      	mov	r0, r6
    cc3e:	4639      	mov	r1, r7
    cc40:	f7fd fce6 	bl	a610 <__adddf3>
    cc44:	4606      	mov	r6, r0
    cc46:	460f      	mov	r7, r1
    cc48:	f002 fa6a 	bl	f120 <__aeabi_d2iz>
    cc4c:	2200      	movs	r2, #0
    cc4e:	9004      	str	r0, [sp, #16]
    cc50:	2300      	movs	r3, #0
    cc52:	4630      	mov	r0, r6
    cc54:	4639      	mov	r1, r7
    cc56:	f7fe f8ff 	bl	ae58 <__aeabi_dcmplt>
    cc5a:	2800      	cmp	r0, #0
    cc5c:	f040 8230 	bne.w	d0c0 <_dtoa_r+0x5a8>
    cc60:	9e04      	ldr	r6, [sp, #16]
    cc62:	2e16      	cmp	r6, #22
    cc64:	f200 8229 	bhi.w	d0ba <_dtoa_r+0x5a2>
    cc68:	4b61      	ldr	r3, [pc, #388]	; (cdf0 <_dtoa_r+0x2d8>)
    cc6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    cc6e:	e9d3 0100 	ldrd	r0, r1, [r3]
    cc72:	4652      	mov	r2, sl
    cc74:	465b      	mov	r3, fp
    cc76:	f7fe f90d 	bl	ae94 <__aeabi_dcmpgt>
    cc7a:	2800      	cmp	r0, #0
    cc7c:	f000 8249 	beq.w	d112 <_dtoa_r+0x5fa>
    cc80:	1e73      	subs	r3, r6, #1
    cc82:	9304      	str	r3, [sp, #16]
    cc84:	2300      	movs	r3, #0
    cc86:	930c      	str	r3, [sp, #48]	; 0x30
    cc88:	1b2c      	subs	r4, r5, r4
    cc8a:	1e63      	subs	r3, r4, #1
    cc8c:	9302      	str	r3, [sp, #8]
    cc8e:	f100 8232 	bmi.w	d0f6 <_dtoa_r+0x5de>
    cc92:	2300      	movs	r3, #0
    cc94:	9305      	str	r3, [sp, #20]
    cc96:	9b04      	ldr	r3, [sp, #16]
    cc98:	2b00      	cmp	r3, #0
    cc9a:	f2c0 8223 	blt.w	d0e4 <_dtoa_r+0x5cc>
    cc9e:	9a02      	ldr	r2, [sp, #8]
    cca0:	930b      	str	r3, [sp, #44]	; 0x2c
    cca2:	4611      	mov	r1, r2
    cca4:	4419      	add	r1, r3
    cca6:	2300      	movs	r3, #0
    cca8:	9102      	str	r1, [sp, #8]
    ccaa:	930a      	str	r3, [sp, #40]	; 0x28
    ccac:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ccae:	2b09      	cmp	r3, #9
    ccb0:	d829      	bhi.n	cd06 <_dtoa_r+0x1ee>
    ccb2:	2b05      	cmp	r3, #5
    ccb4:	f340 8658 	ble.w	d968 <_dtoa_r+0xe50>
    ccb8:	3b04      	subs	r3, #4
    ccba:	9320      	str	r3, [sp, #128]	; 0x80
    ccbc:	2500      	movs	r5, #0
    ccbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ccc0:	3b02      	subs	r3, #2
    ccc2:	2b03      	cmp	r3, #3
    ccc4:	f200 8635 	bhi.w	d932 <_dtoa_r+0xe1a>
    ccc8:	e8df f013 	tbh	[pc, r3, lsl #1]
    cccc:	0228032c 	.word	0x0228032c
    ccd0:	04590337 	.word	0x04590337
    ccd4:	4b44      	ldr	r3, [pc, #272]	; (cde8 <_dtoa_r+0x2d0>)
    ccd6:	4a47      	ldr	r2, [pc, #284]	; (cdf4 <_dtoa_r+0x2dc>)
    ccd8:	f3c8 0013 	ubfx	r0, r8, #0, #20
    ccdc:	2800      	cmp	r0, #0
    ccde:	bf14      	ite	ne
    cce0:	4618      	movne	r0, r3
    cce2:	4610      	moveq	r0, r2
    cce4:	e755      	b.n	cb92 <_dtoa_r+0x7a>
    cce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
    ccea:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ccee:	9510      	str	r5, [sp, #64]	; 0x40
    ccf0:	4650      	mov	r0, sl
    ccf2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    ccf6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    ccfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
    ccfc:	e784      	b.n	cc08 <_dtoa_r+0xf0>
    ccfe:	483e      	ldr	r0, [pc, #248]	; (cdf8 <_dtoa_r+0x2e0>)
    cd00:	e73b      	b.n	cb7a <_dtoa_r+0x62>
    cd02:	1cc3      	adds	r3, r0, #3
    cd04:	e74e      	b.n	cba4 <_dtoa_r+0x8c>
    cd06:	2100      	movs	r1, #0
    cd08:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    cd0c:	4648      	mov	r0, r9
    cd0e:	9120      	str	r1, [sp, #128]	; 0x80
    cd10:	f7ff fafe 	bl	c310 <_Balloc>
    cd14:	f04f 33ff 	mov.w	r3, #4294967295
    cd18:	9306      	str	r3, [sp, #24]
    cd1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cd1c:	930d      	str	r3, [sp, #52]	; 0x34
    cd1e:	2301      	movs	r3, #1
    cd20:	9007      	str	r0, [sp, #28]
    cd22:	9221      	str	r2, [sp, #132]	; 0x84
    cd24:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    cd28:	9309      	str	r3, [sp, #36]	; 0x24
    cd2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	f2c0 80d1 	blt.w	ced4 <_dtoa_r+0x3bc>
    cd32:	9a04      	ldr	r2, [sp, #16]
    cd34:	2a0e      	cmp	r2, #14
    cd36:	f300 80cd 	bgt.w	ced4 <_dtoa_r+0x3bc>
    cd3a:	4b2d      	ldr	r3, [pc, #180]	; (cdf0 <_dtoa_r+0x2d8>)
    cd3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    cd40:	e9d3 3400 	ldrd	r3, r4, [r3]
    cd44:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cd48:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cd4a:	2b00      	cmp	r3, #0
    cd4c:	f2c0 8300 	blt.w	d350 <_dtoa_r+0x838>
    cd50:	4656      	mov	r6, sl
    cd52:	465f      	mov	r7, fp
    cd54:	4650      	mov	r0, sl
    cd56:	4659      	mov	r1, fp
    cd58:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    cd5c:	4652      	mov	r2, sl
    cd5e:	465b      	mov	r3, fp
    cd60:	f7fd ff32 	bl	abc8 <__aeabi_ddiv>
    cd64:	f002 f9dc 	bl	f120 <__aeabi_d2iz>
    cd68:	4604      	mov	r4, r0
    cd6a:	f7fd fd9d 	bl	a8a8 <__aeabi_i2d>
    cd6e:	4652      	mov	r2, sl
    cd70:	465b      	mov	r3, fp
    cd72:	f7fd fdff 	bl	a974 <__aeabi_dmul>
    cd76:	460b      	mov	r3, r1
    cd78:	4602      	mov	r2, r0
    cd7a:	4639      	mov	r1, r7
    cd7c:	4630      	mov	r0, r6
    cd7e:	f7fd fc45 	bl	a60c <__aeabi_dsub>
    cd82:	9d07      	ldr	r5, [sp, #28]
    cd84:	f104 0330 	add.w	r3, r4, #48	; 0x30
    cd88:	702b      	strb	r3, [r5, #0]
    cd8a:	9b06      	ldr	r3, [sp, #24]
    cd8c:	2b01      	cmp	r3, #1
    cd8e:	4606      	mov	r6, r0
    cd90:	460f      	mov	r7, r1
    cd92:	f105 0501 	add.w	r5, r5, #1
    cd96:	d062      	beq.n	ce5e <_dtoa_r+0x346>
    cd98:	2200      	movs	r2, #0
    cd9a:	4b18      	ldr	r3, [pc, #96]	; (cdfc <_dtoa_r+0x2e4>)
    cd9c:	f7fd fdea 	bl	a974 <__aeabi_dmul>
    cda0:	2200      	movs	r2, #0
    cda2:	2300      	movs	r3, #0
    cda4:	4606      	mov	r6, r0
    cda6:	460f      	mov	r7, r1
    cda8:	f7fe f84c 	bl	ae44 <__aeabi_dcmpeq>
    cdac:	2800      	cmp	r0, #0
    cdae:	d17e      	bne.n	ceae <_dtoa_r+0x396>
    cdb0:	f8cd 9014 	str.w	r9, [sp, #20]
    cdb4:	f8dd a018 	ldr.w	sl, [sp, #24]
    cdb8:	f8dd b01c 	ldr.w	fp, [sp, #28]
    cdbc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    cdc0:	e029      	b.n	ce16 <_dtoa_r+0x2fe>
    cdc2:	bf00      	nop
    cdc4:	f3af 8000 	nop.w
    cdc8:	636f4361 	.word	0x636f4361
    cdcc:	3fd287a7 	.word	0x3fd287a7
    cdd0:	8b60c8b3 	.word	0x8b60c8b3
    cdd4:	3fc68a28 	.word	0x3fc68a28
    cdd8:	509f79fb 	.word	0x509f79fb
    cddc:	3fd34413 	.word	0x3fd34413
    cde0:	7ff00000 	.word	0x7ff00000
    cde4:	00010301 	.word	0x00010301
    cde8:	00010cd4 	.word	0x00010cd4
    cdec:	3ff80000 	.word	0x3ff80000
    cdf0:	00010bc8 	.word	0x00010bc8
    cdf4:	00010cc8 	.word	0x00010cc8
    cdf8:	00010300 	.word	0x00010300
    cdfc:	40240000 	.word	0x40240000
    ce00:	f7fd fdb8 	bl	a974 <__aeabi_dmul>
    ce04:	2200      	movs	r2, #0
    ce06:	2300      	movs	r3, #0
    ce08:	4606      	mov	r6, r0
    ce0a:	460f      	mov	r7, r1
    ce0c:	f7fe f81a 	bl	ae44 <__aeabi_dcmpeq>
    ce10:	2800      	cmp	r0, #0
    ce12:	f040 83b7 	bne.w	d584 <_dtoa_r+0xa6c>
    ce16:	4642      	mov	r2, r8
    ce18:	464b      	mov	r3, r9
    ce1a:	4630      	mov	r0, r6
    ce1c:	4639      	mov	r1, r7
    ce1e:	f7fd fed3 	bl	abc8 <__aeabi_ddiv>
    ce22:	f002 f97d 	bl	f120 <__aeabi_d2iz>
    ce26:	4604      	mov	r4, r0
    ce28:	f7fd fd3e 	bl	a8a8 <__aeabi_i2d>
    ce2c:	4642      	mov	r2, r8
    ce2e:	464b      	mov	r3, r9
    ce30:	f7fd fda0 	bl	a974 <__aeabi_dmul>
    ce34:	4602      	mov	r2, r0
    ce36:	460b      	mov	r3, r1
    ce38:	4630      	mov	r0, r6
    ce3a:	4639      	mov	r1, r7
    ce3c:	f7fd fbe6 	bl	a60c <__aeabi_dsub>
    ce40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
    ce44:	f805 eb01 	strb.w	lr, [r5], #1
    ce48:	ebcb 0e05 	rsb	lr, fp, r5
    ce4c:	45d6      	cmp	lr, sl
    ce4e:	4606      	mov	r6, r0
    ce50:	460f      	mov	r7, r1
    ce52:	f04f 0200 	mov.w	r2, #0
    ce56:	4bb0      	ldr	r3, [pc, #704]	; (d118 <_dtoa_r+0x600>)
    ce58:	d1d2      	bne.n	ce00 <_dtoa_r+0x2e8>
    ce5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    ce5e:	4632      	mov	r2, r6
    ce60:	463b      	mov	r3, r7
    ce62:	4630      	mov	r0, r6
    ce64:	4639      	mov	r1, r7
    ce66:	f7fd fbd3 	bl	a610 <__adddf3>
    ce6a:	4606      	mov	r6, r0
    ce6c:	460f      	mov	r7, r1
    ce6e:	4602      	mov	r2, r0
    ce70:	460b      	mov	r3, r1
    ce72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ce76:	f7fd ffef 	bl	ae58 <__aeabi_dcmplt>
    ce7a:	b940      	cbnz	r0, ce8e <_dtoa_r+0x376>
    ce7c:	4632      	mov	r2, r6
    ce7e:	463b      	mov	r3, r7
    ce80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ce84:	f7fd ffde 	bl	ae44 <__aeabi_dcmpeq>
    ce88:	b188      	cbz	r0, ceae <_dtoa_r+0x396>
    ce8a:	07e3      	lsls	r3, r4, #31
    ce8c:	d50f      	bpl.n	ceae <_dtoa_r+0x396>
    ce8e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    ce92:	9a07      	ldr	r2, [sp, #28]
    ce94:	1e6b      	subs	r3, r5, #1
    ce96:	e004      	b.n	cea2 <_dtoa_r+0x38a>
    ce98:	429a      	cmp	r2, r3
    ce9a:	f000 842c 	beq.w	d6f6 <_dtoa_r+0xbde>
    ce9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    cea2:	2c39      	cmp	r4, #57	; 0x39
    cea4:	f103 0501 	add.w	r5, r3, #1
    cea8:	d0f6      	beq.n	ce98 <_dtoa_r+0x380>
    ceaa:	3401      	adds	r4, #1
    ceac:	701c      	strb	r4, [r3, #0]
    ceae:	9908      	ldr	r1, [sp, #32]
    ceb0:	4648      	mov	r0, r9
    ceb2:	f7ff fa53 	bl	c35c <_Bfree>
    ceb6:	2200      	movs	r2, #0
    ceb8:	9b04      	ldr	r3, [sp, #16]
    ceba:	702a      	strb	r2, [r5, #0]
    cebc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cebe:	3301      	adds	r3, #1
    cec0:	6013      	str	r3, [r2, #0]
    cec2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    cec4:	2b00      	cmp	r3, #0
    cec6:	f000 83a7 	beq.w	d618 <_dtoa_r+0xb00>
    ceca:	9807      	ldr	r0, [sp, #28]
    cecc:	601d      	str	r5, [r3, #0]
    cece:	b017      	add	sp, #92	; 0x5c
    ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ced4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ced6:	2a00      	cmp	r2, #0
    ced8:	f000 8112 	beq.w	d100 <_dtoa_r+0x5e8>
    cedc:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cede:	2a01      	cmp	r2, #1
    cee0:	f340 8258 	ble.w	d394 <_dtoa_r+0x87c>
    cee4:	9b06      	ldr	r3, [sp, #24]
    cee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cee8:	1e5f      	subs	r7, r3, #1
    ceea:	42ba      	cmp	r2, r7
    ceec:	f2c0 8397 	blt.w	d61e <_dtoa_r+0xb06>
    cef0:	1bd7      	subs	r7, r2, r7
    cef2:	9b06      	ldr	r3, [sp, #24]
    cef4:	2b00      	cmp	r3, #0
    cef6:	f2c0 848a 	blt.w	d80e <_dtoa_r+0xcf6>
    cefa:	9d05      	ldr	r5, [sp, #20]
    cefc:	9b06      	ldr	r3, [sp, #24]
    cefe:	9a05      	ldr	r2, [sp, #20]
    cf00:	441a      	add	r2, r3
    cf02:	9205      	str	r2, [sp, #20]
    cf04:	9a02      	ldr	r2, [sp, #8]
    cf06:	2101      	movs	r1, #1
    cf08:	441a      	add	r2, r3
    cf0a:	4648      	mov	r0, r9
    cf0c:	9202      	str	r2, [sp, #8]
    cf0e:	f7ff fabd 	bl	c48c <__i2b>
    cf12:	4606      	mov	r6, r0
    cf14:	b165      	cbz	r5, cf30 <_dtoa_r+0x418>
    cf16:	9902      	ldr	r1, [sp, #8]
    cf18:	2900      	cmp	r1, #0
    cf1a:	460b      	mov	r3, r1
    cf1c:	dd08      	ble.n	cf30 <_dtoa_r+0x418>
    cf1e:	42a9      	cmp	r1, r5
    cf20:	9a05      	ldr	r2, [sp, #20]
    cf22:	bfa8      	it	ge
    cf24:	462b      	movge	r3, r5
    cf26:	1ad2      	subs	r2, r2, r3
    cf28:	1aed      	subs	r5, r5, r3
    cf2a:	1acb      	subs	r3, r1, r3
    cf2c:	9205      	str	r2, [sp, #20]
    cf2e:	9302      	str	r3, [sp, #8]
    cf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf32:	2b00      	cmp	r3, #0
    cf34:	f340 82fc 	ble.w	d530 <_dtoa_r+0xa18>
    cf38:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cf3a:	2a00      	cmp	r2, #0
    cf3c:	f000 8201 	beq.w	d342 <_dtoa_r+0x82a>
    cf40:	2f00      	cmp	r7, #0
    cf42:	f000 81fe 	beq.w	d342 <_dtoa_r+0x82a>
    cf46:	4631      	mov	r1, r6
    cf48:	463a      	mov	r2, r7
    cf4a:	4648      	mov	r0, r9
    cf4c:	f7ff fb40 	bl	c5d0 <__pow5mult>
    cf50:	f8dd 8020 	ldr.w	r8, [sp, #32]
    cf54:	4601      	mov	r1, r0
    cf56:	4642      	mov	r2, r8
    cf58:	4606      	mov	r6, r0
    cf5a:	4648      	mov	r0, r9
    cf5c:	f7ff faa0 	bl	c4a0 <__multiply>
    cf60:	4641      	mov	r1, r8
    cf62:	4604      	mov	r4, r0
    cf64:	4648      	mov	r0, r9
    cf66:	f7ff f9f9 	bl	c35c <_Bfree>
    cf6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf6c:	1bdb      	subs	r3, r3, r7
    cf6e:	930a      	str	r3, [sp, #40]	; 0x28
    cf70:	f040 81e6 	bne.w	d340 <_dtoa_r+0x828>
    cf74:	2101      	movs	r1, #1
    cf76:	4648      	mov	r0, r9
    cf78:	f7ff fa88 	bl	c48c <__i2b>
    cf7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf7e:	4680      	mov	r8, r0
    cf80:	2b00      	cmp	r3, #0
    cf82:	f000 8219 	beq.w	d3b8 <_dtoa_r+0x8a0>
    cf86:	4601      	mov	r1, r0
    cf88:	461a      	mov	r2, r3
    cf8a:	4648      	mov	r0, r9
    cf8c:	f7ff fb20 	bl	c5d0 <__pow5mult>
    cf90:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cf92:	2b01      	cmp	r3, #1
    cf94:	4680      	mov	r8, r0
    cf96:	f340 82f8 	ble.w	d58a <_dtoa_r+0xa72>
    cf9a:	2700      	movs	r7, #0
    cf9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    cfa0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    cfa4:	6918      	ldr	r0, [r3, #16]
    cfa6:	f7ff fa23 	bl	c3f0 <__hi0bits>
    cfaa:	f1c0 0020 	rsb	r0, r0, #32
    cfae:	9a02      	ldr	r2, [sp, #8]
    cfb0:	4410      	add	r0, r2
    cfb2:	f010 001f 	ands.w	r0, r0, #31
    cfb6:	f000 81f6 	beq.w	d3a6 <_dtoa_r+0x88e>
    cfba:	f1c0 0320 	rsb	r3, r0, #32
    cfbe:	2b04      	cmp	r3, #4
    cfc0:	f340 84ca 	ble.w	d958 <_dtoa_r+0xe40>
    cfc4:	9b05      	ldr	r3, [sp, #20]
    cfc6:	f1c0 001c 	rsb	r0, r0, #28
    cfca:	4403      	add	r3, r0
    cfcc:	9305      	str	r3, [sp, #20]
    cfce:	4613      	mov	r3, r2
    cfd0:	4403      	add	r3, r0
    cfd2:	4405      	add	r5, r0
    cfd4:	9302      	str	r3, [sp, #8]
    cfd6:	9b05      	ldr	r3, [sp, #20]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	dd05      	ble.n	cfe8 <_dtoa_r+0x4d0>
    cfdc:	4621      	mov	r1, r4
    cfde:	461a      	mov	r2, r3
    cfe0:	4648      	mov	r0, r9
    cfe2:	f7ff fb45 	bl	c670 <__lshift>
    cfe6:	4604      	mov	r4, r0
    cfe8:	9b02      	ldr	r3, [sp, #8]
    cfea:	2b00      	cmp	r3, #0
    cfec:	dd05      	ble.n	cffa <_dtoa_r+0x4e2>
    cfee:	4641      	mov	r1, r8
    cff0:	461a      	mov	r2, r3
    cff2:	4648      	mov	r0, r9
    cff4:	f7ff fb3c 	bl	c670 <__lshift>
    cff8:	4680      	mov	r8, r0
    cffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cffc:	2b00      	cmp	r3, #0
    cffe:	f040 827c 	bne.w	d4fa <_dtoa_r+0x9e2>
    d002:	9b06      	ldr	r3, [sp, #24]
    d004:	2b00      	cmp	r3, #0
    d006:	f340 8295 	ble.w	d534 <_dtoa_r+0xa1c>
    d00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d00c:	2b00      	cmp	r3, #0
    d00e:	f040 81f5 	bne.w	d3fc <_dtoa_r+0x8e4>
    d012:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d016:	9f06      	ldr	r7, [sp, #24]
    d018:	465d      	mov	r5, fp
    d01a:	e002      	b.n	d022 <_dtoa_r+0x50a>
    d01c:	f7ff f9a8 	bl	c370 <__multadd>
    d020:	4604      	mov	r4, r0
    d022:	4641      	mov	r1, r8
    d024:	4620      	mov	r0, r4
    d026:	f7ff fce1 	bl	c9ec <quorem>
    d02a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    d02e:	f805 ab01 	strb.w	sl, [r5], #1
    d032:	ebcb 0305 	rsb	r3, fp, r5
    d036:	42bb      	cmp	r3, r7
    d038:	f04f 020a 	mov.w	r2, #10
    d03c:	f04f 0300 	mov.w	r3, #0
    d040:	4621      	mov	r1, r4
    d042:	4648      	mov	r0, r9
    d044:	dbea      	blt.n	d01c <_dtoa_r+0x504>
    d046:	9b07      	ldr	r3, [sp, #28]
    d048:	9a06      	ldr	r2, [sp, #24]
    d04a:	2a01      	cmp	r2, #1
    d04c:	bfac      	ite	ge
    d04e:	189b      	addge	r3, r3, r2
    d050:	3301      	addlt	r3, #1
    d052:	461d      	mov	r5, r3
    d054:	f04f 0b00 	mov.w	fp, #0
    d058:	4621      	mov	r1, r4
    d05a:	2201      	movs	r2, #1
    d05c:	4648      	mov	r0, r9
    d05e:	f7ff fb07 	bl	c670 <__lshift>
    d062:	4641      	mov	r1, r8
    d064:	9008      	str	r0, [sp, #32]
    d066:	f7ff fb5b 	bl	c720 <__mcmp>
    d06a:	2800      	cmp	r0, #0
    d06c:	f340 830d 	ble.w	d68a <_dtoa_r+0xb72>
    d070:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    d074:	9907      	ldr	r1, [sp, #28]
    d076:	1e6b      	subs	r3, r5, #1
    d078:	e004      	b.n	d084 <_dtoa_r+0x56c>
    d07a:	428b      	cmp	r3, r1
    d07c:	f000 8278 	beq.w	d570 <_dtoa_r+0xa58>
    d080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    d084:	2a39      	cmp	r2, #57	; 0x39
    d086:	f103 0501 	add.w	r5, r3, #1
    d08a:	d0f6      	beq.n	d07a <_dtoa_r+0x562>
    d08c:	3201      	adds	r2, #1
    d08e:	701a      	strb	r2, [r3, #0]
    d090:	4641      	mov	r1, r8
    d092:	4648      	mov	r0, r9
    d094:	f7ff f962 	bl	c35c <_Bfree>
    d098:	2e00      	cmp	r6, #0
    d09a:	f43f af08 	beq.w	ceae <_dtoa_r+0x396>
    d09e:	f1bb 0f00 	cmp.w	fp, #0
    d0a2:	d005      	beq.n	d0b0 <_dtoa_r+0x598>
    d0a4:	45b3      	cmp	fp, r6
    d0a6:	d003      	beq.n	d0b0 <_dtoa_r+0x598>
    d0a8:	4659      	mov	r1, fp
    d0aa:	4648      	mov	r0, r9
    d0ac:	f7ff f956 	bl	c35c <_Bfree>
    d0b0:	4631      	mov	r1, r6
    d0b2:	4648      	mov	r0, r9
    d0b4:	f7ff f952 	bl	c35c <_Bfree>
    d0b8:	e6f9      	b.n	ceae <_dtoa_r+0x396>
    d0ba:	2301      	movs	r3, #1
    d0bc:	930c      	str	r3, [sp, #48]	; 0x30
    d0be:	e5e3      	b.n	cc88 <_dtoa_r+0x170>
    d0c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d0c4:	4640      	mov	r0, r8
    d0c6:	f7fd fbef 	bl	a8a8 <__aeabi_i2d>
    d0ca:	4602      	mov	r2, r0
    d0cc:	460b      	mov	r3, r1
    d0ce:	4630      	mov	r0, r6
    d0d0:	4639      	mov	r1, r7
    d0d2:	f7fd feb7 	bl	ae44 <__aeabi_dcmpeq>
    d0d6:	2800      	cmp	r0, #0
    d0d8:	f47f adc2 	bne.w	cc60 <_dtoa_r+0x148>
    d0dc:	f108 33ff 	add.w	r3, r8, #4294967295
    d0e0:	9304      	str	r3, [sp, #16]
    d0e2:	e5bd      	b.n	cc60 <_dtoa_r+0x148>
    d0e4:	9a05      	ldr	r2, [sp, #20]
    d0e6:	9b04      	ldr	r3, [sp, #16]
    d0e8:	1ad2      	subs	r2, r2, r3
    d0ea:	425b      	negs	r3, r3
    d0ec:	930a      	str	r3, [sp, #40]	; 0x28
    d0ee:	2300      	movs	r3, #0
    d0f0:	9205      	str	r2, [sp, #20]
    d0f2:	930b      	str	r3, [sp, #44]	; 0x2c
    d0f4:	e5da      	b.n	ccac <_dtoa_r+0x194>
    d0f6:	425b      	negs	r3, r3
    d0f8:	9305      	str	r3, [sp, #20]
    d0fa:	2300      	movs	r3, #0
    d0fc:	9302      	str	r3, [sp, #8]
    d0fe:	e5ca      	b.n	cc96 <_dtoa_r+0x17e>
    d100:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    d102:	9d05      	ldr	r5, [sp, #20]
    d104:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d106:	e705      	b.n	cf14 <_dtoa_r+0x3fc>
    d108:	f1c3 0820 	rsb	r8, r3, #32
    d10c:	fa0a f008 	lsl.w	r0, sl, r8
    d110:	e573      	b.n	cbfa <_dtoa_r+0xe2>
    d112:	900c      	str	r0, [sp, #48]	; 0x30
    d114:	e5b8      	b.n	cc88 <_dtoa_r+0x170>
    d116:	bf00      	nop
    d118:	40240000 	.word	0x40240000
    d11c:	2300      	movs	r3, #0
    d11e:	9309      	str	r3, [sp, #36]	; 0x24
    d120:	9b04      	ldr	r3, [sp, #16]
    d122:	9a21      	ldr	r2, [sp, #132]	; 0x84
    d124:	4413      	add	r3, r2
    d126:	930d      	str	r3, [sp, #52]	; 0x34
    d128:	3301      	adds	r3, #1
    d12a:	2b00      	cmp	r3, #0
    d12c:	9306      	str	r3, [sp, #24]
    d12e:	f340 8283 	ble.w	d638 <_dtoa_r+0xb20>
    d132:	9c06      	ldr	r4, [sp, #24]
    d134:	4626      	mov	r6, r4
    d136:	2100      	movs	r1, #0
    d138:	2e17      	cmp	r6, #23
    d13a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    d13e:	d90b      	bls.n	d158 <_dtoa_r+0x640>
    d140:	2201      	movs	r2, #1
    d142:	2304      	movs	r3, #4
    d144:	005b      	lsls	r3, r3, #1
    d146:	f103 0014 	add.w	r0, r3, #20
    d14a:	42b0      	cmp	r0, r6
    d14c:	4611      	mov	r1, r2
    d14e:	f102 0201 	add.w	r2, r2, #1
    d152:	d9f7      	bls.n	d144 <_dtoa_r+0x62c>
    d154:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    d158:	4648      	mov	r0, r9
    d15a:	f7ff f8d9 	bl	c310 <_Balloc>
    d15e:	2c0e      	cmp	r4, #14
    d160:	9007      	str	r0, [sp, #28]
    d162:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    d166:	f63f ade0 	bhi.w	cd2a <_dtoa_r+0x212>
    d16a:	2d00      	cmp	r5, #0
    d16c:	f43f addd 	beq.w	cd2a <_dtoa_r+0x212>
    d170:	9904      	ldr	r1, [sp, #16]
    d172:	4657      	mov	r7, sl
    d174:	46d8      	mov	r8, fp
    d176:	2900      	cmp	r1, #0
    d178:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
    d17c:	f340 8292 	ble.w	d6a4 <_dtoa_r+0xb8c>
    d180:	4b91      	ldr	r3, [pc, #580]	; (d3c8 <_dtoa_r+0x8b0>)
    d182:	f001 020f 	and.w	r2, r1, #15
    d186:	110e      	asrs	r6, r1, #4
    d188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d18c:	06f0      	lsls	r0, r6, #27
    d18e:	e9d3 4500 	ldrd	r4, r5, [r3]
    d192:	f140 824c 	bpl.w	d62e <_dtoa_r+0xb16>
    d196:	4b8d      	ldr	r3, [pc, #564]	; (d3cc <_dtoa_r+0x8b4>)
    d198:	4650      	mov	r0, sl
    d19a:	4659      	mov	r1, fp
    d19c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d1a0:	f7fd fd12 	bl	abc8 <__aeabi_ddiv>
    d1a4:	f006 060f 	and.w	r6, r6, #15
    d1a8:	4682      	mov	sl, r0
    d1aa:	468b      	mov	fp, r1
    d1ac:	f04f 0803 	mov.w	r8, #3
    d1b0:	b186      	cbz	r6, d1d4 <_dtoa_r+0x6bc>
    d1b2:	4f86      	ldr	r7, [pc, #536]	; (d3cc <_dtoa_r+0x8b4>)
    d1b4:	07f1      	lsls	r1, r6, #31
    d1b6:	d509      	bpl.n	d1cc <_dtoa_r+0x6b4>
    d1b8:	4620      	mov	r0, r4
    d1ba:	4629      	mov	r1, r5
    d1bc:	e9d7 2300 	ldrd	r2, r3, [r7]
    d1c0:	f7fd fbd8 	bl	a974 <__aeabi_dmul>
    d1c4:	f108 0801 	add.w	r8, r8, #1
    d1c8:	4604      	mov	r4, r0
    d1ca:	460d      	mov	r5, r1
    d1cc:	1076      	asrs	r6, r6, #1
    d1ce:	f107 0708 	add.w	r7, r7, #8
    d1d2:	d1ef      	bne.n	d1b4 <_dtoa_r+0x69c>
    d1d4:	4622      	mov	r2, r4
    d1d6:	462b      	mov	r3, r5
    d1d8:	4650      	mov	r0, sl
    d1da:	4659      	mov	r1, fp
    d1dc:	f7fd fcf4 	bl	abc8 <__aeabi_ddiv>
    d1e0:	4606      	mov	r6, r0
    d1e2:	460f      	mov	r7, r1
    d1e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1e6:	b143      	cbz	r3, d1fa <_dtoa_r+0x6e2>
    d1e8:	2200      	movs	r2, #0
    d1ea:	4b79      	ldr	r3, [pc, #484]	; (d3d0 <_dtoa_r+0x8b8>)
    d1ec:	4630      	mov	r0, r6
    d1ee:	4639      	mov	r1, r7
    d1f0:	f7fd fe32 	bl	ae58 <__aeabi_dcmplt>
    d1f4:	2800      	cmp	r0, #0
    d1f6:	f040 8320 	bne.w	d83a <_dtoa_r+0xd22>
    d1fa:	4640      	mov	r0, r8
    d1fc:	f7fd fb54 	bl	a8a8 <__aeabi_i2d>
    d200:	4632      	mov	r2, r6
    d202:	463b      	mov	r3, r7
    d204:	f7fd fbb6 	bl	a974 <__aeabi_dmul>
    d208:	4b72      	ldr	r3, [pc, #456]	; (d3d4 <_dtoa_r+0x8bc>)
    d20a:	2200      	movs	r2, #0
    d20c:	f7fd fa00 	bl	a610 <__adddf3>
    d210:	9b06      	ldr	r3, [sp, #24]
    d212:	4604      	mov	r4, r0
    d214:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    d218:	2b00      	cmp	r3, #0
    d21a:	f000 81df 	beq.w	d5dc <_dtoa_r+0xac4>
    d21e:	9b04      	ldr	r3, [sp, #16]
    d220:	f8dd 8018 	ldr.w	r8, [sp, #24]
    d224:	9311      	str	r3, [sp, #68]	; 0x44
    d226:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d228:	2b00      	cmp	r3, #0
    d22a:	f000 8297 	beq.w	d75c <_dtoa_r+0xc44>
    d22e:	4b66      	ldr	r3, [pc, #408]	; (d3c8 <_dtoa_r+0x8b0>)
    d230:	4969      	ldr	r1, [pc, #420]	; (d3d8 <_dtoa_r+0x8c0>)
    d232:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    d236:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    d23a:	2000      	movs	r0, #0
    d23c:	f7fd fcc4 	bl	abc8 <__aeabi_ddiv>
    d240:	4622      	mov	r2, r4
    d242:	462b      	mov	r3, r5
    d244:	f7fd f9e2 	bl	a60c <__aeabi_dsub>
    d248:	4682      	mov	sl, r0
    d24a:	468b      	mov	fp, r1
    d24c:	4630      	mov	r0, r6
    d24e:	4639      	mov	r1, r7
    d250:	f001 ff66 	bl	f120 <__aeabi_d2iz>
    d254:	4604      	mov	r4, r0
    d256:	f7fd fb27 	bl	a8a8 <__aeabi_i2d>
    d25a:	4602      	mov	r2, r0
    d25c:	460b      	mov	r3, r1
    d25e:	4630      	mov	r0, r6
    d260:	4639      	mov	r1, r7
    d262:	f7fd f9d3 	bl	a60c <__aeabi_dsub>
    d266:	3430      	adds	r4, #48	; 0x30
    d268:	9d07      	ldr	r5, [sp, #28]
    d26a:	b2e4      	uxtb	r4, r4
    d26c:	4606      	mov	r6, r0
    d26e:	460f      	mov	r7, r1
    d270:	702c      	strb	r4, [r5, #0]
    d272:	4602      	mov	r2, r0
    d274:	460b      	mov	r3, r1
    d276:	4650      	mov	r0, sl
    d278:	4659      	mov	r1, fp
    d27a:	3501      	adds	r5, #1
    d27c:	f7fd fe0a 	bl	ae94 <__aeabi_dcmpgt>
    d280:	2800      	cmp	r0, #0
    d282:	d14c      	bne.n	d31e <_dtoa_r+0x806>
    d284:	4632      	mov	r2, r6
    d286:	463b      	mov	r3, r7
    d288:	2000      	movs	r0, #0
    d28a:	4951      	ldr	r1, [pc, #324]	; (d3d0 <_dtoa_r+0x8b8>)
    d28c:	f7fd f9be 	bl	a60c <__aeabi_dsub>
    d290:	4602      	mov	r2, r0
    d292:	460b      	mov	r3, r1
    d294:	4650      	mov	r0, sl
    d296:	4659      	mov	r1, fp
    d298:	f7fd fdfc 	bl	ae94 <__aeabi_dcmpgt>
    d29c:	2800      	cmp	r0, #0
    d29e:	f040 830d 	bne.w	d8bc <_dtoa_r+0xda4>
    d2a2:	f1b8 0f01 	cmp.w	r8, #1
    d2a6:	f340 81b3 	ble.w	d610 <_dtoa_r+0xaf8>
    d2aa:	9b07      	ldr	r3, [sp, #28]
    d2ac:	4498      	add	r8, r3
    d2ae:	e00d      	b.n	d2cc <_dtoa_r+0x7b4>
    d2b0:	2000      	movs	r0, #0
    d2b2:	4947      	ldr	r1, [pc, #284]	; (d3d0 <_dtoa_r+0x8b8>)
    d2b4:	f7fd f9aa 	bl	a60c <__aeabi_dsub>
    d2b8:	4652      	mov	r2, sl
    d2ba:	465b      	mov	r3, fp
    d2bc:	f7fd fdcc 	bl	ae58 <__aeabi_dcmplt>
    d2c0:	2800      	cmp	r0, #0
    d2c2:	f040 82fb 	bne.w	d8bc <_dtoa_r+0xda4>
    d2c6:	4545      	cmp	r5, r8
    d2c8:	f000 81a2 	beq.w	d610 <_dtoa_r+0xaf8>
    d2cc:	4650      	mov	r0, sl
    d2ce:	4659      	mov	r1, fp
    d2d0:	2200      	movs	r2, #0
    d2d2:	4b42      	ldr	r3, [pc, #264]	; (d3dc <_dtoa_r+0x8c4>)
    d2d4:	f7fd fb4e 	bl	a974 <__aeabi_dmul>
    d2d8:	2200      	movs	r2, #0
    d2da:	4b40      	ldr	r3, [pc, #256]	; (d3dc <_dtoa_r+0x8c4>)
    d2dc:	4682      	mov	sl, r0
    d2de:	468b      	mov	fp, r1
    d2e0:	4630      	mov	r0, r6
    d2e2:	4639      	mov	r1, r7
    d2e4:	f7fd fb46 	bl	a974 <__aeabi_dmul>
    d2e8:	460f      	mov	r7, r1
    d2ea:	4606      	mov	r6, r0
    d2ec:	f001 ff18 	bl	f120 <__aeabi_d2iz>
    d2f0:	4604      	mov	r4, r0
    d2f2:	f7fd fad9 	bl	a8a8 <__aeabi_i2d>
    d2f6:	4602      	mov	r2, r0
    d2f8:	460b      	mov	r3, r1
    d2fa:	4630      	mov	r0, r6
    d2fc:	4639      	mov	r1, r7
    d2fe:	f7fd f985 	bl	a60c <__aeabi_dsub>
    d302:	3430      	adds	r4, #48	; 0x30
    d304:	b2e4      	uxtb	r4, r4
    d306:	4652      	mov	r2, sl
    d308:	465b      	mov	r3, fp
    d30a:	f805 4b01 	strb.w	r4, [r5], #1
    d30e:	4606      	mov	r6, r0
    d310:	460f      	mov	r7, r1
    d312:	f7fd fda1 	bl	ae58 <__aeabi_dcmplt>
    d316:	4632      	mov	r2, r6
    d318:	463b      	mov	r3, r7
    d31a:	2800      	cmp	r0, #0
    d31c:	d0c8      	beq.n	d2b0 <_dtoa_r+0x798>
    d31e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d320:	9304      	str	r3, [sp, #16]
    d322:	e5c4      	b.n	ceae <_dtoa_r+0x396>
    d324:	2300      	movs	r3, #0
    d326:	9309      	str	r3, [sp, #36]	; 0x24
    d328:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d32a:	2b00      	cmp	r3, #0
    d32c:	f340 8189 	ble.w	d642 <_dtoa_r+0xb2a>
    d330:	461e      	mov	r6, r3
    d332:	461c      	mov	r4, r3
    d334:	930d      	str	r3, [sp, #52]	; 0x34
    d336:	9306      	str	r3, [sp, #24]
    d338:	e6fd      	b.n	d136 <_dtoa_r+0x61e>
    d33a:	2301      	movs	r3, #1
    d33c:	9309      	str	r3, [sp, #36]	; 0x24
    d33e:	e7f3      	b.n	d328 <_dtoa_r+0x810>
    d340:	9408      	str	r4, [sp, #32]
    d342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d344:	9908      	ldr	r1, [sp, #32]
    d346:	4648      	mov	r0, r9
    d348:	f7ff f942 	bl	c5d0 <__pow5mult>
    d34c:	4604      	mov	r4, r0
    d34e:	e611      	b.n	cf74 <_dtoa_r+0x45c>
    d350:	9b06      	ldr	r3, [sp, #24]
    d352:	2b00      	cmp	r3, #0
    d354:	f73f acfc 	bgt.w	cd50 <_dtoa_r+0x238>
    d358:	f040 82da 	bne.w	d910 <_dtoa_r+0xdf8>
    d35c:	2200      	movs	r2, #0
    d35e:	4b20      	ldr	r3, [pc, #128]	; (d3e0 <_dtoa_r+0x8c8>)
    d360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d364:	f7fd fb06 	bl	a974 <__aeabi_dmul>
    d368:	4652      	mov	r2, sl
    d36a:	465b      	mov	r3, fp
    d36c:	f7fd fd88 	bl	ae80 <__aeabi_dcmpge>
    d370:	f8dd 8018 	ldr.w	r8, [sp, #24]
    d374:	4646      	mov	r6, r8
    d376:	2800      	cmp	r0, #0
    d378:	f000 80f2 	beq.w	d560 <_dtoa_r+0xa48>
    d37c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d37e:	9d07      	ldr	r5, [sp, #28]
    d380:	43db      	mvns	r3, r3
    d382:	9304      	str	r3, [sp, #16]
    d384:	4641      	mov	r1, r8
    d386:	4648      	mov	r0, r9
    d388:	f7fe ffe8 	bl	c35c <_Bfree>
    d38c:	2e00      	cmp	r6, #0
    d38e:	f43f ad8e 	beq.w	ceae <_dtoa_r+0x396>
    d392:	e68d      	b.n	d0b0 <_dtoa_r+0x598>
    d394:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d396:	2a00      	cmp	r2, #0
    d398:	f000 8241 	beq.w	d81e <_dtoa_r+0xd06>
    d39c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    d3a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    d3a2:	9d05      	ldr	r5, [sp, #20]
    d3a4:	e5ab      	b.n	cefe <_dtoa_r+0x3e6>
    d3a6:	201c      	movs	r0, #28
    d3a8:	9b05      	ldr	r3, [sp, #20]
    d3aa:	4403      	add	r3, r0
    d3ac:	9305      	str	r3, [sp, #20]
    d3ae:	9b02      	ldr	r3, [sp, #8]
    d3b0:	4403      	add	r3, r0
    d3b2:	4405      	add	r5, r0
    d3b4:	9302      	str	r3, [sp, #8]
    d3b6:	e60e      	b.n	cfd6 <_dtoa_r+0x4be>
    d3b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d3ba:	2b01      	cmp	r3, #1
    d3bc:	f340 8282 	ble.w	d8c4 <_dtoa_r+0xdac>
    d3c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d3c2:	2001      	movs	r0, #1
    d3c4:	e5f3      	b.n	cfae <_dtoa_r+0x496>
    d3c6:	bf00      	nop
    d3c8:	00010bc8 	.word	0x00010bc8
    d3cc:	00010ca0 	.word	0x00010ca0
    d3d0:	3ff00000 	.word	0x3ff00000
    d3d4:	401c0000 	.word	0x401c0000
    d3d8:	3fe00000 	.word	0x3fe00000
    d3dc:	40240000 	.word	0x40240000
    d3e0:	40140000 	.word	0x40140000
    d3e4:	4631      	mov	r1, r6
    d3e6:	2300      	movs	r3, #0
    d3e8:	220a      	movs	r2, #10
    d3ea:	4648      	mov	r0, r9
    d3ec:	f7fe ffc0 	bl	c370 <__multadd>
    d3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	4606      	mov	r6, r0
    d3f6:	f340 8297 	ble.w	d928 <_dtoa_r+0xe10>
    d3fa:	9306      	str	r3, [sp, #24]
    d3fc:	2d00      	cmp	r5, #0
    d3fe:	dd05      	ble.n	d40c <_dtoa_r+0x8f4>
    d400:	4631      	mov	r1, r6
    d402:	462a      	mov	r2, r5
    d404:	4648      	mov	r0, r9
    d406:	f7ff f933 	bl	c670 <__lshift>
    d40a:	4606      	mov	r6, r0
    d40c:	2f00      	cmp	r7, #0
    d40e:	f040 817c 	bne.w	d70a <_dtoa_r+0xbf2>
    d412:	9605      	str	r6, [sp, #20]
    d414:	9b06      	ldr	r3, [sp, #24]
    d416:	9a07      	ldr	r2, [sp, #28]
    d418:	f8dd b014 	ldr.w	fp, [sp, #20]
    d41c:	3b01      	subs	r3, #1
    d41e:	18d3      	adds	r3, r2, r3
    d420:	9308      	str	r3, [sp, #32]
    d422:	f00a 0301 	and.w	r3, sl, #1
    d426:	9309      	str	r3, [sp, #36]	; 0x24
    d428:	4617      	mov	r7, r2
    d42a:	46c2      	mov	sl, r8
    d42c:	4651      	mov	r1, sl
    d42e:	4620      	mov	r0, r4
    d430:	f7ff fadc 	bl	c9ec <quorem>
    d434:	4631      	mov	r1, r6
    d436:	4605      	mov	r5, r0
    d438:	4620      	mov	r0, r4
    d43a:	f7ff f971 	bl	c720 <__mcmp>
    d43e:	465a      	mov	r2, fp
    d440:	9002      	str	r0, [sp, #8]
    d442:	4651      	mov	r1, sl
    d444:	4648      	mov	r0, r9
    d446:	f7ff f98b 	bl	c760 <__mdiff>
    d44a:	68c2      	ldr	r2, [r0, #12]
    d44c:	4680      	mov	r8, r0
    d44e:	f105 0330 	add.w	r3, r5, #48	; 0x30
    d452:	2a00      	cmp	r2, #0
    d454:	d149      	bne.n	d4ea <_dtoa_r+0x9d2>
    d456:	4601      	mov	r1, r0
    d458:	4620      	mov	r0, r4
    d45a:	9306      	str	r3, [sp, #24]
    d45c:	f7ff f960 	bl	c720 <__mcmp>
    d460:	4641      	mov	r1, r8
    d462:	9005      	str	r0, [sp, #20]
    d464:	4648      	mov	r0, r9
    d466:	f7fe ff79 	bl	c35c <_Bfree>
    d46a:	9a05      	ldr	r2, [sp, #20]
    d46c:	9b06      	ldr	r3, [sp, #24]
    d46e:	b92a      	cbnz	r2, d47c <_dtoa_r+0x964>
    d470:	9920      	ldr	r1, [sp, #128]	; 0x80
    d472:	b919      	cbnz	r1, d47c <_dtoa_r+0x964>
    d474:	9909      	ldr	r1, [sp, #36]	; 0x24
    d476:	2900      	cmp	r1, #0
    d478:	f000 8236 	beq.w	d8e8 <_dtoa_r+0xdd0>
    d47c:	9902      	ldr	r1, [sp, #8]
    d47e:	2900      	cmp	r1, #0
    d480:	f2c0 80e4 	blt.w	d64c <_dtoa_r+0xb34>
    d484:	d105      	bne.n	d492 <_dtoa_r+0x97a>
    d486:	9920      	ldr	r1, [sp, #128]	; 0x80
    d488:	b919      	cbnz	r1, d492 <_dtoa_r+0x97a>
    d48a:	9909      	ldr	r1, [sp, #36]	; 0x24
    d48c:	2900      	cmp	r1, #0
    d48e:	f000 80dd 	beq.w	d64c <_dtoa_r+0xb34>
    d492:	2a00      	cmp	r2, #0
    d494:	f300 814d 	bgt.w	d732 <_dtoa_r+0xc1a>
    d498:	9a08      	ldr	r2, [sp, #32]
    d49a:	703b      	strb	r3, [r7, #0]
    d49c:	f107 0801 	add.w	r8, r7, #1
    d4a0:	4297      	cmp	r7, r2
    d4a2:	4645      	mov	r5, r8
    d4a4:	f000 8154 	beq.w	d750 <_dtoa_r+0xc38>
    d4a8:	4621      	mov	r1, r4
    d4aa:	2300      	movs	r3, #0
    d4ac:	220a      	movs	r2, #10
    d4ae:	4648      	mov	r0, r9
    d4b0:	f7fe ff5e 	bl	c370 <__multadd>
    d4b4:	455e      	cmp	r6, fp
    d4b6:	4604      	mov	r4, r0
    d4b8:	4631      	mov	r1, r6
    d4ba:	f04f 0300 	mov.w	r3, #0
    d4be:	f04f 020a 	mov.w	r2, #10
    d4c2:	4648      	mov	r0, r9
    d4c4:	d00b      	beq.n	d4de <_dtoa_r+0x9c6>
    d4c6:	f7fe ff53 	bl	c370 <__multadd>
    d4ca:	4659      	mov	r1, fp
    d4cc:	4606      	mov	r6, r0
    d4ce:	2300      	movs	r3, #0
    d4d0:	220a      	movs	r2, #10
    d4d2:	4648      	mov	r0, r9
    d4d4:	f7fe ff4c 	bl	c370 <__multadd>
    d4d8:	4647      	mov	r7, r8
    d4da:	4683      	mov	fp, r0
    d4dc:	e7a6      	b.n	d42c <_dtoa_r+0x914>
    d4de:	f7fe ff47 	bl	c370 <__multadd>
    d4e2:	4647      	mov	r7, r8
    d4e4:	4606      	mov	r6, r0
    d4e6:	4683      	mov	fp, r0
    d4e8:	e7a0      	b.n	d42c <_dtoa_r+0x914>
    d4ea:	4601      	mov	r1, r0
    d4ec:	4648      	mov	r0, r9
    d4ee:	9305      	str	r3, [sp, #20]
    d4f0:	f7fe ff34 	bl	c35c <_Bfree>
    d4f4:	2201      	movs	r2, #1
    d4f6:	9b05      	ldr	r3, [sp, #20]
    d4f8:	e7c0      	b.n	d47c <_dtoa_r+0x964>
    d4fa:	4641      	mov	r1, r8
    d4fc:	4620      	mov	r0, r4
    d4fe:	f7ff f90f 	bl	c720 <__mcmp>
    d502:	2800      	cmp	r0, #0
    d504:	f6bf ad7d 	bge.w	d002 <_dtoa_r+0x4ea>
    d508:	4621      	mov	r1, r4
    d50a:	9c04      	ldr	r4, [sp, #16]
    d50c:	2300      	movs	r3, #0
    d50e:	3c01      	subs	r4, #1
    d510:	220a      	movs	r2, #10
    d512:	4648      	mov	r0, r9
    d514:	9404      	str	r4, [sp, #16]
    d516:	f7fe ff2b 	bl	c370 <__multadd>
    d51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d51c:	4604      	mov	r4, r0
    d51e:	2b00      	cmp	r3, #0
    d520:	f47f af60 	bne.w	d3e4 <_dtoa_r+0x8cc>
    d524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d526:	2b00      	cmp	r3, #0
    d528:	f340 81f6 	ble.w	d918 <_dtoa_r+0xe00>
    d52c:	9306      	str	r3, [sp, #24]
    d52e:	e570      	b.n	d012 <_dtoa_r+0x4fa>
    d530:	9c08      	ldr	r4, [sp, #32]
    d532:	e51f      	b.n	cf74 <_dtoa_r+0x45c>
    d534:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d536:	2b02      	cmp	r3, #2
    d538:	f77f ad67 	ble.w	d00a <_dtoa_r+0x4f2>
    d53c:	9b06      	ldr	r3, [sp, #24]
    d53e:	2b00      	cmp	r3, #0
    d540:	f040 8179 	bne.w	d836 <_dtoa_r+0xd1e>
    d544:	4641      	mov	r1, r8
    d546:	2205      	movs	r2, #5
    d548:	4648      	mov	r0, r9
    d54a:	f7fe ff11 	bl	c370 <__multadd>
    d54e:	4601      	mov	r1, r0
    d550:	4680      	mov	r8, r0
    d552:	4620      	mov	r0, r4
    d554:	f7ff f8e4 	bl	c720 <__mcmp>
    d558:	2800      	cmp	r0, #0
    d55a:	9408      	str	r4, [sp, #32]
    d55c:	f77f af0e 	ble.w	d37c <_dtoa_r+0x864>
    d560:	9a04      	ldr	r2, [sp, #16]
    d562:	9907      	ldr	r1, [sp, #28]
    d564:	2331      	movs	r3, #49	; 0x31
    d566:	3201      	adds	r2, #1
    d568:	9204      	str	r2, [sp, #16]
    d56a:	700b      	strb	r3, [r1, #0]
    d56c:	1c4d      	adds	r5, r1, #1
    d56e:	e709      	b.n	d384 <_dtoa_r+0x86c>
    d570:	9a04      	ldr	r2, [sp, #16]
    d572:	3201      	adds	r2, #1
    d574:	9204      	str	r2, [sp, #16]
    d576:	9a07      	ldr	r2, [sp, #28]
    d578:	2331      	movs	r3, #49	; 0x31
    d57a:	7013      	strb	r3, [r2, #0]
    d57c:	e588      	b.n	d090 <_dtoa_r+0x578>
    d57e:	2301      	movs	r3, #1
    d580:	9309      	str	r3, [sp, #36]	; 0x24
    d582:	e5cd      	b.n	d120 <_dtoa_r+0x608>
    d584:	f8dd 9014 	ldr.w	r9, [sp, #20]
    d588:	e491      	b.n	ceae <_dtoa_r+0x396>
    d58a:	f1ba 0f00 	cmp.w	sl, #0
    d58e:	f47f ad04 	bne.w	cf9a <_dtoa_r+0x482>
    d592:	f3cb 0313 	ubfx	r3, fp, #0, #20
    d596:	2b00      	cmp	r3, #0
    d598:	f040 813f 	bne.w	d81a <_dtoa_r+0xd02>
    d59c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    d5a0:	0d3f      	lsrs	r7, r7, #20
    d5a2:	053f      	lsls	r7, r7, #20
    d5a4:	b137      	cbz	r7, d5b4 <_dtoa_r+0xa9c>
    d5a6:	9b05      	ldr	r3, [sp, #20]
    d5a8:	3301      	adds	r3, #1
    d5aa:	9305      	str	r3, [sp, #20]
    d5ac:	9b02      	ldr	r3, [sp, #8]
    d5ae:	3301      	adds	r3, #1
    d5b0:	9302      	str	r3, [sp, #8]
    d5b2:	2701      	movs	r7, #1
    d5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5b6:	2001      	movs	r0, #1
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	f43f acf8 	beq.w	cfae <_dtoa_r+0x496>
    d5be:	e4ed      	b.n	cf9c <_dtoa_r+0x484>
    d5c0:	4640      	mov	r0, r8
    d5c2:	f7fd f971 	bl	a8a8 <__aeabi_i2d>
    d5c6:	4632      	mov	r2, r6
    d5c8:	463b      	mov	r3, r7
    d5ca:	f7fd f9d3 	bl	a974 <__aeabi_dmul>
    d5ce:	2200      	movs	r2, #0
    d5d0:	4bbf      	ldr	r3, [pc, #764]	; (d8d0 <_dtoa_r+0xdb8>)
    d5d2:	f7fd f81d 	bl	a610 <__adddf3>
    d5d6:	4604      	mov	r4, r0
    d5d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    d5dc:	4630      	mov	r0, r6
    d5de:	4639      	mov	r1, r7
    d5e0:	2200      	movs	r2, #0
    d5e2:	4bbc      	ldr	r3, [pc, #752]	; (d8d4 <_dtoa_r+0xdbc>)
    d5e4:	f7fd f812 	bl	a60c <__aeabi_dsub>
    d5e8:	4622      	mov	r2, r4
    d5ea:	462b      	mov	r3, r5
    d5ec:	4606      	mov	r6, r0
    d5ee:	460f      	mov	r7, r1
    d5f0:	f7fd fc50 	bl	ae94 <__aeabi_dcmpgt>
    d5f4:	4680      	mov	r8, r0
    d5f6:	2800      	cmp	r0, #0
    d5f8:	f040 8105 	bne.w	d806 <_dtoa_r+0xcee>
    d5fc:	4622      	mov	r2, r4
    d5fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    d602:	4630      	mov	r0, r6
    d604:	4639      	mov	r1, r7
    d606:	f7fd fc27 	bl	ae58 <__aeabi_dcmplt>
    d60a:	b108      	cbz	r0, d610 <_dtoa_r+0xaf8>
    d60c:	4646      	mov	r6, r8
    d60e:	e6b5      	b.n	d37c <_dtoa_r+0x864>
    d610:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    d614:	f7ff bb89 	b.w	cd2a <_dtoa_r+0x212>
    d618:	9807      	ldr	r0, [sp, #28]
    d61a:	f7ff baae 	b.w	cb7a <_dtoa_r+0x62>
    d61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d622:	970a      	str	r7, [sp, #40]	; 0x28
    d624:	1afb      	subs	r3, r7, r3
    d626:	441a      	add	r2, r3
    d628:	920b      	str	r2, [sp, #44]	; 0x2c
    d62a:	2700      	movs	r7, #0
    d62c:	e461      	b.n	cef2 <_dtoa_r+0x3da>
    d62e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    d632:	f04f 0802 	mov.w	r8, #2
    d636:	e5bb      	b.n	d1b0 <_dtoa_r+0x698>
    d638:	461c      	mov	r4, r3
    d63a:	2100      	movs	r1, #0
    d63c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    d640:	e58a      	b.n	d158 <_dtoa_r+0x640>
    d642:	2401      	movs	r4, #1
    d644:	9421      	str	r4, [sp, #132]	; 0x84
    d646:	940d      	str	r4, [sp, #52]	; 0x34
    d648:	9406      	str	r4, [sp, #24]
    d64a:	e7f6      	b.n	d63a <_dtoa_r+0xb22>
    d64c:	2a00      	cmp	r2, #0
    d64e:	46d0      	mov	r8, sl
    d650:	f8cd b014 	str.w	fp, [sp, #20]
    d654:	469a      	mov	sl, r3
    d656:	dd11      	ble.n	d67c <_dtoa_r+0xb64>
    d658:	4621      	mov	r1, r4
    d65a:	2201      	movs	r2, #1
    d65c:	4648      	mov	r0, r9
    d65e:	f7ff f807 	bl	c670 <__lshift>
    d662:	4641      	mov	r1, r8
    d664:	4604      	mov	r4, r0
    d666:	f7ff f85b 	bl	c720 <__mcmp>
    d66a:	2800      	cmp	r0, #0
    d66c:	f340 8149 	ble.w	d902 <_dtoa_r+0xdea>
    d670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    d674:	f000 8106 	beq.w	d884 <_dtoa_r+0xd6c>
    d678:	f105 0a31 	add.w	sl, r5, #49	; 0x31
    d67c:	46b3      	mov	fp, r6
    d67e:	f887 a000 	strb.w	sl, [r7]
    d682:	1c7d      	adds	r5, r7, #1
    d684:	9e05      	ldr	r6, [sp, #20]
    d686:	9408      	str	r4, [sp, #32]
    d688:	e502      	b.n	d090 <_dtoa_r+0x578>
    d68a:	d104      	bne.n	d696 <_dtoa_r+0xb7e>
    d68c:	f01a 0f01 	tst.w	sl, #1
    d690:	d001      	beq.n	d696 <_dtoa_r+0xb7e>
    d692:	e4ed      	b.n	d070 <_dtoa_r+0x558>
    d694:	4615      	mov	r5, r2
    d696:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d69a:	2b30      	cmp	r3, #48	; 0x30
    d69c:	f105 32ff 	add.w	r2, r5, #4294967295
    d6a0:	d0f8      	beq.n	d694 <_dtoa_r+0xb7c>
    d6a2:	e4f5      	b.n	d090 <_dtoa_r+0x578>
    d6a4:	9b04      	ldr	r3, [sp, #16]
    d6a6:	425c      	negs	r4, r3
    d6a8:	2c00      	cmp	r4, #0
    d6aa:	f000 80bf 	beq.w	d82c <_dtoa_r+0xd14>
    d6ae:	4b8a      	ldr	r3, [pc, #552]	; (d8d8 <_dtoa_r+0xdc0>)
    d6b0:	f004 020f 	and.w	r2, r4, #15
    d6b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d6c0:	f7fd f958 	bl	a974 <__aeabi_dmul>
    d6c4:	1124      	asrs	r4, r4, #4
    d6c6:	4606      	mov	r6, r0
    d6c8:	460f      	mov	r7, r1
    d6ca:	f000 812a 	beq.w	d922 <_dtoa_r+0xe0a>
    d6ce:	4d83      	ldr	r5, [pc, #524]	; (d8dc <_dtoa_r+0xdc4>)
    d6d0:	f04f 0802 	mov.w	r8, #2
    d6d4:	07e2      	lsls	r2, r4, #31
    d6d6:	d509      	bpl.n	d6ec <_dtoa_r+0xbd4>
    d6d8:	4630      	mov	r0, r6
    d6da:	4639      	mov	r1, r7
    d6dc:	e9d5 2300 	ldrd	r2, r3, [r5]
    d6e0:	f7fd f948 	bl	a974 <__aeabi_dmul>
    d6e4:	f108 0801 	add.w	r8, r8, #1
    d6e8:	4606      	mov	r6, r0
    d6ea:	460f      	mov	r7, r1
    d6ec:	1064      	asrs	r4, r4, #1
    d6ee:	f105 0508 	add.w	r5, r5, #8
    d6f2:	d1ef      	bne.n	d6d4 <_dtoa_r+0xbbc>
    d6f4:	e576      	b.n	d1e4 <_dtoa_r+0x6cc>
    d6f6:	9907      	ldr	r1, [sp, #28]
    d6f8:	2230      	movs	r2, #48	; 0x30
    d6fa:	700a      	strb	r2, [r1, #0]
    d6fc:	9a04      	ldr	r2, [sp, #16]
    d6fe:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    d702:	3201      	adds	r2, #1
    d704:	9204      	str	r2, [sp, #16]
    d706:	f7ff bbd0 	b.w	ceaa <_dtoa_r+0x392>
    d70a:	6871      	ldr	r1, [r6, #4]
    d70c:	4648      	mov	r0, r9
    d70e:	f7fe fdff 	bl	c310 <_Balloc>
    d712:	6933      	ldr	r3, [r6, #16]
    d714:	1c9a      	adds	r2, r3, #2
    d716:	4605      	mov	r5, r0
    d718:	0092      	lsls	r2, r2, #2
    d71a:	f106 010c 	add.w	r1, r6, #12
    d71e:	300c      	adds	r0, #12
    d720:	f7fa fdec 	bl	82fc <memcpy>
    d724:	4629      	mov	r1, r5
    d726:	2201      	movs	r2, #1
    d728:	4648      	mov	r0, r9
    d72a:	f7fe ffa1 	bl	c670 <__lshift>
    d72e:	9005      	str	r0, [sp, #20]
    d730:	e670      	b.n	d414 <_dtoa_r+0x8fc>
    d732:	2b39      	cmp	r3, #57	; 0x39
    d734:	f8cd b014 	str.w	fp, [sp, #20]
    d738:	46d0      	mov	r8, sl
    d73a:	f000 80a3 	beq.w	d884 <_dtoa_r+0xd6c>
    d73e:	f103 0a01 	add.w	sl, r3, #1
    d742:	46b3      	mov	fp, r6
    d744:	f887 a000 	strb.w	sl, [r7]
    d748:	1c7d      	adds	r5, r7, #1
    d74a:	9e05      	ldr	r6, [sp, #20]
    d74c:	9408      	str	r4, [sp, #32]
    d74e:	e49f      	b.n	d090 <_dtoa_r+0x578>
    d750:	465a      	mov	r2, fp
    d752:	46d0      	mov	r8, sl
    d754:	46b3      	mov	fp, r6
    d756:	469a      	mov	sl, r3
    d758:	4616      	mov	r6, r2
    d75a:	e47d      	b.n	d058 <_dtoa_r+0x540>
    d75c:	495e      	ldr	r1, [pc, #376]	; (d8d8 <_dtoa_r+0xdc0>)
    d75e:	f108 3aff 	add.w	sl, r8, #4294967295
    d762:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
    d766:	4622      	mov	r2, r4
    d768:	462b      	mov	r3, r5
    d76a:	e9d1 0100 	ldrd	r0, r1, [r1]
    d76e:	f7fd f901 	bl	a974 <__aeabi_dmul>
    d772:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    d776:	4639      	mov	r1, r7
    d778:	4630      	mov	r0, r6
    d77a:	f001 fcd1 	bl	f120 <__aeabi_d2iz>
    d77e:	4604      	mov	r4, r0
    d780:	f7fd f892 	bl	a8a8 <__aeabi_i2d>
    d784:	4602      	mov	r2, r0
    d786:	460b      	mov	r3, r1
    d788:	4630      	mov	r0, r6
    d78a:	4639      	mov	r1, r7
    d78c:	f7fc ff3e 	bl	a60c <__aeabi_dsub>
    d790:	9a07      	ldr	r2, [sp, #28]
    d792:	3430      	adds	r4, #48	; 0x30
    d794:	f1b8 0f01 	cmp.w	r8, #1
    d798:	4606      	mov	r6, r0
    d79a:	460f      	mov	r7, r1
    d79c:	7014      	strb	r4, [r2, #0]
    d79e:	f102 0501 	add.w	r5, r2, #1
    d7a2:	d01e      	beq.n	d7e2 <_dtoa_r+0xcca>
    d7a4:	9b07      	ldr	r3, [sp, #28]
    d7a6:	eb03 0b08 	add.w	fp, r3, r8
    d7aa:	46a8      	mov	r8, r5
    d7ac:	2200      	movs	r2, #0
    d7ae:	4b4c      	ldr	r3, [pc, #304]	; (d8e0 <_dtoa_r+0xdc8>)
    d7b0:	4630      	mov	r0, r6
    d7b2:	4639      	mov	r1, r7
    d7b4:	f7fd f8de 	bl	a974 <__aeabi_dmul>
    d7b8:	460f      	mov	r7, r1
    d7ba:	4606      	mov	r6, r0
    d7bc:	f001 fcb0 	bl	f120 <__aeabi_d2iz>
    d7c0:	4604      	mov	r4, r0
    d7c2:	f7fd f871 	bl	a8a8 <__aeabi_i2d>
    d7c6:	3430      	adds	r4, #48	; 0x30
    d7c8:	4602      	mov	r2, r0
    d7ca:	460b      	mov	r3, r1
    d7cc:	4630      	mov	r0, r6
    d7ce:	4639      	mov	r1, r7
    d7d0:	f7fc ff1c 	bl	a60c <__aeabi_dsub>
    d7d4:	f808 4b01 	strb.w	r4, [r8], #1
    d7d8:	45c3      	cmp	fp, r8
    d7da:	4606      	mov	r6, r0
    d7dc:	460f      	mov	r7, r1
    d7de:	d1e5      	bne.n	d7ac <_dtoa_r+0xc94>
    d7e0:	4455      	add	r5, sl
    d7e2:	2200      	movs	r2, #0
    d7e4:	4b3f      	ldr	r3, [pc, #252]	; (d8e4 <_dtoa_r+0xdcc>)
    d7e6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d7ea:	f7fc ff11 	bl	a610 <__adddf3>
    d7ee:	4632      	mov	r2, r6
    d7f0:	463b      	mov	r3, r7
    d7f2:	f7fd fb31 	bl	ae58 <__aeabi_dcmplt>
    d7f6:	2800      	cmp	r0, #0
    d7f8:	d04c      	beq.n	d894 <_dtoa_r+0xd7c>
    d7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d7fc:	9304      	str	r3, [sp, #16]
    d7fe:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    d802:	f7ff bb46 	b.w	ce92 <_dtoa_r+0x37a>
    d806:	f04f 0800 	mov.w	r8, #0
    d80a:	4646      	mov	r6, r8
    d80c:	e6a8      	b.n	d560 <_dtoa_r+0xa48>
    d80e:	9b05      	ldr	r3, [sp, #20]
    d810:	9a06      	ldr	r2, [sp, #24]
    d812:	1a9d      	subs	r5, r3, r2
    d814:	2300      	movs	r3, #0
    d816:	f7ff bb72 	b.w	cefe <_dtoa_r+0x3e6>
    d81a:	2700      	movs	r7, #0
    d81c:	e6ca      	b.n	d5b4 <_dtoa_r+0xa9c>
    d81e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d820:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    d822:	9d05      	ldr	r5, [sp, #20]
    d824:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    d828:	f7ff bb69 	b.w	cefe <_dtoa_r+0x3e6>
    d82c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    d830:	f04f 0802 	mov.w	r8, #2
    d834:	e4d6      	b.n	d1e4 <_dtoa_r+0x6cc>
    d836:	9408      	str	r4, [sp, #32]
    d838:	e5a0      	b.n	d37c <_dtoa_r+0x864>
    d83a:	9b06      	ldr	r3, [sp, #24]
    d83c:	2b00      	cmp	r3, #0
    d83e:	f43f aebf 	beq.w	d5c0 <_dtoa_r+0xaa8>
    d842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d844:	2b00      	cmp	r3, #0
    d846:	f77f aee3 	ble.w	d610 <_dtoa_r+0xaf8>
    d84a:	2200      	movs	r2, #0
    d84c:	4b24      	ldr	r3, [pc, #144]	; (d8e0 <_dtoa_r+0xdc8>)
    d84e:	4630      	mov	r0, r6
    d850:	4639      	mov	r1, r7
    d852:	f7fd f88f 	bl	a974 <__aeabi_dmul>
    d856:	4606      	mov	r6, r0
    d858:	460f      	mov	r7, r1
    d85a:	f108 0001 	add.w	r0, r8, #1
    d85e:	f7fd f823 	bl	a8a8 <__aeabi_i2d>
    d862:	4632      	mov	r2, r6
    d864:	463b      	mov	r3, r7
    d866:	f7fd f885 	bl	a974 <__aeabi_dmul>
    d86a:	2200      	movs	r2, #0
    d86c:	4b18      	ldr	r3, [pc, #96]	; (d8d0 <_dtoa_r+0xdb8>)
    d86e:	f7fc fecf 	bl	a610 <__adddf3>
    d872:	9a04      	ldr	r2, [sp, #16]
    d874:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    d878:	3a01      	subs	r2, #1
    d87a:	4604      	mov	r4, r0
    d87c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    d880:	9211      	str	r2, [sp, #68]	; 0x44
    d882:	e4d0      	b.n	d226 <_dtoa_r+0x70e>
    d884:	2239      	movs	r2, #57	; 0x39
    d886:	46b3      	mov	fp, r6
    d888:	9408      	str	r4, [sp, #32]
    d88a:	9e05      	ldr	r6, [sp, #20]
    d88c:	703a      	strb	r2, [r7, #0]
    d88e:	1c7d      	adds	r5, r7, #1
    d890:	f7ff bbf0 	b.w	d074 <_dtoa_r+0x55c>
    d894:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d898:	2000      	movs	r0, #0
    d89a:	4912      	ldr	r1, [pc, #72]	; (d8e4 <_dtoa_r+0xdcc>)
    d89c:	f7fc feb6 	bl	a60c <__aeabi_dsub>
    d8a0:	4632      	mov	r2, r6
    d8a2:	463b      	mov	r3, r7
    d8a4:	f7fd faf6 	bl	ae94 <__aeabi_dcmpgt>
    d8a8:	b908      	cbnz	r0, d8ae <_dtoa_r+0xd96>
    d8aa:	e6b1      	b.n	d610 <_dtoa_r+0xaf8>
    d8ac:	4615      	mov	r5, r2
    d8ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d8b2:	2b30      	cmp	r3, #48	; 0x30
    d8b4:	f105 32ff 	add.w	r2, r5, #4294967295
    d8b8:	d0f8      	beq.n	d8ac <_dtoa_r+0xd94>
    d8ba:	e530      	b.n	d31e <_dtoa_r+0x806>
    d8bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8be:	9304      	str	r3, [sp, #16]
    d8c0:	f7ff bae7 	b.w	ce92 <_dtoa_r+0x37a>
    d8c4:	f1ba 0f00 	cmp.w	sl, #0
    d8c8:	f47f ad7a 	bne.w	d3c0 <_dtoa_r+0x8a8>
    d8cc:	e661      	b.n	d592 <_dtoa_r+0xa7a>
    d8ce:	bf00      	nop
    d8d0:	401c0000 	.word	0x401c0000
    d8d4:	40140000 	.word	0x40140000
    d8d8:	00010bc8 	.word	0x00010bc8
    d8dc:	00010ca0 	.word	0x00010ca0
    d8e0:	40240000 	.word	0x40240000
    d8e4:	3fe00000 	.word	0x3fe00000
    d8e8:	2b39      	cmp	r3, #57	; 0x39
    d8ea:	f8cd b014 	str.w	fp, [sp, #20]
    d8ee:	46d0      	mov	r8, sl
    d8f0:	f8dd b008 	ldr.w	fp, [sp, #8]
    d8f4:	469a      	mov	sl, r3
    d8f6:	d0c5      	beq.n	d884 <_dtoa_r+0xd6c>
    d8f8:	f1bb 0f00 	cmp.w	fp, #0
    d8fc:	f73f aebc 	bgt.w	d678 <_dtoa_r+0xb60>
    d900:	e6bc      	b.n	d67c <_dtoa_r+0xb64>
    d902:	f47f aebb 	bne.w	d67c <_dtoa_r+0xb64>
    d906:	f01a 0f01 	tst.w	sl, #1
    d90a:	f43f aeb7 	beq.w	d67c <_dtoa_r+0xb64>
    d90e:	e6af      	b.n	d670 <_dtoa_r+0xb58>
    d910:	f04f 0800 	mov.w	r8, #0
    d914:	4646      	mov	r6, r8
    d916:	e531      	b.n	d37c <_dtoa_r+0x864>
    d918:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d91a:	2b02      	cmp	r3, #2
    d91c:	dc21      	bgt.n	d962 <_dtoa_r+0xe4a>
    d91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d920:	e604      	b.n	d52c <_dtoa_r+0xa14>
    d922:	f04f 0802 	mov.w	r8, #2
    d926:	e45d      	b.n	d1e4 <_dtoa_r+0x6cc>
    d928:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d92a:	2b02      	cmp	r3, #2
    d92c:	dc19      	bgt.n	d962 <_dtoa_r+0xe4a>
    d92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d930:	e563      	b.n	d3fa <_dtoa_r+0x8e2>
    d932:	2400      	movs	r4, #0
    d934:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
    d938:	4621      	mov	r1, r4
    d93a:	4648      	mov	r0, r9
    d93c:	f7fe fce8 	bl	c310 <_Balloc>
    d940:	f04f 33ff 	mov.w	r3, #4294967295
    d944:	9306      	str	r3, [sp, #24]
    d946:	930d      	str	r3, [sp, #52]	; 0x34
    d948:	2301      	movs	r3, #1
    d94a:	9007      	str	r0, [sp, #28]
    d94c:	9421      	str	r4, [sp, #132]	; 0x84
    d94e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    d952:	9309      	str	r3, [sp, #36]	; 0x24
    d954:	f7ff b9e9 	b.w	cd2a <_dtoa_r+0x212>
    d958:	f43f ab3d 	beq.w	cfd6 <_dtoa_r+0x4be>
    d95c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    d960:	e522      	b.n	d3a8 <_dtoa_r+0x890>
    d962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d964:	9306      	str	r3, [sp, #24]
    d966:	e5e9      	b.n	d53c <_dtoa_r+0xa24>
    d968:	2501      	movs	r5, #1
    d96a:	f7ff b9a8 	b.w	ccbe <_dtoa_r+0x1a6>
    d96e:	bf00      	nop

0000d970 <_svfprintf_r>:
    d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d974:	b0c1      	sub	sp, #260	; 0x104
    d976:	460c      	mov	r4, r1
    d978:	9109      	str	r1, [sp, #36]	; 0x24
    d97a:	4615      	mov	r5, r2
    d97c:	930e      	str	r3, [sp, #56]	; 0x38
    d97e:	900a      	str	r0, [sp, #40]	; 0x28
    d980:	f7fe fc64 	bl	c24c <_localeconv_r>
    d984:	6803      	ldr	r3, [r0, #0]
    d986:	9317      	str	r3, [sp, #92]	; 0x5c
    d988:	4618      	mov	r0, r3
    d98a:	f7fe f979 	bl	bc80 <strlen>
    d98e:	89a3      	ldrh	r3, [r4, #12]
    d990:	9016      	str	r0, [sp, #88]	; 0x58
    d992:	061e      	lsls	r6, r3, #24
    d994:	d503      	bpl.n	d99e <_svfprintf_r+0x2e>
    d996:	6923      	ldr	r3, [r4, #16]
    d998:	2b00      	cmp	r3, #0
    d99a:	f001 811a 	beq.w	ebd2 <_svfprintf_r+0x1262>
    d99e:	2300      	movs	r3, #0
    d9a0:	461a      	mov	r2, r3
    d9a2:	9312      	str	r3, [sp, #72]	; 0x48
    d9a4:	9325      	str	r3, [sp, #148]	; 0x94
    d9a6:	9324      	str	r3, [sp, #144]	; 0x90
    d9a8:	9319      	str	r3, [sp, #100]	; 0x64
    d9aa:	930b      	str	r3, [sp, #44]	; 0x2c
    d9ac:	f8df a464 	ldr.w	sl, [pc, #1124]	; de14 <_svfprintf_r+0x4a4>
    d9b0:	9214      	str	r2, [sp, #80]	; 0x50
    d9b2:	ab30      	add	r3, sp, #192	; 0xc0
    d9b4:	9323      	str	r3, [sp, #140]	; 0x8c
    d9b6:	4699      	mov	r9, r3
    d9b8:	9215      	str	r2, [sp, #84]	; 0x54
    d9ba:	46a8      	mov	r8, r5
    d9bc:	f898 3000 	ldrb.w	r3, [r8]
    d9c0:	4644      	mov	r4, r8
    d9c2:	b1eb      	cbz	r3, da00 <_svfprintf_r+0x90>
    d9c4:	2b25      	cmp	r3, #37	; 0x25
    d9c6:	d102      	bne.n	d9ce <_svfprintf_r+0x5e>
    d9c8:	e01a      	b.n	da00 <_svfprintf_r+0x90>
    d9ca:	2b25      	cmp	r3, #37	; 0x25
    d9cc:	d003      	beq.n	d9d6 <_svfprintf_r+0x66>
    d9ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	d1f9      	bne.n	d9ca <_svfprintf_r+0x5a>
    d9d6:	ebc8 0504 	rsb	r5, r8, r4
    d9da:	b18d      	cbz	r5, da00 <_svfprintf_r+0x90>
    d9dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d9de:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d9e0:	f8c9 8000 	str.w	r8, [r9]
    d9e4:	3301      	adds	r3, #1
    d9e6:	442a      	add	r2, r5
    d9e8:	2b07      	cmp	r3, #7
    d9ea:	f8c9 5004 	str.w	r5, [r9, #4]
    d9ee:	9225      	str	r2, [sp, #148]	; 0x94
    d9f0:	9324      	str	r3, [sp, #144]	; 0x90
    d9f2:	f300 80a6 	bgt.w	db42 <_svfprintf_r+0x1d2>
    d9f6:	f109 0908 	add.w	r9, r9, #8
    d9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9fc:	442b      	add	r3, r5
    d9fe:	930b      	str	r3, [sp, #44]	; 0x2c
    da00:	7823      	ldrb	r3, [r4, #0]
    da02:	2b00      	cmp	r3, #0
    da04:	f000 80a6 	beq.w	db54 <_svfprintf_r+0x1e4>
    da08:	2300      	movs	r3, #0
    da0a:	461a      	mov	r2, r3
    da0c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    da10:	4619      	mov	r1, r3
    da12:	930c      	str	r3, [sp, #48]	; 0x30
    da14:	9307      	str	r3, [sp, #28]
    da16:	f04f 3bff 	mov.w	fp, #4294967295
    da1a:	7863      	ldrb	r3, [r4, #1]
    da1c:	f104 0801 	add.w	r8, r4, #1
    da20:	465d      	mov	r5, fp
    da22:	f108 0801 	add.w	r8, r8, #1
    da26:	f1a3 0020 	sub.w	r0, r3, #32
    da2a:	2858      	cmp	r0, #88	; 0x58
    da2c:	f200 8425 	bhi.w	e27a <_svfprintf_r+0x90a>
    da30:	e8df f010 	tbh	[pc, r0, lsl #1]
    da34:	04230388 	.word	0x04230388
    da38:	03900423 	.word	0x03900423
    da3c:	04230423 	.word	0x04230423
    da40:	04230423 	.word	0x04230423
    da44:	04230423 	.word	0x04230423
    da48:	03a50397 	.word	0x03a50397
    da4c:	005d0423 	.word	0x005d0423
    da50:	042300e2 	.word	0x042300e2
    da54:	010500fe 	.word	0x010500fe
    da58:	01050105 	.word	0x01050105
    da5c:	01050105 	.word	0x01050105
    da60:	01050105 	.word	0x01050105
    da64:	01050105 	.word	0x01050105
    da68:	04230423 	.word	0x04230423
    da6c:	04230423 	.word	0x04230423
    da70:	04230423 	.word	0x04230423
    da74:	04230423 	.word	0x04230423
    da78:	04230423 	.word	0x04230423
    da7c:	02810115 	.word	0x02810115
    da80:	02810423 	.word	0x02810423
    da84:	04230423 	.word	0x04230423
    da88:	04230423 	.word	0x04230423
    da8c:	042302c6 	.word	0x042302c6
    da90:	02cd0423 	.word	0x02cd0423
    da94:	04230423 	.word	0x04230423
    da98:	04230423 	.word	0x04230423
    da9c:	02f70423 	.word	0x02f70423
    daa0:	04230423 	.word	0x04230423
    daa4:	04230325 	.word	0x04230325
    daa8:	04230423 	.word	0x04230423
    daac:	04230423 	.word	0x04230423
    dab0:	04230423 	.word	0x04230423
    dab4:	04230423 	.word	0x04230423
    dab8:	03660423 	.word	0x03660423
    dabc:	02810379 	.word	0x02810379
    dac0:	02810281 	.word	0x02810281
    dac4:	03790381 	.word	0x03790381
    dac8:	04230423 	.word	0x04230423
    dacc:	042303d1 	.word	0x042303d1
    dad0:	00a303db 	.word	0x00a303db
    dad4:	03ee0064 	.word	0x03ee0064
    dad8:	03f50423 	.word	0x03f50423
    dadc:	03aa0423 	.word	0x03aa0423
    dae0:	04230423 	.word	0x04230423
    dae4:	03bc      	.short	0x03bc
    dae6:	980c      	ldr	r0, [sp, #48]	; 0x30
    dae8:	930e      	str	r3, [sp, #56]	; 0x38
    daea:	4240      	negs	r0, r0
    daec:	900c      	str	r0, [sp, #48]	; 0x30
    daee:	9b07      	ldr	r3, [sp, #28]
    daf0:	f043 0304 	orr.w	r3, r3, #4
    daf4:	9307      	str	r3, [sp, #28]
    daf6:	f898 3000 	ldrb.w	r3, [r8]
    dafa:	e792      	b.n	da22 <_svfprintf_r+0xb2>
    dafc:	980e      	ldr	r0, [sp, #56]	; 0x38
    dafe:	46ab      	mov	fp, r5
    db00:	2100      	movs	r1, #0
    db02:	6804      	ldr	r4, [r0, #0]
    db04:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    db08:	1d07      	adds	r7, r0, #4
    db0a:	9807      	ldr	r0, [sp, #28]
    db0c:	2330      	movs	r3, #48	; 0x30
    db0e:	2278      	movs	r2, #120	; 0x78
    db10:	458b      	cmp	fp, r1
    db12:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    db16:	f04f 0500 	mov.w	r5, #0
    db1a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    db1e:	f040 0302 	orr.w	r3, r0, #2
    db22:	f2c0 83c7 	blt.w	e2b4 <_svfprintf_r+0x944>
    db26:	f020 0380 	bic.w	r3, r0, #128	; 0x80
    db2a:	f043 0302 	orr.w	r3, r3, #2
    db2e:	9307      	str	r3, [sp, #28]
    db30:	ea54 0305 	orrs.w	r3, r4, r5
    db34:	970e      	str	r7, [sp, #56]	; 0x38
    db36:	f000 8393 	beq.w	e260 <_svfprintf_r+0x8f0>
    db3a:	460f      	mov	r7, r1
    db3c:	9211      	str	r2, [sp, #68]	; 0x44
    db3e:	48b3      	ldr	r0, [pc, #716]	; (de0c <_svfprintf_r+0x49c>)
    db40:	e2ce      	b.n	e0e0 <_svfprintf_r+0x770>
    db42:	aa23      	add	r2, sp, #140	; 0x8c
    db44:	9909      	ldr	r1, [sp, #36]	; 0x24
    db46:	980a      	ldr	r0, [sp, #40]	; 0x28
    db48:	f001 fa6a 	bl	f020 <__ssprint_r>
    db4c:	b948      	cbnz	r0, db62 <_svfprintf_r+0x1f2>
    db4e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    db52:	e752      	b.n	d9fa <_svfprintf_r+0x8a>
    db54:	9b25      	ldr	r3, [sp, #148]	; 0x94
    db56:	b123      	cbz	r3, db62 <_svfprintf_r+0x1f2>
    db58:	980a      	ldr	r0, [sp, #40]	; 0x28
    db5a:	9909      	ldr	r1, [sp, #36]	; 0x24
    db5c:	aa23      	add	r2, sp, #140	; 0x8c
    db5e:	f001 fa5f 	bl	f020 <__ssprint_r>
    db62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db64:	899b      	ldrh	r3, [r3, #12]
    db66:	f013 0f40 	tst.w	r3, #64	; 0x40
    db6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db6c:	bf18      	it	ne
    db6e:	f04f 33ff 	movne.w	r3, #4294967295
    db72:	4618      	mov	r0, r3
    db74:	b041      	add	sp, #260	; 0x104
    db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db7a:	9311      	str	r3, [sp, #68]	; 0x44
    db7c:	46ab      	mov	fp, r5
    db7e:	2a00      	cmp	r2, #0
    db80:	f041 8233 	bne.w	efea <_svfprintf_r+0x167a>
    db84:	9a07      	ldr	r2, [sp, #28]
    db86:	f012 0320 	ands.w	r3, r2, #32
    db8a:	f000 822e 	beq.w	dfea <_svfprintf_r+0x67a>
    db8e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    db90:	3707      	adds	r7, #7
    db92:	f027 0307 	bic.w	r3, r7, #7
    db96:	2700      	movs	r7, #0
    db98:	f103 0108 	add.w	r1, r3, #8
    db9c:	45bb      	cmp	fp, r7
    db9e:	910e      	str	r1, [sp, #56]	; 0x38
    dba0:	e9d3 4500 	ldrd	r4, r5, [r3]
    dba4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    dba8:	f2c0 8779 	blt.w	ea9e <_svfprintf_r+0x112e>
    dbac:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    dbb0:	9307      	str	r3, [sp, #28]
    dbb2:	ea54 0305 	orrs.w	r3, r4, r5
    dbb6:	f000 8375 	beq.w	e2a4 <_svfprintf_r+0x934>
    dbba:	ae30      	add	r6, sp, #192	; 0xc0
    dbbc:	08e2      	lsrs	r2, r4, #3
    dbbe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    dbc2:	08e9      	lsrs	r1, r5, #3
    dbc4:	f004 0307 	and.w	r3, r4, #7
    dbc8:	460d      	mov	r5, r1
    dbca:	4614      	mov	r4, r2
    dbcc:	3330      	adds	r3, #48	; 0x30
    dbce:	ea54 0205 	orrs.w	r2, r4, r5
    dbd2:	f806 3d01 	strb.w	r3, [r6, #-1]!
    dbd6:	d1f1      	bne.n	dbbc <_svfprintf_r+0x24c>
    dbd8:	9a07      	ldr	r2, [sp, #28]
    dbda:	07d1      	lsls	r1, r2, #31
    dbdc:	f140 8084 	bpl.w	dce8 <_svfprintf_r+0x378>
    dbe0:	2b30      	cmp	r3, #48	; 0x30
    dbe2:	f000 8081 	beq.w	dce8 <_svfprintf_r+0x378>
    dbe6:	2230      	movs	r2, #48	; 0x30
    dbe8:	1e73      	subs	r3, r6, #1
    dbea:	f806 2c01 	strb.w	r2, [r6, #-1]
    dbee:	aa30      	add	r2, sp, #192	; 0xc0
    dbf0:	1ad2      	subs	r2, r2, r3
    dbf2:	920d      	str	r2, [sp, #52]	; 0x34
    dbf4:	461e      	mov	r6, r3
    dbf6:	e07a      	b.n	dcee <_svfprintf_r+0x37e>
    dbf8:	f898 3000 	ldrb.w	r3, [r8]
    dbfc:	2b2a      	cmp	r3, #42	; 0x2a
    dbfe:	f108 0401 	add.w	r4, r8, #1
    dc02:	f001 81b9 	beq.w	ef78 <_svfprintf_r+0x1608>
    dc06:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    dc0a:	2809      	cmp	r0, #9
    dc0c:	bf98      	it	ls
    dc0e:	2500      	movls	r5, #0
    dc10:	f201 816c 	bhi.w	eeec <_svfprintf_r+0x157c>
    dc14:	f814 3b01 	ldrb.w	r3, [r4], #1
    dc18:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    dc1c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    dc20:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    dc24:	2809      	cmp	r0, #9
    dc26:	d9f5      	bls.n	dc14 <_svfprintf_r+0x2a4>
    dc28:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    dc2c:	46a0      	mov	r8, r4
    dc2e:	e6fa      	b.n	da26 <_svfprintf_r+0xb6>
    dc30:	9b07      	ldr	r3, [sp, #28]
    dc32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dc36:	9307      	str	r3, [sp, #28]
    dc38:	f898 3000 	ldrb.w	r3, [r8]
    dc3c:	e6f1      	b.n	da22 <_svfprintf_r+0xb2>
    dc3e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    dc42:	2300      	movs	r3, #0
    dc44:	461c      	mov	r4, r3
    dc46:	f818 3b01 	ldrb.w	r3, [r8], #1
    dc4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dc4e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    dc52:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    dc56:	2809      	cmp	r0, #9
    dc58:	d9f5      	bls.n	dc46 <_svfprintf_r+0x2d6>
    dc5a:	940c      	str	r4, [sp, #48]	; 0x30
    dc5c:	e6e3      	b.n	da26 <_svfprintf_r+0xb6>
    dc5e:	9311      	str	r3, [sp, #68]	; 0x44
    dc60:	46ab      	mov	fp, r5
    dc62:	2a00      	cmp	r2, #0
    dc64:	f041 81ab 	bne.w	efbe <_svfprintf_r+0x164e>
    dc68:	9b07      	ldr	r3, [sp, #28]
    dc6a:	f043 0310 	orr.w	r3, r3, #16
    dc6e:	9307      	str	r3, [sp, #28]
    dc70:	9b07      	ldr	r3, [sp, #28]
    dc72:	0698      	lsls	r0, r3, #26
    dc74:	f140 8530 	bpl.w	e6d8 <_svfprintf_r+0xd68>
    dc78:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    dc7a:	3707      	adds	r7, #7
    dc7c:	f027 0707 	bic.w	r7, r7, #7
    dc80:	e9d7 2300 	ldrd	r2, r3, [r7]
    dc84:	f107 0108 	add.w	r1, r7, #8
    dc88:	910e      	str	r1, [sp, #56]	; 0x38
    dc8a:	4614      	mov	r4, r2
    dc8c:	461d      	mov	r5, r3
    dc8e:	2a00      	cmp	r2, #0
    dc90:	f173 0300 	sbcs.w	r3, r3, #0
    dc94:	f2c0 855b 	blt.w	e74e <_svfprintf_r+0xdde>
    dc98:	f1bb 0f00 	cmp.w	fp, #0
    dc9c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    dca0:	f2c0 8538 	blt.w	e714 <_svfprintf_r+0xda4>
    dca4:	9b07      	ldr	r3, [sp, #28]
    dca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dcaa:	9307      	str	r3, [sp, #28]
    dcac:	ea54 0305 	orrs.w	r3, r4, r5
    dcb0:	f000 81db 	beq.w	e06a <_svfprintf_r+0x6fa>
    dcb4:	2d00      	cmp	r5, #0
    dcb6:	bf08      	it	eq
    dcb8:	2c0a      	cmpeq	r4, #10
    dcba:	f0c0 81db 	bcc.w	e074 <_svfprintf_r+0x704>
    dcbe:	ae30      	add	r6, sp, #192	; 0xc0
    dcc0:	4620      	mov	r0, r4
    dcc2:	4629      	mov	r1, r5
    dcc4:	220a      	movs	r2, #10
    dcc6:	2300      	movs	r3, #0
    dcc8:	f001 fa52 	bl	f170 <__aeabi_uldivmod>
    dccc:	3230      	adds	r2, #48	; 0x30
    dcce:	f806 2d01 	strb.w	r2, [r6, #-1]!
    dcd2:	4620      	mov	r0, r4
    dcd4:	4629      	mov	r1, r5
    dcd6:	2300      	movs	r3, #0
    dcd8:	220a      	movs	r2, #10
    dcda:	f001 fa49 	bl	f170 <__aeabi_uldivmod>
    dcde:	4604      	mov	r4, r0
    dce0:	460d      	mov	r5, r1
    dce2:	ea54 0305 	orrs.w	r3, r4, r5
    dce6:	d1eb      	bne.n	dcc0 <_svfprintf_r+0x350>
    dce8:	ab30      	add	r3, sp, #192	; 0xc0
    dcea:	1b9b      	subs	r3, r3, r6
    dcec:	930d      	str	r3, [sp, #52]	; 0x34
    dcee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dcf0:	455b      	cmp	r3, fp
    dcf2:	bfb8      	it	lt
    dcf4:	465b      	movlt	r3, fp
    dcf6:	9308      	str	r3, [sp, #32]
    dcf8:	2300      	movs	r3, #0
    dcfa:	9313      	str	r3, [sp, #76]	; 0x4c
    dcfc:	b117      	cbz	r7, dd04 <_svfprintf_r+0x394>
    dcfe:	9b08      	ldr	r3, [sp, #32]
    dd00:	3301      	adds	r3, #1
    dd02:	9308      	str	r3, [sp, #32]
    dd04:	9b07      	ldr	r3, [sp, #28]
    dd06:	f013 0302 	ands.w	r3, r3, #2
    dd0a:	930f      	str	r3, [sp, #60]	; 0x3c
    dd0c:	d002      	beq.n	dd14 <_svfprintf_r+0x3a4>
    dd0e:	9b08      	ldr	r3, [sp, #32]
    dd10:	3302      	adds	r3, #2
    dd12:	9308      	str	r3, [sp, #32]
    dd14:	9b07      	ldr	r3, [sp, #28]
    dd16:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    dd1a:	9310      	str	r3, [sp, #64]	; 0x40
    dd1c:	f040 82d7 	bne.w	e2ce <_svfprintf_r+0x95e>
    dd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd22:	9a08      	ldr	r2, [sp, #32]
    dd24:	1a9d      	subs	r5, r3, r2
    dd26:	2d00      	cmp	r5, #0
    dd28:	f340 82d1 	ble.w	e2ce <_svfprintf_r+0x95e>
    dd2c:	2d10      	cmp	r5, #16
    dd2e:	9925      	ldr	r1, [sp, #148]	; 0x94
    dd30:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dd32:	4f37      	ldr	r7, [pc, #220]	; (de10 <_svfprintf_r+0x4a0>)
    dd34:	dd27      	ble.n	dd86 <_svfprintf_r+0x416>
    dd36:	9618      	str	r6, [sp, #96]	; 0x60
    dd38:	4648      	mov	r0, r9
    dd3a:	2410      	movs	r4, #16
    dd3c:	46b9      	mov	r9, r7
    dd3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    dd40:	462f      	mov	r7, r5
    dd42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    dd44:	e004      	b.n	dd50 <_svfprintf_r+0x3e0>
    dd46:	3f10      	subs	r7, #16
    dd48:	2f10      	cmp	r7, #16
    dd4a:	f100 0008 	add.w	r0, r0, #8
    dd4e:	dd16      	ble.n	dd7e <_svfprintf_r+0x40e>
    dd50:	3201      	adds	r2, #1
    dd52:	4b2f      	ldr	r3, [pc, #188]	; (de10 <_svfprintf_r+0x4a0>)
    dd54:	9224      	str	r2, [sp, #144]	; 0x90
    dd56:	3110      	adds	r1, #16
    dd58:	2a07      	cmp	r2, #7
    dd5a:	9125      	str	r1, [sp, #148]	; 0x94
    dd5c:	e880 0018 	stmia.w	r0, {r3, r4}
    dd60:	ddf1      	ble.n	dd46 <_svfprintf_r+0x3d6>
    dd62:	aa23      	add	r2, sp, #140	; 0x8c
    dd64:	4631      	mov	r1, r6
    dd66:	4628      	mov	r0, r5
    dd68:	f001 f95a 	bl	f020 <__ssprint_r>
    dd6c:	2800      	cmp	r0, #0
    dd6e:	f47f aef8 	bne.w	db62 <_svfprintf_r+0x1f2>
    dd72:	3f10      	subs	r7, #16
    dd74:	2f10      	cmp	r7, #16
    dd76:	9925      	ldr	r1, [sp, #148]	; 0x94
    dd78:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dd7a:	a830      	add	r0, sp, #192	; 0xc0
    dd7c:	dce8      	bgt.n	dd50 <_svfprintf_r+0x3e0>
    dd7e:	9e18      	ldr	r6, [sp, #96]	; 0x60
    dd80:	463d      	mov	r5, r7
    dd82:	464f      	mov	r7, r9
    dd84:	4681      	mov	r9, r0
    dd86:	3201      	adds	r2, #1
    dd88:	186c      	adds	r4, r5, r1
    dd8a:	2a07      	cmp	r2, #7
    dd8c:	9425      	str	r4, [sp, #148]	; 0x94
    dd8e:	9224      	str	r2, [sp, #144]	; 0x90
    dd90:	f8c9 7000 	str.w	r7, [r9]
    dd94:	f8c9 5004 	str.w	r5, [r9, #4]
    dd98:	f300 8428 	bgt.w	e5ec <_svfprintf_r+0xc7c>
    dd9c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    dda0:	f109 0908 	add.w	r9, r9, #8
    dda4:	b177      	cbz	r7, ddc4 <_svfprintf_r+0x454>
    dda6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    dda8:	3301      	adds	r3, #1
    ddaa:	3401      	adds	r4, #1
    ddac:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    ddb0:	2201      	movs	r2, #1
    ddb2:	2b07      	cmp	r3, #7
    ddb4:	9425      	str	r4, [sp, #148]	; 0x94
    ddb6:	9324      	str	r3, [sp, #144]	; 0x90
    ddb8:	e889 0006 	stmia.w	r9, {r1, r2}
    ddbc:	f300 83a0 	bgt.w	e500 <_svfprintf_r+0xb90>
    ddc0:	f109 0908 	add.w	r9, r9, #8
    ddc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ddc6:	b16b      	cbz	r3, dde4 <_svfprintf_r+0x474>
    ddc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ddca:	3301      	adds	r3, #1
    ddcc:	3402      	adds	r4, #2
    ddce:	a91c      	add	r1, sp, #112	; 0x70
    ddd0:	2202      	movs	r2, #2
    ddd2:	2b07      	cmp	r3, #7
    ddd4:	9425      	str	r4, [sp, #148]	; 0x94
    ddd6:	9324      	str	r3, [sp, #144]	; 0x90
    ddd8:	e889 0006 	stmia.w	r9, {r1, r2}
    dddc:	f300 839c 	bgt.w	e518 <_svfprintf_r+0xba8>
    dde0:	f109 0908 	add.w	r9, r9, #8
    dde4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dde6:	2b80      	cmp	r3, #128	; 0x80
    dde8:	f000 82d5 	beq.w	e396 <_svfprintf_r+0xa26>
    ddec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ddee:	ebc3 070b 	rsb	r7, r3, fp
    ddf2:	2f00      	cmp	r7, #0
    ddf4:	dd39      	ble.n	de6a <_svfprintf_r+0x4fa>
    ddf6:	4a07      	ldr	r2, [pc, #28]	; (de14 <_svfprintf_r+0x4a4>)
    ddf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ddfa:	920f      	str	r2, [sp, #60]	; 0x3c
    ddfc:	2f10      	cmp	r7, #16
    ddfe:	dd28      	ble.n	de52 <_svfprintf_r+0x4e2>
    de00:	4622      	mov	r2, r4
    de02:	f04f 0b10 	mov.w	fp, #16
    de06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    de08:	9c09      	ldr	r4, [sp, #36]	; 0x24
    de0a:	e00a      	b.n	de22 <_svfprintf_r+0x4b2>
    de0c:	00010d0c 	.word	0x00010d0c
    de10:	00010d28 	.word	0x00010d28
    de14:	00010cd8 	.word	0x00010cd8
    de18:	3f10      	subs	r7, #16
    de1a:	2f10      	cmp	r7, #16
    de1c:	f109 0908 	add.w	r9, r9, #8
    de20:	dd16      	ble.n	de50 <_svfprintf_r+0x4e0>
    de22:	3301      	adds	r3, #1
    de24:	3210      	adds	r2, #16
    de26:	2b07      	cmp	r3, #7
    de28:	9225      	str	r2, [sp, #148]	; 0x94
    de2a:	9324      	str	r3, [sp, #144]	; 0x90
    de2c:	e889 0c00 	stmia.w	r9, {sl, fp}
    de30:	ddf2      	ble.n	de18 <_svfprintf_r+0x4a8>
    de32:	aa23      	add	r2, sp, #140	; 0x8c
    de34:	4621      	mov	r1, r4
    de36:	4628      	mov	r0, r5
    de38:	f001 f8f2 	bl	f020 <__ssprint_r>
    de3c:	2800      	cmp	r0, #0
    de3e:	f47f ae90 	bne.w	db62 <_svfprintf_r+0x1f2>
    de42:	3f10      	subs	r7, #16
    de44:	2f10      	cmp	r7, #16
    de46:	9a25      	ldr	r2, [sp, #148]	; 0x94
    de48:	9b24      	ldr	r3, [sp, #144]	; 0x90
    de4a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    de4e:	dce8      	bgt.n	de22 <_svfprintf_r+0x4b2>
    de50:	4614      	mov	r4, r2
    de52:	3301      	adds	r3, #1
    de54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    de56:	9324      	str	r3, [sp, #144]	; 0x90
    de58:	443c      	add	r4, r7
    de5a:	2b07      	cmp	r3, #7
    de5c:	9425      	str	r4, [sp, #148]	; 0x94
    de5e:	e889 0084 	stmia.w	r9, {r2, r7}
    de62:	f300 8341 	bgt.w	e4e8 <_svfprintf_r+0xb78>
    de66:	f109 0908 	add.w	r9, r9, #8
    de6a:	9b07      	ldr	r3, [sp, #28]
    de6c:	05da      	lsls	r2, r3, #23
    de6e:	f100 8230 	bmi.w	e2d2 <_svfprintf_r+0x962>
    de72:	9b24      	ldr	r3, [sp, #144]	; 0x90
    de74:	990d      	ldr	r1, [sp, #52]	; 0x34
    de76:	f8c9 6000 	str.w	r6, [r9]
    de7a:	3301      	adds	r3, #1
    de7c:	440c      	add	r4, r1
    de7e:	2b07      	cmp	r3, #7
    de80:	9425      	str	r4, [sp, #148]	; 0x94
    de82:	f8c9 1004 	str.w	r1, [r9, #4]
    de86:	9324      	str	r3, [sp, #144]	; 0x90
    de88:	f300 8318 	bgt.w	e4bc <_svfprintf_r+0xb4c>
    de8c:	f109 0908 	add.w	r9, r9, #8
    de90:	9b07      	ldr	r3, [sp, #28]
    de92:	0759      	lsls	r1, r3, #29
    de94:	d53f      	bpl.n	df16 <_svfprintf_r+0x5a6>
    de96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de98:	9a08      	ldr	r2, [sp, #32]
    de9a:	1a9d      	subs	r5, r3, r2
    de9c:	2d00      	cmp	r5, #0
    de9e:	dd3a      	ble.n	df16 <_svfprintf_r+0x5a6>
    dea0:	2d10      	cmp	r5, #16
    dea2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    dea4:	4fbc      	ldr	r7, [pc, #752]	; (e198 <_svfprintf_r+0x828>)
    dea6:	dd23      	ble.n	def0 <_svfprintf_r+0x580>
    dea8:	4622      	mov	r2, r4
    deaa:	2610      	movs	r6, #16
    deac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    deb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    deb2:	e004      	b.n	debe <_svfprintf_r+0x54e>
    deb4:	3d10      	subs	r5, #16
    deb6:	2d10      	cmp	r5, #16
    deb8:	f109 0908 	add.w	r9, r9, #8
    debc:	dd17      	ble.n	deee <_svfprintf_r+0x57e>
    debe:	3301      	adds	r3, #1
    dec0:	49b5      	ldr	r1, [pc, #724]	; (e198 <_svfprintf_r+0x828>)
    dec2:	9324      	str	r3, [sp, #144]	; 0x90
    dec4:	3210      	adds	r2, #16
    dec6:	2b07      	cmp	r3, #7
    dec8:	9225      	str	r2, [sp, #148]	; 0x94
    deca:	e889 0042 	stmia.w	r9, {r1, r6}
    dece:	ddf1      	ble.n	deb4 <_svfprintf_r+0x544>
    ded0:	aa23      	add	r2, sp, #140	; 0x8c
    ded2:	4621      	mov	r1, r4
    ded4:	4658      	mov	r0, fp
    ded6:	f001 f8a3 	bl	f020 <__ssprint_r>
    deda:	2800      	cmp	r0, #0
    dedc:	f47f ae41 	bne.w	db62 <_svfprintf_r+0x1f2>
    dee0:	3d10      	subs	r5, #16
    dee2:	2d10      	cmp	r5, #16
    dee4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    dee6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    dee8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    deec:	dce7      	bgt.n	debe <_svfprintf_r+0x54e>
    deee:	4614      	mov	r4, r2
    def0:	3301      	adds	r3, #1
    def2:	442c      	add	r4, r5
    def4:	2b07      	cmp	r3, #7
    def6:	9425      	str	r4, [sp, #148]	; 0x94
    def8:	9324      	str	r3, [sp, #144]	; 0x90
    defa:	f8c9 7000 	str.w	r7, [r9]
    defe:	f8c9 5004 	str.w	r5, [r9, #4]
    df02:	dd08      	ble.n	df16 <_svfprintf_r+0x5a6>
    df04:	aa23      	add	r2, sp, #140	; 0x8c
    df06:	9909      	ldr	r1, [sp, #36]	; 0x24
    df08:	980a      	ldr	r0, [sp, #40]	; 0x28
    df0a:	f001 f889 	bl	f020 <__ssprint_r>
    df0e:	2800      	cmp	r0, #0
    df10:	f47f ae27 	bne.w	db62 <_svfprintf_r+0x1f2>
    df14:	9c25      	ldr	r4, [sp, #148]	; 0x94
    df16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    df1a:	9908      	ldr	r1, [sp, #32]
    df1c:	428a      	cmp	r2, r1
    df1e:	bfac      	ite	ge
    df20:	189b      	addge	r3, r3, r2
    df22:	185b      	addlt	r3, r3, r1
    df24:	930b      	str	r3, [sp, #44]	; 0x2c
    df26:	2c00      	cmp	r4, #0
    df28:	f040 82d4 	bne.w	e4d4 <_svfprintf_r+0xb64>
    df2c:	2300      	movs	r3, #0
    df2e:	9324      	str	r3, [sp, #144]	; 0x90
    df30:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    df34:	e542      	b.n	d9bc <_svfprintf_r+0x4c>
    df36:	9311      	str	r3, [sp, #68]	; 0x44
    df38:	46ab      	mov	fp, r5
    df3a:	2a00      	cmp	r2, #0
    df3c:	f041 8051 	bne.w	efe2 <_svfprintf_r+0x1672>
    df40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    df42:	3707      	adds	r7, #7
    df44:	f027 0307 	bic.w	r3, r7, #7
    df48:	f103 0208 	add.w	r2, r3, #8
    df4c:	920e      	str	r2, [sp, #56]	; 0x38
    df4e:	681a      	ldr	r2, [r3, #0]
    df50:	9214      	str	r2, [sp, #80]	; 0x50
    df52:	685b      	ldr	r3, [r3, #4]
    df54:	9315      	str	r3, [sp, #84]	; 0x54
    df56:	9b15      	ldr	r3, [sp, #84]	; 0x54
    df58:	9d14      	ldr	r5, [sp, #80]	; 0x50
    df5a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    df5e:	4628      	mov	r0, r5
    df60:	4621      	mov	r1, r4
    df62:	f04f 32ff 	mov.w	r2, #4294967295
    df66:	4b8d      	ldr	r3, [pc, #564]	; (e19c <_svfprintf_r+0x82c>)
    df68:	f7fc ff9e 	bl	aea8 <__aeabi_dcmpun>
    df6c:	2800      	cmp	r0, #0
    df6e:	f040 84c2 	bne.w	e8f6 <_svfprintf_r+0xf86>
    df72:	4628      	mov	r0, r5
    df74:	4621      	mov	r1, r4
    df76:	f04f 32ff 	mov.w	r2, #4294967295
    df7a:	4b88      	ldr	r3, [pc, #544]	; (e19c <_svfprintf_r+0x82c>)
    df7c:	f7fc ff76 	bl	ae6c <__aeabi_dcmple>
    df80:	2800      	cmp	r0, #0
    df82:	f040 84b8 	bne.w	e8f6 <_svfprintf_r+0xf86>
    df86:	9814      	ldr	r0, [sp, #80]	; 0x50
    df88:	9915      	ldr	r1, [sp, #84]	; 0x54
    df8a:	2200      	movs	r2, #0
    df8c:	2300      	movs	r3, #0
    df8e:	f7fc ff63 	bl	ae58 <__aeabi_dcmplt>
    df92:	2800      	cmp	r0, #0
    df94:	f040 874f 	bne.w	ee36 <_svfprintf_r+0x14c6>
    df98:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    df9c:	4e80      	ldr	r6, [pc, #512]	; (e1a0 <_svfprintf_r+0x830>)
    df9e:	4b81      	ldr	r3, [pc, #516]	; (e1a4 <_svfprintf_r+0x834>)
    dfa0:	9907      	ldr	r1, [sp, #28]
    dfa2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    dfa6:	9107      	str	r1, [sp, #28]
    dfa8:	9911      	ldr	r1, [sp, #68]	; 0x44
    dfaa:	2203      	movs	r2, #3
    dfac:	f04f 0b00 	mov.w	fp, #0
    dfb0:	9208      	str	r2, [sp, #32]
    dfb2:	2947      	cmp	r1, #71	; 0x47
    dfb4:	bfd8      	it	le
    dfb6:	461e      	movle	r6, r3
    dfb8:	920d      	str	r2, [sp, #52]	; 0x34
    dfba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    dfbe:	e69d      	b.n	dcfc <_svfprintf_r+0x38c>
    dfc0:	9b07      	ldr	r3, [sp, #28]
    dfc2:	f043 0308 	orr.w	r3, r3, #8
    dfc6:	9307      	str	r3, [sp, #28]
    dfc8:	f898 3000 	ldrb.w	r3, [r8]
    dfcc:	e529      	b.n	da22 <_svfprintf_r+0xb2>
    dfce:	9311      	str	r3, [sp, #68]	; 0x44
    dfd0:	46ab      	mov	fp, r5
    dfd2:	2a00      	cmp	r2, #0
    dfd4:	f041 8011 	bne.w	effa <_svfprintf_r+0x168a>
    dfd8:	9b07      	ldr	r3, [sp, #28]
    dfda:	f043 0310 	orr.w	r3, r3, #16
    dfde:	9307      	str	r3, [sp, #28]
    dfe0:	9a07      	ldr	r2, [sp, #28]
    dfe2:	f012 0320 	ands.w	r3, r2, #32
    dfe6:	f47f add2 	bne.w	db8e <_svfprintf_r+0x21e>
    dfea:	9907      	ldr	r1, [sp, #28]
    dfec:	f011 0210 	ands.w	r2, r1, #16
    dff0:	f000 852c 	beq.w	ea4c <_svfprintf_r+0x10dc>
    dff4:	980e      	ldr	r0, [sp, #56]	; 0x38
    dff6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    dffa:	f1bb 0f00 	cmp.w	fp, #0
    dffe:	6804      	ldr	r4, [r0, #0]
    e000:	f100 0704 	add.w	r7, r0, #4
    e004:	f04f 0500 	mov.w	r5, #0
    e008:	f2c0 8548 	blt.w	ea9c <_svfprintf_r+0x112c>
    e00c:	460a      	mov	r2, r1
    e00e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e012:	9207      	str	r2, [sp, #28]
    e014:	ea54 0205 	orrs.w	r2, r4, r5
    e018:	970e      	str	r7, [sp, #56]	; 0x38
    e01a:	f000 8143 	beq.w	e2a4 <_svfprintf_r+0x934>
    e01e:	461f      	mov	r7, r3
    e020:	e5cb      	b.n	dbba <_svfprintf_r+0x24a>
    e022:	9311      	str	r3, [sp, #68]	; 0x44
    e024:	46ab      	mov	fp, r5
    e026:	2a00      	cmp	r2, #0
    e028:	f040 87e3 	bne.w	eff2 <_svfprintf_r+0x1682>
    e02c:	9b07      	ldr	r3, [sp, #28]
    e02e:	f043 0310 	orr.w	r3, r3, #16
    e032:	9307      	str	r3, [sp, #28]
    e034:	9a07      	ldr	r2, [sp, #28]
    e036:	f012 0320 	ands.w	r3, r2, #32
    e03a:	f000 8332 	beq.w	e6a2 <_svfprintf_r+0xd32>
    e03e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    e040:	3707      	adds	r7, #7
    e042:	f027 0307 	bic.w	r3, r7, #7
    e046:	2700      	movs	r7, #0
    e048:	f103 0108 	add.w	r1, r3, #8
    e04c:	45bb      	cmp	fp, r7
    e04e:	910e      	str	r1, [sp, #56]	; 0x38
    e050:	e9d3 4500 	ldrd	r4, r5, [r3]
    e054:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    e058:	f2c0 835c 	blt.w	e714 <_svfprintf_r+0xda4>
    e05c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    e060:	9307      	str	r3, [sp, #28]
    e062:	ea54 0305 	orrs.w	r3, r4, r5
    e066:	f47f ae25 	bne.w	dcb4 <_svfprintf_r+0x344>
    e06a:	f1bb 0f00 	cmp.w	fp, #0
    e06e:	f000 80fe 	beq.w	e26e <_svfprintf_r+0x8fe>
    e072:	2400      	movs	r4, #0
    e074:	ae40      	add	r6, sp, #256	; 0x100
    e076:	3430      	adds	r4, #48	; 0x30
    e078:	f806 4d41 	strb.w	r4, [r6, #-65]!
    e07c:	e634      	b.n	dce8 <_svfprintf_r+0x378>
    e07e:	9311      	str	r3, [sp, #68]	; 0x44
    e080:	46ab      	mov	fp, r5
    e082:	2a00      	cmp	r2, #0
    e084:	f040 8797 	bne.w	efb6 <_svfprintf_r+0x1646>
    e088:	9b07      	ldr	r3, [sp, #28]
    e08a:	4847      	ldr	r0, [pc, #284]	; (e1a8 <_svfprintf_r+0x838>)
    e08c:	069d      	lsls	r5, r3, #26
    e08e:	f140 8097 	bpl.w	e1c0 <_svfprintf_r+0x850>
    e092:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    e094:	3707      	adds	r7, #7
    e096:	f027 0307 	bic.w	r3, r7, #7
    e09a:	e9d3 4500 	ldrd	r4, r5, [r3]
    e09e:	f103 0208 	add.w	r2, r3, #8
    e0a2:	920e      	str	r2, [sp, #56]	; 0x38
    e0a4:	9a07      	ldr	r2, [sp, #28]
    e0a6:	f012 0701 	ands.w	r7, r2, #1
    e0aa:	f000 8241 	beq.w	e530 <_svfprintf_r+0xbc0>
    e0ae:	ea54 0305 	orrs.w	r3, r4, r5
    e0b2:	f000 8505 	beq.w	eac0 <_svfprintf_r+0x1150>
    e0b6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    e0ba:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    e0be:	2700      	movs	r7, #0
    e0c0:	9a07      	ldr	r2, [sp, #28]
    e0c2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    e0c6:	2330      	movs	r3, #48	; 0x30
    e0c8:	45bb      	cmp	fp, r7
    e0ca:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    e0ce:	f042 0302 	orr.w	r3, r2, #2
    e0d2:	f2c0 86b5 	blt.w	ee40 <_svfprintf_r+0x14d0>
    e0d6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    e0da:	f043 0302 	orr.w	r3, r3, #2
    e0de:	9307      	str	r3, [sp, #28]
    e0e0:	ae30      	add	r6, sp, #192	; 0xc0
    e0e2:	0923      	lsrs	r3, r4, #4
    e0e4:	f004 010f 	and.w	r1, r4, #15
    e0e8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    e0ec:	092a      	lsrs	r2, r5, #4
    e0ee:	461c      	mov	r4, r3
    e0f0:	4615      	mov	r5, r2
    e0f2:	5c43      	ldrb	r3, [r0, r1]
    e0f4:	f806 3d01 	strb.w	r3, [r6, #-1]!
    e0f8:	ea54 0305 	orrs.w	r3, r4, r5
    e0fc:	d1f1      	bne.n	e0e2 <_svfprintf_r+0x772>
    e0fe:	e5f3      	b.n	dce8 <_svfprintf_r+0x378>
    e100:	990e      	ldr	r1, [sp, #56]	; 0x38
    e102:	9311      	str	r3, [sp, #68]	; 0x44
    e104:	680a      	ldr	r2, [r1, #0]
    e106:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    e10a:	2300      	movs	r3, #0
    e10c:	460a      	mov	r2, r1
    e10e:	461f      	mov	r7, r3
    e110:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    e114:	3204      	adds	r2, #4
    e116:	2301      	movs	r3, #1
    e118:	9308      	str	r3, [sp, #32]
    e11a:	46bb      	mov	fp, r7
    e11c:	9713      	str	r7, [sp, #76]	; 0x4c
    e11e:	920e      	str	r2, [sp, #56]	; 0x38
    e120:	930d      	str	r3, [sp, #52]	; 0x34
    e122:	ae26      	add	r6, sp, #152	; 0x98
    e124:	e5ee      	b.n	dd04 <_svfprintf_r+0x394>
    e126:	9311      	str	r3, [sp, #68]	; 0x44
    e128:	46ab      	mov	fp, r5
    e12a:	2a00      	cmp	r2, #0
    e12c:	f43f ada0 	beq.w	dc70 <_svfprintf_r+0x300>
    e130:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    e134:	e59c      	b.n	dc70 <_svfprintf_r+0x300>
    e136:	9b07      	ldr	r3, [sp, #28]
    e138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e13c:	9307      	str	r3, [sp, #28]
    e13e:	f898 3000 	ldrb.w	r3, [r8]
    e142:	e46e      	b.n	da22 <_svfprintf_r+0xb2>
    e144:	f898 3000 	ldrb.w	r3, [r8]
    e148:	2900      	cmp	r1, #0
    e14a:	f47f ac6a 	bne.w	da22 <_svfprintf_r+0xb2>
    e14e:	2201      	movs	r2, #1
    e150:	2120      	movs	r1, #32
    e152:	e466      	b.n	da22 <_svfprintf_r+0xb2>
    e154:	9b07      	ldr	r3, [sp, #28]
    e156:	f043 0301 	orr.w	r3, r3, #1
    e15a:	9307      	str	r3, [sp, #28]
    e15c:	f898 3000 	ldrb.w	r3, [r8]
    e160:	e45f      	b.n	da22 <_svfprintf_r+0xb2>
    e162:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e164:	6823      	ldr	r3, [r4, #0]
    e166:	930c      	str	r3, [sp, #48]	; 0x30
    e168:	4618      	mov	r0, r3
    e16a:	2800      	cmp	r0, #0
    e16c:	4623      	mov	r3, r4
    e16e:	f103 0304 	add.w	r3, r3, #4
    e172:	f6ff acb8 	blt.w	dae6 <_svfprintf_r+0x176>
    e176:	930e      	str	r3, [sp, #56]	; 0x38
    e178:	f898 3000 	ldrb.w	r3, [r8]
    e17c:	e451      	b.n	da22 <_svfprintf_r+0xb2>
    e17e:	f898 3000 	ldrb.w	r3, [r8]
    e182:	2201      	movs	r2, #1
    e184:	212b      	movs	r1, #43	; 0x2b
    e186:	e44c      	b.n	da22 <_svfprintf_r+0xb2>
    e188:	9311      	str	r3, [sp, #68]	; 0x44
    e18a:	46ab      	mov	fp, r5
    e18c:	2a00      	cmp	r2, #0
    e18e:	f43f af51 	beq.w	e034 <_svfprintf_r+0x6c4>
    e192:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    e196:	e74d      	b.n	e034 <_svfprintf_r+0x6c4>
    e198:	00010d28 	.word	0x00010d28
    e19c:	7fefffff 	.word	0x7fefffff
    e1a0:	00010cec 	.word	0x00010cec
    e1a4:	00010ce8 	.word	0x00010ce8
    e1a8:	00010cf8 	.word	0x00010cf8
    e1ac:	9311      	str	r3, [sp, #68]	; 0x44
    e1ae:	46ab      	mov	fp, r5
    e1b0:	2a00      	cmp	r2, #0
    e1b2:	f040 872a 	bne.w	f00a <_svfprintf_r+0x169a>
    e1b6:	9b07      	ldr	r3, [sp, #28]
    e1b8:	4899      	ldr	r0, [pc, #612]	; (e420 <_svfprintf_r+0xab0>)
    e1ba:	069d      	lsls	r5, r3, #26
    e1bc:	f53f af69 	bmi.w	e092 <_svfprintf_r+0x722>
    e1c0:	9b07      	ldr	r3, [sp, #28]
    e1c2:	06dc      	lsls	r4, r3, #27
    e1c4:	f140 8435 	bpl.w	ea32 <_svfprintf_r+0x10c2>
    e1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e1ca:	4613      	mov	r3, r2
    e1cc:	3304      	adds	r3, #4
    e1ce:	6814      	ldr	r4, [r2, #0]
    e1d0:	930e      	str	r3, [sp, #56]	; 0x38
    e1d2:	2500      	movs	r5, #0
    e1d4:	e766      	b.n	e0a4 <_svfprintf_r+0x734>
    e1d6:	f898 3000 	ldrb.w	r3, [r8]
    e1da:	2b6c      	cmp	r3, #108	; 0x6c
    e1dc:	f000 84e2 	beq.w	eba4 <_svfprintf_r+0x1234>
    e1e0:	9807      	ldr	r0, [sp, #28]
    e1e2:	f040 0010 	orr.w	r0, r0, #16
    e1e6:	9007      	str	r0, [sp, #28]
    e1e8:	e41b      	b.n	da22 <_svfprintf_r+0xb2>
    e1ea:	2a00      	cmp	r2, #0
    e1ec:	f040 8709 	bne.w	f002 <_svfprintf_r+0x1692>
    e1f0:	9b07      	ldr	r3, [sp, #28]
    e1f2:	069b      	lsls	r3, r3, #26
    e1f4:	f140 8406 	bpl.w	ea04 <_svfprintf_r+0x1094>
    e1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e1fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e1fc:	6813      	ldr	r3, [r2, #0]
    e1fe:	17cd      	asrs	r5, r1, #31
    e200:	4608      	mov	r0, r1
    e202:	3204      	adds	r2, #4
    e204:	4629      	mov	r1, r5
    e206:	920e      	str	r2, [sp, #56]	; 0x38
    e208:	e9c3 0100 	strd	r0, r1, [r3]
    e20c:	f7ff bbd6 	b.w	d9bc <_svfprintf_r+0x4c>
    e210:	9b07      	ldr	r3, [sp, #28]
    e212:	f043 0320 	orr.w	r3, r3, #32
    e216:	9307      	str	r3, [sp, #28]
    e218:	f898 3000 	ldrb.w	r3, [r8]
    e21c:	e401      	b.n	da22 <_svfprintf_r+0xb2>
    e21e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e220:	9311      	str	r3, [sp, #68]	; 0x44
    e222:	6816      	ldr	r6, [r2, #0]
    e224:	2400      	movs	r4, #0
    e226:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    e22a:	1d17      	adds	r7, r2, #4
    e22c:	2e00      	cmp	r6, #0
    e22e:	f000 85cd 	beq.w	edcc <_svfprintf_r+0x145c>
    e232:	2d00      	cmp	r5, #0
    e234:	f2c0 8518 	blt.w	ec68 <_svfprintf_r+0x12f8>
    e238:	462a      	mov	r2, r5
    e23a:	4621      	mov	r1, r4
    e23c:	4630      	mov	r0, r6
    e23e:	f7fe f817 	bl	c270 <memchr>
    e242:	2800      	cmp	r0, #0
    e244:	f000 862a 	beq.w	ee9c <_svfprintf_r+0x152c>
    e248:	1b83      	subs	r3, r0, r6
    e24a:	930d      	str	r3, [sp, #52]	; 0x34
    e24c:	46a3      	mov	fp, r4
    e24e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e252:	970e      	str	r7, [sp, #56]	; 0x38
    e254:	9308      	str	r3, [sp, #32]
    e256:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    e25a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    e25e:	e54d      	b.n	dcfc <_svfprintf_r+0x38c>
    e260:	486f      	ldr	r0, [pc, #444]	; (e420 <_svfprintf_r+0xab0>)
    e262:	9211      	str	r2, [sp, #68]	; 0x44
    e264:	f1bb 0f00 	cmp.w	fp, #0
    e268:	f040 8173 	bne.w	e552 <_svfprintf_r+0xbe2>
    e26c:	465f      	mov	r7, fp
    e26e:	f04f 0b00 	mov.w	fp, #0
    e272:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    e276:	ae30      	add	r6, sp, #192	; 0xc0
    e278:	e539      	b.n	dcee <_svfprintf_r+0x37e>
    e27a:	9311      	str	r3, [sp, #68]	; 0x44
    e27c:	2a00      	cmp	r2, #0
    e27e:	f040 86ac 	bne.w	efda <_svfprintf_r+0x166a>
    e282:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e284:	2a00      	cmp	r2, #0
    e286:	f43f ac65 	beq.w	db54 <_svfprintf_r+0x1e4>
    e28a:	2300      	movs	r3, #0
    e28c:	2101      	movs	r1, #1
    e28e:	461f      	mov	r7, r3
    e290:	9108      	str	r1, [sp, #32]
    e292:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    e296:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    e29a:	469b      	mov	fp, r3
    e29c:	9313      	str	r3, [sp, #76]	; 0x4c
    e29e:	910d      	str	r1, [sp, #52]	; 0x34
    e2a0:	ae26      	add	r6, sp, #152	; 0x98
    e2a2:	e52f      	b.n	dd04 <_svfprintf_r+0x394>
    e2a4:	f1bb 0f00 	cmp.w	fp, #0
    e2a8:	f000 8603 	beq.w	eeb2 <_svfprintf_r+0x1542>
    e2ac:	2700      	movs	r7, #0
    e2ae:	2400      	movs	r4, #0
    e2b0:	2500      	movs	r5, #0
    e2b2:	e482      	b.n	dbba <_svfprintf_r+0x24a>
    e2b4:	485a      	ldr	r0, [pc, #360]	; (e420 <_svfprintf_r+0xab0>)
    e2b6:	9307      	str	r3, [sp, #28]
    e2b8:	9211      	str	r2, [sp, #68]	; 0x44
    e2ba:	ea54 0305 	orrs.w	r3, r4, r5
    e2be:	970e      	str	r7, [sp, #56]	; 0x38
    e2c0:	f04f 0700 	mov.w	r7, #0
    e2c4:	f47f af0c 	bne.w	e0e0 <_svfprintf_r+0x770>
    e2c8:	2400      	movs	r4, #0
    e2ca:	2500      	movs	r5, #0
    e2cc:	e708      	b.n	e0e0 <_svfprintf_r+0x770>
    e2ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e2d0:	e568      	b.n	dda4 <_svfprintf_r+0x434>
    e2d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2d4:	2b65      	cmp	r3, #101	; 0x65
    e2d6:	f340 80a9 	ble.w	e42c <_svfprintf_r+0xabc>
    e2da:	9814      	ldr	r0, [sp, #80]	; 0x50
    e2dc:	9915      	ldr	r1, [sp, #84]	; 0x54
    e2de:	2200      	movs	r2, #0
    e2e0:	2300      	movs	r3, #0
    e2e2:	f7fc fdaf 	bl	ae44 <__aeabi_dcmpeq>
    e2e6:	2800      	cmp	r0, #0
    e2e8:	f000 8135 	beq.w	e556 <_svfprintf_r+0xbe6>
    e2ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e2ee:	4a4d      	ldr	r2, [pc, #308]	; (e424 <_svfprintf_r+0xab4>)
    e2f0:	f8c9 2000 	str.w	r2, [r9]
    e2f4:	3301      	adds	r3, #1
    e2f6:	3401      	adds	r4, #1
    e2f8:	2201      	movs	r2, #1
    e2fa:	2b07      	cmp	r3, #7
    e2fc:	9425      	str	r4, [sp, #148]	; 0x94
    e2fe:	9324      	str	r3, [sp, #144]	; 0x90
    e300:	f8c9 2004 	str.w	r2, [r9, #4]
    e304:	f300 83e8 	bgt.w	ead8 <_svfprintf_r+0x1168>
    e308:	f109 0908 	add.w	r9, r9, #8
    e30c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e30e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e310:	4293      	cmp	r3, r2
    e312:	db03      	blt.n	e31c <_svfprintf_r+0x9ac>
    e314:	9b07      	ldr	r3, [sp, #28]
    e316:	07db      	lsls	r3, r3, #31
    e318:	f57f adba 	bpl.w	de90 <_svfprintf_r+0x520>
    e31c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e31e:	9916      	ldr	r1, [sp, #88]	; 0x58
    e320:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e322:	f8c9 2000 	str.w	r2, [r9]
    e326:	3301      	adds	r3, #1
    e328:	440c      	add	r4, r1
    e32a:	2b07      	cmp	r3, #7
    e32c:	9425      	str	r4, [sp, #148]	; 0x94
    e32e:	f8c9 1004 	str.w	r1, [r9, #4]
    e332:	9324      	str	r3, [sp, #144]	; 0x90
    e334:	f300 8440 	bgt.w	ebb8 <_svfprintf_r+0x1248>
    e338:	f109 0908 	add.w	r9, r9, #8
    e33c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e33e:	1e5d      	subs	r5, r3, #1
    e340:	2d00      	cmp	r5, #0
    e342:	f77f ada5 	ble.w	de90 <_svfprintf_r+0x520>
    e346:	4a38      	ldr	r2, [pc, #224]	; (e428 <_svfprintf_r+0xab8>)
    e348:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e34a:	920f      	str	r2, [sp, #60]	; 0x3c
    e34c:	2d10      	cmp	r5, #16
    e34e:	f340 81e6 	ble.w	e71e <_svfprintf_r+0xdae>
    e352:	2610      	movs	r6, #16
    e354:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    e356:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    e35a:	e005      	b.n	e368 <_svfprintf_r+0x9f8>
    e35c:	f109 0908 	add.w	r9, r9, #8
    e360:	3d10      	subs	r5, #16
    e362:	2d10      	cmp	r5, #16
    e364:	f340 81db 	ble.w	e71e <_svfprintf_r+0xdae>
    e368:	3301      	adds	r3, #1
    e36a:	3410      	adds	r4, #16
    e36c:	2b07      	cmp	r3, #7
    e36e:	9425      	str	r4, [sp, #148]	; 0x94
    e370:	9324      	str	r3, [sp, #144]	; 0x90
    e372:	f8c9 a000 	str.w	sl, [r9]
    e376:	f8c9 6004 	str.w	r6, [r9, #4]
    e37a:	ddef      	ble.n	e35c <_svfprintf_r+0x9ec>
    e37c:	aa23      	add	r2, sp, #140	; 0x8c
    e37e:	4659      	mov	r1, fp
    e380:	4638      	mov	r0, r7
    e382:	f000 fe4d 	bl	f020 <__ssprint_r>
    e386:	2800      	cmp	r0, #0
    e388:	f47f abeb 	bne.w	db62 <_svfprintf_r+0x1f2>
    e38c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e38e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e390:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e394:	e7e4      	b.n	e360 <_svfprintf_r+0x9f0>
    e396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e398:	9a08      	ldr	r2, [sp, #32]
    e39a:	1a9f      	subs	r7, r3, r2
    e39c:	2f00      	cmp	r7, #0
    e39e:	f77f ad25 	ble.w	ddec <_svfprintf_r+0x47c>
    e3a2:	4a21      	ldr	r2, [pc, #132]	; (e428 <_svfprintf_r+0xab8>)
    e3a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e3a6:	920f      	str	r2, [sp, #60]	; 0x3c
    e3a8:	2f10      	cmp	r7, #16
    e3aa:	dd2b      	ble.n	e404 <_svfprintf_r+0xa94>
    e3ac:	464a      	mov	r2, r9
    e3ae:	4621      	mov	r1, r4
    e3b0:	46b9      	mov	r9, r7
    e3b2:	2510      	movs	r5, #16
    e3b4:	4637      	mov	r7, r6
    e3b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e3b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e3ba:	e006      	b.n	e3ca <_svfprintf_r+0xa5a>
    e3bc:	f1a9 0910 	sub.w	r9, r9, #16
    e3c0:	f1b9 0f10 	cmp.w	r9, #16
    e3c4:	f102 0208 	add.w	r2, r2, #8
    e3c8:	dd18      	ble.n	e3fc <_svfprintf_r+0xa8c>
    e3ca:	3301      	adds	r3, #1
    e3cc:	3110      	adds	r1, #16
    e3ce:	2b07      	cmp	r3, #7
    e3d0:	9125      	str	r1, [sp, #148]	; 0x94
    e3d2:	9324      	str	r3, [sp, #144]	; 0x90
    e3d4:	f8c2 a000 	str.w	sl, [r2]
    e3d8:	6055      	str	r5, [r2, #4]
    e3da:	ddef      	ble.n	e3bc <_svfprintf_r+0xa4c>
    e3dc:	aa23      	add	r2, sp, #140	; 0x8c
    e3de:	4631      	mov	r1, r6
    e3e0:	4620      	mov	r0, r4
    e3e2:	f000 fe1d 	bl	f020 <__ssprint_r>
    e3e6:	2800      	cmp	r0, #0
    e3e8:	f47f abbb 	bne.w	db62 <_svfprintf_r+0x1f2>
    e3ec:	f1a9 0910 	sub.w	r9, r9, #16
    e3f0:	f1b9 0f10 	cmp.w	r9, #16
    e3f4:	9925      	ldr	r1, [sp, #148]	; 0x94
    e3f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e3f8:	aa30      	add	r2, sp, #192	; 0xc0
    e3fa:	dce6      	bgt.n	e3ca <_svfprintf_r+0xa5a>
    e3fc:	463e      	mov	r6, r7
    e3fe:	460c      	mov	r4, r1
    e400:	464f      	mov	r7, r9
    e402:	4691      	mov	r9, r2
    e404:	3301      	adds	r3, #1
    e406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e408:	9324      	str	r3, [sp, #144]	; 0x90
    e40a:	443c      	add	r4, r7
    e40c:	2b07      	cmp	r3, #7
    e40e:	9425      	str	r4, [sp, #148]	; 0x94
    e410:	e889 0084 	stmia.w	r9, {r2, r7}
    e414:	f300 8245 	bgt.w	e8a2 <_svfprintf_r+0xf32>
    e418:	f109 0908 	add.w	r9, r9, #8
    e41c:	e4e6      	b.n	ddec <_svfprintf_r+0x47c>
    e41e:	bf00      	nop
    e420:	00010d0c 	.word	0x00010d0c
    e424:	00010300 	.word	0x00010300
    e428:	00010cd8 	.word	0x00010cd8
    e42c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e42e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    e430:	2b01      	cmp	r3, #1
    e432:	f340 8208 	ble.w	e846 <_svfprintf_r+0xed6>
    e436:	3501      	adds	r5, #1
    e438:	3401      	adds	r4, #1
    e43a:	2301      	movs	r3, #1
    e43c:	2d07      	cmp	r5, #7
    e43e:	9425      	str	r4, [sp, #148]	; 0x94
    e440:	9524      	str	r5, [sp, #144]	; 0x90
    e442:	f8c9 6000 	str.w	r6, [r9]
    e446:	f8c9 3004 	str.w	r3, [r9, #4]
    e44a:	f300 820d 	bgt.w	e868 <_svfprintf_r+0xef8>
    e44e:	f109 0908 	add.w	r9, r9, #8
    e452:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e456:	f8c9 3000 	str.w	r3, [r9]
    e45a:	3501      	adds	r5, #1
    e45c:	4414      	add	r4, r2
    e45e:	2d07      	cmp	r5, #7
    e460:	9425      	str	r4, [sp, #148]	; 0x94
    e462:	9524      	str	r5, [sp, #144]	; 0x90
    e464:	f8c9 2004 	str.w	r2, [r9, #4]
    e468:	f300 820e 	bgt.w	e888 <_svfprintf_r+0xf18>
    e46c:	f109 0908 	add.w	r9, r9, #8
    e470:	2300      	movs	r3, #0
    e472:	9814      	ldr	r0, [sp, #80]	; 0x50
    e474:	9915      	ldr	r1, [sp, #84]	; 0x54
    e476:	2200      	movs	r2, #0
    e478:	f7fc fce4 	bl	ae44 <__aeabi_dcmpeq>
    e47c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e47e:	2800      	cmp	r0, #0
    e480:	f040 80c3 	bne.w	e60a <_svfprintf_r+0xc9a>
    e484:	3b01      	subs	r3, #1
    e486:	3501      	adds	r5, #1
    e488:	3601      	adds	r6, #1
    e48a:	441c      	add	r4, r3
    e48c:	2d07      	cmp	r5, #7
    e48e:	9524      	str	r5, [sp, #144]	; 0x90
    e490:	9425      	str	r4, [sp, #148]	; 0x94
    e492:	f8c9 6000 	str.w	r6, [r9]
    e496:	f8c9 3004 	str.w	r3, [r9, #4]
    e49a:	f300 80f5 	bgt.w	e688 <_svfprintf_r+0xd18>
    e49e:	f109 0908 	add.w	r9, r9, #8
    e4a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e4a4:	f8c9 2004 	str.w	r2, [r9, #4]
    e4a8:	3501      	adds	r5, #1
    e4aa:	4414      	add	r4, r2
    e4ac:	ab1f      	add	r3, sp, #124	; 0x7c
    e4ae:	2d07      	cmp	r5, #7
    e4b0:	9425      	str	r4, [sp, #148]	; 0x94
    e4b2:	9524      	str	r5, [sp, #144]	; 0x90
    e4b4:	f8c9 3000 	str.w	r3, [r9]
    e4b8:	f77f ace8 	ble.w	de8c <_svfprintf_r+0x51c>
    e4bc:	aa23      	add	r2, sp, #140	; 0x8c
    e4be:	9909      	ldr	r1, [sp, #36]	; 0x24
    e4c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    e4c2:	f000 fdad 	bl	f020 <__ssprint_r>
    e4c6:	2800      	cmp	r0, #0
    e4c8:	f47f ab4b 	bne.w	db62 <_svfprintf_r+0x1f2>
    e4cc:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e4ce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e4d2:	e4dd      	b.n	de90 <_svfprintf_r+0x520>
    e4d4:	aa23      	add	r2, sp, #140	; 0x8c
    e4d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    e4d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    e4da:	f000 fda1 	bl	f020 <__ssprint_r>
    e4de:	2800      	cmp	r0, #0
    e4e0:	f43f ad24 	beq.w	df2c <_svfprintf_r+0x5bc>
    e4e4:	f7ff bb3d 	b.w	db62 <_svfprintf_r+0x1f2>
    e4e8:	aa23      	add	r2, sp, #140	; 0x8c
    e4ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    e4ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    e4ee:	f000 fd97 	bl	f020 <__ssprint_r>
    e4f2:	2800      	cmp	r0, #0
    e4f4:	f47f ab35 	bne.w	db62 <_svfprintf_r+0x1f2>
    e4f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e4fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e4fe:	e4b4      	b.n	de6a <_svfprintf_r+0x4fa>
    e500:	aa23      	add	r2, sp, #140	; 0x8c
    e502:	9909      	ldr	r1, [sp, #36]	; 0x24
    e504:	980a      	ldr	r0, [sp, #40]	; 0x28
    e506:	f000 fd8b 	bl	f020 <__ssprint_r>
    e50a:	2800      	cmp	r0, #0
    e50c:	f47f ab29 	bne.w	db62 <_svfprintf_r+0x1f2>
    e510:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e512:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e516:	e455      	b.n	ddc4 <_svfprintf_r+0x454>
    e518:	aa23      	add	r2, sp, #140	; 0x8c
    e51a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e51c:	980a      	ldr	r0, [sp, #40]	; 0x28
    e51e:	f000 fd7f 	bl	f020 <__ssprint_r>
    e522:	2800      	cmp	r0, #0
    e524:	f47f ab1d 	bne.w	db62 <_svfprintf_r+0x1f2>
    e528:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e52a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e52e:	e459      	b.n	dde4 <_svfprintf_r+0x474>
    e530:	f1bb 0f00 	cmp.w	fp, #0
    e534:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    e538:	f2c0 82da 	blt.w	eaf0 <_svfprintf_r+0x1180>
    e53c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    e540:	9307      	str	r3, [sp, #28]
    e542:	ea54 0305 	orrs.w	r3, r4, r5
    e546:	f47f adcb 	bne.w	e0e0 <_svfprintf_r+0x770>
    e54a:	f1bb 0f00 	cmp.w	fp, #0
    e54e:	f43f ae8d 	beq.w	e26c <_svfprintf_r+0x8fc>
    e552:	2700      	movs	r7, #0
    e554:	e6b8      	b.n	e2c8 <_svfprintf_r+0x958>
    e556:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    e558:	2d00      	cmp	r5, #0
    e55a:	f340 82cc 	ble.w	eaf6 <_svfprintf_r+0x1186>
    e55e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e560:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e562:	4293      	cmp	r3, r2
    e564:	bfa8      	it	ge
    e566:	4613      	movge	r3, r2
    e568:	2b00      	cmp	r3, #0
    e56a:	461d      	mov	r5, r3
    e56c:	dd0d      	ble.n	e58a <_svfprintf_r+0xc1a>
    e56e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e570:	f8c9 6000 	str.w	r6, [r9]
    e574:	3301      	adds	r3, #1
    e576:	442c      	add	r4, r5
    e578:	2b07      	cmp	r3, #7
    e57a:	9425      	str	r4, [sp, #148]	; 0x94
    e57c:	f8c9 5004 	str.w	r5, [r9, #4]
    e580:	9324      	str	r3, [sp, #144]	; 0x90
    e582:	f300 83a3 	bgt.w	eccc <_svfprintf_r+0x135c>
    e586:	f109 0908 	add.w	r9, r9, #8
    e58a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e58c:	2d00      	cmp	r5, #0
    e58e:	bfa8      	it	ge
    e590:	1b5b      	subge	r3, r3, r5
    e592:	2b00      	cmp	r3, #0
    e594:	461d      	mov	r5, r3
    e596:	f340 80f6 	ble.w	e786 <_svfprintf_r+0xe16>
    e59a:	4aba      	ldr	r2, [pc, #744]	; (e884 <_svfprintf_r+0xf14>)
    e59c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e59e:	920f      	str	r2, [sp, #60]	; 0x3c
    e5a0:	2d10      	cmp	r5, #16
    e5a2:	f340 8280 	ble.w	eaa6 <_svfprintf_r+0x1136>
    e5a6:	4622      	mov	r2, r4
    e5a8:	2710      	movs	r7, #16
    e5aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    e5ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e5b0:	e005      	b.n	e5be <_svfprintf_r+0xc4e>
    e5b2:	f109 0908 	add.w	r9, r9, #8
    e5b6:	3d10      	subs	r5, #16
    e5b8:	2d10      	cmp	r5, #16
    e5ba:	f340 8273 	ble.w	eaa4 <_svfprintf_r+0x1134>
    e5be:	3301      	adds	r3, #1
    e5c0:	3210      	adds	r2, #16
    e5c2:	2b07      	cmp	r3, #7
    e5c4:	9225      	str	r2, [sp, #148]	; 0x94
    e5c6:	9324      	str	r3, [sp, #144]	; 0x90
    e5c8:	f8c9 a000 	str.w	sl, [r9]
    e5cc:	f8c9 7004 	str.w	r7, [r9, #4]
    e5d0:	ddef      	ble.n	e5b2 <_svfprintf_r+0xc42>
    e5d2:	aa23      	add	r2, sp, #140	; 0x8c
    e5d4:	4621      	mov	r1, r4
    e5d6:	4658      	mov	r0, fp
    e5d8:	f000 fd22 	bl	f020 <__ssprint_r>
    e5dc:	2800      	cmp	r0, #0
    e5de:	f47f aac0 	bne.w	db62 <_svfprintf_r+0x1f2>
    e5e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
    e5e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e5e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e5ea:	e7e4      	b.n	e5b6 <_svfprintf_r+0xc46>
    e5ec:	aa23      	add	r2, sp, #140	; 0x8c
    e5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    e5f0:	980a      	ldr	r0, [sp, #40]	; 0x28
    e5f2:	f000 fd15 	bl	f020 <__ssprint_r>
    e5f6:	2800      	cmp	r0, #0
    e5f8:	f47f aab3 	bne.w	db62 <_svfprintf_r+0x1f2>
    e5fc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    e600:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e602:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e606:	f7ff bbcd 	b.w	dda4 <_svfprintf_r+0x434>
    e60a:	1e5e      	subs	r6, r3, #1
    e60c:	2e00      	cmp	r6, #0
    e60e:	f77f af48 	ble.w	e4a2 <_svfprintf_r+0xb32>
    e612:	4b9c      	ldr	r3, [pc, #624]	; (e884 <_svfprintf_r+0xf14>)
    e614:	930f      	str	r3, [sp, #60]	; 0x3c
    e616:	2e10      	cmp	r6, #16
    e618:	dd2c      	ble.n	e674 <_svfprintf_r+0xd04>
    e61a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    e61e:	2710      	movs	r7, #16
    e620:	46b0      	mov	r8, r6
    e622:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    e626:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e628:	e006      	b.n	e638 <_svfprintf_r+0xcc8>
    e62a:	f1a8 0810 	sub.w	r8, r8, #16
    e62e:	f1b8 0f10 	cmp.w	r8, #16
    e632:	f109 0908 	add.w	r9, r9, #8
    e636:	dd1a      	ble.n	e66e <_svfprintf_r+0xcfe>
    e638:	3501      	adds	r5, #1
    e63a:	3410      	adds	r4, #16
    e63c:	2d07      	cmp	r5, #7
    e63e:	9425      	str	r4, [sp, #148]	; 0x94
    e640:	9524      	str	r5, [sp, #144]	; 0x90
    e642:	f8c9 a000 	str.w	sl, [r9]
    e646:	f8c9 7004 	str.w	r7, [r9, #4]
    e64a:	ddee      	ble.n	e62a <_svfprintf_r+0xcba>
    e64c:	aa23      	add	r2, sp, #140	; 0x8c
    e64e:	4631      	mov	r1, r6
    e650:	4658      	mov	r0, fp
    e652:	f000 fce5 	bl	f020 <__ssprint_r>
    e656:	2800      	cmp	r0, #0
    e658:	f47f aa83 	bne.w	db62 <_svfprintf_r+0x1f2>
    e65c:	f1a8 0810 	sub.w	r8, r8, #16
    e660:	f1b8 0f10 	cmp.w	r8, #16
    e664:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e666:	9d24      	ldr	r5, [sp, #144]	; 0x90
    e668:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e66c:	dce4      	bgt.n	e638 <_svfprintf_r+0xcc8>
    e66e:	4646      	mov	r6, r8
    e670:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    e674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e676:	3501      	adds	r5, #1
    e678:	4434      	add	r4, r6
    e67a:	2d07      	cmp	r5, #7
    e67c:	9425      	str	r4, [sp, #148]	; 0x94
    e67e:	9524      	str	r5, [sp, #144]	; 0x90
    e680:	e889 0048 	stmia.w	r9, {r3, r6}
    e684:	f77f af0b 	ble.w	e49e <_svfprintf_r+0xb2e>
    e688:	aa23      	add	r2, sp, #140	; 0x8c
    e68a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e68c:	980a      	ldr	r0, [sp, #40]	; 0x28
    e68e:	f000 fcc7 	bl	f020 <__ssprint_r>
    e692:	2800      	cmp	r0, #0
    e694:	f47f aa65 	bne.w	db62 <_svfprintf_r+0x1f2>
    e698:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e69a:	9d24      	ldr	r5, [sp, #144]	; 0x90
    e69c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e6a0:	e6ff      	b.n	e4a2 <_svfprintf_r+0xb32>
    e6a2:	9907      	ldr	r1, [sp, #28]
    e6a4:	f011 0210 	ands.w	r2, r1, #16
    e6a8:	f000 8108 	beq.w	e8bc <_svfprintf_r+0xf4c>
    e6ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    e6ae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    e6b2:	f1bb 0f00 	cmp.w	fp, #0
    e6b6:	6804      	ldr	r4, [r0, #0]
    e6b8:	f100 0704 	add.w	r7, r0, #4
    e6bc:	f04f 0500 	mov.w	r5, #0
    e6c0:	db26      	blt.n	e710 <_svfprintf_r+0xda0>
    e6c2:	460a      	mov	r2, r1
    e6c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e6c8:	9207      	str	r2, [sp, #28]
    e6ca:	ea54 0205 	orrs.w	r2, r4, r5
    e6ce:	970e      	str	r7, [sp, #56]	; 0x38
    e6d0:	461f      	mov	r7, r3
    e6d2:	f47f aaef 	bne.w	dcb4 <_svfprintf_r+0x344>
    e6d6:	e4c8      	b.n	e06a <_svfprintf_r+0x6fa>
    e6d8:	9b07      	ldr	r3, [sp, #28]
    e6da:	06d9      	lsls	r1, r3, #27
    e6dc:	d42a      	bmi.n	e734 <_svfprintf_r+0xdc4>
    e6de:	9b07      	ldr	r3, [sp, #28]
    e6e0:	065a      	lsls	r2, r3, #25
    e6e2:	d527      	bpl.n	e734 <_svfprintf_r+0xdc4>
    e6e4:	990e      	ldr	r1, [sp, #56]	; 0x38
    e6e6:	f9b1 4000 	ldrsh.w	r4, [r1]
    e6ea:	3104      	adds	r1, #4
    e6ec:	17e5      	asrs	r5, r4, #31
    e6ee:	4622      	mov	r2, r4
    e6f0:	462b      	mov	r3, r5
    e6f2:	910e      	str	r1, [sp, #56]	; 0x38
    e6f4:	f7ff bacb 	b.w	dc8e <_svfprintf_r+0x31e>
    e6f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e6fa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    e6fe:	f1bb 0f00 	cmp.w	fp, #0
    e702:	680c      	ldr	r4, [r1, #0]
    e704:	f101 0704 	add.w	r7, r1, #4
    e708:	f04f 0500 	mov.w	r5, #0
    e70c:	f280 8245 	bge.w	eb9a <_svfprintf_r+0x122a>
    e710:	970e      	str	r7, [sp, #56]	; 0x38
    e712:	461f      	mov	r7, r3
    e714:	ea54 0305 	orrs.w	r3, r4, r5
    e718:	f47f aacc 	bne.w	dcb4 <_svfprintf_r+0x344>
    e71c:	e4aa      	b.n	e074 <_svfprintf_r+0x704>
    e71e:	3301      	adds	r3, #1
    e720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e722:	9324      	str	r3, [sp, #144]	; 0x90
    e724:	442c      	add	r4, r5
    e726:	2b07      	cmp	r3, #7
    e728:	9425      	str	r4, [sp, #148]	; 0x94
    e72a:	e889 0024 	stmia.w	r9, {r2, r5}
    e72e:	f77f abad 	ble.w	de8c <_svfprintf_r+0x51c>
    e732:	e6c3      	b.n	e4bc <_svfprintf_r+0xb4c>
    e734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e736:	6814      	ldr	r4, [r2, #0]
    e738:	4613      	mov	r3, r2
    e73a:	3304      	adds	r3, #4
    e73c:	17e5      	asrs	r5, r4, #31
    e73e:	4622      	mov	r2, r4
    e740:	930e      	str	r3, [sp, #56]	; 0x38
    e742:	2a00      	cmp	r2, #0
    e744:	462b      	mov	r3, r5
    e746:	f173 0300 	sbcs.w	r3, r3, #0
    e74a:	f6bf aaa5 	bge.w	dc98 <_svfprintf_r+0x328>
    e74e:	4264      	negs	r4, r4
    e750:	f04f 072d 	mov.w	r7, #45	; 0x2d
    e754:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    e758:	f1bb 0f00 	cmp.w	fp, #0
    e75c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    e760:	f6ff aaa8 	blt.w	dcb4 <_svfprintf_r+0x344>
    e764:	9b07      	ldr	r3, [sp, #28]
    e766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e76a:	9307      	str	r3, [sp, #28]
    e76c:	f7ff baa2 	b.w	dcb4 <_svfprintf_r+0x344>
    e770:	aa23      	add	r2, sp, #140	; 0x8c
    e772:	9909      	ldr	r1, [sp, #36]	; 0x24
    e774:	980a      	ldr	r0, [sp, #40]	; 0x28
    e776:	f000 fc53 	bl	f020 <__ssprint_r>
    e77a:	2800      	cmp	r0, #0
    e77c:	f47f a9f1 	bne.w	db62 <_svfprintf_r+0x1f2>
    e780:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e782:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e786:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e78a:	4432      	add	r2, r6
    e78c:	4617      	mov	r7, r2
    e78e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e790:	4293      	cmp	r3, r2
    e792:	db47      	blt.n	e824 <_svfprintf_r+0xeb4>
    e794:	9a07      	ldr	r2, [sp, #28]
    e796:	07d5      	lsls	r5, r2, #31
    e798:	d444      	bmi.n	e824 <_svfprintf_r+0xeb4>
    e79a:	9912      	ldr	r1, [sp, #72]	; 0x48
    e79c:	440e      	add	r6, r1
    e79e:	1bf5      	subs	r5, r6, r7
    e7a0:	1acb      	subs	r3, r1, r3
    e7a2:	429d      	cmp	r5, r3
    e7a4:	bfa8      	it	ge
    e7a6:	461d      	movge	r5, r3
    e7a8:	2d00      	cmp	r5, #0
    e7aa:	462e      	mov	r6, r5
    e7ac:	dd0d      	ble.n	e7ca <_svfprintf_r+0xe5a>
    e7ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e7b0:	f8c9 7000 	str.w	r7, [r9]
    e7b4:	3201      	adds	r2, #1
    e7b6:	442c      	add	r4, r5
    e7b8:	2a07      	cmp	r2, #7
    e7ba:	9425      	str	r4, [sp, #148]	; 0x94
    e7bc:	f8c9 5004 	str.w	r5, [r9, #4]
    e7c0:	9224      	str	r2, [sp, #144]	; 0x90
    e7c2:	f300 8312 	bgt.w	edea <_svfprintf_r+0x147a>
    e7c6:	f109 0908 	add.w	r9, r9, #8
    e7ca:	2e00      	cmp	r6, #0
    e7cc:	bfac      	ite	ge
    e7ce:	1b9d      	subge	r5, r3, r6
    e7d0:	461d      	movlt	r5, r3
    e7d2:	2d00      	cmp	r5, #0
    e7d4:	f77f ab5c 	ble.w	de90 <_svfprintf_r+0x520>
    e7d8:	4a2a      	ldr	r2, [pc, #168]	; (e884 <_svfprintf_r+0xf14>)
    e7da:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e7dc:	920f      	str	r2, [sp, #60]	; 0x3c
    e7de:	2d10      	cmp	r5, #16
    e7e0:	dd9d      	ble.n	e71e <_svfprintf_r+0xdae>
    e7e2:	2610      	movs	r6, #16
    e7e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    e7e6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    e7ea:	e004      	b.n	e7f6 <_svfprintf_r+0xe86>
    e7ec:	f109 0908 	add.w	r9, r9, #8
    e7f0:	3d10      	subs	r5, #16
    e7f2:	2d10      	cmp	r5, #16
    e7f4:	dd93      	ble.n	e71e <_svfprintf_r+0xdae>
    e7f6:	3301      	adds	r3, #1
    e7f8:	3410      	adds	r4, #16
    e7fa:	2b07      	cmp	r3, #7
    e7fc:	9425      	str	r4, [sp, #148]	; 0x94
    e7fe:	9324      	str	r3, [sp, #144]	; 0x90
    e800:	f8c9 a000 	str.w	sl, [r9]
    e804:	f8c9 6004 	str.w	r6, [r9, #4]
    e808:	ddf0      	ble.n	e7ec <_svfprintf_r+0xe7c>
    e80a:	aa23      	add	r2, sp, #140	; 0x8c
    e80c:	4659      	mov	r1, fp
    e80e:	4638      	mov	r0, r7
    e810:	f000 fc06 	bl	f020 <__ssprint_r>
    e814:	2800      	cmp	r0, #0
    e816:	f47f a9a4 	bne.w	db62 <_svfprintf_r+0x1f2>
    e81a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e81c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e81e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e822:	e7e5      	b.n	e7f0 <_svfprintf_r+0xe80>
    e824:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e826:	9816      	ldr	r0, [sp, #88]	; 0x58
    e828:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e82a:	f8c9 1000 	str.w	r1, [r9]
    e82e:	3201      	adds	r2, #1
    e830:	4404      	add	r4, r0
    e832:	2a07      	cmp	r2, #7
    e834:	9425      	str	r4, [sp, #148]	; 0x94
    e836:	f8c9 0004 	str.w	r0, [r9, #4]
    e83a:	9224      	str	r2, [sp, #144]	; 0x90
    e83c:	f300 82a5 	bgt.w	ed8a <_svfprintf_r+0x141a>
    e840:	f109 0908 	add.w	r9, r9, #8
    e844:	e7a9      	b.n	e79a <_svfprintf_r+0xe2a>
    e846:	9b07      	ldr	r3, [sp, #28]
    e848:	07d8      	lsls	r0, r3, #31
    e84a:	f53f adf4 	bmi.w	e436 <_svfprintf_r+0xac6>
    e84e:	3501      	adds	r5, #1
    e850:	3401      	adds	r4, #1
    e852:	2301      	movs	r3, #1
    e854:	2d07      	cmp	r5, #7
    e856:	9425      	str	r4, [sp, #148]	; 0x94
    e858:	9524      	str	r5, [sp, #144]	; 0x90
    e85a:	f8c9 6000 	str.w	r6, [r9]
    e85e:	f8c9 3004 	str.w	r3, [r9, #4]
    e862:	f77f ae1c 	ble.w	e49e <_svfprintf_r+0xb2e>
    e866:	e70f      	b.n	e688 <_svfprintf_r+0xd18>
    e868:	aa23      	add	r2, sp, #140	; 0x8c
    e86a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e86c:	980a      	ldr	r0, [sp, #40]	; 0x28
    e86e:	f000 fbd7 	bl	f020 <__ssprint_r>
    e872:	2800      	cmp	r0, #0
    e874:	f47f a975 	bne.w	db62 <_svfprintf_r+0x1f2>
    e878:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e87a:	9d24      	ldr	r5, [sp, #144]	; 0x90
    e87c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e880:	e5e7      	b.n	e452 <_svfprintf_r+0xae2>
    e882:	bf00      	nop
    e884:	00010cd8 	.word	0x00010cd8
    e888:	aa23      	add	r2, sp, #140	; 0x8c
    e88a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e88c:	980a      	ldr	r0, [sp, #40]	; 0x28
    e88e:	f000 fbc7 	bl	f020 <__ssprint_r>
    e892:	2800      	cmp	r0, #0
    e894:	f47f a965 	bne.w	db62 <_svfprintf_r+0x1f2>
    e898:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e89a:	9d24      	ldr	r5, [sp, #144]	; 0x90
    e89c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e8a0:	e5e6      	b.n	e470 <_svfprintf_r+0xb00>
    e8a2:	aa23      	add	r2, sp, #140	; 0x8c
    e8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    e8a6:	980a      	ldr	r0, [sp, #40]	; 0x28
    e8a8:	f000 fbba 	bl	f020 <__ssprint_r>
    e8ac:	2800      	cmp	r0, #0
    e8ae:	f47f a958 	bne.w	db62 <_svfprintf_r+0x1f2>
    e8b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e8b4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    e8b8:	f7ff ba98 	b.w	ddec <_svfprintf_r+0x47c>
    e8bc:	9907      	ldr	r1, [sp, #28]
    e8be:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    e8c2:	f43f af19 	beq.w	e6f8 <_svfprintf_r+0xd88>
    e8c6:	980e      	ldr	r0, [sp, #56]	; 0x38
    e8c8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    e8cc:	4603      	mov	r3, r0
    e8ce:	f1bb 0f00 	cmp.w	fp, #0
    e8d2:	f103 0304 	add.w	r3, r3, #4
    e8d6:	8804      	ldrh	r4, [r0, #0]
    e8d8:	f04f 0500 	mov.w	r5, #0
    e8dc:	f2c0 81b9 	blt.w	ec52 <_svfprintf_r+0x12e2>
    e8e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    e8e4:	9107      	str	r1, [sp, #28]
    e8e6:	ea54 0105 	orrs.w	r1, r4, r5
    e8ea:	930e      	str	r3, [sp, #56]	; 0x38
    e8ec:	4617      	mov	r7, r2
    e8ee:	f47f a9e1 	bne.w	dcb4 <_svfprintf_r+0x344>
    e8f2:	f7ff bbba 	b.w	e06a <_svfprintf_r+0x6fa>
    e8f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
    e8f8:	4622      	mov	r2, r4
    e8fa:	4620      	mov	r0, r4
    e8fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    e8fe:	4623      	mov	r3, r4
    e900:	4621      	mov	r1, r4
    e902:	f7fc fad1 	bl	aea8 <__aeabi_dcmpun>
    e906:	2800      	cmp	r0, #0
    e908:	f040 8315 	bne.w	ef36 <_svfprintf_r+0x15c6>
    e90c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e90e:	f1bb 3fff 	cmp.w	fp, #4294967295
    e912:	f023 0320 	bic.w	r3, r3, #32
    e916:	930d      	str	r3, [sp, #52]	; 0x34
    e918:	f000 8276 	beq.w	ee08 <_svfprintf_r+0x1498>
    e91c:	2b47      	cmp	r3, #71	; 0x47
    e91e:	f000 8192 	beq.w	ec46 <_svfprintf_r+0x12d6>
    e922:	9b07      	ldr	r3, [sp, #28]
    e924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e928:	9310      	str	r3, [sp, #64]	; 0x40
    e92a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e92c:	1e1f      	subs	r7, r3, #0
    e92e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e930:	9308      	str	r3, [sp, #32]
    e932:	bfbb      	ittet	lt
    e934:	463b      	movlt	r3, r7
    e936:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
    e93a:	2300      	movge	r3, #0
    e93c:	232d      	movlt	r3, #45	; 0x2d
    e93e:	930f      	str	r3, [sp, #60]	; 0x3c
    e940:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e942:	2b66      	cmp	r3, #102	; 0x66
    e944:	f000 8263 	beq.w	ee0e <_svfprintf_r+0x149e>
    e948:	2b46      	cmp	r3, #70	; 0x46
    e94a:	f000 815e 	beq.w	ec0a <_svfprintf_r+0x129a>
    e94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e950:	9a08      	ldr	r2, [sp, #32]
    e952:	2b45      	cmp	r3, #69	; 0x45
    e954:	a821      	add	r0, sp, #132	; 0x84
    e956:	a91e      	add	r1, sp, #120	; 0x78
    e958:	bf0c      	ite	eq
    e95a:	f10b 0501 	addeq.w	r5, fp, #1
    e95e:	465d      	movne	r5, fp
    e960:	9004      	str	r0, [sp, #16]
    e962:	9103      	str	r1, [sp, #12]
    e964:	a81d      	add	r0, sp, #116	; 0x74
    e966:	2102      	movs	r1, #2
    e968:	463b      	mov	r3, r7
    e96a:	9002      	str	r0, [sp, #8]
    e96c:	9501      	str	r5, [sp, #4]
    e96e:	9100      	str	r1, [sp, #0]
    e970:	980a      	ldr	r0, [sp, #40]	; 0x28
    e972:	f7fe f8d1 	bl	cb18 <_dtoa_r>
    e976:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e978:	2b67      	cmp	r3, #103	; 0x67
    e97a:	4606      	mov	r6, r0
    e97c:	f040 827d 	bne.w	ee7a <_svfprintf_r+0x150a>
    e980:	9b07      	ldr	r3, [sp, #28]
    e982:	07da      	lsls	r2, r3, #31
    e984:	f140 82bf 	bpl.w	ef06 <_svfprintf_r+0x1596>
    e988:	1974      	adds	r4, r6, r5
    e98a:	9808      	ldr	r0, [sp, #32]
    e98c:	4639      	mov	r1, r7
    e98e:	2200      	movs	r2, #0
    e990:	2300      	movs	r3, #0
    e992:	f7fc fa57 	bl	ae44 <__aeabi_dcmpeq>
    e996:	2800      	cmp	r0, #0
    e998:	f040 81a4 	bne.w	ece4 <_svfprintf_r+0x1374>
    e99c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e99e:	429c      	cmp	r4, r3
    e9a0:	d906      	bls.n	e9b0 <_svfprintf_r+0x1040>
    e9a2:	2130      	movs	r1, #48	; 0x30
    e9a4:	1c5a      	adds	r2, r3, #1
    e9a6:	9221      	str	r2, [sp, #132]	; 0x84
    e9a8:	7019      	strb	r1, [r3, #0]
    e9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e9ac:	429c      	cmp	r4, r3
    e9ae:	d8f9      	bhi.n	e9a4 <_svfprintf_r+0x1034>
    e9b0:	1b9b      	subs	r3, r3, r6
    e9b2:	9312      	str	r3, [sp, #72]	; 0x48
    e9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e9b6:	2b47      	cmp	r3, #71	; 0x47
    e9b8:	f000 8181 	beq.w	ecbe <_svfprintf_r+0x134e>
    e9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e9be:	2b65      	cmp	r3, #101	; 0x65
    e9c0:	f340 826a 	ble.w	ee98 <_svfprintf_r+0x1528>
    e9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e9c6:	2b66      	cmp	r3, #102	; 0x66
    e9c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e9ca:	9313      	str	r3, [sp, #76]	; 0x4c
    e9cc:	f000 8247 	beq.w	ee5e <_svfprintf_r+0x14ee>
    e9d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e9d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    e9d4:	428a      	cmp	r2, r1
    e9d6:	f2c0 8236 	blt.w	ee46 <_svfprintf_r+0x14d6>
    e9da:	9b07      	ldr	r3, [sp, #28]
    e9dc:	07d9      	lsls	r1, r3, #31
    e9de:	f100 8289 	bmi.w	eef4 <_svfprintf_r+0x1584>
    e9e2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e9e6:	920d      	str	r2, [sp, #52]	; 0x34
    e9e8:	2267      	movs	r2, #103	; 0x67
    e9ea:	9211      	str	r2, [sp, #68]	; 0x44
    e9ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e9ee:	2a00      	cmp	r2, #0
    e9f0:	f040 815b 	bne.w	ecaa <_svfprintf_r+0x133a>
    e9f4:	9308      	str	r3, [sp, #32]
    e9f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e9f8:	9307      	str	r3, [sp, #28]
    e9fa:	4693      	mov	fp, r2
    e9fc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    ea00:	f7ff b97c 	b.w	dcfc <_svfprintf_r+0x38c>
    ea04:	9b07      	ldr	r3, [sp, #28]
    ea06:	06df      	lsls	r7, r3, #27
    ea08:	d40b      	bmi.n	ea22 <_svfprintf_r+0x10b2>
    ea0a:	9b07      	ldr	r3, [sp, #28]
    ea0c:	065e      	lsls	r6, r3, #25
    ea0e:	d508      	bpl.n	ea22 <_svfprintf_r+0x10b2>
    ea10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ea12:	6813      	ldr	r3, [r2, #0]
    ea14:	3204      	adds	r2, #4
    ea16:	920e      	str	r2, [sp, #56]	; 0x38
    ea18:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    ea1c:	801a      	strh	r2, [r3, #0]
    ea1e:	f7fe bfcd 	b.w	d9bc <_svfprintf_r+0x4c>
    ea22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ea24:	6813      	ldr	r3, [r2, #0]
    ea26:	3204      	adds	r2, #4
    ea28:	920e      	str	r2, [sp, #56]	; 0x38
    ea2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ea2c:	601a      	str	r2, [r3, #0]
    ea2e:	f7fe bfc5 	b.w	d9bc <_svfprintf_r+0x4c>
    ea32:	9b07      	ldr	r3, [sp, #28]
    ea34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ea36:	f013 0f40 	tst.w	r3, #64	; 0x40
    ea3a:	4613      	mov	r3, r2
    ea3c:	f000 810e 	beq.w	ec5c <_svfprintf_r+0x12ec>
    ea40:	3304      	adds	r3, #4
    ea42:	8814      	ldrh	r4, [r2, #0]
    ea44:	930e      	str	r3, [sp, #56]	; 0x38
    ea46:	2500      	movs	r5, #0
    ea48:	f7ff bb2c 	b.w	e0a4 <_svfprintf_r+0x734>
    ea4c:	9907      	ldr	r1, [sp, #28]
    ea4e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    ea52:	d017      	beq.n	ea84 <_svfprintf_r+0x1114>
    ea54:	980e      	ldr	r0, [sp, #56]	; 0x38
    ea56:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    ea5a:	4603      	mov	r3, r0
    ea5c:	f1bb 0f00 	cmp.w	fp, #0
    ea60:	f103 0304 	add.w	r3, r3, #4
    ea64:	8804      	ldrh	r4, [r0, #0]
    ea66:	f04f 0500 	mov.w	r5, #0
    ea6a:	f2c0 80f5 	blt.w	ec58 <_svfprintf_r+0x12e8>
    ea6e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    ea72:	9107      	str	r1, [sp, #28]
    ea74:	ea54 0105 	orrs.w	r1, r4, r5
    ea78:	930e      	str	r3, [sp, #56]	; 0x38
    ea7a:	f43f ac13 	beq.w	e2a4 <_svfprintf_r+0x934>
    ea7e:	4617      	mov	r7, r2
    ea80:	f7ff b89b 	b.w	dbba <_svfprintf_r+0x24a>
    ea84:	990e      	ldr	r1, [sp, #56]	; 0x38
    ea86:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    ea8a:	f1bb 0f00 	cmp.w	fp, #0
    ea8e:	680c      	ldr	r4, [r1, #0]
    ea90:	f101 0704 	add.w	r7, r1, #4
    ea94:	f04f 0500 	mov.w	r5, #0
    ea98:	f280 8081 	bge.w	eb9e <_svfprintf_r+0x122e>
    ea9c:	970e      	str	r7, [sp, #56]	; 0x38
    ea9e:	2700      	movs	r7, #0
    eaa0:	f7ff b88b 	b.w	dbba <_svfprintf_r+0x24a>
    eaa4:	4614      	mov	r4, r2
    eaa6:	3301      	adds	r3, #1
    eaa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    eaaa:	9324      	str	r3, [sp, #144]	; 0x90
    eaac:	442c      	add	r4, r5
    eaae:	2b07      	cmp	r3, #7
    eab0:	9425      	str	r4, [sp, #148]	; 0x94
    eab2:	e889 0024 	stmia.w	r9, {r2, r5}
    eab6:	f73f ae5b 	bgt.w	e770 <_svfprintf_r+0xe00>
    eaba:	f109 0908 	add.w	r9, r9, #8
    eabe:	e662      	b.n	e786 <_svfprintf_r+0xe16>
    eac0:	2700      	movs	r7, #0
    eac2:	45bb      	cmp	fp, r7
    eac4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    eac8:	f6ff abfe 	blt.w	e2c8 <_svfprintf_r+0x958>
    eacc:	9b07      	ldr	r3, [sp, #28]
    eace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ead2:	9307      	str	r3, [sp, #28]
    ead4:	f7ff bbc6 	b.w	e264 <_svfprintf_r+0x8f4>
    ead8:	aa23      	add	r2, sp, #140	; 0x8c
    eada:	9909      	ldr	r1, [sp, #36]	; 0x24
    eadc:	980a      	ldr	r0, [sp, #40]	; 0x28
    eade:	f000 fa9f 	bl	f020 <__ssprint_r>
    eae2:	2800      	cmp	r0, #0
    eae4:	f47f a83d 	bne.w	db62 <_svfprintf_r+0x1f2>
    eae8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    eaea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    eaee:	e40d      	b.n	e30c <_svfprintf_r+0x99c>
    eaf0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    eaf2:	f7ff bbe2 	b.w	e2ba <_svfprintf_r+0x94a>
    eaf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    eaf8:	4ab1      	ldr	r2, [pc, #708]	; (edc0 <_svfprintf_r+0x1450>)
    eafa:	f8c9 2000 	str.w	r2, [r9]
    eafe:	3301      	adds	r3, #1
    eb00:	3401      	adds	r4, #1
    eb02:	2201      	movs	r2, #1
    eb04:	2b07      	cmp	r3, #7
    eb06:	9425      	str	r4, [sp, #148]	; 0x94
    eb08:	9324      	str	r3, [sp, #144]	; 0x90
    eb0a:	f8c9 2004 	str.w	r2, [r9, #4]
    eb0e:	dc6f      	bgt.n	ebf0 <_svfprintf_r+0x1280>
    eb10:	f109 0908 	add.w	r9, r9, #8
    eb14:	b92d      	cbnz	r5, eb22 <_svfprintf_r+0x11b2>
    eb16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb18:	b91b      	cbnz	r3, eb22 <_svfprintf_r+0x11b2>
    eb1a:	9b07      	ldr	r3, [sp, #28]
    eb1c:	07df      	lsls	r7, r3, #31
    eb1e:	f57f a9b7 	bpl.w	de90 <_svfprintf_r+0x520>
    eb22:	9b24      	ldr	r3, [sp, #144]	; 0x90
    eb24:	9916      	ldr	r1, [sp, #88]	; 0x58
    eb26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eb28:	f8c9 2000 	str.w	r2, [r9]
    eb2c:	3301      	adds	r3, #1
    eb2e:	440c      	add	r4, r1
    eb30:	2b07      	cmp	r3, #7
    eb32:	9425      	str	r4, [sp, #148]	; 0x94
    eb34:	f8c9 1004 	str.w	r1, [r9, #4]
    eb38:	9324      	str	r3, [sp, #144]	; 0x90
    eb3a:	f300 81c9 	bgt.w	eed0 <_svfprintf_r+0x1560>
    eb3e:	f109 0908 	add.w	r9, r9, #8
    eb42:	426d      	negs	r5, r5
    eb44:	2d00      	cmp	r5, #0
    eb46:	f340 80a3 	ble.w	ec90 <_svfprintf_r+0x1320>
    eb4a:	4a9e      	ldr	r2, [pc, #632]	; (edc4 <_svfprintf_r+0x1454>)
    eb4c:	920f      	str	r2, [sp, #60]	; 0x3c
    eb4e:	2d10      	cmp	r5, #16
    eb50:	f340 8129 	ble.w	eda6 <_svfprintf_r+0x1436>
    eb54:	4622      	mov	r2, r4
    eb56:	2710      	movs	r7, #16
    eb58:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    eb5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    eb5e:	e005      	b.n	eb6c <_svfprintf_r+0x11fc>
    eb60:	f109 0908 	add.w	r9, r9, #8
    eb64:	3d10      	subs	r5, #16
    eb66:	2d10      	cmp	r5, #16
    eb68:	f340 811c 	ble.w	eda4 <_svfprintf_r+0x1434>
    eb6c:	3301      	adds	r3, #1
    eb6e:	3210      	adds	r2, #16
    eb70:	2b07      	cmp	r3, #7
    eb72:	9225      	str	r2, [sp, #148]	; 0x94
    eb74:	9324      	str	r3, [sp, #144]	; 0x90
    eb76:	f8c9 a000 	str.w	sl, [r9]
    eb7a:	f8c9 7004 	str.w	r7, [r9, #4]
    eb7e:	ddef      	ble.n	eb60 <_svfprintf_r+0x11f0>
    eb80:	aa23      	add	r2, sp, #140	; 0x8c
    eb82:	4621      	mov	r1, r4
    eb84:	4658      	mov	r0, fp
    eb86:	f000 fa4b 	bl	f020 <__ssprint_r>
    eb8a:	2800      	cmp	r0, #0
    eb8c:	f47e afe9 	bne.w	db62 <_svfprintf_r+0x1f2>
    eb90:	9a25      	ldr	r2, [sp, #148]	; 0x94
    eb92:	9b24      	ldr	r3, [sp, #144]	; 0x90
    eb94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    eb98:	e7e4      	b.n	eb64 <_svfprintf_r+0x11f4>
    eb9a:	9a07      	ldr	r2, [sp, #28]
    eb9c:	e592      	b.n	e6c4 <_svfprintf_r+0xd54>
    eb9e:	9a07      	ldr	r2, [sp, #28]
    eba0:	f7ff ba35 	b.w	e00e <_svfprintf_r+0x69e>
    eba4:	9b07      	ldr	r3, [sp, #28]
    eba6:	f043 0320 	orr.w	r3, r3, #32
    ebaa:	9307      	str	r3, [sp, #28]
    ebac:	f108 0801 	add.w	r8, r8, #1
    ebb0:	f898 3000 	ldrb.w	r3, [r8]
    ebb4:	f7fe bf35 	b.w	da22 <_svfprintf_r+0xb2>
    ebb8:	aa23      	add	r2, sp, #140	; 0x8c
    ebba:	9909      	ldr	r1, [sp, #36]	; 0x24
    ebbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    ebbe:	f000 fa2f 	bl	f020 <__ssprint_r>
    ebc2:	2800      	cmp	r0, #0
    ebc4:	f47e afcd 	bne.w	db62 <_svfprintf_r+0x1f2>
    ebc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ebca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    ebce:	f7ff bbb5 	b.w	e33c <_svfprintf_r+0x9cc>
    ebd2:	2140      	movs	r1, #64	; 0x40
    ebd4:	980a      	ldr	r0, [sp, #40]	; 0x28
    ebd6:	f7fc f9c7 	bl	af68 <_malloc_r>
    ebda:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ebdc:	6010      	str	r0, [r2, #0]
    ebde:	6110      	str	r0, [r2, #16]
    ebe0:	2800      	cmp	r0, #0
    ebe2:	f000 81f3 	beq.w	efcc <_svfprintf_r+0x165c>
    ebe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ebe8:	2340      	movs	r3, #64	; 0x40
    ebea:	6153      	str	r3, [r2, #20]
    ebec:	f7fe bed7 	b.w	d99e <_svfprintf_r+0x2e>
    ebf0:	aa23      	add	r2, sp, #140	; 0x8c
    ebf2:	9909      	ldr	r1, [sp, #36]	; 0x24
    ebf4:	980a      	ldr	r0, [sp, #40]	; 0x28
    ebf6:	f000 fa13 	bl	f020 <__ssprint_r>
    ebfa:	2800      	cmp	r0, #0
    ebfc:	f47e afb1 	bne.w	db62 <_svfprintf_r+0x1f2>
    ec00:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    ec02:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ec04:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    ec08:	e784      	b.n	eb14 <_svfprintf_r+0x11a4>
    ec0a:	a821      	add	r0, sp, #132	; 0x84
    ec0c:	a91e      	add	r1, sp, #120	; 0x78
    ec0e:	9004      	str	r0, [sp, #16]
    ec10:	9103      	str	r1, [sp, #12]
    ec12:	a81d      	add	r0, sp, #116	; 0x74
    ec14:	2103      	movs	r1, #3
    ec16:	9002      	str	r0, [sp, #8]
    ec18:	9a08      	ldr	r2, [sp, #32]
    ec1a:	f8cd b004 	str.w	fp, [sp, #4]
    ec1e:	463b      	mov	r3, r7
    ec20:	9100      	str	r1, [sp, #0]
    ec22:	980a      	ldr	r0, [sp, #40]	; 0x28
    ec24:	f7fd ff78 	bl	cb18 <_dtoa_r>
    ec28:	465d      	mov	r5, fp
    ec2a:	4606      	mov	r6, r0
    ec2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec2e:	2b46      	cmp	r3, #70	; 0x46
    ec30:	eb06 0405 	add.w	r4, r6, r5
    ec34:	f47f aea9 	bne.w	e98a <_svfprintf_r+0x101a>
    ec38:	7833      	ldrb	r3, [r6, #0]
    ec3a:	2b30      	cmp	r3, #48	; 0x30
    ec3c:	f000 816d 	beq.w	ef1a <_svfprintf_r+0x15aa>
    ec40:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    ec42:	442c      	add	r4, r5
    ec44:	e6a1      	b.n	e98a <_svfprintf_r+0x101a>
    ec46:	f1bb 0f00 	cmp.w	fp, #0
    ec4a:	bf08      	it	eq
    ec4c:	f04f 0b01 	moveq.w	fp, #1
    ec50:	e667      	b.n	e922 <_svfprintf_r+0xfb2>
    ec52:	930e      	str	r3, [sp, #56]	; 0x38
    ec54:	4617      	mov	r7, r2
    ec56:	e55d      	b.n	e714 <_svfprintf_r+0xda4>
    ec58:	930e      	str	r3, [sp, #56]	; 0x38
    ec5a:	e720      	b.n	ea9e <_svfprintf_r+0x112e>
    ec5c:	3304      	adds	r3, #4
    ec5e:	6814      	ldr	r4, [r2, #0]
    ec60:	930e      	str	r3, [sp, #56]	; 0x38
    ec62:	2500      	movs	r5, #0
    ec64:	f7ff ba1e 	b.w	e0a4 <_svfprintf_r+0x734>
    ec68:	4630      	mov	r0, r6
    ec6a:	f7fd f809 	bl	bc80 <strlen>
    ec6e:	46a3      	mov	fp, r4
    ec70:	4603      	mov	r3, r0
    ec72:	900d      	str	r0, [sp, #52]	; 0x34
    ec74:	f7ff baeb 	b.w	e24e <_svfprintf_r+0x8de>
    ec78:	aa23      	add	r2, sp, #140	; 0x8c
    ec7a:	9909      	ldr	r1, [sp, #36]	; 0x24
    ec7c:	980a      	ldr	r0, [sp, #40]	; 0x28
    ec7e:	f000 f9cf 	bl	f020 <__ssprint_r>
    ec82:	2800      	cmp	r0, #0
    ec84:	f47e af6d 	bne.w	db62 <_svfprintf_r+0x1f2>
    ec88:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ec8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ec8c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    ec90:	9912      	ldr	r1, [sp, #72]	; 0x48
    ec92:	f8c9 6000 	str.w	r6, [r9]
    ec96:	3301      	adds	r3, #1
    ec98:	440c      	add	r4, r1
    ec9a:	2b07      	cmp	r3, #7
    ec9c:	9425      	str	r4, [sp, #148]	; 0x94
    ec9e:	9324      	str	r3, [sp, #144]	; 0x90
    eca0:	f8c9 1004 	str.w	r1, [r9, #4]
    eca4:	f77f a8f2 	ble.w	de8c <_svfprintf_r+0x51c>
    eca8:	e408      	b.n	e4bc <_svfprintf_r+0xb4c>
    ecaa:	272d      	movs	r7, #45	; 0x2d
    ecac:	9308      	str	r3, [sp, #32]
    ecae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ecb0:	9307      	str	r3, [sp, #28]
    ecb2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    ecb6:	f04f 0b00 	mov.w	fp, #0
    ecba:	f7ff b820 	b.w	dcfe <_svfprintf_r+0x38e>
    ecbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ecc0:	1cdd      	adds	r5, r3, #3
    ecc2:	db11      	blt.n	ece8 <_svfprintf_r+0x1378>
    ecc4:	459b      	cmp	fp, r3
    ecc6:	db0f      	blt.n	ece8 <_svfprintf_r+0x1378>
    ecc8:	9313      	str	r3, [sp, #76]	; 0x4c
    ecca:	e681      	b.n	e9d0 <_svfprintf_r+0x1060>
    eccc:	aa23      	add	r2, sp, #140	; 0x8c
    ecce:	9909      	ldr	r1, [sp, #36]	; 0x24
    ecd0:	980a      	ldr	r0, [sp, #40]	; 0x28
    ecd2:	f000 f9a5 	bl	f020 <__ssprint_r>
    ecd6:	2800      	cmp	r0, #0
    ecd8:	f47e af43 	bne.w	db62 <_svfprintf_r+0x1f2>
    ecdc:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ecde:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    ece2:	e452      	b.n	e58a <_svfprintf_r+0xc1a>
    ece4:	4623      	mov	r3, r4
    ece6:	e663      	b.n	e9b0 <_svfprintf_r+0x1040>
    ece8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ecea:	3a02      	subs	r2, #2
    ecec:	9211      	str	r2, [sp, #68]	; 0x44
    ecee:	3b01      	subs	r3, #1
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    ecf6:	931d      	str	r3, [sp, #116]	; 0x74
    ecf8:	bfb8      	it	lt
    ecfa:	425b      	neglt	r3, r3
    ecfc:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
    ed00:	bfb4      	ite	lt
    ed02:	222d      	movlt	r2, #45	; 0x2d
    ed04:	222b      	movge	r2, #43	; 0x2b
    ed06:	2b09      	cmp	r3, #9
    ed08:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    ed0c:	f340 80fd 	ble.w	ef0a <_svfprintf_r+0x159a>
    ed10:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
    ed14:	4604      	mov	r4, r0
    ed16:	4a2c      	ldr	r2, [pc, #176]	; (edc8 <_svfprintf_r+0x1458>)
    ed18:	fb82 2103 	smull	r2, r1, r2, r3
    ed1c:	17da      	asrs	r2, r3, #31
    ed1e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    ed22:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    ed26:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    ed2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
    ed2e:	2a09      	cmp	r2, #9
    ed30:	4613      	mov	r3, r2
    ed32:	f804 1d01 	strb.w	r1, [r4, #-1]!
    ed36:	dcee      	bgt.n	ed16 <_svfprintf_r+0x13a6>
    ed38:	4621      	mov	r1, r4
    ed3a:	3330      	adds	r3, #48	; 0x30
    ed3c:	b2da      	uxtb	r2, r3
    ed3e:	f801 2d01 	strb.w	r2, [r1, #-1]!
    ed42:	4288      	cmp	r0, r1
    ed44:	f240 813f 	bls.w	efc6 <_svfprintf_r+0x1656>
    ed48:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
    ed4c:	4623      	mov	r3, r4
    ed4e:	e001      	b.n	ed54 <_svfprintf_r+0x13e4>
    ed50:	f813 2b01 	ldrb.w	r2, [r3], #1
    ed54:	f801 2b01 	strb.w	r2, [r1], #1
    ed58:	4298      	cmp	r0, r3
    ed5a:	d1f9      	bne.n	ed50 <_svfprintf_r+0x13e0>
    ed5c:	1c43      	adds	r3, r0, #1
    ed5e:	1b1b      	subs	r3, r3, r4
    ed60:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
    ed64:	4413      	add	r3, r2
    ed66:	aa1f      	add	r2, sp, #124	; 0x7c
    ed68:	1a9b      	subs	r3, r3, r2
    ed6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ed6c:	9319      	str	r3, [sp, #100]	; 0x64
    ed6e:	2a01      	cmp	r2, #1
    ed70:	4413      	add	r3, r2
    ed72:	930d      	str	r3, [sp, #52]	; 0x34
    ed74:	f340 80f6 	ble.w	ef64 <_svfprintf_r+0x15f4>
    ed78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ed7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ed7c:	4413      	add	r3, r2
    ed7e:	2200      	movs	r2, #0
    ed80:	930d      	str	r3, [sp, #52]	; 0x34
    ed82:	9213      	str	r2, [sp, #76]	; 0x4c
    ed84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ed88:	e630      	b.n	e9ec <_svfprintf_r+0x107c>
    ed8a:	aa23      	add	r2, sp, #140	; 0x8c
    ed8c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ed8e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ed90:	f000 f946 	bl	f020 <__ssprint_r>
    ed94:	2800      	cmp	r0, #0
    ed96:	f47e aee4 	bne.w	db62 <_svfprintf_r+0x1f2>
    ed9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ed9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ed9e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    eda2:	e4fa      	b.n	e79a <_svfprintf_r+0xe2a>
    eda4:	4614      	mov	r4, r2
    eda6:	3301      	adds	r3, #1
    eda8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    edaa:	9324      	str	r3, [sp, #144]	; 0x90
    edac:	442c      	add	r4, r5
    edae:	2b07      	cmp	r3, #7
    edb0:	9425      	str	r4, [sp, #148]	; 0x94
    edb2:	e889 0024 	stmia.w	r9, {r2, r5}
    edb6:	f73f af5f 	bgt.w	ec78 <_svfprintf_r+0x1308>
    edba:	f109 0908 	add.w	r9, r9, #8
    edbe:	e767      	b.n	ec90 <_svfprintf_r+0x1320>
    edc0:	00010300 	.word	0x00010300
    edc4:	00010cd8 	.word	0x00010cd8
    edc8:	66666667 	.word	0x66666667
    edcc:	2d06      	cmp	r5, #6
    edce:	462b      	mov	r3, r5
    edd0:	bf28      	it	cs
    edd2:	2306      	movcs	r3, #6
    edd4:	930d      	str	r3, [sp, #52]	; 0x34
    edd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    edda:	46b3      	mov	fp, r6
    eddc:	970e      	str	r7, [sp, #56]	; 0x38
    edde:	9613      	str	r6, [sp, #76]	; 0x4c
    ede0:	4637      	mov	r7, r6
    ede2:	9308      	str	r3, [sp, #32]
    ede4:	4e8b      	ldr	r6, [pc, #556]	; (f014 <_svfprintf_r+0x16a4>)
    ede6:	f7fe bf89 	b.w	dcfc <_svfprintf_r+0x38c>
    edea:	aa23      	add	r2, sp, #140	; 0x8c
    edec:	9909      	ldr	r1, [sp, #36]	; 0x24
    edee:	980a      	ldr	r0, [sp, #40]	; 0x28
    edf0:	f000 f916 	bl	f020 <__ssprint_r>
    edf4:	2800      	cmp	r0, #0
    edf6:	f47e aeb4 	bne.w	db62 <_svfprintf_r+0x1f2>
    edfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    edfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    edfe:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ee00:	1ad3      	subs	r3, r2, r3
    ee02:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    ee06:	e4e0      	b.n	e7ca <_svfprintf_r+0xe5a>
    ee08:	f04f 0b06 	mov.w	fp, #6
    ee0c:	e589      	b.n	e922 <_svfprintf_r+0xfb2>
    ee0e:	a821      	add	r0, sp, #132	; 0x84
    ee10:	a91e      	add	r1, sp, #120	; 0x78
    ee12:	9004      	str	r0, [sp, #16]
    ee14:	9103      	str	r1, [sp, #12]
    ee16:	a81d      	add	r0, sp, #116	; 0x74
    ee18:	2103      	movs	r1, #3
    ee1a:	9002      	str	r0, [sp, #8]
    ee1c:	9a08      	ldr	r2, [sp, #32]
    ee1e:	f8cd b004 	str.w	fp, [sp, #4]
    ee22:	463b      	mov	r3, r7
    ee24:	9100      	str	r1, [sp, #0]
    ee26:	980a      	ldr	r0, [sp, #40]	; 0x28
    ee28:	f7fd fe76 	bl	cb18 <_dtoa_r>
    ee2c:	465d      	mov	r5, fp
    ee2e:	4606      	mov	r6, r0
    ee30:	eb00 040b 	add.w	r4, r0, fp
    ee34:	e700      	b.n	ec38 <_svfprintf_r+0x12c8>
    ee36:	272d      	movs	r7, #45	; 0x2d
    ee38:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    ee3c:	f7ff b8ae 	b.w	df9c <_svfprintf_r+0x62c>
    ee40:	9307      	str	r3, [sp, #28]
    ee42:	f7ff b94d 	b.w	e0e0 <_svfprintf_r+0x770>
    ee46:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ee48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ee4a:	4413      	add	r3, r2
    ee4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ee4e:	930d      	str	r3, [sp, #52]	; 0x34
    ee50:	2a00      	cmp	r2, #0
    ee52:	dd7f      	ble.n	ef54 <_svfprintf_r+0x15e4>
    ee54:	2267      	movs	r2, #103	; 0x67
    ee56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ee5a:	9211      	str	r2, [sp, #68]	; 0x44
    ee5c:	e5c6      	b.n	e9ec <_svfprintf_r+0x107c>
    ee5e:	2b00      	cmp	r3, #0
    ee60:	f340 8098 	ble.w	ef94 <_svfprintf_r+0x1624>
    ee64:	f1bb 0f00 	cmp.w	fp, #0
    ee68:	d16b      	bne.n	ef42 <_svfprintf_r+0x15d2>
    ee6a:	9a07      	ldr	r2, [sp, #28]
    ee6c:	07d4      	lsls	r4, r2, #31
    ee6e:	d468      	bmi.n	ef42 <_svfprintf_r+0x15d2>
    ee70:	461a      	mov	r2, r3
    ee72:	920d      	str	r2, [sp, #52]	; 0x34
    ee74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ee78:	e5b8      	b.n	e9ec <_svfprintf_r+0x107c>
    ee7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee7c:	2b47      	cmp	r3, #71	; 0x47
    ee7e:	f47f ad83 	bne.w	e988 <_svfprintf_r+0x1018>
    ee82:	9b07      	ldr	r3, [sp, #28]
    ee84:	07db      	lsls	r3, r3, #31
    ee86:	f53f aed1 	bmi.w	ec2c <_svfprintf_r+0x12bc>
    ee8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ee8c:	1b9b      	subs	r3, r3, r6
    ee8e:	9312      	str	r3, [sp, #72]	; 0x48
    ee90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee92:	2b47      	cmp	r3, #71	; 0x47
    ee94:	f43f af13 	beq.w	ecbe <_svfprintf_r+0x134e>
    ee98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ee9a:	e728      	b.n	ecee <_svfprintf_r+0x137e>
    ee9c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    eea0:	970e      	str	r7, [sp, #56]	; 0x38
    eea2:	9308      	str	r3, [sp, #32]
    eea4:	950d      	str	r5, [sp, #52]	; 0x34
    eea6:	4683      	mov	fp, r0
    eea8:	9013      	str	r0, [sp, #76]	; 0x4c
    eeaa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    eeae:	f7fe bf25 	b.w	dcfc <_svfprintf_r+0x38c>
    eeb2:	9b07      	ldr	r3, [sp, #28]
    eeb4:	07db      	lsls	r3, r3, #31
    eeb6:	465f      	mov	r7, fp
    eeb8:	d505      	bpl.n	eec6 <_svfprintf_r+0x1556>
    eeba:	ae40      	add	r6, sp, #256	; 0x100
    eebc:	2330      	movs	r3, #48	; 0x30
    eebe:	f806 3d41 	strb.w	r3, [r6, #-65]!
    eec2:	f7fe bf11 	b.w	dce8 <_svfprintf_r+0x378>
    eec6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    eeca:	ae30      	add	r6, sp, #192	; 0xc0
    eecc:	f7fe bf0f 	b.w	dcee <_svfprintf_r+0x37e>
    eed0:	aa23      	add	r2, sp, #140	; 0x8c
    eed2:	9909      	ldr	r1, [sp, #36]	; 0x24
    eed4:	980a      	ldr	r0, [sp, #40]	; 0x28
    eed6:	f000 f8a3 	bl	f020 <__ssprint_r>
    eeda:	2800      	cmp	r0, #0
    eedc:	f47e ae41 	bne.w	db62 <_svfprintf_r+0x1f2>
    eee0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    eee2:	9c25      	ldr	r4, [sp, #148]	; 0x94
    eee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    eee6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    eeea:	e62a      	b.n	eb42 <_svfprintf_r+0x11d2>
    eeec:	46a0      	mov	r8, r4
    eeee:	2500      	movs	r5, #0
    eef0:	f7fe bd99 	b.w	da26 <_svfprintf_r+0xb6>
    eef4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    eef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eef8:	4413      	add	r3, r2
    eefa:	2267      	movs	r2, #103	; 0x67
    eefc:	930d      	str	r3, [sp, #52]	; 0x34
    eefe:	9211      	str	r2, [sp, #68]	; 0x44
    ef00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ef04:	e572      	b.n	e9ec <_svfprintf_r+0x107c>
    ef06:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ef08:	e552      	b.n	e9b0 <_svfprintf_r+0x1040>
    ef0a:	3330      	adds	r3, #48	; 0x30
    ef0c:	2230      	movs	r2, #48	; 0x30
    ef0e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    ef12:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    ef16:	ab20      	add	r3, sp, #128	; 0x80
    ef18:	e725      	b.n	ed66 <_svfprintf_r+0x13f6>
    ef1a:	9808      	ldr	r0, [sp, #32]
    ef1c:	4639      	mov	r1, r7
    ef1e:	2200      	movs	r2, #0
    ef20:	2300      	movs	r3, #0
    ef22:	f7fb ff8f 	bl	ae44 <__aeabi_dcmpeq>
    ef26:	2800      	cmp	r0, #0
    ef28:	f47f ae8a 	bne.w	ec40 <_svfprintf_r+0x12d0>
    ef2c:	f1c5 0501 	rsb	r5, r5, #1
    ef30:	951d      	str	r5, [sp, #116]	; 0x74
    ef32:	442c      	add	r4, r5
    ef34:	e529      	b.n	e98a <_svfprintf_r+0x101a>
    ef36:	4e38      	ldr	r6, [pc, #224]	; (f018 <_svfprintf_r+0x16a8>)
    ef38:	4b38      	ldr	r3, [pc, #224]	; (f01c <_svfprintf_r+0x16ac>)
    ef3a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    ef3e:	f7ff b82f 	b.w	dfa0 <_svfprintf_r+0x630>
    ef42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ef44:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ef46:	189d      	adds	r5, r3, r2
    ef48:	eb05 030b 	add.w	r3, r5, fp
    ef4c:	930d      	str	r3, [sp, #52]	; 0x34
    ef4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ef52:	e54b      	b.n	e9ec <_svfprintf_r+0x107c>
    ef54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ef56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ef58:	f1c3 0301 	rsb	r3, r3, #1
    ef5c:	441a      	add	r2, r3
    ef5e:	4613      	mov	r3, r2
    ef60:	920d      	str	r2, [sp, #52]	; 0x34
    ef62:	e777      	b.n	ee54 <_svfprintf_r+0x14e4>
    ef64:	9b07      	ldr	r3, [sp, #28]
    ef66:	f013 0301 	ands.w	r3, r3, #1
    ef6a:	f47f af05 	bne.w	ed78 <_svfprintf_r+0x1408>
    ef6e:	9313      	str	r3, [sp, #76]	; 0x4c
    ef70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ef76:	e539      	b.n	e9ec <_svfprintf_r+0x107c>
    ef78:	980e      	ldr	r0, [sp, #56]	; 0x38
    ef7a:	f898 3001 	ldrb.w	r3, [r8, #1]
    ef7e:	6805      	ldr	r5, [r0, #0]
    ef80:	3004      	adds	r0, #4
    ef82:	2d00      	cmp	r5, #0
    ef84:	900e      	str	r0, [sp, #56]	; 0x38
    ef86:	46a0      	mov	r8, r4
    ef88:	f6be ad4b 	bge.w	da22 <_svfprintf_r+0xb2>
    ef8c:	f04f 35ff 	mov.w	r5, #4294967295
    ef90:	f7fe bd47 	b.w	da22 <_svfprintf_r+0xb2>
    ef94:	f1bb 0f00 	cmp.w	fp, #0
    ef98:	d102      	bne.n	efa0 <_svfprintf_r+0x1630>
    ef9a:	9b07      	ldr	r3, [sp, #28]
    ef9c:	07d8      	lsls	r0, r3, #31
    ef9e:	d507      	bpl.n	efb0 <_svfprintf_r+0x1640>
    efa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    efa2:	1c5d      	adds	r5, r3, #1
    efa4:	eb05 030b 	add.w	r3, r5, fp
    efa8:	930d      	str	r3, [sp, #52]	; 0x34
    efaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    efae:	e51d      	b.n	e9ec <_svfprintf_r+0x107c>
    efb0:	2301      	movs	r3, #1
    efb2:	930d      	str	r3, [sp, #52]	; 0x34
    efb4:	e51a      	b.n	e9ec <_svfprintf_r+0x107c>
    efb6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    efba:	f7ff b865 	b.w	e088 <_svfprintf_r+0x718>
    efbe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    efc2:	f7fe be51 	b.w	dc68 <_svfprintf_r+0x2f8>
    efc6:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
    efca:	e6cc      	b.n	ed66 <_svfprintf_r+0x13f6>
    efcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    efce:	230c      	movs	r3, #12
    efd0:	6013      	str	r3, [r2, #0]
    efd2:	f04f 30ff 	mov.w	r0, #4294967295
    efd6:	f7fe bdcd 	b.w	db74 <_svfprintf_r+0x204>
    efda:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    efde:	f7ff b950 	b.w	e282 <_svfprintf_r+0x912>
    efe2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    efe6:	f7fe bfab 	b.w	df40 <_svfprintf_r+0x5d0>
    efea:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    efee:	f7fe bdc9 	b.w	db84 <_svfprintf_r+0x214>
    eff2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    eff6:	f7ff b819 	b.w	e02c <_svfprintf_r+0x6bc>
    effa:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    effe:	f7fe bfeb 	b.w	dfd8 <_svfprintf_r+0x668>
    f002:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    f006:	f7ff b8f3 	b.w	e1f0 <_svfprintf_r+0x880>
    f00a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    f00e:	f7ff b8d2 	b.w	e1b6 <_svfprintf_r+0x846>
    f012:	bf00      	nop
    f014:	00010d20 	.word	0x00010d20
    f018:	00010cf4 	.word	0x00010cf4
    f01c:	00010cf0 	.word	0x00010cf0

0000f020 <__ssprint_r>:
    f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f024:	6893      	ldr	r3, [r2, #8]
    f026:	b083      	sub	sp, #12
    f028:	4690      	mov	r8, r2
    f02a:	2b00      	cmp	r3, #0
    f02c:	d072      	beq.n	f114 <__ssprint_r+0xf4>
    f02e:	4683      	mov	fp, r0
    f030:	f04f 0900 	mov.w	r9, #0
    f034:	6816      	ldr	r6, [r2, #0]
    f036:	6808      	ldr	r0, [r1, #0]
    f038:	688b      	ldr	r3, [r1, #8]
    f03a:	460d      	mov	r5, r1
    f03c:	464c      	mov	r4, r9
    f03e:	2c00      	cmp	r4, #0
    f040:	d045      	beq.n	f0ce <__ssprint_r+0xae>
    f042:	429c      	cmp	r4, r3
    f044:	461f      	mov	r7, r3
    f046:	469a      	mov	sl, r3
    f048:	d346      	bcc.n	f0d8 <__ssprint_r+0xb8>
    f04a:	89ab      	ldrh	r3, [r5, #12]
    f04c:	f413 6f90 	tst.w	r3, #1152	; 0x480
    f050:	d02d      	beq.n	f0ae <__ssprint_r+0x8e>
    f052:	696f      	ldr	r7, [r5, #20]
    f054:	6929      	ldr	r1, [r5, #16]
    f056:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    f05a:	ebc1 0a00 	rsb	sl, r1, r0
    f05e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    f062:	1c60      	adds	r0, r4, #1
    f064:	107f      	asrs	r7, r7, #1
    f066:	4450      	add	r0, sl
    f068:	42b8      	cmp	r0, r7
    f06a:	463a      	mov	r2, r7
    f06c:	bf84      	itt	hi
    f06e:	4607      	movhi	r7, r0
    f070:	463a      	movhi	r2, r7
    f072:	055b      	lsls	r3, r3, #21
    f074:	d533      	bpl.n	f0de <__ssprint_r+0xbe>
    f076:	4611      	mov	r1, r2
    f078:	4658      	mov	r0, fp
    f07a:	f7fb ff75 	bl	af68 <_malloc_r>
    f07e:	2800      	cmp	r0, #0
    f080:	d037      	beq.n	f0f2 <__ssprint_r+0xd2>
    f082:	4652      	mov	r2, sl
    f084:	6929      	ldr	r1, [r5, #16]
    f086:	9001      	str	r0, [sp, #4]
    f088:	f7f9 f938 	bl	82fc <memcpy>
    f08c:	89aa      	ldrh	r2, [r5, #12]
    f08e:	9b01      	ldr	r3, [sp, #4]
    f090:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    f094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f098:	81aa      	strh	r2, [r5, #12]
    f09a:	ebca 0207 	rsb	r2, sl, r7
    f09e:	eb03 000a 	add.w	r0, r3, sl
    f0a2:	616f      	str	r7, [r5, #20]
    f0a4:	612b      	str	r3, [r5, #16]
    f0a6:	6028      	str	r0, [r5, #0]
    f0a8:	60aa      	str	r2, [r5, #8]
    f0aa:	4627      	mov	r7, r4
    f0ac:	46a2      	mov	sl, r4
    f0ae:	4652      	mov	r2, sl
    f0b0:	4649      	mov	r1, r9
    f0b2:	f7fc fa59 	bl	b568 <memmove>
    f0b6:	f8d8 2008 	ldr.w	r2, [r8, #8]
    f0ba:	68ab      	ldr	r3, [r5, #8]
    f0bc:	6828      	ldr	r0, [r5, #0]
    f0be:	1bdb      	subs	r3, r3, r7
    f0c0:	4450      	add	r0, sl
    f0c2:	1b14      	subs	r4, r2, r4
    f0c4:	60ab      	str	r3, [r5, #8]
    f0c6:	6028      	str	r0, [r5, #0]
    f0c8:	f8c8 4008 	str.w	r4, [r8, #8]
    f0cc:	b314      	cbz	r4, f114 <__ssprint_r+0xf4>
    f0ce:	f8d6 9000 	ldr.w	r9, [r6]
    f0d2:	6874      	ldr	r4, [r6, #4]
    f0d4:	3608      	adds	r6, #8
    f0d6:	e7b2      	b.n	f03e <__ssprint_r+0x1e>
    f0d8:	4627      	mov	r7, r4
    f0da:	46a2      	mov	sl, r4
    f0dc:	e7e7      	b.n	f0ae <__ssprint_r+0x8e>
    f0de:	4658      	mov	r0, fp
    f0e0:	f7fc fb00 	bl	b6e4 <_realloc_r>
    f0e4:	4603      	mov	r3, r0
    f0e6:	2800      	cmp	r0, #0
    f0e8:	d1d7      	bne.n	f09a <__ssprint_r+0x7a>
    f0ea:	6929      	ldr	r1, [r5, #16]
    f0ec:	4658      	mov	r0, fp
    f0ee:	f7fc ffc5 	bl	c07c <_free_r>
    f0f2:	230c      	movs	r3, #12
    f0f4:	f8cb 3000 	str.w	r3, [fp]
    f0f8:	89ab      	ldrh	r3, [r5, #12]
    f0fa:	2200      	movs	r2, #0
    f0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f100:	f04f 30ff 	mov.w	r0, #4294967295
    f104:	81ab      	strh	r3, [r5, #12]
    f106:	f8c8 2008 	str.w	r2, [r8, #8]
    f10a:	f8c8 2004 	str.w	r2, [r8, #4]
    f10e:	b003      	add	sp, #12
    f110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f114:	2000      	movs	r0, #0
    f116:	f8c8 0004 	str.w	r0, [r8, #4]
    f11a:	b003      	add	sp, #12
    f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f120 <__aeabi_d2iz>:
    f120:	ea4f 0241 	mov.w	r2, r1, lsl #1
    f124:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    f128:	d215      	bcs.n	f156 <__aeabi_d2iz+0x36>
    f12a:	d511      	bpl.n	f150 <__aeabi_d2iz+0x30>
    f12c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    f130:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    f134:	d912      	bls.n	f15c <__aeabi_d2iz+0x3c>
    f136:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    f13a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f13e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    f142:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    f146:	fa23 f002 	lsr.w	r0, r3, r2
    f14a:	bf18      	it	ne
    f14c:	4240      	negne	r0, r0
    f14e:	4770      	bx	lr
    f150:	f04f 0000 	mov.w	r0, #0
    f154:	4770      	bx	lr
    f156:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    f15a:	d105      	bne.n	f168 <__aeabi_d2iz+0x48>
    f15c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    f160:	bf08      	it	eq
    f162:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    f166:	4770      	bx	lr
    f168:	f04f 0000 	mov.w	r0, #0
    f16c:	4770      	bx	lr
    f16e:	bf00      	nop

0000f170 <__aeabi_uldivmod>:
    f170:	b953      	cbnz	r3, f188 <__aeabi_uldivmod+0x18>
    f172:	b94a      	cbnz	r2, f188 <__aeabi_uldivmod+0x18>
    f174:	2900      	cmp	r1, #0
    f176:	bf08      	it	eq
    f178:	2800      	cmpeq	r0, #0
    f17a:	bf1c      	itt	ne
    f17c:	f04f 31ff 	movne.w	r1, #4294967295
    f180:	f04f 30ff 	movne.w	r0, #4294967295
    f184:	f000 b97e 	b.w	f484 <__aeabi_idiv0>
    f188:	f1ad 0c08 	sub.w	ip, sp, #8
    f18c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    f190:	f000 f806 	bl	f1a0 <__udivmoddi4>
    f194:	f8dd e004 	ldr.w	lr, [sp, #4]
    f198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f19c:	b004      	add	sp, #16
    f19e:	4770      	bx	lr

0000f1a0 <__udivmoddi4>:
    f1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1a4:	468c      	mov	ip, r1
    f1a6:	460e      	mov	r6, r1
    f1a8:	4604      	mov	r4, r0
    f1aa:	9d08      	ldr	r5, [sp, #32]
    f1ac:	2b00      	cmp	r3, #0
    f1ae:	d150      	bne.n	f252 <__udivmoddi4+0xb2>
    f1b0:	428a      	cmp	r2, r1
    f1b2:	4617      	mov	r7, r2
    f1b4:	d96c      	bls.n	f290 <__udivmoddi4+0xf0>
    f1b6:	fab2 fe82 	clz	lr, r2
    f1ba:	f1be 0f00 	cmp.w	lr, #0
    f1be:	d00b      	beq.n	f1d8 <__udivmoddi4+0x38>
    f1c0:	f1ce 0420 	rsb	r4, lr, #32
    f1c4:	fa20 f404 	lsr.w	r4, r0, r4
    f1c8:	fa01 f60e 	lsl.w	r6, r1, lr
    f1cc:	ea44 0c06 	orr.w	ip, r4, r6
    f1d0:	fa02 f70e 	lsl.w	r7, r2, lr
    f1d4:	fa00 f40e 	lsl.w	r4, r0, lr
    f1d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
    f1dc:	0c22      	lsrs	r2, r4, #16
    f1de:	fbbc f0f9 	udiv	r0, ip, r9
    f1e2:	fa1f f887 	uxth.w	r8, r7
    f1e6:	fb09 c610 	mls	r6, r9, r0, ip
    f1ea:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    f1ee:	fb00 f308 	mul.w	r3, r0, r8
    f1f2:	42b3      	cmp	r3, r6
    f1f4:	d909      	bls.n	f20a <__udivmoddi4+0x6a>
    f1f6:	19f6      	adds	r6, r6, r7
    f1f8:	f100 32ff 	add.w	r2, r0, #4294967295
    f1fc:	f080 8122 	bcs.w	f444 <__udivmoddi4+0x2a4>
    f200:	42b3      	cmp	r3, r6
    f202:	f240 811f 	bls.w	f444 <__udivmoddi4+0x2a4>
    f206:	3802      	subs	r0, #2
    f208:	443e      	add	r6, r7
    f20a:	1af6      	subs	r6, r6, r3
    f20c:	b2a2      	uxth	r2, r4
    f20e:	fbb6 f3f9 	udiv	r3, r6, r9
    f212:	fb09 6613 	mls	r6, r9, r3, r6
    f216:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    f21a:	fb03 f808 	mul.w	r8, r3, r8
    f21e:	45a0      	cmp	r8, r4
    f220:	d909      	bls.n	f236 <__udivmoddi4+0x96>
    f222:	19e4      	adds	r4, r4, r7
    f224:	f103 32ff 	add.w	r2, r3, #4294967295
    f228:	f080 810a 	bcs.w	f440 <__udivmoddi4+0x2a0>
    f22c:	45a0      	cmp	r8, r4
    f22e:	f240 8107 	bls.w	f440 <__udivmoddi4+0x2a0>
    f232:	3b02      	subs	r3, #2
    f234:	443c      	add	r4, r7
    f236:	ebc8 0404 	rsb	r4, r8, r4
    f23a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    f23e:	2100      	movs	r1, #0
    f240:	2d00      	cmp	r5, #0
    f242:	d062      	beq.n	f30a <__udivmoddi4+0x16a>
    f244:	fa24 f40e 	lsr.w	r4, r4, lr
    f248:	2300      	movs	r3, #0
    f24a:	602c      	str	r4, [r5, #0]
    f24c:	606b      	str	r3, [r5, #4]
    f24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f252:	428b      	cmp	r3, r1
    f254:	d907      	bls.n	f266 <__udivmoddi4+0xc6>
    f256:	2d00      	cmp	r5, #0
    f258:	d055      	beq.n	f306 <__udivmoddi4+0x166>
    f25a:	2100      	movs	r1, #0
    f25c:	e885 0041 	stmia.w	r5, {r0, r6}
    f260:	4608      	mov	r0, r1
    f262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f266:	fab3 f183 	clz	r1, r3
    f26a:	2900      	cmp	r1, #0
    f26c:	f040 8090 	bne.w	f390 <__udivmoddi4+0x1f0>
    f270:	42b3      	cmp	r3, r6
    f272:	d302      	bcc.n	f27a <__udivmoddi4+0xda>
    f274:	4282      	cmp	r2, r0
    f276:	f200 80f8 	bhi.w	f46a <__udivmoddi4+0x2ca>
    f27a:	1a84      	subs	r4, r0, r2
    f27c:	eb66 0603 	sbc.w	r6, r6, r3
    f280:	2001      	movs	r0, #1
    f282:	46b4      	mov	ip, r6
    f284:	2d00      	cmp	r5, #0
    f286:	d040      	beq.n	f30a <__udivmoddi4+0x16a>
    f288:	e885 1010 	stmia.w	r5, {r4, ip}
    f28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f290:	b912      	cbnz	r2, f298 <__udivmoddi4+0xf8>
    f292:	2701      	movs	r7, #1
    f294:	fbb7 f7f2 	udiv	r7, r7, r2
    f298:	fab7 fe87 	clz	lr, r7
    f29c:	f1be 0f00 	cmp.w	lr, #0
    f2a0:	d135      	bne.n	f30e <__udivmoddi4+0x16e>
    f2a2:	1bf3      	subs	r3, r6, r7
    f2a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
    f2a8:	fa1f fc87 	uxth.w	ip, r7
    f2ac:	2101      	movs	r1, #1
    f2ae:	fbb3 f0f8 	udiv	r0, r3, r8
    f2b2:	0c22      	lsrs	r2, r4, #16
    f2b4:	fb08 3610 	mls	r6, r8, r0, r3
    f2b8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    f2bc:	fb0c f300 	mul.w	r3, ip, r0
    f2c0:	42b3      	cmp	r3, r6
    f2c2:	d907      	bls.n	f2d4 <__udivmoddi4+0x134>
    f2c4:	19f6      	adds	r6, r6, r7
    f2c6:	f100 32ff 	add.w	r2, r0, #4294967295
    f2ca:	d202      	bcs.n	f2d2 <__udivmoddi4+0x132>
    f2cc:	42b3      	cmp	r3, r6
    f2ce:	f200 80ce 	bhi.w	f46e <__udivmoddi4+0x2ce>
    f2d2:	4610      	mov	r0, r2
    f2d4:	1af6      	subs	r6, r6, r3
    f2d6:	b2a2      	uxth	r2, r4
    f2d8:	fbb6 f3f8 	udiv	r3, r6, r8
    f2dc:	fb08 6613 	mls	r6, r8, r3, r6
    f2e0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    f2e4:	fb0c fc03 	mul.w	ip, ip, r3
    f2e8:	45a4      	cmp	ip, r4
    f2ea:	d907      	bls.n	f2fc <__udivmoddi4+0x15c>
    f2ec:	19e4      	adds	r4, r4, r7
    f2ee:	f103 32ff 	add.w	r2, r3, #4294967295
    f2f2:	d202      	bcs.n	f2fa <__udivmoddi4+0x15a>
    f2f4:	45a4      	cmp	ip, r4
    f2f6:	f200 80b5 	bhi.w	f464 <__udivmoddi4+0x2c4>
    f2fa:	4613      	mov	r3, r2
    f2fc:	ebcc 0404 	rsb	r4, ip, r4
    f300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    f304:	e79c      	b.n	f240 <__udivmoddi4+0xa0>
    f306:	4629      	mov	r1, r5
    f308:	4628      	mov	r0, r5
    f30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f30e:	f1ce 0120 	rsb	r1, lr, #32
    f312:	fa06 f30e 	lsl.w	r3, r6, lr
    f316:	fa07 f70e 	lsl.w	r7, r7, lr
    f31a:	fa20 f901 	lsr.w	r9, r0, r1
    f31e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    f322:	40ce      	lsrs	r6, r1
    f324:	ea49 0903 	orr.w	r9, r9, r3
    f328:	fbb6 faf8 	udiv	sl, r6, r8
    f32c:	ea4f 4419 	mov.w	r4, r9, lsr #16
    f330:	fb08 661a 	mls	r6, r8, sl, r6
    f334:	fa1f fc87 	uxth.w	ip, r7
    f338:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    f33c:	fb0a f20c 	mul.w	r2, sl, ip
    f340:	429a      	cmp	r2, r3
    f342:	fa00 f40e 	lsl.w	r4, r0, lr
    f346:	d90a      	bls.n	f35e <__udivmoddi4+0x1be>
    f348:	19db      	adds	r3, r3, r7
    f34a:	f10a 31ff 	add.w	r1, sl, #4294967295
    f34e:	f080 8087 	bcs.w	f460 <__udivmoddi4+0x2c0>
    f352:	429a      	cmp	r2, r3
    f354:	f240 8084 	bls.w	f460 <__udivmoddi4+0x2c0>
    f358:	f1aa 0a02 	sub.w	sl, sl, #2
    f35c:	443b      	add	r3, r7
    f35e:	1a9b      	subs	r3, r3, r2
    f360:	fa1f f989 	uxth.w	r9, r9
    f364:	fbb3 f1f8 	udiv	r1, r3, r8
    f368:	fb08 3311 	mls	r3, r8, r1, r3
    f36c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    f370:	fb01 f60c 	mul.w	r6, r1, ip
    f374:	429e      	cmp	r6, r3
    f376:	d907      	bls.n	f388 <__udivmoddi4+0x1e8>
    f378:	19db      	adds	r3, r3, r7
    f37a:	f101 32ff 	add.w	r2, r1, #4294967295
    f37e:	d26b      	bcs.n	f458 <__udivmoddi4+0x2b8>
    f380:	429e      	cmp	r6, r3
    f382:	d969      	bls.n	f458 <__udivmoddi4+0x2b8>
    f384:	3902      	subs	r1, #2
    f386:	443b      	add	r3, r7
    f388:	1b9b      	subs	r3, r3, r6
    f38a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    f38e:	e78e      	b.n	f2ae <__udivmoddi4+0x10e>
    f390:	f1c1 0e20 	rsb	lr, r1, #32
    f394:	fa22 f40e 	lsr.w	r4, r2, lr
    f398:	408b      	lsls	r3, r1
    f39a:	4323      	orrs	r3, r4
    f39c:	fa20 f70e 	lsr.w	r7, r0, lr
    f3a0:	fa06 f401 	lsl.w	r4, r6, r1
    f3a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    f3a8:	fa26 f60e 	lsr.w	r6, r6, lr
    f3ac:	433c      	orrs	r4, r7
    f3ae:	fbb6 f9fc 	udiv	r9, r6, ip
    f3b2:	0c27      	lsrs	r7, r4, #16
    f3b4:	fb0c 6619 	mls	r6, ip, r9, r6
    f3b8:	fa1f f883 	uxth.w	r8, r3
    f3bc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    f3c0:	fb09 f708 	mul.w	r7, r9, r8
    f3c4:	42b7      	cmp	r7, r6
    f3c6:	fa02 f201 	lsl.w	r2, r2, r1
    f3ca:	fa00 fa01 	lsl.w	sl, r0, r1
    f3ce:	d908      	bls.n	f3e2 <__udivmoddi4+0x242>
    f3d0:	18f6      	adds	r6, r6, r3
    f3d2:	f109 30ff 	add.w	r0, r9, #4294967295
    f3d6:	d241      	bcs.n	f45c <__udivmoddi4+0x2bc>
    f3d8:	42b7      	cmp	r7, r6
    f3da:	d93f      	bls.n	f45c <__udivmoddi4+0x2bc>
    f3dc:	f1a9 0902 	sub.w	r9, r9, #2
    f3e0:	441e      	add	r6, r3
    f3e2:	1bf6      	subs	r6, r6, r7
    f3e4:	b2a0      	uxth	r0, r4
    f3e6:	fbb6 f4fc 	udiv	r4, r6, ip
    f3ea:	fb0c 6614 	mls	r6, ip, r4, r6
    f3ee:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    f3f2:	fb04 f808 	mul.w	r8, r4, r8
    f3f6:	45b8      	cmp	r8, r7
    f3f8:	d907      	bls.n	f40a <__udivmoddi4+0x26a>
    f3fa:	18ff      	adds	r7, r7, r3
    f3fc:	f104 30ff 	add.w	r0, r4, #4294967295
    f400:	d228      	bcs.n	f454 <__udivmoddi4+0x2b4>
    f402:	45b8      	cmp	r8, r7
    f404:	d926      	bls.n	f454 <__udivmoddi4+0x2b4>
    f406:	3c02      	subs	r4, #2
    f408:	441f      	add	r7, r3
    f40a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    f40e:	ebc8 0707 	rsb	r7, r8, r7
    f412:	fba0 8902 	umull	r8, r9, r0, r2
    f416:	454f      	cmp	r7, r9
    f418:	4644      	mov	r4, r8
    f41a:	464e      	mov	r6, r9
    f41c:	d314      	bcc.n	f448 <__udivmoddi4+0x2a8>
    f41e:	d029      	beq.n	f474 <__udivmoddi4+0x2d4>
    f420:	b365      	cbz	r5, f47c <__udivmoddi4+0x2dc>
    f422:	ebba 0304 	subs.w	r3, sl, r4
    f426:	eb67 0706 	sbc.w	r7, r7, r6
    f42a:	fa07 fe0e 	lsl.w	lr, r7, lr
    f42e:	40cb      	lsrs	r3, r1
    f430:	40cf      	lsrs	r7, r1
    f432:	ea4e 0303 	orr.w	r3, lr, r3
    f436:	e885 0088 	stmia.w	r5, {r3, r7}
    f43a:	2100      	movs	r1, #0
    f43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f440:	4613      	mov	r3, r2
    f442:	e6f8      	b.n	f236 <__udivmoddi4+0x96>
    f444:	4610      	mov	r0, r2
    f446:	e6e0      	b.n	f20a <__udivmoddi4+0x6a>
    f448:	ebb8 0402 	subs.w	r4, r8, r2
    f44c:	eb69 0603 	sbc.w	r6, r9, r3
    f450:	3801      	subs	r0, #1
    f452:	e7e5      	b.n	f420 <__udivmoddi4+0x280>
    f454:	4604      	mov	r4, r0
    f456:	e7d8      	b.n	f40a <__udivmoddi4+0x26a>
    f458:	4611      	mov	r1, r2
    f45a:	e795      	b.n	f388 <__udivmoddi4+0x1e8>
    f45c:	4681      	mov	r9, r0
    f45e:	e7c0      	b.n	f3e2 <__udivmoddi4+0x242>
    f460:	468a      	mov	sl, r1
    f462:	e77c      	b.n	f35e <__udivmoddi4+0x1be>
    f464:	3b02      	subs	r3, #2
    f466:	443c      	add	r4, r7
    f468:	e748      	b.n	f2fc <__udivmoddi4+0x15c>
    f46a:	4608      	mov	r0, r1
    f46c:	e70a      	b.n	f284 <__udivmoddi4+0xe4>
    f46e:	3802      	subs	r0, #2
    f470:	443e      	add	r6, r7
    f472:	e72f      	b.n	f2d4 <__udivmoddi4+0x134>
    f474:	45c2      	cmp	sl, r8
    f476:	d3e7      	bcc.n	f448 <__udivmoddi4+0x2a8>
    f478:	463e      	mov	r6, r7
    f47a:	e7d1      	b.n	f420 <__udivmoddi4+0x280>
    f47c:	4629      	mov	r1, r5
    f47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f482:	bf00      	nop

0000f484 <__aeabi_idiv0>:
    f484:	4770      	bx	lr
    f486:	bf00      	nop
    f488:	72617453 	.word	0x72617453
    f48c:	676e6974 	.word	0x676e6974
    f490:	002e2e2e 	.word	0x002e2e2e
    f494:	202d2025 	.word	0x202d2025
    f498:	00000000 	.word	0x00000000
    f49c:	6f6f6c20 	.word	0x6f6f6c20
    f4a0:	732f7370 	.word	0x732f7370
    f4a4:	00000000 	.word	0x00000000
    f4a8:	00000028 	.word	0x00000028
    f4ac:	77207375 	.word	0x77207375
    f4b0:	206b726f 	.word	0x206b726f
    f4b4:	656d6974 	.word	0x656d6974
    f4b8:	ffff0029 	.word	0xffff0029

0000f4bc <CSWTCH.35>:
    f4bc:	ff030102 08040201 01f401f4 00000000     ................
    f4cc:	01f401f4 01f40000 000001f4 00000c0b     ................
    f4dc:	04000c0b 0000000b 00000000 00000000     ................
	...
    f4f8:	00100000 00001d00 0000002a 00221e00     ........*.....".
    f508:	0015002b 00231f00 00000005 2c242000     +.....#...... $,
    f518:	00000006 2d252100 000f0007 20676942     .....!%-....Big 
    f528:	73756f48 00000065 6c65525f 27207961     House..._Relay '
    f538:	00002751 6c65525f 27207961 00002754     Q'.._Relay 'T'..
    f548:	6c61625f 6572206c 7361656c 00000065     _ball release...
    f558:	6f6f6853 67412074 006e6961 756f535f     Shoot Again._Sou
    f568:	3120646e 00000036 27203123 72747865     nd 16...#1 'extr
    f578:	61622061 00276c6c 27203223 72747865     a ball'.#2 'extr
    f588:	61622061 00276c6c 27203323 72747865     a ball'.#3 'extr
    f598:	61622061 00276c6c 7466654c 616c2720     a ball'.Left 'la
    f5a8:	63207473 636e6168 00002765 68676952     st chance'..Righ
    f5b8:	6c272074 20747361 6e616863 00276563     t 'last chance'.
    f5c8:	7466654c 70532720 61696365 0000276c     Left 'Special'..
    f5d8:	68676952 53272074 69636570 00276c61     Right 'Special'.
    f5e8:	6d61725f 00000070 6c61625f 6167206c     _ramp..._ball ga
    f5f8:	72206574 79616c65 00000000 6775615f     te relay...._aug
    f608:	6d207265 726f746f 6c657220 27207961     er motor relay '
    f618:	00002741 706d6152 6f6c2720 00276b63     A'..Ramp 'lock'.
    f628:	746e6563 64207265 20656d6f 37362328     center dome (#67
    f638:	00000029 74746f62 6c206d6f 20746665     )...bottom left 
    f648:	69722026 20746867 6867696c 68732074     & right light sh
    f658:	0000776f 2c303031 78303030 6c756d20     ow..100,000x mul
    f668:	6c706974 00726569 63657053 006c6169     tiplier.Special.
    f678:	68676952 68732074 65746f6f 65272072     Right shooter 'e
    f688:	70616373 00002765 7466654c 6f687320     scape'..Left sho
    f698:	7265746f 6f6c2720 00276b63 63697242     oter 'lock'.Bric
    f6a8:	6177206b 23206c6c 00000034 63697242     k wall #4...Bric
    f6b8:	6177206b 23206c6c 00000033 63697242     k wall #3...Bric
    f6c8:	6177206b 23206c6c 00000032 63697242     k wall #2...Bric
    f6d8:	6177206b 23206c6c 00000031 302c3031     k wall #1...10,0
    f6e8:	20783030 746c756d 696c7069 00007265     00x multiplier..
    f6f8:	6867694c 73207374 69636570 00006c61     Lights special..
    f708:	27203123 41455242 0000274b 27203223     #1 'BREAK'..#2 '
    f718:	41455242 0000274b 27203323 41455242     BREAK'..#3 'BREA
    f728:	0000274b 27203423 41455242 0000274b     K'..#4 'BREAK'..
    f738:	27203523 41455242 0000274b 27203123     #5 'BREAK'..#1 '
    f748:	4c49414a 00000027 27203223 4c49414a     JAIL'...#2 'JAIL
    f758:	00000027 27203323 4c49414a 00000027     '...#3 'JAIL'...
    f768:	27203423 4c49414a 00000027 6d207831     #4 'JAIL'...1x m
    f778:	69746c75 65696c70 00000072 6d207832     ultiplier...2x m
    f788:	69746c75 65696c70 00000072 6d207834     ultiplier...4x m
    f798:	69746c75 65696c70 00000072 6d207838     ultiplier...8x m
    f7a8:	69746c75 65696c70 00000072 6c6c6543     ultiplier...Cell
    f7b8:	6f6c6220 23206b63 00000031 6c6c6543      block #1...Cell
    f7c8:	6f6c6220 23206b63 00000032 6c6c6543      block #2...Cell
    f7d8:	6f6c6220 23206b63 00000033 6c6c6543      block #3...Cell
    f7e8:	6f6c6220 23206b63 00000034 20706f54      block #4...Top 
    f7f8:	6867696c 68732074 0000776f 746f7053     light show..Spot
    f808:	6165532f 20686372 6867696c 00000074     /Search light...
    f818:	6e6f6e28 00002965 7466656c 6f687320     (none)..left sho
    f828:	7265746f 00000000 7466656c 706f7420     oter....left top
    f838:	6d6f6420 696c2065 00746867 68676972      dome light.righ
    f848:	6f742074 6f642070 6c20656d 74686769     t top dome light
    f858:	00000000 68676972 68732074 65746f6f     ....right shoote
    f868:	00000072 6b6e6162 73657220 00007465     r...bank reset..
    f878:	68676972 69732074 64206564 20656d6f     right side dome 
    f888:	6867696c 00000074 636f6e6b 0072656b     light...knocker.
    f898:	6874756f 00656c6f 6c6c6162 206e6f20     outhole.ball on 
    f8a8:	69616863 0000006e 7466656c 64697320     chain...left sid
    f8b8:	6f722065 766f6c6c 00007265 45524227     e rollover..'BRE
    f8c8:	20274b41 67726174 23207465 00000031     AK' target #1...
    f8d8:	6b63696b 20676e69 62627572 00737265     kicking rubbers.
    f8e8:	20706f74 20706f70 706d7562 00007265     top pop bumper..
    f8f8:	6c6c6563 6f6c6220 73206b63 20746f70     cell block spot 
    f908:	67726154 23207465 00000031 7466656c     Target #1...left
    f918:	696c6620 72657070 00000000 68676972      flipper....righ
    f928:	6c662074 65707069 00000072 706f7264     t flipper...drop
    f938:	72617420 20746567 00003123 45524227      target #1..'BRE
    f948:	20274b41 67726174 23207465 00000032     AK' target #2...
    f958:	49414a27 7420274c 65677261 31232074     'JAIL' target #1
    f968:	00000000 746e6563 70207265 6220706f     ....center pop b
    f978:	65706d75 00000072 6c6c6563 6f6c6220     umper...cell blo
    f988:	73206b63 20746f70 67726154 23207465     ck spot Target #
    f998:	00000032 7466656c 74756f20 65646973     2...left outside
    f9a8:	6c6f7220 65766f6c 00000072 706f7264      rollover...drop
    f9b8:	72617420 20746567 00003223 45524227      target #2..'BRE
    f9c8:	20274b41 67726174 23207465 00000033     AK' target #3...
    f9d8:	49414a27 7420274c 65677261 32232074     'JAIL' target #2
    f9e8:	00000000 74746f62 70206d6f 6220706f     ....bottom pop b
    f9f8:	65706d75 00000072 20706f74 6c6c6f72     umper...top roll
    fa08:	7265766f 00312320 7466656c 74657220     over #1.left ret
    fa18:	206e7275 6c6c6f72 7265766f 00000000     urn rollover....
    fa28:	706f7264 72617420 20746567 00003323     drop target #3..
    fa38:	45524227 20274b41 67726174 23207465     'BREAK' target #
    fa48:	00000034 49414a27 7420274c 65677261     4...'JAIL' targe
    fa58:	33232074 00000000 6c6c6563 6f6c6220     t #3....cell blo
    fa68:	73206b63 20746f70 67726154 23207465     ck spot Target #
    fa78:	00000033 20706f74 6c6c6f72 7265766f     3...top rollover
    fa88:	00322320 68676972 65722074 6e727574      #2.right return
    fa98:	6c6f7220 65766f6c 00000072 2074756f      rollover...out 
    faa8:	656c6f68 00000000 706f7264 72617420     hole....drop tar
    fab8:	20746567 00003423 45524227 20274b41     get #4..'BREAK' 
    fac8:	67726174 23207465 00000035 49414a27     target #5...'JAI
    fad8:	7420274c 65677261 34232074 00000000     L' target #4....
    fae8:	6c6c6563 6f6c6220 73206b63 20746f70     cell block spot 
    faf8:	67726154 23207465 00000034 20706f74     Target #4...top 
    fb08:	6c6c6f72 7265766f 00332320 68676972     rollover #3.righ
    fb18:	756f2074 64697374 6f722065 766f6c6c     t outside rollov
    fb28:	00007265 6c6c6162 6c657220 65736165     er..ball release
    fb38:	00000000 706d6172 00000000 6c6c6162     ....ramp....ball
    fb48:	74616720 00000065 65677561 6f6d2072      gate...auger mo
    fb58:	00726f74 48676942 6573756f 696e6920     tor.BigHouse ini
    fb68:	2e2e2e74 00000000 696c202d 20746867     t.......- light 
    fb78:	756f7267 69207370 2e74696e 00002e2e     groups init.....
    fb88:	72747865 6c616261 0000006c 7473616c     extraball...last
    fb98:	6e616863 00006563 63657073 006c6169     chance..special.
    fba8:	6c6c6177 00000000 61657262 0000006b     wall....break...
    fbb8:	6c69616a 00000000 746c756d 00000069     jail....multi...
    fbc8:	6c6c6563 636f6c62 0000006b 6867696c     cellblock...ligh
    fbd8:	6f687374 00000077 706f7264 67726174     tshow...droptarg
    fbe8:	00007465 776f6873 00000031 776f6873     et..show1...show
    fbf8:	00000032 776f6873 00000033 776f6873     2...show3...show
    fc08:	00000034 776f6873 00000035 776f6873     4...show5...show
    fc18:	00000036 6974202d 7372656d 696e6920     6...- timers ini
    fc28:	2e2e2e74 00000000 706f7244 72617420     t.......Drop tar
    fc38:	73746567 00000000 6867694c 68732074     gets....Light sh
    fc48:	0000776f 6c6c6142 6c657220 65736165     ow..Ball release
    fc58:	00000000 70736944 2079616c 776f6873     ....Display show
    fc68:	00000000 48676942 6573756f 72643a3a     ....BigHouse::dr
    fc78:	6954706f 5272656d 6974756f 203a656e     opTimerRoutine: 
    fc88:	73206f4e 69636570 6c206c61 002e7469     No special lit..
    fc98:	72617473 67694c74 68537468 2e2e776f     startLightShow..
    fca8:	0000002e 72617473 73694474 79616c70     ....startDisplay
    fcb8:	776f6853 002e2e2e 003c2020 202d203e     Show....  <.> - 
    fcc8:	00000020 00002020 45202a2a 50414353      ...  ..** ESCAP
    fcd8:	52412045 54534954 2a2a2053 00000000     E ARTISTS **....
    fce8:	7264202a 5420706f 65677261 74207374     * drop Targets t
    fcf8:	72656d69 00000000 6162202a 72206c6c     imer....* ball r
    fd08:	61656c65 74206573 72656d69 00000000     elease timer....
    fd18:	48676942 6573756f 69743a3a 5272656d     BigHouse::timerR
    fd28:	6974756f 203a656e 6e6b6e75 206e776f     outine: unknown 
    fd38:	6b736174 ff006449                       taskId..

0000fd40 <vtable for BigHouse>:
	...
    fd48:	00000711 00000979 00000999 00001e39     ....y.......9...
    fd58:	00002e71 0000070d 00003039 000020ed     q.......90... ..
    fd68:	000022ad fffffd7c 00000000 00000971     ."..|.......q...
    fd78:	00000991 00002345 0000005b ffff005d     ....E#..[...]...

0000fd88 <vtable for TimerTaskExecutor>:
	...
    fd98:	00008581                                ....

0000fd9c <credits_ratio>:
    fd9c:	04030201 08070605 02010a09 06050403     ................
    fdac:	0a090807 03010201 ffffff01              ............

0000fdb8 <vtable for Game>:
	...
    fdc0:	00002e75 00002f45 00004501 00002e5d     u...E/...E..]...
    fdd0:	00002e71 00002f75 00003039 00002e61     q...u/..90..a...
    fde0:	00002e65 fffffd7c 00000000 00002f3d     e...|.......=/..
    fdf0:	00002f5d 00002e69                       ]/..i...

0000fdf8 <max_credits>:
    fdf8:	140f0a08 75426e6f 6e6f7474 73657250     ....onButtonPres
    fe08:	3a646573 00000020 74697753 6e696863     sed: ...Switchin
    fe18:	6f6d2067 203a6564 00000000 30303030     g mode: ....0000
    fe28:	00303030 30303030 30303030 00003030     000.0000000000..
    fe38:	00434241 6f6c202d 69486461 63536867     ABC.- loadHighSc
    fe48:	7365726f 2e2e2928 0000002e 004d4152     ores()......RAM.
    fe58:	202e6425 0000003c 656d6147 73657220     %d. <...Game res
    fe68:	2e2e7465 0000002e 6f6c202d 6e696461     et......- loadin
    fe78:	65732067 6e697474 2e2e7367 0000002e     g settings......
    fe88:	656d6954 73615472 6578456b 6f747563     TimerTaskExecuto
    fe98:	6e692072 2e2e7469 0000002e 7466654c     r init......Left
    fea8:	76646120 65636e61 74756220 006e6f74      advance button.
    feb8:	74736554 74756220 006e6f74 68676952     Test button.Righ
    fec8:	64612074 636e6176 75622065 6e6f7474     t advance button
    fed8:	00000000 7466654c 696f4320 0000006e     ....Left Coin...
    fee8:	68676952 6f632074 00006e69 6c706552     Right coin..Repl
    fef8:	62207961 6f747475 0000006e 746c6954     ay button...Tilt
    ff08:	61632820 656e6962 00002974 53647453      (cabinet)..StdS
    ff18:	6e692077 2e2e7469 0000002e 65722051     w init......Q re
    ff28:	0079616c 65722054 0079616c 41647453     lay.T relay.StdA
    ff38:	69207463 2e74696e 00002e2e 656d6147     ct init.....Game
    ff48:	696e6920 2e2e2e74 00000000 5f6f6e3c      init.......<no_
    ff58:	656d616e 0000003e 20202d20 ffffff00     name>... -  ....

0000ff68 <coins_ratio>:
    ff68:	01010101 01010101 02020101 02020202     ................
    ff78:	02020202 04040303 ffffff05 4e524157     ............WARN
    ff88:	3a474e49 67694c20 72477468 3a70756f     ING: LightGroup:
    ff98:	67696c3a 203a7468 65646e75 656e6966     :light: undefine
    ffa8:	696c2064 20746867 00746573 4e524157     d light set.WARN
    ffb8:	3a474e49 67694c20 72477468 3a70756f     ING: LightGroup:
    ffc8:	67696c3a 203a7468 6c6c756e 67696c20     :light: null lig
    ffd8:	00217468 6867694c 6f724774 3a3a7075     ht!.LightGroup::
    ffe8:	3a746573 646e7520 6e696665 6c206465     set: undefined l
    fff8:	74686769 74657320 00000021 6867694c     ight set!...Ligh
   10008:	6f724774 3a3a7075 3a746573 6c6c6920     tGroup::set: ill
   10018:	6c616765 67696c20 6e207468 65626d75     egal light numbe
   10028:	00000072 6867694c 6f724774 3a3a7075     r...LightGroup::
   10038:	65766e69 203a7472 65646e75 656e6966     invert: undefine
   10048:	696c2064 20746867 21746573 00000000     d light set!....
   10058:	6867694c 6f724774 3a3a7075 736c7570     LightGroup::puls
   10068:	75203a65 6665646e 64656e69 67696c20     e: undefined lig
   10078:	73207468 00217465 6867694c 6f724774     ht set!.LightGro
   10088:	3a3a7075 63417369 65766974 6e75203a     up::isActive: un
   10098:	69666564 2064656e 6867696c 65732074     defined light se
   100a8:	00002174 6867694c 6f724774 3a3a7075     t!..LightGroup::
   100b8:	63417369 65766974 6c69203a 6167656c     isActive: illega
   100c8:	696c206c 20746867 626d756e 00007265     l light number..
   100d8:	6867694c 6f724774 3a3a7075 41746573     LightGroup::setA
   100e8:	203a6c6c 65646e75 656e6966 696c2064     ll: undefined li
   100f8:	20746867 21746573 00000000 6867694c     ght set!....Ligh
   10108:	6f724774 3a3a7075 74697773 68546863     tGroup::switchTh
   10118:	72694665 203a7473 65646e75 656e6966     eFirst: undefine
   10128:	696c2064 20746867 21746573 00000000     d light set!....
   10138:	6867694c 6f724774 3a3a7075 41746573     LightGroup::setA
   10148:	76697463 72655065 3a646f69 646e7520     ctivePeriod: und
   10158:	6e696665 6c206465 74686769 74657320     efined light set
   10168:	00000021 6867694c 6f724774 3a3a7075     !...LightGroup::
   10178:	41657261 203a6c6c 65646e75 656e6966     areAll: undefine
   10188:	696c2064 20746867 21746573 00000000     d light set!....
   10198:	6867694c 6f724774 3a3a7075 66696873     LightGroup::shif
   101a8:	67695274 203a7468 65646e75 656e6966     tRight: undefine
   101b8:	696c2064 20746867 21746573 00000000     d light set!....
   101c8:	6867694c 6f724774 3a3a7075 61746f72     LightGroup::rota
   101d8:	69526574 3a746867 646e7520 6e696665     teRight: undefin
   101e8:	6c206465 74686769 74657320 00000021     ed light set!...
   101f8:	6867694c 6f724774 3a3a7075 61746f72     LightGroup::rota
   10208:	69526574 3a746867 6f726720 73207075     teRight: group s
   10218:	20657a69 31203d3c 00000000 6867694c     ize <= 1....Ligh
   10228:	6f724774 3a3a7075 66696873 66654c74     tGroup::shiftLef
   10238:	75203a74 6665646e 64656e69 67696c20     t: undefined lig
   10248:	73207468 00217465 6867694c 6f724774     ht set!.LightGro
   10258:	3a3a7075 61746f72 654c6574 203a7466     up::rotateLeft: 
   10268:	756f7267 69732070 3c20657a 0031203d     group size <= 1.
   10278:	6867694c 6f724774 3a3a7075 61746f72     LightGroup::rota
   10288:	654c6574 203a7466 65646e75 656e6966     teLeft: undefine
   10298:	696c2064 20746867 21746573 00000000     d light set!....
   102a8:	00005b3a 0028205d ffff002c 6867694c     :[..] (.,...Ligh
   102b8:	74657374 696e6920 2e2e2e74 00000000     tset init.......
   102c8:	4e524157 3a474e49 67694c20 65537468     WARNING: LightSe
   102d8:	673a3a74 694c7465 28746867 69203a29     t::getLight(): i
   102e8:	6c61766e 6c206469 74686769 6d756e20     nvalid light num
   102f8:	20726562 00000000 00000030 6867694c     ber ....0...Ligh
   10308:	74655374 72703a3a 3a746e69 206f6e20     tSet::print: no 
   10318:	6867696c 64207374 6e696665 00216465     lights defined!.
   10328:	6867694c 74655374 72703a3a 3a746e69     LightSet::print:
   10338:	696f7620 696c2064 20746867 61727261      void light arra
   10348:	00002179 005b3a4c 2d2d2d2d 2d2d2d2d     y!..L:[.--------
   10358:	00002d2d 74796220 72662065 002e6565     --.. byte free..
   10368:	4f525245 00203a52 6e726157 3a676e69     ERROR: .Warning:
   10378:	ffff0020 656c6f53 64696f6e 28746553      ...SolenoidSet(
   10388:	6e692029 2e2e7469 0000002e 656c6f53     ) init......Sole
   10398:	64696f6e 28746553 6920296e 2e74696e     noidSet(n) init.
   103a8:	00002e2e 656c6f53 64696f6e 3a746553     ....SolenoidSet:
   103b8:	7465673a 6e49203a 696c6176 6f732064     :get: Invalid so
   103c8:	6f6e656c 23206469 00000000 75202d20     lenoid #.... - u
   103d8:	676e6973 6c6f7320 696f6e65 30232064     sing solenoid #0
   103e8:	00000000 ffff002d                       ....-...

000103f0 <vtable for Sys80b>:
	...
   103f8:	0000455d 00004639 00004501 00002e5d     ]E..9F...E..]...
   10408:	000044f9 00002f75 000044fd 38737953     .D..u/...D..Sys8
   10418:	64206230 72747365 69746375 2e2e6e6f     0b destruction..
   10428:	0000002e 38737953 69206230 2e74696e     ....Sys80b init.
   10438:	00002e2e 38737953 72206230 74657365     ....Sys80b reset
   10448:	002e2e2e 2d2d2d2d 73795320 20623038     ....---- Sys80b 
   10458:	20425250 2d2d2d2d 00000000 62616620     PRB ----.... fab
   10468:	706c6f76 6d674069 2e6c6961 206d6f63     volpi@gmail.com 
   10478:	00000000 6c657220 65736165 00000064     .... released...
   10488:	65727020 64657373 00000000 2079656b      pressed....key 
   10498:	ffffff00 ff000a5d 69646441 7420676e     ....]...Adding t
   104a8:	72656d69 202e2e2e 00000000 726f6261     imer... ....abor
   104b8:	63203a74 74276e61 64646120 6c756e20     t: can't add nul
   104c8:	6974206c 7472656d 216b7361 00000000     l timertask!....
   104d8:	726f6261 6d203a74 6e207861 65626d75     abort: max numbe
   104e8:	666f2072 6d695420 61547265 20736b73     r of TimerTasks 
   104f8:	63616572 2e646568 00000000 635f2820     reached..... (_c
   10508:	746e756f 0000203a 6469202c 0000203a     ount: .., id: ..
   10518:	726f6261 63203a74 74276e61 64646120     abort: can't add
   10528:	6d617320 69742065 7472656d 216b7361      same timertask!
   10538:	00000000 00003a29 206f6e3c 656d6974     ....):..<no time
   10548:	3e217372 00000000 ffff005f 2077656e     rs!>...._...new 
   10558:	656d6954 73617472 2e2e2e6b 00000000     Timertask.......
   10568:	0000275b 00002c27 005d312c 005d302c     ['..',..,1].,0].
   10578:	00020001 00080004 00200010 00800040     .......... .@...
   10588:	02000100 08000400 20001000 80004000     ........... .@..
   10598:	c2010703 00000000 00000000 00000000     ................
   105a8:	00000005 00000000 40000000 80004c4b     ...........@KL..
   105b8:	00009896 0001312d 16e36000 4d415200     ....-1...`...RAM
   105c8:	124f8000 4d415200 0f424000 4d415200     ..O..RAM.@B..RAM
   105d8:	0c350000 4d415200 07a12000 4d415200     ..5..RAM. ...RAM
   105e8:	ffffff00 72617453 676e6974 616f6220     ....Starting boa
   105f8:	72206472 002e7665 5053202d 6e692049     rd rev..- SPI in
   10608:	2e2e7469 0000002e 4950202d 6920734f     it......- PIOs i
   10618:	2e74696e 00002e2e 7542202d 6e6f7474     nit.....- Button
   10628:	6e692073 2e2e7469 0000002e 654c202d     s init......- Le
   10638:	72672064 69206469 2e74696e 00002e2e     d grid init.....
   10648:	564e202d 204d4152 74696e69 002e2e2e     - NVRAM init....
   10658:	434c202d 6e692044 2e2e7469 0000002e     - LCD init......
   10668:	72616f42 65722064 00002e76 6552202a     Board rev...* Re
   10678:	726f7473 20676e69 74636166 2079726f     storing factory 
   10688:	74746573 73676e69 202e2e2e 00000000     settings... ....
   10698:	002e6b6f                                ok..

0001069c <revByte>:
   1069c:	c0408000 e060a020 d0509010 f070b030     ..@. .`...P.0.p.
   106ac:	c8488808 e868a828 d8589818 f878b838     ..H.(.h...X.8.x.
   106bc:	c4448404 e464a424 d4549414 f474b434     ..D.$.d...T.4.t.
   106cc:	cc4c8c0c ec6cac2c dc5c9c1c fc7cbc3c     ..L.,.l...\.<.|.
   106dc:	c2428202 e262a222 d2529212 f272b232     ..B.".b...R.2.r.
   106ec:	ca4a8a0a ea6aaa2a da5a9a1a fa7aba3a     ..J.*.j...Z.:.z.
   106fc:	c6468606 e666a626 d6569616 f676b636     ..F.&.f...V.6.v.
   1070c:	ce4e8e0e ee6eae2e de5e9e1e fe7ebe3e     ..N...n...^.>.~.
   1071c:	c1418101 e161a121 d1519111 f171b131     ..A.!.a...Q.1.q.
   1072c:	c9498909 e969a929 d9599919 f979b939     ..I.).i...Y.9.y.
   1073c:	c5458505 e565a525 d5559515 f575b535     ..E.%.e...U.5.u.
   1074c:	cd4d8d0d ed6dad2d dd5d9d1d fd7dbd3d     ..M.-.m...].=.}.
   1075c:	c3438303 e363a323 d3539313 f373b333     ..C.#.c...S.3.s.
   1076c:	cb4b8b0b eb6bab2b db5b9b1b fb7bbb3b     ..K.+.k...[.;.{.
   1077c:	c7478707 e767a727 d7579717 f777b737     ..G.'.g...W.7.w.
   1078c:	cf4f8f0f ef6faf2f df5f9f1f ff7fbf3f     ..O./.o..._.?...
   1079c:	4152564e 49422e4d 0000004e 61432021     NVRAM.BIN...! Ca
   107ac:	2074276e 6e65706f 6c696620 00272065     n't open file '.
   107bc:	00212027 276e6143 72632074 65746165     ' !.Can't create
   107cc:	74657320 676e6974 69662073 0021656c      settings file!.
   107dc:	74746553 73676e69 6c696620 6f6e2065     Settings file no
   107ec:	6f662074 2e646e75 65724320 6e697461     t found. Creatin
   107fc:	2e2e2e67 ffff0020                       g... ...

00010804 <SPIClass::spi0_hardware>:
   10804:	4004803c 00001000 00001a04 00007fff     <..@............
   10814:	00001011 00006241 0000080c 00000200     ....Ab..........
   10824:	00000200 0000070b 00000240 00000200     ........@.......
   10834:	00000e0d 00000240 00000200 0609020a     ....@...........
   10844:	16151714 0000000f 00000200 00000200     ................
   10854:	00000200 00000200 00000200 00000200     ................
   10864:	00000200 00000200 00000200 02020101     ................
   10874:	08080404 00000010                       ........

0001087c <vtable for LiquidCrystalFast>:
	...
   10884:	0000662d 00009b19 000063f1 000063f5     -f.......c...c..

00010894 <vtable for File>:
	...
   1089c:	000069c9 000069f9 000063f1 00006a85     .i...i...c...j..
   108ac:	000069e1 00006a1d 00006a49 ffff002f     .i...j..Ij../...

000108bc <vtable for SdFile>:
	...
   108c4:	00007e4d 00009b19 000063f1 000063f5     M~.......c...c..
   108d4:	5e3e3c7c 2f3f3d2b 2c3b5d5b 005c222a     |<>^+=?/[];,*"\.
   108e4:	037ff06f 78037003 0f80f013 4770d0fb     o....p.x......pG

000108f4 <digital_pin_to_info_PGM>:
   108f4:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   10904:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   10914:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   10924:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   10934:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   10944:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   10954:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   10964:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   10974:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   10984:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   10994:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   109a4:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   109b4:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   109c4:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   109d4:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   109e4:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   109f4:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
   10a04:	ffff0a0d                                ....

00010a08 <vtable for usb_serial_class>:
	...
   10a10:	00009c8d 00009c85 00009c81 00009c7d     ............}...
   10a20:	00009c79 00009c75 00009c71 00009c6d     y...u...q...m...

00010a30 <usb_endpoint_config_table>:
   10a30:	15191500                                ....

00010a34 <usb_descriptor_list>:
   10a34:	00000100 1fff8780 00000012 00000200     ................
   10a44:	1fff87ac 00000043 00000300 1fff8808     ....C...........
   10a54:	00000000 04090301 1fff8794 00000000     ................
   10a64:	04090302 1fff87f0 00000000 04090303     ................
   10a74:	1fff880c 00000000 00000000 00000000     ................
   10a84:	00000000                                ....

00010a88 <_global_impure_ptr>:
   10a88:	1fff8828 00000043 49534f50 ffff0058     (...C...POSIX...
   10a98:	33323130 37363534 62613938 66656463     0123456789abcdef
   10aa8:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   10ab8:	7a797877 ffffff00                       wxyz....

00010ac0 <_ctype_>:
   10ac0:	20202000 20202020 28282020 20282828     .         ((((( 
   10ad0:	20202020 20202020 20202020 20202020                     
   10ae0:	10108820 10101010 10101010 10101010      ...............
   10af0:	04040410 04040404 10040404 10101010     ................
   10b00:	41411010 41414141 01010101 01010101     ..AAAAAA........
   10b10:	01010101 01010101 01010101 10101010     ................
   10b20:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10b30:	02020202 02020202 02020202 10101010     ................
   10b40:	00000020 00000000 00000000 00000000      ...............
	...
   10bc0:	ffffff00 ffffffff                       ........

00010bc8 <__mprec_tens>:
   10bc8:	00000000 3ff00000 00000000 40240000     .......?......$@
   10bd8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   10be8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   10bf8:	00000000 412e8480 00000000 416312d0     .......A......cA
   10c08:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   10c18:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   10c28:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   10c38:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10c48:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10c58:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10c68:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   10c78:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   10c88:	79d99db4 44ea7843                       ...yCx.D

00010c90 <p05.6085>:
   10c90:	00000005 00000019 0000007d ffffffff     ........}.......

00010ca0 <__mprec_bigtens>:
   10ca0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   10cb0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   10cc0:	7f73bf3c 75154fdd 69666e49 7974696e     <.s..O.uInfinity
   10cd0:	00000000 004e614e                       ....NaN.

00010cd8 <zeroes.7256>:
   10cd8:	30303030 30303030 30303030 30303030     0000000000000000
   10ce8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   10cf8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   10d08:	00000000 33323130 37363534 62613938     ....0123456789ab
   10d18:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00010d28 <blanks.7255>:
   10d28:	20202020 20202020 20202020 20202020                     

00010d38 <_init>:
   10d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d3a:	bf00      	nop
   10d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10d3e:	bc08      	pop	{r3}
   10d40:	469e      	mov	lr, r3
   10d42:	4770      	bx	lr

00010d44 <__init_array_start>:
   10d44:	0000bf99 	.word	0x0000bf99

00010d48 <__frame_dummy_init_array_entry>:
   10d48:	00000435 000006e9 000038e1 00005815     5........8...X..
   10d58:	000059f1 00006225 00006eb5 0000764d     .Y..%b...n..Mv..

Disassembly of section .fini:

00010d68 <_fini>:
   10d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d6a:	bf00      	nop
